lockVersion: 2.0.0
id: b9c55a23-7b11-48d6-bac6-dda09d2e50ba
management:
  docChecksum: 0682067efdca9ba12599ed6f5b2b37ce
  docVersion: 1.0.0
  speakeasyVersion: 1.631.0
  generationVersion: 2.716.10
  releaseVersion: 0.2.0
  configChecksum: 81c5602d013ec69c15b4200630e1f641
  repoURL: https://github.com/charliedevelops/dokploy-sdk-ts.git
  installationURL: https://github.com/charliedevelops/dokploy-sdk-ts
  published: true
features:
  typescript:
    additionalDependencies: 0.1.0
    constsAndDefaults: 0.1.12
    core: 3.21.25
    defaultEnabledRetries: 0.1.0
    devContainers: 2.90.1
    enumUnions: 0.1.0
    envVarSecurityUsage: 0.1.2
    globalSecurity: 2.82.14
    globalSecurityCallbacks: 0.1.0
    globalSecurityFlattening: 0.1.0
    globalServerURLs: 2.82.5
    groups: 2.81.2
    methodArguments: 0.1.2
    nameOverrides: 2.81.2
    nullables: 0.1.1
    responseFormat: 0.2.3
    retries: 2.83.0
    sdkHooks: 0.3.0
    unions: 2.85.12
generatedFiles:
  - .devcontainer/README.md
  - .devcontainer/devcontainer.json
  - .devcontainer/setup.sh
  - .gitattributes
  - .npmignore
  - FUNCTIONS.md
  - RUNTIMES.md
  - USAGE.md
  - docs/lib/utils/retryconfig.md
  - docs/models/errort.md
  - docs/models/issue.md
  - docs/models/operations/additionalport.md
  - docs/models/operations/adminsetupmonitoringcontainers.md
  - docs/models/operations/adminsetupmonitoringmetricsconfig.md
  - docs/models/operations/adminsetupmonitoringrequest.md
  - docs/models/operations/adminsetupmonitoringserver.md
  - docs/models/operations/adminsetupmonitoringservices.md
  - docs/models/operations/adminsetupmonitoringthresholds.md
  - docs/models/operations/aicreaterequest.md
  - docs/models/operations/aideleterequest.md
  - docs/models/operations/aideploydomain.md
  - docs/models/operations/aideployrequest.md
  - docs/models/operations/aigetmodelsrequest.md
  - docs/models/operations/aigetrequest.md
  - docs/models/operations/aionerequest.md
  - docs/models/operations/aisuggestrequest.md
  - docs/models/operations/aiupdaterequest.md
  - docs/models/operations/applicationcanceldeploymentrequest.md
  - docs/models/operations/applicationcleanqueuesrequest.md
  - docs/models/operations/applicationcreateapplicationstatus.md
  - docs/models/operations/applicationcreatebuildtype.md
  - docs/models/operations/applicationcreatedriveropts.md
  - docs/models/operations/applicationcreateglobal.md
  - docs/models/operations/applicationcreateglobaljob.md
  - docs/models/operations/applicationcreatehealthcheckswarm.md
  - docs/models/operations/applicationcreatemodeswarm.md
  - docs/models/operations/applicationcreatenetworkswarm.md
  - docs/models/operations/applicationcreateplacementswarm.md
  - docs/models/operations/applicationcreateplatform.md
  - docs/models/operations/applicationcreatepreference.md
  - docs/models/operations/applicationcreatepreviewcertificatetype.md
  - docs/models/operations/applicationcreatereplicated.md
  - docs/models/operations/applicationcreatereplicatedjob.md
  - docs/models/operations/applicationcreaterequest.md
  - docs/models/operations/applicationcreateresponse.md
  - docs/models/operations/applicationcreateresponsebody.md
  - docs/models/operations/applicationcreaterestartpolicyswarm.md
  - docs/models/operations/applicationcreaterollbackconfigswarm.md
  - docs/models/operations/applicationcreatesourcetype.md
  - docs/models/operations/applicationcreatespread.md
  - docs/models/operations/applicationcreatetriggertype.md
  - docs/models/operations/applicationcreateupdateconfigswarm.md
  - docs/models/operations/applicationdeleteapplicationstatus.md
  - docs/models/operations/applicationdeletebitbucket.md
  - docs/models/operations/applicationdeletebuildtype.md
  - docs/models/operations/applicationdeletecertificatetype.md
  - docs/models/operations/applicationdeletedeployment.md
  - docs/models/operations/applicationdeletedomain.md
  - docs/models/operations/applicationdeletedomaintype.md
  - docs/models/operations/applicationdeletedriveropts.md
  - docs/models/operations/applicationdeleteenvironment.md
  - docs/models/operations/applicationdeletegitea.md
  - docs/models/operations/applicationdeletegithub.md
  - docs/models/operations/applicationdeletegitlab.md
  - docs/models/operations/applicationdeleteglobal.md
  - docs/models/operations/applicationdeleteglobaljob.md
  - docs/models/operations/applicationdeletehealthcheckswarm.md
  - docs/models/operations/applicationdeletemetricsconfigenum.md
  - docs/models/operations/applicationdeletemetricsconfigunion1.md
  - docs/models/operations/applicationdeletemetricsconfigunion2.md
  - docs/models/operations/applicationdeletemodeswarm.md
  - docs/models/operations/applicationdeletemount.md
  - docs/models/operations/applicationdeletenetworkswarm.md
  - docs/models/operations/applicationdeleteplacementswarm.md
  - docs/models/operations/applicationdeleteplatform.md
  - docs/models/operations/applicationdeleteport.md
  - docs/models/operations/applicationdeletepreference.md
  - docs/models/operations/applicationdeletepreviewcertificatetype.md
  - docs/models/operations/applicationdeletepreviewdeployment.md
  - docs/models/operations/applicationdeletepreviewstatus.md
  - docs/models/operations/applicationdeleteproject.md
  - docs/models/operations/applicationdeleteprotocol.md
  - docs/models/operations/applicationdeletepublishmode.md
  - docs/models/operations/applicationdeleteredirect.md
  - docs/models/operations/applicationdeleteregistry.md
  - docs/models/operations/applicationdeleteregistrytype.md
  - docs/models/operations/applicationdeletereplicated.md
  - docs/models/operations/applicationdeletereplicatedjob.md
  - docs/models/operations/applicationdeleterequest.md
  - docs/models/operations/applicationdeleteresponse.md
  - docs/models/operations/applicationdeleteresponsebody.md
  - docs/models/operations/applicationdeleterestartpolicyswarm.md
  - docs/models/operations/applicationdeleterollbackconfigswarm.md
  - docs/models/operations/applicationdeletesecurity.md
  - docs/models/operations/applicationdeleteserver.md
  - docs/models/operations/applicationdeleteserverstatus.md
  - docs/models/operations/applicationdeleteservicetype.md
  - docs/models/operations/applicationdeletesourcetype.md
  - docs/models/operations/applicationdeletespread.md
  - docs/models/operations/applicationdeletestatus.md
  - docs/models/operations/applicationdeletetriggertype.md
  - docs/models/operations/applicationdeletetype.md
  - docs/models/operations/applicationdeleteupdateconfigswarm.md
  - docs/models/operations/applicationdeployrequest.md
  - docs/models/operations/applicationdisconnectgitproviderrequest.md
  - docs/models/operations/applicationdisconnectgitproviderresponse.md
  - docs/models/operations/applicationmarkrunningrequest.md
  - docs/models/operations/applicationmoveapplicationstatus.md
  - docs/models/operations/applicationmovebuildtype.md
  - docs/models/operations/applicationmovedriveropts.md
  - docs/models/operations/applicationmoveglobal.md
  - docs/models/operations/applicationmoveglobaljob.md
  - docs/models/operations/applicationmovehealthcheckswarm.md
  - docs/models/operations/applicationmovemodeswarm.md
  - docs/models/operations/applicationmovenetworkswarm.md
  - docs/models/operations/applicationmoveplacementswarm.md
  - docs/models/operations/applicationmoveplatform.md
  - docs/models/operations/applicationmovepreference.md
  - docs/models/operations/applicationmovepreviewcertificatetype.md
  - docs/models/operations/applicationmovereplicated.md
  - docs/models/operations/applicationmovereplicatedjob.md
  - docs/models/operations/applicationmoverequest.md
  - docs/models/operations/applicationmoveresponse.md
  - docs/models/operations/applicationmoveresponsebody.md
  - docs/models/operations/applicationmoverestartpolicyswarm.md
  - docs/models/operations/applicationmoverollbackconfigswarm.md
  - docs/models/operations/applicationmovesourcetype.md
  - docs/models/operations/applicationmovespread.md
  - docs/models/operations/applicationmovetriggertype.md
  - docs/models/operations/applicationmoveupdateconfigswarm.md
  - docs/models/operations/applicationoneapplicationstatus.md
  - docs/models/operations/applicationonebitbucket.md
  - docs/models/operations/applicationonebuildtype.md
  - docs/models/operations/applicationonecertificatetype.md
  - docs/models/operations/applicationonedeployment.md
  - docs/models/operations/applicationonedomain.md
  - docs/models/operations/applicationonedomaintype.md
  - docs/models/operations/applicationonedriveropts.md
  - docs/models/operations/applicationoneenvironment.md
  - docs/models/operations/applicationonegitea.md
  - docs/models/operations/applicationonegithub.md
  - docs/models/operations/applicationonegitlab.md
  - docs/models/operations/applicationoneglobal.md
  - docs/models/operations/applicationoneglobaljob.md
  - docs/models/operations/applicationonehealthcheckswarm.md
  - docs/models/operations/applicationonemetricsconfigenum.md
  - docs/models/operations/applicationonemetricsconfigunion1.md
  - docs/models/operations/applicationonemetricsconfigunion2.md
  - docs/models/operations/applicationonemodeswarm.md
  - docs/models/operations/applicationonemount.md
  - docs/models/operations/applicationonenetworkswarm.md
  - docs/models/operations/applicationoneplacementswarm.md
  - docs/models/operations/applicationoneplatform.md
  - docs/models/operations/applicationoneport.md
  - docs/models/operations/applicationonepreference.md
  - docs/models/operations/applicationonepreviewcertificatetype.md
  - docs/models/operations/applicationonepreviewdeployment.md
  - docs/models/operations/applicationonepreviewstatus.md
  - docs/models/operations/applicationoneproject.md
  - docs/models/operations/applicationoneprotocol.md
  - docs/models/operations/applicationonepublishmode.md
  - docs/models/operations/applicationoneredirect.md
  - docs/models/operations/applicationoneregistry.md
  - docs/models/operations/applicationoneregistrytype.md
  - docs/models/operations/applicationonereplicated.md
  - docs/models/operations/applicationonereplicatedjob.md
  - docs/models/operations/applicationonerequest.md
  - docs/models/operations/applicationoneresponse.md
  - docs/models/operations/applicationoneresponsebody.md
  - docs/models/operations/applicationonerestartpolicyswarm.md
  - docs/models/operations/applicationonerollbackconfigswarm.md
  - docs/models/operations/applicationonesecurity.md
  - docs/models/operations/applicationoneserver.md
  - docs/models/operations/applicationoneserverstatus.md
  - docs/models/operations/applicationoneservicetype.md
  - docs/models/operations/applicationonesourcetype.md
  - docs/models/operations/applicationonespread.md
  - docs/models/operations/applicationonestatus.md
  - docs/models/operations/applicationonetriggertype.md
  - docs/models/operations/applicationonetype.md
  - docs/models/operations/applicationoneupdateconfigswarm.md
  - docs/models/operations/applicationreadappmonitoringrequest.md
  - docs/models/operations/applicationreadappmonitoringresponse.md
  - docs/models/operations/applicationreadappmonitoringresponsebody.md
  - docs/models/operations/applicationreadtraefikconfigrequest.md
  - docs/models/operations/applicationredeployrequest.md
  - docs/models/operations/applicationrefreshtokenrequest.md
  - docs/models/operations/applicationreloadrequest.md
  - docs/models/operations/applicationreloadresponse.md
  - docs/models/operations/applicationsavebitbucketproviderrequest.md
  - docs/models/operations/applicationsavebitbucketproviderresponse.md
  - docs/models/operations/applicationsavebuildtypebuildtype.md
  - docs/models/operations/applicationsavebuildtyperequest.md
  - docs/models/operations/applicationsavebuildtyperesponse.md
  - docs/models/operations/applicationsavedockerproviderrequest.md
  - docs/models/operations/applicationsavedockerproviderresponse.md
  - docs/models/operations/applicationsaveenvironmentrequest.md
  - docs/models/operations/applicationsaveenvironmentresponse.md
  - docs/models/operations/applicationsavegiteaproviderrequest.md
  - docs/models/operations/applicationsavegiteaproviderresponse.md
  - docs/models/operations/applicationsavegithubproviderrequest.md
  - docs/models/operations/applicationsavegithubproviderresponse.md
  - docs/models/operations/applicationsavegithubprovidertriggertype.md
  - docs/models/operations/applicationsavegitlabproviderrequest.md
  - docs/models/operations/applicationsavegitlabproviderresponse.md
  - docs/models/operations/applicationsavegitprodiverrequest.md
  - docs/models/operations/applicationsavegitprodiverresponse.md
  - docs/models/operations/applicationstartapplicationstatus.md
  - docs/models/operations/applicationstartbitbucket.md
  - docs/models/operations/applicationstartbuildtype.md
  - docs/models/operations/applicationstartcertificatetype.md
  - docs/models/operations/applicationstartdeployment.md
  - docs/models/operations/applicationstartdomain.md
  - docs/models/operations/applicationstartdomaintype.md
  - docs/models/operations/applicationstartdriveropts.md
  - docs/models/operations/applicationstartenvironment.md
  - docs/models/operations/applicationstartgitea.md
  - docs/models/operations/applicationstartgithub.md
  - docs/models/operations/applicationstartgitlab.md
  - docs/models/operations/applicationstartglobal.md
  - docs/models/operations/applicationstartglobaljob.md
  - docs/models/operations/applicationstarthealthcheckswarm.md
  - docs/models/operations/applicationstartmetricsconfigenum.md
  - docs/models/operations/applicationstartmetricsconfigunion1.md
  - docs/models/operations/applicationstartmetricsconfigunion2.md
  - docs/models/operations/applicationstartmodeswarm.md
  - docs/models/operations/applicationstartmount.md
  - docs/models/operations/applicationstartnetworkswarm.md
  - docs/models/operations/applicationstartplacementswarm.md
  - docs/models/operations/applicationstartplatform.md
  - docs/models/operations/applicationstartport.md
  - docs/models/operations/applicationstartpreference.md
  - docs/models/operations/applicationstartpreviewcertificatetype.md
  - docs/models/operations/applicationstartpreviewdeployment.md
  - docs/models/operations/applicationstartpreviewstatus.md
  - docs/models/operations/applicationstartproject.md
  - docs/models/operations/applicationstartprotocol.md
  - docs/models/operations/applicationstartpublishmode.md
  - docs/models/operations/applicationstartredirect.md
  - docs/models/operations/applicationstartregistry.md
  - docs/models/operations/applicationstartregistrytype.md
  - docs/models/operations/applicationstartreplicated.md
  - docs/models/operations/applicationstartreplicatedjob.md
  - docs/models/operations/applicationstartrequest.md
  - docs/models/operations/applicationstartresponse.md
  - docs/models/operations/applicationstartresponsebody.md
  - docs/models/operations/applicationstartrestartpolicyswarm.md
  - docs/models/operations/applicationstartrollbackconfigswarm.md
  - docs/models/operations/applicationstartsecurity.md
  - docs/models/operations/applicationstartserver.md
  - docs/models/operations/applicationstartserverstatus.md
  - docs/models/operations/applicationstartservicetype.md
  - docs/models/operations/applicationstartsourcetype.md
  - docs/models/operations/applicationstartspread.md
  - docs/models/operations/applicationstartstatus.md
  - docs/models/operations/applicationstarttriggertype.md
  - docs/models/operations/applicationstarttype.md
  - docs/models/operations/applicationstartupdateconfigswarm.md
  - docs/models/operations/applicationstopapplicationstatus.md
  - docs/models/operations/applicationstopbitbucket.md
  - docs/models/operations/applicationstopbuildtype.md
  - docs/models/operations/applicationstopcertificatetype.md
  - docs/models/operations/applicationstopdeployment.md
  - docs/models/operations/applicationstopdomain.md
  - docs/models/operations/applicationstopdomaintype.md
  - docs/models/operations/applicationstopdriveropts.md
  - docs/models/operations/applicationstopenvironment.md
  - docs/models/operations/applicationstopgitea.md
  - docs/models/operations/applicationstopgithub.md
  - docs/models/operations/applicationstopgitlab.md
  - docs/models/operations/applicationstopglobal.md
  - docs/models/operations/applicationstopglobaljob.md
  - docs/models/operations/applicationstophealthcheckswarm.md
  - docs/models/operations/applicationstopmetricsconfigenum.md
  - docs/models/operations/applicationstopmetricsconfigunion1.md
  - docs/models/operations/applicationstopmetricsconfigunion2.md
  - docs/models/operations/applicationstopmodeswarm.md
  - docs/models/operations/applicationstopmount.md
  - docs/models/operations/applicationstopnetworkswarm.md
  - docs/models/operations/applicationstopplacementswarm.md
  - docs/models/operations/applicationstopplatform.md
  - docs/models/operations/applicationstopport.md
  - docs/models/operations/applicationstoppreference.md
  - docs/models/operations/applicationstoppreviewcertificatetype.md
  - docs/models/operations/applicationstoppreviewdeployment.md
  - docs/models/operations/applicationstoppreviewstatus.md
  - docs/models/operations/applicationstopproject.md
  - docs/models/operations/applicationstopprotocol.md
  - docs/models/operations/applicationstoppublishmode.md
  - docs/models/operations/applicationstopredirect.md
  - docs/models/operations/applicationstopregistry.md
  - docs/models/operations/applicationstopregistrytype.md
  - docs/models/operations/applicationstopreplicated.md
  - docs/models/operations/applicationstopreplicatedjob.md
  - docs/models/operations/applicationstoprequest.md
  - docs/models/operations/applicationstopresponse.md
  - docs/models/operations/applicationstopresponsebody.md
  - docs/models/operations/applicationstoprestartpolicyswarm.md
  - docs/models/operations/applicationstoprollbackconfigswarm.md
  - docs/models/operations/applicationstopsecurity.md
  - docs/models/operations/applicationstopserver.md
  - docs/models/operations/applicationstopserverstatus.md
  - docs/models/operations/applicationstopservicetype.md
  - docs/models/operations/applicationstopsourcetype.md
  - docs/models/operations/applicationstopspread.md
  - docs/models/operations/applicationstopstatus.md
  - docs/models/operations/applicationstoptriggertype.md
  - docs/models/operations/applicationstoptype.md
  - docs/models/operations/applicationstopupdateconfigswarm.md
  - docs/models/operations/applicationupdateapplicationstatus.md
  - docs/models/operations/applicationupdatebuildtype.md
  - docs/models/operations/applicationupdatedriveropts.md
  - docs/models/operations/applicationupdateglobal.md
  - docs/models/operations/applicationupdateglobaljob.md
  - docs/models/operations/applicationupdatehealthcheckswarm.md
  - docs/models/operations/applicationupdatemodeswarm.md
  - docs/models/operations/applicationupdatenetworkswarm.md
  - docs/models/operations/applicationupdateplacementswarm.md
  - docs/models/operations/applicationupdateplatform.md
  - docs/models/operations/applicationupdatepreference.md
  - docs/models/operations/applicationupdatepreviewcertificatetype.md
  - docs/models/operations/applicationupdatereplicated.md
  - docs/models/operations/applicationupdatereplicatedjob.md
  - docs/models/operations/applicationupdaterequest.md
  - docs/models/operations/applicationupdateresponse.md
  - docs/models/operations/applicationupdaterestartpolicyswarm.md
  - docs/models/operations/applicationupdaterollbackconfigswarm.md
  - docs/models/operations/applicationupdatesourcetype.md
  - docs/models/operations/applicationupdatespread.md
  - docs/models/operations/applicationupdatetraefikconfigrequest.md
  - docs/models/operations/applicationupdatetriggertype.md
  - docs/models/operations/applicationupdateupdateconfigswarm.md
  - docs/models/operations/apptype.md
  - docs/models/operations/apptypedockercompose.md
  - docs/models/operations/apptypestack.md
  - docs/models/operations/backupcreatebackuptype.md
  - docs/models/operations/backupcreatedatabasetype.md
  - docs/models/operations/backupcreaterequest.md
  - docs/models/operations/backuplistbackupfilesrequest.md
  - docs/models/operations/backupmanualbackupcomposerequest.md
  - docs/models/operations/backupmanualbackupmariadbrequest.md
  - docs/models/operations/backupmanualbackupmongorequest.md
  - docs/models/operations/backupmanualbackupmysqlrequest.md
  - docs/models/operations/backupmanualbackuppostgresrequest.md
  - docs/models/operations/backupmanualbackupwebserverrequest.md
  - docs/models/operations/backuponerequest.md
  - docs/models/operations/backupremoverequest.md
  - docs/models/operations/backupupdatedatabasetype.md
  - docs/models/operations/backupupdaterequest.md
  - docs/models/operations/bitbucketbitbucketprovidersgitprovider.md
  - docs/models/operations/bitbucketbitbucketprovidersprovidertype.md
  - docs/models/operations/bitbucketbitbucketprovidersresponse.md
  - docs/models/operations/bitbucketbitbucketprovidersresponsebody.md
  - docs/models/operations/bitbucketcreaterequest.md
  - docs/models/operations/bitbucketgetbitbucketbranchesrequest.md
  - docs/models/operations/bitbucketgetbitbucketrepositoriesrequest.md
  - docs/models/operations/bitbucketonegitprovider.md
  - docs/models/operations/bitbucketoneprovidertype.md
  - docs/models/operations/bitbucketonerequest.md
  - docs/models/operations/bitbucketoneresponse.md
  - docs/models/operations/bitbucketoneresponsebody.md
  - docs/models/operations/bitbuckettestconnectionrequest.md
  - docs/models/operations/bitbuckettestconnectionresponse.md
  - docs/models/operations/bitbucketupdaterequest.md
  - docs/models/operations/bitbucketupdateresponse.md
  - docs/models/operations/bitbucketupdateresponsebody.md
  - docs/models/operations/block.md
  - docs/models/operations/blockvalue.md
  - docs/models/operations/certificatesallresponse.md
  - docs/models/operations/certificatesallresponsebody.md
  - docs/models/operations/certificatescreaterequest.md
  - docs/models/operations/certificatescreateresponse.md
  - docs/models/operations/certificatescreateresponsebody.md
  - docs/models/operations/certificatesonerequest.md
  - docs/models/operations/certificatesoneresponse.md
  - docs/models/operations/certificatesoneresponsebody.md
  - docs/models/operations/certificatesremoverequest.md
  - docs/models/operations/certificatesremoveresponse.md
  - docs/models/operations/certificatesremoveresponsebody.md
  - docs/models/operations/clusteraddmanagerrequest.md
  - docs/models/operations/clusteraddworkerrequest.md
  - docs/models/operations/clustergetnodesrequest.md
  - docs/models/operations/clusterremoveworkerrequest.md
  - docs/models/operations/composecanceldeploymentrequest.md
  - docs/models/operations/composecleanqueuesrequest.md
  - docs/models/operations/composecreatecomposetype.md
  - docs/models/operations/composecreaterequest.md
  - docs/models/operations/composedeleterequest.md
  - docs/models/operations/composedeployrequest.md
  - docs/models/operations/composedeploytemplaterequest.md
  - docs/models/operations/composedisconnectgitproviderrequest.md
  - docs/models/operations/composefetchsourcetyperequest.md
  - docs/models/operations/composegetconvertedcomposerequest.md
  - docs/models/operations/composegetdefaultcommandrequest.md
  - docs/models/operations/composegettagsrequest.md
  - docs/models/operations/composeimportrequest.md
  - docs/models/operations/composeisolateddeploymentrequest.md
  - docs/models/operations/composeloadmountsbyservicerequest.md
  - docs/models/operations/composemoverequest.md
  - docs/models/operations/composeonerequest.md
  - docs/models/operations/composeprocesstemplaterequest.md
  - docs/models/operations/composerandomizecomposerequest.md
  - docs/models/operations/composeredeployrequest.md
  - docs/models/operations/composerefreshtokenrequest.md
  - docs/models/operations/composestartrequest.md
  - docs/models/operations/composestoprequest.md
  - docs/models/operations/composetemplatesrequest.md
  - docs/models/operations/composeupdatecomposestatus.md
  - docs/models/operations/composeupdatecomposetype.md
  - docs/models/operations/composeupdaterequest.md
  - docs/models/operations/composeupdatesourcetype.md
  - docs/models/operations/composeupdatetriggertype.md
  - docs/models/operations/configfile.md
  - docs/models/operations/cpu.md
  - docs/models/operations/deploymentallbycomposerequest.md
  - docs/models/operations/deploymentallbycomposeresponse.md
  - docs/models/operations/deploymentallbycomposeresponsebody.md
  - docs/models/operations/deploymentallbycomposestatus.md
  - docs/models/operations/deploymentallbyserverrequest.md
  - docs/models/operations/deploymentallbyserverresponse.md
  - docs/models/operations/deploymentallbyserverresponsebody.md
  - docs/models/operations/deploymentallbyserverstatus.md
  - docs/models/operations/deploymentallbytyperequest.md
  - docs/models/operations/deploymentallbytyperesponse.md
  - docs/models/operations/deploymentallbytyperesponsebody.md
  - docs/models/operations/deploymentallbytypestatus.md
  - docs/models/operations/deploymentallbytypetype.md
  - docs/models/operations/deploymentallrequest.md
  - docs/models/operations/deploymentallresponse.md
  - docs/models/operations/deploymentallresponsebody.md
  - docs/models/operations/deploymentallstatus.md
  - docs/models/operations/deploymentkillprocessrequest.md
  - docs/models/operations/destinationcreaterequest.md
  - docs/models/operations/destinationonerequest.md
  - docs/models/operations/destinationremoverequest.md
  - docs/models/operations/destinationtestconnectionrequest.md
  - docs/models/operations/destinationupdaterequest.md
  - docs/models/operations/disk.md
  - docs/models/operations/dockergetconfigrequest.md
  - docs/models/operations/dockergetcontainersbyapplabelrequest.md
  - docs/models/operations/dockergetcontainersbyapplabeltype.md
  - docs/models/operations/dockergetcontainersbyappnamematchrequest.md
  - docs/models/operations/dockergetcontainersrequest.md
  - docs/models/operations/dockergetservicecontainersbyappnamerequest.md
  - docs/models/operations/dockergetstackcontainersbyappnamerequest.md
  - docs/models/operations/dockerrestartcontainerrequest.md
  - docs/models/operations/domainbyapplicationidcertificatetype.md
  - docs/models/operations/domainbyapplicationiddomaintype.md
  - docs/models/operations/domainbyapplicationidrequest.md
  - docs/models/operations/domainbyapplicationidresponse.md
  - docs/models/operations/domainbyapplicationidresponsebody.md
  - docs/models/operations/domainbycomposeidcertificatetype.md
  - docs/models/operations/domainbycomposeiddomaintype.md
  - docs/models/operations/domainbycomposeidrequest.md
  - docs/models/operations/domainbycomposeidresponse.md
  - docs/models/operations/domainbycomposeidresponsebody.md
  - docs/models/operations/domaincangeneratetraefikmedomainsrequest.md
  - docs/models/operations/domaincreatecertificatetyperequest.md
  - docs/models/operations/domaincreatecertificatetyperesponse.md
  - docs/models/operations/domaincreatedomaintyperequest.md
  - docs/models/operations/domaincreatedomaintyperesponse.md
  - docs/models/operations/domaincreaterequest.md
  - docs/models/operations/domaincreateresponse.md
  - docs/models/operations/domaincreateresponsebody.md
  - docs/models/operations/domaindeletecertificatetype.md
  - docs/models/operations/domaindeletedomaintype.md
  - docs/models/operations/domaindeleterequest.md
  - docs/models/operations/domaindeleteresponse.md
  - docs/models/operations/domaindeleteresponsebody.md
  - docs/models/operations/domaingeneratedomainrequest.md
  - docs/models/operations/domainonecertificatetype.md
  - docs/models/operations/domainonedomaintype.md
  - docs/models/operations/domainonerequest.md
  - docs/models/operations/domainoneresponse.md
  - docs/models/operations/domainoneresponsebody.md
  - docs/models/operations/domainupdatecertificatetyperequest.md
  - docs/models/operations/domainupdatecertificatetyperesponse.md
  - docs/models/operations/domainupdatedomaintyperequest.md
  - docs/models/operations/domainupdatedomaintyperesponse.md
  - docs/models/operations/domainupdaterequest.md
  - docs/models/operations/domainupdateresponse.md
  - docs/models/operations/domainupdateresponsebody.md
  - docs/models/operations/domainvalidatedomainrequest.md
  - docs/models/operations/environmentbyprojectidapplication.md
  - docs/models/operations/environmentbyprojectidapplicationapplicationstatus.md
  - docs/models/operations/environmentbyprojectidapplicationhealthcheckswarmunion.md
  - docs/models/operations/environmentbyprojectidapplicationlabelsswarmunion.md
  - docs/models/operations/environmentbyprojectidapplicationmodeswarmunion.md
  - docs/models/operations/environmentbyprojectidapplicationnetworkswarmunion.md
  - docs/models/operations/environmentbyprojectidapplicationplacementswarmunion.md
  - docs/models/operations/environmentbyprojectidapplicationrestartpolicyswarmunion.md
  - docs/models/operations/environmentbyprojectidapplicationrollbackconfigswarmunion.md
  - docs/models/operations/environmentbyprojectidapplicationsourcetype.md
  - docs/models/operations/environmentbyprojectidapplicationtriggertype.md
  - docs/models/operations/environmentbyprojectidapplicationupdateconfigswarmunion.md
  - docs/models/operations/environmentbyprojectidbuildtype.md
  - docs/models/operations/environmentbyprojectidcompose.md
  - docs/models/operations/environmentbyprojectidcomposesourcetype.md
  - docs/models/operations/environmentbyprojectidcomposestatus.md
  - docs/models/operations/environmentbyprojectidcomposetriggertype.md
  - docs/models/operations/environmentbyprojectidcomposetype.md
  - docs/models/operations/environmentbyprojectidhealthcheckswarmapplicationenum.md
  - docs/models/operations/environmentbyprojectidhealthcheckswarmapplicationunion.md
  - docs/models/operations/environmentbyprojectidhealthcheckswarmmariadbenum.md
  - docs/models/operations/environmentbyprojectidhealthcheckswarmmariadbunion.md
  - docs/models/operations/environmentbyprojectidhealthcheckswarmmongoenum.md
  - docs/models/operations/environmentbyprojectidhealthcheckswarmmongounion.md
  - docs/models/operations/environmentbyprojectidhealthcheckswarmmysqlenum.md
  - docs/models/operations/environmentbyprojectidhealthcheckswarmmysqlunion.md
  - docs/models/operations/environmentbyprojectidhealthcheckswarmpostgreenum.md
  - docs/models/operations/environmentbyprojectidhealthcheckswarmpostgreunion.md
  - docs/models/operations/environmentbyprojectidhealthcheckswarmredienum.md
  - docs/models/operations/environmentbyprojectidhealthcheckswarmrediunion.md
  - docs/models/operations/environmentbyprojectidlabelsswarmapplicationenum.md
  - docs/models/operations/environmentbyprojectidlabelsswarmapplicationunion.md
  - docs/models/operations/environmentbyprojectidlabelsswarmmariadbenum.md
  - docs/models/operations/environmentbyprojectidlabelsswarmmariadbunion.md
  - docs/models/operations/environmentbyprojectidlabelsswarmmongoenum.md
  - docs/models/operations/environmentbyprojectidlabelsswarmmongounion.md
  - docs/models/operations/environmentbyprojectidlabelsswarmmysqlenum.md
  - docs/models/operations/environmentbyprojectidlabelsswarmmysqlunion.md
  - docs/models/operations/environmentbyprojectidlabelsswarmpostgreenum.md
  - docs/models/operations/environmentbyprojectidlabelsswarmpostgreunion.md
  - docs/models/operations/environmentbyprojectidlabelsswarmredienum.md
  - docs/models/operations/environmentbyprojectidlabelsswarmrediunion.md
  - docs/models/operations/environmentbyprojectidmariadb.md
  - docs/models/operations/environmentbyprojectidmariadbapplicationstatus.md
  - docs/models/operations/environmentbyprojectidmariadbhealthcheckswarmunion.md
  - docs/models/operations/environmentbyprojectidmariadblabelsswarmunion.md
  - docs/models/operations/environmentbyprojectidmariadbmodeswarmunion.md
  - docs/models/operations/environmentbyprojectidmariadbnetworkswarmunion.md
  - docs/models/operations/environmentbyprojectidmariadbplacementswarmunion.md
  - docs/models/operations/environmentbyprojectidmariadbrestartpolicyswarmunion.md
  - docs/models/operations/environmentbyprojectidmariadbrollbackconfigswarmunion.md
  - docs/models/operations/environmentbyprojectidmariadbupdateconfigswarmunion.md
  - docs/models/operations/environmentbyprojectidmodeswarmapplicationenum.md
  - docs/models/operations/environmentbyprojectidmodeswarmapplicationunion.md
  - docs/models/operations/environmentbyprojectidmodeswarmmariadbenum.md
  - docs/models/operations/environmentbyprojectidmodeswarmmariadbunion.md
  - docs/models/operations/environmentbyprojectidmodeswarmmongoenum.md
  - docs/models/operations/environmentbyprojectidmodeswarmmongounion.md
  - docs/models/operations/environmentbyprojectidmodeswarmmysqlenum.md
  - docs/models/operations/environmentbyprojectidmodeswarmmysqlunion.md
  - docs/models/operations/environmentbyprojectidmodeswarmpostgreenum.md
  - docs/models/operations/environmentbyprojectidmodeswarmpostgreunion.md
  - docs/models/operations/environmentbyprojectidmodeswarmredienum.md
  - docs/models/operations/environmentbyprojectidmodeswarmrediunion.md
  - docs/models/operations/environmentbyprojectidmongo.md
  - docs/models/operations/environmentbyprojectidmongoapplicationstatus.md
  - docs/models/operations/environmentbyprojectidmongohealthcheckswarmunion.md
  - docs/models/operations/environmentbyprojectidmongolabelsswarmunion.md
  - docs/models/operations/environmentbyprojectidmongomodeswarmunion.md
  - docs/models/operations/environmentbyprojectidmongonetworkswarmunion.md
  - docs/models/operations/environmentbyprojectidmongoplacementswarmunion.md
  - docs/models/operations/environmentbyprojectidmongorestartpolicyswarmunion.md
  - docs/models/operations/environmentbyprojectidmongorollbackconfigswarmunion.md
  - docs/models/operations/environmentbyprojectidmongoupdateconfigswarmunion.md
  - docs/models/operations/environmentbyprojectidmysql.md
  - docs/models/operations/environmentbyprojectidmysqlapplicationstatus.md
  - docs/models/operations/environmentbyprojectidmysqlhealthcheckswarmunion.md
  - docs/models/operations/environmentbyprojectidmysqllabelsswarmunion.md
  - docs/models/operations/environmentbyprojectidmysqlmodeswarmunion.md
  - docs/models/operations/environmentbyprojectidmysqlnetworkswarmunion.md
  - docs/models/operations/environmentbyprojectidmysqlplacementswarmunion.md
  - docs/models/operations/environmentbyprojectidmysqlrestartpolicyswarmunion.md
  - docs/models/operations/environmentbyprojectidmysqlrollbackconfigswarmunion.md
  - docs/models/operations/environmentbyprojectidmysqlupdateconfigswarmunion.md
  - docs/models/operations/environmentbyprojectidnetworkswarmapplicationenum.md
  - docs/models/operations/environmentbyprojectidnetworkswarmapplicationunion.md
  - docs/models/operations/environmentbyprojectidnetworkswarmmariadbenum.md
  - docs/models/operations/environmentbyprojectidnetworkswarmmariadbunion.md
  - docs/models/operations/environmentbyprojectidnetworkswarmmongoenum.md
  - docs/models/operations/environmentbyprojectidnetworkswarmmongounion.md
  - docs/models/operations/environmentbyprojectidnetworkswarmmysqlenum.md
  - docs/models/operations/environmentbyprojectidnetworkswarmmysqlunion.md
  - docs/models/operations/environmentbyprojectidnetworkswarmpostgreenum.md
  - docs/models/operations/environmentbyprojectidnetworkswarmpostgreunion.md
  - docs/models/operations/environmentbyprojectidnetworkswarmredienum.md
  - docs/models/operations/environmentbyprojectidnetworkswarmrediunion.md
  - docs/models/operations/environmentbyprojectidplacementswarmapplicationenum.md
  - docs/models/operations/environmentbyprojectidplacementswarmapplicationunion.md
  - docs/models/operations/environmentbyprojectidplacementswarmmariadbenum.md
  - docs/models/operations/environmentbyprojectidplacementswarmmariadbunion.md
  - docs/models/operations/environmentbyprojectidplacementswarmmongoenum.md
  - docs/models/operations/environmentbyprojectidplacementswarmmongounion.md
  - docs/models/operations/environmentbyprojectidplacementswarmmysqlenum.md
  - docs/models/operations/environmentbyprojectidplacementswarmmysqlunion.md
  - docs/models/operations/environmentbyprojectidplacementswarmpostgreenum.md
  - docs/models/operations/environmentbyprojectidplacementswarmpostgreunion.md
  - docs/models/operations/environmentbyprojectidplacementswarmredienum.md
  - docs/models/operations/environmentbyprojectidplacementswarmrediunion.md
  - docs/models/operations/environmentbyprojectidpostgre.md
  - docs/models/operations/environmentbyprojectidpostgreapplicationstatus.md
  - docs/models/operations/environmentbyprojectidpostgrehealthcheckswarmunion.md
  - docs/models/operations/environmentbyprojectidpostgrelabelsswarmunion.md
  - docs/models/operations/environmentbyprojectidpostgremodeswarmunion.md
  - docs/models/operations/environmentbyprojectidpostgrenetworkswarmunion.md
  - docs/models/operations/environmentbyprojectidpostgreplacementswarmunion.md
  - docs/models/operations/environmentbyprojectidpostgrerestartpolicyswarmunion.md
  - docs/models/operations/environmentbyprojectidpostgrerollbackconfigswarmunion.md
  - docs/models/operations/environmentbyprojectidpostgreupdateconfigswarmunion.md
  - docs/models/operations/environmentbyprojectidpreviewcertificatetype.md
  - docs/models/operations/environmentbyprojectidproject.md
  - docs/models/operations/environmentbyprojectidredi.md
  - docs/models/operations/environmentbyprojectidrediapplicationstatus.md
  - docs/models/operations/environmentbyprojectidredihealthcheckswarmunion.md
  - docs/models/operations/environmentbyprojectidredilabelsswarmunion.md
  - docs/models/operations/environmentbyprojectidredimodeswarmunion.md
  - docs/models/operations/environmentbyprojectidredinetworkswarmunion.md
  - docs/models/operations/environmentbyprojectidrediplacementswarmunion.md
  - docs/models/operations/environmentbyprojectidredirestartpolicyswarmunion.md
  - docs/models/operations/environmentbyprojectidredirollbackconfigswarmunion.md
  - docs/models/operations/environmentbyprojectidrediupdateconfigswarmunion.md
  - docs/models/operations/environmentbyprojectidrequest.md
  - docs/models/operations/environmentbyprojectidresponse.md
  - docs/models/operations/environmentbyprojectidresponsebody.md
  - docs/models/operations/environmentbyprojectidrestartpolicyswarmapplicationenum.md
  - docs/models/operations/environmentbyprojectidrestartpolicyswarmapplicationunion.md
  - docs/models/operations/environmentbyprojectidrestartpolicyswarmmariadbenum.md
  - docs/models/operations/environmentbyprojectidrestartpolicyswarmmariadbunion.md
  - docs/models/operations/environmentbyprojectidrestartpolicyswarmmongoenum.md
  - docs/models/operations/environmentbyprojectidrestartpolicyswarmmongounion.md
  - docs/models/operations/environmentbyprojectidrestartpolicyswarmmysqlenum.md
  - docs/models/operations/environmentbyprojectidrestartpolicyswarmmysqlunion.md
  - docs/models/operations/environmentbyprojectidrestartpolicyswarmpostgreenum.md
  - docs/models/operations/environmentbyprojectidrestartpolicyswarmpostgreunion.md
  - docs/models/operations/environmentbyprojectidrestartpolicyswarmredienum.md
  - docs/models/operations/environmentbyprojectidrestartpolicyswarmrediunion.md
  - docs/models/operations/environmentbyprojectidrollbackconfigswarmapplicationenum.md
  - docs/models/operations/environmentbyprojectidrollbackconfigswarmapplicationunion.md
  - docs/models/operations/environmentbyprojectidrollbackconfigswarmmariadbenum.md
  - docs/models/operations/environmentbyprojectidrollbackconfigswarmmariadbunion.md
  - docs/models/operations/environmentbyprojectidrollbackconfigswarmmongoenum.md
  - docs/models/operations/environmentbyprojectidrollbackconfigswarmmongounion.md
  - docs/models/operations/environmentbyprojectidrollbackconfigswarmmysqlenum.md
  - docs/models/operations/environmentbyprojectidrollbackconfigswarmmysqlunion.md
  - docs/models/operations/environmentbyprojectidrollbackconfigswarmpostgreenum.md
  - docs/models/operations/environmentbyprojectidrollbackconfigswarmpostgreunion.md
  - docs/models/operations/environmentbyprojectidrollbackconfigswarmredienum.md
  - docs/models/operations/environmentbyprojectidrollbackconfigswarmrediunion.md
  - docs/models/operations/environmentbyprojectidupdateconfigswarmapplicationenum.md
  - docs/models/operations/environmentbyprojectidupdateconfigswarmapplicationunion.md
  - docs/models/operations/environmentbyprojectidupdateconfigswarmmariadbenum.md
  - docs/models/operations/environmentbyprojectidupdateconfigswarmmariadbunion.md
  - docs/models/operations/environmentbyprojectidupdateconfigswarmmongoenum.md
  - docs/models/operations/environmentbyprojectidupdateconfigswarmmongounion.md
  - docs/models/operations/environmentbyprojectidupdateconfigswarmmysqlenum.md
  - docs/models/operations/environmentbyprojectidupdateconfigswarmmysqlunion.md
  - docs/models/operations/environmentbyprojectidupdateconfigswarmpostgreenum.md
  - docs/models/operations/environmentbyprojectidupdateconfigswarmpostgreunion.md
  - docs/models/operations/environmentbyprojectidupdateconfigswarmredienum.md
  - docs/models/operations/environmentbyprojectidupdateconfigswarmrediunion.md
  - docs/models/operations/environmentcreaterequest.md
  - docs/models/operations/environmentcreateresponse.md
  - docs/models/operations/environmentcreateresponsebody.md
  - docs/models/operations/environmentduplicaterequest.md
  - docs/models/operations/environmentduplicateresponse.md
  - docs/models/operations/environmentduplicateresponsebody.md
  - docs/models/operations/environmentoneapplication.md
  - docs/models/operations/environmentoneapplicationapplicationstatus.md
  - docs/models/operations/environmentoneapplicationhealthcheckswarmunion.md
  - docs/models/operations/environmentoneapplicationlabelsswarmunion.md
  - docs/models/operations/environmentoneapplicationmodeswarmunion.md
  - docs/models/operations/environmentoneapplicationnetworkswarmunion.md
  - docs/models/operations/environmentoneapplicationplacementswarmunion.md
  - docs/models/operations/environmentoneapplicationrestartpolicyswarmunion.md
  - docs/models/operations/environmentoneapplicationrollbackconfigswarmunion.md
  - docs/models/operations/environmentoneapplicationsourcetype.md
  - docs/models/operations/environmentoneapplicationtriggertype.md
  - docs/models/operations/environmentoneapplicationupdateconfigswarmunion.md
  - docs/models/operations/environmentonebuildtype.md
  - docs/models/operations/environmentonecompose.md
  - docs/models/operations/environmentonecomposesourcetype.md
  - docs/models/operations/environmentonecomposestatus.md
  - docs/models/operations/environmentonecomposetriggertype.md
  - docs/models/operations/environmentonecomposetype.md
  - docs/models/operations/environmentonehealthcheckswarmapplicationenum.md
  - docs/models/operations/environmentonehealthcheckswarmapplicationunion.md
  - docs/models/operations/environmentonehealthcheckswarmmariadbenum.md
  - docs/models/operations/environmentonehealthcheckswarmmariadbunion.md
  - docs/models/operations/environmentonehealthcheckswarmmongoenum.md
  - docs/models/operations/environmentonehealthcheckswarmmongounion.md
  - docs/models/operations/environmentonehealthcheckswarmmysqlenum.md
  - docs/models/operations/environmentonehealthcheckswarmmysqlunion.md
  - docs/models/operations/environmentonehealthcheckswarmpostgreenum.md
  - docs/models/operations/environmentonehealthcheckswarmpostgreunion.md
  - docs/models/operations/environmentonehealthcheckswarmredienum.md
  - docs/models/operations/environmentonehealthcheckswarmrediunion.md
  - docs/models/operations/environmentonelabelsswarmapplicationenum.md
  - docs/models/operations/environmentonelabelsswarmapplicationunion.md
  - docs/models/operations/environmentonelabelsswarmmariadbenum.md
  - docs/models/operations/environmentonelabelsswarmmariadbunion.md
  - docs/models/operations/environmentonelabelsswarmmongoenum.md
  - docs/models/operations/environmentonelabelsswarmmongounion.md
  - docs/models/operations/environmentonelabelsswarmmysqlenum.md
  - docs/models/operations/environmentonelabelsswarmmysqlunion.md
  - docs/models/operations/environmentonelabelsswarmpostgreenum.md
  - docs/models/operations/environmentonelabelsswarmpostgreunion.md
  - docs/models/operations/environmentonelabelsswarmredienum.md
  - docs/models/operations/environmentonelabelsswarmrediunion.md
  - docs/models/operations/environmentonemariadb.md
  - docs/models/operations/environmentonemariadbapplicationstatus.md
  - docs/models/operations/environmentonemariadbhealthcheckswarmunion.md
  - docs/models/operations/environmentonemariadblabelsswarmunion.md
  - docs/models/operations/environmentonemariadbmodeswarmunion.md
  - docs/models/operations/environmentonemariadbnetworkswarmunion.md
  - docs/models/operations/environmentonemariadbplacementswarmunion.md
  - docs/models/operations/environmentonemariadbrestartpolicyswarmunion.md
  - docs/models/operations/environmentonemariadbrollbackconfigswarmunion.md
  - docs/models/operations/environmentonemariadbupdateconfigswarmunion.md
  - docs/models/operations/environmentonemodeswarmapplicationenum.md
  - docs/models/operations/environmentonemodeswarmapplicationunion.md
  - docs/models/operations/environmentonemodeswarmmariadbenum.md
  - docs/models/operations/environmentonemodeswarmmariadbunion.md
  - docs/models/operations/environmentonemodeswarmmongoenum.md
  - docs/models/operations/environmentonemodeswarmmongounion.md
  - docs/models/operations/environmentonemodeswarmmysqlenum.md
  - docs/models/operations/environmentonemodeswarmmysqlunion.md
  - docs/models/operations/environmentonemodeswarmpostgreenum.md
  - docs/models/operations/environmentonemodeswarmpostgreunion.md
  - docs/models/operations/environmentonemodeswarmredienum.md
  - docs/models/operations/environmentonemodeswarmrediunion.md
  - docs/models/operations/environmentonemongo.md
  - docs/models/operations/environmentonemongoapplicationstatus.md
  - docs/models/operations/environmentonemongohealthcheckswarmunion.md
  - docs/models/operations/environmentonemongolabelsswarmunion.md
  - docs/models/operations/environmentonemongomodeswarmunion.md
  - docs/models/operations/environmentonemongonetworkswarmunion.md
  - docs/models/operations/environmentonemongoplacementswarmunion.md
  - docs/models/operations/environmentonemongorestartpolicyswarmunion.md
  - docs/models/operations/environmentonemongorollbackconfigswarmunion.md
  - docs/models/operations/environmentonemongoupdateconfigswarmunion.md
  - docs/models/operations/environmentonemysql.md
  - docs/models/operations/environmentonemysqlapplicationstatus.md
  - docs/models/operations/environmentonemysqlhealthcheckswarmunion.md
  - docs/models/operations/environmentonemysqllabelsswarmunion.md
  - docs/models/operations/environmentonemysqlmodeswarmunion.md
  - docs/models/operations/environmentonemysqlnetworkswarmunion.md
  - docs/models/operations/environmentonemysqlplacementswarmunion.md
  - docs/models/operations/environmentonemysqlrestartpolicyswarmunion.md
  - docs/models/operations/environmentonemysqlrollbackconfigswarmunion.md
  - docs/models/operations/environmentonemysqlupdateconfigswarmunion.md
  - docs/models/operations/environmentonenetworkswarmapplicationenum.md
  - docs/models/operations/environmentonenetworkswarmapplicationunion.md
  - docs/models/operations/environmentonenetworkswarmmariadbenum.md
  - docs/models/operations/environmentonenetworkswarmmariadbunion.md
  - docs/models/operations/environmentonenetworkswarmmongoenum.md
  - docs/models/operations/environmentonenetworkswarmmongounion.md
  - docs/models/operations/environmentonenetworkswarmmysqlenum.md
  - docs/models/operations/environmentonenetworkswarmmysqlunion.md
  - docs/models/operations/environmentonenetworkswarmpostgreenum.md
  - docs/models/operations/environmentonenetworkswarmpostgreunion.md
  - docs/models/operations/environmentonenetworkswarmredienum.md
  - docs/models/operations/environmentonenetworkswarmrediunion.md
  - docs/models/operations/environmentoneplacementswarmapplicationenum.md
  - docs/models/operations/environmentoneplacementswarmapplicationunion.md
  - docs/models/operations/environmentoneplacementswarmmariadbenum.md
  - docs/models/operations/environmentoneplacementswarmmariadbunion.md
  - docs/models/operations/environmentoneplacementswarmmongoenum.md
  - docs/models/operations/environmentoneplacementswarmmongounion.md
  - docs/models/operations/environmentoneplacementswarmmysqlenum.md
  - docs/models/operations/environmentoneplacementswarmmysqlunion.md
  - docs/models/operations/environmentoneplacementswarmpostgreenum.md
  - docs/models/operations/environmentoneplacementswarmpostgreunion.md
  - docs/models/operations/environmentoneplacementswarmredienum.md
  - docs/models/operations/environmentoneplacementswarmrediunion.md
  - docs/models/operations/environmentonepostgre.md
  - docs/models/operations/environmentonepostgreapplicationstatus.md
  - docs/models/operations/environmentonepostgrehealthcheckswarmunion.md
  - docs/models/operations/environmentonepostgrelabelsswarmunion.md
  - docs/models/operations/environmentonepostgremodeswarmunion.md
  - docs/models/operations/environmentonepostgrenetworkswarmunion.md
  - docs/models/operations/environmentonepostgreplacementswarmunion.md
  - docs/models/operations/environmentonepostgrerestartpolicyswarmunion.md
  - docs/models/operations/environmentonepostgrerollbackconfigswarmunion.md
  - docs/models/operations/environmentonepostgreupdateconfigswarmunion.md
  - docs/models/operations/environmentonepreviewcertificatetype.md
  - docs/models/operations/environmentoneproject.md
  - docs/models/operations/environmentoneredi.md
  - docs/models/operations/environmentonerediapplicationstatus.md
  - docs/models/operations/environmentoneredihealthcheckswarmunion.md
  - docs/models/operations/environmentoneredilabelsswarmunion.md
  - docs/models/operations/environmentoneredimodeswarmunion.md
  - docs/models/operations/environmentoneredinetworkswarmunion.md
  - docs/models/operations/environmentonerediplacementswarmunion.md
  - docs/models/operations/environmentoneredirestartpolicyswarmunion.md
  - docs/models/operations/environmentoneredirollbackconfigswarmunion.md
  - docs/models/operations/environmentonerediupdateconfigswarmunion.md
  - docs/models/operations/environmentonerequest.md
  - docs/models/operations/environmentoneresponse.md
  - docs/models/operations/environmentoneresponsebody.md
  - docs/models/operations/environmentonerestartpolicyswarmapplicationenum.md
  - docs/models/operations/environmentonerestartpolicyswarmapplicationunion.md
  - docs/models/operations/environmentonerestartpolicyswarmmariadbenum.md
  - docs/models/operations/environmentonerestartpolicyswarmmariadbunion.md
  - docs/models/operations/environmentonerestartpolicyswarmmongoenum.md
  - docs/models/operations/environmentonerestartpolicyswarmmongounion.md
  - docs/models/operations/environmentonerestartpolicyswarmmysqlenum.md
  - docs/models/operations/environmentonerestartpolicyswarmmysqlunion.md
  - docs/models/operations/environmentonerestartpolicyswarmpostgreenum.md
  - docs/models/operations/environmentonerestartpolicyswarmpostgreunion.md
  - docs/models/operations/environmentonerestartpolicyswarmredienum.md
  - docs/models/operations/environmentonerestartpolicyswarmrediunion.md
  - docs/models/operations/environmentonerollbackconfigswarmapplicationenum.md
  - docs/models/operations/environmentonerollbackconfigswarmapplicationunion.md
  - docs/models/operations/environmentonerollbackconfigswarmmariadbenum.md
  - docs/models/operations/environmentonerollbackconfigswarmmariadbunion.md
  - docs/models/operations/environmentonerollbackconfigswarmmongoenum.md
  - docs/models/operations/environmentonerollbackconfigswarmmongounion.md
  - docs/models/operations/environmentonerollbackconfigswarmmysqlenum.md
  - docs/models/operations/environmentonerollbackconfigswarmmysqlunion.md
  - docs/models/operations/environmentonerollbackconfigswarmpostgreenum.md
  - docs/models/operations/environmentonerollbackconfigswarmpostgreunion.md
  - docs/models/operations/environmentonerollbackconfigswarmredienum.md
  - docs/models/operations/environmentonerollbackconfigswarmrediunion.md
  - docs/models/operations/environmentoneupdateconfigswarmapplicationenum.md
  - docs/models/operations/environmentoneupdateconfigswarmapplicationunion.md
  - docs/models/operations/environmentoneupdateconfigswarmmariadbenum.md
  - docs/models/operations/environmentoneupdateconfigswarmmariadbunion.md
  - docs/models/operations/environmentoneupdateconfigswarmmongoenum.md
  - docs/models/operations/environmentoneupdateconfigswarmmongounion.md
  - docs/models/operations/environmentoneupdateconfigswarmmysqlenum.md
  - docs/models/operations/environmentoneupdateconfigswarmmysqlunion.md
  - docs/models/operations/environmentoneupdateconfigswarmpostgreenum.md
  - docs/models/operations/environmentoneupdateconfigswarmpostgreunion.md
  - docs/models/operations/environmentoneupdateconfigswarmredienum.md
  - docs/models/operations/environmentoneupdateconfigswarmrediunion.md
  - docs/models/operations/environmentremoverequest.md
  - docs/models/operations/environmentremoveresponse.md
  - docs/models/operations/environmentremoveresponsebody.md
  - docs/models/operations/environmentupdaterequest.md
  - docs/models/operations/environmentupdateresponse.md
  - docs/models/operations/environmentupdateresponsebody.md
  - docs/models/operations/giteacreaterequest.md
  - docs/models/operations/giteacreateresponse.md
  - docs/models/operations/giteacreateresponsebody.md
  - docs/models/operations/giteagetgiteabranchesrequest.md
  - docs/models/operations/giteagetgitearepositoriesrequest.md
  - docs/models/operations/giteagetgiteaurlrequest.md
  - docs/models/operations/giteagetgiteaurlresponse.md
  - docs/models/operations/giteagiteaprovidersgitprovider.md
  - docs/models/operations/giteagiteaprovidersprovidertype.md
  - docs/models/operations/giteagiteaprovidersresponse.md
  - docs/models/operations/giteagiteaprovidersresponsebody.md
  - docs/models/operations/giteaonegitprovider.md
  - docs/models/operations/giteaoneprovidertype.md
  - docs/models/operations/giteaonerequest.md
  - docs/models/operations/giteaoneresponse.md
  - docs/models/operations/giteaoneresponsebody.md
  - docs/models/operations/giteatestconnectionrequest.md
  - docs/models/operations/giteatestconnectionresponse.md
  - docs/models/operations/giteaupdaterequest.md
  - docs/models/operations/giteaupdateresponse.md
  - docs/models/operations/giteaupdateresponsebody.md
  - docs/models/operations/githubgetgithubbranchesrequest.md
  - docs/models/operations/githubgetgithubrepositoriesrequest.md
  - docs/models/operations/githubgithubprovidersgitprovider.md
  - docs/models/operations/githubgithubprovidersprovidertype.md
  - docs/models/operations/githubgithubprovidersresponse.md
  - docs/models/operations/githubgithubprovidersresponsebody.md
  - docs/models/operations/githubonegitprovider.md
  - docs/models/operations/githuboneprovidertype.md
  - docs/models/operations/githubonerequest.md
  - docs/models/operations/githuboneresponse.md
  - docs/models/operations/githuboneresponsebody.md
  - docs/models/operations/githubtestconnectionrequest.md
  - docs/models/operations/githubtestconnectionresponse.md
  - docs/models/operations/githubupdaterequest.md
  - docs/models/operations/githubupdateresponse.md
  - docs/models/operations/gitlabcreaterequest.md
  - docs/models/operations/gitlabgetgitlabbranchesrequest.md
  - docs/models/operations/gitlabgetgitlabrepositoriesrequest.md
  - docs/models/operations/gitlabgitlabprovidersgitprovider.md
  - docs/models/operations/gitlabgitlabprovidersprovidertype.md
  - docs/models/operations/gitlabgitlabprovidersresponse.md
  - docs/models/operations/gitlabgitlabprovidersresponsebody.md
  - docs/models/operations/gitlabonegitprovider.md
  - docs/models/operations/gitlaboneprovidertype.md
  - docs/models/operations/gitlabonerequest.md
  - docs/models/operations/gitlaboneresponse.md
  - docs/models/operations/gitlaboneresponsebody.md
  - docs/models/operations/gitlabtestconnectionrequest.md
  - docs/models/operations/gitlabtestconnectionresponse.md
  - docs/models/operations/gitlabupdaterequest.md
  - docs/models/operations/gitlabupdateresponse.md
  - docs/models/operations/gitprovidergetallbitbucket.md
  - docs/models/operations/gitprovidergetallgitea.md
  - docs/models/operations/gitprovidergetallgithub.md
  - docs/models/operations/gitprovidergetallgitlab.md
  - docs/models/operations/gitprovidergetallprovidertype.md
  - docs/models/operations/gitprovidergetallresponse.md
  - docs/models/operations/gitprovidergetallresponsebody.md
  - docs/models/operations/gitproviderremoverequest.md
  - docs/models/operations/gitproviderremoveresponse.md
  - docs/models/operations/gitproviderremoveresponsebody.md
  - docs/models/operations/mariadbchangestatusapplicationstatusrequest.md
  - docs/models/operations/mariadbchangestatusapplicationstatusresponse.md
  - docs/models/operations/mariadbchangestatusbackup.md
  - docs/models/operations/mariadbchangestatusbackuptype.md
  - docs/models/operations/mariadbchangestatusdatabasetype.md
  - docs/models/operations/mariadbchangestatusdriveropts.md
  - docs/models/operations/mariadbchangestatusenvironment.md
  - docs/models/operations/mariadbchangestatusglobal.md
  - docs/models/operations/mariadbchangestatusglobaljob.md
  - docs/models/operations/mariadbchangestatushealthcheckswarm.md
  - docs/models/operations/mariadbchangestatusmariadb.md
  - docs/models/operations/mariadbchangestatusmetadata.md
  - docs/models/operations/mariadbchangestatusmetadataenum.md
  - docs/models/operations/mariadbchangestatusmetadataunion.md
  - docs/models/operations/mariadbchangestatusmetricsconfigenum.md
  - docs/models/operations/mariadbchangestatusmetricsconfigunion1.md
  - docs/models/operations/mariadbchangestatusmetricsconfigunion2.md
  - docs/models/operations/mariadbchangestatusmodeswarm.md
  - docs/models/operations/mariadbchangestatusmongo.md
  - docs/models/operations/mariadbchangestatusmount.md
  - docs/models/operations/mariadbchangestatusmysql.md
  - docs/models/operations/mariadbchangestatusnetworkswarm.md
  - docs/models/operations/mariadbchangestatusplacementswarm.md
  - docs/models/operations/mariadbchangestatusplatform.md
  - docs/models/operations/mariadbchangestatuspostgres.md
  - docs/models/operations/mariadbchangestatuspreference.md
  - docs/models/operations/mariadbchangestatusproject.md
  - docs/models/operations/mariadbchangestatusreplicated.md
  - docs/models/operations/mariadbchangestatusreplicatedjob.md
  - docs/models/operations/mariadbchangestatusrequest.md
  - docs/models/operations/mariadbchangestatusresponse.md
  - docs/models/operations/mariadbchangestatusresponsebody.md
  - docs/models/operations/mariadbchangestatusrestartpolicyswarm.md
  - docs/models/operations/mariadbchangestatusrollbackconfigswarm.md
  - docs/models/operations/mariadbchangestatusserver.md
  - docs/models/operations/mariadbchangestatusserverstatus.md
  - docs/models/operations/mariadbchangestatusservicetype.md
  - docs/models/operations/mariadbchangestatusspread.md
  - docs/models/operations/mariadbchangestatustype.md
  - docs/models/operations/mariadbchangestatusupdateconfigswarm.md
  - docs/models/operations/mariadbcreaterequest.md
  - docs/models/operations/mariadbcreateresponse.md
  - docs/models/operations/mariadbdeployapplicationstatus.md
  - docs/models/operations/mariadbdeploybackup.md
  - docs/models/operations/mariadbdeploybackuptype.md
  - docs/models/operations/mariadbdeploydatabasetype.md
  - docs/models/operations/mariadbdeploydriveropts.md
  - docs/models/operations/mariadbdeployenvironment.md
  - docs/models/operations/mariadbdeployglobal.md
  - docs/models/operations/mariadbdeployglobaljob.md
  - docs/models/operations/mariadbdeployhealthcheckswarm.md
  - docs/models/operations/mariadbdeploymariadb.md
  - docs/models/operations/mariadbdeploymetadata.md
  - docs/models/operations/mariadbdeploymetadataenum.md
  - docs/models/operations/mariadbdeploymetadataunion.md
  - docs/models/operations/mariadbdeploymetricsconfigenum.md
  - docs/models/operations/mariadbdeploymetricsconfigunion1.md
  - docs/models/operations/mariadbdeploymetricsconfigunion2.md
  - docs/models/operations/mariadbdeploymodeswarm.md
  - docs/models/operations/mariadbdeploymongo.md
  - docs/models/operations/mariadbdeploymount.md
  - docs/models/operations/mariadbdeploymysql.md
  - docs/models/operations/mariadbdeploynetworkswarm.md
  - docs/models/operations/mariadbdeployplacementswarm.md
  - docs/models/operations/mariadbdeployplatform.md
  - docs/models/operations/mariadbdeploypostgres.md
  - docs/models/operations/mariadbdeploypreference.md
  - docs/models/operations/mariadbdeployproject.md
  - docs/models/operations/mariadbdeployreplicated.md
  - docs/models/operations/mariadbdeployreplicatedjob.md
  - docs/models/operations/mariadbdeployrequest.md
  - docs/models/operations/mariadbdeployresponse.md
  - docs/models/operations/mariadbdeployresponsebody.md
  - docs/models/operations/mariadbdeployrestartpolicyswarm.md
  - docs/models/operations/mariadbdeployrollbackconfigswarm.md
  - docs/models/operations/mariadbdeployserver.md
  - docs/models/operations/mariadbdeployserverstatus.md
  - docs/models/operations/mariadbdeployservicetype.md
  - docs/models/operations/mariadbdeployspread.md
  - docs/models/operations/mariadbdeploytype.md
  - docs/models/operations/mariadbdeployupdateconfigswarm.md
  - docs/models/operations/mariadbmoveapplicationstatus.md
  - docs/models/operations/mariadbmovedriveropts.md
  - docs/models/operations/mariadbmoveglobal.md
  - docs/models/operations/mariadbmoveglobaljob.md
  - docs/models/operations/mariadbmovehealthcheckswarm.md
  - docs/models/operations/mariadbmovemodeswarm.md
  - docs/models/operations/mariadbmovenetworkswarm.md
  - docs/models/operations/mariadbmoveplacementswarm.md
  - docs/models/operations/mariadbmoveplatform.md
  - docs/models/operations/mariadbmovepreference.md
  - docs/models/operations/mariadbmovereplicated.md
  - docs/models/operations/mariadbmovereplicatedjob.md
  - docs/models/operations/mariadbmoverequest.md
  - docs/models/operations/mariadbmoveresponse.md
  - docs/models/operations/mariadbmoveresponsebody.md
  - docs/models/operations/mariadbmoverestartpolicyswarm.md
  - docs/models/operations/mariadbmoverollbackconfigswarm.md
  - docs/models/operations/mariadbmovespread.md
  - docs/models/operations/mariadbmoveupdateconfigswarm.md
  - docs/models/operations/mariadboneapplicationstatus.md
  - docs/models/operations/mariadbonebackup.md
  - docs/models/operations/mariadbonebackuptype.md
  - docs/models/operations/mariadbonedatabasetype.md
  - docs/models/operations/mariadbonedriveropts.md
  - docs/models/operations/mariadboneenvironment.md
  - docs/models/operations/mariadboneglobal.md
  - docs/models/operations/mariadboneglobaljob.md
  - docs/models/operations/mariadbonehealthcheckswarm.md
  - docs/models/operations/mariadbonemariadb.md
  - docs/models/operations/mariadbonemetadata.md
  - docs/models/operations/mariadbonemetadataenum.md
  - docs/models/operations/mariadbonemetadataunion.md
  - docs/models/operations/mariadbonemetricsconfigenum.md
  - docs/models/operations/mariadbonemetricsconfigunion1.md
  - docs/models/operations/mariadbonemetricsconfigunion2.md
  - docs/models/operations/mariadbonemodeswarm.md
  - docs/models/operations/mariadbonemongo.md
  - docs/models/operations/mariadbonemount.md
  - docs/models/operations/mariadbonemysql.md
  - docs/models/operations/mariadbonenetworkswarm.md
  - docs/models/operations/mariadboneplacementswarm.md
  - docs/models/operations/mariadboneplatform.md
  - docs/models/operations/mariadbonepostgres.md
  - docs/models/operations/mariadbonepreference.md
  - docs/models/operations/mariadboneproject.md
  - docs/models/operations/mariadbonereplicated.md
  - docs/models/operations/mariadbonereplicatedjob.md
  - docs/models/operations/mariadbonerequest.md
  - docs/models/operations/mariadboneresponse.md
  - docs/models/operations/mariadboneresponsebody.md
  - docs/models/operations/mariadbonerestartpolicyswarm.md
  - docs/models/operations/mariadbonerollbackconfigswarm.md
  - docs/models/operations/mariadboneserver.md
  - docs/models/operations/mariadboneserverstatus.md
  - docs/models/operations/mariadboneservicetype.md
  - docs/models/operations/mariadbonespread.md
  - docs/models/operations/mariadbonetype.md
  - docs/models/operations/mariadboneupdateconfigswarm.md
  - docs/models/operations/mariadbrebuildrequest.md
  - docs/models/operations/mariadbrebuildresponse.md
  - docs/models/operations/mariadbreloadrequest.md
  - docs/models/operations/mariadbreloadresponse.md
  - docs/models/operations/mariadbremoveapplicationstatus.md
  - docs/models/operations/mariadbremovebackup.md
  - docs/models/operations/mariadbremovebackuptype.md
  - docs/models/operations/mariadbremovedatabasetype.md
  - docs/models/operations/mariadbremovedriveropts.md
  - docs/models/operations/mariadbremoveenvironment.md
  - docs/models/operations/mariadbremoveglobal.md
  - docs/models/operations/mariadbremoveglobaljob.md
  - docs/models/operations/mariadbremovehealthcheckswarm.md
  - docs/models/operations/mariadbremovemariadb.md
  - docs/models/operations/mariadbremovemetadata.md
  - docs/models/operations/mariadbremovemetadataenum.md
  - docs/models/operations/mariadbremovemetadataunion.md
  - docs/models/operations/mariadbremovemetricsconfigenum.md
  - docs/models/operations/mariadbremovemetricsconfigunion1.md
  - docs/models/operations/mariadbremovemetricsconfigunion2.md
  - docs/models/operations/mariadbremovemodeswarm.md
  - docs/models/operations/mariadbremovemongo.md
  - docs/models/operations/mariadbremovemount.md
  - docs/models/operations/mariadbremovemysql.md
  - docs/models/operations/mariadbremovenetworkswarm.md
  - docs/models/operations/mariadbremoveplacementswarm.md
  - docs/models/operations/mariadbremoveplatform.md
  - docs/models/operations/mariadbremovepostgres.md
  - docs/models/operations/mariadbremovepreference.md
  - docs/models/operations/mariadbremoveproject.md
  - docs/models/operations/mariadbremovereplicated.md
  - docs/models/operations/mariadbremovereplicatedjob.md
  - docs/models/operations/mariadbremoverequest.md
  - docs/models/operations/mariadbremoveresponse.md
  - docs/models/operations/mariadbremoveresponsebody.md
  - docs/models/operations/mariadbremoverestartpolicyswarm.md
  - docs/models/operations/mariadbremoverollbackconfigswarm.md
  - docs/models/operations/mariadbremoveserver.md
  - docs/models/operations/mariadbremoveserverstatus.md
  - docs/models/operations/mariadbremoveservicetype.md
  - docs/models/operations/mariadbremovespread.md
  - docs/models/operations/mariadbremovetype.md
  - docs/models/operations/mariadbremoveupdateconfigswarm.md
  - docs/models/operations/mariadbsaveenvironmentrequest.md
  - docs/models/operations/mariadbsaveenvironmentresponse.md
  - docs/models/operations/mariadbsaveexternalportapplicationstatus.md
  - docs/models/operations/mariadbsaveexternalportbackup.md
  - docs/models/operations/mariadbsaveexternalportbackuptype.md
  - docs/models/operations/mariadbsaveexternalportdatabasetype.md
  - docs/models/operations/mariadbsaveexternalportdriveropts.md
  - docs/models/operations/mariadbsaveexternalportenvironment.md
  - docs/models/operations/mariadbsaveexternalportglobal.md
  - docs/models/operations/mariadbsaveexternalportglobaljob.md
  - docs/models/operations/mariadbsaveexternalporthealthcheckswarm.md
  - docs/models/operations/mariadbsaveexternalportmariadb.md
  - docs/models/operations/mariadbsaveexternalportmetadata.md
  - docs/models/operations/mariadbsaveexternalportmetadataenum.md
  - docs/models/operations/mariadbsaveexternalportmetadataunion.md
  - docs/models/operations/mariadbsaveexternalportmetricsconfigenum.md
  - docs/models/operations/mariadbsaveexternalportmetricsconfigunion1.md
  - docs/models/operations/mariadbsaveexternalportmetricsconfigunion2.md
  - docs/models/operations/mariadbsaveexternalportmodeswarm.md
  - docs/models/operations/mariadbsaveexternalportmongo.md
  - docs/models/operations/mariadbsaveexternalportmount.md
  - docs/models/operations/mariadbsaveexternalportmysql.md
  - docs/models/operations/mariadbsaveexternalportnetworkswarm.md
  - docs/models/operations/mariadbsaveexternalportplacementswarm.md
  - docs/models/operations/mariadbsaveexternalportplatform.md
  - docs/models/operations/mariadbsaveexternalportpostgres.md
  - docs/models/operations/mariadbsaveexternalportpreference.md
  - docs/models/operations/mariadbsaveexternalportproject.md
  - docs/models/operations/mariadbsaveexternalportreplicated.md
  - docs/models/operations/mariadbsaveexternalportreplicatedjob.md
  - docs/models/operations/mariadbsaveexternalportrequest.md
  - docs/models/operations/mariadbsaveexternalportresponse.md
  - docs/models/operations/mariadbsaveexternalportresponsebody.md
  - docs/models/operations/mariadbsaveexternalportrestartpolicyswarm.md
  - docs/models/operations/mariadbsaveexternalportrollbackconfigswarm.md
  - docs/models/operations/mariadbsaveexternalportserver.md
  - docs/models/operations/mariadbsaveexternalportserverstatus.md
  - docs/models/operations/mariadbsaveexternalportservicetype.md
  - docs/models/operations/mariadbsaveexternalportspread.md
  - docs/models/operations/mariadbsaveexternalporttype.md
  - docs/models/operations/mariadbsaveexternalportupdateconfigswarm.md
  - docs/models/operations/mariadbstartapplicationstatus.md
  - docs/models/operations/mariadbstartbackup.md
  - docs/models/operations/mariadbstartbackuptype.md
  - docs/models/operations/mariadbstartdatabasetype.md
  - docs/models/operations/mariadbstartdriveropts.md
  - docs/models/operations/mariadbstartenvironment.md
  - docs/models/operations/mariadbstartglobal.md
  - docs/models/operations/mariadbstartglobaljob.md
  - docs/models/operations/mariadbstarthealthcheckswarm.md
  - docs/models/operations/mariadbstartmariadb.md
  - docs/models/operations/mariadbstartmetadata.md
  - docs/models/operations/mariadbstartmetadataenum.md
  - docs/models/operations/mariadbstartmetadataunion.md
  - docs/models/operations/mariadbstartmetricsconfigenum.md
  - docs/models/operations/mariadbstartmetricsconfigunion1.md
  - docs/models/operations/mariadbstartmetricsconfigunion2.md
  - docs/models/operations/mariadbstartmodeswarm.md
  - docs/models/operations/mariadbstartmongo.md
  - docs/models/operations/mariadbstartmount.md
  - docs/models/operations/mariadbstartmysql.md
  - docs/models/operations/mariadbstartnetworkswarm.md
  - docs/models/operations/mariadbstartplacementswarm.md
  - docs/models/operations/mariadbstartplatform.md
  - docs/models/operations/mariadbstartpostgres.md
  - docs/models/operations/mariadbstartpreference.md
  - docs/models/operations/mariadbstartproject.md
  - docs/models/operations/mariadbstartreplicated.md
  - docs/models/operations/mariadbstartreplicatedjob.md
  - docs/models/operations/mariadbstartrequest.md
  - docs/models/operations/mariadbstartresponse.md
  - docs/models/operations/mariadbstartresponsebody.md
  - docs/models/operations/mariadbstartrestartpolicyswarm.md
  - docs/models/operations/mariadbstartrollbackconfigswarm.md
  - docs/models/operations/mariadbstartserver.md
  - docs/models/operations/mariadbstartserverstatus.md
  - docs/models/operations/mariadbstartservicetype.md
  - docs/models/operations/mariadbstartspread.md
  - docs/models/operations/mariadbstarttype.md
  - docs/models/operations/mariadbstartupdateconfigswarm.md
  - docs/models/operations/mariadbstopapplicationstatus.md
  - docs/models/operations/mariadbstopbackup.md
  - docs/models/operations/mariadbstopbackuptype.md
  - docs/models/operations/mariadbstopdatabasetype.md
  - docs/models/operations/mariadbstopdriveropts.md
  - docs/models/operations/mariadbstopenvironment.md
  - docs/models/operations/mariadbstopglobal.md
  - docs/models/operations/mariadbstopglobaljob.md
  - docs/models/operations/mariadbstophealthcheckswarm.md
  - docs/models/operations/mariadbstopmariadb.md
  - docs/models/operations/mariadbstopmetadata.md
  - docs/models/operations/mariadbstopmetadataenum.md
  - docs/models/operations/mariadbstopmetadataunion.md
  - docs/models/operations/mariadbstopmetricsconfigenum.md
  - docs/models/operations/mariadbstopmetricsconfigunion1.md
  - docs/models/operations/mariadbstopmetricsconfigunion2.md
  - docs/models/operations/mariadbstopmodeswarm.md
  - docs/models/operations/mariadbstopmongo.md
  - docs/models/operations/mariadbstopmount.md
  - docs/models/operations/mariadbstopmysql.md
  - docs/models/operations/mariadbstopnetworkswarm.md
  - docs/models/operations/mariadbstopplacementswarm.md
  - docs/models/operations/mariadbstopplatform.md
  - docs/models/operations/mariadbstoppostgres.md
  - docs/models/operations/mariadbstoppreference.md
  - docs/models/operations/mariadbstopproject.md
  - docs/models/operations/mariadbstopreplicated.md
  - docs/models/operations/mariadbstopreplicatedjob.md
  - docs/models/operations/mariadbstoprequest.md
  - docs/models/operations/mariadbstopresponse.md
  - docs/models/operations/mariadbstopresponsebody.md
  - docs/models/operations/mariadbstoprestartpolicyswarm.md
  - docs/models/operations/mariadbstoprollbackconfigswarm.md
  - docs/models/operations/mariadbstopserver.md
  - docs/models/operations/mariadbstopserverstatus.md
  - docs/models/operations/mariadbstopservicetype.md
  - docs/models/operations/mariadbstopspread.md
  - docs/models/operations/mariadbstoptype.md
  - docs/models/operations/mariadbstopupdateconfigswarm.md
  - docs/models/operations/mariadbupdateapplicationstatus.md
  - docs/models/operations/mariadbupdatedriveropts.md
  - docs/models/operations/mariadbupdateglobal.md
  - docs/models/operations/mariadbupdateglobaljob.md
  - docs/models/operations/mariadbupdatehealthcheckswarm.md
  - docs/models/operations/mariadbupdatemodeswarm.md
  - docs/models/operations/mariadbupdatenetworkswarm.md
  - docs/models/operations/mariadbupdateplacementswarm.md
  - docs/models/operations/mariadbupdateplatform.md
  - docs/models/operations/mariadbupdatepreference.md
  - docs/models/operations/mariadbupdatereplicated.md
  - docs/models/operations/mariadbupdatereplicatedjob.md
  - docs/models/operations/mariadbupdaterequest.md
  - docs/models/operations/mariadbupdateresponse.md
  - docs/models/operations/mariadbupdaterestartpolicyswarm.md
  - docs/models/operations/mariadbupdaterollbackconfigswarm.md
  - docs/models/operations/mariadbupdatespread.md
  - docs/models/operations/mariadbupdateupdateconfigswarm.md
  - docs/models/operations/memory.md
  - docs/models/operations/memoryvalue.md
  - docs/models/operations/mongochangestatusapplicationstatusrequest.md
  - docs/models/operations/mongochangestatusapplicationstatusresponse.md
  - docs/models/operations/mongochangestatusbackup.md
  - docs/models/operations/mongochangestatusbackuptype.md
  - docs/models/operations/mongochangestatusdatabasetype.md
  - docs/models/operations/mongochangestatusdriveropts.md
  - docs/models/operations/mongochangestatusenvironment.md
  - docs/models/operations/mongochangestatusglobal.md
  - docs/models/operations/mongochangestatusglobaljob.md
  - docs/models/operations/mongochangestatushealthcheckswarm.md
  - docs/models/operations/mongochangestatusmariadb.md
  - docs/models/operations/mongochangestatusmetadata.md
  - docs/models/operations/mongochangestatusmetadataenum.md
  - docs/models/operations/mongochangestatusmetadataunion.md
  - docs/models/operations/mongochangestatusmetricsconfigenum.md
  - docs/models/operations/mongochangestatusmetricsconfigunion1.md
  - docs/models/operations/mongochangestatusmetricsconfigunion2.md
  - docs/models/operations/mongochangestatusmodeswarm.md
  - docs/models/operations/mongochangestatusmongo.md
  - docs/models/operations/mongochangestatusmount.md
  - docs/models/operations/mongochangestatusmysql.md
  - docs/models/operations/mongochangestatusnetworkswarm.md
  - docs/models/operations/mongochangestatusplacementswarm.md
  - docs/models/operations/mongochangestatusplatform.md
  - docs/models/operations/mongochangestatuspostgres.md
  - docs/models/operations/mongochangestatuspreference.md
  - docs/models/operations/mongochangestatusproject.md
  - docs/models/operations/mongochangestatusreplicated.md
  - docs/models/operations/mongochangestatusreplicatedjob.md
  - docs/models/operations/mongochangestatusrequest.md
  - docs/models/operations/mongochangestatusresponse.md
  - docs/models/operations/mongochangestatusresponsebody.md
  - docs/models/operations/mongochangestatusrestartpolicyswarm.md
  - docs/models/operations/mongochangestatusrollbackconfigswarm.md
  - docs/models/operations/mongochangestatusserver.md
  - docs/models/operations/mongochangestatusserverstatus.md
  - docs/models/operations/mongochangestatusservicetype.md
  - docs/models/operations/mongochangestatusspread.md
  - docs/models/operations/mongochangestatustype.md
  - docs/models/operations/mongochangestatusupdateconfigswarm.md
  - docs/models/operations/mongocreaterequest.md
  - docs/models/operations/mongocreateresponse.md
  - docs/models/operations/mongodeployapplicationstatus.md
  - docs/models/operations/mongodeploybackup.md
  - docs/models/operations/mongodeploybackuptype.md
  - docs/models/operations/mongodeploydatabasetype.md
  - docs/models/operations/mongodeploydriveropts.md
  - docs/models/operations/mongodeployenvironment.md
  - docs/models/operations/mongodeployglobal.md
  - docs/models/operations/mongodeployglobaljob.md
  - docs/models/operations/mongodeployhealthcheckswarm.md
  - docs/models/operations/mongodeploymariadb.md
  - docs/models/operations/mongodeploymetadata.md
  - docs/models/operations/mongodeploymetadataenum.md
  - docs/models/operations/mongodeploymetadataunion.md
  - docs/models/operations/mongodeploymetricsconfigenum.md
  - docs/models/operations/mongodeploymetricsconfigunion1.md
  - docs/models/operations/mongodeploymetricsconfigunion2.md
  - docs/models/operations/mongodeploymodeswarm.md
  - docs/models/operations/mongodeploymongo.md
  - docs/models/operations/mongodeploymount.md
  - docs/models/operations/mongodeploymysql.md
  - docs/models/operations/mongodeploynetworkswarm.md
  - docs/models/operations/mongodeployplacementswarm.md
  - docs/models/operations/mongodeployplatform.md
  - docs/models/operations/mongodeploypostgres.md
  - docs/models/operations/mongodeploypreference.md
  - docs/models/operations/mongodeployproject.md
  - docs/models/operations/mongodeployreplicated.md
  - docs/models/operations/mongodeployreplicatedjob.md
  - docs/models/operations/mongodeployrequest.md
  - docs/models/operations/mongodeployresponse.md
  - docs/models/operations/mongodeployresponsebody.md
  - docs/models/operations/mongodeployrestartpolicyswarm.md
  - docs/models/operations/mongodeployrollbackconfigswarm.md
  - docs/models/operations/mongodeployserver.md
  - docs/models/operations/mongodeployserverstatus.md
  - docs/models/operations/mongodeployservicetype.md
  - docs/models/operations/mongodeployspread.md
  - docs/models/operations/mongodeploytype.md
  - docs/models/operations/mongodeployupdateconfigswarm.md
  - docs/models/operations/mongomoveapplicationstatus.md
  - docs/models/operations/mongomovedriveropts.md
  - docs/models/operations/mongomoveglobal.md
  - docs/models/operations/mongomoveglobaljob.md
  - docs/models/operations/mongomovehealthcheckswarm.md
  - docs/models/operations/mongomovemodeswarm.md
  - docs/models/operations/mongomovenetworkswarm.md
  - docs/models/operations/mongomoveplacementswarm.md
  - docs/models/operations/mongomoveplatform.md
  - docs/models/operations/mongomovepreference.md
  - docs/models/operations/mongomovereplicated.md
  - docs/models/operations/mongomovereplicatedjob.md
  - docs/models/operations/mongomoverequest.md
  - docs/models/operations/mongomoveresponse.md
  - docs/models/operations/mongomoveresponsebody.md
  - docs/models/operations/mongomoverestartpolicyswarm.md
  - docs/models/operations/mongomoverollbackconfigswarm.md
  - docs/models/operations/mongomovespread.md
  - docs/models/operations/mongomoveupdateconfigswarm.md
  - docs/models/operations/mongooneapplicationstatus.md
  - docs/models/operations/mongoonebackup.md
  - docs/models/operations/mongoonebackuptype.md
  - docs/models/operations/mongoonedatabasetype.md
  - docs/models/operations/mongoonedriveropts.md
  - docs/models/operations/mongooneenvironment.md
  - docs/models/operations/mongooneglobal.md
  - docs/models/operations/mongooneglobaljob.md
  - docs/models/operations/mongoonehealthcheckswarm.md
  - docs/models/operations/mongoonemariadb.md
  - docs/models/operations/mongoonemetadata.md
  - docs/models/operations/mongoonemetadataenum.md
  - docs/models/operations/mongoonemetadataunion.md
  - docs/models/operations/mongoonemetricsconfigenum.md
  - docs/models/operations/mongoonemetricsconfigunion1.md
  - docs/models/operations/mongoonemetricsconfigunion2.md
  - docs/models/operations/mongoonemodeswarm.md
  - docs/models/operations/mongoonemongo.md
  - docs/models/operations/mongoonemount.md
  - docs/models/operations/mongoonemysql.md
  - docs/models/operations/mongoonenetworkswarm.md
  - docs/models/operations/mongooneplacementswarm.md
  - docs/models/operations/mongooneplatform.md
  - docs/models/operations/mongoonepostgres.md
  - docs/models/operations/mongoonepreference.md
  - docs/models/operations/mongooneproject.md
  - docs/models/operations/mongoonereplicated.md
  - docs/models/operations/mongoonereplicatedjob.md
  - docs/models/operations/mongoonerequest.md
  - docs/models/operations/mongooneresponse.md
  - docs/models/operations/mongooneresponsebody.md
  - docs/models/operations/mongoonerestartpolicyswarm.md
  - docs/models/operations/mongoonerollbackconfigswarm.md
  - docs/models/operations/mongooneserver.md
  - docs/models/operations/mongooneserverstatus.md
  - docs/models/operations/mongooneservicetype.md
  - docs/models/operations/mongoonespread.md
  - docs/models/operations/mongoonetype.md
  - docs/models/operations/mongooneupdateconfigswarm.md
  - docs/models/operations/mongorebuildrequest.md
  - docs/models/operations/mongorebuildresponse.md
  - docs/models/operations/mongoreloadrequest.md
  - docs/models/operations/mongoreloadresponse.md
  - docs/models/operations/mongoremoveapplicationstatus.md
  - docs/models/operations/mongoremovebackup.md
  - docs/models/operations/mongoremovebackuptype.md
  - docs/models/operations/mongoremovedatabasetype.md
  - docs/models/operations/mongoremovedriveropts.md
  - docs/models/operations/mongoremoveenvironment.md
  - docs/models/operations/mongoremoveglobal.md
  - docs/models/operations/mongoremoveglobaljob.md
  - docs/models/operations/mongoremovehealthcheckswarm.md
  - docs/models/operations/mongoremovemariadb.md
  - docs/models/operations/mongoremovemetadata.md
  - docs/models/operations/mongoremovemetadataenum.md
  - docs/models/operations/mongoremovemetadataunion.md
  - docs/models/operations/mongoremovemetricsconfigenum.md
  - docs/models/operations/mongoremovemetricsconfigunion1.md
  - docs/models/operations/mongoremovemetricsconfigunion2.md
  - docs/models/operations/mongoremovemodeswarm.md
  - docs/models/operations/mongoremovemongo.md
  - docs/models/operations/mongoremovemount.md
  - docs/models/operations/mongoremovemysql.md
  - docs/models/operations/mongoremovenetworkswarm.md
  - docs/models/operations/mongoremoveplacementswarm.md
  - docs/models/operations/mongoremoveplatform.md
  - docs/models/operations/mongoremovepostgres.md
  - docs/models/operations/mongoremovepreference.md
  - docs/models/operations/mongoremoveproject.md
  - docs/models/operations/mongoremovereplicated.md
  - docs/models/operations/mongoremovereplicatedjob.md
  - docs/models/operations/mongoremoverequest.md
  - docs/models/operations/mongoremoveresponse.md
  - docs/models/operations/mongoremoveresponsebody.md
  - docs/models/operations/mongoremoverestartpolicyswarm.md
  - docs/models/operations/mongoremoverollbackconfigswarm.md
  - docs/models/operations/mongoremoveserver.md
  - docs/models/operations/mongoremoveserverstatus.md
  - docs/models/operations/mongoremoveservicetype.md
  - docs/models/operations/mongoremovespread.md
  - docs/models/operations/mongoremovetype.md
  - docs/models/operations/mongoremoveupdateconfigswarm.md
  - docs/models/operations/mongosaveenvironmentrequest.md
  - docs/models/operations/mongosaveenvironmentresponse.md
  - docs/models/operations/mongosaveexternalportapplicationstatus.md
  - docs/models/operations/mongosaveexternalportbackup.md
  - docs/models/operations/mongosaveexternalportbackuptype.md
  - docs/models/operations/mongosaveexternalportdatabasetype.md
  - docs/models/operations/mongosaveexternalportdriveropts.md
  - docs/models/operations/mongosaveexternalportenvironment.md
  - docs/models/operations/mongosaveexternalportglobal.md
  - docs/models/operations/mongosaveexternalportglobaljob.md
  - docs/models/operations/mongosaveexternalporthealthcheckswarm.md
  - docs/models/operations/mongosaveexternalportmariadb.md
  - docs/models/operations/mongosaveexternalportmetadata.md
  - docs/models/operations/mongosaveexternalportmetadataenum.md
  - docs/models/operations/mongosaveexternalportmetadataunion.md
  - docs/models/operations/mongosaveexternalportmetricsconfigenum.md
  - docs/models/operations/mongosaveexternalportmetricsconfigunion1.md
  - docs/models/operations/mongosaveexternalportmetricsconfigunion2.md
  - docs/models/operations/mongosaveexternalportmodeswarm.md
  - docs/models/operations/mongosaveexternalportmongo.md
  - docs/models/operations/mongosaveexternalportmount.md
  - docs/models/operations/mongosaveexternalportmysql.md
  - docs/models/operations/mongosaveexternalportnetworkswarm.md
  - docs/models/operations/mongosaveexternalportplacementswarm.md
  - docs/models/operations/mongosaveexternalportplatform.md
  - docs/models/operations/mongosaveexternalportpostgres.md
  - docs/models/operations/mongosaveexternalportpreference.md
  - docs/models/operations/mongosaveexternalportproject.md
  - docs/models/operations/mongosaveexternalportreplicated.md
  - docs/models/operations/mongosaveexternalportreplicatedjob.md
  - docs/models/operations/mongosaveexternalportrequest.md
  - docs/models/operations/mongosaveexternalportresponse.md
  - docs/models/operations/mongosaveexternalportresponsebody.md
  - docs/models/operations/mongosaveexternalportrestartpolicyswarm.md
  - docs/models/operations/mongosaveexternalportrollbackconfigswarm.md
  - docs/models/operations/mongosaveexternalportserver.md
  - docs/models/operations/mongosaveexternalportserverstatus.md
  - docs/models/operations/mongosaveexternalportservicetype.md
  - docs/models/operations/mongosaveexternalportspread.md
  - docs/models/operations/mongosaveexternalporttype.md
  - docs/models/operations/mongosaveexternalportupdateconfigswarm.md
  - docs/models/operations/mongostartapplicationstatus.md
  - docs/models/operations/mongostartbackup.md
  - docs/models/operations/mongostartbackuptype.md
  - docs/models/operations/mongostartdatabasetype.md
  - docs/models/operations/mongostartdriveropts.md
  - docs/models/operations/mongostartenvironment.md
  - docs/models/operations/mongostartglobal.md
  - docs/models/operations/mongostartglobaljob.md
  - docs/models/operations/mongostarthealthcheckswarm.md
  - docs/models/operations/mongostartmariadb.md
  - docs/models/operations/mongostartmetadata.md
  - docs/models/operations/mongostartmetadataenum.md
  - docs/models/operations/mongostartmetadataunion.md
  - docs/models/operations/mongostartmetricsconfigenum.md
  - docs/models/operations/mongostartmetricsconfigunion1.md
  - docs/models/operations/mongostartmetricsconfigunion2.md
  - docs/models/operations/mongostartmodeswarm.md
  - docs/models/operations/mongostartmongo.md
  - docs/models/operations/mongostartmount.md
  - docs/models/operations/mongostartmysql.md
  - docs/models/operations/mongostartnetworkswarm.md
  - docs/models/operations/mongostartplacementswarm.md
  - docs/models/operations/mongostartplatform.md
  - docs/models/operations/mongostartpostgres.md
  - docs/models/operations/mongostartpreference.md
  - docs/models/operations/mongostartproject.md
  - docs/models/operations/mongostartreplicated.md
  - docs/models/operations/mongostartreplicatedjob.md
  - docs/models/operations/mongostartrequest.md
  - docs/models/operations/mongostartresponse.md
  - docs/models/operations/mongostartresponsebody.md
  - docs/models/operations/mongostartrestartpolicyswarm.md
  - docs/models/operations/mongostartrollbackconfigswarm.md
  - docs/models/operations/mongostartserver.md
  - docs/models/operations/mongostartserverstatus.md
  - docs/models/operations/mongostartservicetype.md
  - docs/models/operations/mongostartspread.md
  - docs/models/operations/mongostarttype.md
  - docs/models/operations/mongostartupdateconfigswarm.md
  - docs/models/operations/mongostopapplicationstatus.md
  - docs/models/operations/mongostopbackup.md
  - docs/models/operations/mongostopbackuptype.md
  - docs/models/operations/mongostopdatabasetype.md
  - docs/models/operations/mongostopdriveropts.md
  - docs/models/operations/mongostopenvironment.md
  - docs/models/operations/mongostopglobal.md
  - docs/models/operations/mongostopglobaljob.md
  - docs/models/operations/mongostophealthcheckswarm.md
  - docs/models/operations/mongostopmariadb.md
  - docs/models/operations/mongostopmetadata.md
  - docs/models/operations/mongostopmetadataenum.md
  - docs/models/operations/mongostopmetadataunion.md
  - docs/models/operations/mongostopmetricsconfigenum.md
  - docs/models/operations/mongostopmetricsconfigunion1.md
  - docs/models/operations/mongostopmetricsconfigunion2.md
  - docs/models/operations/mongostopmodeswarm.md
  - docs/models/operations/mongostopmongo.md
  - docs/models/operations/mongostopmount.md
  - docs/models/operations/mongostopmysql.md
  - docs/models/operations/mongostopnetworkswarm.md
  - docs/models/operations/mongostopplacementswarm.md
  - docs/models/operations/mongostopplatform.md
  - docs/models/operations/mongostoppostgres.md
  - docs/models/operations/mongostoppreference.md
  - docs/models/operations/mongostopproject.md
  - docs/models/operations/mongostopreplicated.md
  - docs/models/operations/mongostopreplicatedjob.md
  - docs/models/operations/mongostoprequest.md
  - docs/models/operations/mongostopresponse.md
  - docs/models/operations/mongostopresponsebody.md
  - docs/models/operations/mongostoprestartpolicyswarm.md
  - docs/models/operations/mongostoprollbackconfigswarm.md
  - docs/models/operations/mongostopserver.md
  - docs/models/operations/mongostopserverstatus.md
  - docs/models/operations/mongostopservicetype.md
  - docs/models/operations/mongostopspread.md
  - docs/models/operations/mongostoptype.md
  - docs/models/operations/mongostopupdateconfigswarm.md
  - docs/models/operations/mongoupdateapplicationstatus.md
  - docs/models/operations/mongoupdatedriveropts.md
  - docs/models/operations/mongoupdateglobal.md
  - docs/models/operations/mongoupdateglobaljob.md
  - docs/models/operations/mongoupdatehealthcheckswarm.md
  - docs/models/operations/mongoupdatemodeswarm.md
  - docs/models/operations/mongoupdatenetworkswarm.md
  - docs/models/operations/mongoupdateplacementswarm.md
  - docs/models/operations/mongoupdateplatform.md
  - docs/models/operations/mongoupdatepreference.md
  - docs/models/operations/mongoupdatereplicated.md
  - docs/models/operations/mongoupdatereplicatedjob.md
  - docs/models/operations/mongoupdaterequest.md
  - docs/models/operations/mongoupdateresponse.md
  - docs/models/operations/mongoupdaterestartpolicyswarm.md
  - docs/models/operations/mongoupdaterollbackconfigswarm.md
  - docs/models/operations/mongoupdatespread.md
  - docs/models/operations/mongoupdateupdateconfigswarm.md
  - docs/models/operations/mountsallnamedbyapplicationidrequest.md
  - docs/models/operations/mountscreaterequest.md
  - docs/models/operations/mountscreateservicetype.md
  - docs/models/operations/mountscreatetype.md
  - docs/models/operations/mountsonerequest.md
  - docs/models/operations/mountsremoverequest.md
  - docs/models/operations/mountsupdaterequest.md
  - docs/models/operations/mountsupdateservicetype.md
  - docs/models/operations/mountsupdatetype.md
  - docs/models/operations/mysqlchangestatusapplicationstatusrequest.md
  - docs/models/operations/mysqlchangestatusapplicationstatusresponse.md
  - docs/models/operations/mysqlchangestatusbackup.md
  - docs/models/operations/mysqlchangestatusbackuptype.md
  - docs/models/operations/mysqlchangestatusdatabasetype.md
  - docs/models/operations/mysqlchangestatusdriveropts.md
  - docs/models/operations/mysqlchangestatusenvironment.md
  - docs/models/operations/mysqlchangestatusglobal.md
  - docs/models/operations/mysqlchangestatusglobaljob.md
  - docs/models/operations/mysqlchangestatushealthcheckswarm.md
  - docs/models/operations/mysqlchangestatusmariadb.md
  - docs/models/operations/mysqlchangestatusmetadata.md
  - docs/models/operations/mysqlchangestatusmetadataenum.md
  - docs/models/operations/mysqlchangestatusmetadataunion.md
  - docs/models/operations/mysqlchangestatusmetricsconfigenum.md
  - docs/models/operations/mysqlchangestatusmetricsconfigunion1.md
  - docs/models/operations/mysqlchangestatusmetricsconfigunion2.md
  - docs/models/operations/mysqlchangestatusmodeswarm.md
  - docs/models/operations/mysqlchangestatusmongo.md
  - docs/models/operations/mysqlchangestatusmount.md
  - docs/models/operations/mysqlchangestatusmysql.md
  - docs/models/operations/mysqlchangestatusnetworkswarm.md
  - docs/models/operations/mysqlchangestatusplacementswarm.md
  - docs/models/operations/mysqlchangestatusplatform.md
  - docs/models/operations/mysqlchangestatuspostgres.md
  - docs/models/operations/mysqlchangestatuspreference.md
  - docs/models/operations/mysqlchangestatusproject.md
  - docs/models/operations/mysqlchangestatusreplicated.md
  - docs/models/operations/mysqlchangestatusreplicatedjob.md
  - docs/models/operations/mysqlchangestatusrequest.md
  - docs/models/operations/mysqlchangestatusresponse.md
  - docs/models/operations/mysqlchangestatusresponsebody.md
  - docs/models/operations/mysqlchangestatusrestartpolicyswarm.md
  - docs/models/operations/mysqlchangestatusrollbackconfigswarm.md
  - docs/models/operations/mysqlchangestatusserver.md
  - docs/models/operations/mysqlchangestatusserverstatus.md
  - docs/models/operations/mysqlchangestatusservicetype.md
  - docs/models/operations/mysqlchangestatusspread.md
  - docs/models/operations/mysqlchangestatustype.md
  - docs/models/operations/mysqlchangestatusupdateconfigswarm.md
  - docs/models/operations/mysqlcreaterequest.md
  - docs/models/operations/mysqlcreateresponse.md
  - docs/models/operations/mysqldeployapplicationstatus.md
  - docs/models/operations/mysqldeploybackup.md
  - docs/models/operations/mysqldeploybackuptype.md
  - docs/models/operations/mysqldeploydatabasetype.md
  - docs/models/operations/mysqldeploydriveropts.md
  - docs/models/operations/mysqldeployenvironment.md
  - docs/models/operations/mysqldeployglobal.md
  - docs/models/operations/mysqldeployglobaljob.md
  - docs/models/operations/mysqldeployhealthcheckswarm.md
  - docs/models/operations/mysqldeploymariadb.md
  - docs/models/operations/mysqldeploymetadata.md
  - docs/models/operations/mysqldeploymetadataenum.md
  - docs/models/operations/mysqldeploymetadataunion.md
  - docs/models/operations/mysqldeploymetricsconfigenum.md
  - docs/models/operations/mysqldeploymetricsconfigunion1.md
  - docs/models/operations/mysqldeploymetricsconfigunion2.md
  - docs/models/operations/mysqldeploymodeswarm.md
  - docs/models/operations/mysqldeploymongo.md
  - docs/models/operations/mysqldeploymount.md
  - docs/models/operations/mysqldeploymysql.md
  - docs/models/operations/mysqldeploynetworkswarm.md
  - docs/models/operations/mysqldeployplacementswarm.md
  - docs/models/operations/mysqldeployplatform.md
  - docs/models/operations/mysqldeploypostgres.md
  - docs/models/operations/mysqldeploypreference.md
  - docs/models/operations/mysqldeployproject.md
  - docs/models/operations/mysqldeployreplicated.md
  - docs/models/operations/mysqldeployreplicatedjob.md
  - docs/models/operations/mysqldeployrequest.md
  - docs/models/operations/mysqldeployresponse.md
  - docs/models/operations/mysqldeployresponsebody.md
  - docs/models/operations/mysqldeployrestartpolicyswarm.md
  - docs/models/operations/mysqldeployrollbackconfigswarm.md
  - docs/models/operations/mysqldeployserver.md
  - docs/models/operations/mysqldeployserverstatus.md
  - docs/models/operations/mysqldeployservicetype.md
  - docs/models/operations/mysqldeployspread.md
  - docs/models/operations/mysqldeploytype.md
  - docs/models/operations/mysqldeployupdateconfigswarm.md
  - docs/models/operations/mysqlmoveapplicationstatus.md
  - docs/models/operations/mysqlmovedriveropts.md
  - docs/models/operations/mysqlmoveglobal.md
  - docs/models/operations/mysqlmoveglobaljob.md
  - docs/models/operations/mysqlmovehealthcheckswarm.md
  - docs/models/operations/mysqlmovemodeswarm.md
  - docs/models/operations/mysqlmovenetworkswarm.md
  - docs/models/operations/mysqlmoveplacementswarm.md
  - docs/models/operations/mysqlmoveplatform.md
  - docs/models/operations/mysqlmovepreference.md
  - docs/models/operations/mysqlmovereplicated.md
  - docs/models/operations/mysqlmovereplicatedjob.md
  - docs/models/operations/mysqlmoverequest.md
  - docs/models/operations/mysqlmoveresponse.md
  - docs/models/operations/mysqlmoveresponsebody.md
  - docs/models/operations/mysqlmoverestartpolicyswarm.md
  - docs/models/operations/mysqlmoverollbackconfigswarm.md
  - docs/models/operations/mysqlmovespread.md
  - docs/models/operations/mysqlmoveupdateconfigswarm.md
  - docs/models/operations/mysqloneapplicationstatus.md
  - docs/models/operations/mysqlonebackup.md
  - docs/models/operations/mysqlonebackuptype.md
  - docs/models/operations/mysqlonedatabasetype.md
  - docs/models/operations/mysqlonedriveropts.md
  - docs/models/operations/mysqloneenvironment.md
  - docs/models/operations/mysqloneglobal.md
  - docs/models/operations/mysqloneglobaljob.md
  - docs/models/operations/mysqlonehealthcheckswarm.md
  - docs/models/operations/mysqlonemariadb.md
  - docs/models/operations/mysqlonemetadata.md
  - docs/models/operations/mysqlonemetadataenum.md
  - docs/models/operations/mysqlonemetadataunion.md
  - docs/models/operations/mysqlonemetricsconfigenum.md
  - docs/models/operations/mysqlonemetricsconfigunion1.md
  - docs/models/operations/mysqlonemetricsconfigunion2.md
  - docs/models/operations/mysqlonemodeswarm.md
  - docs/models/operations/mysqlonemongo.md
  - docs/models/operations/mysqlonemount.md
  - docs/models/operations/mysqlonemysql.md
  - docs/models/operations/mysqlonenetworkswarm.md
  - docs/models/operations/mysqloneplacementswarm.md
  - docs/models/operations/mysqloneplatform.md
  - docs/models/operations/mysqlonepostgres.md
  - docs/models/operations/mysqlonepreference.md
  - docs/models/operations/mysqloneproject.md
  - docs/models/operations/mysqlonereplicated.md
  - docs/models/operations/mysqlonereplicatedjob.md
  - docs/models/operations/mysqlonerequest.md
  - docs/models/operations/mysqloneresponse.md
  - docs/models/operations/mysqloneresponsebody.md
  - docs/models/operations/mysqlonerestartpolicyswarm.md
  - docs/models/operations/mysqlonerollbackconfigswarm.md
  - docs/models/operations/mysqloneserver.md
  - docs/models/operations/mysqloneserverstatus.md
  - docs/models/operations/mysqloneservicetype.md
  - docs/models/operations/mysqlonespread.md
  - docs/models/operations/mysqlonetype.md
  - docs/models/operations/mysqloneupdateconfigswarm.md
  - docs/models/operations/mysqlrebuildrequest.md
  - docs/models/operations/mysqlrebuildresponse.md
  - docs/models/operations/mysqlreloadrequest.md
  - docs/models/operations/mysqlreloadresponse.md
  - docs/models/operations/mysqlremoveapplicationstatus.md
  - docs/models/operations/mysqlremovebackup.md
  - docs/models/operations/mysqlremovebackuptype.md
  - docs/models/operations/mysqlremovedatabasetype.md
  - docs/models/operations/mysqlremovedriveropts.md
  - docs/models/operations/mysqlremoveenvironment.md
  - docs/models/operations/mysqlremoveglobal.md
  - docs/models/operations/mysqlremoveglobaljob.md
  - docs/models/operations/mysqlremovehealthcheckswarm.md
  - docs/models/operations/mysqlremovemariadb.md
  - docs/models/operations/mysqlremovemetadata.md
  - docs/models/operations/mysqlremovemetadataenum.md
  - docs/models/operations/mysqlremovemetadataunion.md
  - docs/models/operations/mysqlremovemetricsconfigenum.md
  - docs/models/operations/mysqlremovemetricsconfigunion1.md
  - docs/models/operations/mysqlremovemetricsconfigunion2.md
  - docs/models/operations/mysqlremovemodeswarm.md
  - docs/models/operations/mysqlremovemongo.md
  - docs/models/operations/mysqlremovemount.md
  - docs/models/operations/mysqlremovemysql.md
  - docs/models/operations/mysqlremovenetworkswarm.md
  - docs/models/operations/mysqlremoveplacementswarm.md
  - docs/models/operations/mysqlremoveplatform.md
  - docs/models/operations/mysqlremovepostgres.md
  - docs/models/operations/mysqlremovepreference.md
  - docs/models/operations/mysqlremoveproject.md
  - docs/models/operations/mysqlremovereplicated.md
  - docs/models/operations/mysqlremovereplicatedjob.md
  - docs/models/operations/mysqlremoverequest.md
  - docs/models/operations/mysqlremoveresponse.md
  - docs/models/operations/mysqlremoveresponsebody.md
  - docs/models/operations/mysqlremoverestartpolicyswarm.md
  - docs/models/operations/mysqlremoverollbackconfigswarm.md
  - docs/models/operations/mysqlremoveserver.md
  - docs/models/operations/mysqlremoveserverstatus.md
  - docs/models/operations/mysqlremoveservicetype.md
  - docs/models/operations/mysqlremovespread.md
  - docs/models/operations/mysqlremovetype.md
  - docs/models/operations/mysqlremoveupdateconfigswarm.md
  - docs/models/operations/mysqlsaveenvironmentrequest.md
  - docs/models/operations/mysqlsaveenvironmentresponse.md
  - docs/models/operations/mysqlsaveexternalportapplicationstatus.md
  - docs/models/operations/mysqlsaveexternalportbackup.md
  - docs/models/operations/mysqlsaveexternalportbackuptype.md
  - docs/models/operations/mysqlsaveexternalportdatabasetype.md
  - docs/models/operations/mysqlsaveexternalportdriveropts.md
  - docs/models/operations/mysqlsaveexternalportenvironment.md
  - docs/models/operations/mysqlsaveexternalportglobal.md
  - docs/models/operations/mysqlsaveexternalportglobaljob.md
  - docs/models/operations/mysqlsaveexternalporthealthcheckswarm.md
  - docs/models/operations/mysqlsaveexternalportmariadb.md
  - docs/models/operations/mysqlsaveexternalportmetadata.md
  - docs/models/operations/mysqlsaveexternalportmetadataenum.md
  - docs/models/operations/mysqlsaveexternalportmetadataunion.md
  - docs/models/operations/mysqlsaveexternalportmetricsconfigenum.md
  - docs/models/operations/mysqlsaveexternalportmetricsconfigunion1.md
  - docs/models/operations/mysqlsaveexternalportmetricsconfigunion2.md
  - docs/models/operations/mysqlsaveexternalportmodeswarm.md
  - docs/models/operations/mysqlsaveexternalportmongo.md
  - docs/models/operations/mysqlsaveexternalportmount.md
  - docs/models/operations/mysqlsaveexternalportmysql.md
  - docs/models/operations/mysqlsaveexternalportnetworkswarm.md
  - docs/models/operations/mysqlsaveexternalportplacementswarm.md
  - docs/models/operations/mysqlsaveexternalportplatform.md
  - docs/models/operations/mysqlsaveexternalportpostgres.md
  - docs/models/operations/mysqlsaveexternalportpreference.md
  - docs/models/operations/mysqlsaveexternalportproject.md
  - docs/models/operations/mysqlsaveexternalportreplicated.md
  - docs/models/operations/mysqlsaveexternalportreplicatedjob.md
  - docs/models/operations/mysqlsaveexternalportrequest.md
  - docs/models/operations/mysqlsaveexternalportresponse.md
  - docs/models/operations/mysqlsaveexternalportresponsebody.md
  - docs/models/operations/mysqlsaveexternalportrestartpolicyswarm.md
  - docs/models/operations/mysqlsaveexternalportrollbackconfigswarm.md
  - docs/models/operations/mysqlsaveexternalportserver.md
  - docs/models/operations/mysqlsaveexternalportserverstatus.md
  - docs/models/operations/mysqlsaveexternalportservicetype.md
  - docs/models/operations/mysqlsaveexternalportspread.md
  - docs/models/operations/mysqlsaveexternalporttype.md
  - docs/models/operations/mysqlsaveexternalportupdateconfigswarm.md
  - docs/models/operations/mysqlstartapplicationstatus.md
  - docs/models/operations/mysqlstartbackup.md
  - docs/models/operations/mysqlstartbackuptype.md
  - docs/models/operations/mysqlstartdatabasetype.md
  - docs/models/operations/mysqlstartdriveropts.md
  - docs/models/operations/mysqlstartenvironment.md
  - docs/models/operations/mysqlstartglobal.md
  - docs/models/operations/mysqlstartglobaljob.md
  - docs/models/operations/mysqlstarthealthcheckswarm.md
  - docs/models/operations/mysqlstartmariadb.md
  - docs/models/operations/mysqlstartmetadata.md
  - docs/models/operations/mysqlstartmetadataenum.md
  - docs/models/operations/mysqlstartmetadataunion.md
  - docs/models/operations/mysqlstartmetricsconfigenum.md
  - docs/models/operations/mysqlstartmetricsconfigunion1.md
  - docs/models/operations/mysqlstartmetricsconfigunion2.md
  - docs/models/operations/mysqlstartmodeswarm.md
  - docs/models/operations/mysqlstartmongo.md
  - docs/models/operations/mysqlstartmount.md
  - docs/models/operations/mysqlstartmysql.md
  - docs/models/operations/mysqlstartnetworkswarm.md
  - docs/models/operations/mysqlstartplacementswarm.md
  - docs/models/operations/mysqlstartplatform.md
  - docs/models/operations/mysqlstartpostgres.md
  - docs/models/operations/mysqlstartpreference.md
  - docs/models/operations/mysqlstartproject.md
  - docs/models/operations/mysqlstartreplicated.md
  - docs/models/operations/mysqlstartreplicatedjob.md
  - docs/models/operations/mysqlstartrequest.md
  - docs/models/operations/mysqlstartresponse.md
  - docs/models/operations/mysqlstartresponsebody.md
  - docs/models/operations/mysqlstartrestartpolicyswarm.md
  - docs/models/operations/mysqlstartrollbackconfigswarm.md
  - docs/models/operations/mysqlstartserver.md
  - docs/models/operations/mysqlstartserverstatus.md
  - docs/models/operations/mysqlstartservicetype.md
  - docs/models/operations/mysqlstartspread.md
  - docs/models/operations/mysqlstarttype.md
  - docs/models/operations/mysqlstartupdateconfigswarm.md
  - docs/models/operations/mysqlstopapplicationstatus.md
  - docs/models/operations/mysqlstopbackup.md
  - docs/models/operations/mysqlstopbackuptype.md
  - docs/models/operations/mysqlstopdatabasetype.md
  - docs/models/operations/mysqlstopdriveropts.md
  - docs/models/operations/mysqlstopenvironment.md
  - docs/models/operations/mysqlstopglobal.md
  - docs/models/operations/mysqlstopglobaljob.md
  - docs/models/operations/mysqlstophealthcheckswarm.md
  - docs/models/operations/mysqlstopmariadb.md
  - docs/models/operations/mysqlstopmetadata.md
  - docs/models/operations/mysqlstopmetadataenum.md
  - docs/models/operations/mysqlstopmetadataunion.md
  - docs/models/operations/mysqlstopmetricsconfigenum.md
  - docs/models/operations/mysqlstopmetricsconfigunion1.md
  - docs/models/operations/mysqlstopmetricsconfigunion2.md
  - docs/models/operations/mysqlstopmodeswarm.md
  - docs/models/operations/mysqlstopmongo.md
  - docs/models/operations/mysqlstopmount.md
  - docs/models/operations/mysqlstopmysql.md
  - docs/models/operations/mysqlstopnetworkswarm.md
  - docs/models/operations/mysqlstopplacementswarm.md
  - docs/models/operations/mysqlstopplatform.md
  - docs/models/operations/mysqlstoppostgres.md
  - docs/models/operations/mysqlstoppreference.md
  - docs/models/operations/mysqlstopproject.md
  - docs/models/operations/mysqlstopreplicated.md
  - docs/models/operations/mysqlstopreplicatedjob.md
  - docs/models/operations/mysqlstoprequest.md
  - docs/models/operations/mysqlstopresponse.md
  - docs/models/operations/mysqlstopresponsebody.md
  - docs/models/operations/mysqlstoprestartpolicyswarm.md
  - docs/models/operations/mysqlstoprollbackconfigswarm.md
  - docs/models/operations/mysqlstopserver.md
  - docs/models/operations/mysqlstopserverstatus.md
  - docs/models/operations/mysqlstopservicetype.md
  - docs/models/operations/mysqlstopspread.md
  - docs/models/operations/mysqlstoptype.md
  - docs/models/operations/mysqlstopupdateconfigswarm.md
  - docs/models/operations/mysqlupdateapplicationstatus.md
  - docs/models/operations/mysqlupdatedriveropts.md
  - docs/models/operations/mysqlupdateglobal.md
  - docs/models/operations/mysqlupdateglobaljob.md
  - docs/models/operations/mysqlupdatehealthcheckswarm.md
  - docs/models/operations/mysqlupdatemodeswarm.md
  - docs/models/operations/mysqlupdatenetworkswarm.md
  - docs/models/operations/mysqlupdateplacementswarm.md
  - docs/models/operations/mysqlupdateplatform.md
  - docs/models/operations/mysqlupdatepreference.md
  - docs/models/operations/mysqlupdatereplicated.md
  - docs/models/operations/mysqlupdatereplicatedjob.md
  - docs/models/operations/mysqlupdaterequest.md
  - docs/models/operations/mysqlupdateresponse.md
  - docs/models/operations/mysqlupdaterestartpolicyswarm.md
  - docs/models/operations/mysqlupdaterollbackconfigswarm.md
  - docs/models/operations/mysqlupdatespread.md
  - docs/models/operations/mysqlupdateupdateconfigswarm.md
  - docs/models/operations/network.md
  - docs/models/operations/networkvalue.md
  - docs/models/operations/notificationcreatediscordrequest.md
  - docs/models/operations/notificationcreateemailrequest.md
  - docs/models/operations/notificationcreategotifyrequest.md
  - docs/models/operations/notificationcreatentfyrequest.md
  - docs/models/operations/notificationcreateslackrequest.md
  - docs/models/operations/notificationcreatetelegramrequest.md
  - docs/models/operations/notificationonerequest.md
  - docs/models/operations/notificationreceivenotificationrequest.md
  - docs/models/operations/notificationreceivenotificationtype.md
  - docs/models/operations/notificationremoverequest.md
  - docs/models/operations/notificationtestdiscordconnectionrequest.md
  - docs/models/operations/notificationtestemailconnectionrequest.md
  - docs/models/operations/notificationtestgotifyconnectionrequest.md
  - docs/models/operations/notificationtestntfyconnectionrequest.md
  - docs/models/operations/notificationtestslackconnectionrequest.md
  - docs/models/operations/notificationtesttelegramconnectionrequest.md
  - docs/models/operations/notificationupdatediscordrequest.md
  - docs/models/operations/notificationupdateemailrequest.md
  - docs/models/operations/notificationupdategotifyrequest.md
  - docs/models/operations/notificationupdatentfyrequest.md
  - docs/models/operations/notificationupdateslackrequest.md
  - docs/models/operations/notificationupdatetelegramrequest.md
  - docs/models/operations/organizationallresponse.md
  - docs/models/operations/organizationallresponsebody.md
  - docs/models/operations/organizationcreaterequest.md
  - docs/models/operations/organizationcreateresponse.md
  - docs/models/operations/organizationcreateresponsebody.md
  - docs/models/operations/organizationdeleterequest.md
  - docs/models/operations/organizationdeleteresponse.md
  - docs/models/operations/organizationdeleteresponsebody.md
  - docs/models/operations/organizationonerequest.md
  - docs/models/operations/organizationoneresponse.md
  - docs/models/operations/organizationoneresponsebody.md
  - docs/models/operations/organizationremoveinvitationrequest.md
  - docs/models/operations/organizationupdaterequest.md
  - docs/models/operations/organizationupdateresponse.md
  - docs/models/operations/organizationupdateresponsebody.md
  - docs/models/operations/portcreateprotocolrequest.md
  - docs/models/operations/portcreateprotocolresponse.md
  - docs/models/operations/portcreatepublishmoderequest.md
  - docs/models/operations/portcreatepublishmoderesponse.md
  - docs/models/operations/portcreaterequest.md
  - docs/models/operations/portcreateresponse.md
  - docs/models/operations/portcreateresponsebody.md
  - docs/models/operations/portdeleteprotocol.md
  - docs/models/operations/portdeletepublishmode.md
  - docs/models/operations/portdeleterequest.md
  - docs/models/operations/portdeleteresponse.md
  - docs/models/operations/portdeleteresponsebody.md
  - docs/models/operations/portoneprotocol.md
  - docs/models/operations/portonepublishmode.md
  - docs/models/operations/portonerequest.md
  - docs/models/operations/portoneresponse.md
  - docs/models/operations/portoneresponsebody.md
  - docs/models/operations/portupdateprotocolrequest.md
  - docs/models/operations/portupdateprotocolresponse.md
  - docs/models/operations/portupdatepublishmoderequest.md
  - docs/models/operations/portupdatepublishmoderesponse.md
  - docs/models/operations/portupdaterequest.md
  - docs/models/operations/portupdateresponse.md
  - docs/models/operations/portupdateresponsebody.md
  - docs/models/operations/postgreschangestatusapplicationstatusrequest.md
  - docs/models/operations/postgreschangestatusapplicationstatusresponse.md
  - docs/models/operations/postgreschangestatusbackup.md
  - docs/models/operations/postgreschangestatusbackuptype.md
  - docs/models/operations/postgreschangestatusdatabasetype.md
  - docs/models/operations/postgreschangestatusdriveropts.md
  - docs/models/operations/postgreschangestatusenvironment.md
  - docs/models/operations/postgreschangestatusglobal.md
  - docs/models/operations/postgreschangestatusglobaljob.md
  - docs/models/operations/postgreschangestatushealthcheckswarm.md
  - docs/models/operations/postgreschangestatusmariadb.md
  - docs/models/operations/postgreschangestatusmetadata.md
  - docs/models/operations/postgreschangestatusmetadataenum.md
  - docs/models/operations/postgreschangestatusmetadataunion.md
  - docs/models/operations/postgreschangestatusmetricsconfigenum.md
  - docs/models/operations/postgreschangestatusmetricsconfigunion1.md
  - docs/models/operations/postgreschangestatusmetricsconfigunion2.md
  - docs/models/operations/postgreschangestatusmodeswarm.md
  - docs/models/operations/postgreschangestatusmongo.md
  - docs/models/operations/postgreschangestatusmount.md
  - docs/models/operations/postgreschangestatusmysql.md
  - docs/models/operations/postgreschangestatusnetworkswarm.md
  - docs/models/operations/postgreschangestatusplacementswarm.md
  - docs/models/operations/postgreschangestatusplatform.md
  - docs/models/operations/postgreschangestatuspostgres.md
  - docs/models/operations/postgreschangestatuspreference.md
  - docs/models/operations/postgreschangestatusproject.md
  - docs/models/operations/postgreschangestatusreplicated.md
  - docs/models/operations/postgreschangestatusreplicatedjob.md
  - docs/models/operations/postgreschangestatusrequest.md
  - docs/models/operations/postgreschangestatusresponse.md
  - docs/models/operations/postgreschangestatusresponsebody.md
  - docs/models/operations/postgreschangestatusrestartpolicyswarm.md
  - docs/models/operations/postgreschangestatusrollbackconfigswarm.md
  - docs/models/operations/postgreschangestatusserver.md
  - docs/models/operations/postgreschangestatusserverstatus.md
  - docs/models/operations/postgreschangestatusservicetype.md
  - docs/models/operations/postgreschangestatusspread.md
  - docs/models/operations/postgreschangestatustype.md
  - docs/models/operations/postgreschangestatusupdateconfigswarm.md
  - docs/models/operations/postgrescreaterequest.md
  - docs/models/operations/postgrescreateresponse.md
  - docs/models/operations/postgresdeployapplicationstatus.md
  - docs/models/operations/postgresdeploybackup.md
  - docs/models/operations/postgresdeploybackuptype.md
  - docs/models/operations/postgresdeploydatabasetype.md
  - docs/models/operations/postgresdeploydriveropts.md
  - docs/models/operations/postgresdeployenvironment.md
  - docs/models/operations/postgresdeployglobal.md
  - docs/models/operations/postgresdeployglobaljob.md
  - docs/models/operations/postgresdeployhealthcheckswarm.md
  - docs/models/operations/postgresdeploymariadb.md
  - docs/models/operations/postgresdeploymetadata.md
  - docs/models/operations/postgresdeploymetadataenum.md
  - docs/models/operations/postgresdeploymetadataunion.md
  - docs/models/operations/postgresdeploymetricsconfigenum.md
  - docs/models/operations/postgresdeploymetricsconfigunion1.md
  - docs/models/operations/postgresdeploymetricsconfigunion2.md
  - docs/models/operations/postgresdeploymodeswarm.md
  - docs/models/operations/postgresdeploymongo.md
  - docs/models/operations/postgresdeploymount.md
  - docs/models/operations/postgresdeploymysql.md
  - docs/models/operations/postgresdeploynetworkswarm.md
  - docs/models/operations/postgresdeployplacementswarm.md
  - docs/models/operations/postgresdeployplatform.md
  - docs/models/operations/postgresdeploypostgres.md
  - docs/models/operations/postgresdeploypreference.md
  - docs/models/operations/postgresdeployproject.md
  - docs/models/operations/postgresdeployreplicated.md
  - docs/models/operations/postgresdeployreplicatedjob.md
  - docs/models/operations/postgresdeployrequest.md
  - docs/models/operations/postgresdeployresponse.md
  - docs/models/operations/postgresdeployresponsebody.md
  - docs/models/operations/postgresdeployrestartpolicyswarm.md
  - docs/models/operations/postgresdeployrollbackconfigswarm.md
  - docs/models/operations/postgresdeployserver.md
  - docs/models/operations/postgresdeployserverstatus.md
  - docs/models/operations/postgresdeployservicetype.md
  - docs/models/operations/postgresdeployspread.md
  - docs/models/operations/postgresdeploytype.md
  - docs/models/operations/postgresdeployupdateconfigswarm.md
  - docs/models/operations/postgresmoveapplicationstatus.md
  - docs/models/operations/postgresmovedriveropts.md
  - docs/models/operations/postgresmoveglobal.md
  - docs/models/operations/postgresmoveglobaljob.md
  - docs/models/operations/postgresmovehealthcheckswarm.md
  - docs/models/operations/postgresmovemodeswarm.md
  - docs/models/operations/postgresmovenetworkswarm.md
  - docs/models/operations/postgresmoveplacementswarm.md
  - docs/models/operations/postgresmoveplatform.md
  - docs/models/operations/postgresmovepreference.md
  - docs/models/operations/postgresmovereplicated.md
  - docs/models/operations/postgresmovereplicatedjob.md
  - docs/models/operations/postgresmoverequest.md
  - docs/models/operations/postgresmoveresponse.md
  - docs/models/operations/postgresmoveresponsebody.md
  - docs/models/operations/postgresmoverestartpolicyswarm.md
  - docs/models/operations/postgresmoverollbackconfigswarm.md
  - docs/models/operations/postgresmovespread.md
  - docs/models/operations/postgresmoveupdateconfigswarm.md
  - docs/models/operations/postgresoneapplicationstatus.md
  - docs/models/operations/postgresonebackup.md
  - docs/models/operations/postgresonebackuptype.md
  - docs/models/operations/postgresonedatabasetype.md
  - docs/models/operations/postgresonedriveropts.md
  - docs/models/operations/postgresoneenvironment.md
  - docs/models/operations/postgresoneglobal.md
  - docs/models/operations/postgresoneglobaljob.md
  - docs/models/operations/postgresonehealthcheckswarm.md
  - docs/models/operations/postgresonemariadb.md
  - docs/models/operations/postgresonemetadata.md
  - docs/models/operations/postgresonemetadataenum.md
  - docs/models/operations/postgresonemetadataunion.md
  - docs/models/operations/postgresonemetricsconfigenum.md
  - docs/models/operations/postgresonemetricsconfigunion1.md
  - docs/models/operations/postgresonemetricsconfigunion2.md
  - docs/models/operations/postgresonemodeswarm.md
  - docs/models/operations/postgresonemongo.md
  - docs/models/operations/postgresonemount.md
  - docs/models/operations/postgresonemysql.md
  - docs/models/operations/postgresonenetworkswarm.md
  - docs/models/operations/postgresoneplacementswarm.md
  - docs/models/operations/postgresoneplatform.md
  - docs/models/operations/postgresonepostgres.md
  - docs/models/operations/postgresonepreference.md
  - docs/models/operations/postgresoneproject.md
  - docs/models/operations/postgresonereplicated.md
  - docs/models/operations/postgresonereplicatedjob.md
  - docs/models/operations/postgresonerequest.md
  - docs/models/operations/postgresoneresponse.md
  - docs/models/operations/postgresoneresponsebody.md
  - docs/models/operations/postgresonerestartpolicyswarm.md
  - docs/models/operations/postgresonerollbackconfigswarm.md
  - docs/models/operations/postgresoneserver.md
  - docs/models/operations/postgresoneserverstatus.md
  - docs/models/operations/postgresoneservicetype.md
  - docs/models/operations/postgresonespread.md
  - docs/models/operations/postgresonetype.md
  - docs/models/operations/postgresoneupdateconfigswarm.md
  - docs/models/operations/postgresrebuildrequest.md
  - docs/models/operations/postgresrebuildresponse.md
  - docs/models/operations/postgresreloadrequest.md
  - docs/models/operations/postgresreloadresponse.md
  - docs/models/operations/postgresremoveapplicationstatus.md
  - docs/models/operations/postgresremovebackup.md
  - docs/models/operations/postgresremovebackuptype.md
  - docs/models/operations/postgresremovedatabasetype.md
  - docs/models/operations/postgresremovedriveropts.md
  - docs/models/operations/postgresremoveenvironment.md
  - docs/models/operations/postgresremoveglobal.md
  - docs/models/operations/postgresremoveglobaljob.md
  - docs/models/operations/postgresremovehealthcheckswarm.md
  - docs/models/operations/postgresremovemariadb.md
  - docs/models/operations/postgresremovemetadata.md
  - docs/models/operations/postgresremovemetadataenum.md
  - docs/models/operations/postgresremovemetadataunion.md
  - docs/models/operations/postgresremovemetricsconfigenum.md
  - docs/models/operations/postgresremovemetricsconfigunion1.md
  - docs/models/operations/postgresremovemetricsconfigunion2.md
  - docs/models/operations/postgresremovemodeswarm.md
  - docs/models/operations/postgresremovemongo.md
  - docs/models/operations/postgresremovemount.md
  - docs/models/operations/postgresremovemysql.md
  - docs/models/operations/postgresremovenetworkswarm.md
  - docs/models/operations/postgresremoveplacementswarm.md
  - docs/models/operations/postgresremoveplatform.md
  - docs/models/operations/postgresremovepostgres.md
  - docs/models/operations/postgresremovepreference.md
  - docs/models/operations/postgresremoveproject.md
  - docs/models/operations/postgresremovereplicated.md
  - docs/models/operations/postgresremovereplicatedjob.md
  - docs/models/operations/postgresremoverequest.md
  - docs/models/operations/postgresremoveresponse.md
  - docs/models/operations/postgresremoveresponsebody.md
  - docs/models/operations/postgresremoverestartpolicyswarm.md
  - docs/models/operations/postgresremoverollbackconfigswarm.md
  - docs/models/operations/postgresremoveserver.md
  - docs/models/operations/postgresremoveserverstatus.md
  - docs/models/operations/postgresremoveservicetype.md
  - docs/models/operations/postgresremovespread.md
  - docs/models/operations/postgresremovetype.md
  - docs/models/operations/postgresremoveupdateconfigswarm.md
  - docs/models/operations/postgressaveenvironmentrequest.md
  - docs/models/operations/postgressaveenvironmentresponse.md
  - docs/models/operations/postgressaveexternalportapplicationstatus.md
  - docs/models/operations/postgressaveexternalportbackup.md
  - docs/models/operations/postgressaveexternalportbackuptype.md
  - docs/models/operations/postgressaveexternalportdatabasetype.md
  - docs/models/operations/postgressaveexternalportdriveropts.md
  - docs/models/operations/postgressaveexternalportenvironment.md
  - docs/models/operations/postgressaveexternalportglobal.md
  - docs/models/operations/postgressaveexternalportglobaljob.md
  - docs/models/operations/postgressaveexternalporthealthcheckswarm.md
  - docs/models/operations/postgressaveexternalportmariadb.md
  - docs/models/operations/postgressaveexternalportmetadata.md
  - docs/models/operations/postgressaveexternalportmetadataenum.md
  - docs/models/operations/postgressaveexternalportmetadataunion.md
  - docs/models/operations/postgressaveexternalportmetricsconfigenum.md
  - docs/models/operations/postgressaveexternalportmetricsconfigunion1.md
  - docs/models/operations/postgressaveexternalportmetricsconfigunion2.md
  - docs/models/operations/postgressaveexternalportmodeswarm.md
  - docs/models/operations/postgressaveexternalportmongo.md
  - docs/models/operations/postgressaveexternalportmount.md
  - docs/models/operations/postgressaveexternalportmysql.md
  - docs/models/operations/postgressaveexternalportnetworkswarm.md
  - docs/models/operations/postgressaveexternalportplacementswarm.md
  - docs/models/operations/postgressaveexternalportplatform.md
  - docs/models/operations/postgressaveexternalportpostgres.md
  - docs/models/operations/postgressaveexternalportpreference.md
  - docs/models/operations/postgressaveexternalportproject.md
  - docs/models/operations/postgressaveexternalportreplicated.md
  - docs/models/operations/postgressaveexternalportreplicatedjob.md
  - docs/models/operations/postgressaveexternalportrequest.md
  - docs/models/operations/postgressaveexternalportresponse.md
  - docs/models/operations/postgressaveexternalportresponsebody.md
  - docs/models/operations/postgressaveexternalportrestartpolicyswarm.md
  - docs/models/operations/postgressaveexternalportrollbackconfigswarm.md
  - docs/models/operations/postgressaveexternalportserver.md
  - docs/models/operations/postgressaveexternalportserverstatus.md
  - docs/models/operations/postgressaveexternalportservicetype.md
  - docs/models/operations/postgressaveexternalportspread.md
  - docs/models/operations/postgressaveexternalporttype.md
  - docs/models/operations/postgressaveexternalportupdateconfigswarm.md
  - docs/models/operations/postgresstartapplicationstatus.md
  - docs/models/operations/postgresstartbackup.md
  - docs/models/operations/postgresstartbackuptype.md
  - docs/models/operations/postgresstartdatabasetype.md
  - docs/models/operations/postgresstartdriveropts.md
  - docs/models/operations/postgresstartenvironment.md
  - docs/models/operations/postgresstartglobal.md
  - docs/models/operations/postgresstartglobaljob.md
  - docs/models/operations/postgresstarthealthcheckswarm.md
  - docs/models/operations/postgresstartmariadb.md
  - docs/models/operations/postgresstartmetadata.md
  - docs/models/operations/postgresstartmetadataenum.md
  - docs/models/operations/postgresstartmetadataunion.md
  - docs/models/operations/postgresstartmetricsconfigenum.md
  - docs/models/operations/postgresstartmetricsconfigunion1.md
  - docs/models/operations/postgresstartmetricsconfigunion2.md
  - docs/models/operations/postgresstartmodeswarm.md
  - docs/models/operations/postgresstartmongo.md
  - docs/models/operations/postgresstartmount.md
  - docs/models/operations/postgresstartmysql.md
  - docs/models/operations/postgresstartnetworkswarm.md
  - docs/models/operations/postgresstartplacementswarm.md
  - docs/models/operations/postgresstartplatform.md
  - docs/models/operations/postgresstartpostgres.md
  - docs/models/operations/postgresstartpreference.md
  - docs/models/operations/postgresstartproject.md
  - docs/models/operations/postgresstartreplicated.md
  - docs/models/operations/postgresstartreplicatedjob.md
  - docs/models/operations/postgresstartrequest.md
  - docs/models/operations/postgresstartresponse.md
  - docs/models/operations/postgresstartresponsebody.md
  - docs/models/operations/postgresstartrestartpolicyswarm.md
  - docs/models/operations/postgresstartrollbackconfigswarm.md
  - docs/models/operations/postgresstartserver.md
  - docs/models/operations/postgresstartserverstatus.md
  - docs/models/operations/postgresstartservicetype.md
  - docs/models/operations/postgresstartspread.md
  - docs/models/operations/postgresstarttype.md
  - docs/models/operations/postgresstartupdateconfigswarm.md
  - docs/models/operations/postgresstopapplicationstatus.md
  - docs/models/operations/postgresstopbackup.md
  - docs/models/operations/postgresstopbackuptype.md
  - docs/models/operations/postgresstopdatabasetype.md
  - docs/models/operations/postgresstopdriveropts.md
  - docs/models/operations/postgresstopenvironment.md
  - docs/models/operations/postgresstopglobal.md
  - docs/models/operations/postgresstopglobaljob.md
  - docs/models/operations/postgresstophealthcheckswarm.md
  - docs/models/operations/postgresstopmariadb.md
  - docs/models/operations/postgresstopmetadata.md
  - docs/models/operations/postgresstopmetadataenum.md
  - docs/models/operations/postgresstopmetadataunion.md
  - docs/models/operations/postgresstopmetricsconfigenum.md
  - docs/models/operations/postgresstopmetricsconfigunion1.md
  - docs/models/operations/postgresstopmetricsconfigunion2.md
  - docs/models/operations/postgresstopmodeswarm.md
  - docs/models/operations/postgresstopmongo.md
  - docs/models/operations/postgresstopmount.md
  - docs/models/operations/postgresstopmysql.md
  - docs/models/operations/postgresstopnetworkswarm.md
  - docs/models/operations/postgresstopplacementswarm.md
  - docs/models/operations/postgresstopplatform.md
  - docs/models/operations/postgresstoppostgres.md
  - docs/models/operations/postgresstoppreference.md
  - docs/models/operations/postgresstopproject.md
  - docs/models/operations/postgresstopreplicated.md
  - docs/models/operations/postgresstopreplicatedjob.md
  - docs/models/operations/postgresstoprequest.md
  - docs/models/operations/postgresstopresponse.md
  - docs/models/operations/postgresstopresponsebody.md
  - docs/models/operations/postgresstoprestartpolicyswarm.md
  - docs/models/operations/postgresstoprollbackconfigswarm.md
  - docs/models/operations/postgresstopserver.md
  - docs/models/operations/postgresstopserverstatus.md
  - docs/models/operations/postgresstopservicetype.md
  - docs/models/operations/postgresstopspread.md
  - docs/models/operations/postgresstoptype.md
  - docs/models/operations/postgresstopupdateconfigswarm.md
  - docs/models/operations/postgresupdateapplicationstatus.md
  - docs/models/operations/postgresupdatedriveropts.md
  - docs/models/operations/postgresupdateglobal.md
  - docs/models/operations/postgresupdateglobaljob.md
  - docs/models/operations/postgresupdatehealthcheckswarm.md
  - docs/models/operations/postgresupdatemodeswarm.md
  - docs/models/operations/postgresupdatenetworkswarm.md
  - docs/models/operations/postgresupdateplacementswarm.md
  - docs/models/operations/postgresupdateplatform.md
  - docs/models/operations/postgresupdatepreference.md
  - docs/models/operations/postgresupdatereplicated.md
  - docs/models/operations/postgresupdatereplicatedjob.md
  - docs/models/operations/postgresupdaterequest.md
  - docs/models/operations/postgresupdateresponse.md
  - docs/models/operations/postgresupdaterestartpolicyswarm.md
  - docs/models/operations/postgresupdaterollbackconfigswarm.md
  - docs/models/operations/postgresupdatespread.md
  - docs/models/operations/postgresupdateupdateconfigswarm.md
  - docs/models/operations/previewdeploymentallpreviewstatus.md
  - docs/models/operations/previewdeploymentallrequest.md
  - docs/models/operations/previewdeploymentallresponse.md
  - docs/models/operations/previewdeploymentallresponsebody.md
  - docs/models/operations/previewdeploymentdeleterequest.md
  - docs/models/operations/previewdeploymentdeleteresponse.md
  - docs/models/operations/previewdeploymentonepreviewstatus.md
  - docs/models/operations/previewdeploymentonerequest.md
  - docs/models/operations/previewdeploymentoneresponse.md
  - docs/models/operations/previewdeploymentoneresponsebody.md
  - docs/models/operations/projectallenvironment.md
  - docs/models/operations/projectallresponse.md
  - docs/models/operations/projectallresponsebody.md
  - docs/models/operations/projectcreateenvironment.md
  - docs/models/operations/projectcreateproject.md
  - docs/models/operations/projectcreaterequest.md
  - docs/models/operations/projectcreateresponse.md
  - docs/models/operations/projectcreateresponsebody.md
  - docs/models/operations/projectduplicaterequest.md
  - docs/models/operations/projectduplicatetype.md
  - docs/models/operations/projectoneenvironment.md
  - docs/models/operations/projectonerequest.md
  - docs/models/operations/projectoneresponse.md
  - docs/models/operations/projectoneresponsebody.md
  - docs/models/operations/projectremoverequest.md
  - docs/models/operations/projectremoveresponse.md
  - docs/models/operations/projectremoveresponsebody.md
  - docs/models/operations/projectupdaterequest.md
  - docs/models/operations/projectupdateresponse.md
  - docs/models/operations/projectupdateresponsebody.md
  - docs/models/operations/redirectscreaterequest.md
  - docs/models/operations/redirectscreateresponse.md
  - docs/models/operations/redirectscreateresponsebody.md
  - docs/models/operations/redirectsdeleterequest.md
  - docs/models/operations/redirectsdeleteresponse.md
  - docs/models/operations/redirectsdeleteresponsebody.md
  - docs/models/operations/redirectsonerequest.md
  - docs/models/operations/redirectsoneresponse.md
  - docs/models/operations/redirectsoneresponsebody.md
  - docs/models/operations/redirectsupdaterequest.md
  - docs/models/operations/redirectsupdateresponse.md
  - docs/models/operations/redirectsupdateresponsebody.md
  - docs/models/operations/redischangestatusapplicationstatusrequest.md
  - docs/models/operations/redischangestatusapplicationstatusresponse.md
  - docs/models/operations/redischangestatusdriveropts.md
  - docs/models/operations/redischangestatusenvironment.md
  - docs/models/operations/redischangestatusglobal.md
  - docs/models/operations/redischangestatusglobaljob.md
  - docs/models/operations/redischangestatushealthcheckswarm.md
  - docs/models/operations/redischangestatusmetricsconfigenum.md
  - docs/models/operations/redischangestatusmetricsconfigunion1.md
  - docs/models/operations/redischangestatusmetricsconfigunion2.md
  - docs/models/operations/redischangestatusmodeswarm.md
  - docs/models/operations/redischangestatusmount.md
  - docs/models/operations/redischangestatusnetworkswarm.md
  - docs/models/operations/redischangestatusplacementswarm.md
  - docs/models/operations/redischangestatusplatform.md
  - docs/models/operations/redischangestatuspreference.md
  - docs/models/operations/redischangestatusproject.md
  - docs/models/operations/redischangestatusreplicated.md
  - docs/models/operations/redischangestatusreplicatedjob.md
  - docs/models/operations/redischangestatusrequest.md
  - docs/models/operations/redischangestatusresponse.md
  - docs/models/operations/redischangestatusresponsebody.md
  - docs/models/operations/redischangestatusrestartpolicyswarm.md
  - docs/models/operations/redischangestatusrollbackconfigswarm.md
  - docs/models/operations/redischangestatusserver.md
  - docs/models/operations/redischangestatusserverstatus.md
  - docs/models/operations/redischangestatusservicetype.md
  - docs/models/operations/redischangestatusspread.md
  - docs/models/operations/redischangestatustype.md
  - docs/models/operations/redischangestatusupdateconfigswarm.md
  - docs/models/operations/rediscreateapplicationstatus.md
  - docs/models/operations/rediscreatedriveropts.md
  - docs/models/operations/rediscreateglobal.md
  - docs/models/operations/rediscreateglobaljob.md
  - docs/models/operations/rediscreatehealthcheckswarm.md
  - docs/models/operations/rediscreatemodeswarm.md
  - docs/models/operations/rediscreatenetworkswarm.md
  - docs/models/operations/rediscreateplacementswarm.md
  - docs/models/operations/rediscreateplatform.md
  - docs/models/operations/rediscreatepreference.md
  - docs/models/operations/rediscreatereplicated.md
  - docs/models/operations/rediscreatereplicatedjob.md
  - docs/models/operations/rediscreaterequest.md
  - docs/models/operations/rediscreateresponse.md
  - docs/models/operations/rediscreateresponsebody.md
  - docs/models/operations/rediscreaterestartpolicyswarm.md
  - docs/models/operations/rediscreaterollbackconfigswarm.md
  - docs/models/operations/rediscreatespread.md
  - docs/models/operations/rediscreateupdateconfigswarm.md
  - docs/models/operations/redisdeployapplicationstatus.md
  - docs/models/operations/redisdeploydriveropts.md
  - docs/models/operations/redisdeployenvironment.md
  - docs/models/operations/redisdeployglobal.md
  - docs/models/operations/redisdeployglobaljob.md
  - docs/models/operations/redisdeployhealthcheckswarm.md
  - docs/models/operations/redisdeploymetricsconfigenum.md
  - docs/models/operations/redisdeploymetricsconfigunion1.md
  - docs/models/operations/redisdeploymetricsconfigunion2.md
  - docs/models/operations/redisdeploymodeswarm.md
  - docs/models/operations/redisdeploymount.md
  - docs/models/operations/redisdeploynetworkswarm.md
  - docs/models/operations/redisdeployplacementswarm.md
  - docs/models/operations/redisdeployplatform.md
  - docs/models/operations/redisdeploypreference.md
  - docs/models/operations/redisdeployproject.md
  - docs/models/operations/redisdeployreplicated.md
  - docs/models/operations/redisdeployreplicatedjob.md
  - docs/models/operations/redisdeployrequest.md
  - docs/models/operations/redisdeployresponse.md
  - docs/models/operations/redisdeployresponsebody.md
  - docs/models/operations/redisdeployrestartpolicyswarm.md
  - docs/models/operations/redisdeployrollbackconfigswarm.md
  - docs/models/operations/redisdeployserver.md
  - docs/models/operations/redisdeployserverstatus.md
  - docs/models/operations/redisdeployservicetype.md
  - docs/models/operations/redisdeployspread.md
  - docs/models/operations/redisdeploytype.md
  - docs/models/operations/redisdeployupdateconfigswarm.md
  - docs/models/operations/redismoveapplicationstatus.md
  - docs/models/operations/redismovedriveropts.md
  - docs/models/operations/redismoveglobal.md
  - docs/models/operations/redismoveglobaljob.md
  - docs/models/operations/redismovehealthcheckswarm.md
  - docs/models/operations/redismovemodeswarm.md
  - docs/models/operations/redismovenetworkswarm.md
  - docs/models/operations/redismoveplacementswarm.md
  - docs/models/operations/redismoveplatform.md
  - docs/models/operations/redismovepreference.md
  - docs/models/operations/redismovereplicated.md
  - docs/models/operations/redismovereplicatedjob.md
  - docs/models/operations/redismoverequest.md
  - docs/models/operations/redismoveresponse.md
  - docs/models/operations/redismoveresponsebody.md
  - docs/models/operations/redismoverestartpolicyswarm.md
  - docs/models/operations/redismoverollbackconfigswarm.md
  - docs/models/operations/redismovespread.md
  - docs/models/operations/redismoveupdateconfigswarm.md
  - docs/models/operations/redisoneapplicationstatus.md
  - docs/models/operations/redisonedriveropts.md
  - docs/models/operations/redisoneenvironment.md
  - docs/models/operations/redisoneglobal.md
  - docs/models/operations/redisoneglobaljob.md
  - docs/models/operations/redisonehealthcheckswarm.md
  - docs/models/operations/redisonemetricsconfigenum.md
  - docs/models/operations/redisonemetricsconfigunion1.md
  - docs/models/operations/redisonemetricsconfigunion2.md
  - docs/models/operations/redisonemodeswarm.md
  - docs/models/operations/redisonemount.md
  - docs/models/operations/redisonenetworkswarm.md
  - docs/models/operations/redisoneplacementswarm.md
  - docs/models/operations/redisoneplatform.md
  - docs/models/operations/redisonepreference.md
  - docs/models/operations/redisoneproject.md
  - docs/models/operations/redisonereplicated.md
  - docs/models/operations/redisonereplicatedjob.md
  - docs/models/operations/redisonerequest.md
  - docs/models/operations/redisoneresponse.md
  - docs/models/operations/redisoneresponsebody.md
  - docs/models/operations/redisonerestartpolicyswarm.md
  - docs/models/operations/redisonerollbackconfigswarm.md
  - docs/models/operations/redisoneserver.md
  - docs/models/operations/redisoneserverstatus.md
  - docs/models/operations/redisoneservicetype.md
  - docs/models/operations/redisonespread.md
  - docs/models/operations/redisonetype.md
  - docs/models/operations/redisoneupdateconfigswarm.md
  - docs/models/operations/redisrebuildrequest.md
  - docs/models/operations/redisrebuildresponse.md
  - docs/models/operations/redisreloadrequest.md
  - docs/models/operations/redisreloadresponse.md
  - docs/models/operations/redisremoveapplicationstatus.md
  - docs/models/operations/redisremovedriveropts.md
  - docs/models/operations/redisremoveenvironment.md
  - docs/models/operations/redisremoveglobal.md
  - docs/models/operations/redisremoveglobaljob.md
  - docs/models/operations/redisremovehealthcheckswarm.md
  - docs/models/operations/redisremovemetricsconfigenum.md
  - docs/models/operations/redisremovemetricsconfigunion1.md
  - docs/models/operations/redisremovemetricsconfigunion2.md
  - docs/models/operations/redisremovemodeswarm.md
  - docs/models/operations/redisremovemount.md
  - docs/models/operations/redisremovenetworkswarm.md
  - docs/models/operations/redisremoveplacementswarm.md
  - docs/models/operations/redisremoveplatform.md
  - docs/models/operations/redisremovepreference.md
  - docs/models/operations/redisremoveproject.md
  - docs/models/operations/redisremovereplicated.md
  - docs/models/operations/redisremovereplicatedjob.md
  - docs/models/operations/redisremoverequest.md
  - docs/models/operations/redisremoveresponse.md
  - docs/models/operations/redisremoveresponsebody.md
  - docs/models/operations/redisremoverestartpolicyswarm.md
  - docs/models/operations/redisremoverollbackconfigswarm.md
  - docs/models/operations/redisremoveserver.md
  - docs/models/operations/redisremoveserverstatus.md
  - docs/models/operations/redisremoveservicetype.md
  - docs/models/operations/redisremovespread.md
  - docs/models/operations/redisremovetype.md
  - docs/models/operations/redisremoveupdateconfigswarm.md
  - docs/models/operations/redissaveenvironmentrequest.md
  - docs/models/operations/redissaveenvironmentresponse.md
  - docs/models/operations/redissaveexternalportapplicationstatus.md
  - docs/models/operations/redissaveexternalportdriveropts.md
  - docs/models/operations/redissaveexternalportenvironment.md
  - docs/models/operations/redissaveexternalportglobal.md
  - docs/models/operations/redissaveexternalportglobaljob.md
  - docs/models/operations/redissaveexternalporthealthcheckswarm.md
  - docs/models/operations/redissaveexternalportmetricsconfigenum.md
  - docs/models/operations/redissaveexternalportmetricsconfigunion1.md
  - docs/models/operations/redissaveexternalportmetricsconfigunion2.md
  - docs/models/operations/redissaveexternalportmodeswarm.md
  - docs/models/operations/redissaveexternalportmount.md
  - docs/models/operations/redissaveexternalportnetworkswarm.md
  - docs/models/operations/redissaveexternalportplacementswarm.md
  - docs/models/operations/redissaveexternalportplatform.md
  - docs/models/operations/redissaveexternalportpreference.md
  - docs/models/operations/redissaveexternalportproject.md
  - docs/models/operations/redissaveexternalportreplicated.md
  - docs/models/operations/redissaveexternalportreplicatedjob.md
  - docs/models/operations/redissaveexternalportrequest.md
  - docs/models/operations/redissaveexternalportresponse.md
  - docs/models/operations/redissaveexternalportresponsebody.md
  - docs/models/operations/redissaveexternalportrestartpolicyswarm.md
  - docs/models/operations/redissaveexternalportrollbackconfigswarm.md
  - docs/models/operations/redissaveexternalportserver.md
  - docs/models/operations/redissaveexternalportserverstatus.md
  - docs/models/operations/redissaveexternalportservicetype.md
  - docs/models/operations/redissaveexternalportspread.md
  - docs/models/operations/redissaveexternalporttype.md
  - docs/models/operations/redissaveexternalportupdateconfigswarm.md
  - docs/models/operations/redisstartapplicationstatus.md
  - docs/models/operations/redisstartdriveropts.md
  - docs/models/operations/redisstartenvironment.md
  - docs/models/operations/redisstartglobal.md
  - docs/models/operations/redisstartglobaljob.md
  - docs/models/operations/redisstarthealthcheckswarm.md
  - docs/models/operations/redisstartmetricsconfigenum.md
  - docs/models/operations/redisstartmetricsconfigunion1.md
  - docs/models/operations/redisstartmetricsconfigunion2.md
  - docs/models/operations/redisstartmodeswarm.md
  - docs/models/operations/redisstartmount.md
  - docs/models/operations/redisstartnetworkswarm.md
  - docs/models/operations/redisstartplacementswarm.md
  - docs/models/operations/redisstartplatform.md
  - docs/models/operations/redisstartpreference.md
  - docs/models/operations/redisstartproject.md
  - docs/models/operations/redisstartreplicated.md
  - docs/models/operations/redisstartreplicatedjob.md
  - docs/models/operations/redisstartrequest.md
  - docs/models/operations/redisstartresponse.md
  - docs/models/operations/redisstartresponsebody.md
  - docs/models/operations/redisstartrestartpolicyswarm.md
  - docs/models/operations/redisstartrollbackconfigswarm.md
  - docs/models/operations/redisstartserver.md
  - docs/models/operations/redisstartserverstatus.md
  - docs/models/operations/redisstartservicetype.md
  - docs/models/operations/redisstartspread.md
  - docs/models/operations/redisstarttype.md
  - docs/models/operations/redisstartupdateconfigswarm.md
  - docs/models/operations/redisstopapplicationstatus.md
  - docs/models/operations/redisstopdriveropts.md
  - docs/models/operations/redisstopenvironment.md
  - docs/models/operations/redisstopglobal.md
  - docs/models/operations/redisstopglobaljob.md
  - docs/models/operations/redisstophealthcheckswarm.md
  - docs/models/operations/redisstopmetricsconfigenum.md
  - docs/models/operations/redisstopmetricsconfigunion1.md
  - docs/models/operations/redisstopmetricsconfigunion2.md
  - docs/models/operations/redisstopmodeswarm.md
  - docs/models/operations/redisstopmount.md
  - docs/models/operations/redisstopnetworkswarm.md
  - docs/models/operations/redisstopplacementswarm.md
  - docs/models/operations/redisstopplatform.md
  - docs/models/operations/redisstoppreference.md
  - docs/models/operations/redisstopproject.md
  - docs/models/operations/redisstopreplicated.md
  - docs/models/operations/redisstopreplicatedjob.md
  - docs/models/operations/redisstoprequest.md
  - docs/models/operations/redisstopresponse.md
  - docs/models/operations/redisstopresponsebody.md
  - docs/models/operations/redisstoprestartpolicyswarm.md
  - docs/models/operations/redisstoprollbackconfigswarm.md
  - docs/models/operations/redisstopserver.md
  - docs/models/operations/redisstopserverstatus.md
  - docs/models/operations/redisstopservicetype.md
  - docs/models/operations/redisstopspread.md
  - docs/models/operations/redisstoptype.md
  - docs/models/operations/redisstopupdateconfigswarm.md
  - docs/models/operations/redisupdateapplicationstatus.md
  - docs/models/operations/redisupdatedriveropts.md
  - docs/models/operations/redisupdateglobal.md
  - docs/models/operations/redisupdateglobaljob.md
  - docs/models/operations/redisupdatehealthcheckswarm.md
  - docs/models/operations/redisupdatemodeswarm.md
  - docs/models/operations/redisupdatenetworkswarm.md
  - docs/models/operations/redisupdateplacementswarm.md
  - docs/models/operations/redisupdateplatform.md
  - docs/models/operations/redisupdatepreference.md
  - docs/models/operations/redisupdatereplicated.md
  - docs/models/operations/redisupdatereplicatedjob.md
  - docs/models/operations/redisupdaterequest.md
  - docs/models/operations/redisupdateresponse.md
  - docs/models/operations/redisupdaterestartpolicyswarm.md
  - docs/models/operations/redisupdaterollbackconfigswarm.md
  - docs/models/operations/redisupdatespread.md
  - docs/models/operations/redisupdateupdateconfigswarm.md
  - docs/models/operations/registrycreateregistrytype.md
  - docs/models/operations/registrycreaterequest.md
  - docs/models/operations/registryonerequest.md
  - docs/models/operations/registryremoverequest.md
  - docs/models/operations/registrytestregistryregistrytype.md
  - docs/models/operations/registrytestregistryrequest.md
  - docs/models/operations/registryupdateregistrytype.md
  - docs/models/operations/registryupdaterequest.md
  - docs/models/operations/rollbackdeleterequest.md
  - docs/models/operations/rollbackrollbackrequest.md
  - docs/models/operations/schedulecreaterequest.md
  - docs/models/operations/schedulecreatescheduletype.md
  - docs/models/operations/schedulecreateshelltype.md
  - docs/models/operations/scheduledeleterequest.md
  - docs/models/operations/schedulelistrequest.md
  - docs/models/operations/schedulelistscheduletype.md
  - docs/models/operations/scheduleonerequest.md
  - docs/models/operations/schedulerunmanuallyrequest.md
  - docs/models/operations/scheduleupdaterequest.md
  - docs/models/operations/scheduleupdatescheduletype.md
  - docs/models/operations/scheduleupdateshelltype.md
  - docs/models/operations/securitycreaterequest.md
  - docs/models/operations/securitycreateresponse.md
  - docs/models/operations/securitycreateresponsebody.md
  - docs/models/operations/securitydeleterequest.md
  - docs/models/operations/securitydeleteresponse.md
  - docs/models/operations/securitydeleteresponsebody.md
  - docs/models/operations/securityonerequest.md
  - docs/models/operations/securityoneresponse.md
  - docs/models/operations/securityoneresponsebody.md
  - docs/models/operations/securityupdaterequest.md
  - docs/models/operations/securityupdateresponse.md
  - docs/models/operations/securityupdateresponsebody.md
  - docs/models/operations/selectedservice.md
  - docs/models/operations/servercreaterequest.md
  - docs/models/operations/servergetdefaultcommandrequest.md
  - docs/models/operations/servergetservermetricsrequest.md
  - docs/models/operations/serveronerequest.md
  - docs/models/operations/serverremoverequest.md
  - docs/models/operations/serversecurityrequest.md
  - docs/models/operations/serversetupmonitoringcontainers.md
  - docs/models/operations/serversetupmonitoringmetricsconfig.md
  - docs/models/operations/serversetupmonitoringrequest.md
  - docs/models/operations/serversetupmonitoringserver.md
  - docs/models/operations/serversetupmonitoringservices.md
  - docs/models/operations/serversetupmonitoringthresholds.md
  - docs/models/operations/serversetuprequest.md
  - docs/models/operations/servertype.md
  - docs/models/operations/serverupdaterequest.md
  - docs/models/operations/servervalidaterequest.md
  - docs/models/operations/settingsassigndomainservercertificatetype.md
  - docs/models/operations/settingsassigndomainserverrequest.md
  - docs/models/operations/settingscheckgpustatusrequest.md
  - docs/models/operations/settingscleanallrequest.md
  - docs/models/operations/settingscleandockerbuilderrequest.md
  - docs/models/operations/settingscleandockerprunerequest.md
  - docs/models/operations/settingscleanstoppedcontainersrequest.md
  - docs/models/operations/settingscleanunusedimagesrequest.md
  - docs/models/operations/settingscleanunusedvolumesrequest.md
  - docs/models/operations/settingsgettraefikportsrequest.md
  - docs/models/operations/settingshavetraefikdashboardportenabledrequest.md
  - docs/models/operations/settingsreaddirectoriesrequest.md
  - docs/models/operations/settingsreadtraefikenvrequest.md
  - docs/models/operations/settingsreadtraefikfilerequest.md
  - docs/models/operations/settingsreloadtraefikrequest.md
  - docs/models/operations/settingssavesshprivatekeyrequest.md
  - docs/models/operations/settingssetupgpurequest.md
  - docs/models/operations/settingstoggledashboardrequest.md
  - docs/models/operations/settingstogglerequestsrequest.md
  - docs/models/operations/settingsupdatedockercleanuprequest.md
  - docs/models/operations/settingsupdatelogcleanuprequest.md
  - docs/models/operations/settingsupdatemiddlewaretraefikconfigrequest.md
  - docs/models/operations/settingsupdatetraefikconfigrequest.md
  - docs/models/operations/settingsupdatetraefikfilerequest.md
  - docs/models/operations/settingsupdatetraefikportsprotocol.md
  - docs/models/operations/settingsupdatetraefikportsrequest.md
  - docs/models/operations/settingsupdatewebservertraefikconfigrequest.md
  - docs/models/operations/settingswritetraefikenvrequest.md
  - docs/models/operations/sshkeycreaterequest.md
  - docs/models/operations/sshkeygeneraterequest.md
  - docs/models/operations/sshkeygeneratetype.md
  - docs/models/operations/sshkeyonerequest.md
  - docs/models/operations/sshkeyremoverequest.md
  - docs/models/operations/sshkeyupdaterequest.md
  - docs/models/operations/stripecreatecheckoutsessionrequest.md
  - docs/models/operations/swarmgetnodeappsrequest.md
  - docs/models/operations/swarmgetnodeinforequest.md
  - docs/models/operations/swarmgetnodesrequest.md
  - docs/models/operations/unauthorizedprovider.md
  - docs/models/operations/userassignpermissionsrequest.md
  - docs/models/operations/usercheckuserorganizationsrequest.md
  - docs/models/operations/usercreateapikeymetadata.md
  - docs/models/operations/usercreateapikeyrequest.md
  - docs/models/operations/userdeleteapikeyrequest.md
  - docs/models/operations/usergetcontainermetricsrequest.md
  - docs/models/operations/usergetuserbytokenrequest.md
  - docs/models/operations/useronerequest.md
  - docs/models/operations/userremoverequest.md
  - docs/models/operations/usersendinvitationrequest.md
  - docs/models/operations/userupdatecertificatetype.md
  - docs/models/operations/userupdatecontainers.md
  - docs/models/operations/userupdatemetricsconfig.md
  - docs/models/operations/userupdaterequest.md
  - docs/models/operations/userupdateserver.md
  - docs/models/operations/userupdateservices.md
  - docs/models/operations/userupdatethresholds.md
  - docs/models/operations/userupdatetype.md
  - docs/models/operations/volumebackupscreaterequest.md
  - docs/models/operations/volumebackupscreateservicetype.md
  - docs/models/operations/volumebackupsdeleterequest.md
  - docs/models/operations/volumebackupslistrequest.md
  - docs/models/operations/volumebackupsonerequest.md
  - docs/models/operations/volumebackupsrunmanuallyrequest.md
  - docs/models/operations/volumebackupsupdaterequest.md
  - docs/models/operations/volumebackupsupdateservicetype.md
  - docs/models/operations/volumebackuptype.md
  - docs/models/security.md
  - docs/sdks/admin/README.md
  - docs/sdks/ai/README.md
  - docs/sdks/application/README.md
  - docs/sdks/applications/README.md
  - docs/sdks/backup/README.md
  - docs/sdks/bitbucket/README.md
  - docs/sdks/bitbucketget/README.md
  - docs/sdks/certificates/README.md
  - docs/sdks/cluster/README.md
  - docs/sdks/compose/README.md
  - docs/sdks/deployment/README.md
  - docs/sdks/destination/README.md
  - docs/sdks/docker/README.md
  - docs/sdks/dockerget/README.md
  - docs/sdks/dokploy/README.md
  - docs/sdks/domain/README.md
  - docs/sdks/domains/README.md
  - docs/sdks/environment/README.md
  - docs/sdks/gitea/README.md
  - docs/sdks/github/README.md
  - docs/sdks/githubget/README.md
  - docs/sdks/gitlab/README.md
  - docs/sdks/gitprovider/README.md
  - docs/sdks/gitproviders/README.md
  - docs/sdks/mariadb/README.md
  - docs/sdks/mongo/README.md
  - docs/sdks/mounts/README.md
  - docs/sdks/mysql/README.md
  - docs/sdks/notification/README.md
  - docs/sdks/notifications/README.md
  - docs/sdks/organization/README.md
  - docs/sdks/port/README.md
  - docs/sdks/postgres/README.md
  - docs/sdks/previewdeployment/README.md
  - docs/sdks/project/README.md
  - docs/sdks/projects/README.md
  - docs/sdks/redirects/README.md
  - docs/sdks/redis/README.md
  - docs/sdks/registry/README.md
  - docs/sdks/rollback/README.md
  - docs/sdks/schedule/README.md
  - docs/sdks/security/README.md
  - docs/sdks/server/README.md
  - docs/sdks/servers/README.md
  - docs/sdks/settings/README.md
  - docs/sdks/sshkey/README.md
  - docs/sdks/sshkeys/README.md
  - docs/sdks/stripe/README.md
  - docs/sdks/swarm/README.md
  - docs/sdks/user/README.md
  - docs/sdks/users/README.md
  - docs/sdks/volumebackups/README.md
  - eslint.config.mjs
  - examples/.env.template
  - examples/README.md
  - examples/adminSetupMonitoring.example.ts
  - examples/package.json
  - jsr.json
  - package.json
  - src/core.ts
  - src/funcs/adminSetupMonitoring.ts
  - src/funcs/aiCreate.ts
  - src/funcs/aiDelete.ts
  - src/funcs/aiDeploy.ts
  - src/funcs/aiGet.ts
  - src/funcs/aiGetAll.ts
  - src/funcs/aiGetModels.ts
  - src/funcs/aiGetOne.ts
  - src/funcs/aiSuggest.ts
  - src/funcs/aiUpdate.ts
  - src/funcs/applicationCancelDeployment.ts
  - src/funcs/applicationCleanQueues.ts
  - src/funcs/applicationCreate.ts
  - src/funcs/applicationDelete.ts
  - src/funcs/applicationDeploy.ts
  - src/funcs/applicationDisconnectGitProvider.ts
  - src/funcs/applicationGet.ts
  - src/funcs/applicationMarkRunning.ts
  - src/funcs/applicationReadAppMonitoring.ts
  - src/funcs/applicationRedeploy.ts
  - src/funcs/applicationReload.ts
  - src/funcs/applicationSaveBitbucketProvider.ts
  - src/funcs/applicationSaveBuildType.ts
  - src/funcs/applicationSaveDockerProvider.ts
  - src/funcs/applicationSaveEnvironment.ts
  - src/funcs/applicationSaveGitProdiver.ts
  - src/funcs/applicationSaveGiteaProvider.ts
  - src/funcs/applicationSaveGitlabProvider.ts
  - src/funcs/applicationStop.ts
  - src/funcs/applicationUpdate.ts
  - src/funcs/applicationUpdateTraefikConfig.ts
  - src/funcs/applicationsMove.ts
  - src/funcs/applicationsReadTraefikConfig.ts
  - src/funcs/applicationsRefreshToken.ts
  - src/funcs/applicationsSaveGithubProvider.ts
  - src/funcs/applicationsStart.ts
  - src/funcs/backupCreate.ts
  - src/funcs/backupListFiles.ts
  - src/funcs/backupManualBackupCompose.ts
  - src/funcs/backupManualBackupMariadb.ts
  - src/funcs/backupManualBackupMongo.ts
  - src/funcs/backupManualBackupMySql.ts
  - src/funcs/backupManualBackupPostgres.ts
  - src/funcs/backupManualBackupWebServer.ts
  - src/funcs/backupOne.ts
  - src/funcs/backupRemove.ts
  - src/funcs/backupUpdate.ts
  - src/funcs/bitbucketCreate.ts
  - src/funcs/bitbucketGetBranches.ts
  - src/funcs/bitbucketGetOne.ts
  - src/funcs/bitbucketGetProviders.ts
  - src/funcs/bitbucketGetRepositories.ts
  - src/funcs/bitbucketTestConnection.ts
  - src/funcs/bitbucketUpdate.ts
  - src/funcs/certificatesCreate.ts
  - src/funcs/certificatesGet.ts
  - src/funcs/certificatesGetAll.ts
  - src/funcs/certificatesRemove.ts
  - src/funcs/clusterAddManager.ts
  - src/funcs/clusterAddWorker.ts
  - src/funcs/clusterGetNodes.ts
  - src/funcs/clusterRemoveWorker.ts
  - src/funcs/composeCancelDeployment.ts
  - src/funcs/composeCleanQueues.ts
  - src/funcs/composeCreate.ts
  - src/funcs/composeDelete.ts
  - src/funcs/composeDeploy.ts
  - src/funcs/composeDeployTemplate.ts
  - src/funcs/composeDisconnectGitprovider.ts
  - src/funcs/composeFetchSourceType.ts
  - src/funcs/composeGetConvertedCompose.ts
  - src/funcs/composeGetDefaultCommand.ts
  - src/funcs/composeGetTags.ts
  - src/funcs/composeGetTemplates.ts
  - src/funcs/composeImport.ts
  - src/funcs/composeIsolatedDeployment.ts
  - src/funcs/composeLoadMountsByService.ts
  - src/funcs/composeMove.ts
  - src/funcs/composeOne.ts
  - src/funcs/composeProcessTemplate.ts
  - src/funcs/composeRandomizeCompose.ts
  - src/funcs/composeRedeploy.ts
  - src/funcs/composeRefreshToken.ts
  - src/funcs/composeStart.ts
  - src/funcs/composeStop.ts
  - src/funcs/composeUpdate.ts
  - src/funcs/deploymentAll.ts
  - src/funcs/deploymentAllByServer.ts
  - src/funcs/deploymentGetAllByCompose.ts
  - src/funcs/deploymentGetAllByType.ts
  - src/funcs/deploymentKillProcess.ts
  - src/funcs/destinationCreate.ts
  - src/funcs/destinationGet.ts
  - src/funcs/destinationGetAll.ts
  - src/funcs/destinationRemove.ts
  - src/funcs/destinationTestConnection.ts
  - src/funcs/destinationUpdate.ts
  - src/funcs/dockerGetConfig.ts
  - src/funcs/dockerGetContainers.ts
  - src/funcs/dockerGetContainersByAppLabel.ts
  - src/funcs/dockerGetContainersByAppNameMatch.ts
  - src/funcs/dockerGetServiceContainersByAppName.ts
  - src/funcs/dockerGetStackContainersByAppName.ts
  - src/funcs/dockerRestartContainer.ts
  - src/funcs/domainByApplicationId.ts
  - src/funcs/domainCanGenerateTraefikDomains.ts
  - src/funcs/domainCreate.ts
  - src/funcs/domainDelete.ts
  - src/funcs/domainGenerateDomain.ts
  - src/funcs/domainGetByComposeId.ts
  - src/funcs/domainUpdate.ts
  - src/funcs/domainValidateDomain.ts
  - src/funcs/domainsGet.ts
  - src/funcs/environmentByProjectId.ts
  - src/funcs/environmentCreate.ts
  - src/funcs/environmentDuplicate.ts
  - src/funcs/environmentGet.ts
  - src/funcs/environmentRemove.ts
  - src/funcs/environmentUpdate.ts
  - src/funcs/gitProvidersGetAll.ts
  - src/funcs/giteaCreate.ts
  - src/funcs/giteaGet.ts
  - src/funcs/giteaGetBranches.ts
  - src/funcs/giteaGetProviders.ts
  - src/funcs/giteaGetRepositories.ts
  - src/funcs/giteaGetUrl.ts
  - src/funcs/giteaTestConnection.ts
  - src/funcs/giteaUpdate.ts
  - src/funcs/githubGetBranches.ts
  - src/funcs/githubGetGithubRepositories.ts
  - src/funcs/githubGetProviders.ts
  - src/funcs/githubOne.ts
  - src/funcs/githubTestConnection.ts
  - src/funcs/githubUpdate.ts
  - src/funcs/gitlabCreate.ts
  - src/funcs/gitlabGetBranches.ts
  - src/funcs/gitlabGetGitlabRepositories.ts
  - src/funcs/gitlabGetProviders.ts
  - src/funcs/gitlabOne.ts
  - src/funcs/gitlabTestConnection.ts
  - src/funcs/gitlabUpdate.ts
  - src/funcs/gitproviderRemove.ts
  - src/funcs/mariadbChangeStatus.ts
  - src/funcs/mariadbCreate.ts
  - src/funcs/mariadbDeploy.ts
  - src/funcs/mariadbGet.ts
  - src/funcs/mariadbMove.ts
  - src/funcs/mariadbRebuild.ts
  - src/funcs/mariadbReload.ts
  - src/funcs/mariadbRemove.ts
  - src/funcs/mariadbSaveEnvironment.ts
  - src/funcs/mariadbSaveExternalPort.ts
  - src/funcs/mariadbStart.ts
  - src/funcs/mariadbStop.ts
  - src/funcs/mariadbUpdate.ts
  - src/funcs/mongoChangeStatus.ts
  - src/funcs/mongoCreate.ts
  - src/funcs/mongoDeploy.ts
  - src/funcs/mongoGetOne.ts
  - src/funcs/mongoMove.ts
  - src/funcs/mongoRebuild.ts
  - src/funcs/mongoReload.ts
  - src/funcs/mongoRemove.ts
  - src/funcs/mongoSaveEnvironment.ts
  - src/funcs/mongoSaveExternalPort.ts
  - src/funcs/mongoStart.ts
  - src/funcs/mongoStop.ts
  - src/funcs/mongoUpdate.ts
  - src/funcs/mountsAllNamedByApplicationId.ts
  - src/funcs/mountsCreate.ts
  - src/funcs/mountsGet.ts
  - src/funcs/mountsRemove.ts
  - src/funcs/mountsUpdate.ts
  - src/funcs/mysqlChangeStatus.ts
  - src/funcs/mysqlCreate.ts
  - src/funcs/mysqlDeploy.ts
  - src/funcs/mysqlGet.ts
  - src/funcs/mysqlMove.ts
  - src/funcs/mysqlRebuild.ts
  - src/funcs/mysqlReload.ts
  - src/funcs/mysqlRemove.ts
  - src/funcs/mysqlSaveEnvironment.ts
  - src/funcs/mysqlSaveExternalPort.ts
  - src/funcs/mysqlStart.ts
  - src/funcs/mysqlStop.ts
  - src/funcs/mysqlUpdate.ts
  - src/funcs/notificationCreateDiscord.ts
  - src/funcs/notificationCreateEmail.ts
  - src/funcs/notificationCreateGotify.ts
  - src/funcs/notificationCreateNtfy.ts
  - src/funcs/notificationCreateSlack.ts
  - src/funcs/notificationCreateTelegram.ts
  - src/funcs/notificationGet.ts
  - src/funcs/notificationGetEmailProviders.ts
  - src/funcs/notificationReceiveNotification.ts
  - src/funcs/notificationRemove.ts
  - src/funcs/notificationTestDiscordConnection.ts
  - src/funcs/notificationTestEmailConnection.ts
  - src/funcs/notificationTestGotifyConnection.ts
  - src/funcs/notificationTestNtfyConnection.ts
  - src/funcs/notificationTestSlackConnection.ts
  - src/funcs/notificationTestTelegramConnection.ts
  - src/funcs/notificationUpdateDiscord.ts
  - src/funcs/notificationUpdateEmail.ts
  - src/funcs/notificationUpdateGotify.ts
  - src/funcs/notificationUpdateNtfy.ts
  - src/funcs/notificationUpdateSlack.ts
  - src/funcs/notificationUpdateTelegram.ts
  - src/funcs/notificationsGetAll.ts
  - src/funcs/organizationAllInvitations.ts
  - src/funcs/organizationCreate.ts
  - src/funcs/organizationDelete.ts
  - src/funcs/organizationGet.ts
  - src/funcs/organizationGetAll.ts
  - src/funcs/organizationRemoveInvitation.ts
  - src/funcs/organizationUpdate.ts
  - src/funcs/portCreate.ts
  - src/funcs/portDelete.ts
  - src/funcs/portGet.ts
  - src/funcs/portUpdate.ts
  - src/funcs/postgresChangeStatus.ts
  - src/funcs/postgresCreate.ts
  - src/funcs/postgresDeploy.ts
  - src/funcs/postgresGet.ts
  - src/funcs/postgresMove.ts
  - src/funcs/postgresRebuild.ts
  - src/funcs/postgresReload.ts
  - src/funcs/postgresRemove.ts
  - src/funcs/postgresSaveEnvironment.ts
  - src/funcs/postgresSaveExternalPort.ts
  - src/funcs/postgresStart.ts
  - src/funcs/postgresStop.ts
  - src/funcs/postgresUpdate.ts
  - src/funcs/previewDeploymentDelete.ts
  - src/funcs/previewDeploymentGet.ts
  - src/funcs/previewDeploymentGetAll.ts
  - src/funcs/projectCreate.ts
  - src/funcs/projectDuplicate.ts
  - src/funcs/projectGet.ts
  - src/funcs/projectGetAll.ts
  - src/funcs/projectUpdate.ts
  - src/funcs/projectsRemove.ts
  - src/funcs/redirectsCreate.ts
  - src/funcs/redirectsDelete.ts
  - src/funcs/redirectsGet.ts
  - src/funcs/redirectsUpdate.ts
  - src/funcs/redisChangeStatus.ts
  - src/funcs/redisCreate.ts
  - src/funcs/redisDeploy.ts
  - src/funcs/redisGetOne.ts
  - src/funcs/redisMove.ts
  - src/funcs/redisRebuild.ts
  - src/funcs/redisReload.ts
  - src/funcs/redisRemove.ts
  - src/funcs/redisSaveEnvironment.ts
  - src/funcs/redisSaveExternalPort.ts
  - src/funcs/redisStart.ts
  - src/funcs/redisStop.ts
  - src/funcs/redisUpdate.ts
  - src/funcs/registryCreate.ts
  - src/funcs/registryGetAll.ts
  - src/funcs/registryOne.ts
  - src/funcs/registryRemove.ts
  - src/funcs/registryTestRegistry.ts
  - src/funcs/registryUpdate.ts
  - src/funcs/rollbackDelete.ts
  - src/funcs/rollbackExecute.ts
  - src/funcs/scheduleCreate.ts
  - src/funcs/scheduleDelete.ts
  - src/funcs/scheduleGet.ts
  - src/funcs/scheduleList.ts
  - src/funcs/scheduleRunManually.ts
  - src/funcs/scheduleUpdate.ts
  - src/funcs/securityCreate.ts
  - src/funcs/securityDelete.ts
  - src/funcs/securityGet.ts
  - src/funcs/securityUpdate.ts
  - src/funcs/serverCount.ts
  - src/funcs/serverCreate.ts
  - src/funcs/serverGet.ts
  - src/funcs/serverGetAll.ts
  - src/funcs/serverGetDefaultCommand.ts
  - src/funcs/serverGetSecurity.ts
  - src/funcs/serverGetServerMetrics.ts
  - src/funcs/serverPublicIp.ts
  - src/funcs/serverRemove.ts
  - src/funcs/serverSetup.ts
  - src/funcs/serverSetupMonitoring.ts
  - src/funcs/serverUpdate.ts
  - src/funcs/serverValidate.ts
  - src/funcs/serversGetWithSshKey.ts
  - src/funcs/settingsAssignDomainServer.ts
  - src/funcs/settingsCheckGpuStatus.ts
  - src/funcs/settingsCleanAll.ts
  - src/funcs/settingsCleanDockerBuilder.ts
  - src/funcs/settingsCleanDockerPrune.ts
  - src/funcs/settingsCleanMonitoring.ts
  - src/funcs/settingsCleanRedis.ts
  - src/funcs/settingsCleanSshPrivateKey.ts
  - src/funcs/settingsCleanStoppedContainers.ts
  - src/funcs/settingsCleanUnusedImages.ts
  - src/funcs/settingsCleanUnusedVolumes.ts
  - src/funcs/settingsGet.ts
  - src/funcs/settingsGetDokployCloudIps.ts
  - src/funcs/settingsGetDokployVersion.ts
  - src/funcs/settingsGetIp.ts
  - src/funcs/settingsGetLogCleanupStatus.ts
  - src/funcs/settingsGetOpenApiDocument.ts
  - src/funcs/settingsGetReleaseTag.ts
  - src/funcs/settingsGetTraefikPorts.ts
  - src/funcs/settingsGetUpdateData.ts
  - src/funcs/settingsHaveActivateRequests.ts
  - src/funcs/settingsHaveTraefikDashboardPortEnabled.ts
  - src/funcs/settingsIsCloud.ts
  - src/funcs/settingsIsUserSubscribed.ts
  - src/funcs/settingsReadDirectories.ts
  - src/funcs/settingsReadMiddlewareTraefikConfig.ts
  - src/funcs/settingsReadTraefikConfig.ts
  - src/funcs/settingsReadTraefikEnv.ts
  - src/funcs/settingsReadTraefikFile.ts
  - src/funcs/settingsReadWebserverTraefikConfig.ts
  - src/funcs/settingsReloadRedis.ts
  - src/funcs/settingsReloadServer.ts
  - src/funcs/settingsReloadTraefik.ts
  - src/funcs/settingsSaveSshPrivateKey.ts
  - src/funcs/settingsSetupGpu.ts
  - src/funcs/settingsToggleDashboard.ts
  - src/funcs/settingsToggleRequests.ts
  - src/funcs/settingsUpdateDockerCleanup.ts
  - src/funcs/settingsUpdateLogCleanup.ts
  - src/funcs/settingsUpdateMiddlewareTraefikConfig.ts
  - src/funcs/settingsUpdateServer.ts
  - src/funcs/settingsUpdateTraefikConfig.ts
  - src/funcs/settingsUpdateTraefikFile.ts
  - src/funcs/settingsUpdateTraefikPorts.ts
  - src/funcs/settingsUpdateWebServerTraefikConfig.ts
  - src/funcs/settingsWriteTraefikEnv.ts
  - src/funcs/sshKeyAll.ts
  - src/funcs/sshKeyCreate.ts
  - src/funcs/sshKeyGet.ts
  - src/funcs/sshKeyRemove.ts
  - src/funcs/sshKeyUpdate.ts
  - src/funcs/sshKeysGenerate.ts
  - src/funcs/stripeCanCreateMoreServers.ts
  - src/funcs/stripeCreateCheckoutSession.ts
  - src/funcs/stripeCreateCustomerPortalSession.ts
  - src/funcs/stripeGetProducts.ts
  - src/funcs/swarmGetNodeApps.ts
  - src/funcs/swarmGetNodeInfo.ts
  - src/funcs/swarmGetNodes.ts
  - src/funcs/userAssignPermissions.ts
  - src/funcs/userCheckUserOrganizations.ts
  - src/funcs/userCreateApiKey.ts
  - src/funcs/userDeleteApiKey.ts
  - src/funcs/userGenerateToken.ts
  - src/funcs/userGet.ts
  - src/funcs/userGetAll.ts
  - src/funcs/userGetBackups.ts
  - src/funcs/userGetContainerMetrics.ts
  - src/funcs/userGetInvitations.ts
  - src/funcs/userGetMetricsToken.ts
  - src/funcs/userGetOne.ts
  - src/funcs/userGetServerMetrics.ts
  - src/funcs/userGetUserByToken.ts
  - src/funcs/userHaveRootAccess.ts
  - src/funcs/userSendInvitation.ts
  - src/funcs/userUpdate.ts
  - src/funcs/usersRemove.ts
  - src/funcs/volumeBackupsCreate.ts
  - src/funcs/volumeBackupsDelete.ts
  - src/funcs/volumeBackupsGet.ts
  - src/funcs/volumeBackupsList.ts
  - src/funcs/volumeBackupsRunManually.ts
  - src/funcs/volumeBackupsUpdate.ts
  - src/hooks/hooks.ts
  - src/hooks/index.ts
  - src/hooks/types.ts
  - src/index.ts
  - src/lib/base64.ts
  - src/lib/config.ts
  - src/lib/dlv.ts
  - src/lib/encodings.ts
  - src/lib/env.ts
  - src/lib/files.ts
  - src/lib/http.ts
  - src/lib/is-plain-object.ts
  - src/lib/logger.ts
  - src/lib/matchers.ts
  - src/lib/primitives.ts
  - src/lib/retries.ts
  - src/lib/schemas.ts
  - src/lib/sdks.ts
  - src/lib/security.ts
  - src/lib/url.ts
  - src/models/error.ts
  - src/models/errors/dokploydefaulterror.ts
  - src/models/errors/dokployerror.ts
  - src/models/errors/httpclienterrors.ts
  - src/models/errors/index.ts
  - src/models/errors/responsevalidationerror.ts
  - src/models/errors/sdkvalidationerror.ts
  - src/models/index.ts
  - src/models/operations/adminsetupmonitoring.ts
  - src/models/operations/aicreate.ts
  - src/models/operations/aidelete.ts
  - src/models/operations/aideploy.ts
  - src/models/operations/aiget.ts
  - src/models/operations/aigetmodels.ts
  - src/models/operations/aione.ts
  - src/models/operations/aisuggest.ts
  - src/models/operations/aiupdate.ts
  - src/models/operations/applicationcanceldeployment.ts
  - src/models/operations/applicationcleanqueues.ts
  - src/models/operations/applicationcreate.ts
  - src/models/operations/applicationdelete.ts
  - src/models/operations/applicationdeploy.ts
  - src/models/operations/applicationdisconnectgitprovider.ts
  - src/models/operations/applicationmarkrunning.ts
  - src/models/operations/applicationmove.ts
  - src/models/operations/applicationone.ts
  - src/models/operations/applicationreadappmonitoring.ts
  - src/models/operations/applicationreadtraefikconfig.ts
  - src/models/operations/applicationredeploy.ts
  - src/models/operations/applicationrefreshtoken.ts
  - src/models/operations/applicationreload.ts
  - src/models/operations/applicationsavebitbucketprovider.ts
  - src/models/operations/applicationsavebuildtype.ts
  - src/models/operations/applicationsavedockerprovider.ts
  - src/models/operations/applicationsaveenvironment.ts
  - src/models/operations/applicationsavegiteaprovider.ts
  - src/models/operations/applicationsavegithubprovider.ts
  - src/models/operations/applicationsavegitlabprovider.ts
  - src/models/operations/applicationsavegitprodiver.ts
  - src/models/operations/applicationstart.ts
  - src/models/operations/applicationstop.ts
  - src/models/operations/applicationupdate.ts
  - src/models/operations/applicationupdatetraefikconfig.ts
  - src/models/operations/backupcreate.ts
  - src/models/operations/backuplistbackupfiles.ts
  - src/models/operations/backupmanualbackupcompose.ts
  - src/models/operations/backupmanualbackupmariadb.ts
  - src/models/operations/backupmanualbackupmongo.ts
  - src/models/operations/backupmanualbackupmysql.ts
  - src/models/operations/backupmanualbackuppostgres.ts
  - src/models/operations/backupmanualbackupwebserver.ts
  - src/models/operations/backupone.ts
  - src/models/operations/backupremove.ts
  - src/models/operations/backupupdate.ts
  - src/models/operations/bitbucketbitbucketproviders.ts
  - src/models/operations/bitbucketcreate.ts
  - src/models/operations/bitbucketgetbitbucketbranches.ts
  - src/models/operations/bitbucketgetbitbucketrepositories.ts
  - src/models/operations/bitbucketone.ts
  - src/models/operations/bitbuckettestconnection.ts
  - src/models/operations/bitbucketupdate.ts
  - src/models/operations/certificatesall.ts
  - src/models/operations/certificatescreate.ts
  - src/models/operations/certificatesone.ts
  - src/models/operations/certificatesremove.ts
  - src/models/operations/clusteraddmanager.ts
  - src/models/operations/clusteraddworker.ts
  - src/models/operations/clustergetnodes.ts
  - src/models/operations/clusterremoveworker.ts
  - src/models/operations/composecanceldeployment.ts
  - src/models/operations/composecleanqueues.ts
  - src/models/operations/composecreate.ts
  - src/models/operations/composedelete.ts
  - src/models/operations/composedeploy.ts
  - src/models/operations/composedeploytemplate.ts
  - src/models/operations/composedisconnectgitprovider.ts
  - src/models/operations/composefetchsourcetype.ts
  - src/models/operations/composegetconvertedcompose.ts
  - src/models/operations/composegetdefaultcommand.ts
  - src/models/operations/composegettags.ts
  - src/models/operations/composeimport.ts
  - src/models/operations/composeisolateddeployment.ts
  - src/models/operations/composeloadmountsbyservice.ts
  - src/models/operations/composemove.ts
  - src/models/operations/composeone.ts
  - src/models/operations/composeprocesstemplate.ts
  - src/models/operations/composerandomizecompose.ts
  - src/models/operations/composeredeploy.ts
  - src/models/operations/composerefreshtoken.ts
  - src/models/operations/composestart.ts
  - src/models/operations/composestop.ts
  - src/models/operations/composetemplates.ts
  - src/models/operations/composeupdate.ts
  - src/models/operations/deploymentall.ts
  - src/models/operations/deploymentallbycompose.ts
  - src/models/operations/deploymentallbyserver.ts
  - src/models/operations/deploymentallbytype.ts
  - src/models/operations/deploymentkillprocess.ts
  - src/models/operations/destinationcreate.ts
  - src/models/operations/destinationone.ts
  - src/models/operations/destinationremove.ts
  - src/models/operations/destinationtestconnection.ts
  - src/models/operations/destinationupdate.ts
  - src/models/operations/dockergetconfig.ts
  - src/models/operations/dockergetcontainers.ts
  - src/models/operations/dockergetcontainersbyapplabel.ts
  - src/models/operations/dockergetcontainersbyappnamematch.ts
  - src/models/operations/dockergetservicecontainersbyappname.ts
  - src/models/operations/dockergetstackcontainersbyappname.ts
  - src/models/operations/dockerrestartcontainer.ts
  - src/models/operations/domainbyapplicationid.ts
  - src/models/operations/domainbycomposeid.ts
  - src/models/operations/domaincangeneratetraefikmedomains.ts
  - src/models/operations/domaincreate.ts
  - src/models/operations/domaindelete.ts
  - src/models/operations/domaingeneratedomain.ts
  - src/models/operations/domainone.ts
  - src/models/operations/domainupdate.ts
  - src/models/operations/domainvalidatedomain.ts
  - src/models/operations/environmentbyprojectid.ts
  - src/models/operations/environmentcreate.ts
  - src/models/operations/environmentduplicate.ts
  - src/models/operations/environmentone.ts
  - src/models/operations/environmentremove.ts
  - src/models/operations/environmentupdate.ts
  - src/models/operations/giteacreate.ts
  - src/models/operations/giteagetgiteabranches.ts
  - src/models/operations/giteagetgitearepositories.ts
  - src/models/operations/giteagetgiteaurl.ts
  - src/models/operations/giteagiteaproviders.ts
  - src/models/operations/giteaone.ts
  - src/models/operations/giteatestconnection.ts
  - src/models/operations/giteaupdate.ts
  - src/models/operations/githubgetgithubbranches.ts
  - src/models/operations/githubgetgithubrepositories.ts
  - src/models/operations/githubgithubproviders.ts
  - src/models/operations/githubone.ts
  - src/models/operations/githubtestconnection.ts
  - src/models/operations/githubupdate.ts
  - src/models/operations/gitlabcreate.ts
  - src/models/operations/gitlabgetgitlabbranches.ts
  - src/models/operations/gitlabgetgitlabrepositories.ts
  - src/models/operations/gitlabgitlabproviders.ts
  - src/models/operations/gitlabone.ts
  - src/models/operations/gitlabtestconnection.ts
  - src/models/operations/gitlabupdate.ts
  - src/models/operations/gitprovidergetall.ts
  - src/models/operations/gitproviderremove.ts
  - src/models/operations/index.ts
  - src/models/operations/mariadbchangestatus.ts
  - src/models/operations/mariadbcreate.ts
  - src/models/operations/mariadbdeploy.ts
  - src/models/operations/mariadbmove.ts
  - src/models/operations/mariadbone.ts
  - src/models/operations/mariadbrebuild.ts
  - src/models/operations/mariadbreload.ts
  - src/models/operations/mariadbremove.ts
  - src/models/operations/mariadbsaveenvironment.ts
  - src/models/operations/mariadbsaveexternalport.ts
  - src/models/operations/mariadbstart.ts
  - src/models/operations/mariadbstop.ts
  - src/models/operations/mariadbupdate.ts
  - src/models/operations/mongochangestatus.ts
  - src/models/operations/mongocreate.ts
  - src/models/operations/mongodeploy.ts
  - src/models/operations/mongomove.ts
  - src/models/operations/mongoone.ts
  - src/models/operations/mongorebuild.ts
  - src/models/operations/mongoreload.ts
  - src/models/operations/mongoremove.ts
  - src/models/operations/mongosaveenvironment.ts
  - src/models/operations/mongosaveexternalport.ts
  - src/models/operations/mongostart.ts
  - src/models/operations/mongostop.ts
  - src/models/operations/mongoupdate.ts
  - src/models/operations/mountsallnamedbyapplicationid.ts
  - src/models/operations/mountscreate.ts
  - src/models/operations/mountsone.ts
  - src/models/operations/mountsremove.ts
  - src/models/operations/mountsupdate.ts
  - src/models/operations/mysqlchangestatus.ts
  - src/models/operations/mysqlcreate.ts
  - src/models/operations/mysqldeploy.ts
  - src/models/operations/mysqlmove.ts
  - src/models/operations/mysqlone.ts
  - src/models/operations/mysqlrebuild.ts
  - src/models/operations/mysqlreload.ts
  - src/models/operations/mysqlremove.ts
  - src/models/operations/mysqlsaveenvironment.ts
  - src/models/operations/mysqlsaveexternalport.ts
  - src/models/operations/mysqlstart.ts
  - src/models/operations/mysqlstop.ts
  - src/models/operations/mysqlupdate.ts
  - src/models/operations/notificationcreatediscord.ts
  - src/models/operations/notificationcreateemail.ts
  - src/models/operations/notificationcreategotify.ts
  - src/models/operations/notificationcreatentfy.ts
  - src/models/operations/notificationcreateslack.ts
  - src/models/operations/notificationcreatetelegram.ts
  - src/models/operations/notificationone.ts
  - src/models/operations/notificationreceivenotification.ts
  - src/models/operations/notificationremove.ts
  - src/models/operations/notificationtestdiscordconnection.ts
  - src/models/operations/notificationtestemailconnection.ts
  - src/models/operations/notificationtestgotifyconnection.ts
  - src/models/operations/notificationtestntfyconnection.ts
  - src/models/operations/notificationtestslackconnection.ts
  - src/models/operations/notificationtesttelegramconnection.ts
  - src/models/operations/notificationupdatediscord.ts
  - src/models/operations/notificationupdateemail.ts
  - src/models/operations/notificationupdategotify.ts
  - src/models/operations/notificationupdatentfy.ts
  - src/models/operations/notificationupdateslack.ts
  - src/models/operations/notificationupdatetelegram.ts
  - src/models/operations/organizationall.ts
  - src/models/operations/organizationcreate.ts
  - src/models/operations/organizationdelete.ts
  - src/models/operations/organizationone.ts
  - src/models/operations/organizationremoveinvitation.ts
  - src/models/operations/organizationupdate.ts
  - src/models/operations/portcreate.ts
  - src/models/operations/portdelete.ts
  - src/models/operations/portone.ts
  - src/models/operations/portupdate.ts
  - src/models/operations/postgreschangestatus.ts
  - src/models/operations/postgrescreate.ts
  - src/models/operations/postgresdeploy.ts
  - src/models/operations/postgresmove.ts
  - src/models/operations/postgresone.ts
  - src/models/operations/postgresrebuild.ts
  - src/models/operations/postgresreload.ts
  - src/models/operations/postgresremove.ts
  - src/models/operations/postgressaveenvironment.ts
  - src/models/operations/postgressaveexternalport.ts
  - src/models/operations/postgresstart.ts
  - src/models/operations/postgresstop.ts
  - src/models/operations/postgresupdate.ts
  - src/models/operations/previewdeploymentall.ts
  - src/models/operations/previewdeploymentdelete.ts
  - src/models/operations/previewdeploymentone.ts
  - src/models/operations/projectall.ts
  - src/models/operations/projectcreate.ts
  - src/models/operations/projectduplicate.ts
  - src/models/operations/projectone.ts
  - src/models/operations/projectremove.ts
  - src/models/operations/projectupdate.ts
  - src/models/operations/redirectscreate.ts
  - src/models/operations/redirectsdelete.ts
  - src/models/operations/redirectsone.ts
  - src/models/operations/redirectsupdate.ts
  - src/models/operations/redischangestatus.ts
  - src/models/operations/rediscreate.ts
  - src/models/operations/redisdeploy.ts
  - src/models/operations/redismove.ts
  - src/models/operations/redisone.ts
  - src/models/operations/redisrebuild.ts
  - src/models/operations/redisreload.ts
  - src/models/operations/redisremove.ts
  - src/models/operations/redissaveenvironment.ts
  - src/models/operations/redissaveexternalport.ts
  - src/models/operations/redisstart.ts
  - src/models/operations/redisstop.ts
  - src/models/operations/redisupdate.ts
  - src/models/operations/registrycreate.ts
  - src/models/operations/registryone.ts
  - src/models/operations/registryremove.ts
  - src/models/operations/registrytestregistry.ts
  - src/models/operations/registryupdate.ts
  - src/models/operations/rollbackdelete.ts
  - src/models/operations/rollbackrollback.ts
  - src/models/operations/schedulecreate.ts
  - src/models/operations/scheduledelete.ts
  - src/models/operations/schedulelist.ts
  - src/models/operations/scheduleone.ts
  - src/models/operations/schedulerunmanually.ts
  - src/models/operations/scheduleupdate.ts
  - src/models/operations/securitycreate.ts
  - src/models/operations/securitydelete.ts
  - src/models/operations/securityone.ts
  - src/models/operations/securityupdate.ts
  - src/models/operations/servercreate.ts
  - src/models/operations/servergetdefaultcommand.ts
  - src/models/operations/servergetservermetrics.ts
  - src/models/operations/serverone.ts
  - src/models/operations/serverremove.ts
  - src/models/operations/serversecurity.ts
  - src/models/operations/serversetup.ts
  - src/models/operations/serversetupmonitoring.ts
  - src/models/operations/serverupdate.ts
  - src/models/operations/servervalidate.ts
  - src/models/operations/settingsassigndomainserver.ts
  - src/models/operations/settingscheckgpustatus.ts
  - src/models/operations/settingscleanall.ts
  - src/models/operations/settingscleandockerbuilder.ts
  - src/models/operations/settingscleandockerprune.ts
  - src/models/operations/settingscleanstoppedcontainers.ts
  - src/models/operations/settingscleanunusedimages.ts
  - src/models/operations/settingscleanunusedvolumes.ts
  - src/models/operations/settingsgettraefikports.ts
  - src/models/operations/settingshavetraefikdashboardportenabled.ts
  - src/models/operations/settingsreaddirectories.ts
  - src/models/operations/settingsreadtraefikenv.ts
  - src/models/operations/settingsreadtraefikfile.ts
  - src/models/operations/settingsreloadtraefik.ts
  - src/models/operations/settingssavesshprivatekey.ts
  - src/models/operations/settingssetupgpu.ts
  - src/models/operations/settingstoggledashboard.ts
  - src/models/operations/settingstogglerequests.ts
  - src/models/operations/settingsupdatedockercleanup.ts
  - src/models/operations/settingsupdatelogcleanup.ts
  - src/models/operations/settingsupdatemiddlewaretraefikconfig.ts
  - src/models/operations/settingsupdatetraefikconfig.ts
  - src/models/operations/settingsupdatetraefikfile.ts
  - src/models/operations/settingsupdatetraefikports.ts
  - src/models/operations/settingsupdatewebservertraefikconfig.ts
  - src/models/operations/settingswritetraefikenv.ts
  - src/models/operations/sshkeycreate.ts
  - src/models/operations/sshkeygenerate.ts
  - src/models/operations/sshkeyone.ts
  - src/models/operations/sshkeyremove.ts
  - src/models/operations/sshkeyupdate.ts
  - src/models/operations/stripecreatecheckoutsession.ts
  - src/models/operations/swarmgetnodeapps.ts
  - src/models/operations/swarmgetnodeinfo.ts
  - src/models/operations/swarmgetnodes.ts
  - src/models/operations/userassignpermissions.ts
  - src/models/operations/usercheckuserorganizations.ts
  - src/models/operations/usercreateapikey.ts
  - src/models/operations/userdeleteapikey.ts
  - src/models/operations/usergetcontainermetrics.ts
  - src/models/operations/usergetuserbytoken.ts
  - src/models/operations/userone.ts
  - src/models/operations/userremove.ts
  - src/models/operations/usersendinvitation.ts
  - src/models/operations/userupdate.ts
  - src/models/operations/volumebackupscreate.ts
  - src/models/operations/volumebackupsdelete.ts
  - src/models/operations/volumebackupslist.ts
  - src/models/operations/volumebackupsone.ts
  - src/models/operations/volumebackupsrunmanually.ts
  - src/models/operations/volumebackupsupdate.ts
  - src/models/security.ts
  - src/sdk/admin.ts
  - src/sdk/ai.ts
  - src/sdk/application.ts
  - src/sdk/applications.ts
  - src/sdk/backup.ts
  - src/sdk/bitbucket.ts
  - src/sdk/bitbucketget.ts
  - src/sdk/certificates.ts
  - src/sdk/cluster.ts
  - src/sdk/compose.ts
  - src/sdk/deployment.ts
  - src/sdk/destination.ts
  - src/sdk/docker.ts
  - src/sdk/dockerget.ts
  - src/sdk/domain.ts
  - src/sdk/domains.ts
  - src/sdk/environment.ts
  - src/sdk/gitea.ts
  - src/sdk/github.ts
  - src/sdk/githubget.ts
  - src/sdk/gitlab.ts
  - src/sdk/gitprovider.ts
  - src/sdk/gitproviders.ts
  - src/sdk/index.ts
  - src/sdk/mariadb.ts
  - src/sdk/mongo.ts
  - src/sdk/mounts.ts
  - src/sdk/mysql.ts
  - src/sdk/notification.ts
  - src/sdk/notifications.ts
  - src/sdk/organization.ts
  - src/sdk/port.ts
  - src/sdk/postgres.ts
  - src/sdk/previewdeployment.ts
  - src/sdk/project.ts
  - src/sdk/projects.ts
  - src/sdk/redirects.ts
  - src/sdk/redis.ts
  - src/sdk/registry.ts
  - src/sdk/rollback.ts
  - src/sdk/schedule.ts
  - src/sdk/sdk.ts
  - src/sdk/security.ts
  - src/sdk/server.ts
  - src/sdk/servers.ts
  - src/sdk/settings.ts
  - src/sdk/sshkey.ts
  - src/sdk/sshkeys.ts
  - src/sdk/stripe.ts
  - src/sdk/swarm.ts
  - src/sdk/user.ts
  - src/sdk/users.ts
  - src/sdk/volumebackups.ts
  - src/types/async.ts
  - src/types/blobs.ts
  - src/types/constdatetime.ts
  - src/types/enums.ts
  - src/types/fp.ts
  - src/types/index.ts
  - src/types/operations.ts
  - src/types/rfcdate.ts
  - src/types/streams.ts
  - tsconfig.json
examples:
  admin-setupMonitoring:
    speakeasy-default-admin-setup-monitoring:
      requestBody:
        application/json: {"metricsConfig": {"containers": {"refreshRate": 7401.48, "services": {}}, "server": {"cronJob": "<value>", "port": 8537.41, "refreshRate": 4397.9, "retentionDays": 6999.95, "thresholds": {"cpu": 5497.84, "memory": 6419.22}, "token": "<value>", "urlCallback": "https://majestic-scratch.org"}}}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  docker-getContainers:
    speakeasy-default-docker-get-containers:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  docker-restartContainer:
    speakeasy-default-docker-restart-container:
      requestBody:
        application/json: {"containerId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  docker-getConfig:
    speakeasy-default-docker-get-config:
      parameters:
        query:
          containerId: "<id>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  docker-getContainersByAppNameMatch:
    speakeasy-default-docker-get-containers-by-app-name-match:
      parameters:
        query:
          appName: "<value>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  docker-getContainersByAppLabel:
    speakeasy-default-docker-get-containers-by-app-label:
      parameters:
        query:
          appName: "<value>"
          type: "standalone"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  docker-getStackContainersByAppName:
    speakeasy-default-docker-get-stack-containers-by-app-name:
      parameters:
        query:
          appName: "<value>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  docker-getServiceContainersByAppName:
    speakeasy-default-docker-get-service-containers-by-app-name:
      parameters:
        query:
          appName: "<value>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  project-create:
    speakeasy-default-project-create:
      requestBody:
        application/json: {"name": "<value>"}
      responses:
        "200":
          application/json: {"environment": {"createdAt": "1725162123379", "description": "regarding after sentimental galvanize since structure confiscate than degenerate amid", "env": "<value>", "environmentId": "<id>", "name": "<value>", "projectId": "<id>"}, "project": {"createdAt": "1720032107823", "description": null, "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  project-one:
    speakeasy-default-project-one:
      parameters:
        query:
          projectId: "<id>"
      responses:
        "200":
          application/json: {"createdAt": "1716797501555", "description": "aside preheat event whereas times geez", "env": "<value>", "environments": [], "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  project-all:
    speakeasy-default-project-all:
      responses:
        "200":
          application/json: [{"createdAt": "1734958495688", "description": "furthermore spirit majority zowie very atop chubby waterspout", "env": "<value>", "environments": [], "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}]
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  project-remove:
    speakeasy-default-project-remove:
      requestBody:
        application/json: {"projectId": "<id>"}
      responses:
        "200":
          application/json: {"createdAt": "1726169021671", "description": "frightfully wearily perky cool inure difficult", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  project-update:
    speakeasy-default-project-update:
      requestBody:
        application/json: {"projectId": "<id>"}
      responses:
        "200":
          application/json: {"createdAt": "1715950180620", "description": "across madly um wholly now", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  project-duplicate:
    speakeasy-default-project-duplicate:
      requestBody:
        application/json: {"duplicateInSameProject": false, "includeServices": true, "name": "<value>", "sourceEnvironmentId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  application-create:
    speakeasy-default-application-create:
      requestBody:
        application/json: {"environmentId": "<id>", "name": "<value>"}
      responses:
        "200":
          application/json: {"environmentId": "<id>", "name": "<value>"}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  application-one:
    speakeasy-default-application-one:
      parameters:
        query:
          applicationId: "<id>"
      responses:
        "200":
          application/json: {"bitbucket": null, "deployments": [{"applicationId": "<id>", "backupId": "<id>", "composeId": "<id>", "createdAt": "1717005793435", "deploymentId": "<id>", "description": "even jot adventurously nor license while yahoo jacket gasp", "errorMessage": "<value>", "finishedAt": "<value>", "isPreviewDeployment": false, "logPath": "<value>", "pid": null, "previewDeploymentId": "<id>", "rollbackId": "<id>", "scheduleId": "<id>", "serverId": "<id>", "startedAt": "<value>", "status": "done", "title": "<value>", "volumeBackupId": "<id>"}], "domains": [], "environment": {"createdAt": "1707211978202", "description": "ouch qua ick besmirch sashay analyse upliftingly warmly motionless", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1714308629573", "description": "indeed soap vague than knowledgeably shady nun within deafening", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "gitea": {"accessToken": "<value>", "clientId": "<id>", "clientSecret": "<value>", "expiresAt": 355.27, "gitProviderId": "<id>", "giteaId": "<id>", "giteaUrl": "https://inborn-optimal.info/", "lastAuthenticatedAt": 7290.72, "redirectUri": "https://finished-duffel.org/", "refreshToken": "<value>", "scopes": null}, "github": {"gitProviderId": "<id>", "githubAppId": 7691.48, "githubAppName": "<value>", "githubClientId": "<id>", "githubClientSecret": "<value>", "githubId": "<id>", "githubInstallationId": "<id>", "githubPrivateKey": "<value>", "githubWebhookSecret": "<value>"}, "gitlab": {"accessToken": "<value>", "applicationId": "<id>", "expiresAt": 8666.36, "gitProviderId": "<id>", "gitlabId": "<id>", "gitlabUrl": "https://scaly-supplier.biz/", "groupName": null, "redirectUri": "https://hurtful-iridescence.info/", "refreshToken": "<value>", "secret": "<value>"}, "hasGitProviderAccess": true, "mounts": [], "name": "<value>", "ports": [], "previewDeployments": [], "redirects": [], "registry": {"createdAt": "1723514371441", "imagePrefix": "<value>", "organizationId": "<id>", "password": "qCecezjmL3TiLNq", "registryId": "<id>", "registryName": "<value>", "registryType": "selfHosted", "registryUrl": "https://fortunate-marten.info/", "username": "Gaston.Kub"}, "security": [], "server": {"appName": "<value>", "command": "<value>", "createdAt": "1718632955379", "description": "gah below past", "enableDockerCleanup": false, "ipAddress": "158.128.100.248", "metricsConfig": "<value>", "name": "<value>", "organizationId": "<id>", "port": 3623.64, "serverId": "<id>", "serverStatus": "active", "sshKeyId": "<id>", "username": "Makenzie_Murazik"}, "unauthorizedProvider": "github"}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  application-reload:
    speakeasy-default-application-reload:
      requestBody:
        application/json: {"appName": "<value>", "applicationId": "<id>"}
      responses:
        "200":
          application/json: false
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  application-delete:
    speakeasy-default-application-delete:
      requestBody:
        application/json: {"applicationId": "<id>"}
      responses:
        "200":
          application/json: {"bitbucket": null, "deployments": [], "domains": [{"applicationId": "<id>", "certificateType": "custom", "composeId": "<id>", "createdAt": "1713905697000", "customCertResolver": "<value>", "domainId": "<id>", "domainType": "compose", "host": "aching-chow.org", "https": true, "internalPath": null, "path": "/rescue", "port": 5876.51, "previewDeploymentId": "<id>", "serviceName": "<value>", "stripPath": true, "uniqueConfigKey": 8682.54}], "environment": {"createdAt": "1705265116430", "description": "ligate that wherever thankfully traffic", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1715953311475", "description": "absentmindedly jaggedly doubtfully uncomfortable", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "gitea": {"accessToken": "<value>", "clientId": "<id>", "clientSecret": "<value>", "expiresAt": 9160.34, "gitProviderId": "<id>", "giteaId": "<id>", "giteaUrl": "https://alarmed-bend.name", "lastAuthenticatedAt": null, "redirectUri": "https://tempting-understanding.name/", "refreshToken": "<value>", "scopes": null}, "github": {"gitProviderId": "<id>", "githubAppId": null, "githubAppName": "<value>", "githubClientId": "<id>", "githubClientSecret": "<value>", "githubId": "<id>", "githubInstallationId": "<id>", "githubPrivateKey": "<value>", "githubWebhookSecret": "<value>"}, "gitlab": {"accessToken": "<value>", "applicationId": "<id>", "expiresAt": 1927.29, "gitProviderId": "<id>", "gitlabId": "<id>", "gitlabUrl": "https://irresponsible-wasabi.name", "groupName": null, "redirectUri": "https://jam-packed-platter.net", "refreshToken": "<value>", "secret": "<value>"}, "mounts": [{"applicationId": "<id>", "composeId": "<id>", "content": "<value>", "filePath": "/dev/curiously.vst", "hostPath": "<value>", "mariadbId": "<id>", "mongoId": "<id>", "mountId": "<id>", "mountPath": "<value>", "mysqlId": "<id>", "postgresId": "<id>", "redisId": "<id>", "serviceType": "mariadb", "type": "bind", "volumeName": "<value>"}], "name": "<value>", "ports": [], "previewDeployments": [], "redirects": [{"applicationId": "<id>", "createdAt": "1708828926607", "permanent": false, "redirectId": "<id>", "regex": "<value>", "replacement": "<value>", "uniqueConfigKey": 5643.06}], "registry": {"createdAt": "1705543577041", "imagePrefix": "<value>", "organizationId": "<id>", "password": "sN7N1yueXuVKYfy", "registryId": "<id>", "registryName": "<value>", "registryType": "selfHosted", "registryUrl": "https://long-term-mousse.biz", "username": "Verna_Crooks"}, "security": [], "server": {"appName": "<value>", "command": "<value>", "createdAt": "1709105190457", "description": "near how runny mid buzzing worriedly demonstrate fooey athwart peaceful", "enableDockerCleanup": false, "ipAddress": "3cac:4f5b:ebb8:856d:994a:0b6f:76c3:d195", "metricsConfig": [], "name": "<value>", "organizationId": "<id>", "port": 9985.71, "serverId": "<id>", "serverStatus": "inactive", "sshKeyId": "<id>", "username": "Mandy_Schowalter99"}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  application-stop:
    speakeasy-default-application-stop:
      requestBody:
        application/json: {"applicationId": "<id>"}
      responses:
        "200":
          application/json: {"bitbucket": {"appPassword": "<value>", "bitbucketId": "<id>", "bitbucketUsername": "<value>", "bitbucketWorkspaceName": "<value>", "gitProviderId": "<id>"}, "deployments": [], "domains": [{"applicationId": "<id>", "certificateType": "none", "composeId": "<id>", "createdAt": "1707891386643", "customCertResolver": "<value>", "domainId": "<id>", "domainType": "preview", "host": "warped-event.name", "https": true, "internalPath": "<value>", "path": "/opt/bin", "port": 839.6, "previewDeploymentId": "<id>", "serviceName": "<value>", "stripPath": false, "uniqueConfigKey": 2982.43}], "environment": {"createdAt": "1714917831051", "description": "pike unto ah profane jaggedly", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1708325454971", "description": "unimpressively gee frizzy because beside", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "gitea": {"accessToken": "<value>", "clientId": "<id>", "clientSecret": null, "expiresAt": 3753.1, "gitProviderId": "<id>", "giteaId": "<id>", "giteaUrl": "https://trained-barge.org", "lastAuthenticatedAt": 5132.94, "redirectUri": "https://moral-willow.name/", "refreshToken": "<value>", "scopes": "<value>"}, "github": {"gitProviderId": "<id>", "githubAppId": 3017.02, "githubAppName": "<value>", "githubClientId": "<id>", "githubClientSecret": "<value>", "githubId": "<id>", "githubInstallationId": "<id>", "githubPrivateKey": "<value>", "githubWebhookSecret": "<value>"}, "gitlab": {"accessToken": "<value>", "applicationId": "<id>", "expiresAt": 4580.73, "gitProviderId": "<id>", "gitlabId": "<id>", "gitlabUrl": "https://mealy-hexagon.org", "groupName": "<value>", "redirectUri": null, "refreshToken": "<value>", "secret": "<value>"}, "mounts": [], "name": "<value>", "ports": [{"applicationId": "<id>", "portId": "<id>", "protocol": "udp", "publishMode": "ingress", "publishedPort": 9175.03, "targetPort": 37.38}], "previewDeployments": [], "redirects": [], "registry": {"createdAt": "1729424675526", "imagePrefix": "<value>", "organizationId": "<id>", "password": "JfvMYX7e7wFY9pi", "registryId": "<id>", "registryName": "<value>", "registryType": "selfHosted", "registryUrl": "https://distorted-zebra.org/", "username": "Dannie.Durgan"}, "security": [{"applicationId": "<id>", "createdAt": "1706695436442", "password": "HeVWrM8YdDoahGa", "securityId": "<id>", "username": "Jada13"}], "server": {"appName": "<value>", "command": "<value>", "createdAt": "1725954823338", "description": "mortise gladly vamoose understated through", "enableDockerCleanup": true, "ipAddress": "159.116.11.100", "metricsConfig": "null", "name": "<value>", "organizationId": "<id>", "port": 8374.41, "serverId": "<id>", "serverStatus": "active", "sshKeyId": "<id>", "username": "Maddison.Aufderhar"}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  application-start:
    speakeasy-default-application-start:
      requestBody:
        application/json: {"applicationId": "<id>"}
      responses:
        "200":
          application/json: {"bitbucket": {"appPassword": "<value>", "bitbucketId": "<id>", "bitbucketUsername": "<value>", "bitbucketWorkspaceName": "<value>", "gitProviderId": "<id>"}, "deployments": [], "domains": [], "environment": {"createdAt": "1709012599763", "description": "huge or fooey beautifully except tremendously outdo joyously", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1717534812401", "description": "zowie incidentally spectacles institute with scowl phew", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "gitea": {"accessToken": "<value>", "clientId": "<id>", "clientSecret": "<value>", "expiresAt": 6718.55, "gitProviderId": "<id>", "giteaId": "<id>", "giteaUrl": "https://dramatic-sightseeing.biz", "lastAuthenticatedAt": 1519.25, "redirectUri": "https://easy-amnesty.biz", "refreshToken": "<value>", "scopes": "<value>"}, "github": {"gitProviderId": "<id>", "githubAppId": 3124, "githubAppName": "<value>", "githubClientId": "<id>", "githubClientSecret": "<value>", "githubId": "<id>", "githubInstallationId": "<id>", "githubPrivateKey": "<value>", "githubWebhookSecret": "<value>"}, "gitlab": null, "mounts": [], "name": "<value>", "ports": [], "previewDeployments": [{"appName": "<value>", "applicationId": "<id>", "branch": "<value>", "createdAt": "1723382615933", "domainId": "<id>", "expiresAt": "1754764693215", "previewDeploymentId": "<id>", "previewStatus": "error", "pullRequestCommentId": "<id>", "pullRequestId": "<id>", "pullRequestNumber": "<value>", "pullRequestTitle": "<value>", "pullRequestURL": "https://tight-whale.org/"}], "redirects": [], "registry": {"createdAt": "1732429535919", "imagePrefix": "<value>", "organizationId": "<id>", "password": "YIKMCClEX2If0e5", "registryId": "<id>", "registryName": "<value>", "registryType": "cloud", "registryUrl": "https://quarterly-siege.biz", "username": "Adriel83"}, "security": [], "server": {"appName": "<value>", "command": "<value>", "createdAt": "1724801695319", "description": "apropos colonialism solder limited appreciate warmly hourly sans uncork", "enableDockerCleanup": true, "ipAddress": "afdf:b814:a3ed:2a3f:8fe2:43cd:2ddc:edfa", "metricsConfig": true, "name": "<value>", "organizationId": "<id>", "port": 9904.18, "serverId": "<id>", "serverStatus": "inactive", "sshKeyId": "<id>", "username": "Valerie.Wintheiser39"}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  application-redeploy:
    speakeasy-default-application-redeploy:
      requestBody:
        application/json: {"applicationId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  application-saveEnvironment:
    speakeasy-default-application-save-environment:
      requestBody:
        application/json: {"applicationId": "<id>"}
      responses:
        "200":
          application/json: true
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  application-saveBuildType:
    speakeasy-default-application-save-build-type:
      requestBody:
        application/json: {"applicationId": "<id>", "buildType": "dockerfile", "dockerBuildStage": null, "dockerContextPath": "<value>"}
      responses:
        "200":
          application/json: false
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  application-saveGithubProvider:
    speakeasy-default-application-save-github-provider:
      requestBody:
        application/json: {"applicationId": "<id>", "enableSubmodules": true, "githubId": "<id>", "owner": null, "triggerType": "push"}
      responses:
        "200":
          application/json: false
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  application-saveGitlabProvider:
    speakeasy-default-application-save-gitlab-provider:
      requestBody:
        application/json: {"applicationId": "<id>", "enableSubmodules": false, "gitlabBranch": "<value>", "gitlabBuildPath": "<value>", "gitlabId": "<id>", "gitlabOwner": "<value>", "gitlabPathNamespace": "<value>", "gitlabProjectId": 950.43, "gitlabRepository": "<value>"}
      responses:
        "200":
          application/json: true
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  application-saveBitbucketProvider:
    speakeasy-default-application-save-bitbucket-provider:
      requestBody:
        application/json: {"applicationId": "<id>", "bitbucketBranch": "<value>", "bitbucketBuildPath": "<value>", "bitbucketId": "<id>", "bitbucketOwner": "<value>", "bitbucketRepository": "<value>", "enableSubmodules": false}
      responses:
        "200":
          application/json: false
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  application-saveGiteaProvider:
    speakeasy-default-application-save-gitea-provider:
      requestBody:
        application/json: {"applicationId": "<id>", "enableSubmodules": false, "giteaBranch": "<value>", "giteaBuildPath": "<value>", "giteaId": "<id>", "giteaOwner": "<value>", "giteaRepository": "<value>"}
      responses:
        "200":
          application/json: true
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  application-saveDockerProvider:
    speakeasy-default-application-save-docker-provider:
      requestBody:
        application/json: {"applicationId": "<id>"}
      responses:
        "200":
          application/json: true
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  application-saveGitProdiver:
    speakeasy-default-application-save-git-prodiver:
      requestBody:
        application/json: {"applicationId": "<id>", "enableSubmodules": true}
      responses:
        "200":
          application/json: false
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  application-disconnectGitProvider:
    speakeasy-default-application-disconnect-git-provider:
      requestBody:
        application/json: {"applicationId": "<id>"}
      responses:
        "200":
          application/json: false
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  application-markRunning:
    speakeasy-default-application-mark-running:
      requestBody:
        application/json: {"applicationId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  application-update:
    speakeasy-default-application-update:
      requestBody:
        application/json: {"applicationId": "<id>"}
      responses:
        "200":
          application/json: true
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  application-refreshToken:
    speakeasy-default-application-refresh-token:
      requestBody:
        application/json: {"applicationId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  application-deploy:
    speakeasy-default-application-deploy:
      requestBody:
        application/json: {"applicationId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  application-cleanQueues:
    speakeasy-default-application-clean-queues:
      requestBody:
        application/json: {"applicationId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  application-readTraefikConfig:
    speakeasy-default-application-read-traefik-config:
      parameters:
        query:
          applicationId: "<id>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  application-updateTraefikConfig:
    speakeasy-default-application-update-traefik-config:
      requestBody:
        application/json: {"applicationId": "<id>", "traefikConfig": "<value>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  application-readAppMonitoring:
    speakeasy-default-application-read-app-monitoring:
      parameters:
        query:
          appName: "<value>"
      responses:
        "200":
          application/json: {"block": [{"time": "<value>", "value": {"readMb": "<value>", "writeMb": "<value>"}}], "cpu": [], "disk": [], "memory": [], "network": [{"time": "<value>", "value": {"inputMb": "<value>", "outputMb": "<value>"}}]}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  application-move:
    speakeasy-default-application-move:
      requestBody:
        application/json: {"applicationId": "<id>", "targetEnvironmentId": "<id>"}
      responses:
        "200":
          application/json: {"environmentId": "<id>", "name": "<value>"}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  application-cancelDeployment:
    speakeasy-default-application-cancel-deployment:
      requestBody:
        application/json: {"applicationId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mysql-create:
    speakeasy-default-mysql-create:
      requestBody:
        application/json: {"appName": "<value>", "databaseName": "<value>", "databasePassword": "<value>", "databaseRootPassword": "<value>", "databaseUser": "<value>", "dockerImage": "mysql:8", "environmentId": "<id>", "name": "<value>"}
      responses:
        "200":
          application/json: true
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mysql-one:
    speakeasy-default-mysql-one:
      parameters:
        query:
          mysqlId: "<id>"
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "error", "backups": [], "command": "<value>", "cpuLimit": "<value>", "cpuReservation": null, "createdAt": "1725474181885", "databaseName": "<value>", "databasePassword": "<value>", "databaseRootPassword": "<value>", "databaseUser": "<value>", "description": "huzzah owlishly lest", "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1717048732532", "description": "qua trash father than glimmer", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1733814432460", "description": "before recovery doting since limply smuggle what near", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 3207.38, "healthCheckSwarm": {}, "labelsSwarm": {}, "memoryLimit": "<value>", "memoryReservation": null, "modeSwarm": {}, "mounts": [{"applicationId": null, "composeId": "<id>", "content": "<value>", "filePath": "/rescue/throughout_since_strait.dms", "hostPath": "<value>", "mariadbId": "<id>", "mongoId": "<id>", "mountId": "<id>", "mountPath": "<value>", "mysqlId": "<id>", "postgresId": "<id>", "redisId": "<id>", "serviceType": "application", "type": "bind", "volumeName": "<value>"}], "mysqlId": "<id>", "name": "<value>", "networkSwarm": [{}], "placementSwarm": null, "replicas": 8610.34, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 1864.51}, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1710267260170", "description": null, "enableDockerCleanup": true, "ipAddress": "139.237.206.233", "metricsConfig": {}, "name": "<value>", "organizationId": "<id>", "port": 6331.61, "serverId": "<id>", "serverStatus": "inactive", "sshKeyId": "<id>", "username": "Richmond_Dach"}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 5597.15}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mysql-start:
    speakeasy-default-mysql-start:
      requestBody:
        application/json: {"mysqlId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "error", "backups": [{"appName": "<value>", "backupId": "<id>", "backupType": "database", "composeId": "<id>", "database": "<value>", "databaseType": "mysql", "destinationId": "<id>", "enabled": false, "keepLatestCount": 4275.37, "mariadbId": "<id>", "mongoId": "<id>", "mysqlId": "<id>", "postgresId": "<id>", "prefix": "<value>", "schedule": "<value>", "serviceName": "<value>", "userId": "<id>"}], "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1726911149885", "databaseName": "<value>", "databasePassword": "<value>", "databaseRootPassword": "<value>", "databaseUser": "<value>", "description": "hunger what anenst though massage per onset although", "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1705576024119", "description": "to dampen during almost like junior perfectly nearly", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1711913608251", "description": "anti apud yogurt opposite qua underneath minor whose yippee", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 9529.4, "healthCheckSwarm": {}, "labelsSwarm": {"key": "<value>", "key1": "<value>", "key2": "<value>"}, "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": {}, "mounts": [{"applicationId": null, "composeId": "<id>", "content": "<value>", "filePath": "/usr/local/src/aha_supposing.xlc", "hostPath": "<value>", "mariadbId": null, "mongoId": null, "mountId": "<id>", "mountPath": "<value>", "mysqlId": "<id>", "postgresId": "<id>", "redisId": "<id>", "serviceType": "postgres", "type": "volume", "volumeName": "<value>"}], "mysqlId": "<id>", "name": "<value>", "networkSwarm": [], "placementSwarm": {}, "replicas": 5987.74, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 2962.84}, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1719548851221", "description": "godparent zowie modulo qua before nearly window before mad amidst", "enableDockerCleanup": true, "ipAddress": "190.182.190.210", "metricsConfig": {}, "name": "<value>", "organizationId": "<id>", "port": 7960.6, "serverId": "<id>", "serverStatus": "active", "sshKeyId": "<id>", "username": "Fredy_Lowe11"}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 1083.75}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mysql-stop:
    speakeasy-default-mysql-stop:
      requestBody:
        application/json: {"mysqlId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "done", "backups": [{"appName": "<value>", "backupId": "<id>", "backupType": "compose", "composeId": "<id>", "database": "<value>", "databaseType": "postgres", "destinationId": "<id>", "enabled": true, "keepLatestCount": 3528.82, "mariadbId": "<id>", "mongoId": "<id>", "mysqlId": "<id>", "postgresId": "<id>", "prefix": "<value>", "schedule": "<value>", "serviceName": null, "userId": "<id>"}], "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1718692701216", "databaseName": "<value>", "databasePassword": "<value>", "databaseRootPassword": "<value>", "databaseUser": "<value>", "description": "after mortally badly between suspiciously", "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1723022906021", "description": "ethical peony splurge", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1713849106034", "description": "up tail chap crazy square rosemary consequently right speedily", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 3522.88, "healthCheckSwarm": {}, "labelsSwarm": {"key": "<value>", "key1": "<value>", "key2": "<value>"}, "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": {}, "mounts": [], "mysqlId": "<id>", "name": "<value>", "networkSwarm": [{}], "placementSwarm": {}, "replicas": 5189.39, "restartPolicySwarm": {}, "rollbackConfigSwarm": null, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1705954327528", "description": "cumbersome opposite aha meh", "enableDockerCleanup": true, "ipAddress": "103.79.61.195", "metricsConfig": "<value>", "name": "<value>", "organizationId": "<id>", "port": 6696.31, "serverId": "<id>", "serverStatus": "active", "sshKeyId": "<id>", "username": "Delpha.Adams76"}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 6961.4}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mysql-saveExternalPort:
    speakeasy-default-mysql-save-external-port:
      requestBody:
        application/json: {"externalPort": 6359.48, "mysqlId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "running", "backups": [], "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1719465538881", "databaseName": "<value>", "databasePassword": "<value>", "databaseRootPassword": "<value>", "databaseUser": "<value>", "description": "extract appropriate cap", "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1708371011025", "description": "mid solemnly pfft what", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1723837593233", "description": "stiffen what innocent uh-huh below mummify peony however distorted unaware", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": null, "healthCheckSwarm": {}, "labelsSwarm": {"key": "<value>"}, "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": {}, "mounts": [{"applicationId": "<id>", "composeId": "<id>", "content": "<value>", "filePath": "/var/ick_skyscraper_woot.list", "hostPath": "<value>", "mariadbId": "<id>", "mongoId": "<id>", "mountId": "<id>", "mountPath": "<value>", "mysqlId": "<id>", "postgresId": "<id>", "redisId": "<id>", "serviceType": "application", "type": "volume", "volumeName": "<value>"}], "mysqlId": "<id>", "name": "<value>", "networkSwarm": [{}], "placementSwarm": {}, "replicas": 5709.42, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 2599.58}, "server": null, "serverId": "<id>", "updateConfigSwarm": null}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mysql-deploy:
    speakeasy-default-mysql-deploy:
      requestBody:
        application/json: {"mysqlId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "idle", "backups": [{"appName": "<value>", "backupId": "<id>", "backupType": "compose", "composeId": "<id>", "database": "<value>", "databaseType": "mysql", "destinationId": "<id>", "enabled": true, "keepLatestCount": 9246.4, "mariadbId": "<id>", "mongoId": "<id>", "mysqlId": "<id>", "postgresId": "<id>", "prefix": "<value>", "schedule": "<value>", "serviceName": "<value>", "userId": "<id>"}], "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1718447371204", "databaseName": "<value>", "databasePassword": "<value>", "databaseRootPassword": "<value>", "databaseUser": "<value>", "description": null, "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1730346721924", "description": "monthly outrank improbable pile", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1724940587222", "description": "warm among cricket um sheepishly briskly eulogise", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 633.84, "healthCheckSwarm": {}, "labelsSwarm": {"key": "<value>"}, "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": {}, "mounts": [], "mysqlId": "<id>", "name": "<value>", "networkSwarm": [{}], "placementSwarm": {}, "replicas": 1984.63, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 587.18}, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1725927376537", "description": "poorly because imaginary vamoose sheepishly yet", "enableDockerCleanup": true, "ipAddress": "1.60.71.86", "metricsConfig": {"key": "<value>", "key1": "<value>"}, "name": "<value>", "organizationId": "<id>", "port": 2111.19, "serverId": "<id>", "serverStatus": "active", "sshKeyId": "<id>", "username": "Nina.Daniel37"}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 1469.72}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mysql-changeStatus:
    speakeasy-default-mysql-change-status:
      requestBody:
        application/json: {"applicationStatus": "error", "mysqlId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "idle", "backups": [{"appName": "<value>", "backupId": "<id>", "backupType": "database", "composeId": "<id>", "database": "<value>", "databaseType": "mysql", "destinationId": "<id>", "enabled": false, "keepLatestCount": 5105.82, "mariadbId": "<id>", "mongoId": null, "mysqlId": "<id>", "postgresId": "<id>", "prefix": "<value>", "schedule": "<value>", "serviceName": "<value>", "userId": "<id>"}], "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1705796361658", "databaseName": "<value>", "databasePassword": "<value>", "databaseRootPassword": "<value>", "databaseUser": "<value>", "description": "till excluding excluding", "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1728801223417", "description": "biodegrade jubilantly among segregate aircraft exonerate immaculate toward restfully", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1720539400031", "description": null, "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 5146.81, "healthCheckSwarm": {}, "labelsSwarm": {"key": "<value>"}, "memoryLimit": null, "memoryReservation": "<value>", "modeSwarm": {}, "mounts": [{"applicationId": "<id>", "composeId": "<id>", "content": "<value>", "filePath": "/sys/hm_who.woff", "hostPath": "<value>", "mariadbId": null, "mongoId": null, "mountId": "<id>", "mountPath": "<value>", "mysqlId": null, "postgresId": "<id>", "redisId": "<id>", "serviceType": "postgres", "type": "volume", "volumeName": "<value>"}], "mysqlId": "<id>", "name": "<value>", "networkSwarm": [], "placementSwarm": {}, "replicas": 5864.84, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 6459.34}, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1729289829092", "description": "zowie synthesise nor polite readily gust turbulent than yahoo", "enableDockerCleanup": false, "ipAddress": "61fc:6c7b:72b7:69b2:efda:7d39:b455:e1f1", "metricsConfig": {"key": "<value>", "key1": "<value>"}, "name": "<value>", "organizationId": "<id>", "port": 4098.5, "serverId": "<id>", "serverStatus": "active", "sshKeyId": null, "username": "Virginia3"}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 1930.67}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mysql-reload:
    speakeasy-default-mysql-reload:
      requestBody:
        application/json: {"appName": "<value>", "mysqlId": "<id>"}
      responses:
        "200":
          application/json: true
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mysql-remove:
    speakeasy-default-mysql-remove:
      requestBody:
        application/json: {"mysqlId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "running", "backups": [], "command": "<value>", "cpuLimit": null, "cpuReservation": "<value>", "createdAt": "1729001064294", "databaseName": "<value>", "databasePassword": "<value>", "databaseRootPassword": "<value>", "databaseUser": "<value>", "description": "portly priesthood despite geez flimsy passport quaff cheetah which grade", "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1706769819168", "description": "by agile frankly offend", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1722431811336", "description": "where geez mousse swift gadzooks", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 2265.41, "healthCheckSwarm": {}, "labelsSwarm": {"key": "<value>", "key1": "<value>", "key2": "<value>"}, "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": {}, "mounts": [], "mysqlId": "<id>", "name": "<value>", "networkSwarm": [], "placementSwarm": {}, "replicas": 479.08, "restartPolicySwarm": null, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 8212.94}, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1708407585011", "description": null, "enableDockerCleanup": true, "ipAddress": "1e7a:afbc:e00f:d10f:b2e9:66d8:9f4b:cbe9", "metricsConfig": ["<value 1>"], "name": "<value>", "organizationId": "<id>", "port": 5940.25, "serverId": "<id>", "serverStatus": "inactive", "sshKeyId": "<id>", "username": "Eliseo56"}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 8686.73}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mysql-saveEnvironment:
    speakeasy-default-mysql-save-environment:
      requestBody:
        application/json: {"mysqlId": "<id>"}
      responses:
        "200":
          application/json: true
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mysql-update:
    speakeasy-default-mysql-update:
      requestBody:
        application/json: {"dockerImage": "mysql:8", "mysqlId": "<id>"}
      responses:
        "200":
          application/json: false
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mysql-move:
    speakeasy-default-mysql-move:
      requestBody:
        application/json: {"mysqlId": "<id>", "targetEnvironmentId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "done", "command": "<value>", "cpuLimit": null, "cpuReservation": "<value>", "createdAt": "1731262605610", "databaseName": "<value>", "databasePassword": "<value>", "databaseRootPassword": "<value>", "databaseUser": "<value>", "description": "card wilt entomb mortar inasmuch among muscat forenenst", "dockerImage": "<value>", "env": "<value>", "environmentId": "<id>", "externalPort": 8568.01, "healthCheckSwarm": {}, "labelsSwarm": {"key": "<value>", "key1": "<value>"}, "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": {}, "mysqlId": "<id>", "name": "<value>", "networkSwarm": [], "placementSwarm": {}, "replicas": 9468.54, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 7963.93}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 5496.64}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mysql-rebuild:
    speakeasy-default-mysql-rebuild:
      requestBody:
        application/json: {"mysqlId": "<id>"}
      responses:
        "200":
          application/json: false
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  postgres-create:
    speakeasy-default-postgres-create:
      requestBody:
        application/json: {"appName": "<value>", "databaseName": "<value>", "databasePassword": "<value>", "databaseUser": "<value>", "dockerImage": "postgres:15", "environmentId": "<id>", "name": "<value>"}
      responses:
        "200":
          application/json: true
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  postgres-one:
    speakeasy-default-postgres-one:
      parameters:
        query:
          postgresId: "<id>"
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "error", "backups": [{"appName": "<value>", "backupId": "<id>", "backupType": "compose", "composeId": "<id>", "database": "<value>", "databaseType": "postgres", "destinationId": "<id>", "enabled": true, "keepLatestCount": 497.02, "mariadbId": null, "mongoId": "<id>", "mysqlId": "<id>", "postgresId": "<id>", "prefix": "<value>", "schedule": "<value>", "serviceName": "<value>", "userId": "<id>"}], "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1728043530937", "databaseName": "<value>", "databasePassword": "<value>", "databaseUser": "<value>", "description": "reasoning pale forenenst reflate furlough obediently surprised concrete er", "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1713554050111", "description": "annual down radiant claw highly despite uh-huh ordinary", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1707420183079", "description": "monasticism soon restaurant selfish yet inasmuch of despite", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 7031.71, "healthCheckSwarm": null, "labelsSwarm": {"key": "<value>", "key1": "<value>", "key2": "<value>"}, "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": {}, "mounts": [], "name": "<value>", "networkSwarm": [{}], "placementSwarm": {}, "postgresId": "<id>", "replicas": 7872.23, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 8255.75}, "server": null, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 9785.74}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  postgres-start:
    speakeasy-default-postgres-start:
      requestBody:
        application/json: {"postgresId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "running", "backups": [{"appName": "<value>", "backupId": "<id>", "backupType": "compose", "composeId": "<id>", "database": "<value>", "databaseType": "mariadb", "destinationId": "<id>", "enabled": false, "keepLatestCount": 4262.94, "mariadbId": "<id>", "mongoId": "<id>", "mysqlId": "<id>", "postgresId": "<id>", "prefix": "<value>", "schedule": "<value>", "serviceName": null, "userId": "<id>"}], "command": "<value>", "cpuLimit": "<value>", "cpuReservation": null, "createdAt": "1728394153962", "databaseName": "<value>", "databasePassword": "<value>", "databaseUser": "<value>", "description": "some closely beneath", "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1731302633964", "description": "icy intensely throughout ha excepting gah ah qua tut whoever", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1723479470433", "description": "um once save barring mathematics meanwhile zowie", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 3463.62, "healthCheckSwarm": {}, "labelsSwarm": {}, "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": {}, "mounts": [], "name": "<value>", "networkSwarm": [], "placementSwarm": {}, "postgresId": "<id>", "replicas": 599.6, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 2386.25}, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1718655695526", "description": "while gah silently immense underneath vainly sweatshop abaft baritone fully", "enableDockerCleanup": false, "ipAddress": "22f0:eb10:4bad:eeb8:0eca:a648:e80e:a1c4", "metricsConfig": [], "name": "<value>", "organizationId": "<id>", "port": 661.69, "serverId": "<id>", "serverStatus": "active", "sshKeyId": null, "username": "Shad.Halvorson5"}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 2011.16}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  postgres-stop:
    speakeasy-default-postgres-stop:
      requestBody:
        application/json: {"postgresId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "done", "backups": [{"appName": "<value>", "backupId": "<id>", "backupType": "compose", "composeId": "<id>", "database": "<value>", "databaseType": "mysql", "destinationId": "<id>", "enabled": false, "keepLatestCount": 2820.19, "mariadbId": "<id>", "mongoId": null, "mysqlId": "<id>", "postgresId": "<id>", "prefix": "<value>", "schedule": "<value>", "serviceName": "<value>", "userId": "<id>"}], "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1715260433282", "databaseName": "<value>", "databasePassword": "<value>", "databaseUser": "<value>", "description": "quietly oof above where patiently circa although without cautiously", "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1731040323633", "description": "tank pale smoothly who hm pacemaker smoothly whoa ugh vice", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1706462568388", "description": "powerful ugly once phew until tightly sediment lifestyle", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 1967.33, "healthCheckSwarm": {}, "labelsSwarm": {"key": "<value>", "key1": "<value>", "key2": "<value>"}, "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": {}, "mounts": [{"applicationId": "<id>", "composeId": "<id>", "content": "<value>", "filePath": "/opt/sbin/inasmuch.webp", "hostPath": "<value>", "mariadbId": null, "mongoId": "<id>", "mountId": "<id>", "mountPath": "<value>", "mysqlId": "<id>", "postgresId": "<id>", "redisId": "<id>", "serviceType": "mysql", "type": "volume", "volumeName": "<value>"}], "name": "<value>", "networkSwarm": [], "placementSwarm": {}, "postgresId": "<id>", "replicas": 8936.09, "restartPolicySwarm": null, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 574.35}, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1711498178417", "description": "um meh yowza throughout meh fluffy bowed whose cross soon", "enableDockerCleanup": false, "ipAddress": "37.197.112.87", "metricsConfig": {"key": "<value>", "key1": "<value>"}, "name": "<value>", "organizationId": "<id>", "port": 6160.68, "serverId": "<id>", "serverStatus": "active", "sshKeyId": "<id>", "username": "Clark.Stanton"}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 7459.77}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  postgres-saveExternalPort:
    speakeasy-default-postgres-save-external-port:
      requestBody:
        application/json: {"externalPort": 3135.23, "postgresId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "error", "backups": [], "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1727576354002", "databaseName": "<value>", "databasePassword": "<value>", "databaseUser": "<value>", "description": "ornery offset plus revitalise", "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1727730526431", "description": "rarely content faithfully stiffen by woot", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1719997742523", "description": null, "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 5057.26, "healthCheckSwarm": {}, "labelsSwarm": {"key": "<value>"}, "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": null, "mounts": [{"applicationId": "<id>", "composeId": "<id>", "content": "<value>", "filePath": "/opt/bin/before_silt.exe", "hostPath": "<value>", "mariadbId": "<id>", "mongoId": "<id>", "mountId": "<id>", "mountPath": "<value>", "mysqlId": "<id>", "postgresId": "<id>", "redisId": "<id>", "serviceType": "mysql", "type": "bind", "volumeName": "<value>"}], "name": "<value>", "networkSwarm": [{}], "placementSwarm": {}, "postgresId": "<id>", "replicas": 1213.22, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 4495.21}, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1727353737736", "description": "distinction mooch incidentally", "enableDockerCleanup": false, "ipAddress": "145.228.241.44", "metricsConfig": "null", "name": "<value>", "organizationId": "<id>", "port": 2037.8, "serverId": "<id>", "serverStatus": "active", "sshKeyId": "<id>", "username": "Guy_Hammes32"}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 5270.48}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  postgres-deploy:
    speakeasy-default-postgres-deploy:
      requestBody:
        application/json: {"postgresId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "error", "backups": [], "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1729659448654", "databaseName": "<value>", "databasePassword": "<value>", "databaseUser": "<value>", "description": "swath reboot forager ascertain", "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1726116075070", "description": "developmental lay apud rim while", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1713642834032", "description": "besides against ectoderm beyond short knowledgeably upliftingly", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 939.26, "healthCheckSwarm": null, "labelsSwarm": {"key": "<value>", "key1": "<value>", "key2": "<value>"}, "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": {}, "mounts": [], "name": "<value>", "networkSwarm": [{}], "placementSwarm": {}, "postgresId": "<id>", "replicas": 9770.12, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 8776.29}, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1724087422039", "description": "up flickering translation ack speedy pish intend", "enableDockerCleanup": true, "ipAddress": "54.195.41.122", "metricsConfig": "<value>", "name": "<value>", "organizationId": "<id>", "port": 1647.31, "serverId": "<id>", "serverStatus": "inactive", "sshKeyId": null, "username": "Dax.Leffler"}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 7390.62}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  postgres-changeStatus:
    speakeasy-default-postgres-change-status:
      requestBody:
        application/json: {"applicationStatus": "idle", "postgresId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "idle", "backups": [], "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1708376569249", "databaseName": "<value>", "databasePassword": "<value>", "databaseUser": "<value>", "description": "fund terribly drat across overdub who inasmuch only after aboard", "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1709659453355", "description": "round stale yum writhing aw", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1717829457863", "description": "even offend elliptical simplistic intently almost vivaciously underpants judgementally anneal", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 9563.62, "healthCheckSwarm": {}, "labelsSwarm": {}, "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": null, "mounts": [], "name": "<value>", "networkSwarm": [], "placementSwarm": null, "postgresId": "<id>", "replicas": 2647.35, "restartPolicySwarm": null, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 5197.19}, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1734373767324", "description": "paralyse disbar among tremendously crackle carefully following before the lace", "enableDockerCleanup": true, "ipAddress": "156.236.211.222", "metricsConfig": {"key": "<value>", "key1": "<value>"}, "name": "<value>", "organizationId": "<id>", "port": 4841.47, "serverId": "<id>", "serverStatus": "inactive", "sshKeyId": "<id>", "username": "Trinity_Harber"}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 5138.16}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  postgres-remove:
    speakeasy-default-postgres-remove:
      requestBody:
        application/json: {"postgresId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "error", "backups": [{"appName": "<value>", "backupId": "<id>", "backupType": "database", "composeId": null, "database": "<value>", "databaseType": "mysql", "destinationId": "<id>", "enabled": true, "keepLatestCount": 4408.71, "mariadbId": "<id>", "mongoId": "<id>", "mysqlId": "<id>", "postgresId": "<id>", "prefix": "<value>", "schedule": "<value>", "serviceName": "<value>", "userId": "<id>"}], "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1722904762675", "databaseName": "<value>", "databasePassword": "<value>", "databaseUser": "<value>", "description": "brr fooey hyphenation concerning towards", "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1733295215825", "description": "insidious uh-huh to", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1728476230163", "description": "emphasise ah bah creator unless thoroughly depute challenge", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 2291.17, "healthCheckSwarm": {}, "labelsSwarm": {}, "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": {}, "mounts": [], "name": "<value>", "networkSwarm": [{}], "placementSwarm": {}, "postgresId": "<id>", "replicas": 5648.21, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 920.54}, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1717127263203", "description": "hmph generally transplant smoothly ha internalize", "enableDockerCleanup": true, "ipAddress": "9f3c:0f30:6ecc:fbab:bfd6:9657:67b2:d5bd", "metricsConfig": "<value>", "name": "<value>", "organizationId": "<id>", "port": 726.57, "serverId": "<id>", "serverStatus": "inactive", "sshKeyId": "<id>", "username": "Zetta.Wehner"}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 5416.05}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  postgres-saveEnvironment:
    speakeasy-default-postgres-save-environment:
      requestBody:
        application/json: {"postgresId": "<id>"}
      responses:
        "200":
          application/json: true
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  postgres-reload:
    speakeasy-default-postgres-reload:
      requestBody:
        application/json: {"appName": "<value>", "postgresId": "<id>"}
      responses:
        "200":
          application/json: true
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  postgres-update:
    speakeasy-default-postgres-update:
      requestBody:
        application/json: {"dockerImage": "postgres:15", "postgresId": "<id>"}
      responses:
        "200":
          application/json: false
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  postgres-move:
    speakeasy-default-postgres-move:
      requestBody:
        application/json: {"postgresId": "<id>", "targetEnvironmentId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "done", "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1708037446658", "databaseName": "<value>", "databasePassword": "<value>", "databaseUser": "<value>", "description": "focused svelte gad oh humor jaggedly upbeat mmm redevelop unwelcome", "dockerImage": "<value>", "env": "<value>", "environmentId": "<id>", "externalPort": 7718.78, "healthCheckSwarm": {}, "labelsSwarm": {"key": "<value>", "key1": "<value>"}, "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": {}, "name": "<value>", "networkSwarm": [{}], "placementSwarm": {}, "postgresId": "<id>", "replicas": 9862.71, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 7089.1}, "serverId": "<id>", "updateConfigSwarm": null}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  postgres-rebuild:
    speakeasy-default-postgres-rebuild:
      requestBody:
        application/json: {"postgresId": "<id>"}
      responses:
        "200":
          application/json: false
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  redis-create:
    speakeasy-default-redis-create:
      requestBody:
        application/json: {"appName": "<value>", "databasePassword": "<value>", "dockerImage": "redis:8", "environmentId": "<id>", "name": "<value>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "idle", "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1725946161220", "databasePassword": "<value>", "description": "since tail lock genuine yesterday", "dockerImage": "<value>", "env": "<value>", "environmentId": "<id>", "externalPort": 7864.22, "healthCheckSwarm": {}, "labelsSwarm": {"key": "<value>", "key1": "<value>"}, "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": {}, "name": "<value>", "networkSwarm": [], "placementSwarm": {}, "redisId": "<id>", "replicas": 3200.07, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 7961.88}, "serverId": null, "updateConfigSwarm": {"Order": "<value>", "Parallelism": 8772.7}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  redis-one:
    speakeasy-default-redis-one:
      parameters:
        query:
          redisId: "<id>"
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "running", "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1716586801450", "databasePassword": "<value>", "description": "papa likewise buttery nor cheap square", "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1724010156143", "description": "toward hence phooey uh-huh round", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1719710206131", "description": "vacantly ugh vivaciously before till scarper", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 6809.41, "healthCheckSwarm": {}, "labelsSwarm": null, "memoryLimit": "<value>", "memoryReservation": null, "modeSwarm": {}, "mounts": [{"applicationId": "<id>", "composeId": "<id>", "content": "<value>", "filePath": "/mnt/phooey.ts", "hostPath": "<value>", "mariadbId": "<id>", "mongoId": "<id>", "mountId": "<id>", "mountPath": "<value>", "mysqlId": "<id>", "postgresId": "<id>", "redisId": "<id>", "serviceType": "mariadb", "type": "file", "volumeName": "<value>"}], "name": "<value>", "networkSwarm": null, "placementSwarm": {}, "redisId": "<id>", "replicas": 4195.22, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 3105.6}, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1714035520713", "description": "coincide gray premise scotch hence", "enableDockerCleanup": true, "ipAddress": "218.142.146.96", "metricsConfig": {"key": "<value>", "key1": "<value>", "key2": "<value>"}, "name": "<value>", "organizationId": "<id>", "port": 9253.04, "serverId": "<id>", "serverStatus": "inactive", "sshKeyId": "<id>", "username": "Elda36"}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 3768.03}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  redis-start:
    speakeasy-default-redis-start:
      requestBody:
        application/json: {"redisId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "done", "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1705509377910", "databasePassword": "<value>", "description": "fit plus both yesterday napkin if regarding citizen happily speedily", "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1716406102916", "description": "gape woot injunction ew sarong unlike satirise obediently", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1705168547466", "description": "tomorrow who lest damaged", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 5903.1, "healthCheckSwarm": null, "labelsSwarm": {"key": "<value>", "key1": "<value>"}, "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": {}, "mounts": [{"applicationId": "<id>", "composeId": null, "content": "<value>", "filePath": "/net/whenever_indeed.dump", "hostPath": "<value>", "mariadbId": "<id>", "mongoId": "<id>", "mountId": "<id>", "mountPath": "<value>", "mysqlId": "<id>", "postgresId": "<id>", "redisId": "<id>", "serviceType": "mysql", "type": "bind", "volumeName": "<value>"}], "name": "<value>", "networkSwarm": [{}], "placementSwarm": {}, "redisId": "<id>", "replicas": 204.17, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 2833.33}, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1728665583983", "description": "readily sociable rosemary the hence astonishing snack proselytise tricky shrilly", "enableDockerCleanup": true, "ipAddress": "7c89:53d4:fbe1:1c4f:24c7:7abd:9fa5:eb5f", "metricsConfig": ["<value 1>", "<value 2>"], "name": "<value>", "organizationId": "<id>", "port": 3400.64, "serverId": "<id>", "serverStatus": "inactive", "sshKeyId": "<id>", "username": "Graham.Jacobs75"}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 2469.87}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  redis-reload:
    speakeasy-default-redis-reload:
      requestBody:
        application/json: {"appName": "<value>", "redisId": "<id>"}
      responses:
        "200":
          application/json: false
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  redis-stop:
    speakeasy-default-redis-stop:
      requestBody:
        application/json: {"redisId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "idle", "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1715917978862", "databasePassword": "<value>", "description": "rapidly among yahoo fooey accidentally ack", "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1714346656436", "description": "fuss openly preclude while majestically eek character", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1725762640356", "description": "how because whether tenderly instead hopelessly refer incidentally", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 8795.63, "healthCheckSwarm": {}, "labelsSwarm": {"key": "<value>", "key1": "<value>"}, "memoryLimit": "<value>", "memoryReservation": null, "modeSwarm": {}, "mounts": [{"applicationId": "<id>", "composeId": "<id>", "content": "<value>", "filePath": "/Applications/bump.jar", "hostPath": "<value>", "mariadbId": null, "mongoId": "<id>", "mountId": "<id>", "mountPath": "<value>", "mysqlId": "<id>", "postgresId": "<id>", "redisId": "<id>", "serviceType": "mongo", "type": "file", "volumeName": "<value>"}], "name": "<value>", "networkSwarm": [], "placementSwarm": {}, "redisId": "<id>", "replicas": 3780.68, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 3190.61}, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1715374405319", "description": "analogy shaft tail crafty rundown thankfully cutlet nervously quiet afraid", "enableDockerCleanup": true, "ipAddress": "173.162.120.171", "metricsConfig": {}, "name": "<value>", "organizationId": "<id>", "port": 463.05, "serverId": "<id>", "serverStatus": "active", "sshKeyId": null, "username": "Kimberly70"}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 6934.18}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  redis-saveExternalPort:
    speakeasy-default-redis-save-external-port:
      requestBody:
        application/json: {"externalPort": 8375.12, "redisId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "running", "command": null, "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1715220323703", "databasePassword": "<value>", "description": "cuckoo awkwardly severe", "dockerImage": "<value>", "env": null, "environment": {"createdAt": "1717576706522", "description": "reschedule metabolite hopelessly", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1727381356336", "description": "ick until meanwhile vary ouch viciously", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 1515.55, "healthCheckSwarm": {}, "labelsSwarm": {"key": "<value>"}, "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": {}, "mounts": [], "name": "<value>", "networkSwarm": [], "placementSwarm": null, "redisId": "<id>", "replicas": 5929.87, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 118.2}, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1731920336423", "description": "aw kooky triumphantly hm maroon ultimate brr", "enableDockerCleanup": false, "ipAddress": "fafb:efec:a22f:20ab:b2ce:f1da:d1d6:df35", "metricsConfig": {"key": "<value>", "key1": "<value>"}, "name": "<value>", "organizationId": "<id>", "port": 2033.55, "serverId": "<id>", "serverStatus": "active", "sshKeyId": "<id>", "username": "Vance_Klein-Mayert"}, "serverId": null, "updateConfigSwarm": {"Order": "<value>", "Parallelism": 4275.69}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  redis-deploy:
    speakeasy-default-redis-deploy:
      requestBody:
        application/json: {"redisId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "idle", "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1706800586462", "databasePassword": "<value>", "description": "upward for ha worriedly deliberately foolishly", "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1733519194703", "description": "opera boohoo bid", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1734903233170", "description": "insecure cycle foolish at past pillow conceal sate", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 27.37, "healthCheckSwarm": {}, "labelsSwarm": {"key": "<value>", "key1": "<value>", "key2": "<value>"}, "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": {}, "mounts": [], "name": "<value>", "networkSwarm": [], "placementSwarm": {}, "redisId": "<id>", "replicas": 2098.33, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 7175.41}, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1722330620521", "description": null, "enableDockerCleanup": true, "ipAddress": "d065:a711:2c40:ba67:1664:73f1:0ea9:f8ff", "metricsConfig": {"key": "<value>", "key1": "<value>"}, "name": "<value>", "organizationId": "<id>", "port": 6925.77, "serverId": "<id>", "serverStatus": "active", "sshKeyId": "<id>", "username": "Florencio25"}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 4132.06}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  redis-changeStatus:
    speakeasy-default-redis-change-status:
      requestBody:
        application/json: {"applicationStatus": "error", "redisId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "done", "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1704716834828", "databasePassword": "<value>", "description": "absent malfunction mature overdub ouch better", "dockerImage": "<value>", "env": null, "environment": {"createdAt": "1721377053017", "description": "petty vol but", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1720560917606", "description": "screw tag yahoo popularity blah playfully wrongly among allocation", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 9988.64, "healthCheckSwarm": {}, "labelsSwarm": {}, "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": null, "mounts": [{"applicationId": "<id>", "composeId": "<id>", "content": "<value>", "filePath": null, "hostPath": "<value>", "mariadbId": "<id>", "mongoId": "<id>", "mountId": "<id>", "mountPath": "<value>", "mysqlId": "<id>", "postgresId": null, "redisId": "<id>", "serviceType": "application", "type": "file", "volumeName": "<value>"}], "name": "<value>", "networkSwarm": [], "placementSwarm": {}, "redisId": "<id>", "replicas": 5172.99, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 5634.04}, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1733680245898", "description": null, "enableDockerCleanup": true, "ipAddress": "adc6:3ef2:68c6:9acd:ebff:0ebe:bbef:03ec", "metricsConfig": {"key": "<value>", "key1": "<value>"}, "name": "<value>", "organizationId": "<id>", "port": 2220.98, "serverId": "<id>", "serverStatus": "inactive", "sshKeyId": "<id>", "username": "Geovanni95"}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 4767.21}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  redis-remove:
    speakeasy-default-redis-remove:
      requestBody:
        application/json: {"redisId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "running", "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1729736721807", "databasePassword": "<value>", "description": "by treasure pluck mountain", "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1721387951890", "description": "which bonnet fortunately until phooey outside bench irritably inconsequential", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1711249665695", "description": "drat plagiarise suburban opposite jazz willfully", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 6851.26, "healthCheckSwarm": {}, "labelsSwarm": {"key": "<value>"}, "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": {}, "mounts": [], "name": "<value>", "networkSwarm": [], "placementSwarm": {}, "redisId": "<id>", "replicas": 1377.86, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 7029.42}, "server": null, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 5142.26}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  redis-saveEnvironment:
    speakeasy-default-redis-save-environment:
      requestBody:
        application/json: {"redisId": "<id>"}
      responses:
        "200":
          application/json: false
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  redis-update:
    speakeasy-default-redis-update:
      requestBody:
        application/json: {"dockerImage": "redis:8", "redisId": "<id>"}
      responses:
        "200":
          application/json: true
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  redis-move:
    speakeasy-default-redis-move:
      requestBody:
        application/json: {"redisId": "<id>", "targetEnvironmentId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "done", "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1705010774865", "databasePassword": "<value>", "description": "aha eek colour alliance", "dockerImage": "<value>", "env": "<value>", "environmentId": "<id>", "externalPort": 360.86, "healthCheckSwarm": {}, "labelsSwarm": {"key": "<value>", "key1": "<value>"}, "memoryLimit": null, "memoryReservation": "<value>", "modeSwarm": {}, "name": "<value>", "networkSwarm": [{}], "placementSwarm": null, "redisId": "<id>", "replicas": 4857.75, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 2167.42}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 11.6}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  redis-rebuild:
    speakeasy-default-redis-rebuild:
      requestBody:
        application/json: {"redisId": "<id>"}
      responses:
        "200":
          application/json: true
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mongo-create:
    speakeasy-default-mongo-create:
      requestBody:
        application/json: {"appName": "<value>", "databasePassword": "<value>", "databaseUser": "<value>", "dockerImage": "mongo:15", "environmentId": "<id>", "name": "<value>", "replicaSets": false}
      responses:
        "200":
          application/json: false
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mongo-one:
    speakeasy-default-mongo-one:
      parameters:
        query:
          mongoId: "<id>"
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "done", "backups": [], "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1720152646723", "databasePassword": "<value>", "databaseUser": "<value>", "description": "under super duh", "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1711105988920", "description": "judgementally divert negotiation insignificant certainly ruin whereas beautifully", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1725492269589", "description": "worldly dazzling trick boohoo", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 255.17, "healthCheckSwarm": {}, "labelsSwarm": {"key": "<value>"}, "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": {}, "mongoId": "<id>", "mounts": [], "name": "<value>", "networkSwarm": [{}], "placementSwarm": {}, "replicaSets": null, "replicas": 2780.29, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 777.21}, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1717440610290", "description": "pushy hippodrome too silk chow for plastic yuck oh fervently", "enableDockerCleanup": false, "ipAddress": "b0c9:afda:cbfd:cd4c:9a52:27dc:4d0a:b08f", "metricsConfig": false, "name": "<value>", "organizationId": "<id>", "port": 415.81, "serverId": "<id>", "serverStatus": "active", "sshKeyId": "<id>", "username": "Janis_Jacobson"}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 4269.37}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mongo-start:
    speakeasy-default-mongo-start:
      requestBody:
        application/json: {"mongoId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "done", "backups": [], "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1704453792641", "databasePassword": "<value>", "databaseUser": "<value>", "description": "mundane afore anenst despite pish until ha", "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1729067579878", "description": "afterwards dearest behest cool joyously", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1729690084859", "description": "oh chunder boyfriend rightfully sugary inasmuch proceed draft wolf", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": null, "healthCheckSwarm": {}, "labelsSwarm": {"key": "<value>", "key1": "<value>"}, "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": {}, "mongoId": "<id>", "mounts": [], "name": "<value>", "networkSwarm": [{}], "placementSwarm": {}, "replicaSets": true, "replicas": 290.5, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 2127.28}, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1706596869365", "description": "urgently abaft till by status tremendously", "enableDockerCleanup": true, "ipAddress": "a4a9:0aef:5dd9:7910:0459:13f4:39ff:0aef", "metricsConfig": 8432.95, "name": "<value>", "organizationId": "<id>", "port": 9258.55, "serverId": "<id>", "serverStatus": "inactive", "sshKeyId": "<id>", "username": "Astrid.Kessler"}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 9434.25}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mongo-stop:
    speakeasy-default-mongo-stop:
      requestBody:
        application/json: {"mongoId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "idle", "backups": [{"appName": "<value>", "backupId": "<id>", "backupType": "compose", "composeId": "<id>", "database": "<value>", "databaseType": "web-server", "destinationId": "<id>", "enabled": false, "keepLatestCount": 8091.37, "mariadbId": "<id>", "mongoId": "<id>", "mysqlId": null, "postgresId": "<id>", "prefix": "<value>", "schedule": "<value>", "serviceName": "<value>", "userId": "<id>"}], "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1710389850865", "databasePassword": "<value>", "databaseUser": "<value>", "description": "justly but chasuble furthermore chunder inside garage standard manage", "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1705875126336", "description": "carefree whereas monumental cripple swim wherever yuppify unaccountably", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1706390380392", "description": "wicked writ presume free oof ouch whereas rust elegantly aboard", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 1280.89, "healthCheckSwarm": {}, "labelsSwarm": {}, "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": {}, "mongoId": "<id>", "mounts": [{"applicationId": "<id>", "composeId": "<id>", "content": "<value>", "filePath": "/Network/yahoo_arraign_swine.csh", "hostPath": "<value>", "mariadbId": "<id>", "mongoId": "<id>", "mountId": "<id>", "mountPath": "<value>", "mysqlId": "<id>", "postgresId": "<id>", "redisId": "<id>", "serviceType": "mariadb", "type": "volume", "volumeName": "<value>"}], "name": "<value>", "networkSwarm": [{}], "placementSwarm": {}, "replicaSets": null, "replicas": 6491.25, "restartPolicySwarm": null, "rollbackConfigSwarm": null, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1715546470412", "description": "peony uselessly before", "enableDockerCleanup": true, "ipAddress": "c6cb:7a41:7efb:d257:b7ac:3d87:a717:83e7", "metricsConfig": {"key": "<value>"}, "name": "<value>", "organizationId": "<id>", "port": 278.65, "serverId": "<id>", "serverStatus": "inactive", "sshKeyId": "<id>", "username": "Myriam27"}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 1636.27}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mongo-saveExternalPort:
    speakeasy-default-mongo-save-external-port:
      requestBody:
        application/json: {"externalPort": null, "mongoId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "running", "backups": [], "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1710353710448", "databasePassword": "<value>", "databaseUser": "<value>", "description": "needy ugh yuck recklessly", "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1713321171597", "description": "measly since glimmer majestically kindly brr terrorise absolve", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1726794953639", "description": "meander coincide roadway what sailor innocently gosh finally cannon bah", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 1949.05, "healthCheckSwarm": {}, "labelsSwarm": null, "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": {}, "mongoId": "<id>", "mounts": [{"applicationId": "<id>", "composeId": null, "content": "<value>", "filePath": null, "hostPath": "<value>", "mariadbId": "<id>", "mongoId": "<id>", "mountId": "<id>", "mountPath": "<value>", "mysqlId": "<id>", "postgresId": "<id>", "redisId": null, "serviceType": "mysql", "type": "file", "volumeName": "<value>"}], "name": "<value>", "networkSwarm": [], "placementSwarm": {}, "replicaSets": true, "replicas": 6384.55, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 7296.8}, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1708140919935", "description": "thankfully below zowie essential cheetah a newsstand unrealistic annually", "enableDockerCleanup": false, "ipAddress": "7.121.102.2", "metricsConfig": false, "name": "<value>", "organizationId": "<id>", "port": 845.76, "serverId": "<id>", "serverStatus": "inactive", "sshKeyId": "<id>", "username": "Lauretta.Mohr57"}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 5769.26}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mongo-deploy:
    speakeasy-default-mongo-deploy:
      requestBody:
        application/json: {"mongoId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "running", "backups": [], "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1713837481211", "databasePassword": "<value>", "databaseUser": "<value>", "description": "though upset footrest insidious throbbing yum maintainer but", "dockerImage": "<value>", "env": null, "environment": {"createdAt": "1713298052017", "description": null, "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1717609472182", "description": "an tricky reproachfully usefully", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 8410.2, "healthCheckSwarm": {}, "labelsSwarm": {"key": "<value>", "key1": "<value>"}, "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": {}, "mongoId": "<id>", "mounts": [], "name": "<value>", "networkSwarm": [], "placementSwarm": {}, "replicaSets": true, "replicas": 3507.66, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 9536.3}, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1727668574775", "description": "uncomfortable hovercraft pfft", "enableDockerCleanup": true, "ipAddress": "7ade:a4dc:da5a:467b:f04d:5bce:f3f9:d3e0", "metricsConfig": "null", "name": "<value>", "organizationId": "<id>", "port": 9905.87, "serverId": "<id>", "serverStatus": "inactive", "sshKeyId": "<id>", "username": "Estrella_Abbott"}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 4660.47}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mongo-changeStatus:
    speakeasy-default-mongo-change-status:
      requestBody:
        application/json: {"applicationStatus": "error", "mongoId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "idle", "backups": [], "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1710492635340", "databasePassword": "<value>", "databaseUser": "<value>", "description": null, "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1711988551543", "description": "absent elliptical hopelessly fluctuate likewise frightened readily", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1725523390416", "description": null, "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 95.82, "healthCheckSwarm": {}, "labelsSwarm": {"key": "<value>", "key1": "<value>", "key2": "<value>"}, "memoryLimit": null, "memoryReservation": "<value>", "modeSwarm": {}, "mongoId": "<id>", "mounts": [{"applicationId": null, "composeId": "<id>", "content": "<value>", "filePath": "/dev/um_ruin_premier.war", "hostPath": "<value>", "mariadbId": "<id>", "mongoId": null, "mountId": "<id>", "mountPath": "<value>", "mysqlId": null, "postgresId": "<id>", "redisId": null, "serviceType": "mongo", "type": "file", "volumeName": "<value>"}], "name": "<value>", "networkSwarm": [], "placementSwarm": {}, "replicaSets": true, "replicas": 7129.62, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 5287.94}, "server": null, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 5117.05}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mongo-reload:
    speakeasy-default-mongo-reload:
      requestBody:
        application/json: {"appName": "<value>", "mongoId": "<id>"}
      responses:
        "200":
          application/json: false
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mongo-remove:
    speakeasy-default-mongo-remove:
      requestBody:
        application/json: {"mongoId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "error", "backups": [], "command": "<value>", "cpuLimit": "<value>", "cpuReservation": null, "createdAt": "1713631058111", "databasePassword": "<value>", "databaseUser": "<value>", "description": "serve youthfully deploy", "dockerImage": "<value>", "env": null, "environment": {"createdAt": "1723534627304", "description": "rightfully opposite psst meh portray forenenst accidentally than animated", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1719103470112", "description": "opposite depend gah since extra-large dereference stir-fry accredit reiterate", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 6897.9, "healthCheckSwarm": {}, "labelsSwarm": {"key": "<value>", "key1": "<value>", "key2": "<value>"}, "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": {}, "mongoId": "<id>", "mounts": [], "name": "<value>", "networkSwarm": null, "placementSwarm": {}, "replicaSets": true, "replicas": 5651.85, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 2464.65}, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1726071824302", "description": "so worriedly which contradict than peninsula healthily willing", "enableDockerCleanup": false, "ipAddress": "e4d5:4c5a:29e3:bbf6:aa27:459b:9c7e:dae8", "metricsConfig": ["<value 1>"], "name": "<value>", "organizationId": "<id>", "port": 7625.73, "serverId": "<id>", "serverStatus": "active", "sshKeyId": "<id>", "username": "Abe_Kulas69"}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 3707.88}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mongo-saveEnvironment:
    speakeasy-default-mongo-save-environment:
      requestBody:
        application/json: {"mongoId": "<id>"}
      responses:
        "200":
          application/json: false
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mongo-update:
    speakeasy-default-mongo-update:
      requestBody:
        application/json: {"dockerImage": "mongo:15", "mongoId": "<id>", "replicaSets": false}
      responses:
        "200":
          application/json: false
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mongo-move:
    speakeasy-default-mongo-move:
      requestBody:
        application/json: {"mongoId": "<id>", "targetEnvironmentId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "done", "command": "<value>", "cpuLimit": "<value>", "cpuReservation": null, "createdAt": "1705105229196", "databasePassword": "<value>", "databaseUser": "<value>", "description": "lampoon starboard questionably", "dockerImage": "<value>", "env": "<value>", "environmentId": "<id>", "externalPort": 1844.79, "healthCheckSwarm": {}, "labelsSwarm": {"key": "<value>", "key1": "<value>"}, "memoryLimit": null, "memoryReservation": "<value>", "modeSwarm": null, "mongoId": "<id>", "name": "<value>", "networkSwarm": [], "placementSwarm": {}, "replicaSets": true, "replicas": 8286.84, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 4178.6}, "serverId": null, "updateConfigSwarm": {"Order": "<value>", "Parallelism": 1486.5}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mongo-rebuild:
    speakeasy-default-mongo-rebuild:
      requestBody:
        application/json: {"mongoId": "<id>"}
      responses:
        "200":
          application/json: true
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mariadb-create:
    speakeasy-default-mariadb-create:
      requestBody:
        application/json: {"appName": "<value>", "databaseName": "<value>", "databasePassword": "<value>", "databaseRootPassword": "<value>", "databaseUser": "<value>", "dockerImage": "mariadb:6", "environmentId": "<id>", "name": "<value>"}
      responses:
        "200":
          application/json: true
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mariadb-one:
    speakeasy-default-mariadb-one:
      parameters:
        query:
          mariadbId: "<id>"
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "running", "backups": [{"appName": "<value>", "backupId": "<id>", "backupType": "database", "composeId": "<id>", "database": "<value>", "databaseType": "mariadb", "destinationId": "<id>", "enabled": null, "keepLatestCount": 7588.87, "mariadbId": null, "mongoId": "<id>", "mysqlId": null, "postgresId": "<id>", "prefix": "<value>", "schedule": "<value>", "serviceName": "<value>", "userId": "<id>"}], "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1709177263435", "databaseName": "<value>", "databasePassword": "<value>", "databaseRootPassword": "<value>", "databaseUser": "<value>", "description": "square short if fortunately", "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1731847813720", "description": "wilted vacantly forenenst", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1722449807765", "description": "scram after oh um versus put broadly drive", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": null, "healthCheckSwarm": {}, "labelsSwarm": null, "mariadbId": "<id>", "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": {}, "mounts": [{"applicationId": "<id>", "composeId": "<id>", "content": null, "filePath": "/rescue/sternly.exe", "hostPath": "<value>", "mariadbId": "<id>", "mongoId": "<id>", "mountId": "<id>", "mountPath": "<value>", "mysqlId": "<id>", "postgresId": "<id>", "redisId": "<id>", "serviceType": "mongo", "type": "file", "volumeName": null}], "name": "<value>", "networkSwarm": [], "placementSwarm": {}, "replicas": 6801.96, "restartPolicySwarm": {}, "rollbackConfigSwarm": null, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1704535460095", "description": "internalize considering sunny", "enableDockerCleanup": true, "ipAddress": "160.191.204.252", "metricsConfig": {"key": "<value>", "key1": "<value>"}, "name": "<value>", "organizationId": "<id>", "port": 2402.81, "serverId": "<id>", "serverStatus": "active", "sshKeyId": "<id>", "username": "Shanie.Herzog89"}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 9970.89}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mariadb-start:
    speakeasy-default-mariadb-start:
      requestBody:
        application/json: {"mariadbId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "done", "backups": [{"appName": "<value>", "backupId": "<id>", "backupType": "compose", "composeId": null, "database": "<value>", "databaseType": "mariadb", "destinationId": "<id>", "enabled": true, "keepLatestCount": 9949.01, "mariadbId": "<id>", "mongoId": "<id>", "mysqlId": "<id>", "postgresId": "<id>", "prefix": "<value>", "schedule": "<value>", "serviceName": "<value>", "userId": "<id>"}], "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1708135774027", "databaseName": "<value>", "databasePassword": "<value>", "databaseRootPassword": "<value>", "databaseUser": "<value>", "description": "whose uncomfortable astride", "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1707241798250", "description": "strident reprove till inasmuch unnecessarily whirlwind beyond the unnaturally", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1724913403872", "description": "devil colorfully internal rapidly geez yowza under", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 2523.52, "healthCheckSwarm": {}, "labelsSwarm": {"key": "<value>", "key1": "<value>"}, "mariadbId": "<id>", "memoryLimit": null, "memoryReservation": null, "modeSwarm": {}, "mounts": [], "name": "<value>", "networkSwarm": [{}], "placementSwarm": {}, "replicas": 3561.42, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 7645.57}, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1714334539179", "description": "save gadzooks expert innovate usually willfully generously", "enableDockerCleanup": false, "ipAddress": "246.20.216.9", "metricsConfig": {"key": "<value>", "key1": "<value>"}, "name": "<value>", "organizationId": "<id>", "port": 4005.07, "serverId": "<id>", "serverStatus": "inactive", "sshKeyId": "<id>", "username": "Alivia_Treutel"}, "serverId": "<id>", "updateConfigSwarm": null}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mariadb-stop:
    speakeasy-default-mariadb-stop:
      requestBody:
        application/json: {"mariadbId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "idle", "backups": [{"appName": "<value>", "backupId": "<id>", "backupType": "compose", "composeId": "<id>", "database": "<value>", "databaseType": "web-server", "destinationId": "<id>", "enabled": true, "keepLatestCount": 4837.6, "mariadbId": "<id>", "mongoId": "<id>", "mysqlId": "<id>", "postgresId": "<id>", "prefix": "<value>", "schedule": "<value>", "serviceName": "<value>", "userId": "<id>"}], "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1722472911878", "databaseName": "<value>", "databasePassword": "<value>", "databaseRootPassword": "<value>", "databaseUser": "<value>", "description": "deduction circumference that gadzooks bleakly strictly upside-down yuck amongst", "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1715042958761", "description": "abaft digitize tremendously obnoxiously empty supposing", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1716251922169", "description": "during fundraising whisper putrefy", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 4126.04, "healthCheckSwarm": {}, "labelsSwarm": {"key": "<value>", "key1": "<value>", "key2": "<value>"}, "mariadbId": "<id>", "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": {}, "mounts": [{"applicationId": "<id>", "composeId": "<id>", "content": "<value>", "filePath": "/Applications/fast_frankly_pushy.mar", "hostPath": "<value>", "mariadbId": "<id>", "mongoId": "<id>", "mountId": "<id>", "mountPath": "<value>", "mysqlId": "<id>", "postgresId": "<id>", "redisId": "<id>", "serviceType": "application", "type": "bind", "volumeName": "<value>"}], "name": "<value>", "networkSwarm": [{}], "placementSwarm": {}, "replicas": 2976.55, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 1968.36}, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1732309247661", "description": "across calmly whoa", "enableDockerCleanup": true, "ipAddress": "128.196.13.149", "metricsConfig": ["<value 1>", "<value 2>"], "name": "<value>", "organizationId": "<id>", "port": 5619.37, "serverId": "<id>", "serverStatus": "active", "sshKeyId": "<id>", "username": "Lynn80"}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 8445.28}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mariadb-saveExternalPort:
    speakeasy-default-mariadb-save-external-port:
      requestBody:
        application/json: {"externalPort": 1693.93, "mariadbId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "error", "backups": [], "command": "<value>", "cpuLimit": null, "cpuReservation": "<value>", "createdAt": "1724146148515", "databaseName": "<value>", "databasePassword": "<value>", "databaseRootPassword": "<value>", "databaseUser": "<value>", "description": "poorly woefully whoever phew anenst league", "dockerImage": "<value>", "env": null, "environment": {"createdAt": "1720764283876", "description": "perfection splash truthfully from brr by yet whether into awkwardly", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1732761411809", "description": null, "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 4172.06, "healthCheckSwarm": {}, "labelsSwarm": {"key": "<value>", "key1": "<value>"}, "mariadbId": "<id>", "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": {}, "mounts": [{"applicationId": "<id>", "composeId": null, "content": null, "filePath": "/srv/eternity.xlc", "hostPath": "<value>", "mariadbId": "<id>", "mongoId": "<id>", "mountId": "<id>", "mountPath": "<value>", "mysqlId": "<id>", "postgresId": "<id>", "redisId": "<id>", "serviceType": "postgres", "type": "volume", "volumeName": "<value>"}], "name": "<value>", "networkSwarm": [], "placementSwarm": {}, "replicas": 2190.14, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 9445.26}, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1732076139634", "description": "wealthy terribly deliberately out for ornery woot absent", "enableDockerCleanup": false, "ipAddress": "f965:dfd5:8e13:4ebc:75df:0fe1:b5cd:1d1d", "metricsConfig": {"key": "<value>", "key1": "<value>", "key2": "<value>"}, "name": "<value>", "organizationId": "<id>", "port": 6218.68, "serverId": "<id>", "serverStatus": "active", "sshKeyId": "<id>", "username": "Faustino_Boehm"}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 3123.22}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mariadb-deploy:
    speakeasy-default-mariadb-deploy:
      requestBody:
        application/json: {"mariadbId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "running", "backups": [{"appName": "<value>", "backupId": "<id>", "backupType": "compose", "composeId": "<id>", "database": "<value>", "databaseType": "mongo", "destinationId": "<id>", "enabled": false, "keepLatestCount": 6956.08, "mariadbId": "<id>", "mongoId": null, "mysqlId": "<id>", "postgresId": null, "prefix": "<value>", "schedule": "<value>", "serviceName": "<value>", "userId": "<id>"}], "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1728533785238", "databaseName": "<value>", "databasePassword": "<value>", "databaseRootPassword": "<value>", "databaseUser": "<value>", "description": null, "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1705075987539", "description": "superficial fooey phew when zowie recent acidly", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1713040719219", "description": "beside humidity aha though maintainer boohoo free compassionate", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 5580.57, "healthCheckSwarm": {}, "labelsSwarm": {}, "mariadbId": "<id>", "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": {}, "mounts": [], "name": "<value>", "networkSwarm": null, "placementSwarm": {}, "replicas": 8920.94, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 5233.74}, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1728573528188", "description": "mmm nor readjust longingly pleasant speedy wallop silt", "enableDockerCleanup": false, "ipAddress": "7d8d:1769:c7cf:0a8b:adae:e14a:4fa8:360a", "metricsConfig": {"key": "<value>"}, "name": "<value>", "organizationId": "<id>", "port": 6005.33, "serverId": "<id>", "serverStatus": "inactive", "sshKeyId": "<id>", "username": "Jay65"}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 7828.52}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mariadb-changeStatus:
    speakeasy-default-mariadb-change-status:
      requestBody:
        application/json: {"applicationStatus": "idle", "mariadbId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "done", "backups": [], "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1717038594125", "databaseName": "<value>", "databasePassword": "<value>", "databaseRootPassword": "<value>", "databaseUser": "<value>", "description": "fumigate connect amidst elevator fiercely when inasmuch the that boohoo", "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1721150725008", "description": "why nephew correctly modulo whoever", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1729419402983", "description": "energetically oval likewise circa appropriate astride or", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 5163.49, "healthCheckSwarm": {}, "labelsSwarm": {"key": "<value>", "key1": "<value>"}, "mariadbId": "<id>", "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": null, "mounts": [{"applicationId": "<id>", "composeId": "<id>", "content": "<value>", "filePath": "/usr/X11R6/unlike.jpe", "hostPath": "<value>", "mariadbId": "<id>", "mongoId": "<id>", "mountId": "<id>", "mountPath": "<value>", "mysqlId": "<id>", "postgresId": "<id>", "redisId": "<id>", "serviceType": "mysql", "type": "volume", "volumeName": "<value>"}], "name": "<value>", "networkSwarm": [], "placementSwarm": {}, "replicas": 4998.51, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 4696.06}, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1705254058608", "description": "underplay bravely gut delightfully who sans gadzooks supposing", "enableDockerCleanup": false, "ipAddress": "04b7:eedd:e3b0:57b9:ee0d:5f45:ea86:16aa", "metricsConfig": "null", "name": "<value>", "organizationId": "<id>", "port": 3025.4, "serverId": "<id>", "serverStatus": "active", "sshKeyId": "<id>", "username": "Bartholome54"}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 5380.2}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mariadb-remove:
    speakeasy-default-mariadb-remove:
      requestBody:
        application/json: {"mariadbId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "running", "backups": [], "command": null, "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1729370630042", "databaseName": "<value>", "databasePassword": "<value>", "databaseRootPassword": "<value>", "databaseUser": "<value>", "description": "cosset as tapioca polyester mozzarella monthly cutover", "dockerImage": "<value>", "env": "<value>", "environment": {"createdAt": "1729023493109", "description": "monasticism psst ouch eternity hmph whenever", "env": "<value>", "environmentId": "<id>", "name": "<value>", "project": {"createdAt": "1727911939362", "description": "ape huzzah wherever psst defensive", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>"}, "environmentId": "<id>", "externalPort": 4012.9, "healthCheckSwarm": {}, "labelsSwarm": {"key": "<value>", "key1": "<value>", "key2": "<value>"}, "mariadbId": "<id>", "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": {}, "mounts": [], "name": "<value>", "networkSwarm": null, "placementSwarm": {}, "replicas": 2191.68, "restartPolicySwarm": null, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 6502.04}, "server": {"appName": "<value>", "command": "<value>", "createdAt": "1710712346620", "description": "veto atomize motor because", "enableDockerCleanup": false, "ipAddress": "167.24.196.71", "metricsConfig": ["<value 1>", "<value 2>", "<value 3>"], "name": "<value>", "organizationId": "<id>", "port": 6318.18, "serverId": "<id>", "serverStatus": "inactive", "sshKeyId": "<id>", "username": "Thea47"}, "serverId": "<id>", "updateConfigSwarm": {"Order": "<value>", "Parallelism": 7308.44}}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mariadb-saveEnvironment:
    speakeasy-default-mariadb-save-environment:
      requestBody:
        application/json: {"mariadbId": "<id>"}
      responses:
        "200":
          application/json: true
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mariadb-reload:
    speakeasy-default-mariadb-reload:
      requestBody:
        application/json: {"appName": "<value>", "mariadbId": "<id>"}
      responses:
        "200":
          application/json: true
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mariadb-update:
    speakeasy-default-mariadb-update:
      requestBody:
        application/json: {"dockerImage": "mariadb:6", "mariadbId": "<id>"}
      responses:
        "200":
          application/json: true
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mariadb-move:
    speakeasy-default-mariadb-move:
      requestBody:
        application/json: {"mariadbId": "<id>", "targetEnvironmentId": "<id>"}
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationStatus": "running", "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1707201540906", "databaseName": "<value>", "databasePassword": "<value>", "databaseRootPassword": "<value>", "databaseUser": "<value>", "description": "meh ugh unfortunately knavishly", "dockerImage": "<value>", "env": "<value>", "environmentId": "<id>", "externalPort": 3522.75, "healthCheckSwarm": {}, "labelsSwarm": {"key": "<value>", "key1": "<value>"}, "mariadbId": "<id>", "memoryLimit": null, "memoryReservation": "<value>", "modeSwarm": {}, "name": "<value>", "networkSwarm": [{}], "placementSwarm": {}, "replicas": 1810.7, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"Order": "<value>", "Parallelism": 1098.6}, "serverId": "<id>", "updateConfigSwarm": null}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mariadb-rebuild:
    speakeasy-default-mariadb-rebuild:
      requestBody:
        application/json: {"mariadbId": "<id>"}
      responses:
        "200":
          application/json: false
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  compose-create:
    speakeasy-default-compose-create:
      requestBody:
        application/json: {"environmentId": "<id>", "name": "<value>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  compose-one:
    speakeasy-default-compose-one:
      parameters:
        query:
          composeId: "<id>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  compose-update:
    speakeasy-default-compose-update:
      requestBody:
        application/json: {"composeId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  compose-delete:
    speakeasy-default-compose-delete:
      requestBody:
        application/json: {"composeId": "<id>", "deleteVolumes": false}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  compose-cleanQueues:
    speakeasy-default-compose-clean-queues:
      requestBody:
        application/json: {"composeId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  compose-loadMountsByService:
    speakeasy-default-compose-load-mounts-by-service:
      parameters:
        query:
          composeId: "<id>"
          serviceName: "<value>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  compose-fetchSourceType:
    speakeasy-default-compose-fetch-source-type:
      requestBody:
        application/json: {"composeId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  compose-randomizeCompose:
    speakeasy-default-compose-randomize-compose:
      requestBody:
        application/json: {"composeId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  compose-isolatedDeployment:
    speakeasy-default-compose-isolated-deployment:
      requestBody:
        application/json: {"composeId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  compose-getConvertedCompose:
    speakeasy-default-compose-get-converted-compose:
      parameters:
        query:
          composeId: "<id>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  compose-deploy:
    speakeasy-default-compose-deploy:
      requestBody:
        application/json: {"composeId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  compose-redeploy:
    speakeasy-default-compose-redeploy:
      requestBody:
        application/json: {"composeId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  compose-stop:
    speakeasy-default-compose-stop:
      requestBody:
        application/json: {"composeId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  compose-start:
    speakeasy-default-compose-start:
      requestBody:
        application/json: {"composeId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  compose-getDefaultCommand:
    speakeasy-default-compose-get-default-command:
      parameters:
        query:
          composeId: "<id>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  compose-refreshToken:
    speakeasy-default-compose-refresh-token:
      requestBody:
        application/json: {"composeId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  compose-deployTemplate:
    speakeasy-default-compose-deploy-template:
      requestBody:
        application/json: {"environmentId": "<id>", "id": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  compose-templates:
    speakeasy-default-compose-templates:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  compose-getTags:
    speakeasy-default-compose-get-tags:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  compose-disconnectGitProvider:
    speakeasy-default-compose-disconnect-git-provider:
      requestBody:
        application/json: {"composeId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  compose-move:
    speakeasy-default-compose-move:
      requestBody:
        application/json: {"composeId": "<id>", "targetEnvironmentId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  compose-processTemplate:
    speakeasy-default-compose-process-template:
      requestBody:
        application/json: {"base64": "<value>", "composeId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  compose-import:
    speakeasy-default-compose-import:
      requestBody:
        application/json: {"base64": "<value>", "composeId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  compose-cancelDeployment:
    speakeasy-default-compose-cancel-deployment:
      requestBody:
        application/json: {"composeId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  user-all:
    speakeasy-default-user-all:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  user-one:
    speakeasy-default-user-one:
      parameters:
        query:
          userId: "<id>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  user-get:
    speakeasy-default-user-get:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  user-haveRootAccess:
    speakeasy-default-user-have-root-access:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  user-getBackups:
    speakeasy-default-user-get-backups:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  user-getServerMetrics:
    speakeasy-default-user-get-server-metrics:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  user-update:
    speakeasy-default-user-update:
      requestBody:
        application/json: {}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  user-getUserByToken:
    speakeasy-default-user-get-user-by-token:
      parameters:
        query:
          token: "<value>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  user-getMetricsToken:
    speakeasy-default-user-get-metrics-token:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  user-remove:
    speakeasy-default-user-remove:
      requestBody:
        application/json: {"userId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  user-assignPermissions:
    speakeasy-default-user-assign-permissions:
      requestBody:
        application/json: {"accessedEnvironments": ["<value 1>", "<value 2>"], "accessedProjects": [], "accessedServices": [], "canAccessToAPI": false, "canAccessToDocker": true, "canAccessToGitProviders": false, "canAccessToSSHKeys": false, "canAccessToTraefikFiles": true, "canCreateProjects": true, "canCreateServices": true, "canDeleteProjects": true, "canDeleteServices": false, "id": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  user-getInvitations:
    speakeasy-default-user-get-invitations:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  user-getContainerMetrics:
    speakeasy-default-user-get-container-metrics:
      parameters:
        query:
          url: "https://physical-representation.biz/"
          token: "<value>"
          appName: "<value>"
          dataPoints: "<value>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  user-generateToken:
    speakeasy-default-user-generate-token:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  user-deleteApiKey:
    speakeasy-default-user-delete-api-key:
      requestBody:
        application/json: {"apiKeyId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  user-createApiKey:
    speakeasy-default-user-create-api-key:
      requestBody:
        application/json: {"metadata": {"organizationId": "<id>"}, "name": "<value>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  user-checkUserOrganizations:
    speakeasy-default-user-check-user-organizations:
      parameters:
        query:
          userId: "<id>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  user-sendInvitation:
    speakeasy-default-user-send-invitation:
      requestBody:
        application/json: {"invitationId": "<id>", "notificationId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  domain-create:
    speakeasy-default-domain-create:
      requestBody:
        application/json: {"host": "musty-merit.net"}
      responses:
        "200":
          application/json: {"applicationId": "<id>", "certificateType": "custom", "composeId": null, "createdAt": "1717948038030", "customCertResolver": "<value>", "domainId": "<id>", "domainType": "compose", "host": "dental-freckle.org", "https": true, "internalPath": "<value>", "path": "/sbin", "port": null, "previewDeploymentId": null, "serviceName": "<value>", "stripPath": true, "uniqueConfigKey": 4571.71}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  domain-byApplicationId:
    speakeasy-default-domain-by-application-id:
      parameters:
        query:
          applicationId: "<id>"
      responses:
        "200":
          application/json: [{"applicationId": "<id>", "certificateType": "none", "composeId": null, "createdAt": "1732648497946", "customCertResolver": "<value>", "domainId": "<id>", "domainType": "compose", "host": "memorable-creature.com", "https": false, "internalPath": "<value>", "path": null, "port": 4632.69, "previewDeploymentId": "<id>", "serviceName": "<value>", "stripPath": false, "uniqueConfigKey": 7100.91}]
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  domain-byComposeId:
    speakeasy-default-domain-by-compose-id:
      parameters:
        query:
          composeId: "<id>"
      responses:
        "200":
          application/json: [{"applicationId": null, "certificateType": "custom", "composeId": "<id>", "createdAt": "1714721872589", "customCertResolver": "<value>", "domainId": "<id>", "domainType": "application", "host": "silver-hunt.name", "https": true, "internalPath": "<value>", "path": "/Users", "port": 7948.77, "previewDeploymentId": "<id>", "serviceName": "<value>", "stripPath": true, "uniqueConfigKey": 7969.2}]
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  domain-generateDomain:
    speakeasy-default-domain-generate-domain:
      requestBody:
        application/json: {"appName": "<value>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  domain-canGenerateTraefikMeDomains:
    speakeasy-default-domain-can-generate-traefik-me-domains:
      parameters:
        query:
          serverId: "<id>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  domain-update:
    speakeasy-default-domain-update:
      requestBody:
        application/json: {"domainId": "<id>", "host": "unruly-toothbrush.info"}
      responses:
        "200":
          application/json: {"applicationId": "<id>", "certificateType": "custom", "composeId": "<id>", "createdAt": "1722426496076", "customCertResolver": "<value>", "domainId": "<id>", "domainType": "compose", "host": "sentimental-kielbasa.info", "https": true, "internalPath": "<value>", "path": "/boot/defaults", "port": 2910.56, "previewDeploymentId": "<id>", "serviceName": "<value>", "stripPath": true, "uniqueConfigKey": 1914.11}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  domain-one:
    speakeasy-default-domain-one:
      parameters:
        query:
          domainId: "<id>"
      responses:
        "200":
          application/json: {"applicationId": "<id>", "certificateType": "none", "composeId": "<id>", "createdAt": "1716029338924", "customCertResolver": null, "domainId": "<id>", "domainType": "compose", "host": "annual-daughter.name", "https": true, "internalPath": "<value>", "path": "/proc", "port": 975.54, "previewDeploymentId": "<id>", "serviceName": "<value>", "stripPath": false, "uniqueConfigKey": 7720.05}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  domain-delete:
    speakeasy-default-domain-delete:
      requestBody:
        application/json: {"domainId": "<id>"}
      responses:
        "200":
          application/json: {"applicationId": "<id>", "certificateType": "letsencrypt", "composeId": null, "createdAt": "1715109112637", "customCertResolver": "<value>", "domainId": "<id>", "domainType": "compose", "host": "antique-insolence.com", "https": false, "internalPath": null, "path": "/sys", "port": 9705.17, "previewDeploymentId": "<id>", "serviceName": "<value>", "stripPath": true, "uniqueConfigKey": 7539.62}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  domain-validateDomain:
    speakeasy-default-domain-validate-domain:
      requestBody:
        application/json: {"domain": "mealy-finer.org"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  destination-create:
    speakeasy-default-destination-create:
      requestBody:
        application/json: {"accessKey": "<value>", "bucket": "<value>", "endpoint": "<value>", "name": "<value>", "provider": "<value>", "region": "<value>", "secretAccessKey": "<value>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  destination-testConnection:
    speakeasy-default-destination-test-connection:
      requestBody:
        application/json: {"accessKey": "<value>", "bucket": "<value>", "endpoint": "<value>", "name": "<value>", "provider": "<value>", "region": "<value>", "secretAccessKey": "<value>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  destination-one:
    speakeasy-default-destination-one:
      parameters:
        query:
          destinationId: "<id>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  destination-all:
    speakeasy-default-destination-all:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  destination-remove:
    speakeasy-default-destination-remove:
      requestBody:
        application/json: {"destinationId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  destination-update:
    speakeasy-default-destination-update:
      requestBody:
        application/json: {"accessKey": "<value>", "bucket": "<value>", "destinationId": "<id>", "endpoint": "<value>", "name": "<value>", "provider": "<value>", "region": "<value>", "secretAccessKey": "<value>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  backup-create:
    speakeasy-default-backup-create:
      requestBody:
        application/json: {"database": "<value>", "databaseType": "mongo", "destinationId": "<id>", "prefix": "<value>", "schedule": "<value>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  backup-one:
    speakeasy-default-backup-one:
      parameters:
        query:
          backupId: "<id>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  backup-update:
    speakeasy-default-backup-update:
      requestBody:
        application/json: {"backupId": "<id>", "database": "<value>", "databaseType": "mongo", "destinationId": "<id>", "prefix": "<value>", "schedule": "<value>", "serviceName": "<value>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  backup-remove:
    speakeasy-default-backup-remove:
      requestBody:
        application/json: {"backupId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  backup-manualBackupPostgres:
    speakeasy-default-backup-manual-backup-postgres:
      requestBody:
        application/json: {"backupId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  backup-manualBackupMySql:
    speakeasy-default-backup-manual-backup-my-sql:
      requestBody:
        application/json: {"backupId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  backup-manualBackupMariadb:
    speakeasy-default-backup-manual-backup-mariadb:
      requestBody:
        application/json: {"backupId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  backup-manualBackupCompose:
    speakeasy-default-backup-manual-backup-compose:
      requestBody:
        application/json: {"backupId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  backup-manualBackupMongo:
    speakeasy-default-backup-manual-backup-mongo:
      requestBody:
        application/json: {"backupId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  backup-manualBackupWebServer:
    speakeasy-default-backup-manual-backup-web-server:
      requestBody:
        application/json: {"backupId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  backup-listBackupFiles:
    speakeasy-default-backup-list-backup-files:
      parameters:
        query:
          destinationId: "<id>"
          search: "<value>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  deployment-all:
    speakeasy-default-deployment-all:
      parameters:
        query:
          applicationId: "<id>"
      responses:
        "200":
          application/json: [{"applicationId": "<id>", "backupId": "<id>", "composeId": "<id>", "createdAt": "1724341345480", "deploymentId": "<id>", "description": "parade bewail cosset", "errorMessage": "<value>", "finishedAt": "<value>", "isPreviewDeployment": false, "logPath": "<value>", "pid": null, "previewDeploymentId": "<id>", "rollbackId": "<id>", "scheduleId": "<id>", "serverId": "<id>", "startedAt": "<value>", "status": "error", "title": "<value>", "volumeBackupId": "<id>"}]
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  deployment-allByCompose:
    speakeasy-default-deployment-all-by-compose:
      parameters:
        query:
          composeId: "<id>"
      responses:
        "200":
          application/json: [{"applicationId": null, "backupId": "<id>", "composeId": "<id>", "createdAt": "1727594099257", "deploymentId": "<id>", "description": "badly redesign extremely", "errorMessage": "<value>", "finishedAt": "<value>", "isPreviewDeployment": false, "logPath": "<value>", "pid": "<id>", "previewDeploymentId": "<id>", "rollbackId": null, "scheduleId": "<id>", "serverId": "<id>", "startedAt": "<value>", "status": "running", "title": "<value>", "volumeBackupId": "<id>"}]
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  deployment-allByServer:
    speakeasy-default-deployment-all-by-server:
      parameters:
        query:
          serverId: "<id>"
      responses:
        "200":
          application/json: [{"applicationId": "<id>", "backupId": "<id>", "composeId": "<id>", "createdAt": "1727124649694", "deploymentId": "<id>", "description": "unto ack afore closely however makeover priesthood", "errorMessage": "<value>", "finishedAt": "<value>", "isPreviewDeployment": false, "logPath": "<value>", "pid": "<id>", "previewDeploymentId": "<id>", "rollbackId": "<id>", "scheduleId": "<id>", "serverId": "<id>", "startedAt": null, "status": "error", "title": "<value>", "volumeBackupId": "<id>"}]
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  deployment-allByType:
    speakeasy-default-deployment-all-by-type:
      parameters:
        query:
          id: "<id>"
          type: "volumeBackup"
      responses:
        "200":
          application/json: [{"applicationId": "<id>", "backupId": "<id>", "composeId": "<id>", "createdAt": "1712129835592", "deploymentId": "<id>", "description": "access how usable huzzah up ack", "errorMessage": "<value>", "finishedAt": "<value>", "isPreviewDeployment": false, "logPath": "<value>", "pid": "<id>", "previewDeploymentId": "<id>", "rollbackId": "<id>", "scheduleId": null, "serverId": "<id>", "startedAt": null, "status": "error", "title": "<value>", "volumeBackupId": "<id>"}]
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  deployment-killProcess:
    speakeasy-default-deployment-kill-process:
      requestBody:
        application/json: {"deploymentId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  previewDeployment-all:
    speakeasy-default-preview-deployment-all:
      parameters:
        query:
          applicationId: "<id>"
      responses:
        "200":
          application/json: [{"appName": "<value>", "applicationId": "<id>", "branch": "<value>", "createdAt": "1724551862069", "domainId": "<id>", "expiresAt": "1745686994445", "previewDeploymentId": "<id>", "previewStatus": "running", "pullRequestCommentId": "<id>", "pullRequestId": "<id>", "pullRequestNumber": "<value>", "pullRequestTitle": "<value>", "pullRequestURL": "https://heavenly-completion.name/"}]
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  previewDeployment-delete:
    speakeasy-default-preview-deployment-delete:
      requestBody:
        application/json: {"previewDeploymentId": "<id>"}
      responses:
        "200":
          application/json: false
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  previewDeployment-one:
    speakeasy-default-preview-deployment-one:
      parameters:
        query:
          previewDeploymentId: "<id>"
      responses:
        "200":
          application/json: {"appName": "<value>", "applicationId": "<id>", "branch": "<value>", "createdAt": "1717276560868", "domainId": "<id>", "expiresAt": "1742681295580", "previewDeploymentId": "<id>", "previewStatus": "idle", "pullRequestCommentId": "<id>", "pullRequestId": "<id>", "pullRequestNumber": "<value>", "pullRequestTitle": "<value>", "pullRequestURL": "https://essential-rim.name"}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mounts-create:
    speakeasy-default-mounts-create:
      requestBody:
        application/json: {"mountPath": "<value>", "serviceId": "<id>", "serviceType": "application", "type": "file"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mounts-remove:
    speakeasy-default-mounts-remove:
      requestBody:
        application/json: {"mountId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mounts-one:
    speakeasy-default-mounts-one:
      parameters:
        query:
          mountId: "<id>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mounts-update:
    speakeasy-default-mounts-update:
      requestBody:
        application/json: {"mountId": "<id>", "serviceType": "application"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  mounts-allNamedByApplicationId:
    speakeasy-default-mounts-all-named-by-application-id:
      parameters:
        query:
          applicationId: "<id>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  certificates-create:
    speakeasy-default-certificates-create:
      requestBody:
        application/json: {"certificateData": "<value>", "name": "<value>", "organizationId": "<id>", "privateKey": "<value>"}
      responses:
        "200":
          application/json: {"autoRenew": true, "certificateData": "<value>", "certificateId": "<id>", "certificatePath": "<value>", "name": "<value>", "organizationId": "<id>", "privateKey": "<value>", "serverId": "<id>"}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  certificates-one:
    speakeasy-default-certificates-one:
      parameters:
        query:
          certificateId: "<id>"
      responses:
        "200":
          application/json: {"autoRenew": true, "certificateData": "<value>", "certificateId": "<id>", "certificatePath": "<value>", "name": "<value>", "organizationId": "<id>", "privateKey": "<value>", "serverId": "<id>"}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  certificates-remove:
    speakeasy-default-certificates-remove:
      requestBody:
        application/json: {"certificateId": "<id>"}
      responses:
        "200":
          application/json: {"autoRenew": false, "certificateData": "<value>", "certificateId": "<id>", "certificatePath": "<value>", "name": "<value>", "organizationId": "<id>", "privateKey": "<value>", "serverId": "<id>"}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  certificates-all:
    speakeasy-default-certificates-all:
      responses:
        "200":
          application/json: [{"autoRenew": null, "certificateData": "<value>", "certificateId": "<id>", "certificatePath": "<value>", "name": "<value>", "organizationId": "<id>", "privateKey": "<value>", "serverId": null}]
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-reloadServer:
    speakeasy-default-settings-reload-server:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-cleanRedis:
    speakeasy-default-settings-clean-redis:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-reloadRedis:
    speakeasy-default-settings-reload-redis:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-reloadTraefik:
    speakeasy-default-settings-reload-traefik:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-toggleDashboard:
    speakeasy-default-settings-toggle-dashboard:
      requestBody:
        application/json: {}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-cleanUnusedImages:
    speakeasy-default-settings-clean-unused-images:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-cleanUnusedVolumes:
    speakeasy-default-settings-clean-unused-volumes:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-cleanStoppedContainers:
    speakeasy-default-settings-clean-stopped-containers:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-cleanDockerBuilder:
    speakeasy-default-settings-clean-docker-builder:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-cleanDockerPrune:
    speakeasy-default-settings-clean-docker-prune:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-cleanAll:
    speakeasy-default-settings-clean-all:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-cleanMonitoring:
    speakeasy-default-settings-clean-monitoring:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-saveSSHPrivateKey:
    speakeasy-default-settings-save-SSH-private-key:
      requestBody:
        application/json: {"sshPrivateKey": "<value>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-assignDomainServer:
    speakeasy-default-settings-assign-domain-server:
      requestBody:
        application/json: {"certificateType": "none", "host": "pure-alb.biz"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-cleanSSHPrivateKey:
    speakeasy-default-settings-clean-SSH-private-key:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-updateDockerCleanup:
    speakeasy-default-settings-update-docker-cleanup:
      requestBody:
        application/json: {"enableDockerCleanup": true}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-readTraefikConfig:
    speakeasy-default-settings-read-traefik-config:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-updateTraefikConfig:
    speakeasy-default-settings-update-traefik-config:
      requestBody:
        application/json: {"traefikConfig": "<value>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-readWebServerTraefikConfig:
    speakeasy-default-settings-read-web-server-traefik-config:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-updateWebServerTraefikConfig:
    speakeasy-default-settings-update-web-server-traefik-config:
      requestBody:
        application/json: {"traefikConfig": "<value>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-readMiddlewareTraefikConfig:
    speakeasy-default-settings-read-middleware-traefik-config:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-updateMiddlewareTraefikConfig:
    speakeasy-default-settings-update-middleware-traefik-config:
      requestBody:
        application/json: {"traefikConfig": "<value>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-getUpdateData:
    speakeasy-default-settings-get-update-data:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-updateServer:
    speakeasy-default-settings-update-server:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-getDokployVersion:
    speakeasy-default-settings-get-dokploy-version:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-getReleaseTag:
    speakeasy-default-settings-get-release-tag:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-readDirectories:
    speakeasy-default-settings-read-directories:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-updateTraefikFile:
    speakeasy-default-settings-update-traefik-file:
      requestBody:
        application/json: {"path": "/var/tmp", "traefikConfig": "<value>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-readTraefikFile:
    speakeasy-default-settings-read-traefik-file:
      parameters:
        query:
          path: "/mnt"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-getIp:
    speakeasy-default-settings-get-ip:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-getOpenApiDocument:
    speakeasy-default-settings-get-open-api-document:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-readTraefikEnv:
    speakeasy-default-settings-read-traefik-env:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-writeTraefikEnv:
    speakeasy-default-settings-write-traefik-env:
      requestBody:
        application/json: {"env": "<value>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-haveTraefikDashboardPortEnabled:
    speakeasy-default-settings-have-traefik-dashboard-port-enabled:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-haveActivateRequests:
    speakeasy-default-settings-have-activate-requests:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-toggleRequests:
    speakeasy-default-settings-toggle-requests:
      requestBody:
        application/json: {"enable": true}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-isCloud:
    speakeasy-default-settings-is-cloud:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-isUserSubscribed:
    speakeasy-default-settings-is-user-subscribed:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-health:
    speakeasy-default-settings-health:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-setupGPU:
    speakeasy-default-settings-setup-GPU:
      requestBody:
        application/json: {}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-checkGPUStatus:
    speakeasy-default-settings-check-GPU-status:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-updateTraefikPorts:
    speakeasy-default-settings-update-traefik-ports:
      requestBody:
        application/json: {"additionalPorts": []}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-getTraefikPorts:
    speakeasy-default-settings-get-traefik-ports:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-updateLogCleanup:
    speakeasy-default-settings-update-log-cleanup:
      requestBody:
        application/json: {"cronExpression": "<value>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-getLogCleanupStatus:
    speakeasy-default-settings-get-log-cleanup-status:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  settings-getDokployCloudIps:
    speakeasy-default-settings-get-dokploy-cloud-ips:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  security-create:
    speakeasy-default-security-create:
      requestBody:
        application/json: {"applicationId": "<id>", "password": "K9baGIdLMCnW0iF", "username": "Jaida.Zulauf"}
      responses:
        "200":
          application/json: {"applicationId": "<id>", "createdAt": "1713018572321", "password": "yDCtRud9RY2aS4Z", "securityId": "<id>", "username": "Andreane.Hayes"}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  security-one:
    speakeasy-default-security-one:
      parameters:
        query:
          securityId: "<id>"
      responses:
        "200":
          application/json: {"applicationId": "<id>", "createdAt": "1728366084501", "password": "fuKTmlbaXKRJ_jA", "securityId": "<id>", "username": "Estrella.OConner"}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  security-delete:
    speakeasy-default-security-delete:
      requestBody:
        application/json: {"securityId": "<id>"}
      responses:
        "200":
          application/json: {"applicationId": "<id>", "createdAt": "1733580266369", "password": "XhZuYXbK97ti_8I", "securityId": "<id>", "username": "Garett30"}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  security-update:
    speakeasy-default-security-update:
      requestBody:
        application/json: {"password": "lzeP1olfVZ7Co23", "securityId": "<id>", "username": "Easter19"}
      responses:
        "200":
          application/json: {"applicationId": "<id>", "createdAt": "1705423196644", "password": "hL0yNUPcK_j4AjL", "securityId": "<id>", "username": "Gisselle_Stamm42"}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  redirects-create:
    speakeasy-default-redirects-create:
      requestBody:
        application/json: {"applicationId": "<id>", "permanent": false, "regex": "<value>", "replacement": "<value>"}
      responses:
        "200":
          application/json: {"applicationId": "<id>", "createdAt": "1718235765665", "permanent": true, "redirectId": "<id>", "regex": "<value>", "replacement": "<value>", "uniqueConfigKey": 5013.04}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  redirects-one:
    speakeasy-default-redirects-one:
      parameters:
        query:
          redirectId: "<id>"
      responses:
        "200":
          application/json: {"applicationId": "<id>", "createdAt": "1715364280660", "permanent": false, "redirectId": "<id>", "regex": "<value>", "replacement": "<value>", "uniqueConfigKey": 1894.06}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  redirects-delete:
    speakeasy-default-redirects-delete:
      requestBody:
        application/json: {"redirectId": "<id>"}
      responses:
        "200":
          application/json: {"applicationId": "<id>", "createdAt": "1726693118056", "permanent": false, "redirectId": "<id>", "regex": "<value>", "replacement": "<value>", "uniqueConfigKey": 2090.25}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  redirects-update:
    speakeasy-default-redirects-update:
      requestBody:
        application/json: {"permanent": false, "redirectId": "<id>", "regex": "<value>", "replacement": "<value>"}
      responses:
        "200":
          application/json: {"applicationId": "<id>", "createdAt": "1731247766743", "permanent": true, "redirectId": "<id>", "regex": "<value>", "replacement": "<value>", "uniqueConfigKey": 3675.78}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  port-create:
    speakeasy-default-port-create:
      requestBody:
        application/json: {"applicationId": "<id>", "protocol": "tcp", "publishMode": "ingress", "publishedPort": 9167.77, "targetPort": 2161.7}
      responses:
        "200":
          application/json: {"applicationId": "<id>", "portId": "<id>", "protocol": "tcp", "publishMode": "ingress", "publishedPort": 9574.17, "targetPort": 9131.65}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  port-one:
    speakeasy-default-port-one:
      parameters:
        query:
          portId: "<id>"
      responses:
        "200":
          application/json: {"applicationId": "<id>", "portId": "<id>", "protocol": "tcp", "publishMode": "ingress", "publishedPort": 4300.25, "targetPort": 8756.7}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  port-delete:
    speakeasy-default-port-delete:
      requestBody:
        application/json: {"portId": "<id>"}
      responses:
        "200":
          application/json: {"applicationId": "<id>", "portId": "<id>", "protocol": "udp", "publishMode": "ingress", "publishedPort": 9054.92, "targetPort": 2462.29}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  port-update:
    speakeasy-default-port-update:
      requestBody:
        application/json: {"portId": "<id>", "protocol": "tcp", "publishMode": "ingress", "publishedPort": 7240.07, "targetPort": 9496}
      responses:
        "200":
          application/json: {"applicationId": "<id>", "portId": "<id>", "protocol": "tcp", "publishMode": "ingress", "publishedPort": 5157.14, "targetPort": 7696.5}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  registry-create:
    speakeasy-default-registry-create:
      requestBody:
        application/json: {"imagePrefix": "<value>", "password": "Dgmo4uBNDUDA9K5", "registryName": "<value>", "registryType": "cloud", "registryUrl": "https://cute-declaration.name", "username": "Edward97"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  registry-remove:
    speakeasy-default-registry-remove:
      requestBody:
        application/json: {"registryId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  registry-update:
    speakeasy-default-registry-update:
      requestBody:
        application/json: {"registryId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  registry-all:
    speakeasy-default-registry-all:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  registry-one:
    speakeasy-default-registry-one:
      parameters:
        query:
          registryId: "<id>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  registry-testRegistry:
    speakeasy-default-registry-test-registry:
      requestBody:
        application/json: {"password": "HbHSp2hcDiXugz1", "registryType": "cloud", "registryUrl": "https://biodegradable-priesthood.info/", "username": "Amani_Kohler"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  cluster-getNodes:
    speakeasy-default-cluster-get-nodes:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  cluster-removeWorker:
    speakeasy-default-cluster-remove-worker:
      requestBody:
        application/json: {"nodeId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  cluster-addWorker:
    speakeasy-default-cluster-add-worker:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  cluster-addManager:
    speakeasy-default-cluster-add-manager:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  notification-createSlack:
    speakeasy-default-notification-create-slack:
      requestBody:
        application/json: {"appBuildError": true, "appDeploy": false, "channel": "<value>", "databaseBackup": true, "dockerCleanup": false, "dokployRestart": false, "name": "<value>", "serverThreshold": false, "webhookUrl": "https://early-lid.info/"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  notification-updateSlack:
    speakeasy-default-notification-update-slack:
      requestBody:
        application/json: {"notificationId": "<id>", "slackId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  notification-testSlackConnection:
    speakeasy-default-notification-test-slack-connection:
      requestBody:
        application/json: {"channel": "<value>", "webhookUrl": "https://pointed-institute.com"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  notification-createTelegram:
    speakeasy-default-notification-create-telegram:
      requestBody:
        application/json: {"appBuildError": false, "appDeploy": true, "botToken": "<value>", "chatId": "<id>", "databaseBackup": true, "dockerCleanup": true, "dokployRestart": false, "messageThreadId": "<id>", "name": "<value>", "serverThreshold": false}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  notification-updateTelegram:
    speakeasy-default-notification-update-telegram:
      requestBody:
        application/json: {"notificationId": "<id>", "telegramId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  notification-testTelegramConnection:
    speakeasy-default-notification-test-telegram-connection:
      requestBody:
        application/json: {"botToken": "<value>", "chatId": "<id>", "messageThreadId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  notification-createDiscord:
    speakeasy-default-notification-create-discord:
      requestBody:
        application/json: {"appBuildError": false, "appDeploy": false, "databaseBackup": true, "decoration": true, "dockerCleanup": true, "dokployRestart": false, "name": "<value>", "serverThreshold": true, "webhookUrl": "https://tedious-scale.net"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  notification-updateDiscord:
    speakeasy-default-notification-update-discord:
      requestBody:
        application/json: {"discordId": "<id>", "notificationId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  notification-testDiscordConnection:
    speakeasy-default-notification-test-discord-connection:
      requestBody:
        application/json: {"webhookUrl": "https://radiant-fireplace.net"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  notification-createEmail:
    speakeasy-default-notification-create-email:
      requestBody:
        application/json: {"appBuildError": false, "appDeploy": false, "databaseBackup": false, "dockerCleanup": false, "dokployRestart": true, "fromAddress": "<value>", "name": "<value>", "password": "LGAnX2vuZKQTVc9", "serverThreshold": false, "smtpPort": 5836.58, "smtpServer": "<value>", "toAddresses": [], "username": "Nathen_Torp90"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  notification-updateEmail:
    speakeasy-default-notification-update-email:
      requestBody:
        application/json: {"emailId": "<id>", "notificationId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  notification-testEmailConnection:
    speakeasy-default-notification-test-email-connection:
      requestBody:
        application/json: {"fromAddress": "<value>", "password": "xHtlQtIjbn2x0yV", "smtpPort": 4799.46, "smtpServer": "<value>", "toAddresses": ["<value 1>", "<value 2>"], "username": "Rollin96"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  notification-remove:
    speakeasy-default-notification-remove:
      requestBody:
        application/json: {"notificationId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  notification-one:
    speakeasy-default-notification-one:
      parameters:
        query:
          notificationId: "<id>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  notification-all:
    speakeasy-default-notification-all:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  notification-receiveNotification:
    speakeasy-default-notification-receive-notification:
      requestBody:
        application/json: {"Message": "<value>", "ServerType": "Dokploy", "Threshold": 5582.57, "Timestamp": "<value>", "Token": "<value>", "Type": "Memory", "Value": 2260.49}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  notification-createGotify:
    speakeasy-default-notification-create-gotify:
      requestBody:
        application/json: {"appBuildError": true, "appDeploy": true, "appToken": "<value>", "databaseBackup": true, "decoration": true, "dockerCleanup": true, "dokployRestart": false, "name": "<value>", "priority": 5429.53, "serverUrl": "https://square-gastropod.com"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  notification-updateGotify:
    speakeasy-default-notification-update-gotify:
      requestBody:
        application/json: {"gotifyId": "<id>", "notificationId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  notification-testGotifyConnection:
    speakeasy-default-notification-test-gotify-connection:
      requestBody:
        application/json: {"appToken": "<value>", "priority": 2139.47, "serverUrl": "https://firm-bend.com"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  notification-createNtfy:
    speakeasy-default-notification-create-ntfy:
      requestBody:
        application/json: {"accessToken": "<value>", "appBuildError": false, "appDeploy": true, "databaseBackup": true, "dockerCleanup": true, "dokployRestart": true, "name": "<value>", "priority": 1148.07, "serverUrl": "https://early-blossom.biz", "topic": "<value>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  notification-updateNtfy:
    speakeasy-default-notification-update-ntfy:
      requestBody:
        application/json: {"notificationId": "<id>", "ntfyId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  notification-testNtfyConnection:
    speakeasy-default-notification-test-ntfy-connection:
      requestBody:
        application/json: {"accessToken": "<value>", "priority": 1272.9, "serverUrl": "https://good-eyeliner.biz", "topic": "<value>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  notification-getEmailProviders:
    speakeasy-default-notification-get-email-providers:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  sshKey-create:
    speakeasy-default-ssh-key-create:
      requestBody:
        application/json: {"name": "<value>", "organizationId": "<id>", "privateKey": "<value>", "publicKey": "<value>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  sshKey-remove:
    speakeasy-default-ssh-key-remove:
      requestBody:
        application/json: {"sshKeyId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  sshKey-one:
    speakeasy-default-ssh-key-one:
      parameters:
        query:
          sshKeyId: "<id>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  sshKey-all:
    speakeasy-default-ssh-key-all:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  sshKey-generate:
    speakeasy-default-ssh-key-generate:
      requestBody:
        application/json: {}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  sshKey-update:
    speakeasy-default-ssh-key-update:
      requestBody:
        application/json: {"sshKeyId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  gitProvider-getAll:
    speakeasy-default-git-provider-get-all:
      responses:
        "200":
          application/json: [{"bitbucket": {"appPassword": "<value>", "bitbucketId": "<id>", "bitbucketUsername": "<value>", "bitbucketWorkspaceName": null, "gitProviderId": "<id>"}, "createdAt": "1727331565050", "gitProviderId": "<id>", "gitea": null, "github": {"gitProviderId": "<id>", "githubAppId": 3317.56, "githubAppName": "<value>", "githubClientId": "<id>", "githubClientSecret": "<value>", "githubId": "<id>", "githubInstallationId": null, "githubPrivateKey": "<value>", "githubWebhookSecret": "<value>"}, "gitlab": {"accessToken": "<value>", "applicationId": "<id>", "expiresAt": null, "gitProviderId": "<id>", "gitlabId": "<id>", "gitlabUrl": "https://charming-language.net", "groupName": "<value>", "redirectUri": "https://tiny-dulcimer.biz", "refreshToken": "<value>", "secret": "<value>"}, "name": "<value>", "organizationId": "<id>", "providerType": "gitea", "userId": "<id>"}]
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  gitProvider-remove:
    speakeasy-default-git-provider-remove:
      requestBody:
        application/json: {"gitProviderId": "<id>"}
      responses:
        "200":
          application/json: {"success": true}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  gitea-create:
    speakeasy-default-gitea-create:
      requestBody:
        application/json: {"giteaUrl": "https://unsightly-awareness.net/", "name": "<value>"}
      responses:
        "200":
          application/json: {"clientId": "<id>", "giteaId": "<id>", "giteaUrl": "https://delectable-sock.info/"}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  gitea-one:
    speakeasy-default-gitea-one:
      parameters:
        query:
          giteaId: "<id>"
      responses:
        "200":
          application/json: {"accessToken": "<value>", "clientId": "<id>", "clientSecret": "<value>", "expiresAt": null, "gitProvider": {"createdAt": "1716631814218", "gitProviderId": "<id>", "name": "<value>", "organizationId": "<id>", "providerType": "gitea", "userId": "<id>"}, "gitProviderId": "<id>", "giteaId": "<id>", "giteaUrl": "https://sleepy-equal.org/", "lastAuthenticatedAt": 4056.06, "redirectUri": null, "refreshToken": "<value>", "scopes": "<value>"}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  gitea-giteaProviders:
    speakeasy-default-gitea-gitea-providers:
      responses:
        "200":
          application/json: [{"gitProvider": {"createdAt": "1718399564649", "gitProviderId": "<id>", "name": "<value>", "organizationId": "<id>", "providerType": "github", "userId": "<id>"}, "giteaId": "<id>"}]
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  gitea-getGiteaRepositories:
    speakeasy-default-gitea-get-gitea-repositories:
      parameters:
        query:
          giteaId: "<id>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  gitea-getGiteaBranches:
    speakeasy-default-gitea-get-gitea-branches:
      parameters:
        query:
          owner: "<value>"
          repositoryName: "<value>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  gitea-testConnection:
    speakeasy-default-gitea-test-connection:
      requestBody:
        application/json: {}
      responses:
        "200":
          application/json: "<value>"
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  gitea-update:
    speakeasy-default-gitea-update:
      requestBody:
        application/json: {"gitProviderId": "<id>", "giteaId": "<id>", "giteaUrl": "https://unripe-worth.name", "name": "<value>"}
      responses:
        "200":
          application/json: {"success": true}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  gitea-getGiteaUrl:
    speakeasy-default-gitea-get-gitea-url:
      parameters:
        query:
          giteaId: "<id>"
      responses:
        "200":
          application/json: "<value>"
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  bitbucket-create:
    speakeasy-default-bitbucket-create:
      requestBody:
        application/json: {"authId": "<id>", "name": "<value>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  bitbucket-one:
    speakeasy-default-bitbucket-one:
      parameters:
        query:
          bitbucketId: "<id>"
      responses:
        "200":
          application/json: {"appPassword": "<value>", "bitbucketId": "<id>", "bitbucketUsername": "<value>", "bitbucketWorkspaceName": "<value>", "gitProvider": {"createdAt": "1720062924708", "gitProviderId": "<id>", "name": "<value>", "organizationId": "<id>", "providerType": "github", "userId": "<id>"}, "gitProviderId": "<id>"}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  bitbucket-bitbucketProviders:
    speakeasy-default-bitbucket-bitbucket-providers:
      responses:
        "200":
          application/json: [{"bitbucketId": "<id>", "gitProvider": {"createdAt": "1733241312487", "gitProviderId": "<id>", "name": "<value>", "organizationId": "<id>", "providerType": "github", "userId": "<id>"}}]
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  bitbucket-getBitbucketRepositories:
    speakeasy-default-bitbucket-get-bitbucket-repositories:
      parameters:
        query:
          bitbucketId: "<id>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  bitbucket-getBitbucketBranches:
    speakeasy-default-bitbucket-get-bitbucket-branches:
      parameters:
        query:
          owner: "<value>"
          repo: "<value>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  bitbucket-testConnection:
    speakeasy-default-bitbucket-test-connection:
      requestBody:
        application/json: {"bitbucketId": "<id>"}
      responses:
        "200":
          application/json: "<value>"
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  bitbucket-update:
    speakeasy-default-bitbucket-update:
      requestBody:
        application/json: {"bitbucketId": "<id>", "gitProviderId": "<id>", "name": "<value>"}
      responses:
        "200":
          application/json: {"appPassword": null, "bitbucketId": "<id>", "bitbucketUsername": "<value>", "bitbucketWorkspaceName": "<value>", "gitProviderId": "<id>"}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  gitlab-create:
    speakeasy-default-gitlab-create:
      requestBody:
        application/json: {"authId": "<id>", "gitlabUrl": "https://gloomy-sand.org/", "name": "<value>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  gitlab-one:
    speakeasy-default-gitlab-one:
      parameters:
        query:
          gitlabId: "<id>"
      responses:
        "200":
          application/json: {"accessToken": null, "applicationId": "<id>", "expiresAt": 8681.97, "gitProvider": {"createdAt": "1715529433418", "gitProviderId": "<id>", "name": "<value>", "organizationId": "<id>", "providerType": "gitlab", "userId": "<id>"}, "gitProviderId": "<id>", "gitlabId": "<id>", "gitlabUrl": "https://leading-elevator.name/", "groupName": null, "redirectUri": null, "refreshToken": "<value>", "secret": "<value>"}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  gitlab-gitlabProviders:
    speakeasy-default-gitlab-gitlab-providers:
      responses:
        "200":
          application/json: [{"gitProvider": {"createdAt": "1720700083500", "gitProviderId": "<id>", "name": "<value>", "organizationId": "<id>", "providerType": "github", "userId": "<id>"}, "gitlabId": "<id>", "gitlabUrl": "https://enchanting-diversity.net/"}]
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  gitlab-getGitlabRepositories:
    speakeasy-default-gitlab-get-gitlab-repositories:
      parameters:
        query:
          gitlabId: "<id>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  gitlab-getGitlabBranches:
    speakeasy-default-gitlab-get-gitlab-branches:
      parameters:
        query:
          owner: "<value>"
          repo: "<value>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  gitlab-testConnection:
    speakeasy-default-gitlab-test-connection:
      requestBody:
        application/json: {}
      responses:
        "200":
          application/json: "<value>"
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  gitlab-update:
    speakeasy-default-gitlab-update:
      requestBody:
        application/json: {"gitProviderId": "<id>", "gitlabId": "<id>", "gitlabUrl": "https://white-analogy.name", "name": "<value>"}
      responses:
        "200":
          application/json: "<value>"
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  github-one:
    speakeasy-default-github-one:
      parameters:
        query:
          githubId: "<id>"
      responses:
        "200":
          application/json: {"gitProvider": {"createdAt": "1720684900667", "gitProviderId": "<id>", "name": "<value>", "organizationId": "<id>", "providerType": "bitbucket", "userId": "<id>"}, "gitProviderId": "<id>", "githubAppId": 9056.86, "githubAppName": "<value>", "githubClientId": "<id>", "githubClientSecret": "<value>", "githubId": "<id>", "githubInstallationId": "<id>", "githubPrivateKey": "<value>", "githubWebhookSecret": "<value>"}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  github-getGithubRepositories:
    speakeasy-default-github-get-github-repositories:
      parameters:
        query:
          githubId: "<id>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  github-getGithubBranches:
    speakeasy-default-github-get-github-branches:
      parameters:
        query:
          repo: "<value>"
          owner: "<value>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  github-githubProviders:
    speakeasy-default-github-github-providers:
      responses:
        "200":
          application/json: [{"gitProvider": {"createdAt": "1728194031901", "gitProviderId": "<id>", "name": "<value>", "organizationId": "<id>", "providerType": "gitea", "userId": "<id>"}, "githubId": "<id>"}]
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  github-testConnection:
    speakeasy-default-github-test-connection:
      requestBody:
        application/json: {"githubId": "<id>"}
      responses:
        "200":
          application/json: "<value>"
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  github-update:
    speakeasy-default-github-update:
      requestBody:
        application/json: {"gitProviderId": "<id>", "githubId": "<id>", "name": "<value>"}
      responses:
        "200":
          application/json: "<value>"
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  server-create:
    speakeasy-default-server-create:
      requestBody:
        application/json: {"ipAddress": "8.12.175.213", "name": "<value>", "port": 9154.55, "sshKeyId": "<id>", "username": "Asia_Parker82"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  server-one:
    speakeasy-default-server-one:
      parameters:
        query:
          serverId: "<id>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  server-getDefaultCommand:
    speakeasy-default-server-get-default-command:
      parameters:
        query:
          serverId: "<id>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  server-all:
    speakeasy-default-server-all:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  server-count:
    speakeasy-default-server-count:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  server-withSSHKey:
    speakeasy-default-server-with-SSH-key:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  server-setup:
    speakeasy-default-server-setup:
      requestBody:
        application/json: {"serverId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  server-validate:
    speakeasy-default-server-validate:
      parameters:
        query:
          serverId: "<id>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  server-security:
    speakeasy-default-server-security:
      parameters:
        query:
          serverId: "<id>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  server-setupMonitoring:
    speakeasy-default-server-setup-monitoring:
      requestBody:
        application/json: {"metricsConfig": {"containers": {"refreshRate": 9885.9, "services": {}}, "server": {"cronJob": "<value>", "port": 8870.52, "refreshRate": 2789, "retentionDays": 3260.17, "thresholds": {"cpu": 1297.57, "memory": 4963.43}, "token": "<value>", "urlCallback": "https://basic-lieu.info"}}, "serverId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  server-remove:
    speakeasy-default-server-remove:
      requestBody:
        application/json: {"serverId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  server-update:
    speakeasy-default-server-update:
      requestBody:
        application/json: {"ipAddress": "945d:4a06:ae40:dab4:6ecb:dbfc:8b3d:df1d", "name": "<value>", "port": 4322.18, "serverId": "<id>", "sshKeyId": "<id>", "username": "Adelia.Casper"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  server-publicIp:
    speakeasy-default-server-public-ip:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  server-getServerMetrics:
    speakeasy-default-server-get-server-metrics:
      parameters:
        query:
          url: "https://worthless-quart.biz"
          token: "<value>"
          dataPoints: "<value>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  stripe-getProducts:
    speakeasy-default-stripe-get-products:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  stripe-createCheckoutSession:
    speakeasy-default-stripe-create-checkout-session:
      requestBody:
        application/json: {"isAnnual": false, "productId": "<id>", "serverQuantity": 4592.6}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  stripe-createCustomerPortalSession:
    speakeasy-default-stripe-create-customer-portal-session:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  stripe-canCreateMoreServers:
    speakeasy-default-stripe-can-create-more-servers:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  swarm-getNodes:
    speakeasy-default-swarm-get-nodes:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  swarm-getNodeInfo:
    speakeasy-default-swarm-get-node-info:
      parameters:
        query:
          nodeId: "<id>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  swarm-getNodeApps:
    speakeasy-default-swarm-get-node-apps:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  ai-one:
    speakeasy-default-ai-one:
      parameters:
        query:
          aiId: "<id>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  ai-getModels:
    speakeasy-default-ai-get-models:
      parameters:
        query:
          apiUrl: "https://wrathful-hawk.info"
          apiKey: "<value>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  ai-create:
    speakeasy-default-ai-create:
      requestBody:
        application/json: {"apiKey": "<value>", "apiUrl": "https://dutiful-heating.com", "isEnabled": true, "model": "CX-9", "name": "<value>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  ai-update:
    speakeasy-default-ai-update:
      requestBody:
        application/json: {"aiId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  ai-getAll:
    speakeasy-default-ai-get-all:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  ai-get:
    speakeasy-default-ai-get:
      parameters:
        query:
          aiId: "<id>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  ai-delete:
    speakeasy-default-ai-delete:
      requestBody:
        application/json: {"aiId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  ai-suggest:
    speakeasy-default-ai-suggest:
      requestBody:
        application/json: {"aiId": "<id>", "input": "<value>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  ai-deploy:
    speakeasy-default-ai-deploy:
      requestBody:
        application/json: {"description": "overvalue for jogging", "dockerCompose": "<value>", "envVariables": "<value>", "environmentId": "<id>", "id": "<id>", "name": "<value>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  organization-create:
    speakeasy-default-organization-create:
      requestBody:
        application/json: {"name": "<value>"}
      responses:
        "200":
          application/json: {"createdAt": "2025-10-06T05:03:40.639Z", "id": "<id>", "logo": "<value>", "metadata": "<value>", "name": "<value>", "ownerId": "<id>", "slug": "<value>"}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  organization-all:
    speakeasy-default-organization-all:
      responses:
        "200":
          application/json: [{"createdAt": "2024-10-17T07:35:50.981Z", "id": "<id>", "logo": "<value>", "metadata": "<value>", "name": "<value>", "ownerId": "<id>", "slug": "<value>"}]
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  organization-one:
    speakeasy-default-organization-one:
      parameters:
        query:
          organizationId: "<id>"
      responses:
        "200":
          application/json: {"createdAt": "2023-05-11T04:28:52.700Z", "id": "<id>", "logo": "<value>", "metadata": "<value>", "name": "<value>", "ownerId": "<id>", "slug": "<value>"}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  organization-update:
    speakeasy-default-organization-update:
      requestBody:
        application/json: {"name": "<value>", "organizationId": "<id>"}
      responses:
        "200":
          application/json: {"createdAt": "2024-10-18T19:47:53.722Z", "id": "<id>", "logo": "<value>", "metadata": "<value>", "name": "<value>", "ownerId": "<id>", "slug": null}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  organization-delete:
    speakeasy-default-organization-delete:
      requestBody:
        application/json: {"organizationId": "<id>"}
      responses:
        "200":
          application/json: {"createdAt": "2025-04-22T00:14:27.734Z", "id": "<id>", "logo": "<value>", "metadata": "<value>", "name": "<value>", "ownerId": "<id>", "slug": "<value>"}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  organization-allInvitations:
    speakeasy-default-organization-all-invitations:
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  organization-removeInvitation:
    speakeasy-default-organization-remove-invitation:
      requestBody:
        application/json: {"invitationId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  schedule-create:
    speakeasy-default-schedule-create:
      requestBody:
        application/json: {"command": "<value>", "cronExpression": "<value>", "name": "<value>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  schedule-update:
    speakeasy-default-schedule-update:
      requestBody:
        application/json: {"command": "<value>", "cronExpression": "<value>", "name": "<value>", "scheduleId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  schedule-delete:
    speakeasy-default-schedule-delete:
      requestBody:
        application/json: {"scheduleId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  schedule-list:
    speakeasy-default-schedule-list:
      parameters:
        query:
          id: "<id>"
          scheduleType: "application"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  schedule-one:
    speakeasy-default-schedule-one:
      parameters:
        query:
          scheduleId: "<id>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  schedule-runManually:
    speakeasy-default-schedule-run-manually:
      requestBody:
        application/json: {"scheduleId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  rollback-delete:
    speakeasy-default-rollback-delete:
      requestBody:
        application/json: {"rollbackId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  rollback-rollback:
    speakeasy-default-rollback-rollback:
      requestBody:
        application/json: {"rollbackId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  volumeBackups-list:
    speakeasy-default-volume-backups-list:
      parameters:
        query:
          id: "<id>"
          volumeBackupType: "application"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  volumeBackups-create:
    speakeasy-default-volume-backups-create:
      requestBody:
        application/json: {"cronExpression": "<value>", "destinationId": "<id>", "name": "<value>", "prefix": "<value>", "volumeName": "<value>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  volumeBackups-one:
    speakeasy-default-volume-backups-one:
      parameters:
        query:
          volumeBackupId: "<id>"
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  volumeBackups-delete:
    speakeasy-default-volume-backups-delete:
      requestBody:
        application/json: {"volumeBackupId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  volumeBackups-update:
    speakeasy-default-volume-backups-update:
      requestBody:
        application/json: {"cronExpression": "<value>", "destinationId": "<id>", "name": "<value>", "prefix": "<value>", "volumeBackupId": "<id>", "volumeName": "<value>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  volumeBackups-runManually:
    speakeasy-default-volume-backups-run-manually:
      requestBody:
        application/json: {"volumeBackupId": "<id>"}
      responses:
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  environment-create:
    speakeasy-default-environment-create:
      requestBody:
        application/json: {"name": "<value>", "projectId": "<id>"}
      responses:
        "200":
          application/json: {"createdAt": "1705170806737", "description": "ferret wherever silent", "env": "<value>", "environmentId": "<id>", "name": "<value>", "projectId": "<id>"}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  environment-one:
    speakeasy-default-environment-one:
      parameters:
        query:
          environmentId: "<id>"
      responses:
        "200":
          application/json: {"applications": [{"appName": "<value>", "applicationId": "<id>", "applicationStatus": "idle", "autoDeploy": true, "bitbucketBranch": "<value>", "bitbucketBuildPath": null, "bitbucketId": "<id>", "bitbucketOwner": "<value>", "bitbucketRepository": "<value>", "branch": "<value>", "buildArgs": "<value>", "buildPath": "<value>", "buildType": "dockerfile", "cleanCache": false, "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1735118095828", "customGitBranch": null, "customGitBuildPath": "<value>", "customGitSSHKeyId": "<id>", "customGitUrl": "https://troubled-bench.org", "description": "above chairperson mmm broadcast bleach sans toothbrush amused if", "dockerBuildStage": "<value>", "dockerContextPath": "<value>", "dockerImage": "<value>", "dockerfile": "<value>", "dropBuildPath": "<value>", "enableSubmodules": false, "enabled": false, "env": "<value>", "environmentId": "<id>", "giteaBranch": "<value>", "giteaBuildPath": "<value>", "giteaId": "<id>", "giteaOwner": "<value>", "giteaRepository": "<value>", "githubId": "<id>", "gitlabBranch": "<value>", "gitlabBuildPath": "<value>", "gitlabId": "<id>", "gitlabOwner": "<value>", "gitlabPathNamespace": "<value>", "gitlabProjectId": 3991.18, "gitlabRepository": null, "healthCheckSwarm": 4125.89, "herokuVersion": "<value>", "isPreviewDeploymentsActive": false, "isStaticSpa": false, "labelsSwarm": [], "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": null, "name": "<value>", "networkSwarm": [], "owner": "<value>", "password": "CSkQQ5Gkz4Y3bIw", "placementSwarm": "null", "previewBuildArgs": "<value>", "previewCertificateType": "custom", "previewCustomCertResolver": "<value>", "previewEnv": "<value>", "previewHttps": false, "previewLabels": [], "previewLimit": null, "previewPath": "<value>", "previewPort": 3585.21, "previewRequireCollaboratorPermissions": true, "previewWildcard": "<value>", "publishDirectory": "<value>", "railpackVersion": null, "refreshToken": "<value>", "registryId": "<id>", "registryUrl": "https://enchanted-pension.biz/", "replicas": 715.56, "repository": "<value>", "restartPolicySwarm": [], "rollbackActive": true, "rollbackConfigSwarm": false, "serverId": "<id>", "sourceType": "drop", "subtitle": "<value>", "title": null, "triggerType": "tag", "updateConfigSwarm": {"key": "<value>"}, "username": "Mittie16", "watchPaths": []}], "compose": [], "createdAt": "1713200766363", "description": "safeguard aha and whoever internationalize furthermore drat minor", "env": "<value>", "environmentId": "<id>", "mariadb": [], "mongo": [], "mysql": [], "name": "<value>", "postgres": [{"appName": "<value>", "applicationStatus": "running", "command": "<value>", "cpuLimit": null, "cpuReservation": "<value>", "createdAt": "1734681762355", "databaseName": "<value>", "databasePassword": "<value>", "databaseUser": "<value>", "description": null, "dockerImage": "<value>", "env": "<value>", "environmentId": "<id>", "externalPort": 3009.66, "healthCheckSwarm": {"key": "<value>", "key1": "<value>"}, "labelsSwarm": null, "memoryLimit": null, "memoryReservation": "<value>", "modeSwarm": {"key": "<value>", "key1": "<value>", "key2": "<value>"}, "name": "<value>", "networkSwarm": {"key": "<value>"}, "placementSwarm": ["<value 1>"], "postgresId": "<id>", "replicas": 8379.24, "restartPolicySwarm": {"key": "<value>"}, "rollbackConfigSwarm": {"key": "<value>", "key1": "<value>", "key2": "<value>"}, "serverId": "<id>", "updateConfigSwarm": null}], "project": {"createdAt": "1723034457015", "description": null, "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>", "redis": [{"appName": "<value>", "applicationStatus": "idle", "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1706317148751", "databasePassword": "<value>", "description": null, "dockerImage": "<value>", "env": "<value>", "environmentId": "<id>", "externalPort": 507.32, "healthCheckSwarm": ["<value 1>"], "labelsSwarm": {"key": "<value>", "key1": "<value>", "key2": "<value>"}, "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": ["<value 1>", "<value 2>"], "name": "<value>", "networkSwarm": ["<value 1>", "<value 2>", "<value 3>"], "placementSwarm": "null", "redisId": "<id>", "replicas": 7041.54, "restartPolicySwarm": {"key": "<value>"}, "rollbackConfigSwarm": false, "serverId": "<id>", "updateConfigSwarm": ["<value 1>", "<value 2>"]}]}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  environment-byProjectId:
    speakeasy-default-environment-by-project-id:
      parameters:
        query:
          projectId: "<id>"
      responses:
        "200":
          application/json: [{"applications": [], "compose": [], "createdAt": "1731651233557", "description": "optimistically dependency custody impractical while through provided sleepily", "env": "<value>", "environmentId": "<id>", "mariadb": [{"appName": "<value>", "applicationStatus": "idle", "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1720518901691", "databaseName": "<value>", "databasePassword": "<value>", "databaseRootPassword": "<value>", "databaseUser": "<value>", "description": "ha fledgling spew unsung", "dockerImage": "<value>", "env": "<value>", "environmentId": "<id>", "externalPort": 1932.35, "healthCheckSwarm": {"key": "<value>", "key1": "<value>", "key2": "<value>"}, "labelsSwarm": {"key": "<value>", "key1": "<value>"}, "mariadbId": "<id>", "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": ["<value 1>", "<value 2>"], "name": "<value>", "networkSwarm": {}, "placementSwarm": {"key": "<value>"}, "replicas": 5244.07, "restartPolicySwarm": true, "rollbackConfigSwarm": ["<value 1>", "<value 2>"], "serverId": "<id>", "updateConfigSwarm": 998.41}], "mongo": [], "mysql": [], "name": "<value>", "postgres": [], "project": {"createdAt": "1705371347286", "description": "swanling pertain secret", "env": "<value>", "name": "<value>", "organizationId": "<id>", "projectId": "<id>"}, "projectId": "<id>", "redis": [{"appName": "<value>", "applicationStatus": "error", "command": "<value>", "cpuLimit": "<value>", "cpuReservation": "<value>", "createdAt": "1728820620415", "databasePassword": "<value>", "description": "tarragon boohoo even provided gadzooks badly respectful", "dockerImage": "<value>", "env": "<value>", "environmentId": "<id>", "externalPort": null, "healthCheckSwarm": {}, "labelsSwarm": true, "memoryLimit": "<value>", "memoryReservation": "<value>", "modeSwarm": ["<value 1>"], "name": "<value>", "networkSwarm": "null", "placementSwarm": ["<value 1>", "<value 2>", "<value 3>"], "redisId": "<id>", "replicas": 7105.53, "restartPolicySwarm": {}, "rollbackConfigSwarm": {"key": "<value>", "key1": "<value>"}, "serverId": "<id>", "updateConfigSwarm": ["<value 1>"]}]}]
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  environment-remove:
    speakeasy-default-environment-remove:
      requestBody:
        application/json: {"environmentId": "<id>"}
      responses:
        "200":
          application/json: {"createdAt": "1725641288703", "description": "operating circulate ouch narrow versus oh till", "env": "<value>", "environmentId": "<id>", "name": "<value>", "projectId": "<id>"}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  environment-update:
    speakeasy-default-environment-update:
      requestBody:
        application/json: {"environmentId": "<id>"}
      responses:
        "200":
          application/json: {"createdAt": "1725074778138", "description": "valuable mid hopelessly republican during furthermore behind yum", "env": "<value>", "environmentId": "<id>", "name": "<value>", "projectId": "<id>"}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
  environment-duplicate:
    speakeasy-default-environment-duplicate:
      requestBody:
        application/json: {"environmentId": "<id>", "name": "<value>"}
      responses:
        "200":
          application/json: {"createdAt": "1728775871549", "description": "blah whose weatherize bobble phooey yet", "env": "<value>", "environmentId": "<id>", "name": "<value>", "projectId": "<id>"}
        default:
          application/json: {"code": "<value>", "message": "<value>"}
examplesVersion: 1.0.2
