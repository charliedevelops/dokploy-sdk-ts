/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NotificationCreateSlackSecurity = {
  authorization: string;
};

export type NotificationCreateSlackRequest = {
  appBuildError: boolean;
  appDeploy: boolean;
  channel: string;
  databaseBackup: boolean;
  dockerCleanup: boolean;
  dokployRestart: boolean;
  name: string;
  serverThreshold: boolean;
  webhookUrl: string;
};

/** @internal */
export const NotificationCreateSlackSecurity$inboundSchema: z.ZodType<
  NotificationCreateSlackSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type NotificationCreateSlackSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const NotificationCreateSlackSecurity$outboundSchema: z.ZodType<
  NotificationCreateSlackSecurity$Outbound,
  z.ZodTypeDef,
  NotificationCreateSlackSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationCreateSlackSecurity$ {
  /** @deprecated use `NotificationCreateSlackSecurity$inboundSchema` instead. */
  export const inboundSchema = NotificationCreateSlackSecurity$inboundSchema;
  /** @deprecated use `NotificationCreateSlackSecurity$outboundSchema` instead. */
  export const outboundSchema = NotificationCreateSlackSecurity$outboundSchema;
  /** @deprecated use `NotificationCreateSlackSecurity$Outbound` instead. */
  export type Outbound = NotificationCreateSlackSecurity$Outbound;
}

export function notificationCreateSlackSecurityToJSON(
  notificationCreateSlackSecurity: NotificationCreateSlackSecurity,
): string {
  return JSON.stringify(
    NotificationCreateSlackSecurity$outboundSchema.parse(
      notificationCreateSlackSecurity,
    ),
  );
}

export function notificationCreateSlackSecurityFromJSON(
  jsonString: string,
): SafeParseResult<NotificationCreateSlackSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationCreateSlackSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationCreateSlackSecurity' from JSON`,
  );
}

/** @internal */
export const NotificationCreateSlackRequest$inboundSchema: z.ZodType<
  NotificationCreateSlackRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appBuildError: z.boolean(),
  appDeploy: z.boolean(),
  channel: z.string(),
  databaseBackup: z.boolean(),
  dockerCleanup: z.boolean(),
  dokployRestart: z.boolean(),
  name: z.string(),
  serverThreshold: z.boolean(),
  webhookUrl: z.string(),
});

/** @internal */
export type NotificationCreateSlackRequest$Outbound = {
  appBuildError: boolean;
  appDeploy: boolean;
  channel: string;
  databaseBackup: boolean;
  dockerCleanup: boolean;
  dokployRestart: boolean;
  name: string;
  serverThreshold: boolean;
  webhookUrl: string;
};

/** @internal */
export const NotificationCreateSlackRequest$outboundSchema: z.ZodType<
  NotificationCreateSlackRequest$Outbound,
  z.ZodTypeDef,
  NotificationCreateSlackRequest
> = z.object({
  appBuildError: z.boolean(),
  appDeploy: z.boolean(),
  channel: z.string(),
  databaseBackup: z.boolean(),
  dockerCleanup: z.boolean(),
  dokployRestart: z.boolean(),
  name: z.string(),
  serverThreshold: z.boolean(),
  webhookUrl: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationCreateSlackRequest$ {
  /** @deprecated use `NotificationCreateSlackRequest$inboundSchema` instead. */
  export const inboundSchema = NotificationCreateSlackRequest$inboundSchema;
  /** @deprecated use `NotificationCreateSlackRequest$outboundSchema` instead. */
  export const outboundSchema = NotificationCreateSlackRequest$outboundSchema;
  /** @deprecated use `NotificationCreateSlackRequest$Outbound` instead. */
  export type Outbound = NotificationCreateSlackRequest$Outbound;
}

export function notificationCreateSlackRequestToJSON(
  notificationCreateSlackRequest: NotificationCreateSlackRequest,
): string {
  return JSON.stringify(
    NotificationCreateSlackRequest$outboundSchema.parse(
      notificationCreateSlackRequest,
    ),
  );
}

export function notificationCreateSlackRequestFromJSON(
  jsonString: string,
): SafeParseResult<NotificationCreateSlackRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationCreateSlackRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationCreateSlackRequest' from JSON`,
  );
}
