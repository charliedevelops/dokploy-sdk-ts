/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type EnvironmentUpdateSecurity = {
  authorization: string;
};

export type EnvironmentUpdateRequest = {
  environmentId: string;
  name?: string | undefined;
  description?: string | null | undefined;
  createdAt?: string | undefined;
  env?: string | undefined;
  projectId?: string | undefined;
};

/**
 * Successful response
 */
export type EnvironmentUpdateResponseBody = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
};

export type EnvironmentUpdateResponse =
  | EnvironmentUpdateResponseBody
  | models.ErrorT;

/** @internal */
export const EnvironmentUpdateSecurity$inboundSchema: z.ZodType<
  EnvironmentUpdateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type EnvironmentUpdateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const EnvironmentUpdateSecurity$outboundSchema: z.ZodType<
  EnvironmentUpdateSecurity$Outbound,
  z.ZodTypeDef,
  EnvironmentUpdateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentUpdateSecurity$ {
  /** @deprecated use `EnvironmentUpdateSecurity$inboundSchema` instead. */
  export const inboundSchema = EnvironmentUpdateSecurity$inboundSchema;
  /** @deprecated use `EnvironmentUpdateSecurity$outboundSchema` instead. */
  export const outboundSchema = EnvironmentUpdateSecurity$outboundSchema;
  /** @deprecated use `EnvironmentUpdateSecurity$Outbound` instead. */
  export type Outbound = EnvironmentUpdateSecurity$Outbound;
}

export function environmentUpdateSecurityToJSON(
  environmentUpdateSecurity: EnvironmentUpdateSecurity,
): string {
  return JSON.stringify(
    EnvironmentUpdateSecurity$outboundSchema.parse(environmentUpdateSecurity),
  );
}

export function environmentUpdateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentUpdateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentUpdateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentUpdateSecurity' from JSON`,
  );
}

/** @internal */
export const EnvironmentUpdateRequest$inboundSchema: z.ZodType<
  EnvironmentUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  environmentId: z.string(),
  name: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  createdAt: z.string().optional(),
  env: z.string().optional(),
  projectId: z.string().optional(),
});

/** @internal */
export type EnvironmentUpdateRequest$Outbound = {
  environmentId: string;
  name?: string | undefined;
  description?: string | null | undefined;
  createdAt?: string | undefined;
  env?: string | undefined;
  projectId?: string | undefined;
};

/** @internal */
export const EnvironmentUpdateRequest$outboundSchema: z.ZodType<
  EnvironmentUpdateRequest$Outbound,
  z.ZodTypeDef,
  EnvironmentUpdateRequest
> = z.object({
  environmentId: z.string(),
  name: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  createdAt: z.string().optional(),
  env: z.string().optional(),
  projectId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentUpdateRequest$ {
  /** @deprecated use `EnvironmentUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = EnvironmentUpdateRequest$inboundSchema;
  /** @deprecated use `EnvironmentUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = EnvironmentUpdateRequest$outboundSchema;
  /** @deprecated use `EnvironmentUpdateRequest$Outbound` instead. */
  export type Outbound = EnvironmentUpdateRequest$Outbound;
}

export function environmentUpdateRequestToJSON(
  environmentUpdateRequest: EnvironmentUpdateRequest,
): string {
  return JSON.stringify(
    EnvironmentUpdateRequest$outboundSchema.parse(environmentUpdateRequest),
  );
}

export function environmentUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentUpdateRequest' from JSON`,
  );
}

/** @internal */
export const EnvironmentUpdateResponseBody$inboundSchema: z.ZodType<
  EnvironmentUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
});

/** @internal */
export type EnvironmentUpdateResponseBody$Outbound = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
};

/** @internal */
export const EnvironmentUpdateResponseBody$outboundSchema: z.ZodType<
  EnvironmentUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  EnvironmentUpdateResponseBody
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentUpdateResponseBody$ {
  /** @deprecated use `EnvironmentUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = EnvironmentUpdateResponseBody$inboundSchema;
  /** @deprecated use `EnvironmentUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = EnvironmentUpdateResponseBody$outboundSchema;
  /** @deprecated use `EnvironmentUpdateResponseBody$Outbound` instead. */
  export type Outbound = EnvironmentUpdateResponseBody$Outbound;
}

export function environmentUpdateResponseBodyToJSON(
  environmentUpdateResponseBody: EnvironmentUpdateResponseBody,
): string {
  return JSON.stringify(
    EnvironmentUpdateResponseBody$outboundSchema.parse(
      environmentUpdateResponseBody,
    ),
  );
}

export function environmentUpdateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentUpdateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentUpdateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentUpdateResponseBody' from JSON`,
  );
}

/** @internal */
export const EnvironmentUpdateResponse$inboundSchema: z.ZodType<
  EnvironmentUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => EnvironmentUpdateResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type EnvironmentUpdateResponse$Outbound =
  | EnvironmentUpdateResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const EnvironmentUpdateResponse$outboundSchema: z.ZodType<
  EnvironmentUpdateResponse$Outbound,
  z.ZodTypeDef,
  EnvironmentUpdateResponse
> = z.union([
  z.lazy(() => EnvironmentUpdateResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentUpdateResponse$ {
  /** @deprecated use `EnvironmentUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = EnvironmentUpdateResponse$inboundSchema;
  /** @deprecated use `EnvironmentUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = EnvironmentUpdateResponse$outboundSchema;
  /** @deprecated use `EnvironmentUpdateResponse$Outbound` instead. */
  export type Outbound = EnvironmentUpdateResponse$Outbound;
}

export function environmentUpdateResponseToJSON(
  environmentUpdateResponse: EnvironmentUpdateResponse,
): string {
  return JSON.stringify(
    EnvironmentUpdateResponse$outboundSchema.parse(environmentUpdateResponse),
  );
}

export function environmentUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentUpdateResponse' from JSON`,
  );
}
