/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NotificationTestNtfyConnectionSecurity = {
  authorization: string;
};

export type NotificationTestNtfyConnectionRequest = {
  accessToken: string;
  priority: number;
  serverUrl: string;
  topic: string;
};

/** @internal */
export const NotificationTestNtfyConnectionSecurity$inboundSchema: z.ZodType<
  NotificationTestNtfyConnectionSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type NotificationTestNtfyConnectionSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const NotificationTestNtfyConnectionSecurity$outboundSchema: z.ZodType<
  NotificationTestNtfyConnectionSecurity$Outbound,
  z.ZodTypeDef,
  NotificationTestNtfyConnectionSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationTestNtfyConnectionSecurity$ {
  /** @deprecated use `NotificationTestNtfyConnectionSecurity$inboundSchema` instead. */
  export const inboundSchema =
    NotificationTestNtfyConnectionSecurity$inboundSchema;
  /** @deprecated use `NotificationTestNtfyConnectionSecurity$outboundSchema` instead. */
  export const outboundSchema =
    NotificationTestNtfyConnectionSecurity$outboundSchema;
  /** @deprecated use `NotificationTestNtfyConnectionSecurity$Outbound` instead. */
  export type Outbound = NotificationTestNtfyConnectionSecurity$Outbound;
}

export function notificationTestNtfyConnectionSecurityToJSON(
  notificationTestNtfyConnectionSecurity:
    NotificationTestNtfyConnectionSecurity,
): string {
  return JSON.stringify(
    NotificationTestNtfyConnectionSecurity$outboundSchema.parse(
      notificationTestNtfyConnectionSecurity,
    ),
  );
}

export function notificationTestNtfyConnectionSecurityFromJSON(
  jsonString: string,
): SafeParseResult<NotificationTestNtfyConnectionSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      NotificationTestNtfyConnectionSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationTestNtfyConnectionSecurity' from JSON`,
  );
}

/** @internal */
export const NotificationTestNtfyConnectionRequest$inboundSchema: z.ZodType<
  NotificationTestNtfyConnectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.string(),
  priority: z.number(),
  serverUrl: z.string(),
  topic: z.string(),
});

/** @internal */
export type NotificationTestNtfyConnectionRequest$Outbound = {
  accessToken: string;
  priority: number;
  serverUrl: string;
  topic: string;
};

/** @internal */
export const NotificationTestNtfyConnectionRequest$outboundSchema: z.ZodType<
  NotificationTestNtfyConnectionRequest$Outbound,
  z.ZodTypeDef,
  NotificationTestNtfyConnectionRequest
> = z.object({
  accessToken: z.string(),
  priority: z.number(),
  serverUrl: z.string(),
  topic: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationTestNtfyConnectionRequest$ {
  /** @deprecated use `NotificationTestNtfyConnectionRequest$inboundSchema` instead. */
  export const inboundSchema =
    NotificationTestNtfyConnectionRequest$inboundSchema;
  /** @deprecated use `NotificationTestNtfyConnectionRequest$outboundSchema` instead. */
  export const outboundSchema =
    NotificationTestNtfyConnectionRequest$outboundSchema;
  /** @deprecated use `NotificationTestNtfyConnectionRequest$Outbound` instead. */
  export type Outbound = NotificationTestNtfyConnectionRequest$Outbound;
}

export function notificationTestNtfyConnectionRequestToJSON(
  notificationTestNtfyConnectionRequest: NotificationTestNtfyConnectionRequest,
): string {
  return JSON.stringify(
    NotificationTestNtfyConnectionRequest$outboundSchema.parse(
      notificationTestNtfyConnectionRequest,
    ),
  );
}

export function notificationTestNtfyConnectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<NotificationTestNtfyConnectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      NotificationTestNtfyConnectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationTestNtfyConnectionRequest' from JSON`,
  );
}
