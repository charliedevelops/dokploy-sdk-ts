/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GitlabCreateRequest = {
  accessToken?: string | null | undefined;
  applicationId?: string | undefined;
  authId: string;
  expiresAt?: number | null | undefined;
  gitProviderId?: string | undefined;
  gitlabId?: string | undefined;
  gitlabUrl: string;
  groupName?: string | undefined;
  name: string;
  redirectUri?: string | undefined;
  refreshToken?: string | null | undefined;
  secret?: string | undefined;
};

/** @internal */
export const GitlabCreateRequest$inboundSchema: z.ZodType<
  GitlabCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.nullable(z.string()).optional(),
  applicationId: z.string().optional(),
  authId: z.string(),
  expiresAt: z.nullable(z.number()).optional(),
  gitProviderId: z.string().optional(),
  gitlabId: z.string().optional(),
  gitlabUrl: z.string(),
  groupName: z.string().optional(),
  name: z.string(),
  redirectUri: z.string().optional(),
  refreshToken: z.nullable(z.string()).optional(),
  secret: z.string().optional(),
});

/** @internal */
export type GitlabCreateRequest$Outbound = {
  accessToken?: string | null | undefined;
  applicationId?: string | undefined;
  authId: string;
  expiresAt?: number | null | undefined;
  gitProviderId?: string | undefined;
  gitlabId?: string | undefined;
  gitlabUrl: string;
  groupName?: string | undefined;
  name: string;
  redirectUri?: string | undefined;
  refreshToken?: string | null | undefined;
  secret?: string | undefined;
};

/** @internal */
export const GitlabCreateRequest$outboundSchema: z.ZodType<
  GitlabCreateRequest$Outbound,
  z.ZodTypeDef,
  GitlabCreateRequest
> = z.object({
  accessToken: z.nullable(z.string()).optional(),
  applicationId: z.string().optional(),
  authId: z.string(),
  expiresAt: z.nullable(z.number()).optional(),
  gitProviderId: z.string().optional(),
  gitlabId: z.string().optional(),
  gitlabUrl: z.string(),
  groupName: z.string().optional(),
  name: z.string(),
  redirectUri: z.string().optional(),
  refreshToken: z.nullable(z.string()).optional(),
  secret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitlabCreateRequest$ {
  /** @deprecated use `GitlabCreateRequest$inboundSchema` instead. */
  export const inboundSchema = GitlabCreateRequest$inboundSchema;
  /** @deprecated use `GitlabCreateRequest$outboundSchema` instead. */
  export const outboundSchema = GitlabCreateRequest$outboundSchema;
  /** @deprecated use `GitlabCreateRequest$Outbound` instead. */
  export type Outbound = GitlabCreateRequest$Outbound;
}

export function gitlabCreateRequestToJSON(
  gitlabCreateRequest: GitlabCreateRequest,
): string {
  return JSON.stringify(
    GitlabCreateRequest$outboundSchema.parse(gitlabCreateRequest),
  );
}

export function gitlabCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<GitlabCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitlabCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitlabCreateRequest' from JSON`,
  );
}
