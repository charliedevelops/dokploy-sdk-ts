/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComposeRefreshTokenRequest = {
  composeId: string;
};

/** @internal */
export const ComposeRefreshTokenRequest$inboundSchema: z.ZodType<
  ComposeRefreshTokenRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  composeId: z.string(),
});

/** @internal */
export type ComposeRefreshTokenRequest$Outbound = {
  composeId: string;
};

/** @internal */
export const ComposeRefreshTokenRequest$outboundSchema: z.ZodType<
  ComposeRefreshTokenRequest$Outbound,
  z.ZodTypeDef,
  ComposeRefreshTokenRequest
> = z.object({
  composeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComposeRefreshTokenRequest$ {
  /** @deprecated use `ComposeRefreshTokenRequest$inboundSchema` instead. */
  export const inboundSchema = ComposeRefreshTokenRequest$inboundSchema;
  /** @deprecated use `ComposeRefreshTokenRequest$outboundSchema` instead. */
  export const outboundSchema = ComposeRefreshTokenRequest$outboundSchema;
  /** @deprecated use `ComposeRefreshTokenRequest$Outbound` instead. */
  export type Outbound = ComposeRefreshTokenRequest$Outbound;
}

export function composeRefreshTokenRequestToJSON(
  composeRefreshTokenRequest: ComposeRefreshTokenRequest,
): string {
  return JSON.stringify(
    ComposeRefreshTokenRequest$outboundSchema.parse(composeRefreshTokenRequest),
  );
}

export function composeRefreshTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<ComposeRefreshTokenRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComposeRefreshTokenRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComposeRefreshTokenRequest' from JSON`,
  );
}
