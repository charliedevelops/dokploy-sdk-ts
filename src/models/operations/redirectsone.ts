/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type RedirectsOneSecurity = {
  authorization: string;
};

export type RedirectsOneRequest = {
  redirectId: string;
};

/**
 * Successful response
 */
export type RedirectsOneResponseBody = {
  applicationId: string;
  createdAt: string;
  permanent: boolean;
  redirectId: string;
  regex: string;
  replacement: string;
  uniqueConfigKey: number;
};

export type RedirectsOneResponse = RedirectsOneResponseBody | models.ErrorT;

/** @internal */
export const RedirectsOneSecurity$inboundSchema: z.ZodType<
  RedirectsOneSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type RedirectsOneSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const RedirectsOneSecurity$outboundSchema: z.ZodType<
  RedirectsOneSecurity$Outbound,
  z.ZodTypeDef,
  RedirectsOneSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedirectsOneSecurity$ {
  /** @deprecated use `RedirectsOneSecurity$inboundSchema` instead. */
  export const inboundSchema = RedirectsOneSecurity$inboundSchema;
  /** @deprecated use `RedirectsOneSecurity$outboundSchema` instead. */
  export const outboundSchema = RedirectsOneSecurity$outboundSchema;
  /** @deprecated use `RedirectsOneSecurity$Outbound` instead. */
  export type Outbound = RedirectsOneSecurity$Outbound;
}

export function redirectsOneSecurityToJSON(
  redirectsOneSecurity: RedirectsOneSecurity,
): string {
  return JSON.stringify(
    RedirectsOneSecurity$outboundSchema.parse(redirectsOneSecurity),
  );
}

export function redirectsOneSecurityFromJSON(
  jsonString: string,
): SafeParseResult<RedirectsOneSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedirectsOneSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedirectsOneSecurity' from JSON`,
  );
}

/** @internal */
export const RedirectsOneRequest$inboundSchema: z.ZodType<
  RedirectsOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  redirectId: z.string(),
});

/** @internal */
export type RedirectsOneRequest$Outbound = {
  redirectId: string;
};

/** @internal */
export const RedirectsOneRequest$outboundSchema: z.ZodType<
  RedirectsOneRequest$Outbound,
  z.ZodTypeDef,
  RedirectsOneRequest
> = z.object({
  redirectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedirectsOneRequest$ {
  /** @deprecated use `RedirectsOneRequest$inboundSchema` instead. */
  export const inboundSchema = RedirectsOneRequest$inboundSchema;
  /** @deprecated use `RedirectsOneRequest$outboundSchema` instead. */
  export const outboundSchema = RedirectsOneRequest$outboundSchema;
  /** @deprecated use `RedirectsOneRequest$Outbound` instead. */
  export type Outbound = RedirectsOneRequest$Outbound;
}

export function redirectsOneRequestToJSON(
  redirectsOneRequest: RedirectsOneRequest,
): string {
  return JSON.stringify(
    RedirectsOneRequest$outboundSchema.parse(redirectsOneRequest),
  );
}

export function redirectsOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<RedirectsOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedirectsOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedirectsOneRequest' from JSON`,
  );
}

/** @internal */
export const RedirectsOneResponseBody$inboundSchema: z.ZodType<
  RedirectsOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string(),
  createdAt: z.string(),
  permanent: z.boolean(),
  redirectId: z.string(),
  regex: z.string(),
  replacement: z.string(),
  uniqueConfigKey: z.number(),
});

/** @internal */
export type RedirectsOneResponseBody$Outbound = {
  applicationId: string;
  createdAt: string;
  permanent: boolean;
  redirectId: string;
  regex: string;
  replacement: string;
  uniqueConfigKey: number;
};

/** @internal */
export const RedirectsOneResponseBody$outboundSchema: z.ZodType<
  RedirectsOneResponseBody$Outbound,
  z.ZodTypeDef,
  RedirectsOneResponseBody
> = z.object({
  applicationId: z.string(),
  createdAt: z.string(),
  permanent: z.boolean(),
  redirectId: z.string(),
  regex: z.string(),
  replacement: z.string(),
  uniqueConfigKey: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedirectsOneResponseBody$ {
  /** @deprecated use `RedirectsOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = RedirectsOneResponseBody$inboundSchema;
  /** @deprecated use `RedirectsOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = RedirectsOneResponseBody$outboundSchema;
  /** @deprecated use `RedirectsOneResponseBody$Outbound` instead. */
  export type Outbound = RedirectsOneResponseBody$Outbound;
}

export function redirectsOneResponseBodyToJSON(
  redirectsOneResponseBody: RedirectsOneResponseBody,
): string {
  return JSON.stringify(
    RedirectsOneResponseBody$outboundSchema.parse(redirectsOneResponseBody),
  );
}

export function redirectsOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RedirectsOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedirectsOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedirectsOneResponseBody' from JSON`,
  );
}

/** @internal */
export const RedirectsOneResponse$inboundSchema: z.ZodType<
  RedirectsOneResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => RedirectsOneResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type RedirectsOneResponse$Outbound =
  | RedirectsOneResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const RedirectsOneResponse$outboundSchema: z.ZodType<
  RedirectsOneResponse$Outbound,
  z.ZodTypeDef,
  RedirectsOneResponse
> = z.union([
  z.lazy(() => RedirectsOneResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedirectsOneResponse$ {
  /** @deprecated use `RedirectsOneResponse$inboundSchema` instead. */
  export const inboundSchema = RedirectsOneResponse$inboundSchema;
  /** @deprecated use `RedirectsOneResponse$outboundSchema` instead. */
  export const outboundSchema = RedirectsOneResponse$outboundSchema;
  /** @deprecated use `RedirectsOneResponse$Outbound` instead. */
  export type Outbound = RedirectsOneResponse$Outbound;
}

export function redirectsOneResponseToJSON(
  redirectsOneResponse: RedirectsOneResponse,
): string {
  return JSON.stringify(
    RedirectsOneResponse$outboundSchema.parse(redirectsOneResponse),
  );
}

export function redirectsOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<RedirectsOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedirectsOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedirectsOneResponse' from JSON`,
  );
}
