/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BackupCreateSecurity = {
  authorization: string;
};

export const BackupCreateDatabaseType = {
  Postgres: "postgres",
  Mariadb: "mariadb",
  Mysql: "mysql",
  Mongo: "mongo",
  WebServer: "web-server",
} as const;
export type BackupCreateDatabaseType = ClosedEnum<
  typeof BackupCreateDatabaseType
>;

export const BackupCreateBackupType = {
  Database: "database",
  Compose: "compose",
} as const;
export type BackupCreateBackupType = ClosedEnum<typeof BackupCreateBackupType>;

export type BackupCreateRequest = {
  schedule: string;
  enabled?: boolean | null | undefined;
  prefix: string;
  destinationId: string;
  keepLatestCount?: number | null | undefined;
  database: string;
  mariadbId?: string | null | undefined;
  mysqlId?: string | null | undefined;
  postgresId?: string | null | undefined;
  mongoId?: string | null | undefined;
  databaseType: BackupCreateDatabaseType;
  userId?: string | null | undefined;
  backupType?: BackupCreateBackupType | undefined;
  composeId?: string | null | undefined;
  serviceName?: string | null | undefined;
  metadata?: any | null | undefined;
};

/** @internal */
export const BackupCreateSecurity$inboundSchema: z.ZodType<
  BackupCreateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type BackupCreateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const BackupCreateSecurity$outboundSchema: z.ZodType<
  BackupCreateSecurity$Outbound,
  z.ZodTypeDef,
  BackupCreateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackupCreateSecurity$ {
  /** @deprecated use `BackupCreateSecurity$inboundSchema` instead. */
  export const inboundSchema = BackupCreateSecurity$inboundSchema;
  /** @deprecated use `BackupCreateSecurity$outboundSchema` instead. */
  export const outboundSchema = BackupCreateSecurity$outboundSchema;
  /** @deprecated use `BackupCreateSecurity$Outbound` instead. */
  export type Outbound = BackupCreateSecurity$Outbound;
}

export function backupCreateSecurityToJSON(
  backupCreateSecurity: BackupCreateSecurity,
): string {
  return JSON.stringify(
    BackupCreateSecurity$outboundSchema.parse(backupCreateSecurity),
  );
}

export function backupCreateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<BackupCreateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BackupCreateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackupCreateSecurity' from JSON`,
  );
}

/** @internal */
export const BackupCreateDatabaseType$inboundSchema: z.ZodNativeEnum<
  typeof BackupCreateDatabaseType
> = z.nativeEnum(BackupCreateDatabaseType);

/** @internal */
export const BackupCreateDatabaseType$outboundSchema: z.ZodNativeEnum<
  typeof BackupCreateDatabaseType
> = BackupCreateDatabaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackupCreateDatabaseType$ {
  /** @deprecated use `BackupCreateDatabaseType$inboundSchema` instead. */
  export const inboundSchema = BackupCreateDatabaseType$inboundSchema;
  /** @deprecated use `BackupCreateDatabaseType$outboundSchema` instead. */
  export const outboundSchema = BackupCreateDatabaseType$outboundSchema;
}

/** @internal */
export const BackupCreateBackupType$inboundSchema: z.ZodNativeEnum<
  typeof BackupCreateBackupType
> = z.nativeEnum(BackupCreateBackupType);

/** @internal */
export const BackupCreateBackupType$outboundSchema: z.ZodNativeEnum<
  typeof BackupCreateBackupType
> = BackupCreateBackupType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackupCreateBackupType$ {
  /** @deprecated use `BackupCreateBackupType$inboundSchema` instead. */
  export const inboundSchema = BackupCreateBackupType$inboundSchema;
  /** @deprecated use `BackupCreateBackupType$outboundSchema` instead. */
  export const outboundSchema = BackupCreateBackupType$outboundSchema;
}

/** @internal */
export const BackupCreateRequest$inboundSchema: z.ZodType<
  BackupCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  schedule: z.string(),
  enabled: z.nullable(z.boolean()).optional(),
  prefix: z.string(),
  destinationId: z.string(),
  keepLatestCount: z.nullable(z.number()).optional(),
  database: z.string(),
  mariadbId: z.nullable(z.string()).optional(),
  mysqlId: z.nullable(z.string()).optional(),
  postgresId: z.nullable(z.string()).optional(),
  mongoId: z.nullable(z.string()).optional(),
  databaseType: BackupCreateDatabaseType$inboundSchema,
  userId: z.nullable(z.string()).optional(),
  backupType: BackupCreateBackupType$inboundSchema.optional(),
  composeId: z.nullable(z.string()).optional(),
  serviceName: z.nullable(z.string()).optional(),
  metadata: z.nullable(z.any()).optional(),
});

/** @internal */
export type BackupCreateRequest$Outbound = {
  schedule: string;
  enabled?: boolean | null | undefined;
  prefix: string;
  destinationId: string;
  keepLatestCount?: number | null | undefined;
  database: string;
  mariadbId?: string | null | undefined;
  mysqlId?: string | null | undefined;
  postgresId?: string | null | undefined;
  mongoId?: string | null | undefined;
  databaseType: string;
  userId?: string | null | undefined;
  backupType?: string | undefined;
  composeId?: string | null | undefined;
  serviceName?: string | null | undefined;
  metadata?: any | null | undefined;
};

/** @internal */
export const BackupCreateRequest$outboundSchema: z.ZodType<
  BackupCreateRequest$Outbound,
  z.ZodTypeDef,
  BackupCreateRequest
> = z.object({
  schedule: z.string(),
  enabled: z.nullable(z.boolean()).optional(),
  prefix: z.string(),
  destinationId: z.string(),
  keepLatestCount: z.nullable(z.number()).optional(),
  database: z.string(),
  mariadbId: z.nullable(z.string()).optional(),
  mysqlId: z.nullable(z.string()).optional(),
  postgresId: z.nullable(z.string()).optional(),
  mongoId: z.nullable(z.string()).optional(),
  databaseType: BackupCreateDatabaseType$outboundSchema,
  userId: z.nullable(z.string()).optional(),
  backupType: BackupCreateBackupType$outboundSchema.optional(),
  composeId: z.nullable(z.string()).optional(),
  serviceName: z.nullable(z.string()).optional(),
  metadata: z.nullable(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackupCreateRequest$ {
  /** @deprecated use `BackupCreateRequest$inboundSchema` instead. */
  export const inboundSchema = BackupCreateRequest$inboundSchema;
  /** @deprecated use `BackupCreateRequest$outboundSchema` instead. */
  export const outboundSchema = BackupCreateRequest$outboundSchema;
  /** @deprecated use `BackupCreateRequest$Outbound` instead. */
  export type Outbound = BackupCreateRequest$Outbound;
}

export function backupCreateRequestToJSON(
  backupCreateRequest: BackupCreateRequest,
): string {
  return JSON.stringify(
    BackupCreateRequest$outboundSchema.parse(backupCreateRequest),
  );
}

export function backupCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<BackupCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BackupCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackupCreateRequest' from JSON`,
  );
}
