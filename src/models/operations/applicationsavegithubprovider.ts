/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ApplicationSaveGithubProviderSecurity = {
  authorization: string;
};

export const ApplicationSaveGithubProviderTriggerType = {
  Push: "push",
  Tag: "tag",
} as const;
export type ApplicationSaveGithubProviderTriggerType = ClosedEnum<
  typeof ApplicationSaveGithubProviderTriggerType
>;

export type ApplicationSaveGithubProviderRequest = {
  applicationId: string;
  repository?: string | null | undefined;
  branch?: string | null | undefined;
  owner: string | null;
  buildPath?: string | null | undefined;
  githubId: string | null;
  watchPaths?: Array<string> | null | undefined;
  enableSubmodules: boolean;
  triggerType?: ApplicationSaveGithubProviderTriggerType | undefined;
};

export type ApplicationSaveGithubProviderResponse = models.ErrorT | boolean;

/** @internal */
export const ApplicationSaveGithubProviderSecurity$inboundSchema: z.ZodType<
  ApplicationSaveGithubProviderSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type ApplicationSaveGithubProviderSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const ApplicationSaveGithubProviderSecurity$outboundSchema: z.ZodType<
  ApplicationSaveGithubProviderSecurity$Outbound,
  z.ZodTypeDef,
  ApplicationSaveGithubProviderSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationSaveGithubProviderSecurity$ {
  /** @deprecated use `ApplicationSaveGithubProviderSecurity$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationSaveGithubProviderSecurity$inboundSchema;
  /** @deprecated use `ApplicationSaveGithubProviderSecurity$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationSaveGithubProviderSecurity$outboundSchema;
  /** @deprecated use `ApplicationSaveGithubProviderSecurity$Outbound` instead. */
  export type Outbound = ApplicationSaveGithubProviderSecurity$Outbound;
}

export function applicationSaveGithubProviderSecurityToJSON(
  applicationSaveGithubProviderSecurity: ApplicationSaveGithubProviderSecurity,
): string {
  return JSON.stringify(
    ApplicationSaveGithubProviderSecurity$outboundSchema.parse(
      applicationSaveGithubProviderSecurity,
    ),
  );
}

export function applicationSaveGithubProviderSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationSaveGithubProviderSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationSaveGithubProviderSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationSaveGithubProviderSecurity' from JSON`,
  );
}

/** @internal */
export const ApplicationSaveGithubProviderTriggerType$inboundSchema:
  z.ZodNativeEnum<typeof ApplicationSaveGithubProviderTriggerType> = z
    .nativeEnum(ApplicationSaveGithubProviderTriggerType);

/** @internal */
export const ApplicationSaveGithubProviderTriggerType$outboundSchema:
  z.ZodNativeEnum<typeof ApplicationSaveGithubProviderTriggerType> =
    ApplicationSaveGithubProviderTriggerType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationSaveGithubProviderTriggerType$ {
  /** @deprecated use `ApplicationSaveGithubProviderTriggerType$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationSaveGithubProviderTriggerType$inboundSchema;
  /** @deprecated use `ApplicationSaveGithubProviderTriggerType$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationSaveGithubProviderTriggerType$outboundSchema;
}

/** @internal */
export const ApplicationSaveGithubProviderRequest$inboundSchema: z.ZodType<
  ApplicationSaveGithubProviderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string(),
  repository: z.nullable(z.string()).optional(),
  branch: z.nullable(z.string()).optional(),
  owner: z.nullable(z.string()),
  buildPath: z.nullable(z.string()).optional(),
  githubId: z.nullable(z.string()),
  watchPaths: z.nullable(z.array(z.string())).optional(),
  enableSubmodules: z.boolean(),
  triggerType: ApplicationSaveGithubProviderTriggerType$inboundSchema.default(
    "push",
  ),
});

/** @internal */
export type ApplicationSaveGithubProviderRequest$Outbound = {
  applicationId: string;
  repository?: string | null | undefined;
  branch?: string | null | undefined;
  owner: string | null;
  buildPath?: string | null | undefined;
  githubId: string | null;
  watchPaths?: Array<string> | null | undefined;
  enableSubmodules: boolean;
  triggerType: string;
};

/** @internal */
export const ApplicationSaveGithubProviderRequest$outboundSchema: z.ZodType<
  ApplicationSaveGithubProviderRequest$Outbound,
  z.ZodTypeDef,
  ApplicationSaveGithubProviderRequest
> = z.object({
  applicationId: z.string(),
  repository: z.nullable(z.string()).optional(),
  branch: z.nullable(z.string()).optional(),
  owner: z.nullable(z.string()),
  buildPath: z.nullable(z.string()).optional(),
  githubId: z.nullable(z.string()),
  watchPaths: z.nullable(z.array(z.string())).optional(),
  enableSubmodules: z.boolean(),
  triggerType: ApplicationSaveGithubProviderTriggerType$outboundSchema.default(
    "push",
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationSaveGithubProviderRequest$ {
  /** @deprecated use `ApplicationSaveGithubProviderRequest$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationSaveGithubProviderRequest$inboundSchema;
  /** @deprecated use `ApplicationSaveGithubProviderRequest$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationSaveGithubProviderRequest$outboundSchema;
  /** @deprecated use `ApplicationSaveGithubProviderRequest$Outbound` instead. */
  export type Outbound = ApplicationSaveGithubProviderRequest$Outbound;
}

export function applicationSaveGithubProviderRequestToJSON(
  applicationSaveGithubProviderRequest: ApplicationSaveGithubProviderRequest,
): string {
  return JSON.stringify(
    ApplicationSaveGithubProviderRequest$outboundSchema.parse(
      applicationSaveGithubProviderRequest,
    ),
  );
}

export function applicationSaveGithubProviderRequestFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationSaveGithubProviderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationSaveGithubProviderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationSaveGithubProviderRequest' from JSON`,
  );
}

/** @internal */
export const ApplicationSaveGithubProviderResponse$inboundSchema: z.ZodType<
  ApplicationSaveGithubProviderResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.boolean()]);

/** @internal */
export type ApplicationSaveGithubProviderResponse$Outbound =
  | models.ErrorT$Outbound
  | boolean;

/** @internal */
export const ApplicationSaveGithubProviderResponse$outboundSchema: z.ZodType<
  ApplicationSaveGithubProviderResponse$Outbound,
  z.ZodTypeDef,
  ApplicationSaveGithubProviderResponse
> = z.union([models.ErrorT$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationSaveGithubProviderResponse$ {
  /** @deprecated use `ApplicationSaveGithubProviderResponse$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationSaveGithubProviderResponse$inboundSchema;
  /** @deprecated use `ApplicationSaveGithubProviderResponse$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationSaveGithubProviderResponse$outboundSchema;
  /** @deprecated use `ApplicationSaveGithubProviderResponse$Outbound` instead. */
  export type Outbound = ApplicationSaveGithubProviderResponse$Outbound;
}

export function applicationSaveGithubProviderResponseToJSON(
  applicationSaveGithubProviderResponse: ApplicationSaveGithubProviderResponse,
): string {
  return JSON.stringify(
    ApplicationSaveGithubProviderResponse$outboundSchema.parse(
      applicationSaveGithubProviderResponse,
    ),
  );
}

export function applicationSaveGithubProviderResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationSaveGithubProviderResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationSaveGithubProviderResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationSaveGithubProviderResponse' from JSON`,
  );
}
