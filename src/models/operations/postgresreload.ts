/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PostgresReloadSecurity = {
  authorization: string;
};

export type PostgresReloadRequest = {
  appName: string;
  postgresId: string;
};

export type PostgresReloadResponse = models.ErrorT | boolean;

/** @internal */
export const PostgresReloadSecurity$inboundSchema: z.ZodType<
  PostgresReloadSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type PostgresReloadSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const PostgresReloadSecurity$outboundSchema: z.ZodType<
  PostgresReloadSecurity$Outbound,
  z.ZodTypeDef,
  PostgresReloadSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresReloadSecurity$ {
  /** @deprecated use `PostgresReloadSecurity$inboundSchema` instead. */
  export const inboundSchema = PostgresReloadSecurity$inboundSchema;
  /** @deprecated use `PostgresReloadSecurity$outboundSchema` instead. */
  export const outboundSchema = PostgresReloadSecurity$outboundSchema;
  /** @deprecated use `PostgresReloadSecurity$Outbound` instead. */
  export type Outbound = PostgresReloadSecurity$Outbound;
}

export function postgresReloadSecurityToJSON(
  postgresReloadSecurity: PostgresReloadSecurity,
): string {
  return JSON.stringify(
    PostgresReloadSecurity$outboundSchema.parse(postgresReloadSecurity),
  );
}

export function postgresReloadSecurityFromJSON(
  jsonString: string,
): SafeParseResult<PostgresReloadSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresReloadSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresReloadSecurity' from JSON`,
  );
}

/** @internal */
export const PostgresReloadRequest$inboundSchema: z.ZodType<
  PostgresReloadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  postgresId: z.string(),
});

/** @internal */
export type PostgresReloadRequest$Outbound = {
  appName: string;
  postgresId: string;
};

/** @internal */
export const PostgresReloadRequest$outboundSchema: z.ZodType<
  PostgresReloadRequest$Outbound,
  z.ZodTypeDef,
  PostgresReloadRequest
> = z.object({
  appName: z.string(),
  postgresId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresReloadRequest$ {
  /** @deprecated use `PostgresReloadRequest$inboundSchema` instead. */
  export const inboundSchema = PostgresReloadRequest$inboundSchema;
  /** @deprecated use `PostgresReloadRequest$outboundSchema` instead. */
  export const outboundSchema = PostgresReloadRequest$outboundSchema;
  /** @deprecated use `PostgresReloadRequest$Outbound` instead. */
  export type Outbound = PostgresReloadRequest$Outbound;
}

export function postgresReloadRequestToJSON(
  postgresReloadRequest: PostgresReloadRequest,
): string {
  return JSON.stringify(
    PostgresReloadRequest$outboundSchema.parse(postgresReloadRequest),
  );
}

export function postgresReloadRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostgresReloadRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresReloadRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresReloadRequest' from JSON`,
  );
}

/** @internal */
export const PostgresReloadResponse$inboundSchema: z.ZodType<
  PostgresReloadResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.boolean()]);

/** @internal */
export type PostgresReloadResponse$Outbound = models.ErrorT$Outbound | boolean;

/** @internal */
export const PostgresReloadResponse$outboundSchema: z.ZodType<
  PostgresReloadResponse$Outbound,
  z.ZodTypeDef,
  PostgresReloadResponse
> = z.union([models.ErrorT$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresReloadResponse$ {
  /** @deprecated use `PostgresReloadResponse$inboundSchema` instead. */
  export const inboundSchema = PostgresReloadResponse$inboundSchema;
  /** @deprecated use `PostgresReloadResponse$outboundSchema` instead. */
  export const outboundSchema = PostgresReloadResponse$outboundSchema;
  /** @deprecated use `PostgresReloadResponse$Outbound` instead. */
  export type Outbound = PostgresReloadResponse$Outbound;
}

export function postgresReloadResponseToJSON(
  postgresReloadResponse: PostgresReloadResponse,
): string {
  return JSON.stringify(
    PostgresReloadResponse$outboundSchema.parse(postgresReloadResponse),
  );
}

export function postgresReloadResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostgresReloadResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresReloadResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresReloadResponse' from JSON`,
  );
}
