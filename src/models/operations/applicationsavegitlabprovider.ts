/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ApplicationSaveGitlabProviderSecurity = {
  authorization: string;
};

export type ApplicationSaveGitlabProviderRequest = {
  applicationId: string;
  gitlabBranch: string | null;
  gitlabBuildPath: string | null;
  gitlabOwner: string | null;
  gitlabRepository: string | null;
  gitlabId: string | null;
  gitlabProjectId: number | null;
  gitlabPathNamespace: string | null;
  watchPaths?: Array<string> | null | undefined;
  enableSubmodules: boolean;
};

export type ApplicationSaveGitlabProviderResponse = models.ErrorT | boolean;

/** @internal */
export const ApplicationSaveGitlabProviderSecurity$inboundSchema: z.ZodType<
  ApplicationSaveGitlabProviderSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type ApplicationSaveGitlabProviderSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const ApplicationSaveGitlabProviderSecurity$outboundSchema: z.ZodType<
  ApplicationSaveGitlabProviderSecurity$Outbound,
  z.ZodTypeDef,
  ApplicationSaveGitlabProviderSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationSaveGitlabProviderSecurity$ {
  /** @deprecated use `ApplicationSaveGitlabProviderSecurity$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationSaveGitlabProviderSecurity$inboundSchema;
  /** @deprecated use `ApplicationSaveGitlabProviderSecurity$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationSaveGitlabProviderSecurity$outboundSchema;
  /** @deprecated use `ApplicationSaveGitlabProviderSecurity$Outbound` instead. */
  export type Outbound = ApplicationSaveGitlabProviderSecurity$Outbound;
}

export function applicationSaveGitlabProviderSecurityToJSON(
  applicationSaveGitlabProviderSecurity: ApplicationSaveGitlabProviderSecurity,
): string {
  return JSON.stringify(
    ApplicationSaveGitlabProviderSecurity$outboundSchema.parse(
      applicationSaveGitlabProviderSecurity,
    ),
  );
}

export function applicationSaveGitlabProviderSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationSaveGitlabProviderSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationSaveGitlabProviderSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationSaveGitlabProviderSecurity' from JSON`,
  );
}

/** @internal */
export const ApplicationSaveGitlabProviderRequest$inboundSchema: z.ZodType<
  ApplicationSaveGitlabProviderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string(),
  gitlabBranch: z.nullable(z.string()),
  gitlabBuildPath: z.nullable(z.string()),
  gitlabOwner: z.nullable(z.string()),
  gitlabRepository: z.nullable(z.string()),
  gitlabId: z.nullable(z.string()),
  gitlabProjectId: z.nullable(z.number()),
  gitlabPathNamespace: z.nullable(z.string()),
  watchPaths: z.nullable(z.array(z.string())).optional(),
  enableSubmodules: z.boolean(),
});

/** @internal */
export type ApplicationSaveGitlabProviderRequest$Outbound = {
  applicationId: string;
  gitlabBranch: string | null;
  gitlabBuildPath: string | null;
  gitlabOwner: string | null;
  gitlabRepository: string | null;
  gitlabId: string | null;
  gitlabProjectId: number | null;
  gitlabPathNamespace: string | null;
  watchPaths?: Array<string> | null | undefined;
  enableSubmodules: boolean;
};

/** @internal */
export const ApplicationSaveGitlabProviderRequest$outboundSchema: z.ZodType<
  ApplicationSaveGitlabProviderRequest$Outbound,
  z.ZodTypeDef,
  ApplicationSaveGitlabProviderRequest
> = z.object({
  applicationId: z.string(),
  gitlabBranch: z.nullable(z.string()),
  gitlabBuildPath: z.nullable(z.string()),
  gitlabOwner: z.nullable(z.string()),
  gitlabRepository: z.nullable(z.string()),
  gitlabId: z.nullable(z.string()),
  gitlabProjectId: z.nullable(z.number()),
  gitlabPathNamespace: z.nullable(z.string()),
  watchPaths: z.nullable(z.array(z.string())).optional(),
  enableSubmodules: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationSaveGitlabProviderRequest$ {
  /** @deprecated use `ApplicationSaveGitlabProviderRequest$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationSaveGitlabProviderRequest$inboundSchema;
  /** @deprecated use `ApplicationSaveGitlabProviderRequest$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationSaveGitlabProviderRequest$outboundSchema;
  /** @deprecated use `ApplicationSaveGitlabProviderRequest$Outbound` instead. */
  export type Outbound = ApplicationSaveGitlabProviderRequest$Outbound;
}

export function applicationSaveGitlabProviderRequestToJSON(
  applicationSaveGitlabProviderRequest: ApplicationSaveGitlabProviderRequest,
): string {
  return JSON.stringify(
    ApplicationSaveGitlabProviderRequest$outboundSchema.parse(
      applicationSaveGitlabProviderRequest,
    ),
  );
}

export function applicationSaveGitlabProviderRequestFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationSaveGitlabProviderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationSaveGitlabProviderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationSaveGitlabProviderRequest' from JSON`,
  );
}

/** @internal */
export const ApplicationSaveGitlabProviderResponse$inboundSchema: z.ZodType<
  ApplicationSaveGitlabProviderResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.boolean()]);

/** @internal */
export type ApplicationSaveGitlabProviderResponse$Outbound =
  | models.ErrorT$Outbound
  | boolean;

/** @internal */
export const ApplicationSaveGitlabProviderResponse$outboundSchema: z.ZodType<
  ApplicationSaveGitlabProviderResponse$Outbound,
  z.ZodTypeDef,
  ApplicationSaveGitlabProviderResponse
> = z.union([models.ErrorT$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationSaveGitlabProviderResponse$ {
  /** @deprecated use `ApplicationSaveGitlabProviderResponse$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationSaveGitlabProviderResponse$inboundSchema;
  /** @deprecated use `ApplicationSaveGitlabProviderResponse$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationSaveGitlabProviderResponse$outboundSchema;
  /** @deprecated use `ApplicationSaveGitlabProviderResponse$Outbound` instead. */
  export type Outbound = ApplicationSaveGitlabProviderResponse$Outbound;
}

export function applicationSaveGitlabProviderResponseToJSON(
  applicationSaveGitlabProviderResponse: ApplicationSaveGitlabProviderResponse,
): string {
  return JSON.stringify(
    ApplicationSaveGitlabProviderResponse$outboundSchema.parse(
      applicationSaveGitlabProviderResponse,
    ),
  );
}

export function applicationSaveGitlabProviderResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationSaveGitlabProviderResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationSaveGitlabProviderResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationSaveGitlabProviderResponse' from JSON`,
  );
}
