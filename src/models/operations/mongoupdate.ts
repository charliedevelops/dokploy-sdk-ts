/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type MongoUpdateSecurity = {
  authorization: string;
};

export const MongoUpdateApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type MongoUpdateApplicationStatus = ClosedEnum<
  typeof MongoUpdateApplicationStatus
>;

export type MongoUpdateHealthCheckSwarm = {
  test?: Array<string> | undefined;
  interval?: number | undefined;
  timeout?: number | undefined;
  startPeriod?: number | undefined;
  retries?: number | undefined;
};

export type MongoUpdateRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type MongoUpdateSpread = {
  spreadDescriptor: string;
};

export type MongoUpdatePreference = {
  spread: MongoUpdateSpread;
};

export type MongoUpdatePlatform = {
  architecture: string;
  os: string;
};

export type MongoUpdatePlacementSwarm = {
  constraints?: Array<string> | undefined;
  preferences?: Array<MongoUpdatePreference> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<MongoUpdatePlatform> | undefined;
};

export type MongoUpdateUpdateConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type MongoUpdateRollbackConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type MongoUpdateReplicated = {
  replicas?: number | undefined;
};

export type MongoUpdateGlobal = {};

export type MongoUpdateReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type MongoUpdateGlobalJob = {};

export type MongoUpdateModeSwarm = {
  replicated?: MongoUpdateReplicated | undefined;
  global?: MongoUpdateGlobal | undefined;
  replicatedJob?: MongoUpdateReplicatedJob | undefined;
  globalJob?: MongoUpdateGlobalJob | undefined;
};

export type MongoUpdateDriverOpts = {};

export type MongoUpdateNetworkSwarm = {
  target?: string | undefined;
  aliases?: Array<string> | undefined;
  driverOpts?: MongoUpdateDriverOpts | undefined;
};

export type MongoUpdateRequest = {
  mongoId: string;
  name?: string | undefined;
  appName?: string | undefined;
  description?: string | null | undefined;
  databaseUser?: string | undefined;
  databasePassword?: string | undefined;
  dockerImage?: string | undefined;
  command?: string | null | undefined;
  env?: string | null | undefined;
  memoryReservation?: string | null | undefined;
  memoryLimit?: string | null | undefined;
  cpuReservation?: string | null | undefined;
  cpuLimit?: string | null | undefined;
  externalPort?: number | null | undefined;
  applicationStatus?: MongoUpdateApplicationStatus | undefined;
  healthCheckSwarm?: MongoUpdateHealthCheckSwarm | null | undefined;
  restartPolicySwarm?: MongoUpdateRestartPolicySwarm | null | undefined;
  placementSwarm?: MongoUpdatePlacementSwarm | null | undefined;
  updateConfigSwarm?: MongoUpdateUpdateConfigSwarm | null | undefined;
  rollbackConfigSwarm?: MongoUpdateRollbackConfigSwarm | null | undefined;
  modeSwarm?: MongoUpdateModeSwarm | null | undefined;
  labelsSwarm?: { [k: string]: string } | null | undefined;
  networkSwarm?: Array<MongoUpdateNetworkSwarm> | null | undefined;
  replicas?: number | undefined;
  createdAt?: string | undefined;
  environmentId?: string | undefined;
  replicaSets?: boolean | null | undefined;
};

export type MongoUpdateResponse = models.ErrorT | boolean;

/** @internal */
export const MongoUpdateSecurity$inboundSchema: z.ZodType<
  MongoUpdateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type MongoUpdateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const MongoUpdateSecurity$outboundSchema: z.ZodType<
  MongoUpdateSecurity$Outbound,
  z.ZodTypeDef,
  MongoUpdateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoUpdateSecurity$ {
  /** @deprecated use `MongoUpdateSecurity$inboundSchema` instead. */
  export const inboundSchema = MongoUpdateSecurity$inboundSchema;
  /** @deprecated use `MongoUpdateSecurity$outboundSchema` instead. */
  export const outboundSchema = MongoUpdateSecurity$outboundSchema;
  /** @deprecated use `MongoUpdateSecurity$Outbound` instead. */
  export type Outbound = MongoUpdateSecurity$Outbound;
}

export function mongoUpdateSecurityToJSON(
  mongoUpdateSecurity: MongoUpdateSecurity,
): string {
  return JSON.stringify(
    MongoUpdateSecurity$outboundSchema.parse(mongoUpdateSecurity),
  );
}

export function mongoUpdateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<MongoUpdateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoUpdateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoUpdateSecurity' from JSON`,
  );
}

/** @internal */
export const MongoUpdateApplicationStatus$inboundSchema: z.ZodNativeEnum<
  typeof MongoUpdateApplicationStatus
> = z.nativeEnum(MongoUpdateApplicationStatus);

/** @internal */
export const MongoUpdateApplicationStatus$outboundSchema: z.ZodNativeEnum<
  typeof MongoUpdateApplicationStatus
> = MongoUpdateApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoUpdateApplicationStatus$ {
  /** @deprecated use `MongoUpdateApplicationStatus$inboundSchema` instead. */
  export const inboundSchema = MongoUpdateApplicationStatus$inboundSchema;
  /** @deprecated use `MongoUpdateApplicationStatus$outboundSchema` instead. */
  export const outboundSchema = MongoUpdateApplicationStatus$outboundSchema;
}

/** @internal */
export const MongoUpdateHealthCheckSwarm$inboundSchema: z.ZodType<
  MongoUpdateHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Test: z.array(z.string()).optional(),
  Interval: z.number().optional(),
  Timeout: z.number().optional(),
  StartPeriod: z.number().optional(),
  Retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Test": "test",
    "Interval": "interval",
    "Timeout": "timeout",
    "StartPeriod": "startPeriod",
    "Retries": "retries",
  });
});

/** @internal */
export type MongoUpdateHealthCheckSwarm$Outbound = {
  Test?: Array<string> | undefined;
  Interval?: number | undefined;
  Timeout?: number | undefined;
  StartPeriod?: number | undefined;
  Retries?: number | undefined;
};

/** @internal */
export const MongoUpdateHealthCheckSwarm$outboundSchema: z.ZodType<
  MongoUpdateHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  MongoUpdateHealthCheckSwarm
> = z.object({
  test: z.array(z.string()).optional(),
  interval: z.number().optional(),
  timeout: z.number().optional(),
  startPeriod: z.number().optional(),
  retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    test: "Test",
    interval: "Interval",
    timeout: "Timeout",
    startPeriod: "StartPeriod",
    retries: "Retries",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoUpdateHealthCheckSwarm$ {
  /** @deprecated use `MongoUpdateHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoUpdateHealthCheckSwarm$inboundSchema;
  /** @deprecated use `MongoUpdateHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoUpdateHealthCheckSwarm$outboundSchema;
  /** @deprecated use `MongoUpdateHealthCheckSwarm$Outbound` instead. */
  export type Outbound = MongoUpdateHealthCheckSwarm$Outbound;
}

export function mongoUpdateHealthCheckSwarmToJSON(
  mongoUpdateHealthCheckSwarm: MongoUpdateHealthCheckSwarm,
): string {
  return JSON.stringify(
    MongoUpdateHealthCheckSwarm$outboundSchema.parse(
      mongoUpdateHealthCheckSwarm,
    ),
  );
}

export function mongoUpdateHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoUpdateHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoUpdateHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoUpdateHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const MongoUpdateRestartPolicySwarm$inboundSchema: z.ZodType<
  MongoUpdateRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type MongoUpdateRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const MongoUpdateRestartPolicySwarm$outboundSchema: z.ZodType<
  MongoUpdateRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  MongoUpdateRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoUpdateRestartPolicySwarm$ {
  /** @deprecated use `MongoUpdateRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema = MongoUpdateRestartPolicySwarm$inboundSchema;
  /** @deprecated use `MongoUpdateRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema = MongoUpdateRestartPolicySwarm$outboundSchema;
  /** @deprecated use `MongoUpdateRestartPolicySwarm$Outbound` instead. */
  export type Outbound = MongoUpdateRestartPolicySwarm$Outbound;
}

export function mongoUpdateRestartPolicySwarmToJSON(
  mongoUpdateRestartPolicySwarm: MongoUpdateRestartPolicySwarm,
): string {
  return JSON.stringify(
    MongoUpdateRestartPolicySwarm$outboundSchema.parse(
      mongoUpdateRestartPolicySwarm,
    ),
  );
}

export function mongoUpdateRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoUpdateRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoUpdateRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoUpdateRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const MongoUpdateSpread$inboundSchema: z.ZodType<
  MongoUpdateSpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type MongoUpdateSpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const MongoUpdateSpread$outboundSchema: z.ZodType<
  MongoUpdateSpread$Outbound,
  z.ZodTypeDef,
  MongoUpdateSpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoUpdateSpread$ {
  /** @deprecated use `MongoUpdateSpread$inboundSchema` instead. */
  export const inboundSchema = MongoUpdateSpread$inboundSchema;
  /** @deprecated use `MongoUpdateSpread$outboundSchema` instead. */
  export const outboundSchema = MongoUpdateSpread$outboundSchema;
  /** @deprecated use `MongoUpdateSpread$Outbound` instead. */
  export type Outbound = MongoUpdateSpread$Outbound;
}

export function mongoUpdateSpreadToJSON(
  mongoUpdateSpread: MongoUpdateSpread,
): string {
  return JSON.stringify(
    MongoUpdateSpread$outboundSchema.parse(mongoUpdateSpread),
  );
}

export function mongoUpdateSpreadFromJSON(
  jsonString: string,
): SafeParseResult<MongoUpdateSpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoUpdateSpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoUpdateSpread' from JSON`,
  );
}

/** @internal */
export const MongoUpdatePreference$inboundSchema: z.ZodType<
  MongoUpdatePreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => MongoUpdateSpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type MongoUpdatePreference$Outbound = {
  Spread: MongoUpdateSpread$Outbound;
};

/** @internal */
export const MongoUpdatePreference$outboundSchema: z.ZodType<
  MongoUpdatePreference$Outbound,
  z.ZodTypeDef,
  MongoUpdatePreference
> = z.object({
  spread: z.lazy(() => MongoUpdateSpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoUpdatePreference$ {
  /** @deprecated use `MongoUpdatePreference$inboundSchema` instead. */
  export const inboundSchema = MongoUpdatePreference$inboundSchema;
  /** @deprecated use `MongoUpdatePreference$outboundSchema` instead. */
  export const outboundSchema = MongoUpdatePreference$outboundSchema;
  /** @deprecated use `MongoUpdatePreference$Outbound` instead. */
  export type Outbound = MongoUpdatePreference$Outbound;
}

export function mongoUpdatePreferenceToJSON(
  mongoUpdatePreference: MongoUpdatePreference,
): string {
  return JSON.stringify(
    MongoUpdatePreference$outboundSchema.parse(mongoUpdatePreference),
  );
}

export function mongoUpdatePreferenceFromJSON(
  jsonString: string,
): SafeParseResult<MongoUpdatePreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoUpdatePreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoUpdatePreference' from JSON`,
  );
}

/** @internal */
export const MongoUpdatePlatform$inboundSchema: z.ZodType<
  MongoUpdatePlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type MongoUpdatePlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const MongoUpdatePlatform$outboundSchema: z.ZodType<
  MongoUpdatePlatform$Outbound,
  z.ZodTypeDef,
  MongoUpdatePlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoUpdatePlatform$ {
  /** @deprecated use `MongoUpdatePlatform$inboundSchema` instead. */
  export const inboundSchema = MongoUpdatePlatform$inboundSchema;
  /** @deprecated use `MongoUpdatePlatform$outboundSchema` instead. */
  export const outboundSchema = MongoUpdatePlatform$outboundSchema;
  /** @deprecated use `MongoUpdatePlatform$Outbound` instead. */
  export type Outbound = MongoUpdatePlatform$Outbound;
}

export function mongoUpdatePlatformToJSON(
  mongoUpdatePlatform: MongoUpdatePlatform,
): string {
  return JSON.stringify(
    MongoUpdatePlatform$outboundSchema.parse(mongoUpdatePlatform),
  );
}

export function mongoUpdatePlatformFromJSON(
  jsonString: string,
): SafeParseResult<MongoUpdatePlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoUpdatePlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoUpdatePlatform' from JSON`,
  );
}

/** @internal */
export const MongoUpdatePlacementSwarm$inboundSchema: z.ZodType<
  MongoUpdatePlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  Preferences: z.array(z.lazy(() => MongoUpdatePreference$inboundSchema))
    .optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => MongoUpdatePlatform$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "Preferences": "preferences",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
  });
});

/** @internal */
export type MongoUpdatePlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  Preferences?: Array<MongoUpdatePreference$Outbound> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<MongoUpdatePlatform$Outbound> | undefined;
};

/** @internal */
export const MongoUpdatePlacementSwarm$outboundSchema: z.ZodType<
  MongoUpdatePlacementSwarm$Outbound,
  z.ZodTypeDef,
  MongoUpdatePlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  preferences: z.array(z.lazy(() => MongoUpdatePreference$outboundSchema))
    .optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => MongoUpdatePlatform$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    preferences: "Preferences",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoUpdatePlacementSwarm$ {
  /** @deprecated use `MongoUpdatePlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoUpdatePlacementSwarm$inboundSchema;
  /** @deprecated use `MongoUpdatePlacementSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoUpdatePlacementSwarm$outboundSchema;
  /** @deprecated use `MongoUpdatePlacementSwarm$Outbound` instead. */
  export type Outbound = MongoUpdatePlacementSwarm$Outbound;
}

export function mongoUpdatePlacementSwarmToJSON(
  mongoUpdatePlacementSwarm: MongoUpdatePlacementSwarm,
): string {
  return JSON.stringify(
    MongoUpdatePlacementSwarm$outboundSchema.parse(mongoUpdatePlacementSwarm),
  );
}

export function mongoUpdatePlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoUpdatePlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoUpdatePlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoUpdatePlacementSwarm' from JSON`,
  );
}

/** @internal */
export const MongoUpdateUpdateConfigSwarm$inboundSchema: z.ZodType<
  MongoUpdateUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type MongoUpdateUpdateConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const MongoUpdateUpdateConfigSwarm$outboundSchema: z.ZodType<
  MongoUpdateUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  MongoUpdateUpdateConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoUpdateUpdateConfigSwarm$ {
  /** @deprecated use `MongoUpdateUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoUpdateUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `MongoUpdateUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoUpdateUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `MongoUpdateUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = MongoUpdateUpdateConfigSwarm$Outbound;
}

export function mongoUpdateUpdateConfigSwarmToJSON(
  mongoUpdateUpdateConfigSwarm: MongoUpdateUpdateConfigSwarm,
): string {
  return JSON.stringify(
    MongoUpdateUpdateConfigSwarm$outboundSchema.parse(
      mongoUpdateUpdateConfigSwarm,
    ),
  );
}

export function mongoUpdateUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoUpdateUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoUpdateUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoUpdateUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MongoUpdateRollbackConfigSwarm$inboundSchema: z.ZodType<
  MongoUpdateRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type MongoUpdateRollbackConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const MongoUpdateRollbackConfigSwarm$outboundSchema: z.ZodType<
  MongoUpdateRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  MongoUpdateRollbackConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoUpdateRollbackConfigSwarm$ {
  /** @deprecated use `MongoUpdateRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoUpdateRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `MongoUpdateRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoUpdateRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `MongoUpdateRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = MongoUpdateRollbackConfigSwarm$Outbound;
}

export function mongoUpdateRollbackConfigSwarmToJSON(
  mongoUpdateRollbackConfigSwarm: MongoUpdateRollbackConfigSwarm,
): string {
  return JSON.stringify(
    MongoUpdateRollbackConfigSwarm$outboundSchema.parse(
      mongoUpdateRollbackConfigSwarm,
    ),
  );
}

export function mongoUpdateRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoUpdateRollbackConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoUpdateRollbackConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoUpdateRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MongoUpdateReplicated$inboundSchema: z.ZodType<
  MongoUpdateReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type MongoUpdateReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const MongoUpdateReplicated$outboundSchema: z.ZodType<
  MongoUpdateReplicated$Outbound,
  z.ZodTypeDef,
  MongoUpdateReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoUpdateReplicated$ {
  /** @deprecated use `MongoUpdateReplicated$inboundSchema` instead. */
  export const inboundSchema = MongoUpdateReplicated$inboundSchema;
  /** @deprecated use `MongoUpdateReplicated$outboundSchema` instead. */
  export const outboundSchema = MongoUpdateReplicated$outboundSchema;
  /** @deprecated use `MongoUpdateReplicated$Outbound` instead. */
  export type Outbound = MongoUpdateReplicated$Outbound;
}

export function mongoUpdateReplicatedToJSON(
  mongoUpdateReplicated: MongoUpdateReplicated,
): string {
  return JSON.stringify(
    MongoUpdateReplicated$outboundSchema.parse(mongoUpdateReplicated),
  );
}

export function mongoUpdateReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<MongoUpdateReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoUpdateReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoUpdateReplicated' from JSON`,
  );
}

/** @internal */
export const MongoUpdateGlobal$inboundSchema: z.ZodType<
  MongoUpdateGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MongoUpdateGlobal$Outbound = {};

/** @internal */
export const MongoUpdateGlobal$outboundSchema: z.ZodType<
  MongoUpdateGlobal$Outbound,
  z.ZodTypeDef,
  MongoUpdateGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoUpdateGlobal$ {
  /** @deprecated use `MongoUpdateGlobal$inboundSchema` instead. */
  export const inboundSchema = MongoUpdateGlobal$inboundSchema;
  /** @deprecated use `MongoUpdateGlobal$outboundSchema` instead. */
  export const outboundSchema = MongoUpdateGlobal$outboundSchema;
  /** @deprecated use `MongoUpdateGlobal$Outbound` instead. */
  export type Outbound = MongoUpdateGlobal$Outbound;
}

export function mongoUpdateGlobalToJSON(
  mongoUpdateGlobal: MongoUpdateGlobal,
): string {
  return JSON.stringify(
    MongoUpdateGlobal$outboundSchema.parse(mongoUpdateGlobal),
  );
}

export function mongoUpdateGlobalFromJSON(
  jsonString: string,
): SafeParseResult<MongoUpdateGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoUpdateGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoUpdateGlobal' from JSON`,
  );
}

/** @internal */
export const MongoUpdateReplicatedJob$inboundSchema: z.ZodType<
  MongoUpdateReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type MongoUpdateReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const MongoUpdateReplicatedJob$outboundSchema: z.ZodType<
  MongoUpdateReplicatedJob$Outbound,
  z.ZodTypeDef,
  MongoUpdateReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoUpdateReplicatedJob$ {
  /** @deprecated use `MongoUpdateReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = MongoUpdateReplicatedJob$inboundSchema;
  /** @deprecated use `MongoUpdateReplicatedJob$outboundSchema` instead. */
  export const outboundSchema = MongoUpdateReplicatedJob$outboundSchema;
  /** @deprecated use `MongoUpdateReplicatedJob$Outbound` instead. */
  export type Outbound = MongoUpdateReplicatedJob$Outbound;
}

export function mongoUpdateReplicatedJobToJSON(
  mongoUpdateReplicatedJob: MongoUpdateReplicatedJob,
): string {
  return JSON.stringify(
    MongoUpdateReplicatedJob$outboundSchema.parse(mongoUpdateReplicatedJob),
  );
}

export function mongoUpdateReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<MongoUpdateReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoUpdateReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoUpdateReplicatedJob' from JSON`,
  );
}

/** @internal */
export const MongoUpdateGlobalJob$inboundSchema: z.ZodType<
  MongoUpdateGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MongoUpdateGlobalJob$Outbound = {};

/** @internal */
export const MongoUpdateGlobalJob$outboundSchema: z.ZodType<
  MongoUpdateGlobalJob$Outbound,
  z.ZodTypeDef,
  MongoUpdateGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoUpdateGlobalJob$ {
  /** @deprecated use `MongoUpdateGlobalJob$inboundSchema` instead. */
  export const inboundSchema = MongoUpdateGlobalJob$inboundSchema;
  /** @deprecated use `MongoUpdateGlobalJob$outboundSchema` instead. */
  export const outboundSchema = MongoUpdateGlobalJob$outboundSchema;
  /** @deprecated use `MongoUpdateGlobalJob$Outbound` instead. */
  export type Outbound = MongoUpdateGlobalJob$Outbound;
}

export function mongoUpdateGlobalJobToJSON(
  mongoUpdateGlobalJob: MongoUpdateGlobalJob,
): string {
  return JSON.stringify(
    MongoUpdateGlobalJob$outboundSchema.parse(mongoUpdateGlobalJob),
  );
}

export function mongoUpdateGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<MongoUpdateGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoUpdateGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoUpdateGlobalJob' from JSON`,
  );
}

/** @internal */
export const MongoUpdateModeSwarm$inboundSchema: z.ZodType<
  MongoUpdateModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicated: z.lazy(() => MongoUpdateReplicated$inboundSchema).optional(),
  Global: z.lazy(() => MongoUpdateGlobal$inboundSchema).optional(),
  ReplicatedJob: z.lazy(() => MongoUpdateReplicatedJob$inboundSchema)
    .optional(),
  GlobalJob: z.lazy(() => MongoUpdateGlobalJob$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicated": "replicated",
    "Global": "global",
    "ReplicatedJob": "replicatedJob",
    "GlobalJob": "globalJob",
  });
});

/** @internal */
export type MongoUpdateModeSwarm$Outbound = {
  Replicated?: MongoUpdateReplicated$Outbound | undefined;
  Global?: MongoUpdateGlobal$Outbound | undefined;
  ReplicatedJob?: MongoUpdateReplicatedJob$Outbound | undefined;
  GlobalJob?: MongoUpdateGlobalJob$Outbound | undefined;
};

/** @internal */
export const MongoUpdateModeSwarm$outboundSchema: z.ZodType<
  MongoUpdateModeSwarm$Outbound,
  z.ZodTypeDef,
  MongoUpdateModeSwarm
> = z.object({
  replicated: z.lazy(() => MongoUpdateReplicated$outboundSchema).optional(),
  global: z.lazy(() => MongoUpdateGlobal$outboundSchema).optional(),
  replicatedJob: z.lazy(() => MongoUpdateReplicatedJob$outboundSchema)
    .optional(),
  globalJob: z.lazy(() => MongoUpdateGlobalJob$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    replicated: "Replicated",
    global: "Global",
    replicatedJob: "ReplicatedJob",
    globalJob: "GlobalJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoUpdateModeSwarm$ {
  /** @deprecated use `MongoUpdateModeSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoUpdateModeSwarm$inboundSchema;
  /** @deprecated use `MongoUpdateModeSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoUpdateModeSwarm$outboundSchema;
  /** @deprecated use `MongoUpdateModeSwarm$Outbound` instead. */
  export type Outbound = MongoUpdateModeSwarm$Outbound;
}

export function mongoUpdateModeSwarmToJSON(
  mongoUpdateModeSwarm: MongoUpdateModeSwarm,
): string {
  return JSON.stringify(
    MongoUpdateModeSwarm$outboundSchema.parse(mongoUpdateModeSwarm),
  );
}

export function mongoUpdateModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoUpdateModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoUpdateModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoUpdateModeSwarm' from JSON`,
  );
}

/** @internal */
export const MongoUpdateDriverOpts$inboundSchema: z.ZodType<
  MongoUpdateDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MongoUpdateDriverOpts$Outbound = {};

/** @internal */
export const MongoUpdateDriverOpts$outboundSchema: z.ZodType<
  MongoUpdateDriverOpts$Outbound,
  z.ZodTypeDef,
  MongoUpdateDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoUpdateDriverOpts$ {
  /** @deprecated use `MongoUpdateDriverOpts$inboundSchema` instead. */
  export const inboundSchema = MongoUpdateDriverOpts$inboundSchema;
  /** @deprecated use `MongoUpdateDriverOpts$outboundSchema` instead. */
  export const outboundSchema = MongoUpdateDriverOpts$outboundSchema;
  /** @deprecated use `MongoUpdateDriverOpts$Outbound` instead. */
  export type Outbound = MongoUpdateDriverOpts$Outbound;
}

export function mongoUpdateDriverOptsToJSON(
  mongoUpdateDriverOpts: MongoUpdateDriverOpts,
): string {
  return JSON.stringify(
    MongoUpdateDriverOpts$outboundSchema.parse(mongoUpdateDriverOpts),
  );
}

export function mongoUpdateDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<MongoUpdateDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoUpdateDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoUpdateDriverOpts' from JSON`,
  );
}

/** @internal */
export const MongoUpdateNetworkSwarm$inboundSchema: z.ZodType<
  MongoUpdateNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Target: z.string().optional(),
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => MongoUpdateDriverOpts$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Target": "target",
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
  });
});

/** @internal */
export type MongoUpdateNetworkSwarm$Outbound = {
  Target?: string | undefined;
  Aliases?: Array<string> | undefined;
  DriverOpts?: MongoUpdateDriverOpts$Outbound | undefined;
};

/** @internal */
export const MongoUpdateNetworkSwarm$outboundSchema: z.ZodType<
  MongoUpdateNetworkSwarm$Outbound,
  z.ZodTypeDef,
  MongoUpdateNetworkSwarm
> = z.object({
  target: z.string().optional(),
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => MongoUpdateDriverOpts$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    target: "Target",
    aliases: "Aliases",
    driverOpts: "DriverOpts",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoUpdateNetworkSwarm$ {
  /** @deprecated use `MongoUpdateNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoUpdateNetworkSwarm$inboundSchema;
  /** @deprecated use `MongoUpdateNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoUpdateNetworkSwarm$outboundSchema;
  /** @deprecated use `MongoUpdateNetworkSwarm$Outbound` instead. */
  export type Outbound = MongoUpdateNetworkSwarm$Outbound;
}

export function mongoUpdateNetworkSwarmToJSON(
  mongoUpdateNetworkSwarm: MongoUpdateNetworkSwarm,
): string {
  return JSON.stringify(
    MongoUpdateNetworkSwarm$outboundSchema.parse(mongoUpdateNetworkSwarm),
  );
}

export function mongoUpdateNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoUpdateNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoUpdateNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoUpdateNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const MongoUpdateRequest$inboundSchema: z.ZodType<
  MongoUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mongoId: z.string(),
  name: z.string().optional(),
  appName: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  databaseUser: z.string().optional(),
  databasePassword: z.string().optional(),
  dockerImage: z.string().default("mongo:15"),
  command: z.nullable(z.string()).optional(),
  env: z.nullable(z.string()).optional(),
  memoryReservation: z.nullable(z.string()).optional(),
  memoryLimit: z.nullable(z.string()).optional(),
  cpuReservation: z.nullable(z.string()).optional(),
  cpuLimit: z.nullable(z.string()).optional(),
  externalPort: z.nullable(z.number()).optional(),
  applicationStatus: MongoUpdateApplicationStatus$inboundSchema.optional(),
  healthCheckSwarm: z.nullable(
    z.lazy(() => MongoUpdateHealthCheckSwarm$inboundSchema),
  ).optional(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MongoUpdateRestartPolicySwarm$inboundSchema),
  ).optional(),
  placementSwarm: z.nullable(
    z.lazy(() => MongoUpdatePlacementSwarm$inboundSchema),
  ).optional(),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MongoUpdateUpdateConfigSwarm$inboundSchema),
  ).optional(),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MongoUpdateRollbackConfigSwarm$inboundSchema),
  ).optional(),
  modeSwarm: z.nullable(z.lazy(() => MongoUpdateModeSwarm$inboundSchema))
    .optional(),
  labelsSwarm: z.nullable(z.record(z.string())).optional(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MongoUpdateNetworkSwarm$inboundSchema)),
  ).optional(),
  replicas: z.number().optional(),
  createdAt: z.string().optional(),
  environmentId: z.string().optional(),
  replicaSets: z.nullable(z.boolean().default(false)),
});

/** @internal */
export type MongoUpdateRequest$Outbound = {
  mongoId: string;
  name?: string | undefined;
  appName?: string | undefined;
  description?: string | null | undefined;
  databaseUser?: string | undefined;
  databasePassword?: string | undefined;
  dockerImage: string;
  command?: string | null | undefined;
  env?: string | null | undefined;
  memoryReservation?: string | null | undefined;
  memoryLimit?: string | null | undefined;
  cpuReservation?: string | null | undefined;
  cpuLimit?: string | null | undefined;
  externalPort?: number | null | undefined;
  applicationStatus?: string | undefined;
  healthCheckSwarm?: MongoUpdateHealthCheckSwarm$Outbound | null | undefined;
  restartPolicySwarm?:
    | MongoUpdateRestartPolicySwarm$Outbound
    | null
    | undefined;
  placementSwarm?: MongoUpdatePlacementSwarm$Outbound | null | undefined;
  updateConfigSwarm?: MongoUpdateUpdateConfigSwarm$Outbound | null | undefined;
  rollbackConfigSwarm?:
    | MongoUpdateRollbackConfigSwarm$Outbound
    | null
    | undefined;
  modeSwarm?: MongoUpdateModeSwarm$Outbound | null | undefined;
  labelsSwarm?: { [k: string]: string } | null | undefined;
  networkSwarm?: Array<MongoUpdateNetworkSwarm$Outbound> | null | undefined;
  replicas?: number | undefined;
  createdAt?: string | undefined;
  environmentId?: string | undefined;
  replicaSets: boolean | null;
};

/** @internal */
export const MongoUpdateRequest$outboundSchema: z.ZodType<
  MongoUpdateRequest$Outbound,
  z.ZodTypeDef,
  MongoUpdateRequest
> = z.object({
  mongoId: z.string(),
  name: z.string().optional(),
  appName: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  databaseUser: z.string().optional(),
  databasePassword: z.string().optional(),
  dockerImage: z.string().default("mongo:15"),
  command: z.nullable(z.string()).optional(),
  env: z.nullable(z.string()).optional(),
  memoryReservation: z.nullable(z.string()).optional(),
  memoryLimit: z.nullable(z.string()).optional(),
  cpuReservation: z.nullable(z.string()).optional(),
  cpuLimit: z.nullable(z.string()).optional(),
  externalPort: z.nullable(z.number()).optional(),
  applicationStatus: MongoUpdateApplicationStatus$outboundSchema.optional(),
  healthCheckSwarm: z.nullable(
    z.lazy(() => MongoUpdateHealthCheckSwarm$outboundSchema),
  ).optional(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MongoUpdateRestartPolicySwarm$outboundSchema),
  ).optional(),
  placementSwarm: z.nullable(
    z.lazy(() => MongoUpdatePlacementSwarm$outboundSchema),
  ).optional(),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MongoUpdateUpdateConfigSwarm$outboundSchema),
  ).optional(),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MongoUpdateRollbackConfigSwarm$outboundSchema),
  ).optional(),
  modeSwarm: z.nullable(z.lazy(() => MongoUpdateModeSwarm$outboundSchema))
    .optional(),
  labelsSwarm: z.nullable(z.record(z.string())).optional(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MongoUpdateNetworkSwarm$outboundSchema)),
  ).optional(),
  replicas: z.number().optional(),
  createdAt: z.string().optional(),
  environmentId: z.string().optional(),
  replicaSets: z.nullable(z.boolean().default(false)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoUpdateRequest$ {
  /** @deprecated use `MongoUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = MongoUpdateRequest$inboundSchema;
  /** @deprecated use `MongoUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = MongoUpdateRequest$outboundSchema;
  /** @deprecated use `MongoUpdateRequest$Outbound` instead. */
  export type Outbound = MongoUpdateRequest$Outbound;
}

export function mongoUpdateRequestToJSON(
  mongoUpdateRequest: MongoUpdateRequest,
): string {
  return JSON.stringify(
    MongoUpdateRequest$outboundSchema.parse(mongoUpdateRequest),
  );
}

export function mongoUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<MongoUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoUpdateRequest' from JSON`,
  );
}

/** @internal */
export const MongoUpdateResponse$inboundSchema: z.ZodType<
  MongoUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.boolean()]);

/** @internal */
export type MongoUpdateResponse$Outbound = models.ErrorT$Outbound | boolean;

/** @internal */
export const MongoUpdateResponse$outboundSchema: z.ZodType<
  MongoUpdateResponse$Outbound,
  z.ZodTypeDef,
  MongoUpdateResponse
> = z.union([models.ErrorT$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoUpdateResponse$ {
  /** @deprecated use `MongoUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = MongoUpdateResponse$inboundSchema;
  /** @deprecated use `MongoUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = MongoUpdateResponse$outboundSchema;
  /** @deprecated use `MongoUpdateResponse$Outbound` instead. */
  export type Outbound = MongoUpdateResponse$Outbound;
}

export function mongoUpdateResponseToJSON(
  mongoUpdateResponse: MongoUpdateResponse,
): string {
  return JSON.stringify(
    MongoUpdateResponse$outboundSchema.parse(mongoUpdateResponse),
  );
}

export function mongoUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<MongoUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoUpdateResponse' from JSON`,
  );
}
