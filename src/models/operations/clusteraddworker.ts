/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ClusterAddWorkerSecurity = {
  authorization: string;
};

export type ClusterAddWorkerRequest = {
  serverId?: string | undefined;
};

/** @internal */
export const ClusterAddWorkerSecurity$inboundSchema: z.ZodType<
  ClusterAddWorkerSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type ClusterAddWorkerSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const ClusterAddWorkerSecurity$outboundSchema: z.ZodType<
  ClusterAddWorkerSecurity$Outbound,
  z.ZodTypeDef,
  ClusterAddWorkerSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClusterAddWorkerSecurity$ {
  /** @deprecated use `ClusterAddWorkerSecurity$inboundSchema` instead. */
  export const inboundSchema = ClusterAddWorkerSecurity$inboundSchema;
  /** @deprecated use `ClusterAddWorkerSecurity$outboundSchema` instead. */
  export const outboundSchema = ClusterAddWorkerSecurity$outboundSchema;
  /** @deprecated use `ClusterAddWorkerSecurity$Outbound` instead. */
  export type Outbound = ClusterAddWorkerSecurity$Outbound;
}

export function clusterAddWorkerSecurityToJSON(
  clusterAddWorkerSecurity: ClusterAddWorkerSecurity,
): string {
  return JSON.stringify(
    ClusterAddWorkerSecurity$outboundSchema.parse(clusterAddWorkerSecurity),
  );
}

export function clusterAddWorkerSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ClusterAddWorkerSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClusterAddWorkerSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClusterAddWorkerSecurity' from JSON`,
  );
}

/** @internal */
export const ClusterAddWorkerRequest$inboundSchema: z.ZodType<
  ClusterAddWorkerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serverId: z.string().optional(),
});

/** @internal */
export type ClusterAddWorkerRequest$Outbound = {
  serverId?: string | undefined;
};

/** @internal */
export const ClusterAddWorkerRequest$outboundSchema: z.ZodType<
  ClusterAddWorkerRequest$Outbound,
  z.ZodTypeDef,
  ClusterAddWorkerRequest
> = z.object({
  serverId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClusterAddWorkerRequest$ {
  /** @deprecated use `ClusterAddWorkerRequest$inboundSchema` instead. */
  export const inboundSchema = ClusterAddWorkerRequest$inboundSchema;
  /** @deprecated use `ClusterAddWorkerRequest$outboundSchema` instead. */
  export const outboundSchema = ClusterAddWorkerRequest$outboundSchema;
  /** @deprecated use `ClusterAddWorkerRequest$Outbound` instead. */
  export type Outbound = ClusterAddWorkerRequest$Outbound;
}

export function clusterAddWorkerRequestToJSON(
  clusterAddWorkerRequest: ClusterAddWorkerRequest,
): string {
  return JSON.stringify(
    ClusterAddWorkerRequest$outboundSchema.parse(clusterAddWorkerRequest),
  );
}

export function clusterAddWorkerRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClusterAddWorkerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClusterAddWorkerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClusterAddWorkerRequest' from JSON`,
  );
}
