/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type BitbucketOneSecurity = {
  authorization: string;
};

export type BitbucketOneRequest = {
  bitbucketId: string;
};

export const BitbucketOneProviderType = {
  Github: "github",
  Gitlab: "gitlab",
  Bitbucket: "bitbucket",
  Gitea: "gitea",
} as const;
export type BitbucketOneProviderType = ClosedEnum<
  typeof BitbucketOneProviderType
>;

export type BitbucketOneGitProvider = {
  gitProviderId: string;
  name: string;
  providerType: BitbucketOneProviderType;
  createdAt: string;
  organizationId: string;
  userId: string;
};

/**
 * Successful response
 */
export type BitbucketOneResponseBody = {
  bitbucketId: string;
  bitbucketUsername: string | null;
  appPassword: string | null;
  bitbucketWorkspaceName: string | null;
  gitProviderId: string;
  gitProvider: BitbucketOneGitProvider;
};

export type BitbucketOneResponse = BitbucketOneResponseBody | models.ErrorT;

/** @internal */
export const BitbucketOneSecurity$inboundSchema: z.ZodType<
  BitbucketOneSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type BitbucketOneSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const BitbucketOneSecurity$outboundSchema: z.ZodType<
  BitbucketOneSecurity$Outbound,
  z.ZodTypeDef,
  BitbucketOneSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BitbucketOneSecurity$ {
  /** @deprecated use `BitbucketOneSecurity$inboundSchema` instead. */
  export const inboundSchema = BitbucketOneSecurity$inboundSchema;
  /** @deprecated use `BitbucketOneSecurity$outboundSchema` instead. */
  export const outboundSchema = BitbucketOneSecurity$outboundSchema;
  /** @deprecated use `BitbucketOneSecurity$Outbound` instead. */
  export type Outbound = BitbucketOneSecurity$Outbound;
}

export function bitbucketOneSecurityToJSON(
  bitbucketOneSecurity: BitbucketOneSecurity,
): string {
  return JSON.stringify(
    BitbucketOneSecurity$outboundSchema.parse(bitbucketOneSecurity),
  );
}

export function bitbucketOneSecurityFromJSON(
  jsonString: string,
): SafeParseResult<BitbucketOneSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BitbucketOneSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BitbucketOneSecurity' from JSON`,
  );
}

/** @internal */
export const BitbucketOneRequest$inboundSchema: z.ZodType<
  BitbucketOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  bitbucketId: z.string(),
});

/** @internal */
export type BitbucketOneRequest$Outbound = {
  bitbucketId: string;
};

/** @internal */
export const BitbucketOneRequest$outboundSchema: z.ZodType<
  BitbucketOneRequest$Outbound,
  z.ZodTypeDef,
  BitbucketOneRequest
> = z.object({
  bitbucketId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BitbucketOneRequest$ {
  /** @deprecated use `BitbucketOneRequest$inboundSchema` instead. */
  export const inboundSchema = BitbucketOneRequest$inboundSchema;
  /** @deprecated use `BitbucketOneRequest$outboundSchema` instead. */
  export const outboundSchema = BitbucketOneRequest$outboundSchema;
  /** @deprecated use `BitbucketOneRequest$Outbound` instead. */
  export type Outbound = BitbucketOneRequest$Outbound;
}

export function bitbucketOneRequestToJSON(
  bitbucketOneRequest: BitbucketOneRequest,
): string {
  return JSON.stringify(
    BitbucketOneRequest$outboundSchema.parse(bitbucketOneRequest),
  );
}

export function bitbucketOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<BitbucketOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BitbucketOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BitbucketOneRequest' from JSON`,
  );
}

/** @internal */
export const BitbucketOneProviderType$inboundSchema: z.ZodNativeEnum<
  typeof BitbucketOneProviderType
> = z.nativeEnum(BitbucketOneProviderType);

/** @internal */
export const BitbucketOneProviderType$outboundSchema: z.ZodNativeEnum<
  typeof BitbucketOneProviderType
> = BitbucketOneProviderType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BitbucketOneProviderType$ {
  /** @deprecated use `BitbucketOneProviderType$inboundSchema` instead. */
  export const inboundSchema = BitbucketOneProviderType$inboundSchema;
  /** @deprecated use `BitbucketOneProviderType$outboundSchema` instead. */
  export const outboundSchema = BitbucketOneProviderType$outboundSchema;
}

/** @internal */
export const BitbucketOneGitProvider$inboundSchema: z.ZodType<
  BitbucketOneGitProvider,
  z.ZodTypeDef,
  unknown
> = z.object({
  gitProviderId: z.string(),
  name: z.string(),
  providerType: BitbucketOneProviderType$inboundSchema,
  createdAt: z.string(),
  organizationId: z.string(),
  userId: z.string(),
});

/** @internal */
export type BitbucketOneGitProvider$Outbound = {
  gitProviderId: string;
  name: string;
  providerType: string;
  createdAt: string;
  organizationId: string;
  userId: string;
};

/** @internal */
export const BitbucketOneGitProvider$outboundSchema: z.ZodType<
  BitbucketOneGitProvider$Outbound,
  z.ZodTypeDef,
  BitbucketOneGitProvider
> = z.object({
  gitProviderId: z.string(),
  name: z.string(),
  providerType: BitbucketOneProviderType$outboundSchema,
  createdAt: z.string(),
  organizationId: z.string(),
  userId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BitbucketOneGitProvider$ {
  /** @deprecated use `BitbucketOneGitProvider$inboundSchema` instead. */
  export const inboundSchema = BitbucketOneGitProvider$inboundSchema;
  /** @deprecated use `BitbucketOneGitProvider$outboundSchema` instead. */
  export const outboundSchema = BitbucketOneGitProvider$outboundSchema;
  /** @deprecated use `BitbucketOneGitProvider$Outbound` instead. */
  export type Outbound = BitbucketOneGitProvider$Outbound;
}

export function bitbucketOneGitProviderToJSON(
  bitbucketOneGitProvider: BitbucketOneGitProvider,
): string {
  return JSON.stringify(
    BitbucketOneGitProvider$outboundSchema.parse(bitbucketOneGitProvider),
  );
}

export function bitbucketOneGitProviderFromJSON(
  jsonString: string,
): SafeParseResult<BitbucketOneGitProvider, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BitbucketOneGitProvider$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BitbucketOneGitProvider' from JSON`,
  );
}

/** @internal */
export const BitbucketOneResponseBody$inboundSchema: z.ZodType<
  BitbucketOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  bitbucketId: z.string(),
  bitbucketUsername: z.nullable(z.string()),
  appPassword: z.nullable(z.string()),
  bitbucketWorkspaceName: z.nullable(z.string()),
  gitProviderId: z.string(),
  gitProvider: z.lazy(() => BitbucketOneGitProvider$inboundSchema),
});

/** @internal */
export type BitbucketOneResponseBody$Outbound = {
  bitbucketId: string;
  bitbucketUsername: string | null;
  appPassword: string | null;
  bitbucketWorkspaceName: string | null;
  gitProviderId: string;
  gitProvider: BitbucketOneGitProvider$Outbound;
};

/** @internal */
export const BitbucketOneResponseBody$outboundSchema: z.ZodType<
  BitbucketOneResponseBody$Outbound,
  z.ZodTypeDef,
  BitbucketOneResponseBody
> = z.object({
  bitbucketId: z.string(),
  bitbucketUsername: z.nullable(z.string()),
  appPassword: z.nullable(z.string()),
  bitbucketWorkspaceName: z.nullable(z.string()),
  gitProviderId: z.string(),
  gitProvider: z.lazy(() => BitbucketOneGitProvider$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BitbucketOneResponseBody$ {
  /** @deprecated use `BitbucketOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = BitbucketOneResponseBody$inboundSchema;
  /** @deprecated use `BitbucketOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = BitbucketOneResponseBody$outboundSchema;
  /** @deprecated use `BitbucketOneResponseBody$Outbound` instead. */
  export type Outbound = BitbucketOneResponseBody$Outbound;
}

export function bitbucketOneResponseBodyToJSON(
  bitbucketOneResponseBody: BitbucketOneResponseBody,
): string {
  return JSON.stringify(
    BitbucketOneResponseBody$outboundSchema.parse(bitbucketOneResponseBody),
  );
}

export function bitbucketOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<BitbucketOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BitbucketOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BitbucketOneResponseBody' from JSON`,
  );
}

/** @internal */
export const BitbucketOneResponse$inboundSchema: z.ZodType<
  BitbucketOneResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => BitbucketOneResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type BitbucketOneResponse$Outbound =
  | BitbucketOneResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const BitbucketOneResponse$outboundSchema: z.ZodType<
  BitbucketOneResponse$Outbound,
  z.ZodTypeDef,
  BitbucketOneResponse
> = z.union([
  z.lazy(() => BitbucketOneResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BitbucketOneResponse$ {
  /** @deprecated use `BitbucketOneResponse$inboundSchema` instead. */
  export const inboundSchema = BitbucketOneResponse$inboundSchema;
  /** @deprecated use `BitbucketOneResponse$outboundSchema` instead. */
  export const outboundSchema = BitbucketOneResponse$outboundSchema;
  /** @deprecated use `BitbucketOneResponse$Outbound` instead. */
  export type Outbound = BitbucketOneResponse$Outbound;
}

export function bitbucketOneResponseToJSON(
  bitbucketOneResponse: BitbucketOneResponse,
): string {
  return JSON.stringify(
    BitbucketOneResponse$outboundSchema.parse(bitbucketOneResponse),
  );
}

export function bitbucketOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<BitbucketOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BitbucketOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BitbucketOneResponse' from JSON`,
  );
}
