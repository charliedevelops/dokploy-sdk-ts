/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type RedisStartSecurity = {
  authorization: string;
};

export type RedisStartRequest = {
  redisId: string;
};

export const RedisStartApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type RedisStartApplicationStatus = ClosedEnum<
  typeof RedisStartApplicationStatus
>;

export type RedisStartHealthCheckSwarm = {
  test?: Array<string> | undefined;
  interval?: number | undefined;
  timeout?: number | undefined;
  startPeriod?: number | undefined;
  retries?: number | undefined;
};

export type RedisStartRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type RedisStartSpread = {
  spreadDescriptor: string;
};

export type RedisStartPreference = {
  spread: RedisStartSpread;
};

export type RedisStartPlatform = {
  architecture: string;
  os: string;
};

export type RedisStartPlacementSwarm = {
  constraints?: Array<string> | undefined;
  preferences?: Array<RedisStartPreference> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<RedisStartPlatform> | undefined;
};

export type RedisStartUpdateConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type RedisStartRollbackConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type RedisStartReplicated = {
  replicas?: number | undefined;
};

export type RedisStartGlobal = {};

export type RedisStartReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type RedisStartGlobalJob = {};

export type RedisStartModeSwarm = {
  replicated?: RedisStartReplicated | undefined;
  global?: RedisStartGlobal | undefined;
  replicatedJob?: RedisStartReplicatedJob | undefined;
  globalJob?: RedisStartGlobalJob | undefined;
};

export type RedisStartDriverOpts = {};

export type RedisStartNetworkSwarm = {
  target?: string | undefined;
  aliases?: Array<string> | undefined;
  driverOpts?: RedisStartDriverOpts | undefined;
};

export type RedisStartProject = {
  projectId: string;
  name: string;
  description: string | null;
  createdAt: string;
  organizationId: string;
  env: string;
};

export type RedisStartEnvironment = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
  project: RedisStartProject;
};

export const RedisStartType = {
  Bind: "bind",
  Volume: "volume",
  File: "file",
} as const;
export type RedisStartType = ClosedEnum<typeof RedisStartType>;

export const RedisStartServiceType = {
  Application: "application",
  Postgres: "postgres",
  Mysql: "mysql",
  Mariadb: "mariadb",
  Mongo: "mongo",
  Redis: "redis",
  Compose: "compose",
} as const;
export type RedisStartServiceType = ClosedEnum<typeof RedisStartServiceType>;

export type RedisStartMount = {
  mountId: string;
  type: RedisStartType;
  hostPath: string | null;
  volumeName: string | null;
  filePath: string | null;
  content: string | null;
  serviceType: RedisStartServiceType;
  mountPath: string;
  applicationId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mysqlId: string | null;
  redisId: string | null;
  composeId: string | null;
};

export const RedisStartServerStatus = {
  Active: "active",
  Inactive: "inactive",
} as const;
export type RedisStartServerStatus = ClosedEnum<typeof RedisStartServerStatus>;

export const RedisStartMetricsConfigEnum = {
  Null: "null",
} as const;
export type RedisStartMetricsConfigEnum = ClosedEnum<
  typeof RedisStartMetricsConfigEnum
>;

export type RedisStartMetricsConfigUnion1 =
  | string
  | number
  | boolean
  | RedisStartMetricsConfigEnum;

export type RedisStartMetricsConfigUnion2 =
  | string
  | number
  | boolean
  | RedisStartMetricsConfigEnum
  | Array<any>
  | { [k: string]: any };

export type RedisStartServer = {
  serverId: string;
  name: string;
  description: string | null;
  ipAddress: string;
  port: number;
  username: string;
  appName: string;
  enableDockerCleanup: boolean;
  createdAt: string;
  organizationId: string;
  serverStatus: RedisStartServerStatus;
  command: string;
  sshKeyId: string | null;
  metricsConfig:
    | string
    | number
    | boolean
    | RedisStartMetricsConfigEnum
    | Array<any>
    | { [k: string]: any };
};

/**
 * Successful response
 */
export type RedisStartResponseBody = {
  redisId: string;
  name: string;
  appName: string;
  description: string | null;
  databasePassword: string;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  externalPort: number | null;
  createdAt: string;
  applicationStatus: RedisStartApplicationStatus;
  healthCheckSwarm: RedisStartHealthCheckSwarm | null;
  restartPolicySwarm: RedisStartRestartPolicySwarm | null;
  placementSwarm: RedisStartPlacementSwarm | null;
  updateConfigSwarm: RedisStartUpdateConfigSwarm | null;
  rollbackConfigSwarm: RedisStartRollbackConfigSwarm | null;
  modeSwarm: RedisStartModeSwarm | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<RedisStartNetworkSwarm> | null;
  replicas: number;
  environmentId: string;
  serverId: string | null;
  environment: RedisStartEnvironment;
  mounts: Array<RedisStartMount>;
  server: RedisStartServer | null;
};

export type RedisStartResponse = RedisStartResponseBody | models.ErrorT;

/** @internal */
export const RedisStartSecurity$inboundSchema: z.ZodType<
  RedisStartSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type RedisStartSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const RedisStartSecurity$outboundSchema: z.ZodType<
  RedisStartSecurity$Outbound,
  z.ZodTypeDef,
  RedisStartSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartSecurity$ {
  /** @deprecated use `RedisStartSecurity$inboundSchema` instead. */
  export const inboundSchema = RedisStartSecurity$inboundSchema;
  /** @deprecated use `RedisStartSecurity$outboundSchema` instead. */
  export const outboundSchema = RedisStartSecurity$outboundSchema;
  /** @deprecated use `RedisStartSecurity$Outbound` instead. */
  export type Outbound = RedisStartSecurity$Outbound;
}

export function redisStartSecurityToJSON(
  redisStartSecurity: RedisStartSecurity,
): string {
  return JSON.stringify(
    RedisStartSecurity$outboundSchema.parse(redisStartSecurity),
  );
}

export function redisStartSecurityFromJSON(
  jsonString: string,
): SafeParseResult<RedisStartSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStartSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStartSecurity' from JSON`,
  );
}

/** @internal */
export const RedisStartRequest$inboundSchema: z.ZodType<
  RedisStartRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  redisId: z.string(),
});

/** @internal */
export type RedisStartRequest$Outbound = {
  redisId: string;
};

/** @internal */
export const RedisStartRequest$outboundSchema: z.ZodType<
  RedisStartRequest$Outbound,
  z.ZodTypeDef,
  RedisStartRequest
> = z.object({
  redisId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartRequest$ {
  /** @deprecated use `RedisStartRequest$inboundSchema` instead. */
  export const inboundSchema = RedisStartRequest$inboundSchema;
  /** @deprecated use `RedisStartRequest$outboundSchema` instead. */
  export const outboundSchema = RedisStartRequest$outboundSchema;
  /** @deprecated use `RedisStartRequest$Outbound` instead. */
  export type Outbound = RedisStartRequest$Outbound;
}

export function redisStartRequestToJSON(
  redisStartRequest: RedisStartRequest,
): string {
  return JSON.stringify(
    RedisStartRequest$outboundSchema.parse(redisStartRequest),
  );
}

export function redisStartRequestFromJSON(
  jsonString: string,
): SafeParseResult<RedisStartRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStartRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStartRequest' from JSON`,
  );
}

/** @internal */
export const RedisStartApplicationStatus$inboundSchema: z.ZodNativeEnum<
  typeof RedisStartApplicationStatus
> = z.nativeEnum(RedisStartApplicationStatus);

/** @internal */
export const RedisStartApplicationStatus$outboundSchema: z.ZodNativeEnum<
  typeof RedisStartApplicationStatus
> = RedisStartApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartApplicationStatus$ {
  /** @deprecated use `RedisStartApplicationStatus$inboundSchema` instead. */
  export const inboundSchema = RedisStartApplicationStatus$inboundSchema;
  /** @deprecated use `RedisStartApplicationStatus$outboundSchema` instead. */
  export const outboundSchema = RedisStartApplicationStatus$outboundSchema;
}

/** @internal */
export const RedisStartHealthCheckSwarm$inboundSchema: z.ZodType<
  RedisStartHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Test: z.array(z.string()).optional(),
  Interval: z.number().optional(),
  Timeout: z.number().optional(),
  StartPeriod: z.number().optional(),
  Retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Test": "test",
    "Interval": "interval",
    "Timeout": "timeout",
    "StartPeriod": "startPeriod",
    "Retries": "retries",
  });
});

/** @internal */
export type RedisStartHealthCheckSwarm$Outbound = {
  Test?: Array<string> | undefined;
  Interval?: number | undefined;
  Timeout?: number | undefined;
  StartPeriod?: number | undefined;
  Retries?: number | undefined;
};

/** @internal */
export const RedisStartHealthCheckSwarm$outboundSchema: z.ZodType<
  RedisStartHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  RedisStartHealthCheckSwarm
> = z.object({
  test: z.array(z.string()).optional(),
  interval: z.number().optional(),
  timeout: z.number().optional(),
  startPeriod: z.number().optional(),
  retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    test: "Test",
    interval: "Interval",
    timeout: "Timeout",
    startPeriod: "StartPeriod",
    retries: "Retries",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartHealthCheckSwarm$ {
  /** @deprecated use `RedisStartHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisStartHealthCheckSwarm$inboundSchema;
  /** @deprecated use `RedisStartHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisStartHealthCheckSwarm$outboundSchema;
  /** @deprecated use `RedisStartHealthCheckSwarm$Outbound` instead. */
  export type Outbound = RedisStartHealthCheckSwarm$Outbound;
}

export function redisStartHealthCheckSwarmToJSON(
  redisStartHealthCheckSwarm: RedisStartHealthCheckSwarm,
): string {
  return JSON.stringify(
    RedisStartHealthCheckSwarm$outboundSchema.parse(redisStartHealthCheckSwarm),
  );
}

export function redisStartHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisStartHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStartHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStartHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const RedisStartRestartPolicySwarm$inboundSchema: z.ZodType<
  RedisStartRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type RedisStartRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const RedisStartRestartPolicySwarm$outboundSchema: z.ZodType<
  RedisStartRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  RedisStartRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartRestartPolicySwarm$ {
  /** @deprecated use `RedisStartRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema = RedisStartRestartPolicySwarm$inboundSchema;
  /** @deprecated use `RedisStartRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema = RedisStartRestartPolicySwarm$outboundSchema;
  /** @deprecated use `RedisStartRestartPolicySwarm$Outbound` instead. */
  export type Outbound = RedisStartRestartPolicySwarm$Outbound;
}

export function redisStartRestartPolicySwarmToJSON(
  redisStartRestartPolicySwarm: RedisStartRestartPolicySwarm,
): string {
  return JSON.stringify(
    RedisStartRestartPolicySwarm$outboundSchema.parse(
      redisStartRestartPolicySwarm,
    ),
  );
}

export function redisStartRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisStartRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStartRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStartRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const RedisStartSpread$inboundSchema: z.ZodType<
  RedisStartSpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type RedisStartSpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const RedisStartSpread$outboundSchema: z.ZodType<
  RedisStartSpread$Outbound,
  z.ZodTypeDef,
  RedisStartSpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartSpread$ {
  /** @deprecated use `RedisStartSpread$inboundSchema` instead. */
  export const inboundSchema = RedisStartSpread$inboundSchema;
  /** @deprecated use `RedisStartSpread$outboundSchema` instead. */
  export const outboundSchema = RedisStartSpread$outboundSchema;
  /** @deprecated use `RedisStartSpread$Outbound` instead. */
  export type Outbound = RedisStartSpread$Outbound;
}

export function redisStartSpreadToJSON(
  redisStartSpread: RedisStartSpread,
): string {
  return JSON.stringify(
    RedisStartSpread$outboundSchema.parse(redisStartSpread),
  );
}

export function redisStartSpreadFromJSON(
  jsonString: string,
): SafeParseResult<RedisStartSpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStartSpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStartSpread' from JSON`,
  );
}

/** @internal */
export const RedisStartPreference$inboundSchema: z.ZodType<
  RedisStartPreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => RedisStartSpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type RedisStartPreference$Outbound = {
  Spread: RedisStartSpread$Outbound;
};

/** @internal */
export const RedisStartPreference$outboundSchema: z.ZodType<
  RedisStartPreference$Outbound,
  z.ZodTypeDef,
  RedisStartPreference
> = z.object({
  spread: z.lazy(() => RedisStartSpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartPreference$ {
  /** @deprecated use `RedisStartPreference$inboundSchema` instead. */
  export const inboundSchema = RedisStartPreference$inboundSchema;
  /** @deprecated use `RedisStartPreference$outboundSchema` instead. */
  export const outboundSchema = RedisStartPreference$outboundSchema;
  /** @deprecated use `RedisStartPreference$Outbound` instead. */
  export type Outbound = RedisStartPreference$Outbound;
}

export function redisStartPreferenceToJSON(
  redisStartPreference: RedisStartPreference,
): string {
  return JSON.stringify(
    RedisStartPreference$outboundSchema.parse(redisStartPreference),
  );
}

export function redisStartPreferenceFromJSON(
  jsonString: string,
): SafeParseResult<RedisStartPreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStartPreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStartPreference' from JSON`,
  );
}

/** @internal */
export const RedisStartPlatform$inboundSchema: z.ZodType<
  RedisStartPlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type RedisStartPlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const RedisStartPlatform$outboundSchema: z.ZodType<
  RedisStartPlatform$Outbound,
  z.ZodTypeDef,
  RedisStartPlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartPlatform$ {
  /** @deprecated use `RedisStartPlatform$inboundSchema` instead. */
  export const inboundSchema = RedisStartPlatform$inboundSchema;
  /** @deprecated use `RedisStartPlatform$outboundSchema` instead. */
  export const outboundSchema = RedisStartPlatform$outboundSchema;
  /** @deprecated use `RedisStartPlatform$Outbound` instead. */
  export type Outbound = RedisStartPlatform$Outbound;
}

export function redisStartPlatformToJSON(
  redisStartPlatform: RedisStartPlatform,
): string {
  return JSON.stringify(
    RedisStartPlatform$outboundSchema.parse(redisStartPlatform),
  );
}

export function redisStartPlatformFromJSON(
  jsonString: string,
): SafeParseResult<RedisStartPlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStartPlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStartPlatform' from JSON`,
  );
}

/** @internal */
export const RedisStartPlacementSwarm$inboundSchema: z.ZodType<
  RedisStartPlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  Preferences: z.array(z.lazy(() => RedisStartPreference$inboundSchema))
    .optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => RedisStartPlatform$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "Preferences": "preferences",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
  });
});

/** @internal */
export type RedisStartPlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  Preferences?: Array<RedisStartPreference$Outbound> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<RedisStartPlatform$Outbound> | undefined;
};

/** @internal */
export const RedisStartPlacementSwarm$outboundSchema: z.ZodType<
  RedisStartPlacementSwarm$Outbound,
  z.ZodTypeDef,
  RedisStartPlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  preferences: z.array(z.lazy(() => RedisStartPreference$outboundSchema))
    .optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => RedisStartPlatform$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    preferences: "Preferences",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartPlacementSwarm$ {
  /** @deprecated use `RedisStartPlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisStartPlacementSwarm$inboundSchema;
  /** @deprecated use `RedisStartPlacementSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisStartPlacementSwarm$outboundSchema;
  /** @deprecated use `RedisStartPlacementSwarm$Outbound` instead. */
  export type Outbound = RedisStartPlacementSwarm$Outbound;
}

export function redisStartPlacementSwarmToJSON(
  redisStartPlacementSwarm: RedisStartPlacementSwarm,
): string {
  return JSON.stringify(
    RedisStartPlacementSwarm$outboundSchema.parse(redisStartPlacementSwarm),
  );
}

export function redisStartPlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisStartPlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStartPlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStartPlacementSwarm' from JSON`,
  );
}

/** @internal */
export const RedisStartUpdateConfigSwarm$inboundSchema: z.ZodType<
  RedisStartUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type RedisStartUpdateConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const RedisStartUpdateConfigSwarm$outboundSchema: z.ZodType<
  RedisStartUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  RedisStartUpdateConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartUpdateConfigSwarm$ {
  /** @deprecated use `RedisStartUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisStartUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `RedisStartUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisStartUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `RedisStartUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = RedisStartUpdateConfigSwarm$Outbound;
}

export function redisStartUpdateConfigSwarmToJSON(
  redisStartUpdateConfigSwarm: RedisStartUpdateConfigSwarm,
): string {
  return JSON.stringify(
    RedisStartUpdateConfigSwarm$outboundSchema.parse(
      redisStartUpdateConfigSwarm,
    ),
  );
}

export function redisStartUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisStartUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStartUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStartUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const RedisStartRollbackConfigSwarm$inboundSchema: z.ZodType<
  RedisStartRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type RedisStartRollbackConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const RedisStartRollbackConfigSwarm$outboundSchema: z.ZodType<
  RedisStartRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  RedisStartRollbackConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartRollbackConfigSwarm$ {
  /** @deprecated use `RedisStartRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisStartRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `RedisStartRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisStartRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `RedisStartRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = RedisStartRollbackConfigSwarm$Outbound;
}

export function redisStartRollbackConfigSwarmToJSON(
  redisStartRollbackConfigSwarm: RedisStartRollbackConfigSwarm,
): string {
  return JSON.stringify(
    RedisStartRollbackConfigSwarm$outboundSchema.parse(
      redisStartRollbackConfigSwarm,
    ),
  );
}

export function redisStartRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisStartRollbackConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStartRollbackConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStartRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const RedisStartReplicated$inboundSchema: z.ZodType<
  RedisStartReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type RedisStartReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const RedisStartReplicated$outboundSchema: z.ZodType<
  RedisStartReplicated$Outbound,
  z.ZodTypeDef,
  RedisStartReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartReplicated$ {
  /** @deprecated use `RedisStartReplicated$inboundSchema` instead. */
  export const inboundSchema = RedisStartReplicated$inboundSchema;
  /** @deprecated use `RedisStartReplicated$outboundSchema` instead. */
  export const outboundSchema = RedisStartReplicated$outboundSchema;
  /** @deprecated use `RedisStartReplicated$Outbound` instead. */
  export type Outbound = RedisStartReplicated$Outbound;
}

export function redisStartReplicatedToJSON(
  redisStartReplicated: RedisStartReplicated,
): string {
  return JSON.stringify(
    RedisStartReplicated$outboundSchema.parse(redisStartReplicated),
  );
}

export function redisStartReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<RedisStartReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStartReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStartReplicated' from JSON`,
  );
}

/** @internal */
export const RedisStartGlobal$inboundSchema: z.ZodType<
  RedisStartGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RedisStartGlobal$Outbound = {};

/** @internal */
export const RedisStartGlobal$outboundSchema: z.ZodType<
  RedisStartGlobal$Outbound,
  z.ZodTypeDef,
  RedisStartGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartGlobal$ {
  /** @deprecated use `RedisStartGlobal$inboundSchema` instead. */
  export const inboundSchema = RedisStartGlobal$inboundSchema;
  /** @deprecated use `RedisStartGlobal$outboundSchema` instead. */
  export const outboundSchema = RedisStartGlobal$outboundSchema;
  /** @deprecated use `RedisStartGlobal$Outbound` instead. */
  export type Outbound = RedisStartGlobal$Outbound;
}

export function redisStartGlobalToJSON(
  redisStartGlobal: RedisStartGlobal,
): string {
  return JSON.stringify(
    RedisStartGlobal$outboundSchema.parse(redisStartGlobal),
  );
}

export function redisStartGlobalFromJSON(
  jsonString: string,
): SafeParseResult<RedisStartGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStartGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStartGlobal' from JSON`,
  );
}

/** @internal */
export const RedisStartReplicatedJob$inboundSchema: z.ZodType<
  RedisStartReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type RedisStartReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const RedisStartReplicatedJob$outboundSchema: z.ZodType<
  RedisStartReplicatedJob$Outbound,
  z.ZodTypeDef,
  RedisStartReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartReplicatedJob$ {
  /** @deprecated use `RedisStartReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = RedisStartReplicatedJob$inboundSchema;
  /** @deprecated use `RedisStartReplicatedJob$outboundSchema` instead. */
  export const outboundSchema = RedisStartReplicatedJob$outboundSchema;
  /** @deprecated use `RedisStartReplicatedJob$Outbound` instead. */
  export type Outbound = RedisStartReplicatedJob$Outbound;
}

export function redisStartReplicatedJobToJSON(
  redisStartReplicatedJob: RedisStartReplicatedJob,
): string {
  return JSON.stringify(
    RedisStartReplicatedJob$outboundSchema.parse(redisStartReplicatedJob),
  );
}

export function redisStartReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<RedisStartReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStartReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStartReplicatedJob' from JSON`,
  );
}

/** @internal */
export const RedisStartGlobalJob$inboundSchema: z.ZodType<
  RedisStartGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RedisStartGlobalJob$Outbound = {};

/** @internal */
export const RedisStartGlobalJob$outboundSchema: z.ZodType<
  RedisStartGlobalJob$Outbound,
  z.ZodTypeDef,
  RedisStartGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartGlobalJob$ {
  /** @deprecated use `RedisStartGlobalJob$inboundSchema` instead. */
  export const inboundSchema = RedisStartGlobalJob$inboundSchema;
  /** @deprecated use `RedisStartGlobalJob$outboundSchema` instead. */
  export const outboundSchema = RedisStartGlobalJob$outboundSchema;
  /** @deprecated use `RedisStartGlobalJob$Outbound` instead. */
  export type Outbound = RedisStartGlobalJob$Outbound;
}

export function redisStartGlobalJobToJSON(
  redisStartGlobalJob: RedisStartGlobalJob,
): string {
  return JSON.stringify(
    RedisStartGlobalJob$outboundSchema.parse(redisStartGlobalJob),
  );
}

export function redisStartGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<RedisStartGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStartGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStartGlobalJob' from JSON`,
  );
}

/** @internal */
export const RedisStartModeSwarm$inboundSchema: z.ZodType<
  RedisStartModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicated: z.lazy(() => RedisStartReplicated$inboundSchema).optional(),
  Global: z.lazy(() => RedisStartGlobal$inboundSchema).optional(),
  ReplicatedJob: z.lazy(() => RedisStartReplicatedJob$inboundSchema).optional(),
  GlobalJob: z.lazy(() => RedisStartGlobalJob$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicated": "replicated",
    "Global": "global",
    "ReplicatedJob": "replicatedJob",
    "GlobalJob": "globalJob",
  });
});

/** @internal */
export type RedisStartModeSwarm$Outbound = {
  Replicated?: RedisStartReplicated$Outbound | undefined;
  Global?: RedisStartGlobal$Outbound | undefined;
  ReplicatedJob?: RedisStartReplicatedJob$Outbound | undefined;
  GlobalJob?: RedisStartGlobalJob$Outbound | undefined;
};

/** @internal */
export const RedisStartModeSwarm$outboundSchema: z.ZodType<
  RedisStartModeSwarm$Outbound,
  z.ZodTypeDef,
  RedisStartModeSwarm
> = z.object({
  replicated: z.lazy(() => RedisStartReplicated$outboundSchema).optional(),
  global: z.lazy(() => RedisStartGlobal$outboundSchema).optional(),
  replicatedJob: z.lazy(() => RedisStartReplicatedJob$outboundSchema)
    .optional(),
  globalJob: z.lazy(() => RedisStartGlobalJob$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    replicated: "Replicated",
    global: "Global",
    replicatedJob: "ReplicatedJob",
    globalJob: "GlobalJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartModeSwarm$ {
  /** @deprecated use `RedisStartModeSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisStartModeSwarm$inboundSchema;
  /** @deprecated use `RedisStartModeSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisStartModeSwarm$outboundSchema;
  /** @deprecated use `RedisStartModeSwarm$Outbound` instead. */
  export type Outbound = RedisStartModeSwarm$Outbound;
}

export function redisStartModeSwarmToJSON(
  redisStartModeSwarm: RedisStartModeSwarm,
): string {
  return JSON.stringify(
    RedisStartModeSwarm$outboundSchema.parse(redisStartModeSwarm),
  );
}

export function redisStartModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisStartModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStartModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStartModeSwarm' from JSON`,
  );
}

/** @internal */
export const RedisStartDriverOpts$inboundSchema: z.ZodType<
  RedisStartDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RedisStartDriverOpts$Outbound = {};

/** @internal */
export const RedisStartDriverOpts$outboundSchema: z.ZodType<
  RedisStartDriverOpts$Outbound,
  z.ZodTypeDef,
  RedisStartDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartDriverOpts$ {
  /** @deprecated use `RedisStartDriverOpts$inboundSchema` instead. */
  export const inboundSchema = RedisStartDriverOpts$inboundSchema;
  /** @deprecated use `RedisStartDriverOpts$outboundSchema` instead. */
  export const outboundSchema = RedisStartDriverOpts$outboundSchema;
  /** @deprecated use `RedisStartDriverOpts$Outbound` instead. */
  export type Outbound = RedisStartDriverOpts$Outbound;
}

export function redisStartDriverOptsToJSON(
  redisStartDriverOpts: RedisStartDriverOpts,
): string {
  return JSON.stringify(
    RedisStartDriverOpts$outboundSchema.parse(redisStartDriverOpts),
  );
}

export function redisStartDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<RedisStartDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStartDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStartDriverOpts' from JSON`,
  );
}

/** @internal */
export const RedisStartNetworkSwarm$inboundSchema: z.ZodType<
  RedisStartNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Target: z.string().optional(),
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => RedisStartDriverOpts$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Target": "target",
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
  });
});

/** @internal */
export type RedisStartNetworkSwarm$Outbound = {
  Target?: string | undefined;
  Aliases?: Array<string> | undefined;
  DriverOpts?: RedisStartDriverOpts$Outbound | undefined;
};

/** @internal */
export const RedisStartNetworkSwarm$outboundSchema: z.ZodType<
  RedisStartNetworkSwarm$Outbound,
  z.ZodTypeDef,
  RedisStartNetworkSwarm
> = z.object({
  target: z.string().optional(),
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => RedisStartDriverOpts$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    target: "Target",
    aliases: "Aliases",
    driverOpts: "DriverOpts",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartNetworkSwarm$ {
  /** @deprecated use `RedisStartNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisStartNetworkSwarm$inboundSchema;
  /** @deprecated use `RedisStartNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisStartNetworkSwarm$outboundSchema;
  /** @deprecated use `RedisStartNetworkSwarm$Outbound` instead. */
  export type Outbound = RedisStartNetworkSwarm$Outbound;
}

export function redisStartNetworkSwarmToJSON(
  redisStartNetworkSwarm: RedisStartNetworkSwarm,
): string {
  return JSON.stringify(
    RedisStartNetworkSwarm$outboundSchema.parse(redisStartNetworkSwarm),
  );
}

export function redisStartNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisStartNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStartNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStartNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const RedisStartProject$inboundSchema: z.ZodType<
  RedisStartProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  organizationId: z.string(),
  env: z.string(),
});

/** @internal */
export type RedisStartProject$Outbound = {
  projectId: string;
  name: string;
  description: string | null;
  createdAt: string;
  organizationId: string;
  env: string;
};

/** @internal */
export const RedisStartProject$outboundSchema: z.ZodType<
  RedisStartProject$Outbound,
  z.ZodTypeDef,
  RedisStartProject
> = z.object({
  projectId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  organizationId: z.string(),
  env: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartProject$ {
  /** @deprecated use `RedisStartProject$inboundSchema` instead. */
  export const inboundSchema = RedisStartProject$inboundSchema;
  /** @deprecated use `RedisStartProject$outboundSchema` instead. */
  export const outboundSchema = RedisStartProject$outboundSchema;
  /** @deprecated use `RedisStartProject$Outbound` instead. */
  export type Outbound = RedisStartProject$Outbound;
}

export function redisStartProjectToJSON(
  redisStartProject: RedisStartProject,
): string {
  return JSON.stringify(
    RedisStartProject$outboundSchema.parse(redisStartProject),
  );
}

export function redisStartProjectFromJSON(
  jsonString: string,
): SafeParseResult<RedisStartProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStartProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStartProject' from JSON`,
  );
}

/** @internal */
export const RedisStartEnvironment$inboundSchema: z.ZodType<
  RedisStartEnvironment,
  z.ZodTypeDef,
  unknown
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
  project: z.lazy(() => RedisStartProject$inboundSchema),
});

/** @internal */
export type RedisStartEnvironment$Outbound = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
  project: RedisStartProject$Outbound;
};

/** @internal */
export const RedisStartEnvironment$outboundSchema: z.ZodType<
  RedisStartEnvironment$Outbound,
  z.ZodTypeDef,
  RedisStartEnvironment
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
  project: z.lazy(() => RedisStartProject$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartEnvironment$ {
  /** @deprecated use `RedisStartEnvironment$inboundSchema` instead. */
  export const inboundSchema = RedisStartEnvironment$inboundSchema;
  /** @deprecated use `RedisStartEnvironment$outboundSchema` instead. */
  export const outboundSchema = RedisStartEnvironment$outboundSchema;
  /** @deprecated use `RedisStartEnvironment$Outbound` instead. */
  export type Outbound = RedisStartEnvironment$Outbound;
}

export function redisStartEnvironmentToJSON(
  redisStartEnvironment: RedisStartEnvironment,
): string {
  return JSON.stringify(
    RedisStartEnvironment$outboundSchema.parse(redisStartEnvironment),
  );
}

export function redisStartEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<RedisStartEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStartEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStartEnvironment' from JSON`,
  );
}

/** @internal */
export const RedisStartType$inboundSchema: z.ZodNativeEnum<
  typeof RedisStartType
> = z.nativeEnum(RedisStartType);

/** @internal */
export const RedisStartType$outboundSchema: z.ZodNativeEnum<
  typeof RedisStartType
> = RedisStartType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartType$ {
  /** @deprecated use `RedisStartType$inboundSchema` instead. */
  export const inboundSchema = RedisStartType$inboundSchema;
  /** @deprecated use `RedisStartType$outboundSchema` instead. */
  export const outboundSchema = RedisStartType$outboundSchema;
}

/** @internal */
export const RedisStartServiceType$inboundSchema: z.ZodNativeEnum<
  typeof RedisStartServiceType
> = z.nativeEnum(RedisStartServiceType);

/** @internal */
export const RedisStartServiceType$outboundSchema: z.ZodNativeEnum<
  typeof RedisStartServiceType
> = RedisStartServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartServiceType$ {
  /** @deprecated use `RedisStartServiceType$inboundSchema` instead. */
  export const inboundSchema = RedisStartServiceType$inboundSchema;
  /** @deprecated use `RedisStartServiceType$outboundSchema` instead. */
  export const outboundSchema = RedisStartServiceType$outboundSchema;
}

/** @internal */
export const RedisStartMount$inboundSchema: z.ZodType<
  RedisStartMount,
  z.ZodTypeDef,
  unknown
> = z.object({
  mountId: z.string(),
  type: RedisStartType$inboundSchema,
  hostPath: z.nullable(z.string()),
  volumeName: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  content: z.nullable(z.string()),
  serviceType: RedisStartServiceType$inboundSchema,
  mountPath: z.string(),
  applicationId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
});

/** @internal */
export type RedisStartMount$Outbound = {
  mountId: string;
  type: string;
  hostPath: string | null;
  volumeName: string | null;
  filePath: string | null;
  content: string | null;
  serviceType: string;
  mountPath: string;
  applicationId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mysqlId: string | null;
  redisId: string | null;
  composeId: string | null;
};

/** @internal */
export const RedisStartMount$outboundSchema: z.ZodType<
  RedisStartMount$Outbound,
  z.ZodTypeDef,
  RedisStartMount
> = z.object({
  mountId: z.string(),
  type: RedisStartType$outboundSchema,
  hostPath: z.nullable(z.string()),
  volumeName: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  content: z.nullable(z.string()),
  serviceType: RedisStartServiceType$outboundSchema,
  mountPath: z.string(),
  applicationId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartMount$ {
  /** @deprecated use `RedisStartMount$inboundSchema` instead. */
  export const inboundSchema = RedisStartMount$inboundSchema;
  /** @deprecated use `RedisStartMount$outboundSchema` instead. */
  export const outboundSchema = RedisStartMount$outboundSchema;
  /** @deprecated use `RedisStartMount$Outbound` instead. */
  export type Outbound = RedisStartMount$Outbound;
}

export function redisStartMountToJSON(
  redisStartMount: RedisStartMount,
): string {
  return JSON.stringify(RedisStartMount$outboundSchema.parse(redisStartMount));
}

export function redisStartMountFromJSON(
  jsonString: string,
): SafeParseResult<RedisStartMount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStartMount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStartMount' from JSON`,
  );
}

/** @internal */
export const RedisStartServerStatus$inboundSchema: z.ZodNativeEnum<
  typeof RedisStartServerStatus
> = z.nativeEnum(RedisStartServerStatus);

/** @internal */
export const RedisStartServerStatus$outboundSchema: z.ZodNativeEnum<
  typeof RedisStartServerStatus
> = RedisStartServerStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartServerStatus$ {
  /** @deprecated use `RedisStartServerStatus$inboundSchema` instead. */
  export const inboundSchema = RedisStartServerStatus$inboundSchema;
  /** @deprecated use `RedisStartServerStatus$outboundSchema` instead. */
  export const outboundSchema = RedisStartServerStatus$outboundSchema;
}

/** @internal */
export const RedisStartMetricsConfigEnum$inboundSchema: z.ZodNativeEnum<
  typeof RedisStartMetricsConfigEnum
> = z.nativeEnum(RedisStartMetricsConfigEnum);

/** @internal */
export const RedisStartMetricsConfigEnum$outboundSchema: z.ZodNativeEnum<
  typeof RedisStartMetricsConfigEnum
> = RedisStartMetricsConfigEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartMetricsConfigEnum$ {
  /** @deprecated use `RedisStartMetricsConfigEnum$inboundSchema` instead. */
  export const inboundSchema = RedisStartMetricsConfigEnum$inboundSchema;
  /** @deprecated use `RedisStartMetricsConfigEnum$outboundSchema` instead. */
  export const outboundSchema = RedisStartMetricsConfigEnum$outboundSchema;
}

/** @internal */
export const RedisStartMetricsConfigUnion1$inboundSchema: z.ZodType<
  RedisStartMetricsConfigUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  RedisStartMetricsConfigEnum$inboundSchema,
]);

/** @internal */
export type RedisStartMetricsConfigUnion1$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const RedisStartMetricsConfigUnion1$outboundSchema: z.ZodType<
  RedisStartMetricsConfigUnion1$Outbound,
  z.ZodTypeDef,
  RedisStartMetricsConfigUnion1
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  RedisStartMetricsConfigEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartMetricsConfigUnion1$ {
  /** @deprecated use `RedisStartMetricsConfigUnion1$inboundSchema` instead. */
  export const inboundSchema = RedisStartMetricsConfigUnion1$inboundSchema;
  /** @deprecated use `RedisStartMetricsConfigUnion1$outboundSchema` instead. */
  export const outboundSchema = RedisStartMetricsConfigUnion1$outboundSchema;
  /** @deprecated use `RedisStartMetricsConfigUnion1$Outbound` instead. */
  export type Outbound = RedisStartMetricsConfigUnion1$Outbound;
}

export function redisStartMetricsConfigUnion1ToJSON(
  redisStartMetricsConfigUnion1: RedisStartMetricsConfigUnion1,
): string {
  return JSON.stringify(
    RedisStartMetricsConfigUnion1$outboundSchema.parse(
      redisStartMetricsConfigUnion1,
    ),
  );
}

export function redisStartMetricsConfigUnion1FromJSON(
  jsonString: string,
): SafeParseResult<RedisStartMetricsConfigUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStartMetricsConfigUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStartMetricsConfigUnion1' from JSON`,
  );
}

/** @internal */
export const RedisStartMetricsConfigUnion2$inboundSchema: z.ZodType<
  RedisStartMetricsConfigUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    RedisStartMetricsConfigEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type RedisStartMetricsConfigUnion2$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const RedisStartMetricsConfigUnion2$outboundSchema: z.ZodType<
  RedisStartMetricsConfigUnion2$Outbound,
  z.ZodTypeDef,
  RedisStartMetricsConfigUnion2
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    RedisStartMetricsConfigEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartMetricsConfigUnion2$ {
  /** @deprecated use `RedisStartMetricsConfigUnion2$inboundSchema` instead. */
  export const inboundSchema = RedisStartMetricsConfigUnion2$inboundSchema;
  /** @deprecated use `RedisStartMetricsConfigUnion2$outboundSchema` instead. */
  export const outboundSchema = RedisStartMetricsConfigUnion2$outboundSchema;
  /** @deprecated use `RedisStartMetricsConfigUnion2$Outbound` instead. */
  export type Outbound = RedisStartMetricsConfigUnion2$Outbound;
}

export function redisStartMetricsConfigUnion2ToJSON(
  redisStartMetricsConfigUnion2: RedisStartMetricsConfigUnion2,
): string {
  return JSON.stringify(
    RedisStartMetricsConfigUnion2$outboundSchema.parse(
      redisStartMetricsConfigUnion2,
    ),
  );
}

export function redisStartMetricsConfigUnion2FromJSON(
  jsonString: string,
): SafeParseResult<RedisStartMetricsConfigUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStartMetricsConfigUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStartMetricsConfigUnion2' from JSON`,
  );
}

/** @internal */
export const RedisStartServer$inboundSchema: z.ZodType<
  RedisStartServer,
  z.ZodTypeDef,
  unknown
> = z.object({
  serverId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  ipAddress: z.string(),
  port: z.number(),
  username: z.string(),
  appName: z.string(),
  enableDockerCleanup: z.boolean(),
  createdAt: z.string(),
  organizationId: z.string(),
  serverStatus: RedisStartServerStatus$inboundSchema,
  command: z.string(),
  sshKeyId: z.nullable(z.string()),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      RedisStartMetricsConfigEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
});

/** @internal */
export type RedisStartServer$Outbound = {
  serverId: string;
  name: string;
  description: string | null;
  ipAddress: string;
  port: number;
  username: string;
  appName: string;
  enableDockerCleanup: boolean;
  createdAt: string;
  organizationId: string;
  serverStatus: string;
  command: string;
  sshKeyId: string | null;
  metricsConfig: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  };
};

/** @internal */
export const RedisStartServer$outboundSchema: z.ZodType<
  RedisStartServer$Outbound,
  z.ZodTypeDef,
  RedisStartServer
> = z.object({
  serverId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  ipAddress: z.string(),
  port: z.number(),
  username: z.string(),
  appName: z.string(),
  enableDockerCleanup: z.boolean(),
  createdAt: z.string(),
  organizationId: z.string(),
  serverStatus: RedisStartServerStatus$outboundSchema,
  command: z.string(),
  sshKeyId: z.nullable(z.string()),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      RedisStartMetricsConfigEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartServer$ {
  /** @deprecated use `RedisStartServer$inboundSchema` instead. */
  export const inboundSchema = RedisStartServer$inboundSchema;
  /** @deprecated use `RedisStartServer$outboundSchema` instead. */
  export const outboundSchema = RedisStartServer$outboundSchema;
  /** @deprecated use `RedisStartServer$Outbound` instead. */
  export type Outbound = RedisStartServer$Outbound;
}

export function redisStartServerToJSON(
  redisStartServer: RedisStartServer,
): string {
  return JSON.stringify(
    RedisStartServer$outboundSchema.parse(redisStartServer),
  );
}

export function redisStartServerFromJSON(
  jsonString: string,
): SafeParseResult<RedisStartServer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStartServer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStartServer' from JSON`,
  );
}

/** @internal */
export const RedisStartResponseBody$inboundSchema: z.ZodType<
  RedisStartResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  redisId: z.string(),
  name: z.string(),
  appName: z.string(),
  description: z.nullable(z.string()),
  databasePassword: z.string(),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  createdAt: z.string(),
  applicationStatus: RedisStartApplicationStatus$inboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => RedisStartHealthCheckSwarm$inboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => RedisStartRestartPolicySwarm$inboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => RedisStartPlacementSwarm$inboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => RedisStartUpdateConfigSwarm$inboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => RedisStartRollbackConfigSwarm$inboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => RedisStartModeSwarm$inboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => RedisStartNetworkSwarm$inboundSchema)),
  ),
  replicas: z.number(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
  environment: z.lazy(() => RedisStartEnvironment$inboundSchema),
  mounts: z.array(z.lazy(() => RedisStartMount$inboundSchema)),
  server: z.nullable(z.lazy(() => RedisStartServer$inboundSchema)),
});

/** @internal */
export type RedisStartResponseBody$Outbound = {
  redisId: string;
  name: string;
  appName: string;
  description: string | null;
  databasePassword: string;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  externalPort: number | null;
  createdAt: string;
  applicationStatus: string;
  healthCheckSwarm: RedisStartHealthCheckSwarm$Outbound | null;
  restartPolicySwarm: RedisStartRestartPolicySwarm$Outbound | null;
  placementSwarm: RedisStartPlacementSwarm$Outbound | null;
  updateConfigSwarm: RedisStartUpdateConfigSwarm$Outbound | null;
  rollbackConfigSwarm: RedisStartRollbackConfigSwarm$Outbound | null;
  modeSwarm: RedisStartModeSwarm$Outbound | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<RedisStartNetworkSwarm$Outbound> | null;
  replicas: number;
  environmentId: string;
  serverId: string | null;
  environment: RedisStartEnvironment$Outbound;
  mounts: Array<RedisStartMount$Outbound>;
  server: RedisStartServer$Outbound | null;
};

/** @internal */
export const RedisStartResponseBody$outboundSchema: z.ZodType<
  RedisStartResponseBody$Outbound,
  z.ZodTypeDef,
  RedisStartResponseBody
> = z.object({
  redisId: z.string(),
  name: z.string(),
  appName: z.string(),
  description: z.nullable(z.string()),
  databasePassword: z.string(),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  createdAt: z.string(),
  applicationStatus: RedisStartApplicationStatus$outboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => RedisStartHealthCheckSwarm$outboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => RedisStartRestartPolicySwarm$outboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => RedisStartPlacementSwarm$outboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => RedisStartUpdateConfigSwarm$outboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => RedisStartRollbackConfigSwarm$outboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => RedisStartModeSwarm$outboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => RedisStartNetworkSwarm$outboundSchema)),
  ),
  replicas: z.number(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
  environment: z.lazy(() => RedisStartEnvironment$outboundSchema),
  mounts: z.array(z.lazy(() => RedisStartMount$outboundSchema)),
  server: z.nullable(z.lazy(() => RedisStartServer$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartResponseBody$ {
  /** @deprecated use `RedisStartResponseBody$inboundSchema` instead. */
  export const inboundSchema = RedisStartResponseBody$inboundSchema;
  /** @deprecated use `RedisStartResponseBody$outboundSchema` instead. */
  export const outboundSchema = RedisStartResponseBody$outboundSchema;
  /** @deprecated use `RedisStartResponseBody$Outbound` instead. */
  export type Outbound = RedisStartResponseBody$Outbound;
}

export function redisStartResponseBodyToJSON(
  redisStartResponseBody: RedisStartResponseBody,
): string {
  return JSON.stringify(
    RedisStartResponseBody$outboundSchema.parse(redisStartResponseBody),
  );
}

export function redisStartResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RedisStartResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStartResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStartResponseBody' from JSON`,
  );
}

/** @internal */
export const RedisStartResponse$inboundSchema: z.ZodType<
  RedisStartResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => RedisStartResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type RedisStartResponse$Outbound =
  | RedisStartResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const RedisStartResponse$outboundSchema: z.ZodType<
  RedisStartResponse$Outbound,
  z.ZodTypeDef,
  RedisStartResponse
> = z.union([
  z.lazy(() => RedisStartResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStartResponse$ {
  /** @deprecated use `RedisStartResponse$inboundSchema` instead. */
  export const inboundSchema = RedisStartResponse$inboundSchema;
  /** @deprecated use `RedisStartResponse$outboundSchema` instead. */
  export const outboundSchema = RedisStartResponse$outboundSchema;
  /** @deprecated use `RedisStartResponse$Outbound` instead. */
  export type Outbound = RedisStartResponse$Outbound;
}

export function redisStartResponseToJSON(
  redisStartResponse: RedisStartResponse,
): string {
  return JSON.stringify(
    RedisStartResponse$outboundSchema.parse(redisStartResponse),
  );
}

export function redisStartResponseFromJSON(
  jsonString: string,
): SafeParseResult<RedisStartResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStartResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStartResponse' from JSON`,
  );
}
