/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CertificatesAllResponseBody = {
  autoRenew: boolean | null;
  certificateData: string;
  certificateId: string;
  certificatePath: string;
  name: string;
  organizationId: string;
  privateKey: string;
  serverId: string | null;
};

export type CertificatesAllResponse =
  | models.ErrorT
  | Array<CertificatesAllResponseBody>;

/** @internal */
export const CertificatesAllResponseBody$inboundSchema: z.ZodType<
  CertificatesAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  autoRenew: z.nullable(z.boolean()),
  certificateData: z.string(),
  certificateId: z.string(),
  certificatePath: z.string(),
  name: z.string(),
  organizationId: z.string(),
  privateKey: z.string(),
  serverId: z.nullable(z.string()),
});

/** @internal */
export type CertificatesAllResponseBody$Outbound = {
  autoRenew: boolean | null;
  certificateData: string;
  certificateId: string;
  certificatePath: string;
  name: string;
  organizationId: string;
  privateKey: string;
  serverId: string | null;
};

/** @internal */
export const CertificatesAllResponseBody$outboundSchema: z.ZodType<
  CertificatesAllResponseBody$Outbound,
  z.ZodTypeDef,
  CertificatesAllResponseBody
> = z.object({
  autoRenew: z.nullable(z.boolean()),
  certificateData: z.string(),
  certificateId: z.string(),
  certificatePath: z.string(),
  name: z.string(),
  organizationId: z.string(),
  privateKey: z.string(),
  serverId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CertificatesAllResponseBody$ {
  /** @deprecated use `CertificatesAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = CertificatesAllResponseBody$inboundSchema;
  /** @deprecated use `CertificatesAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = CertificatesAllResponseBody$outboundSchema;
  /** @deprecated use `CertificatesAllResponseBody$Outbound` instead. */
  export type Outbound = CertificatesAllResponseBody$Outbound;
}

export function certificatesAllResponseBodyToJSON(
  certificatesAllResponseBody: CertificatesAllResponseBody,
): string {
  return JSON.stringify(
    CertificatesAllResponseBody$outboundSchema.parse(
      certificatesAllResponseBody,
    ),
  );
}

export function certificatesAllResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CertificatesAllResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CertificatesAllResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CertificatesAllResponseBody' from JSON`,
  );
}

/** @internal */
export const CertificatesAllResponse$inboundSchema: z.ZodType<
  CertificatesAllResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ErrorT$inboundSchema,
  z.array(z.lazy(() => CertificatesAllResponseBody$inboundSchema)),
]);

/** @internal */
export type CertificatesAllResponse$Outbound =
  | models.ErrorT$Outbound
  | Array<CertificatesAllResponseBody$Outbound>;

/** @internal */
export const CertificatesAllResponse$outboundSchema: z.ZodType<
  CertificatesAllResponse$Outbound,
  z.ZodTypeDef,
  CertificatesAllResponse
> = z.union([
  models.ErrorT$outboundSchema,
  z.array(z.lazy(() => CertificatesAllResponseBody$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CertificatesAllResponse$ {
  /** @deprecated use `CertificatesAllResponse$inboundSchema` instead. */
  export const inboundSchema = CertificatesAllResponse$inboundSchema;
  /** @deprecated use `CertificatesAllResponse$outboundSchema` instead. */
  export const outboundSchema = CertificatesAllResponse$outboundSchema;
  /** @deprecated use `CertificatesAllResponse$Outbound` instead. */
  export type Outbound = CertificatesAllResponse$Outbound;
}

export function certificatesAllResponseToJSON(
  certificatesAllResponse: CertificatesAllResponse,
): string {
  return JSON.stringify(
    CertificatesAllResponse$outboundSchema.parse(certificatesAllResponse),
  );
}

export function certificatesAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<CertificatesAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CertificatesAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CertificatesAllResponse' from JSON`,
  );
}
