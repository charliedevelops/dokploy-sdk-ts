/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DomainValidateDomainSecurity = {
  authorization: string;
};

export type DomainValidateDomainRequest = {
  domain: string;
  serverIp?: string | undefined;
};

/** @internal */
export const DomainValidateDomainSecurity$inboundSchema: z.ZodType<
  DomainValidateDomainSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type DomainValidateDomainSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const DomainValidateDomainSecurity$outboundSchema: z.ZodType<
  DomainValidateDomainSecurity$Outbound,
  z.ZodTypeDef,
  DomainValidateDomainSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainValidateDomainSecurity$ {
  /** @deprecated use `DomainValidateDomainSecurity$inboundSchema` instead. */
  export const inboundSchema = DomainValidateDomainSecurity$inboundSchema;
  /** @deprecated use `DomainValidateDomainSecurity$outboundSchema` instead. */
  export const outboundSchema = DomainValidateDomainSecurity$outboundSchema;
  /** @deprecated use `DomainValidateDomainSecurity$Outbound` instead. */
  export type Outbound = DomainValidateDomainSecurity$Outbound;
}

export function domainValidateDomainSecurityToJSON(
  domainValidateDomainSecurity: DomainValidateDomainSecurity,
): string {
  return JSON.stringify(
    DomainValidateDomainSecurity$outboundSchema.parse(
      domainValidateDomainSecurity,
    ),
  );
}

export function domainValidateDomainSecurityFromJSON(
  jsonString: string,
): SafeParseResult<DomainValidateDomainSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DomainValidateDomainSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DomainValidateDomainSecurity' from JSON`,
  );
}

/** @internal */
export const DomainValidateDomainRequest$inboundSchema: z.ZodType<
  DomainValidateDomainRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  domain: z.string(),
  serverIp: z.string().optional(),
});

/** @internal */
export type DomainValidateDomainRequest$Outbound = {
  domain: string;
  serverIp?: string | undefined;
};

/** @internal */
export const DomainValidateDomainRequest$outboundSchema: z.ZodType<
  DomainValidateDomainRequest$Outbound,
  z.ZodTypeDef,
  DomainValidateDomainRequest
> = z.object({
  domain: z.string(),
  serverIp: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainValidateDomainRequest$ {
  /** @deprecated use `DomainValidateDomainRequest$inboundSchema` instead. */
  export const inboundSchema = DomainValidateDomainRequest$inboundSchema;
  /** @deprecated use `DomainValidateDomainRequest$outboundSchema` instead. */
  export const outboundSchema = DomainValidateDomainRequest$outboundSchema;
  /** @deprecated use `DomainValidateDomainRequest$Outbound` instead. */
  export type Outbound = DomainValidateDomainRequest$Outbound;
}

export function domainValidateDomainRequestToJSON(
  domainValidateDomainRequest: DomainValidateDomainRequest,
): string {
  return JSON.stringify(
    DomainValidateDomainRequest$outboundSchema.parse(
      domainValidateDomainRequest,
    ),
  );
}

export function domainValidateDomainRequestFromJSON(
  jsonString: string,
): SafeParseResult<DomainValidateDomainRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DomainValidateDomainRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DomainValidateDomainRequest' from JSON`,
  );
}
