/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type MariadbCreateSecurity = {
  authorization: string;
};

export type MariadbCreateRequest = {
  name: string;
  appName: string;
  dockerImage?: string | undefined;
  databaseRootPassword: string;
  environmentId: string;
  description?: string | null | undefined;
  databaseName: string;
  databaseUser: string;
  databasePassword: string;
  serverId?: string | null | undefined;
};

export type MariadbCreateResponse = models.ErrorT | boolean;

/** @internal */
export const MariadbCreateSecurity$inboundSchema: z.ZodType<
  MariadbCreateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type MariadbCreateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const MariadbCreateSecurity$outboundSchema: z.ZodType<
  MariadbCreateSecurity$Outbound,
  z.ZodTypeDef,
  MariadbCreateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbCreateSecurity$ {
  /** @deprecated use `MariadbCreateSecurity$inboundSchema` instead. */
  export const inboundSchema = MariadbCreateSecurity$inboundSchema;
  /** @deprecated use `MariadbCreateSecurity$outboundSchema` instead. */
  export const outboundSchema = MariadbCreateSecurity$outboundSchema;
  /** @deprecated use `MariadbCreateSecurity$Outbound` instead. */
  export type Outbound = MariadbCreateSecurity$Outbound;
}

export function mariadbCreateSecurityToJSON(
  mariadbCreateSecurity: MariadbCreateSecurity,
): string {
  return JSON.stringify(
    MariadbCreateSecurity$outboundSchema.parse(mariadbCreateSecurity),
  );
}

export function mariadbCreateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<MariadbCreateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbCreateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbCreateSecurity' from JSON`,
  );
}

/** @internal */
export const MariadbCreateRequest$inboundSchema: z.ZodType<
  MariadbCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  appName: z.string(),
  dockerImage: z.string().default("mariadb:6"),
  databaseRootPassword: z.string(),
  environmentId: z.string(),
  description: z.nullable(z.string()).optional(),
  databaseName: z.string(),
  databaseUser: z.string(),
  databasePassword: z.string(),
  serverId: z.nullable(z.string()).optional(),
});

/** @internal */
export type MariadbCreateRequest$Outbound = {
  name: string;
  appName: string;
  dockerImage: string;
  databaseRootPassword: string;
  environmentId: string;
  description?: string | null | undefined;
  databaseName: string;
  databaseUser: string;
  databasePassword: string;
  serverId?: string | null | undefined;
};

/** @internal */
export const MariadbCreateRequest$outboundSchema: z.ZodType<
  MariadbCreateRequest$Outbound,
  z.ZodTypeDef,
  MariadbCreateRequest
> = z.object({
  name: z.string(),
  appName: z.string(),
  dockerImage: z.string().default("mariadb:6"),
  databaseRootPassword: z.string(),
  environmentId: z.string(),
  description: z.nullable(z.string()).optional(),
  databaseName: z.string(),
  databaseUser: z.string(),
  databasePassword: z.string(),
  serverId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbCreateRequest$ {
  /** @deprecated use `MariadbCreateRequest$inboundSchema` instead. */
  export const inboundSchema = MariadbCreateRequest$inboundSchema;
  /** @deprecated use `MariadbCreateRequest$outboundSchema` instead. */
  export const outboundSchema = MariadbCreateRequest$outboundSchema;
  /** @deprecated use `MariadbCreateRequest$Outbound` instead. */
  export type Outbound = MariadbCreateRequest$Outbound;
}

export function mariadbCreateRequestToJSON(
  mariadbCreateRequest: MariadbCreateRequest,
): string {
  return JSON.stringify(
    MariadbCreateRequest$outboundSchema.parse(mariadbCreateRequest),
  );
}

export function mariadbCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<MariadbCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbCreateRequest' from JSON`,
  );
}

/** @internal */
export const MariadbCreateResponse$inboundSchema: z.ZodType<
  MariadbCreateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.boolean()]);

/** @internal */
export type MariadbCreateResponse$Outbound = models.ErrorT$Outbound | boolean;

/** @internal */
export const MariadbCreateResponse$outboundSchema: z.ZodType<
  MariadbCreateResponse$Outbound,
  z.ZodTypeDef,
  MariadbCreateResponse
> = z.union([models.ErrorT$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbCreateResponse$ {
  /** @deprecated use `MariadbCreateResponse$inboundSchema` instead. */
  export const inboundSchema = MariadbCreateResponse$inboundSchema;
  /** @deprecated use `MariadbCreateResponse$outboundSchema` instead. */
  export const outboundSchema = MariadbCreateResponse$outboundSchema;
  /** @deprecated use `MariadbCreateResponse$Outbound` instead. */
  export type Outbound = MariadbCreateResponse$Outbound;
}

export function mariadbCreateResponseToJSON(
  mariadbCreateResponse: MariadbCreateResponse,
): string {
  return JSON.stringify(
    MariadbCreateResponse$outboundSchema.parse(mariadbCreateResponse),
  );
}

export function mariadbCreateResponseFromJSON(
  jsonString: string,
): SafeParseResult<MariadbCreateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbCreateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbCreateResponse' from JSON`,
  );
}
