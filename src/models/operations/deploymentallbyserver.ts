/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type DeploymentAllByServerSecurity = {
  authorization: string;
};

export type DeploymentAllByServerRequest = {
  serverId: string;
};

export const DeploymentAllByServerStatus = {
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type DeploymentAllByServerStatus = ClosedEnum<
  typeof DeploymentAllByServerStatus
>;

export type DeploymentAllByServerResponseBody = {
  applicationId: string | null;
  backupId: string | null;
  composeId: string | null;
  createdAt: string;
  deploymentId: string;
  description: string | null;
  errorMessage: string | null;
  finishedAt: string | null;
  isPreviewDeployment: boolean | null;
  logPath: string;
  pid: string | null;
  previewDeploymentId: string | null;
  rollbackId: string | null;
  scheduleId: string | null;
  serverId: string | null;
  startedAt: string | null;
  status: DeploymentAllByServerStatus | null;
  title: string;
  volumeBackupId: string | null;
};

export type DeploymentAllByServerResponse =
  | models.ErrorT
  | Array<DeploymentAllByServerResponseBody>;

/** @internal */
export const DeploymentAllByServerSecurity$inboundSchema: z.ZodType<
  DeploymentAllByServerSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type DeploymentAllByServerSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const DeploymentAllByServerSecurity$outboundSchema: z.ZodType<
  DeploymentAllByServerSecurity$Outbound,
  z.ZodTypeDef,
  DeploymentAllByServerSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentAllByServerSecurity$ {
  /** @deprecated use `DeploymentAllByServerSecurity$inboundSchema` instead. */
  export const inboundSchema = DeploymentAllByServerSecurity$inboundSchema;
  /** @deprecated use `DeploymentAllByServerSecurity$outboundSchema` instead. */
  export const outboundSchema = DeploymentAllByServerSecurity$outboundSchema;
  /** @deprecated use `DeploymentAllByServerSecurity$Outbound` instead. */
  export type Outbound = DeploymentAllByServerSecurity$Outbound;
}

export function deploymentAllByServerSecurityToJSON(
  deploymentAllByServerSecurity: DeploymentAllByServerSecurity,
): string {
  return JSON.stringify(
    DeploymentAllByServerSecurity$outboundSchema.parse(
      deploymentAllByServerSecurity,
    ),
  );
}

export function deploymentAllByServerSecurityFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentAllByServerSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentAllByServerSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentAllByServerSecurity' from JSON`,
  );
}

/** @internal */
export const DeploymentAllByServerRequest$inboundSchema: z.ZodType<
  DeploymentAllByServerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serverId: z.string(),
});

/** @internal */
export type DeploymentAllByServerRequest$Outbound = {
  serverId: string;
};

/** @internal */
export const DeploymentAllByServerRequest$outboundSchema: z.ZodType<
  DeploymentAllByServerRequest$Outbound,
  z.ZodTypeDef,
  DeploymentAllByServerRequest
> = z.object({
  serverId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentAllByServerRequest$ {
  /** @deprecated use `DeploymentAllByServerRequest$inboundSchema` instead. */
  export const inboundSchema = DeploymentAllByServerRequest$inboundSchema;
  /** @deprecated use `DeploymentAllByServerRequest$outboundSchema` instead. */
  export const outboundSchema = DeploymentAllByServerRequest$outboundSchema;
  /** @deprecated use `DeploymentAllByServerRequest$Outbound` instead. */
  export type Outbound = DeploymentAllByServerRequest$Outbound;
}

export function deploymentAllByServerRequestToJSON(
  deploymentAllByServerRequest: DeploymentAllByServerRequest,
): string {
  return JSON.stringify(
    DeploymentAllByServerRequest$outboundSchema.parse(
      deploymentAllByServerRequest,
    ),
  );
}

export function deploymentAllByServerRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentAllByServerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentAllByServerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentAllByServerRequest' from JSON`,
  );
}

/** @internal */
export const DeploymentAllByServerStatus$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentAllByServerStatus
> = z.nativeEnum(DeploymentAllByServerStatus);

/** @internal */
export const DeploymentAllByServerStatus$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentAllByServerStatus
> = DeploymentAllByServerStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentAllByServerStatus$ {
  /** @deprecated use `DeploymentAllByServerStatus$inboundSchema` instead. */
  export const inboundSchema = DeploymentAllByServerStatus$inboundSchema;
  /** @deprecated use `DeploymentAllByServerStatus$outboundSchema` instead. */
  export const outboundSchema = DeploymentAllByServerStatus$outboundSchema;
}

/** @internal */
export const DeploymentAllByServerResponseBody$inboundSchema: z.ZodType<
  DeploymentAllByServerResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.nullable(z.string()),
  backupId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  createdAt: z.string(),
  deploymentId: z.string(),
  description: z.nullable(z.string()),
  errorMessage: z.nullable(z.string()),
  finishedAt: z.nullable(z.string()),
  isPreviewDeployment: z.nullable(z.boolean()),
  logPath: z.string(),
  pid: z.nullable(z.string()),
  previewDeploymentId: z.nullable(z.string()),
  rollbackId: z.nullable(z.string()),
  scheduleId: z.nullable(z.string()),
  serverId: z.nullable(z.string()),
  startedAt: z.nullable(z.string()),
  status: z.nullable(DeploymentAllByServerStatus$inboundSchema),
  title: z.string(),
  volumeBackupId: z.nullable(z.string()),
});

/** @internal */
export type DeploymentAllByServerResponseBody$Outbound = {
  applicationId: string | null;
  backupId: string | null;
  composeId: string | null;
  createdAt: string;
  deploymentId: string;
  description: string | null;
  errorMessage: string | null;
  finishedAt: string | null;
  isPreviewDeployment: boolean | null;
  logPath: string;
  pid: string | null;
  previewDeploymentId: string | null;
  rollbackId: string | null;
  scheduleId: string | null;
  serverId: string | null;
  startedAt: string | null;
  status: string | null;
  title: string;
  volumeBackupId: string | null;
};

/** @internal */
export const DeploymentAllByServerResponseBody$outboundSchema: z.ZodType<
  DeploymentAllByServerResponseBody$Outbound,
  z.ZodTypeDef,
  DeploymentAllByServerResponseBody
> = z.object({
  applicationId: z.nullable(z.string()),
  backupId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  createdAt: z.string(),
  deploymentId: z.string(),
  description: z.nullable(z.string()),
  errorMessage: z.nullable(z.string()),
  finishedAt: z.nullable(z.string()),
  isPreviewDeployment: z.nullable(z.boolean()),
  logPath: z.string(),
  pid: z.nullable(z.string()),
  previewDeploymentId: z.nullable(z.string()),
  rollbackId: z.nullable(z.string()),
  scheduleId: z.nullable(z.string()),
  serverId: z.nullable(z.string()),
  startedAt: z.nullable(z.string()),
  status: z.nullable(DeploymentAllByServerStatus$outboundSchema),
  title: z.string(),
  volumeBackupId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentAllByServerResponseBody$ {
  /** @deprecated use `DeploymentAllByServerResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeploymentAllByServerResponseBody$inboundSchema;
  /** @deprecated use `DeploymentAllByServerResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentAllByServerResponseBody$outboundSchema;
  /** @deprecated use `DeploymentAllByServerResponseBody$Outbound` instead. */
  export type Outbound = DeploymentAllByServerResponseBody$Outbound;
}

export function deploymentAllByServerResponseBodyToJSON(
  deploymentAllByServerResponseBody: DeploymentAllByServerResponseBody,
): string {
  return JSON.stringify(
    DeploymentAllByServerResponseBody$outboundSchema.parse(
      deploymentAllByServerResponseBody,
    ),
  );
}

export function deploymentAllByServerResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentAllByServerResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentAllByServerResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentAllByServerResponseBody' from JSON`,
  );
}

/** @internal */
export const DeploymentAllByServerResponse$inboundSchema: z.ZodType<
  DeploymentAllByServerResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ErrorT$inboundSchema,
  z.array(z.lazy(() => DeploymentAllByServerResponseBody$inboundSchema)),
]);

/** @internal */
export type DeploymentAllByServerResponse$Outbound =
  | models.ErrorT$Outbound
  | Array<DeploymentAllByServerResponseBody$Outbound>;

/** @internal */
export const DeploymentAllByServerResponse$outboundSchema: z.ZodType<
  DeploymentAllByServerResponse$Outbound,
  z.ZodTypeDef,
  DeploymentAllByServerResponse
> = z.union([
  models.ErrorT$outboundSchema,
  z.array(z.lazy(() => DeploymentAllByServerResponseBody$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentAllByServerResponse$ {
  /** @deprecated use `DeploymentAllByServerResponse$inboundSchema` instead. */
  export const inboundSchema = DeploymentAllByServerResponse$inboundSchema;
  /** @deprecated use `DeploymentAllByServerResponse$outboundSchema` instead. */
  export const outboundSchema = DeploymentAllByServerResponse$outboundSchema;
  /** @deprecated use `DeploymentAllByServerResponse$Outbound` instead. */
  export type Outbound = DeploymentAllByServerResponse$Outbound;
}

export function deploymentAllByServerResponseToJSON(
  deploymentAllByServerResponse: DeploymentAllByServerResponse,
): string {
  return JSON.stringify(
    DeploymentAllByServerResponse$outboundSchema.parse(
      deploymentAllByServerResponse,
    ),
  );
}

export function deploymentAllByServerResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentAllByServerResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentAllByServerResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentAllByServerResponse' from JSON`,
  );
}
