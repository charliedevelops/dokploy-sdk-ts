/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type MongoOneSecurity = {
  authorization: string;
};

export type MongoOneRequest = {
  mongoId: string;
};

export const MongoOneApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type MongoOneApplicationStatus = ClosedEnum<
  typeof MongoOneApplicationStatus
>;

export type MongoOneHealthCheckSwarm = {
  test?: Array<string> | undefined;
  interval?: number | undefined;
  timeout?: number | undefined;
  startPeriod?: number | undefined;
  retries?: number | undefined;
};

export type MongoOneRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type MongoOneSpread = {
  spreadDescriptor: string;
};

export type MongoOnePreference = {
  spread: MongoOneSpread;
};

export type MongoOnePlatform = {
  architecture: string;
  os: string;
};

export type MongoOnePlacementSwarm = {
  constraints?: Array<string> | undefined;
  preferences?: Array<MongoOnePreference> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<MongoOnePlatform> | undefined;
};

export type MongoOneUpdateConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type MongoOneRollbackConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type MongoOneReplicated = {
  replicas?: number | undefined;
};

export type MongoOneGlobal = {};

export type MongoOneReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type MongoOneGlobalJob = {};

export type MongoOneModeSwarm = {
  replicated?: MongoOneReplicated | undefined;
  global?: MongoOneGlobal | undefined;
  replicatedJob?: MongoOneReplicatedJob | undefined;
  globalJob?: MongoOneGlobalJob | undefined;
};

export type MongoOneDriverOpts = {};

export type MongoOneNetworkSwarm = {
  target?: string | undefined;
  aliases?: Array<string> | undefined;
  driverOpts?: MongoOneDriverOpts | undefined;
};

export type MongoOneProject = {
  projectId: string;
  name: string;
  description: string | null;
  createdAt: string;
  organizationId: string;
  env: string;
};

export type MongoOneEnvironment = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
  project: MongoOneProject;
};

export const MongoOneType = {
  Bind: "bind",
  Volume: "volume",
  File: "file",
} as const;
export type MongoOneType = ClosedEnum<typeof MongoOneType>;

export const MongoOneServiceType = {
  Application: "application",
  Postgres: "postgres",
  Mysql: "mysql",
  Mariadb: "mariadb",
  Mongo: "mongo",
  Redis: "redis",
  Compose: "compose",
} as const;
export type MongoOneServiceType = ClosedEnum<typeof MongoOneServiceType>;

export type MongoOneMount = {
  mountId: string;
  type: MongoOneType;
  hostPath: string | null;
  volumeName: string | null;
  filePath: string | null;
  content: string | null;
  serviceType: MongoOneServiceType;
  mountPath: string;
  applicationId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mysqlId: string | null;
  redisId: string | null;
  composeId: string | null;
};

export const MongoOneServerStatus = {
  Active: "active",
  Inactive: "inactive",
} as const;
export type MongoOneServerStatus = ClosedEnum<typeof MongoOneServerStatus>;

export const MongoOneMetricsConfigEnum = {
  Null: "null",
} as const;
export type MongoOneMetricsConfigEnum = ClosedEnum<
  typeof MongoOneMetricsConfigEnum
>;

export type MongoOneMetricsConfigUnion1 =
  | string
  | number
  | boolean
  | MongoOneMetricsConfigEnum;

export type MongoOneMetricsConfigUnion2 =
  | string
  | number
  | boolean
  | MongoOneMetricsConfigEnum
  | Array<any>
  | { [k: string]: any };

export type MongoOneServer = {
  serverId: string;
  name: string;
  description: string | null;
  ipAddress: string;
  port: number;
  username: string;
  appName: string;
  enableDockerCleanup: boolean;
  createdAt: string;
  organizationId: string;
  serverStatus: MongoOneServerStatus;
  command: string;
  sshKeyId: string | null;
  metricsConfig:
    | string
    | number
    | boolean
    | MongoOneMetricsConfigEnum
    | Array<any>
    | { [k: string]: any };
};

export const MongoOneBackupType = {
  Database: "database",
  Compose: "compose",
} as const;
export type MongoOneBackupType = ClosedEnum<typeof MongoOneBackupType>;

export const MongoOneDatabaseType = {
  Postgres: "postgres",
  Mariadb: "mariadb",
  Mysql: "mysql",
  Mongo: "mongo",
  WebServer: "web-server",
} as const;
export type MongoOneDatabaseType = ClosedEnum<typeof MongoOneDatabaseType>;

export const MongoOneMetadataEnum = {
  Null: "null",
} as const;
export type MongoOneMetadataEnum = ClosedEnum<typeof MongoOneMetadataEnum>;

export type MongoOnePostgres = {
  databaseUser: string;
};

export type MongoOneMariadb = {
  databaseUser: string;
  databasePassword: string;
};

export type MongoOneMongo = {
  databaseUser: string;
  databasePassword: string;
};

export type MongoOneMysql = {
  databaseRootPassword: string;
};

export type MongoOneMetadata = {
  postgres?: MongoOnePostgres | undefined;
  mariadb?: MongoOneMariadb | undefined;
  mongo?: MongoOneMongo | undefined;
  mysql?: MongoOneMysql | undefined;
};

export type MongoOneMetadataUnion = MongoOneMetadata | MongoOneMetadataEnum;

export type MongoOneBackup = {
  backupId: string;
  appName: string;
  schedule: string;
  enabled: boolean | null;
  database: string;
  prefix: string;
  serviceName: string | null;
  destinationId: string;
  keepLatestCount: number | null;
  backupType: MongoOneBackupType;
  databaseType: MongoOneDatabaseType;
  composeId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mysqlId: string | null;
  mongoId: string | null;
  userId: string | null;
  metadata?: MongoOneMetadata | MongoOneMetadataEnum | null | undefined;
};

/**
 * Successful response
 */
export type MongoOneResponseBody = {
  mongoId: string;
  name: string;
  appName: string;
  description: string | null;
  databaseUser: string;
  databasePassword: string;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  externalPort: number | null;
  applicationStatus: MongoOneApplicationStatus;
  healthCheckSwarm: MongoOneHealthCheckSwarm | null;
  restartPolicySwarm: MongoOneRestartPolicySwarm | null;
  placementSwarm: MongoOnePlacementSwarm | null;
  updateConfigSwarm: MongoOneUpdateConfigSwarm | null;
  rollbackConfigSwarm: MongoOneRollbackConfigSwarm | null;
  modeSwarm: MongoOneModeSwarm | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<MongoOneNetworkSwarm> | null;
  replicas: number;
  createdAt: string;
  environmentId: string;
  serverId: string | null;
  replicaSets: boolean | null;
  environment: MongoOneEnvironment;
  mounts: Array<MongoOneMount>;
  server: MongoOneServer | null;
  backups: Array<MongoOneBackup>;
};

export type MongoOneResponse = MongoOneResponseBody | models.ErrorT;

/** @internal */
export const MongoOneSecurity$inboundSchema: z.ZodType<
  MongoOneSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type MongoOneSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const MongoOneSecurity$outboundSchema: z.ZodType<
  MongoOneSecurity$Outbound,
  z.ZodTypeDef,
  MongoOneSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneSecurity$ {
  /** @deprecated use `MongoOneSecurity$inboundSchema` instead. */
  export const inboundSchema = MongoOneSecurity$inboundSchema;
  /** @deprecated use `MongoOneSecurity$outboundSchema` instead. */
  export const outboundSchema = MongoOneSecurity$outboundSchema;
  /** @deprecated use `MongoOneSecurity$Outbound` instead. */
  export type Outbound = MongoOneSecurity$Outbound;
}

export function mongoOneSecurityToJSON(
  mongoOneSecurity: MongoOneSecurity,
): string {
  return JSON.stringify(
    MongoOneSecurity$outboundSchema.parse(mongoOneSecurity),
  );
}

export function mongoOneSecurityFromJSON(
  jsonString: string,
): SafeParseResult<MongoOneSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOneSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOneSecurity' from JSON`,
  );
}

/** @internal */
export const MongoOneRequest$inboundSchema: z.ZodType<
  MongoOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mongoId: z.string(),
});

/** @internal */
export type MongoOneRequest$Outbound = {
  mongoId: string;
};

/** @internal */
export const MongoOneRequest$outboundSchema: z.ZodType<
  MongoOneRequest$Outbound,
  z.ZodTypeDef,
  MongoOneRequest
> = z.object({
  mongoId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneRequest$ {
  /** @deprecated use `MongoOneRequest$inboundSchema` instead. */
  export const inboundSchema = MongoOneRequest$inboundSchema;
  /** @deprecated use `MongoOneRequest$outboundSchema` instead. */
  export const outboundSchema = MongoOneRequest$outboundSchema;
  /** @deprecated use `MongoOneRequest$Outbound` instead. */
  export type Outbound = MongoOneRequest$Outbound;
}

export function mongoOneRequestToJSON(
  mongoOneRequest: MongoOneRequest,
): string {
  return JSON.stringify(MongoOneRequest$outboundSchema.parse(mongoOneRequest));
}

export function mongoOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<MongoOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOneRequest' from JSON`,
  );
}

/** @internal */
export const MongoOneApplicationStatus$inboundSchema: z.ZodNativeEnum<
  typeof MongoOneApplicationStatus
> = z.nativeEnum(MongoOneApplicationStatus);

/** @internal */
export const MongoOneApplicationStatus$outboundSchema: z.ZodNativeEnum<
  typeof MongoOneApplicationStatus
> = MongoOneApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneApplicationStatus$ {
  /** @deprecated use `MongoOneApplicationStatus$inboundSchema` instead. */
  export const inboundSchema = MongoOneApplicationStatus$inboundSchema;
  /** @deprecated use `MongoOneApplicationStatus$outboundSchema` instead. */
  export const outboundSchema = MongoOneApplicationStatus$outboundSchema;
}

/** @internal */
export const MongoOneHealthCheckSwarm$inboundSchema: z.ZodType<
  MongoOneHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Test: z.array(z.string()).optional(),
  Interval: z.number().optional(),
  Timeout: z.number().optional(),
  StartPeriod: z.number().optional(),
  Retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Test": "test",
    "Interval": "interval",
    "Timeout": "timeout",
    "StartPeriod": "startPeriod",
    "Retries": "retries",
  });
});

/** @internal */
export type MongoOneHealthCheckSwarm$Outbound = {
  Test?: Array<string> | undefined;
  Interval?: number | undefined;
  Timeout?: number | undefined;
  StartPeriod?: number | undefined;
  Retries?: number | undefined;
};

/** @internal */
export const MongoOneHealthCheckSwarm$outboundSchema: z.ZodType<
  MongoOneHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  MongoOneHealthCheckSwarm
> = z.object({
  test: z.array(z.string()).optional(),
  interval: z.number().optional(),
  timeout: z.number().optional(),
  startPeriod: z.number().optional(),
  retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    test: "Test",
    interval: "Interval",
    timeout: "Timeout",
    startPeriod: "StartPeriod",
    retries: "Retries",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneHealthCheckSwarm$ {
  /** @deprecated use `MongoOneHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoOneHealthCheckSwarm$inboundSchema;
  /** @deprecated use `MongoOneHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoOneHealthCheckSwarm$outboundSchema;
  /** @deprecated use `MongoOneHealthCheckSwarm$Outbound` instead. */
  export type Outbound = MongoOneHealthCheckSwarm$Outbound;
}

export function mongoOneHealthCheckSwarmToJSON(
  mongoOneHealthCheckSwarm: MongoOneHealthCheckSwarm,
): string {
  return JSON.stringify(
    MongoOneHealthCheckSwarm$outboundSchema.parse(mongoOneHealthCheckSwarm),
  );
}

export function mongoOneHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoOneHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOneHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOneHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const MongoOneRestartPolicySwarm$inboundSchema: z.ZodType<
  MongoOneRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type MongoOneRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const MongoOneRestartPolicySwarm$outboundSchema: z.ZodType<
  MongoOneRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  MongoOneRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneRestartPolicySwarm$ {
  /** @deprecated use `MongoOneRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema = MongoOneRestartPolicySwarm$inboundSchema;
  /** @deprecated use `MongoOneRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema = MongoOneRestartPolicySwarm$outboundSchema;
  /** @deprecated use `MongoOneRestartPolicySwarm$Outbound` instead. */
  export type Outbound = MongoOneRestartPolicySwarm$Outbound;
}

export function mongoOneRestartPolicySwarmToJSON(
  mongoOneRestartPolicySwarm: MongoOneRestartPolicySwarm,
): string {
  return JSON.stringify(
    MongoOneRestartPolicySwarm$outboundSchema.parse(mongoOneRestartPolicySwarm),
  );
}

export function mongoOneRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoOneRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOneRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOneRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const MongoOneSpread$inboundSchema: z.ZodType<
  MongoOneSpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type MongoOneSpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const MongoOneSpread$outboundSchema: z.ZodType<
  MongoOneSpread$Outbound,
  z.ZodTypeDef,
  MongoOneSpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneSpread$ {
  /** @deprecated use `MongoOneSpread$inboundSchema` instead. */
  export const inboundSchema = MongoOneSpread$inboundSchema;
  /** @deprecated use `MongoOneSpread$outboundSchema` instead. */
  export const outboundSchema = MongoOneSpread$outboundSchema;
  /** @deprecated use `MongoOneSpread$Outbound` instead. */
  export type Outbound = MongoOneSpread$Outbound;
}

export function mongoOneSpreadToJSON(mongoOneSpread: MongoOneSpread): string {
  return JSON.stringify(MongoOneSpread$outboundSchema.parse(mongoOneSpread));
}

export function mongoOneSpreadFromJSON(
  jsonString: string,
): SafeParseResult<MongoOneSpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOneSpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOneSpread' from JSON`,
  );
}

/** @internal */
export const MongoOnePreference$inboundSchema: z.ZodType<
  MongoOnePreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => MongoOneSpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type MongoOnePreference$Outbound = {
  Spread: MongoOneSpread$Outbound;
};

/** @internal */
export const MongoOnePreference$outboundSchema: z.ZodType<
  MongoOnePreference$Outbound,
  z.ZodTypeDef,
  MongoOnePreference
> = z.object({
  spread: z.lazy(() => MongoOneSpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOnePreference$ {
  /** @deprecated use `MongoOnePreference$inboundSchema` instead. */
  export const inboundSchema = MongoOnePreference$inboundSchema;
  /** @deprecated use `MongoOnePreference$outboundSchema` instead. */
  export const outboundSchema = MongoOnePreference$outboundSchema;
  /** @deprecated use `MongoOnePreference$Outbound` instead. */
  export type Outbound = MongoOnePreference$Outbound;
}

export function mongoOnePreferenceToJSON(
  mongoOnePreference: MongoOnePreference,
): string {
  return JSON.stringify(
    MongoOnePreference$outboundSchema.parse(mongoOnePreference),
  );
}

export function mongoOnePreferenceFromJSON(
  jsonString: string,
): SafeParseResult<MongoOnePreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOnePreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOnePreference' from JSON`,
  );
}

/** @internal */
export const MongoOnePlatform$inboundSchema: z.ZodType<
  MongoOnePlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type MongoOnePlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const MongoOnePlatform$outboundSchema: z.ZodType<
  MongoOnePlatform$Outbound,
  z.ZodTypeDef,
  MongoOnePlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOnePlatform$ {
  /** @deprecated use `MongoOnePlatform$inboundSchema` instead. */
  export const inboundSchema = MongoOnePlatform$inboundSchema;
  /** @deprecated use `MongoOnePlatform$outboundSchema` instead. */
  export const outboundSchema = MongoOnePlatform$outboundSchema;
  /** @deprecated use `MongoOnePlatform$Outbound` instead. */
  export type Outbound = MongoOnePlatform$Outbound;
}

export function mongoOnePlatformToJSON(
  mongoOnePlatform: MongoOnePlatform,
): string {
  return JSON.stringify(
    MongoOnePlatform$outboundSchema.parse(mongoOnePlatform),
  );
}

export function mongoOnePlatformFromJSON(
  jsonString: string,
): SafeParseResult<MongoOnePlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOnePlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOnePlatform' from JSON`,
  );
}

/** @internal */
export const MongoOnePlacementSwarm$inboundSchema: z.ZodType<
  MongoOnePlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  Preferences: z.array(z.lazy(() => MongoOnePreference$inboundSchema))
    .optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => MongoOnePlatform$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "Preferences": "preferences",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
  });
});

/** @internal */
export type MongoOnePlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  Preferences?: Array<MongoOnePreference$Outbound> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<MongoOnePlatform$Outbound> | undefined;
};

/** @internal */
export const MongoOnePlacementSwarm$outboundSchema: z.ZodType<
  MongoOnePlacementSwarm$Outbound,
  z.ZodTypeDef,
  MongoOnePlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  preferences: z.array(z.lazy(() => MongoOnePreference$outboundSchema))
    .optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => MongoOnePlatform$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    preferences: "Preferences",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOnePlacementSwarm$ {
  /** @deprecated use `MongoOnePlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoOnePlacementSwarm$inboundSchema;
  /** @deprecated use `MongoOnePlacementSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoOnePlacementSwarm$outboundSchema;
  /** @deprecated use `MongoOnePlacementSwarm$Outbound` instead. */
  export type Outbound = MongoOnePlacementSwarm$Outbound;
}

export function mongoOnePlacementSwarmToJSON(
  mongoOnePlacementSwarm: MongoOnePlacementSwarm,
): string {
  return JSON.stringify(
    MongoOnePlacementSwarm$outboundSchema.parse(mongoOnePlacementSwarm),
  );
}

export function mongoOnePlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoOnePlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOnePlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOnePlacementSwarm' from JSON`,
  );
}

/** @internal */
export const MongoOneUpdateConfigSwarm$inboundSchema: z.ZodType<
  MongoOneUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type MongoOneUpdateConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const MongoOneUpdateConfigSwarm$outboundSchema: z.ZodType<
  MongoOneUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  MongoOneUpdateConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneUpdateConfigSwarm$ {
  /** @deprecated use `MongoOneUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoOneUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `MongoOneUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoOneUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `MongoOneUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = MongoOneUpdateConfigSwarm$Outbound;
}

export function mongoOneUpdateConfigSwarmToJSON(
  mongoOneUpdateConfigSwarm: MongoOneUpdateConfigSwarm,
): string {
  return JSON.stringify(
    MongoOneUpdateConfigSwarm$outboundSchema.parse(mongoOneUpdateConfigSwarm),
  );
}

export function mongoOneUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoOneUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOneUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOneUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MongoOneRollbackConfigSwarm$inboundSchema: z.ZodType<
  MongoOneRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type MongoOneRollbackConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const MongoOneRollbackConfigSwarm$outboundSchema: z.ZodType<
  MongoOneRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  MongoOneRollbackConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneRollbackConfigSwarm$ {
  /** @deprecated use `MongoOneRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoOneRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `MongoOneRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoOneRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `MongoOneRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = MongoOneRollbackConfigSwarm$Outbound;
}

export function mongoOneRollbackConfigSwarmToJSON(
  mongoOneRollbackConfigSwarm: MongoOneRollbackConfigSwarm,
): string {
  return JSON.stringify(
    MongoOneRollbackConfigSwarm$outboundSchema.parse(
      mongoOneRollbackConfigSwarm,
    ),
  );
}

export function mongoOneRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoOneRollbackConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOneRollbackConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOneRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MongoOneReplicated$inboundSchema: z.ZodType<
  MongoOneReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type MongoOneReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const MongoOneReplicated$outboundSchema: z.ZodType<
  MongoOneReplicated$Outbound,
  z.ZodTypeDef,
  MongoOneReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneReplicated$ {
  /** @deprecated use `MongoOneReplicated$inboundSchema` instead. */
  export const inboundSchema = MongoOneReplicated$inboundSchema;
  /** @deprecated use `MongoOneReplicated$outboundSchema` instead. */
  export const outboundSchema = MongoOneReplicated$outboundSchema;
  /** @deprecated use `MongoOneReplicated$Outbound` instead. */
  export type Outbound = MongoOneReplicated$Outbound;
}

export function mongoOneReplicatedToJSON(
  mongoOneReplicated: MongoOneReplicated,
): string {
  return JSON.stringify(
    MongoOneReplicated$outboundSchema.parse(mongoOneReplicated),
  );
}

export function mongoOneReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<MongoOneReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOneReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOneReplicated' from JSON`,
  );
}

/** @internal */
export const MongoOneGlobal$inboundSchema: z.ZodType<
  MongoOneGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MongoOneGlobal$Outbound = {};

/** @internal */
export const MongoOneGlobal$outboundSchema: z.ZodType<
  MongoOneGlobal$Outbound,
  z.ZodTypeDef,
  MongoOneGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneGlobal$ {
  /** @deprecated use `MongoOneGlobal$inboundSchema` instead. */
  export const inboundSchema = MongoOneGlobal$inboundSchema;
  /** @deprecated use `MongoOneGlobal$outboundSchema` instead. */
  export const outboundSchema = MongoOneGlobal$outboundSchema;
  /** @deprecated use `MongoOneGlobal$Outbound` instead. */
  export type Outbound = MongoOneGlobal$Outbound;
}

export function mongoOneGlobalToJSON(mongoOneGlobal: MongoOneGlobal): string {
  return JSON.stringify(MongoOneGlobal$outboundSchema.parse(mongoOneGlobal));
}

export function mongoOneGlobalFromJSON(
  jsonString: string,
): SafeParseResult<MongoOneGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOneGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOneGlobal' from JSON`,
  );
}

/** @internal */
export const MongoOneReplicatedJob$inboundSchema: z.ZodType<
  MongoOneReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type MongoOneReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const MongoOneReplicatedJob$outboundSchema: z.ZodType<
  MongoOneReplicatedJob$Outbound,
  z.ZodTypeDef,
  MongoOneReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneReplicatedJob$ {
  /** @deprecated use `MongoOneReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = MongoOneReplicatedJob$inboundSchema;
  /** @deprecated use `MongoOneReplicatedJob$outboundSchema` instead. */
  export const outboundSchema = MongoOneReplicatedJob$outboundSchema;
  /** @deprecated use `MongoOneReplicatedJob$Outbound` instead. */
  export type Outbound = MongoOneReplicatedJob$Outbound;
}

export function mongoOneReplicatedJobToJSON(
  mongoOneReplicatedJob: MongoOneReplicatedJob,
): string {
  return JSON.stringify(
    MongoOneReplicatedJob$outboundSchema.parse(mongoOneReplicatedJob),
  );
}

export function mongoOneReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<MongoOneReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOneReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOneReplicatedJob' from JSON`,
  );
}

/** @internal */
export const MongoOneGlobalJob$inboundSchema: z.ZodType<
  MongoOneGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MongoOneGlobalJob$Outbound = {};

/** @internal */
export const MongoOneGlobalJob$outboundSchema: z.ZodType<
  MongoOneGlobalJob$Outbound,
  z.ZodTypeDef,
  MongoOneGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneGlobalJob$ {
  /** @deprecated use `MongoOneGlobalJob$inboundSchema` instead. */
  export const inboundSchema = MongoOneGlobalJob$inboundSchema;
  /** @deprecated use `MongoOneGlobalJob$outboundSchema` instead. */
  export const outboundSchema = MongoOneGlobalJob$outboundSchema;
  /** @deprecated use `MongoOneGlobalJob$Outbound` instead. */
  export type Outbound = MongoOneGlobalJob$Outbound;
}

export function mongoOneGlobalJobToJSON(
  mongoOneGlobalJob: MongoOneGlobalJob,
): string {
  return JSON.stringify(
    MongoOneGlobalJob$outboundSchema.parse(mongoOneGlobalJob),
  );
}

export function mongoOneGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<MongoOneGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOneGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOneGlobalJob' from JSON`,
  );
}

/** @internal */
export const MongoOneModeSwarm$inboundSchema: z.ZodType<
  MongoOneModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicated: z.lazy(() => MongoOneReplicated$inboundSchema).optional(),
  Global: z.lazy(() => MongoOneGlobal$inboundSchema).optional(),
  ReplicatedJob: z.lazy(() => MongoOneReplicatedJob$inboundSchema).optional(),
  GlobalJob: z.lazy(() => MongoOneGlobalJob$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicated": "replicated",
    "Global": "global",
    "ReplicatedJob": "replicatedJob",
    "GlobalJob": "globalJob",
  });
});

/** @internal */
export type MongoOneModeSwarm$Outbound = {
  Replicated?: MongoOneReplicated$Outbound | undefined;
  Global?: MongoOneGlobal$Outbound | undefined;
  ReplicatedJob?: MongoOneReplicatedJob$Outbound | undefined;
  GlobalJob?: MongoOneGlobalJob$Outbound | undefined;
};

/** @internal */
export const MongoOneModeSwarm$outboundSchema: z.ZodType<
  MongoOneModeSwarm$Outbound,
  z.ZodTypeDef,
  MongoOneModeSwarm
> = z.object({
  replicated: z.lazy(() => MongoOneReplicated$outboundSchema).optional(),
  global: z.lazy(() => MongoOneGlobal$outboundSchema).optional(),
  replicatedJob: z.lazy(() => MongoOneReplicatedJob$outboundSchema).optional(),
  globalJob: z.lazy(() => MongoOneGlobalJob$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    replicated: "Replicated",
    global: "Global",
    replicatedJob: "ReplicatedJob",
    globalJob: "GlobalJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneModeSwarm$ {
  /** @deprecated use `MongoOneModeSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoOneModeSwarm$inboundSchema;
  /** @deprecated use `MongoOneModeSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoOneModeSwarm$outboundSchema;
  /** @deprecated use `MongoOneModeSwarm$Outbound` instead. */
  export type Outbound = MongoOneModeSwarm$Outbound;
}

export function mongoOneModeSwarmToJSON(
  mongoOneModeSwarm: MongoOneModeSwarm,
): string {
  return JSON.stringify(
    MongoOneModeSwarm$outboundSchema.parse(mongoOneModeSwarm),
  );
}

export function mongoOneModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoOneModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOneModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOneModeSwarm' from JSON`,
  );
}

/** @internal */
export const MongoOneDriverOpts$inboundSchema: z.ZodType<
  MongoOneDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MongoOneDriverOpts$Outbound = {};

/** @internal */
export const MongoOneDriverOpts$outboundSchema: z.ZodType<
  MongoOneDriverOpts$Outbound,
  z.ZodTypeDef,
  MongoOneDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneDriverOpts$ {
  /** @deprecated use `MongoOneDriverOpts$inboundSchema` instead. */
  export const inboundSchema = MongoOneDriverOpts$inboundSchema;
  /** @deprecated use `MongoOneDriverOpts$outboundSchema` instead. */
  export const outboundSchema = MongoOneDriverOpts$outboundSchema;
  /** @deprecated use `MongoOneDriverOpts$Outbound` instead. */
  export type Outbound = MongoOneDriverOpts$Outbound;
}

export function mongoOneDriverOptsToJSON(
  mongoOneDriverOpts: MongoOneDriverOpts,
): string {
  return JSON.stringify(
    MongoOneDriverOpts$outboundSchema.parse(mongoOneDriverOpts),
  );
}

export function mongoOneDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<MongoOneDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOneDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOneDriverOpts' from JSON`,
  );
}

/** @internal */
export const MongoOneNetworkSwarm$inboundSchema: z.ZodType<
  MongoOneNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Target: z.string().optional(),
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => MongoOneDriverOpts$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Target": "target",
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
  });
});

/** @internal */
export type MongoOneNetworkSwarm$Outbound = {
  Target?: string | undefined;
  Aliases?: Array<string> | undefined;
  DriverOpts?: MongoOneDriverOpts$Outbound | undefined;
};

/** @internal */
export const MongoOneNetworkSwarm$outboundSchema: z.ZodType<
  MongoOneNetworkSwarm$Outbound,
  z.ZodTypeDef,
  MongoOneNetworkSwarm
> = z.object({
  target: z.string().optional(),
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => MongoOneDriverOpts$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    target: "Target",
    aliases: "Aliases",
    driverOpts: "DriverOpts",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneNetworkSwarm$ {
  /** @deprecated use `MongoOneNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoOneNetworkSwarm$inboundSchema;
  /** @deprecated use `MongoOneNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoOneNetworkSwarm$outboundSchema;
  /** @deprecated use `MongoOneNetworkSwarm$Outbound` instead. */
  export type Outbound = MongoOneNetworkSwarm$Outbound;
}

export function mongoOneNetworkSwarmToJSON(
  mongoOneNetworkSwarm: MongoOneNetworkSwarm,
): string {
  return JSON.stringify(
    MongoOneNetworkSwarm$outboundSchema.parse(mongoOneNetworkSwarm),
  );
}

export function mongoOneNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoOneNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOneNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOneNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const MongoOneProject$inboundSchema: z.ZodType<
  MongoOneProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  organizationId: z.string(),
  env: z.string(),
});

/** @internal */
export type MongoOneProject$Outbound = {
  projectId: string;
  name: string;
  description: string | null;
  createdAt: string;
  organizationId: string;
  env: string;
};

/** @internal */
export const MongoOneProject$outboundSchema: z.ZodType<
  MongoOneProject$Outbound,
  z.ZodTypeDef,
  MongoOneProject
> = z.object({
  projectId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  organizationId: z.string(),
  env: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneProject$ {
  /** @deprecated use `MongoOneProject$inboundSchema` instead. */
  export const inboundSchema = MongoOneProject$inboundSchema;
  /** @deprecated use `MongoOneProject$outboundSchema` instead. */
  export const outboundSchema = MongoOneProject$outboundSchema;
  /** @deprecated use `MongoOneProject$Outbound` instead. */
  export type Outbound = MongoOneProject$Outbound;
}

export function mongoOneProjectToJSON(
  mongoOneProject: MongoOneProject,
): string {
  return JSON.stringify(MongoOneProject$outboundSchema.parse(mongoOneProject));
}

export function mongoOneProjectFromJSON(
  jsonString: string,
): SafeParseResult<MongoOneProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOneProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOneProject' from JSON`,
  );
}

/** @internal */
export const MongoOneEnvironment$inboundSchema: z.ZodType<
  MongoOneEnvironment,
  z.ZodTypeDef,
  unknown
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
  project: z.lazy(() => MongoOneProject$inboundSchema),
});

/** @internal */
export type MongoOneEnvironment$Outbound = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
  project: MongoOneProject$Outbound;
};

/** @internal */
export const MongoOneEnvironment$outboundSchema: z.ZodType<
  MongoOneEnvironment$Outbound,
  z.ZodTypeDef,
  MongoOneEnvironment
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
  project: z.lazy(() => MongoOneProject$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneEnvironment$ {
  /** @deprecated use `MongoOneEnvironment$inboundSchema` instead. */
  export const inboundSchema = MongoOneEnvironment$inboundSchema;
  /** @deprecated use `MongoOneEnvironment$outboundSchema` instead. */
  export const outboundSchema = MongoOneEnvironment$outboundSchema;
  /** @deprecated use `MongoOneEnvironment$Outbound` instead. */
  export type Outbound = MongoOneEnvironment$Outbound;
}

export function mongoOneEnvironmentToJSON(
  mongoOneEnvironment: MongoOneEnvironment,
): string {
  return JSON.stringify(
    MongoOneEnvironment$outboundSchema.parse(mongoOneEnvironment),
  );
}

export function mongoOneEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<MongoOneEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOneEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOneEnvironment' from JSON`,
  );
}

/** @internal */
export const MongoOneType$inboundSchema: z.ZodNativeEnum<typeof MongoOneType> =
  z.nativeEnum(MongoOneType);

/** @internal */
export const MongoOneType$outboundSchema: z.ZodNativeEnum<typeof MongoOneType> =
  MongoOneType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneType$ {
  /** @deprecated use `MongoOneType$inboundSchema` instead. */
  export const inboundSchema = MongoOneType$inboundSchema;
  /** @deprecated use `MongoOneType$outboundSchema` instead. */
  export const outboundSchema = MongoOneType$outboundSchema;
}

/** @internal */
export const MongoOneServiceType$inboundSchema: z.ZodNativeEnum<
  typeof MongoOneServiceType
> = z.nativeEnum(MongoOneServiceType);

/** @internal */
export const MongoOneServiceType$outboundSchema: z.ZodNativeEnum<
  typeof MongoOneServiceType
> = MongoOneServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneServiceType$ {
  /** @deprecated use `MongoOneServiceType$inboundSchema` instead. */
  export const inboundSchema = MongoOneServiceType$inboundSchema;
  /** @deprecated use `MongoOneServiceType$outboundSchema` instead. */
  export const outboundSchema = MongoOneServiceType$outboundSchema;
}

/** @internal */
export const MongoOneMount$inboundSchema: z.ZodType<
  MongoOneMount,
  z.ZodTypeDef,
  unknown
> = z.object({
  mountId: z.string(),
  type: MongoOneType$inboundSchema,
  hostPath: z.nullable(z.string()),
  volumeName: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  content: z.nullable(z.string()),
  serviceType: MongoOneServiceType$inboundSchema,
  mountPath: z.string(),
  applicationId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
});

/** @internal */
export type MongoOneMount$Outbound = {
  mountId: string;
  type: string;
  hostPath: string | null;
  volumeName: string | null;
  filePath: string | null;
  content: string | null;
  serviceType: string;
  mountPath: string;
  applicationId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mysqlId: string | null;
  redisId: string | null;
  composeId: string | null;
};

/** @internal */
export const MongoOneMount$outboundSchema: z.ZodType<
  MongoOneMount$Outbound,
  z.ZodTypeDef,
  MongoOneMount
> = z.object({
  mountId: z.string(),
  type: MongoOneType$outboundSchema,
  hostPath: z.nullable(z.string()),
  volumeName: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  content: z.nullable(z.string()),
  serviceType: MongoOneServiceType$outboundSchema,
  mountPath: z.string(),
  applicationId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneMount$ {
  /** @deprecated use `MongoOneMount$inboundSchema` instead. */
  export const inboundSchema = MongoOneMount$inboundSchema;
  /** @deprecated use `MongoOneMount$outboundSchema` instead. */
  export const outboundSchema = MongoOneMount$outboundSchema;
  /** @deprecated use `MongoOneMount$Outbound` instead. */
  export type Outbound = MongoOneMount$Outbound;
}

export function mongoOneMountToJSON(mongoOneMount: MongoOneMount): string {
  return JSON.stringify(MongoOneMount$outboundSchema.parse(mongoOneMount));
}

export function mongoOneMountFromJSON(
  jsonString: string,
): SafeParseResult<MongoOneMount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOneMount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOneMount' from JSON`,
  );
}

/** @internal */
export const MongoOneServerStatus$inboundSchema: z.ZodNativeEnum<
  typeof MongoOneServerStatus
> = z.nativeEnum(MongoOneServerStatus);

/** @internal */
export const MongoOneServerStatus$outboundSchema: z.ZodNativeEnum<
  typeof MongoOneServerStatus
> = MongoOneServerStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneServerStatus$ {
  /** @deprecated use `MongoOneServerStatus$inboundSchema` instead. */
  export const inboundSchema = MongoOneServerStatus$inboundSchema;
  /** @deprecated use `MongoOneServerStatus$outboundSchema` instead. */
  export const outboundSchema = MongoOneServerStatus$outboundSchema;
}

/** @internal */
export const MongoOneMetricsConfigEnum$inboundSchema: z.ZodNativeEnum<
  typeof MongoOneMetricsConfigEnum
> = z.nativeEnum(MongoOneMetricsConfigEnum);

/** @internal */
export const MongoOneMetricsConfigEnum$outboundSchema: z.ZodNativeEnum<
  typeof MongoOneMetricsConfigEnum
> = MongoOneMetricsConfigEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneMetricsConfigEnum$ {
  /** @deprecated use `MongoOneMetricsConfigEnum$inboundSchema` instead. */
  export const inboundSchema = MongoOneMetricsConfigEnum$inboundSchema;
  /** @deprecated use `MongoOneMetricsConfigEnum$outboundSchema` instead. */
  export const outboundSchema = MongoOneMetricsConfigEnum$outboundSchema;
}

/** @internal */
export const MongoOneMetricsConfigUnion1$inboundSchema: z.ZodType<
  MongoOneMetricsConfigUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  MongoOneMetricsConfigEnum$inboundSchema,
]);

/** @internal */
export type MongoOneMetricsConfigUnion1$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const MongoOneMetricsConfigUnion1$outboundSchema: z.ZodType<
  MongoOneMetricsConfigUnion1$Outbound,
  z.ZodTypeDef,
  MongoOneMetricsConfigUnion1
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  MongoOneMetricsConfigEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneMetricsConfigUnion1$ {
  /** @deprecated use `MongoOneMetricsConfigUnion1$inboundSchema` instead. */
  export const inboundSchema = MongoOneMetricsConfigUnion1$inboundSchema;
  /** @deprecated use `MongoOneMetricsConfigUnion1$outboundSchema` instead. */
  export const outboundSchema = MongoOneMetricsConfigUnion1$outboundSchema;
  /** @deprecated use `MongoOneMetricsConfigUnion1$Outbound` instead. */
  export type Outbound = MongoOneMetricsConfigUnion1$Outbound;
}

export function mongoOneMetricsConfigUnion1ToJSON(
  mongoOneMetricsConfigUnion1: MongoOneMetricsConfigUnion1,
): string {
  return JSON.stringify(
    MongoOneMetricsConfigUnion1$outboundSchema.parse(
      mongoOneMetricsConfigUnion1,
    ),
  );
}

export function mongoOneMetricsConfigUnion1FromJSON(
  jsonString: string,
): SafeParseResult<MongoOneMetricsConfigUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOneMetricsConfigUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOneMetricsConfigUnion1' from JSON`,
  );
}

/** @internal */
export const MongoOneMetricsConfigUnion2$inboundSchema: z.ZodType<
  MongoOneMetricsConfigUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    MongoOneMetricsConfigEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type MongoOneMetricsConfigUnion2$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const MongoOneMetricsConfigUnion2$outboundSchema: z.ZodType<
  MongoOneMetricsConfigUnion2$Outbound,
  z.ZodTypeDef,
  MongoOneMetricsConfigUnion2
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    MongoOneMetricsConfigEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneMetricsConfigUnion2$ {
  /** @deprecated use `MongoOneMetricsConfigUnion2$inboundSchema` instead. */
  export const inboundSchema = MongoOneMetricsConfigUnion2$inboundSchema;
  /** @deprecated use `MongoOneMetricsConfigUnion2$outboundSchema` instead. */
  export const outboundSchema = MongoOneMetricsConfigUnion2$outboundSchema;
  /** @deprecated use `MongoOneMetricsConfigUnion2$Outbound` instead. */
  export type Outbound = MongoOneMetricsConfigUnion2$Outbound;
}

export function mongoOneMetricsConfigUnion2ToJSON(
  mongoOneMetricsConfigUnion2: MongoOneMetricsConfigUnion2,
): string {
  return JSON.stringify(
    MongoOneMetricsConfigUnion2$outboundSchema.parse(
      mongoOneMetricsConfigUnion2,
    ),
  );
}

export function mongoOneMetricsConfigUnion2FromJSON(
  jsonString: string,
): SafeParseResult<MongoOneMetricsConfigUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOneMetricsConfigUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOneMetricsConfigUnion2' from JSON`,
  );
}

/** @internal */
export const MongoOneServer$inboundSchema: z.ZodType<
  MongoOneServer,
  z.ZodTypeDef,
  unknown
> = z.object({
  serverId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  ipAddress: z.string(),
  port: z.number(),
  username: z.string(),
  appName: z.string(),
  enableDockerCleanup: z.boolean(),
  createdAt: z.string(),
  organizationId: z.string(),
  serverStatus: MongoOneServerStatus$inboundSchema,
  command: z.string(),
  sshKeyId: z.nullable(z.string()),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      MongoOneMetricsConfigEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
});

/** @internal */
export type MongoOneServer$Outbound = {
  serverId: string;
  name: string;
  description: string | null;
  ipAddress: string;
  port: number;
  username: string;
  appName: string;
  enableDockerCleanup: boolean;
  createdAt: string;
  organizationId: string;
  serverStatus: string;
  command: string;
  sshKeyId: string | null;
  metricsConfig: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  };
};

/** @internal */
export const MongoOneServer$outboundSchema: z.ZodType<
  MongoOneServer$Outbound,
  z.ZodTypeDef,
  MongoOneServer
> = z.object({
  serverId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  ipAddress: z.string(),
  port: z.number(),
  username: z.string(),
  appName: z.string(),
  enableDockerCleanup: z.boolean(),
  createdAt: z.string(),
  organizationId: z.string(),
  serverStatus: MongoOneServerStatus$outboundSchema,
  command: z.string(),
  sshKeyId: z.nullable(z.string()),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      MongoOneMetricsConfigEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneServer$ {
  /** @deprecated use `MongoOneServer$inboundSchema` instead. */
  export const inboundSchema = MongoOneServer$inboundSchema;
  /** @deprecated use `MongoOneServer$outboundSchema` instead. */
  export const outboundSchema = MongoOneServer$outboundSchema;
  /** @deprecated use `MongoOneServer$Outbound` instead. */
  export type Outbound = MongoOneServer$Outbound;
}

export function mongoOneServerToJSON(mongoOneServer: MongoOneServer): string {
  return JSON.stringify(MongoOneServer$outboundSchema.parse(mongoOneServer));
}

export function mongoOneServerFromJSON(
  jsonString: string,
): SafeParseResult<MongoOneServer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOneServer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOneServer' from JSON`,
  );
}

/** @internal */
export const MongoOneBackupType$inboundSchema: z.ZodNativeEnum<
  typeof MongoOneBackupType
> = z.nativeEnum(MongoOneBackupType);

/** @internal */
export const MongoOneBackupType$outboundSchema: z.ZodNativeEnum<
  typeof MongoOneBackupType
> = MongoOneBackupType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneBackupType$ {
  /** @deprecated use `MongoOneBackupType$inboundSchema` instead. */
  export const inboundSchema = MongoOneBackupType$inboundSchema;
  /** @deprecated use `MongoOneBackupType$outboundSchema` instead. */
  export const outboundSchema = MongoOneBackupType$outboundSchema;
}

/** @internal */
export const MongoOneDatabaseType$inboundSchema: z.ZodNativeEnum<
  typeof MongoOneDatabaseType
> = z.nativeEnum(MongoOneDatabaseType);

/** @internal */
export const MongoOneDatabaseType$outboundSchema: z.ZodNativeEnum<
  typeof MongoOneDatabaseType
> = MongoOneDatabaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneDatabaseType$ {
  /** @deprecated use `MongoOneDatabaseType$inboundSchema` instead. */
  export const inboundSchema = MongoOneDatabaseType$inboundSchema;
  /** @deprecated use `MongoOneDatabaseType$outboundSchema` instead. */
  export const outboundSchema = MongoOneDatabaseType$outboundSchema;
}

/** @internal */
export const MongoOneMetadataEnum$inboundSchema: z.ZodNativeEnum<
  typeof MongoOneMetadataEnum
> = z.nativeEnum(MongoOneMetadataEnum);

/** @internal */
export const MongoOneMetadataEnum$outboundSchema: z.ZodNativeEnum<
  typeof MongoOneMetadataEnum
> = MongoOneMetadataEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneMetadataEnum$ {
  /** @deprecated use `MongoOneMetadataEnum$inboundSchema` instead. */
  export const inboundSchema = MongoOneMetadataEnum$inboundSchema;
  /** @deprecated use `MongoOneMetadataEnum$outboundSchema` instead. */
  export const outboundSchema = MongoOneMetadataEnum$outboundSchema;
}

/** @internal */
export const MongoOnePostgres$inboundSchema: z.ZodType<
  MongoOnePostgres,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseUser: z.string(),
});

/** @internal */
export type MongoOnePostgres$Outbound = {
  databaseUser: string;
};

/** @internal */
export const MongoOnePostgres$outboundSchema: z.ZodType<
  MongoOnePostgres$Outbound,
  z.ZodTypeDef,
  MongoOnePostgres
> = z.object({
  databaseUser: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOnePostgres$ {
  /** @deprecated use `MongoOnePostgres$inboundSchema` instead. */
  export const inboundSchema = MongoOnePostgres$inboundSchema;
  /** @deprecated use `MongoOnePostgres$outboundSchema` instead. */
  export const outboundSchema = MongoOnePostgres$outboundSchema;
  /** @deprecated use `MongoOnePostgres$Outbound` instead. */
  export type Outbound = MongoOnePostgres$Outbound;
}

export function mongoOnePostgresToJSON(
  mongoOnePostgres: MongoOnePostgres,
): string {
  return JSON.stringify(
    MongoOnePostgres$outboundSchema.parse(mongoOnePostgres),
  );
}

export function mongoOnePostgresFromJSON(
  jsonString: string,
): SafeParseResult<MongoOnePostgres, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOnePostgres$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOnePostgres' from JSON`,
  );
}

/** @internal */
export const MongoOneMariadb$inboundSchema: z.ZodType<
  MongoOneMariadb,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseUser: z.string(),
  databasePassword: z.string(),
});

/** @internal */
export type MongoOneMariadb$Outbound = {
  databaseUser: string;
  databasePassword: string;
};

/** @internal */
export const MongoOneMariadb$outboundSchema: z.ZodType<
  MongoOneMariadb$Outbound,
  z.ZodTypeDef,
  MongoOneMariadb
> = z.object({
  databaseUser: z.string(),
  databasePassword: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneMariadb$ {
  /** @deprecated use `MongoOneMariadb$inboundSchema` instead. */
  export const inboundSchema = MongoOneMariadb$inboundSchema;
  /** @deprecated use `MongoOneMariadb$outboundSchema` instead. */
  export const outboundSchema = MongoOneMariadb$outboundSchema;
  /** @deprecated use `MongoOneMariadb$Outbound` instead. */
  export type Outbound = MongoOneMariadb$Outbound;
}

export function mongoOneMariadbToJSON(
  mongoOneMariadb: MongoOneMariadb,
): string {
  return JSON.stringify(MongoOneMariadb$outboundSchema.parse(mongoOneMariadb));
}

export function mongoOneMariadbFromJSON(
  jsonString: string,
): SafeParseResult<MongoOneMariadb, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOneMariadb$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOneMariadb' from JSON`,
  );
}

/** @internal */
export const MongoOneMongo$inboundSchema: z.ZodType<
  MongoOneMongo,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseUser: z.string(),
  databasePassword: z.string(),
});

/** @internal */
export type MongoOneMongo$Outbound = {
  databaseUser: string;
  databasePassword: string;
};

/** @internal */
export const MongoOneMongo$outboundSchema: z.ZodType<
  MongoOneMongo$Outbound,
  z.ZodTypeDef,
  MongoOneMongo
> = z.object({
  databaseUser: z.string(),
  databasePassword: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneMongo$ {
  /** @deprecated use `MongoOneMongo$inboundSchema` instead. */
  export const inboundSchema = MongoOneMongo$inboundSchema;
  /** @deprecated use `MongoOneMongo$outboundSchema` instead. */
  export const outboundSchema = MongoOneMongo$outboundSchema;
  /** @deprecated use `MongoOneMongo$Outbound` instead. */
  export type Outbound = MongoOneMongo$Outbound;
}

export function mongoOneMongoToJSON(mongoOneMongo: MongoOneMongo): string {
  return JSON.stringify(MongoOneMongo$outboundSchema.parse(mongoOneMongo));
}

export function mongoOneMongoFromJSON(
  jsonString: string,
): SafeParseResult<MongoOneMongo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOneMongo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOneMongo' from JSON`,
  );
}

/** @internal */
export const MongoOneMysql$inboundSchema: z.ZodType<
  MongoOneMysql,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseRootPassword: z.string(),
});

/** @internal */
export type MongoOneMysql$Outbound = {
  databaseRootPassword: string;
};

/** @internal */
export const MongoOneMysql$outboundSchema: z.ZodType<
  MongoOneMysql$Outbound,
  z.ZodTypeDef,
  MongoOneMysql
> = z.object({
  databaseRootPassword: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneMysql$ {
  /** @deprecated use `MongoOneMysql$inboundSchema` instead. */
  export const inboundSchema = MongoOneMysql$inboundSchema;
  /** @deprecated use `MongoOneMysql$outboundSchema` instead. */
  export const outboundSchema = MongoOneMysql$outboundSchema;
  /** @deprecated use `MongoOneMysql$Outbound` instead. */
  export type Outbound = MongoOneMysql$Outbound;
}

export function mongoOneMysqlToJSON(mongoOneMysql: MongoOneMysql): string {
  return JSON.stringify(MongoOneMysql$outboundSchema.parse(mongoOneMysql));
}

export function mongoOneMysqlFromJSON(
  jsonString: string,
): SafeParseResult<MongoOneMysql, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOneMysql$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOneMysql' from JSON`,
  );
}

/** @internal */
export const MongoOneMetadata$inboundSchema: z.ZodType<
  MongoOneMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  postgres: z.lazy(() => MongoOnePostgres$inboundSchema).optional(),
  mariadb: z.lazy(() => MongoOneMariadb$inboundSchema).optional(),
  mongo: z.lazy(() => MongoOneMongo$inboundSchema).optional(),
  mysql: z.lazy(() => MongoOneMysql$inboundSchema).optional(),
});

/** @internal */
export type MongoOneMetadata$Outbound = {
  postgres?: MongoOnePostgres$Outbound | undefined;
  mariadb?: MongoOneMariadb$Outbound | undefined;
  mongo?: MongoOneMongo$Outbound | undefined;
  mysql?: MongoOneMysql$Outbound | undefined;
};

/** @internal */
export const MongoOneMetadata$outboundSchema: z.ZodType<
  MongoOneMetadata$Outbound,
  z.ZodTypeDef,
  MongoOneMetadata
> = z.object({
  postgres: z.lazy(() => MongoOnePostgres$outboundSchema).optional(),
  mariadb: z.lazy(() => MongoOneMariadb$outboundSchema).optional(),
  mongo: z.lazy(() => MongoOneMongo$outboundSchema).optional(),
  mysql: z.lazy(() => MongoOneMysql$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneMetadata$ {
  /** @deprecated use `MongoOneMetadata$inboundSchema` instead. */
  export const inboundSchema = MongoOneMetadata$inboundSchema;
  /** @deprecated use `MongoOneMetadata$outboundSchema` instead. */
  export const outboundSchema = MongoOneMetadata$outboundSchema;
  /** @deprecated use `MongoOneMetadata$Outbound` instead. */
  export type Outbound = MongoOneMetadata$Outbound;
}

export function mongoOneMetadataToJSON(
  mongoOneMetadata: MongoOneMetadata,
): string {
  return JSON.stringify(
    MongoOneMetadata$outboundSchema.parse(mongoOneMetadata),
  );
}

export function mongoOneMetadataFromJSON(
  jsonString: string,
): SafeParseResult<MongoOneMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOneMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOneMetadata' from JSON`,
  );
}

/** @internal */
export const MongoOneMetadataUnion$inboundSchema: z.ZodType<
  MongoOneMetadataUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => MongoOneMetadata$inboundSchema),
  MongoOneMetadataEnum$inboundSchema,
]);

/** @internal */
export type MongoOneMetadataUnion$Outbound = MongoOneMetadata$Outbound | string;

/** @internal */
export const MongoOneMetadataUnion$outboundSchema: z.ZodType<
  MongoOneMetadataUnion$Outbound,
  z.ZodTypeDef,
  MongoOneMetadataUnion
> = z.union([
  z.lazy(() => MongoOneMetadata$outboundSchema),
  MongoOneMetadataEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneMetadataUnion$ {
  /** @deprecated use `MongoOneMetadataUnion$inboundSchema` instead. */
  export const inboundSchema = MongoOneMetadataUnion$inboundSchema;
  /** @deprecated use `MongoOneMetadataUnion$outboundSchema` instead. */
  export const outboundSchema = MongoOneMetadataUnion$outboundSchema;
  /** @deprecated use `MongoOneMetadataUnion$Outbound` instead. */
  export type Outbound = MongoOneMetadataUnion$Outbound;
}

export function mongoOneMetadataUnionToJSON(
  mongoOneMetadataUnion: MongoOneMetadataUnion,
): string {
  return JSON.stringify(
    MongoOneMetadataUnion$outboundSchema.parse(mongoOneMetadataUnion),
  );
}

export function mongoOneMetadataUnionFromJSON(
  jsonString: string,
): SafeParseResult<MongoOneMetadataUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOneMetadataUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOneMetadataUnion' from JSON`,
  );
}

/** @internal */
export const MongoOneBackup$inboundSchema: z.ZodType<
  MongoOneBackup,
  z.ZodTypeDef,
  unknown
> = z.object({
  backupId: z.string(),
  appName: z.string(),
  schedule: z.string(),
  enabled: z.nullable(z.boolean()),
  database: z.string(),
  prefix: z.string(),
  serviceName: z.nullable(z.string()),
  destinationId: z.string(),
  keepLatestCount: z.nullable(z.number()),
  backupType: MongoOneBackupType$inboundSchema,
  databaseType: MongoOneDatabaseType$inboundSchema,
  composeId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  userId: z.nullable(z.string()),
  metadata: z.nullable(
    z.union([
      z.lazy(() => MongoOneMetadata$inboundSchema),
      MongoOneMetadataEnum$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type MongoOneBackup$Outbound = {
  backupId: string;
  appName: string;
  schedule: string;
  enabled: boolean | null;
  database: string;
  prefix: string;
  serviceName: string | null;
  destinationId: string;
  keepLatestCount: number | null;
  backupType: string;
  databaseType: string;
  composeId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mysqlId: string | null;
  mongoId: string | null;
  userId: string | null;
  metadata?: MongoOneMetadata$Outbound | string | null | undefined;
};

/** @internal */
export const MongoOneBackup$outboundSchema: z.ZodType<
  MongoOneBackup$Outbound,
  z.ZodTypeDef,
  MongoOneBackup
> = z.object({
  backupId: z.string(),
  appName: z.string(),
  schedule: z.string(),
  enabled: z.nullable(z.boolean()),
  database: z.string(),
  prefix: z.string(),
  serviceName: z.nullable(z.string()),
  destinationId: z.string(),
  keepLatestCount: z.nullable(z.number()),
  backupType: MongoOneBackupType$outboundSchema,
  databaseType: MongoOneDatabaseType$outboundSchema,
  composeId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  userId: z.nullable(z.string()),
  metadata: z.nullable(
    z.union([
      z.lazy(() => MongoOneMetadata$outboundSchema),
      MongoOneMetadataEnum$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneBackup$ {
  /** @deprecated use `MongoOneBackup$inboundSchema` instead. */
  export const inboundSchema = MongoOneBackup$inboundSchema;
  /** @deprecated use `MongoOneBackup$outboundSchema` instead. */
  export const outboundSchema = MongoOneBackup$outboundSchema;
  /** @deprecated use `MongoOneBackup$Outbound` instead. */
  export type Outbound = MongoOneBackup$Outbound;
}

export function mongoOneBackupToJSON(mongoOneBackup: MongoOneBackup): string {
  return JSON.stringify(MongoOneBackup$outboundSchema.parse(mongoOneBackup));
}

export function mongoOneBackupFromJSON(
  jsonString: string,
): SafeParseResult<MongoOneBackup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOneBackup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOneBackup' from JSON`,
  );
}

/** @internal */
export const MongoOneResponseBody$inboundSchema: z.ZodType<
  MongoOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  mongoId: z.string(),
  name: z.string(),
  appName: z.string(),
  description: z.nullable(z.string()),
  databaseUser: z.string(),
  databasePassword: z.string(),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  applicationStatus: MongoOneApplicationStatus$inboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => MongoOneHealthCheckSwarm$inboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MongoOneRestartPolicySwarm$inboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => MongoOnePlacementSwarm$inboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MongoOneUpdateConfigSwarm$inboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MongoOneRollbackConfigSwarm$inboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => MongoOneModeSwarm$inboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MongoOneNetworkSwarm$inboundSchema)),
  ),
  replicas: z.number(),
  createdAt: z.string(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
  replicaSets: z.nullable(z.boolean()),
  environment: z.lazy(() => MongoOneEnvironment$inboundSchema),
  mounts: z.array(z.lazy(() => MongoOneMount$inboundSchema)),
  server: z.nullable(z.lazy(() => MongoOneServer$inboundSchema)),
  backups: z.array(z.lazy(() => MongoOneBackup$inboundSchema)),
});

/** @internal */
export type MongoOneResponseBody$Outbound = {
  mongoId: string;
  name: string;
  appName: string;
  description: string | null;
  databaseUser: string;
  databasePassword: string;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  externalPort: number | null;
  applicationStatus: string;
  healthCheckSwarm: MongoOneHealthCheckSwarm$Outbound | null;
  restartPolicySwarm: MongoOneRestartPolicySwarm$Outbound | null;
  placementSwarm: MongoOnePlacementSwarm$Outbound | null;
  updateConfigSwarm: MongoOneUpdateConfigSwarm$Outbound | null;
  rollbackConfigSwarm: MongoOneRollbackConfigSwarm$Outbound | null;
  modeSwarm: MongoOneModeSwarm$Outbound | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<MongoOneNetworkSwarm$Outbound> | null;
  replicas: number;
  createdAt: string;
  environmentId: string;
  serverId: string | null;
  replicaSets: boolean | null;
  environment: MongoOneEnvironment$Outbound;
  mounts: Array<MongoOneMount$Outbound>;
  server: MongoOneServer$Outbound | null;
  backups: Array<MongoOneBackup$Outbound>;
};

/** @internal */
export const MongoOneResponseBody$outboundSchema: z.ZodType<
  MongoOneResponseBody$Outbound,
  z.ZodTypeDef,
  MongoOneResponseBody
> = z.object({
  mongoId: z.string(),
  name: z.string(),
  appName: z.string(),
  description: z.nullable(z.string()),
  databaseUser: z.string(),
  databasePassword: z.string(),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  applicationStatus: MongoOneApplicationStatus$outboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => MongoOneHealthCheckSwarm$outboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MongoOneRestartPolicySwarm$outboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => MongoOnePlacementSwarm$outboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MongoOneUpdateConfigSwarm$outboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MongoOneRollbackConfigSwarm$outboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => MongoOneModeSwarm$outboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MongoOneNetworkSwarm$outboundSchema)),
  ),
  replicas: z.number(),
  createdAt: z.string(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
  replicaSets: z.nullable(z.boolean()),
  environment: z.lazy(() => MongoOneEnvironment$outboundSchema),
  mounts: z.array(z.lazy(() => MongoOneMount$outboundSchema)),
  server: z.nullable(z.lazy(() => MongoOneServer$outboundSchema)),
  backups: z.array(z.lazy(() => MongoOneBackup$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneResponseBody$ {
  /** @deprecated use `MongoOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = MongoOneResponseBody$inboundSchema;
  /** @deprecated use `MongoOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = MongoOneResponseBody$outboundSchema;
  /** @deprecated use `MongoOneResponseBody$Outbound` instead. */
  export type Outbound = MongoOneResponseBody$Outbound;
}

export function mongoOneResponseBodyToJSON(
  mongoOneResponseBody: MongoOneResponseBody,
): string {
  return JSON.stringify(
    MongoOneResponseBody$outboundSchema.parse(mongoOneResponseBody),
  );
}

export function mongoOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<MongoOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOneResponseBody' from JSON`,
  );
}

/** @internal */
export const MongoOneResponse$inboundSchema: z.ZodType<
  MongoOneResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => MongoOneResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type MongoOneResponse$Outbound =
  | MongoOneResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const MongoOneResponse$outboundSchema: z.ZodType<
  MongoOneResponse$Outbound,
  z.ZodTypeDef,
  MongoOneResponse
> = z.union([
  z.lazy(() => MongoOneResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoOneResponse$ {
  /** @deprecated use `MongoOneResponse$inboundSchema` instead. */
  export const inboundSchema = MongoOneResponse$inboundSchema;
  /** @deprecated use `MongoOneResponse$outboundSchema` instead. */
  export const outboundSchema = MongoOneResponse$outboundSchema;
  /** @deprecated use `MongoOneResponse$Outbound` instead. */
  export type Outbound = MongoOneResponse$Outbound;
}

export function mongoOneResponseToJSON(
  mongoOneResponse: MongoOneResponse,
): string {
  return JSON.stringify(
    MongoOneResponse$outboundSchema.parse(mongoOneResponse),
  );
}

export function mongoOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<MongoOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoOneResponse' from JSON`,
  );
}
