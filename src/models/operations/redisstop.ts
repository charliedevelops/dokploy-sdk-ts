/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type RedisStopRequest = {
  redisId: string;
};

export const RedisStopApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type RedisStopApplicationStatus = ClosedEnum<
  typeof RedisStopApplicationStatus
>;

export type RedisStopProject = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

export type RedisStopEnvironment = {
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  name: string;
  project: RedisStopProject;
  projectId: string;
};

export type RedisStopHealthCheckSwarm = {
  interval?: number | undefined;
  retries?: number | undefined;
  startPeriod?: number | undefined;
  test?: Array<string> | undefined;
  timeout?: number | undefined;
};

export type RedisStopGlobal = {};

export type RedisStopGlobalJob = {};

export type RedisStopReplicated = {
  replicas?: number | undefined;
};

export type RedisStopReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type RedisStopModeSwarm = {
  global?: RedisStopGlobal | undefined;
  globalJob?: RedisStopGlobalJob | undefined;
  replicated?: RedisStopReplicated | undefined;
  replicatedJob?: RedisStopReplicatedJob | undefined;
};

export const RedisStopServiceType = {
  Application: "application",
  Postgres: "postgres",
  Mysql: "mysql",
  Mariadb: "mariadb",
  Mongo: "mongo",
  Redis: "redis",
  Compose: "compose",
} as const;
export type RedisStopServiceType = ClosedEnum<typeof RedisStopServiceType>;

export const RedisStopType = {
  Bind: "bind",
  Volume: "volume",
  File: "file",
} as const;
export type RedisStopType = ClosedEnum<typeof RedisStopType>;

export type RedisStopMount = {
  applicationId: string | null;
  composeId: string | null;
  content: string | null;
  filePath: string | null;
  hostPath: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mountId: string;
  mountPath: string;
  mysqlId: string | null;
  postgresId: string | null;
  redisId: string | null;
  serviceType: RedisStopServiceType;
  type: RedisStopType;
  volumeName: string | null;
};

export type RedisStopDriverOpts = {};

export type RedisStopNetworkSwarm = {
  aliases?: Array<string> | undefined;
  driverOpts?: RedisStopDriverOpts | undefined;
  target?: string | undefined;
};

export type RedisStopPlatform = {
  architecture: string;
  os: string;
};

export type RedisStopSpread = {
  spreadDescriptor: string;
};

export type RedisStopPreference = {
  spread: RedisStopSpread;
};

export type RedisStopPlacementSwarm = {
  constraints?: Array<string> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<RedisStopPlatform> | undefined;
  preferences?: Array<RedisStopPreference> | undefined;
};

export type RedisStopRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type RedisStopRollbackConfigSwarm = {
  delay?: number | undefined;
  failureAction?: string | undefined;
  maxFailureRatio?: number | undefined;
  monitor?: number | undefined;
  order: string;
  parallelism: number;
};

export const RedisStopMetricsConfigEnum = {
  Null: "null",
} as const;
export type RedisStopMetricsConfigEnum = ClosedEnum<
  typeof RedisStopMetricsConfigEnum
>;

export type RedisStopMetricsConfigUnion1 =
  | string
  | number
  | boolean
  | RedisStopMetricsConfigEnum;

export type RedisStopMetricsConfigUnion2 =
  | string
  | number
  | boolean
  | RedisStopMetricsConfigEnum
  | Array<any>
  | { [k: string]: any };

export const RedisStopServerStatus = {
  Active: "active",
  Inactive: "inactive",
} as const;
export type RedisStopServerStatus = ClosedEnum<typeof RedisStopServerStatus>;

export type RedisStopServer = {
  appName: string;
  command: string;
  createdAt: string;
  description: string | null;
  enableDockerCleanup: boolean;
  ipAddress: string;
  metricsConfig:
    | string
    | number
    | boolean
    | RedisStopMetricsConfigEnum
    | Array<any>
    | { [k: string]: any };
  name: string;
  organizationId: string;
  port: number;
  serverId: string;
  serverStatus: RedisStopServerStatus;
  sshKeyId: string | null;
  username: string;
};

export type RedisStopUpdateConfigSwarm = {
  delay?: number | undefined;
  failureAction?: string | undefined;
  maxFailureRatio?: number | undefined;
  monitor?: number | undefined;
  order: string;
  parallelism: number;
};

/**
 * Successful response
 */
export type RedisStopResponseBody = {
  appName: string;
  applicationStatus: RedisStopApplicationStatus;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databasePassword: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environment: RedisStopEnvironment;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: RedisStopHealthCheckSwarm | null;
  labelsSwarm: { [k: string]: string } | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: RedisStopModeSwarm | null;
  mounts: Array<RedisStopMount>;
  name: string;
  networkSwarm: Array<RedisStopNetworkSwarm> | null;
  placementSwarm: RedisStopPlacementSwarm | null;
  redisId: string;
  replicas: number;
  restartPolicySwarm: RedisStopRestartPolicySwarm | null;
  rollbackConfigSwarm: RedisStopRollbackConfigSwarm | null;
  server: RedisStopServer | null;
  serverId: string | null;
  updateConfigSwarm: RedisStopUpdateConfigSwarm | null;
};

export type RedisStopResponse = RedisStopResponseBody | models.ErrorT;

/** @internal */
export const RedisStopRequest$inboundSchema: z.ZodType<
  RedisStopRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  redisId: z.string(),
});

/** @internal */
export type RedisStopRequest$Outbound = {
  redisId: string;
};

/** @internal */
export const RedisStopRequest$outboundSchema: z.ZodType<
  RedisStopRequest$Outbound,
  z.ZodTypeDef,
  RedisStopRequest
> = z.object({
  redisId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStopRequest$ {
  /** @deprecated use `RedisStopRequest$inboundSchema` instead. */
  export const inboundSchema = RedisStopRequest$inboundSchema;
  /** @deprecated use `RedisStopRequest$outboundSchema` instead. */
  export const outboundSchema = RedisStopRequest$outboundSchema;
  /** @deprecated use `RedisStopRequest$Outbound` instead. */
  export type Outbound = RedisStopRequest$Outbound;
}

export function redisStopRequestToJSON(
  redisStopRequest: RedisStopRequest,
): string {
  return JSON.stringify(
    RedisStopRequest$outboundSchema.parse(redisStopRequest),
  );
}

export function redisStopRequestFromJSON(
  jsonString: string,
): SafeParseResult<RedisStopRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStopRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStopRequest' from JSON`,
  );
}

/** @internal */
export const RedisStopApplicationStatus$inboundSchema: z.ZodNativeEnum<
  typeof RedisStopApplicationStatus
> = z.nativeEnum(RedisStopApplicationStatus);

/** @internal */
export const RedisStopApplicationStatus$outboundSchema: z.ZodNativeEnum<
  typeof RedisStopApplicationStatus
> = RedisStopApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStopApplicationStatus$ {
  /** @deprecated use `RedisStopApplicationStatus$inboundSchema` instead. */
  export const inboundSchema = RedisStopApplicationStatus$inboundSchema;
  /** @deprecated use `RedisStopApplicationStatus$outboundSchema` instead. */
  export const outboundSchema = RedisStopApplicationStatus$outboundSchema;
}

/** @internal */
export const RedisStopProject$inboundSchema: z.ZodType<
  RedisStopProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/** @internal */
export type RedisStopProject$Outbound = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

/** @internal */
export const RedisStopProject$outboundSchema: z.ZodType<
  RedisStopProject$Outbound,
  z.ZodTypeDef,
  RedisStopProject
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStopProject$ {
  /** @deprecated use `RedisStopProject$inboundSchema` instead. */
  export const inboundSchema = RedisStopProject$inboundSchema;
  /** @deprecated use `RedisStopProject$outboundSchema` instead. */
  export const outboundSchema = RedisStopProject$outboundSchema;
  /** @deprecated use `RedisStopProject$Outbound` instead. */
  export type Outbound = RedisStopProject$Outbound;
}

export function redisStopProjectToJSON(
  redisStopProject: RedisStopProject,
): string {
  return JSON.stringify(
    RedisStopProject$outboundSchema.parse(redisStopProject),
  );
}

export function redisStopProjectFromJSON(
  jsonString: string,
): SafeParseResult<RedisStopProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStopProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStopProject' from JSON`,
  );
}

/** @internal */
export const RedisStopEnvironment$inboundSchema: z.ZodType<
  RedisStopEnvironment,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  name: z.string(),
  project: z.lazy(() => RedisStopProject$inboundSchema),
  projectId: z.string(),
});

/** @internal */
export type RedisStopEnvironment$Outbound = {
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  name: string;
  project: RedisStopProject$Outbound;
  projectId: string;
};

/** @internal */
export const RedisStopEnvironment$outboundSchema: z.ZodType<
  RedisStopEnvironment$Outbound,
  z.ZodTypeDef,
  RedisStopEnvironment
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  name: z.string(),
  project: z.lazy(() => RedisStopProject$outboundSchema),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStopEnvironment$ {
  /** @deprecated use `RedisStopEnvironment$inboundSchema` instead. */
  export const inboundSchema = RedisStopEnvironment$inboundSchema;
  /** @deprecated use `RedisStopEnvironment$outboundSchema` instead. */
  export const outboundSchema = RedisStopEnvironment$outboundSchema;
  /** @deprecated use `RedisStopEnvironment$Outbound` instead. */
  export type Outbound = RedisStopEnvironment$Outbound;
}

export function redisStopEnvironmentToJSON(
  redisStopEnvironment: RedisStopEnvironment,
): string {
  return JSON.stringify(
    RedisStopEnvironment$outboundSchema.parse(redisStopEnvironment),
  );
}

export function redisStopEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<RedisStopEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStopEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStopEnvironment' from JSON`,
  );
}

/** @internal */
export const RedisStopHealthCheckSwarm$inboundSchema: z.ZodType<
  RedisStopHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Interval: z.number().optional(),
  Retries: z.number().optional(),
  StartPeriod: z.number().optional(),
  Test: z.array(z.string()).optional(),
  Timeout: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Interval": "interval",
    "Retries": "retries",
    "StartPeriod": "startPeriod",
    "Test": "test",
    "Timeout": "timeout",
  });
});

/** @internal */
export type RedisStopHealthCheckSwarm$Outbound = {
  Interval?: number | undefined;
  Retries?: number | undefined;
  StartPeriod?: number | undefined;
  Test?: Array<string> | undefined;
  Timeout?: number | undefined;
};

/** @internal */
export const RedisStopHealthCheckSwarm$outboundSchema: z.ZodType<
  RedisStopHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  RedisStopHealthCheckSwarm
> = z.object({
  interval: z.number().optional(),
  retries: z.number().optional(),
  startPeriod: z.number().optional(),
  test: z.array(z.string()).optional(),
  timeout: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    interval: "Interval",
    retries: "Retries",
    startPeriod: "StartPeriod",
    test: "Test",
    timeout: "Timeout",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStopHealthCheckSwarm$ {
  /** @deprecated use `RedisStopHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisStopHealthCheckSwarm$inboundSchema;
  /** @deprecated use `RedisStopHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisStopHealthCheckSwarm$outboundSchema;
  /** @deprecated use `RedisStopHealthCheckSwarm$Outbound` instead. */
  export type Outbound = RedisStopHealthCheckSwarm$Outbound;
}

export function redisStopHealthCheckSwarmToJSON(
  redisStopHealthCheckSwarm: RedisStopHealthCheckSwarm,
): string {
  return JSON.stringify(
    RedisStopHealthCheckSwarm$outboundSchema.parse(redisStopHealthCheckSwarm),
  );
}

export function redisStopHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisStopHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStopHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStopHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const RedisStopGlobal$inboundSchema: z.ZodType<
  RedisStopGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RedisStopGlobal$Outbound = {};

/** @internal */
export const RedisStopGlobal$outboundSchema: z.ZodType<
  RedisStopGlobal$Outbound,
  z.ZodTypeDef,
  RedisStopGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStopGlobal$ {
  /** @deprecated use `RedisStopGlobal$inboundSchema` instead. */
  export const inboundSchema = RedisStopGlobal$inboundSchema;
  /** @deprecated use `RedisStopGlobal$outboundSchema` instead. */
  export const outboundSchema = RedisStopGlobal$outboundSchema;
  /** @deprecated use `RedisStopGlobal$Outbound` instead. */
  export type Outbound = RedisStopGlobal$Outbound;
}

export function redisStopGlobalToJSON(
  redisStopGlobal: RedisStopGlobal,
): string {
  return JSON.stringify(RedisStopGlobal$outboundSchema.parse(redisStopGlobal));
}

export function redisStopGlobalFromJSON(
  jsonString: string,
): SafeParseResult<RedisStopGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStopGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStopGlobal' from JSON`,
  );
}

/** @internal */
export const RedisStopGlobalJob$inboundSchema: z.ZodType<
  RedisStopGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RedisStopGlobalJob$Outbound = {};

/** @internal */
export const RedisStopGlobalJob$outboundSchema: z.ZodType<
  RedisStopGlobalJob$Outbound,
  z.ZodTypeDef,
  RedisStopGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStopGlobalJob$ {
  /** @deprecated use `RedisStopGlobalJob$inboundSchema` instead. */
  export const inboundSchema = RedisStopGlobalJob$inboundSchema;
  /** @deprecated use `RedisStopGlobalJob$outboundSchema` instead. */
  export const outboundSchema = RedisStopGlobalJob$outboundSchema;
  /** @deprecated use `RedisStopGlobalJob$Outbound` instead. */
  export type Outbound = RedisStopGlobalJob$Outbound;
}

export function redisStopGlobalJobToJSON(
  redisStopGlobalJob: RedisStopGlobalJob,
): string {
  return JSON.stringify(
    RedisStopGlobalJob$outboundSchema.parse(redisStopGlobalJob),
  );
}

export function redisStopGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<RedisStopGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStopGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStopGlobalJob' from JSON`,
  );
}

/** @internal */
export const RedisStopReplicated$inboundSchema: z.ZodType<
  RedisStopReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type RedisStopReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const RedisStopReplicated$outboundSchema: z.ZodType<
  RedisStopReplicated$Outbound,
  z.ZodTypeDef,
  RedisStopReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStopReplicated$ {
  /** @deprecated use `RedisStopReplicated$inboundSchema` instead. */
  export const inboundSchema = RedisStopReplicated$inboundSchema;
  /** @deprecated use `RedisStopReplicated$outboundSchema` instead. */
  export const outboundSchema = RedisStopReplicated$outboundSchema;
  /** @deprecated use `RedisStopReplicated$Outbound` instead. */
  export type Outbound = RedisStopReplicated$Outbound;
}

export function redisStopReplicatedToJSON(
  redisStopReplicated: RedisStopReplicated,
): string {
  return JSON.stringify(
    RedisStopReplicated$outboundSchema.parse(redisStopReplicated),
  );
}

export function redisStopReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<RedisStopReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStopReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStopReplicated' from JSON`,
  );
}

/** @internal */
export const RedisStopReplicatedJob$inboundSchema: z.ZodType<
  RedisStopReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type RedisStopReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const RedisStopReplicatedJob$outboundSchema: z.ZodType<
  RedisStopReplicatedJob$Outbound,
  z.ZodTypeDef,
  RedisStopReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStopReplicatedJob$ {
  /** @deprecated use `RedisStopReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = RedisStopReplicatedJob$inboundSchema;
  /** @deprecated use `RedisStopReplicatedJob$outboundSchema` instead. */
  export const outboundSchema = RedisStopReplicatedJob$outboundSchema;
  /** @deprecated use `RedisStopReplicatedJob$Outbound` instead. */
  export type Outbound = RedisStopReplicatedJob$Outbound;
}

export function redisStopReplicatedJobToJSON(
  redisStopReplicatedJob: RedisStopReplicatedJob,
): string {
  return JSON.stringify(
    RedisStopReplicatedJob$outboundSchema.parse(redisStopReplicatedJob),
  );
}

export function redisStopReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<RedisStopReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStopReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStopReplicatedJob' from JSON`,
  );
}

/** @internal */
export const RedisStopModeSwarm$inboundSchema: z.ZodType<
  RedisStopModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Global: z.lazy(() => RedisStopGlobal$inboundSchema).optional(),
  GlobalJob: z.lazy(() => RedisStopGlobalJob$inboundSchema).optional(),
  Replicated: z.lazy(() => RedisStopReplicated$inboundSchema).optional(),
  ReplicatedJob: z.lazy(() => RedisStopReplicatedJob$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Global": "global",
    "GlobalJob": "globalJob",
    "Replicated": "replicated",
    "ReplicatedJob": "replicatedJob",
  });
});

/** @internal */
export type RedisStopModeSwarm$Outbound = {
  Global?: RedisStopGlobal$Outbound | undefined;
  GlobalJob?: RedisStopGlobalJob$Outbound | undefined;
  Replicated?: RedisStopReplicated$Outbound | undefined;
  ReplicatedJob?: RedisStopReplicatedJob$Outbound | undefined;
};

/** @internal */
export const RedisStopModeSwarm$outboundSchema: z.ZodType<
  RedisStopModeSwarm$Outbound,
  z.ZodTypeDef,
  RedisStopModeSwarm
> = z.object({
  global: z.lazy(() => RedisStopGlobal$outboundSchema).optional(),
  globalJob: z.lazy(() => RedisStopGlobalJob$outboundSchema).optional(),
  replicated: z.lazy(() => RedisStopReplicated$outboundSchema).optional(),
  replicatedJob: z.lazy(() => RedisStopReplicatedJob$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    global: "Global",
    globalJob: "GlobalJob",
    replicated: "Replicated",
    replicatedJob: "ReplicatedJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStopModeSwarm$ {
  /** @deprecated use `RedisStopModeSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisStopModeSwarm$inboundSchema;
  /** @deprecated use `RedisStopModeSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisStopModeSwarm$outboundSchema;
  /** @deprecated use `RedisStopModeSwarm$Outbound` instead. */
  export type Outbound = RedisStopModeSwarm$Outbound;
}

export function redisStopModeSwarmToJSON(
  redisStopModeSwarm: RedisStopModeSwarm,
): string {
  return JSON.stringify(
    RedisStopModeSwarm$outboundSchema.parse(redisStopModeSwarm),
  );
}

export function redisStopModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisStopModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStopModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStopModeSwarm' from JSON`,
  );
}

/** @internal */
export const RedisStopServiceType$inboundSchema: z.ZodNativeEnum<
  typeof RedisStopServiceType
> = z.nativeEnum(RedisStopServiceType);

/** @internal */
export const RedisStopServiceType$outboundSchema: z.ZodNativeEnum<
  typeof RedisStopServiceType
> = RedisStopServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStopServiceType$ {
  /** @deprecated use `RedisStopServiceType$inboundSchema` instead. */
  export const inboundSchema = RedisStopServiceType$inboundSchema;
  /** @deprecated use `RedisStopServiceType$outboundSchema` instead. */
  export const outboundSchema = RedisStopServiceType$outboundSchema;
}

/** @internal */
export const RedisStopType$inboundSchema: z.ZodNativeEnum<
  typeof RedisStopType
> = z.nativeEnum(RedisStopType);

/** @internal */
export const RedisStopType$outboundSchema: z.ZodNativeEnum<
  typeof RedisStopType
> = RedisStopType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStopType$ {
  /** @deprecated use `RedisStopType$inboundSchema` instead. */
  export const inboundSchema = RedisStopType$inboundSchema;
  /** @deprecated use `RedisStopType$outboundSchema` instead. */
  export const outboundSchema = RedisStopType$outboundSchema;
}

/** @internal */
export const RedisStopMount$inboundSchema: z.ZodType<
  RedisStopMount,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  content: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  hostPath: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mountId: z.string(),
  mountPath: z.string(),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  serviceType: RedisStopServiceType$inboundSchema,
  type: RedisStopType$inboundSchema,
  volumeName: z.nullable(z.string()),
});

/** @internal */
export type RedisStopMount$Outbound = {
  applicationId: string | null;
  composeId: string | null;
  content: string | null;
  filePath: string | null;
  hostPath: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mountId: string;
  mountPath: string;
  mysqlId: string | null;
  postgresId: string | null;
  redisId: string | null;
  serviceType: string;
  type: string;
  volumeName: string | null;
};

/** @internal */
export const RedisStopMount$outboundSchema: z.ZodType<
  RedisStopMount$Outbound,
  z.ZodTypeDef,
  RedisStopMount
> = z.object({
  applicationId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  content: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  hostPath: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mountId: z.string(),
  mountPath: z.string(),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  serviceType: RedisStopServiceType$outboundSchema,
  type: RedisStopType$outboundSchema,
  volumeName: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStopMount$ {
  /** @deprecated use `RedisStopMount$inboundSchema` instead. */
  export const inboundSchema = RedisStopMount$inboundSchema;
  /** @deprecated use `RedisStopMount$outboundSchema` instead. */
  export const outboundSchema = RedisStopMount$outboundSchema;
  /** @deprecated use `RedisStopMount$Outbound` instead. */
  export type Outbound = RedisStopMount$Outbound;
}

export function redisStopMountToJSON(redisStopMount: RedisStopMount): string {
  return JSON.stringify(RedisStopMount$outboundSchema.parse(redisStopMount));
}

export function redisStopMountFromJSON(
  jsonString: string,
): SafeParseResult<RedisStopMount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStopMount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStopMount' from JSON`,
  );
}

/** @internal */
export const RedisStopDriverOpts$inboundSchema: z.ZodType<
  RedisStopDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RedisStopDriverOpts$Outbound = {};

/** @internal */
export const RedisStopDriverOpts$outboundSchema: z.ZodType<
  RedisStopDriverOpts$Outbound,
  z.ZodTypeDef,
  RedisStopDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStopDriverOpts$ {
  /** @deprecated use `RedisStopDriverOpts$inboundSchema` instead. */
  export const inboundSchema = RedisStopDriverOpts$inboundSchema;
  /** @deprecated use `RedisStopDriverOpts$outboundSchema` instead. */
  export const outboundSchema = RedisStopDriverOpts$outboundSchema;
  /** @deprecated use `RedisStopDriverOpts$Outbound` instead. */
  export type Outbound = RedisStopDriverOpts$Outbound;
}

export function redisStopDriverOptsToJSON(
  redisStopDriverOpts: RedisStopDriverOpts,
): string {
  return JSON.stringify(
    RedisStopDriverOpts$outboundSchema.parse(redisStopDriverOpts),
  );
}

export function redisStopDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<RedisStopDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStopDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStopDriverOpts' from JSON`,
  );
}

/** @internal */
export const RedisStopNetworkSwarm$inboundSchema: z.ZodType<
  RedisStopNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => RedisStopDriverOpts$inboundSchema).optional(),
  Target: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
    "Target": "target",
  });
});

/** @internal */
export type RedisStopNetworkSwarm$Outbound = {
  Aliases?: Array<string> | undefined;
  DriverOpts?: RedisStopDriverOpts$Outbound | undefined;
  Target?: string | undefined;
};

/** @internal */
export const RedisStopNetworkSwarm$outboundSchema: z.ZodType<
  RedisStopNetworkSwarm$Outbound,
  z.ZodTypeDef,
  RedisStopNetworkSwarm
> = z.object({
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => RedisStopDriverOpts$outboundSchema).optional(),
  target: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    aliases: "Aliases",
    driverOpts: "DriverOpts",
    target: "Target",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStopNetworkSwarm$ {
  /** @deprecated use `RedisStopNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisStopNetworkSwarm$inboundSchema;
  /** @deprecated use `RedisStopNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisStopNetworkSwarm$outboundSchema;
  /** @deprecated use `RedisStopNetworkSwarm$Outbound` instead. */
  export type Outbound = RedisStopNetworkSwarm$Outbound;
}

export function redisStopNetworkSwarmToJSON(
  redisStopNetworkSwarm: RedisStopNetworkSwarm,
): string {
  return JSON.stringify(
    RedisStopNetworkSwarm$outboundSchema.parse(redisStopNetworkSwarm),
  );
}

export function redisStopNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisStopNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStopNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStopNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const RedisStopPlatform$inboundSchema: z.ZodType<
  RedisStopPlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type RedisStopPlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const RedisStopPlatform$outboundSchema: z.ZodType<
  RedisStopPlatform$Outbound,
  z.ZodTypeDef,
  RedisStopPlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStopPlatform$ {
  /** @deprecated use `RedisStopPlatform$inboundSchema` instead. */
  export const inboundSchema = RedisStopPlatform$inboundSchema;
  /** @deprecated use `RedisStopPlatform$outboundSchema` instead. */
  export const outboundSchema = RedisStopPlatform$outboundSchema;
  /** @deprecated use `RedisStopPlatform$Outbound` instead. */
  export type Outbound = RedisStopPlatform$Outbound;
}

export function redisStopPlatformToJSON(
  redisStopPlatform: RedisStopPlatform,
): string {
  return JSON.stringify(
    RedisStopPlatform$outboundSchema.parse(redisStopPlatform),
  );
}

export function redisStopPlatformFromJSON(
  jsonString: string,
): SafeParseResult<RedisStopPlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStopPlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStopPlatform' from JSON`,
  );
}

/** @internal */
export const RedisStopSpread$inboundSchema: z.ZodType<
  RedisStopSpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type RedisStopSpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const RedisStopSpread$outboundSchema: z.ZodType<
  RedisStopSpread$Outbound,
  z.ZodTypeDef,
  RedisStopSpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStopSpread$ {
  /** @deprecated use `RedisStopSpread$inboundSchema` instead. */
  export const inboundSchema = RedisStopSpread$inboundSchema;
  /** @deprecated use `RedisStopSpread$outboundSchema` instead. */
  export const outboundSchema = RedisStopSpread$outboundSchema;
  /** @deprecated use `RedisStopSpread$Outbound` instead. */
  export type Outbound = RedisStopSpread$Outbound;
}

export function redisStopSpreadToJSON(
  redisStopSpread: RedisStopSpread,
): string {
  return JSON.stringify(RedisStopSpread$outboundSchema.parse(redisStopSpread));
}

export function redisStopSpreadFromJSON(
  jsonString: string,
): SafeParseResult<RedisStopSpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStopSpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStopSpread' from JSON`,
  );
}

/** @internal */
export const RedisStopPreference$inboundSchema: z.ZodType<
  RedisStopPreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => RedisStopSpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type RedisStopPreference$Outbound = {
  Spread: RedisStopSpread$Outbound;
};

/** @internal */
export const RedisStopPreference$outboundSchema: z.ZodType<
  RedisStopPreference$Outbound,
  z.ZodTypeDef,
  RedisStopPreference
> = z.object({
  spread: z.lazy(() => RedisStopSpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStopPreference$ {
  /** @deprecated use `RedisStopPreference$inboundSchema` instead. */
  export const inboundSchema = RedisStopPreference$inboundSchema;
  /** @deprecated use `RedisStopPreference$outboundSchema` instead. */
  export const outboundSchema = RedisStopPreference$outboundSchema;
  /** @deprecated use `RedisStopPreference$Outbound` instead. */
  export type Outbound = RedisStopPreference$Outbound;
}

export function redisStopPreferenceToJSON(
  redisStopPreference: RedisStopPreference,
): string {
  return JSON.stringify(
    RedisStopPreference$outboundSchema.parse(redisStopPreference),
  );
}

export function redisStopPreferenceFromJSON(
  jsonString: string,
): SafeParseResult<RedisStopPreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStopPreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStopPreference' from JSON`,
  );
}

/** @internal */
export const RedisStopPlacementSwarm$inboundSchema: z.ZodType<
  RedisStopPlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => RedisStopPlatform$inboundSchema)).optional(),
  Preferences: z.array(z.lazy(() => RedisStopPreference$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
    "Preferences": "preferences",
  });
});

/** @internal */
export type RedisStopPlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<RedisStopPlatform$Outbound> | undefined;
  Preferences?: Array<RedisStopPreference$Outbound> | undefined;
};

/** @internal */
export const RedisStopPlacementSwarm$outboundSchema: z.ZodType<
  RedisStopPlacementSwarm$Outbound,
  z.ZodTypeDef,
  RedisStopPlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => RedisStopPlatform$outboundSchema)).optional(),
  preferences: z.array(z.lazy(() => RedisStopPreference$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
    preferences: "Preferences",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStopPlacementSwarm$ {
  /** @deprecated use `RedisStopPlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisStopPlacementSwarm$inboundSchema;
  /** @deprecated use `RedisStopPlacementSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisStopPlacementSwarm$outboundSchema;
  /** @deprecated use `RedisStopPlacementSwarm$Outbound` instead. */
  export type Outbound = RedisStopPlacementSwarm$Outbound;
}

export function redisStopPlacementSwarmToJSON(
  redisStopPlacementSwarm: RedisStopPlacementSwarm,
): string {
  return JSON.stringify(
    RedisStopPlacementSwarm$outboundSchema.parse(redisStopPlacementSwarm),
  );
}

export function redisStopPlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisStopPlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStopPlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStopPlacementSwarm' from JSON`,
  );
}

/** @internal */
export const RedisStopRestartPolicySwarm$inboundSchema: z.ZodType<
  RedisStopRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type RedisStopRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const RedisStopRestartPolicySwarm$outboundSchema: z.ZodType<
  RedisStopRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  RedisStopRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStopRestartPolicySwarm$ {
  /** @deprecated use `RedisStopRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema = RedisStopRestartPolicySwarm$inboundSchema;
  /** @deprecated use `RedisStopRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema = RedisStopRestartPolicySwarm$outboundSchema;
  /** @deprecated use `RedisStopRestartPolicySwarm$Outbound` instead. */
  export type Outbound = RedisStopRestartPolicySwarm$Outbound;
}

export function redisStopRestartPolicySwarmToJSON(
  redisStopRestartPolicySwarm: RedisStopRestartPolicySwarm,
): string {
  return JSON.stringify(
    RedisStopRestartPolicySwarm$outboundSchema.parse(
      redisStopRestartPolicySwarm,
    ),
  );
}

export function redisStopRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisStopRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStopRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStopRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const RedisStopRollbackConfigSwarm$inboundSchema: z.ZodType<
  RedisStopRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  MaxFailureRatio: z.number().optional(),
  Monitor: z.number().optional(),
  Order: z.string(),
  Parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    "Delay": "delay",
    "FailureAction": "failureAction",
    "MaxFailureRatio": "maxFailureRatio",
    "Monitor": "monitor",
    "Order": "order",
    "Parallelism": "parallelism",
  });
});

/** @internal */
export type RedisStopRollbackConfigSwarm$Outbound = {
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  MaxFailureRatio?: number | undefined;
  Monitor?: number | undefined;
  Order: string;
  Parallelism: number;
};

/** @internal */
export const RedisStopRollbackConfigSwarm$outboundSchema: z.ZodType<
  RedisStopRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  RedisStopRollbackConfigSwarm
> = z.object({
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  maxFailureRatio: z.number().optional(),
  monitor: z.number().optional(),
  order: z.string(),
  parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    delay: "Delay",
    failureAction: "FailureAction",
    maxFailureRatio: "MaxFailureRatio",
    monitor: "Monitor",
    order: "Order",
    parallelism: "Parallelism",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStopRollbackConfigSwarm$ {
  /** @deprecated use `RedisStopRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisStopRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `RedisStopRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisStopRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `RedisStopRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = RedisStopRollbackConfigSwarm$Outbound;
}

export function redisStopRollbackConfigSwarmToJSON(
  redisStopRollbackConfigSwarm: RedisStopRollbackConfigSwarm,
): string {
  return JSON.stringify(
    RedisStopRollbackConfigSwarm$outboundSchema.parse(
      redisStopRollbackConfigSwarm,
    ),
  );
}

export function redisStopRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisStopRollbackConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStopRollbackConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStopRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const RedisStopMetricsConfigEnum$inboundSchema: z.ZodNativeEnum<
  typeof RedisStopMetricsConfigEnum
> = z.nativeEnum(RedisStopMetricsConfigEnum);

/** @internal */
export const RedisStopMetricsConfigEnum$outboundSchema: z.ZodNativeEnum<
  typeof RedisStopMetricsConfigEnum
> = RedisStopMetricsConfigEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStopMetricsConfigEnum$ {
  /** @deprecated use `RedisStopMetricsConfigEnum$inboundSchema` instead. */
  export const inboundSchema = RedisStopMetricsConfigEnum$inboundSchema;
  /** @deprecated use `RedisStopMetricsConfigEnum$outboundSchema` instead. */
  export const outboundSchema = RedisStopMetricsConfigEnum$outboundSchema;
}

/** @internal */
export const RedisStopMetricsConfigUnion1$inboundSchema: z.ZodType<
  RedisStopMetricsConfigUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  RedisStopMetricsConfigEnum$inboundSchema,
]);

/** @internal */
export type RedisStopMetricsConfigUnion1$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const RedisStopMetricsConfigUnion1$outboundSchema: z.ZodType<
  RedisStopMetricsConfigUnion1$Outbound,
  z.ZodTypeDef,
  RedisStopMetricsConfigUnion1
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  RedisStopMetricsConfigEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStopMetricsConfigUnion1$ {
  /** @deprecated use `RedisStopMetricsConfigUnion1$inboundSchema` instead. */
  export const inboundSchema = RedisStopMetricsConfigUnion1$inboundSchema;
  /** @deprecated use `RedisStopMetricsConfigUnion1$outboundSchema` instead. */
  export const outboundSchema = RedisStopMetricsConfigUnion1$outboundSchema;
  /** @deprecated use `RedisStopMetricsConfigUnion1$Outbound` instead. */
  export type Outbound = RedisStopMetricsConfigUnion1$Outbound;
}

export function redisStopMetricsConfigUnion1ToJSON(
  redisStopMetricsConfigUnion1: RedisStopMetricsConfigUnion1,
): string {
  return JSON.stringify(
    RedisStopMetricsConfigUnion1$outboundSchema.parse(
      redisStopMetricsConfigUnion1,
    ),
  );
}

export function redisStopMetricsConfigUnion1FromJSON(
  jsonString: string,
): SafeParseResult<RedisStopMetricsConfigUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStopMetricsConfigUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStopMetricsConfigUnion1' from JSON`,
  );
}

/** @internal */
export const RedisStopMetricsConfigUnion2$inboundSchema: z.ZodType<
  RedisStopMetricsConfigUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    RedisStopMetricsConfigEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type RedisStopMetricsConfigUnion2$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const RedisStopMetricsConfigUnion2$outboundSchema: z.ZodType<
  RedisStopMetricsConfigUnion2$Outbound,
  z.ZodTypeDef,
  RedisStopMetricsConfigUnion2
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    RedisStopMetricsConfigEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStopMetricsConfigUnion2$ {
  /** @deprecated use `RedisStopMetricsConfigUnion2$inboundSchema` instead. */
  export const inboundSchema = RedisStopMetricsConfigUnion2$inboundSchema;
  /** @deprecated use `RedisStopMetricsConfigUnion2$outboundSchema` instead. */
  export const outboundSchema = RedisStopMetricsConfigUnion2$outboundSchema;
  /** @deprecated use `RedisStopMetricsConfigUnion2$Outbound` instead. */
  export type Outbound = RedisStopMetricsConfigUnion2$Outbound;
}

export function redisStopMetricsConfigUnion2ToJSON(
  redisStopMetricsConfigUnion2: RedisStopMetricsConfigUnion2,
): string {
  return JSON.stringify(
    RedisStopMetricsConfigUnion2$outboundSchema.parse(
      redisStopMetricsConfigUnion2,
    ),
  );
}

export function redisStopMetricsConfigUnion2FromJSON(
  jsonString: string,
): SafeParseResult<RedisStopMetricsConfigUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStopMetricsConfigUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStopMetricsConfigUnion2' from JSON`,
  );
}

/** @internal */
export const RedisStopServerStatus$inboundSchema: z.ZodNativeEnum<
  typeof RedisStopServerStatus
> = z.nativeEnum(RedisStopServerStatus);

/** @internal */
export const RedisStopServerStatus$outboundSchema: z.ZodNativeEnum<
  typeof RedisStopServerStatus
> = RedisStopServerStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStopServerStatus$ {
  /** @deprecated use `RedisStopServerStatus$inboundSchema` instead. */
  export const inboundSchema = RedisStopServerStatus$inboundSchema;
  /** @deprecated use `RedisStopServerStatus$outboundSchema` instead. */
  export const outboundSchema = RedisStopServerStatus$outboundSchema;
}

/** @internal */
export const RedisStopServer$inboundSchema: z.ZodType<
  RedisStopServer,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  command: z.string(),
  createdAt: z.string(),
  description: z.nullable(z.string()),
  enableDockerCleanup: z.boolean(),
  ipAddress: z.string(),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      RedisStopMetricsConfigEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
  name: z.string(),
  organizationId: z.string(),
  port: z.number(),
  serverId: z.string(),
  serverStatus: RedisStopServerStatus$inboundSchema,
  sshKeyId: z.nullable(z.string()),
  username: z.string(),
});

/** @internal */
export type RedisStopServer$Outbound = {
  appName: string;
  command: string;
  createdAt: string;
  description: string | null;
  enableDockerCleanup: boolean;
  ipAddress: string;
  metricsConfig: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  };
  name: string;
  organizationId: string;
  port: number;
  serverId: string;
  serverStatus: string;
  sshKeyId: string | null;
  username: string;
};

/** @internal */
export const RedisStopServer$outboundSchema: z.ZodType<
  RedisStopServer$Outbound,
  z.ZodTypeDef,
  RedisStopServer
> = z.object({
  appName: z.string(),
  command: z.string(),
  createdAt: z.string(),
  description: z.nullable(z.string()),
  enableDockerCleanup: z.boolean(),
  ipAddress: z.string(),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      RedisStopMetricsConfigEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
  name: z.string(),
  organizationId: z.string(),
  port: z.number(),
  serverId: z.string(),
  serverStatus: RedisStopServerStatus$outboundSchema,
  sshKeyId: z.nullable(z.string()),
  username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStopServer$ {
  /** @deprecated use `RedisStopServer$inboundSchema` instead. */
  export const inboundSchema = RedisStopServer$inboundSchema;
  /** @deprecated use `RedisStopServer$outboundSchema` instead. */
  export const outboundSchema = RedisStopServer$outboundSchema;
  /** @deprecated use `RedisStopServer$Outbound` instead. */
  export type Outbound = RedisStopServer$Outbound;
}

export function redisStopServerToJSON(
  redisStopServer: RedisStopServer,
): string {
  return JSON.stringify(RedisStopServer$outboundSchema.parse(redisStopServer));
}

export function redisStopServerFromJSON(
  jsonString: string,
): SafeParseResult<RedisStopServer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStopServer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStopServer' from JSON`,
  );
}

/** @internal */
export const RedisStopUpdateConfigSwarm$inboundSchema: z.ZodType<
  RedisStopUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  MaxFailureRatio: z.number().optional(),
  Monitor: z.number().optional(),
  Order: z.string(),
  Parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    "Delay": "delay",
    "FailureAction": "failureAction",
    "MaxFailureRatio": "maxFailureRatio",
    "Monitor": "monitor",
    "Order": "order",
    "Parallelism": "parallelism",
  });
});

/** @internal */
export type RedisStopUpdateConfigSwarm$Outbound = {
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  MaxFailureRatio?: number | undefined;
  Monitor?: number | undefined;
  Order: string;
  Parallelism: number;
};

/** @internal */
export const RedisStopUpdateConfigSwarm$outboundSchema: z.ZodType<
  RedisStopUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  RedisStopUpdateConfigSwarm
> = z.object({
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  maxFailureRatio: z.number().optional(),
  monitor: z.number().optional(),
  order: z.string(),
  parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    delay: "Delay",
    failureAction: "FailureAction",
    maxFailureRatio: "MaxFailureRatio",
    monitor: "Monitor",
    order: "Order",
    parallelism: "Parallelism",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStopUpdateConfigSwarm$ {
  /** @deprecated use `RedisStopUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisStopUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `RedisStopUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisStopUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `RedisStopUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = RedisStopUpdateConfigSwarm$Outbound;
}

export function redisStopUpdateConfigSwarmToJSON(
  redisStopUpdateConfigSwarm: RedisStopUpdateConfigSwarm,
): string {
  return JSON.stringify(
    RedisStopUpdateConfigSwarm$outboundSchema.parse(redisStopUpdateConfigSwarm),
  );
}

export function redisStopUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisStopUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStopUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStopUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const RedisStopResponseBody$inboundSchema: z.ZodType<
  RedisStopResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  applicationStatus: RedisStopApplicationStatus$inboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databasePassword: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environment: z.lazy(() => RedisStopEnvironment$inboundSchema),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.lazy(() => RedisStopHealthCheckSwarm$inboundSchema),
  ),
  labelsSwarm: z.nullable(z.record(z.string())),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(z.lazy(() => RedisStopModeSwarm$inboundSchema)),
  mounts: z.array(z.lazy(() => RedisStopMount$inboundSchema)),
  name: z.string(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => RedisStopNetworkSwarm$inboundSchema)),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => RedisStopPlacementSwarm$inboundSchema),
  ),
  redisId: z.string(),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => RedisStopRestartPolicySwarm$inboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => RedisStopRollbackConfigSwarm$inboundSchema),
  ),
  server: z.nullable(z.lazy(() => RedisStopServer$inboundSchema)),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.lazy(() => RedisStopUpdateConfigSwarm$inboundSchema),
  ),
});

/** @internal */
export type RedisStopResponseBody$Outbound = {
  appName: string;
  applicationStatus: string;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databasePassword: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environment: RedisStopEnvironment$Outbound;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: RedisStopHealthCheckSwarm$Outbound | null;
  labelsSwarm: { [k: string]: string } | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: RedisStopModeSwarm$Outbound | null;
  mounts: Array<RedisStopMount$Outbound>;
  name: string;
  networkSwarm: Array<RedisStopNetworkSwarm$Outbound> | null;
  placementSwarm: RedisStopPlacementSwarm$Outbound | null;
  redisId: string;
  replicas: number;
  restartPolicySwarm: RedisStopRestartPolicySwarm$Outbound | null;
  rollbackConfigSwarm: RedisStopRollbackConfigSwarm$Outbound | null;
  server: RedisStopServer$Outbound | null;
  serverId: string | null;
  updateConfigSwarm: RedisStopUpdateConfigSwarm$Outbound | null;
};

/** @internal */
export const RedisStopResponseBody$outboundSchema: z.ZodType<
  RedisStopResponseBody$Outbound,
  z.ZodTypeDef,
  RedisStopResponseBody
> = z.object({
  appName: z.string(),
  applicationStatus: RedisStopApplicationStatus$outboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databasePassword: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environment: z.lazy(() => RedisStopEnvironment$outboundSchema),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.lazy(() => RedisStopHealthCheckSwarm$outboundSchema),
  ),
  labelsSwarm: z.nullable(z.record(z.string())),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(z.lazy(() => RedisStopModeSwarm$outboundSchema)),
  mounts: z.array(z.lazy(() => RedisStopMount$outboundSchema)),
  name: z.string(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => RedisStopNetworkSwarm$outboundSchema)),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => RedisStopPlacementSwarm$outboundSchema),
  ),
  redisId: z.string(),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => RedisStopRestartPolicySwarm$outboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => RedisStopRollbackConfigSwarm$outboundSchema),
  ),
  server: z.nullable(z.lazy(() => RedisStopServer$outboundSchema)),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.lazy(() => RedisStopUpdateConfigSwarm$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStopResponseBody$ {
  /** @deprecated use `RedisStopResponseBody$inboundSchema` instead. */
  export const inboundSchema = RedisStopResponseBody$inboundSchema;
  /** @deprecated use `RedisStopResponseBody$outboundSchema` instead. */
  export const outboundSchema = RedisStopResponseBody$outboundSchema;
  /** @deprecated use `RedisStopResponseBody$Outbound` instead. */
  export type Outbound = RedisStopResponseBody$Outbound;
}

export function redisStopResponseBodyToJSON(
  redisStopResponseBody: RedisStopResponseBody,
): string {
  return JSON.stringify(
    RedisStopResponseBody$outboundSchema.parse(redisStopResponseBody),
  );
}

export function redisStopResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RedisStopResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStopResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStopResponseBody' from JSON`,
  );
}

/** @internal */
export const RedisStopResponse$inboundSchema: z.ZodType<
  RedisStopResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => RedisStopResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type RedisStopResponse$Outbound =
  | RedisStopResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const RedisStopResponse$outboundSchema: z.ZodType<
  RedisStopResponse$Outbound,
  z.ZodTypeDef,
  RedisStopResponse
> = z.union([
  z.lazy(() => RedisStopResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisStopResponse$ {
  /** @deprecated use `RedisStopResponse$inboundSchema` instead. */
  export const inboundSchema = RedisStopResponse$inboundSchema;
  /** @deprecated use `RedisStopResponse$outboundSchema` instead. */
  export const outboundSchema = RedisStopResponse$outboundSchema;
  /** @deprecated use `RedisStopResponse$Outbound` instead. */
  export type Outbound = RedisStopResponse$Outbound;
}

export function redisStopResponseToJSON(
  redisStopResponse: RedisStopResponse,
): string {
  return JSON.stringify(
    RedisStopResponse$outboundSchema.parse(redisStopResponse),
  );
}

export function redisStopResponseFromJSON(
  jsonString: string,
): SafeParseResult<RedisStopResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisStopResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisStopResponse' from JSON`,
  );
}
