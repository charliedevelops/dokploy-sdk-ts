/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GitProviderRemoveSecurity = {
  authorization: string;
};

export type GitProviderRemoveRequest = {
  gitProviderId: string;
};

/**
 * Successful response
 */
export type GitProviderRemoveResponseBody = {
  success: boolean;
};

export type GitProviderRemoveResponse =
  | models.ErrorT
  | GitProviderRemoveResponseBody;

/** @internal */
export const GitProviderRemoveSecurity$inboundSchema: z.ZodType<
  GitProviderRemoveSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type GitProviderRemoveSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const GitProviderRemoveSecurity$outboundSchema: z.ZodType<
  GitProviderRemoveSecurity$Outbound,
  z.ZodTypeDef,
  GitProviderRemoveSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitProviderRemoveSecurity$ {
  /** @deprecated use `GitProviderRemoveSecurity$inboundSchema` instead. */
  export const inboundSchema = GitProviderRemoveSecurity$inboundSchema;
  /** @deprecated use `GitProviderRemoveSecurity$outboundSchema` instead. */
  export const outboundSchema = GitProviderRemoveSecurity$outboundSchema;
  /** @deprecated use `GitProviderRemoveSecurity$Outbound` instead. */
  export type Outbound = GitProviderRemoveSecurity$Outbound;
}

export function gitProviderRemoveSecurityToJSON(
  gitProviderRemoveSecurity: GitProviderRemoveSecurity,
): string {
  return JSON.stringify(
    GitProviderRemoveSecurity$outboundSchema.parse(gitProviderRemoveSecurity),
  );
}

export function gitProviderRemoveSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GitProviderRemoveSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitProviderRemoveSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitProviderRemoveSecurity' from JSON`,
  );
}

/** @internal */
export const GitProviderRemoveRequest$inboundSchema: z.ZodType<
  GitProviderRemoveRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  gitProviderId: z.string(),
});

/** @internal */
export type GitProviderRemoveRequest$Outbound = {
  gitProviderId: string;
};

/** @internal */
export const GitProviderRemoveRequest$outboundSchema: z.ZodType<
  GitProviderRemoveRequest$Outbound,
  z.ZodTypeDef,
  GitProviderRemoveRequest
> = z.object({
  gitProviderId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitProviderRemoveRequest$ {
  /** @deprecated use `GitProviderRemoveRequest$inboundSchema` instead. */
  export const inboundSchema = GitProviderRemoveRequest$inboundSchema;
  /** @deprecated use `GitProviderRemoveRequest$outboundSchema` instead. */
  export const outboundSchema = GitProviderRemoveRequest$outboundSchema;
  /** @deprecated use `GitProviderRemoveRequest$Outbound` instead. */
  export type Outbound = GitProviderRemoveRequest$Outbound;
}

export function gitProviderRemoveRequestToJSON(
  gitProviderRemoveRequest: GitProviderRemoveRequest,
): string {
  return JSON.stringify(
    GitProviderRemoveRequest$outboundSchema.parse(gitProviderRemoveRequest),
  );
}

export function gitProviderRemoveRequestFromJSON(
  jsonString: string,
): SafeParseResult<GitProviderRemoveRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitProviderRemoveRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitProviderRemoveRequest' from JSON`,
  );
}

/** @internal */
export const GitProviderRemoveResponseBody$inboundSchema: z.ZodType<
  GitProviderRemoveResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
});

/** @internal */
export type GitProviderRemoveResponseBody$Outbound = {
  success: boolean;
};

/** @internal */
export const GitProviderRemoveResponseBody$outboundSchema: z.ZodType<
  GitProviderRemoveResponseBody$Outbound,
  z.ZodTypeDef,
  GitProviderRemoveResponseBody
> = z.object({
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitProviderRemoveResponseBody$ {
  /** @deprecated use `GitProviderRemoveResponseBody$inboundSchema` instead. */
  export const inboundSchema = GitProviderRemoveResponseBody$inboundSchema;
  /** @deprecated use `GitProviderRemoveResponseBody$outboundSchema` instead. */
  export const outboundSchema = GitProviderRemoveResponseBody$outboundSchema;
  /** @deprecated use `GitProviderRemoveResponseBody$Outbound` instead. */
  export type Outbound = GitProviderRemoveResponseBody$Outbound;
}

export function gitProviderRemoveResponseBodyToJSON(
  gitProviderRemoveResponseBody: GitProviderRemoveResponseBody,
): string {
  return JSON.stringify(
    GitProviderRemoveResponseBody$outboundSchema.parse(
      gitProviderRemoveResponseBody,
    ),
  );
}

export function gitProviderRemoveResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GitProviderRemoveResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitProviderRemoveResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitProviderRemoveResponseBody' from JSON`,
  );
}

/** @internal */
export const GitProviderRemoveResponse$inboundSchema: z.ZodType<
  GitProviderRemoveResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ErrorT$inboundSchema,
  z.lazy(() => GitProviderRemoveResponseBody$inboundSchema),
]);

/** @internal */
export type GitProviderRemoveResponse$Outbound =
  | models.ErrorT$Outbound
  | GitProviderRemoveResponseBody$Outbound;

/** @internal */
export const GitProviderRemoveResponse$outboundSchema: z.ZodType<
  GitProviderRemoveResponse$Outbound,
  z.ZodTypeDef,
  GitProviderRemoveResponse
> = z.union([
  models.ErrorT$outboundSchema,
  z.lazy(() => GitProviderRemoveResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitProviderRemoveResponse$ {
  /** @deprecated use `GitProviderRemoveResponse$inboundSchema` instead. */
  export const inboundSchema = GitProviderRemoveResponse$inboundSchema;
  /** @deprecated use `GitProviderRemoveResponse$outboundSchema` instead. */
  export const outboundSchema = GitProviderRemoveResponse$outboundSchema;
  /** @deprecated use `GitProviderRemoveResponse$Outbound` instead. */
  export type Outbound = GitProviderRemoveResponse$Outbound;
}

export function gitProviderRemoveResponseToJSON(
  gitProviderRemoveResponse: GitProviderRemoveResponse,
): string {
  return JSON.stringify(
    GitProviderRemoveResponse$outboundSchema.parse(gitProviderRemoveResponse),
  );
}

export function gitProviderRemoveResponseFromJSON(
  jsonString: string,
): SafeParseResult<GitProviderRemoveResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitProviderRemoveResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitProviderRemoveResponse' from JSON`,
  );
}
