/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BitbucketCreateRequest = {
  appPassword?: string | undefined;
  authId: string;
  bitbucketId?: string | undefined;
  bitbucketUsername?: string | undefined;
  bitbucketWorkspaceName?: string | undefined;
  gitProviderId?: string | undefined;
  name: string;
};

/** @internal */
export const BitbucketCreateRequest$inboundSchema: z.ZodType<
  BitbucketCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appPassword: z.string().optional(),
  authId: z.string(),
  bitbucketId: z.string().optional(),
  bitbucketUsername: z.string().optional(),
  bitbucketWorkspaceName: z.string().optional(),
  gitProviderId: z.string().optional(),
  name: z.string(),
});

/** @internal */
export type BitbucketCreateRequest$Outbound = {
  appPassword?: string | undefined;
  authId: string;
  bitbucketId?: string | undefined;
  bitbucketUsername?: string | undefined;
  bitbucketWorkspaceName?: string | undefined;
  gitProviderId?: string | undefined;
  name: string;
};

/** @internal */
export const BitbucketCreateRequest$outboundSchema: z.ZodType<
  BitbucketCreateRequest$Outbound,
  z.ZodTypeDef,
  BitbucketCreateRequest
> = z.object({
  appPassword: z.string().optional(),
  authId: z.string(),
  bitbucketId: z.string().optional(),
  bitbucketUsername: z.string().optional(),
  bitbucketWorkspaceName: z.string().optional(),
  gitProviderId: z.string().optional(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BitbucketCreateRequest$ {
  /** @deprecated use `BitbucketCreateRequest$inboundSchema` instead. */
  export const inboundSchema = BitbucketCreateRequest$inboundSchema;
  /** @deprecated use `BitbucketCreateRequest$outboundSchema` instead. */
  export const outboundSchema = BitbucketCreateRequest$outboundSchema;
  /** @deprecated use `BitbucketCreateRequest$Outbound` instead. */
  export type Outbound = BitbucketCreateRequest$Outbound;
}

export function bitbucketCreateRequestToJSON(
  bitbucketCreateRequest: BitbucketCreateRequest,
): string {
  return JSON.stringify(
    BitbucketCreateRequest$outboundSchema.parse(bitbucketCreateRequest),
  );
}

export function bitbucketCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<BitbucketCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BitbucketCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BitbucketCreateRequest' from JSON`,
  );
}
