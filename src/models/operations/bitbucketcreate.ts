/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BitbucketCreateSecurity = {
  authorization: string;
};

export type BitbucketCreateRequest = {
  appPassword?: string | undefined;
  authId: string;
  bitbucketId?: string | undefined;
  bitbucketUsername?: string | undefined;
  bitbucketWorkspaceName?: string | undefined;
  gitProviderId?: string | undefined;
  name: string;
};

/** @internal */
export const BitbucketCreateSecurity$inboundSchema: z.ZodType<
  BitbucketCreateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type BitbucketCreateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const BitbucketCreateSecurity$outboundSchema: z.ZodType<
  BitbucketCreateSecurity$Outbound,
  z.ZodTypeDef,
  BitbucketCreateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BitbucketCreateSecurity$ {
  /** @deprecated use `BitbucketCreateSecurity$inboundSchema` instead. */
  export const inboundSchema = BitbucketCreateSecurity$inboundSchema;
  /** @deprecated use `BitbucketCreateSecurity$outboundSchema` instead. */
  export const outboundSchema = BitbucketCreateSecurity$outboundSchema;
  /** @deprecated use `BitbucketCreateSecurity$Outbound` instead. */
  export type Outbound = BitbucketCreateSecurity$Outbound;
}

export function bitbucketCreateSecurityToJSON(
  bitbucketCreateSecurity: BitbucketCreateSecurity,
): string {
  return JSON.stringify(
    BitbucketCreateSecurity$outboundSchema.parse(bitbucketCreateSecurity),
  );
}

export function bitbucketCreateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<BitbucketCreateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BitbucketCreateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BitbucketCreateSecurity' from JSON`,
  );
}

/** @internal */
export const BitbucketCreateRequest$inboundSchema: z.ZodType<
  BitbucketCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appPassword: z.string().optional(),
  authId: z.string(),
  bitbucketId: z.string().optional(),
  bitbucketUsername: z.string().optional(),
  bitbucketWorkspaceName: z.string().optional(),
  gitProviderId: z.string().optional(),
  name: z.string(),
});

/** @internal */
export type BitbucketCreateRequest$Outbound = {
  appPassword?: string | undefined;
  authId: string;
  bitbucketId?: string | undefined;
  bitbucketUsername?: string | undefined;
  bitbucketWorkspaceName?: string | undefined;
  gitProviderId?: string | undefined;
  name: string;
};

/** @internal */
export const BitbucketCreateRequest$outboundSchema: z.ZodType<
  BitbucketCreateRequest$Outbound,
  z.ZodTypeDef,
  BitbucketCreateRequest
> = z.object({
  appPassword: z.string().optional(),
  authId: z.string(),
  bitbucketId: z.string().optional(),
  bitbucketUsername: z.string().optional(),
  bitbucketWorkspaceName: z.string().optional(),
  gitProviderId: z.string().optional(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BitbucketCreateRequest$ {
  /** @deprecated use `BitbucketCreateRequest$inboundSchema` instead. */
  export const inboundSchema = BitbucketCreateRequest$inboundSchema;
  /** @deprecated use `BitbucketCreateRequest$outboundSchema` instead. */
  export const outboundSchema = BitbucketCreateRequest$outboundSchema;
  /** @deprecated use `BitbucketCreateRequest$Outbound` instead. */
  export type Outbound = BitbucketCreateRequest$Outbound;
}

export function bitbucketCreateRequestToJSON(
  bitbucketCreateRequest: BitbucketCreateRequest,
): string {
  return JSON.stringify(
    BitbucketCreateRequest$outboundSchema.parse(bitbucketCreateRequest),
  );
}

export function bitbucketCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<BitbucketCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BitbucketCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BitbucketCreateRequest' from JSON`,
  );
}
