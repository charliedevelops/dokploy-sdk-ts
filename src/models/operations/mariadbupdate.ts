/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type MariadbUpdateSecurity = {
  authorization: string;
};

export const MariadbUpdateApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type MariadbUpdateApplicationStatus = ClosedEnum<
  typeof MariadbUpdateApplicationStatus
>;

export type MariadbUpdateHealthCheckSwarm = {
  test?: Array<string> | undefined;
  interval?: number | undefined;
  timeout?: number | undefined;
  startPeriod?: number | undefined;
  retries?: number | undefined;
};

export type MariadbUpdateRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type MariadbUpdateSpread = {
  spreadDescriptor: string;
};

export type MariadbUpdatePreference = {
  spread: MariadbUpdateSpread;
};

export type MariadbUpdatePlatform = {
  architecture: string;
  os: string;
};

export type MariadbUpdatePlacementSwarm = {
  constraints?: Array<string> | undefined;
  preferences?: Array<MariadbUpdatePreference> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<MariadbUpdatePlatform> | undefined;
};

export type MariadbUpdateUpdateConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type MariadbUpdateRollbackConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type MariadbUpdateReplicated = {
  replicas?: number | undefined;
};

export type MariadbUpdateGlobal = {};

export type MariadbUpdateReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type MariadbUpdateGlobalJob = {};

export type MariadbUpdateModeSwarm = {
  replicated?: MariadbUpdateReplicated | undefined;
  global?: MariadbUpdateGlobal | undefined;
  replicatedJob?: MariadbUpdateReplicatedJob | undefined;
  globalJob?: MariadbUpdateGlobalJob | undefined;
};

export type MariadbUpdateDriverOpts = {};

export type MariadbUpdateNetworkSwarm = {
  target?: string | undefined;
  aliases?: Array<string> | undefined;
  driverOpts?: MariadbUpdateDriverOpts | undefined;
};

export type MariadbUpdateRequest = {
  mariadbId: string;
  name?: string | undefined;
  appName?: string | undefined;
  description?: string | null | undefined;
  databaseName?: string | undefined;
  databaseUser?: string | undefined;
  databasePassword?: string | undefined;
  databaseRootPassword?: string | undefined;
  dockerImage?: string | undefined;
  command?: string | null | undefined;
  env?: string | null | undefined;
  memoryReservation?: string | null | undefined;
  memoryLimit?: string | null | undefined;
  cpuReservation?: string | null | undefined;
  cpuLimit?: string | null | undefined;
  externalPort?: number | null | undefined;
  applicationStatus?: MariadbUpdateApplicationStatus | undefined;
  healthCheckSwarm?: MariadbUpdateHealthCheckSwarm | null | undefined;
  restartPolicySwarm?: MariadbUpdateRestartPolicySwarm | null | undefined;
  placementSwarm?: MariadbUpdatePlacementSwarm | null | undefined;
  updateConfigSwarm?: MariadbUpdateUpdateConfigSwarm | null | undefined;
  rollbackConfigSwarm?: MariadbUpdateRollbackConfigSwarm | null | undefined;
  modeSwarm?: MariadbUpdateModeSwarm | null | undefined;
  labelsSwarm?: { [k: string]: string } | null | undefined;
  networkSwarm?: Array<MariadbUpdateNetworkSwarm> | null | undefined;
  replicas?: number | undefined;
  createdAt?: string | undefined;
  environmentId?: string | undefined;
};

export type MariadbUpdateResponse = models.ErrorT | boolean;

/** @internal */
export const MariadbUpdateSecurity$inboundSchema: z.ZodType<
  MariadbUpdateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type MariadbUpdateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const MariadbUpdateSecurity$outboundSchema: z.ZodType<
  MariadbUpdateSecurity$Outbound,
  z.ZodTypeDef,
  MariadbUpdateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbUpdateSecurity$ {
  /** @deprecated use `MariadbUpdateSecurity$inboundSchema` instead. */
  export const inboundSchema = MariadbUpdateSecurity$inboundSchema;
  /** @deprecated use `MariadbUpdateSecurity$outboundSchema` instead. */
  export const outboundSchema = MariadbUpdateSecurity$outboundSchema;
  /** @deprecated use `MariadbUpdateSecurity$Outbound` instead. */
  export type Outbound = MariadbUpdateSecurity$Outbound;
}

export function mariadbUpdateSecurityToJSON(
  mariadbUpdateSecurity: MariadbUpdateSecurity,
): string {
  return JSON.stringify(
    MariadbUpdateSecurity$outboundSchema.parse(mariadbUpdateSecurity),
  );
}

export function mariadbUpdateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<MariadbUpdateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbUpdateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbUpdateSecurity' from JSON`,
  );
}

/** @internal */
export const MariadbUpdateApplicationStatus$inboundSchema: z.ZodNativeEnum<
  typeof MariadbUpdateApplicationStatus
> = z.nativeEnum(MariadbUpdateApplicationStatus);

/** @internal */
export const MariadbUpdateApplicationStatus$outboundSchema: z.ZodNativeEnum<
  typeof MariadbUpdateApplicationStatus
> = MariadbUpdateApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbUpdateApplicationStatus$ {
  /** @deprecated use `MariadbUpdateApplicationStatus$inboundSchema` instead. */
  export const inboundSchema = MariadbUpdateApplicationStatus$inboundSchema;
  /** @deprecated use `MariadbUpdateApplicationStatus$outboundSchema` instead. */
  export const outboundSchema = MariadbUpdateApplicationStatus$outboundSchema;
}

/** @internal */
export const MariadbUpdateHealthCheckSwarm$inboundSchema: z.ZodType<
  MariadbUpdateHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Test: z.array(z.string()).optional(),
  Interval: z.number().optional(),
  Timeout: z.number().optional(),
  StartPeriod: z.number().optional(),
  Retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Test": "test",
    "Interval": "interval",
    "Timeout": "timeout",
    "StartPeriod": "startPeriod",
    "Retries": "retries",
  });
});

/** @internal */
export type MariadbUpdateHealthCheckSwarm$Outbound = {
  Test?: Array<string> | undefined;
  Interval?: number | undefined;
  Timeout?: number | undefined;
  StartPeriod?: number | undefined;
  Retries?: number | undefined;
};

/** @internal */
export const MariadbUpdateHealthCheckSwarm$outboundSchema: z.ZodType<
  MariadbUpdateHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  MariadbUpdateHealthCheckSwarm
> = z.object({
  test: z.array(z.string()).optional(),
  interval: z.number().optional(),
  timeout: z.number().optional(),
  startPeriod: z.number().optional(),
  retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    test: "Test",
    interval: "Interval",
    timeout: "Timeout",
    startPeriod: "StartPeriod",
    retries: "Retries",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbUpdateHealthCheckSwarm$ {
  /** @deprecated use `MariadbUpdateHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema = MariadbUpdateHealthCheckSwarm$inboundSchema;
  /** @deprecated use `MariadbUpdateHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema = MariadbUpdateHealthCheckSwarm$outboundSchema;
  /** @deprecated use `MariadbUpdateHealthCheckSwarm$Outbound` instead. */
  export type Outbound = MariadbUpdateHealthCheckSwarm$Outbound;
}

export function mariadbUpdateHealthCheckSwarmToJSON(
  mariadbUpdateHealthCheckSwarm: MariadbUpdateHealthCheckSwarm,
): string {
  return JSON.stringify(
    MariadbUpdateHealthCheckSwarm$outboundSchema.parse(
      mariadbUpdateHealthCheckSwarm,
    ),
  );
}

export function mariadbUpdateHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbUpdateHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbUpdateHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbUpdateHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbUpdateRestartPolicySwarm$inboundSchema: z.ZodType<
  MariadbUpdateRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type MariadbUpdateRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const MariadbUpdateRestartPolicySwarm$outboundSchema: z.ZodType<
  MariadbUpdateRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  MariadbUpdateRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbUpdateRestartPolicySwarm$ {
  /** @deprecated use `MariadbUpdateRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema = MariadbUpdateRestartPolicySwarm$inboundSchema;
  /** @deprecated use `MariadbUpdateRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema = MariadbUpdateRestartPolicySwarm$outboundSchema;
  /** @deprecated use `MariadbUpdateRestartPolicySwarm$Outbound` instead. */
  export type Outbound = MariadbUpdateRestartPolicySwarm$Outbound;
}

export function mariadbUpdateRestartPolicySwarmToJSON(
  mariadbUpdateRestartPolicySwarm: MariadbUpdateRestartPolicySwarm,
): string {
  return JSON.stringify(
    MariadbUpdateRestartPolicySwarm$outboundSchema.parse(
      mariadbUpdateRestartPolicySwarm,
    ),
  );
}

export function mariadbUpdateRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbUpdateRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbUpdateRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbUpdateRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const MariadbUpdateSpread$inboundSchema: z.ZodType<
  MariadbUpdateSpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type MariadbUpdateSpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const MariadbUpdateSpread$outboundSchema: z.ZodType<
  MariadbUpdateSpread$Outbound,
  z.ZodTypeDef,
  MariadbUpdateSpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbUpdateSpread$ {
  /** @deprecated use `MariadbUpdateSpread$inboundSchema` instead. */
  export const inboundSchema = MariadbUpdateSpread$inboundSchema;
  /** @deprecated use `MariadbUpdateSpread$outboundSchema` instead. */
  export const outboundSchema = MariadbUpdateSpread$outboundSchema;
  /** @deprecated use `MariadbUpdateSpread$Outbound` instead. */
  export type Outbound = MariadbUpdateSpread$Outbound;
}

export function mariadbUpdateSpreadToJSON(
  mariadbUpdateSpread: MariadbUpdateSpread,
): string {
  return JSON.stringify(
    MariadbUpdateSpread$outboundSchema.parse(mariadbUpdateSpread),
  );
}

export function mariadbUpdateSpreadFromJSON(
  jsonString: string,
): SafeParseResult<MariadbUpdateSpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbUpdateSpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbUpdateSpread' from JSON`,
  );
}

/** @internal */
export const MariadbUpdatePreference$inboundSchema: z.ZodType<
  MariadbUpdatePreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => MariadbUpdateSpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type MariadbUpdatePreference$Outbound = {
  Spread: MariadbUpdateSpread$Outbound;
};

/** @internal */
export const MariadbUpdatePreference$outboundSchema: z.ZodType<
  MariadbUpdatePreference$Outbound,
  z.ZodTypeDef,
  MariadbUpdatePreference
> = z.object({
  spread: z.lazy(() => MariadbUpdateSpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbUpdatePreference$ {
  /** @deprecated use `MariadbUpdatePreference$inboundSchema` instead. */
  export const inboundSchema = MariadbUpdatePreference$inboundSchema;
  /** @deprecated use `MariadbUpdatePreference$outboundSchema` instead. */
  export const outboundSchema = MariadbUpdatePreference$outboundSchema;
  /** @deprecated use `MariadbUpdatePreference$Outbound` instead. */
  export type Outbound = MariadbUpdatePreference$Outbound;
}

export function mariadbUpdatePreferenceToJSON(
  mariadbUpdatePreference: MariadbUpdatePreference,
): string {
  return JSON.stringify(
    MariadbUpdatePreference$outboundSchema.parse(mariadbUpdatePreference),
  );
}

export function mariadbUpdatePreferenceFromJSON(
  jsonString: string,
): SafeParseResult<MariadbUpdatePreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbUpdatePreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbUpdatePreference' from JSON`,
  );
}

/** @internal */
export const MariadbUpdatePlatform$inboundSchema: z.ZodType<
  MariadbUpdatePlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type MariadbUpdatePlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const MariadbUpdatePlatform$outboundSchema: z.ZodType<
  MariadbUpdatePlatform$Outbound,
  z.ZodTypeDef,
  MariadbUpdatePlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbUpdatePlatform$ {
  /** @deprecated use `MariadbUpdatePlatform$inboundSchema` instead. */
  export const inboundSchema = MariadbUpdatePlatform$inboundSchema;
  /** @deprecated use `MariadbUpdatePlatform$outboundSchema` instead. */
  export const outboundSchema = MariadbUpdatePlatform$outboundSchema;
  /** @deprecated use `MariadbUpdatePlatform$Outbound` instead. */
  export type Outbound = MariadbUpdatePlatform$Outbound;
}

export function mariadbUpdatePlatformToJSON(
  mariadbUpdatePlatform: MariadbUpdatePlatform,
): string {
  return JSON.stringify(
    MariadbUpdatePlatform$outboundSchema.parse(mariadbUpdatePlatform),
  );
}

export function mariadbUpdatePlatformFromJSON(
  jsonString: string,
): SafeParseResult<MariadbUpdatePlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbUpdatePlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbUpdatePlatform' from JSON`,
  );
}

/** @internal */
export const MariadbUpdatePlacementSwarm$inboundSchema: z.ZodType<
  MariadbUpdatePlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  Preferences: z.array(z.lazy(() => MariadbUpdatePreference$inboundSchema))
    .optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => MariadbUpdatePlatform$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "Preferences": "preferences",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
  });
});

/** @internal */
export type MariadbUpdatePlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  Preferences?: Array<MariadbUpdatePreference$Outbound> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<MariadbUpdatePlatform$Outbound> | undefined;
};

/** @internal */
export const MariadbUpdatePlacementSwarm$outboundSchema: z.ZodType<
  MariadbUpdatePlacementSwarm$Outbound,
  z.ZodTypeDef,
  MariadbUpdatePlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  preferences: z.array(z.lazy(() => MariadbUpdatePreference$outboundSchema))
    .optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => MariadbUpdatePlatform$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    preferences: "Preferences",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbUpdatePlacementSwarm$ {
  /** @deprecated use `MariadbUpdatePlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = MariadbUpdatePlacementSwarm$inboundSchema;
  /** @deprecated use `MariadbUpdatePlacementSwarm$outboundSchema` instead. */
  export const outboundSchema = MariadbUpdatePlacementSwarm$outboundSchema;
  /** @deprecated use `MariadbUpdatePlacementSwarm$Outbound` instead. */
  export type Outbound = MariadbUpdatePlacementSwarm$Outbound;
}

export function mariadbUpdatePlacementSwarmToJSON(
  mariadbUpdatePlacementSwarm: MariadbUpdatePlacementSwarm,
): string {
  return JSON.stringify(
    MariadbUpdatePlacementSwarm$outboundSchema.parse(
      mariadbUpdatePlacementSwarm,
    ),
  );
}

export function mariadbUpdatePlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbUpdatePlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbUpdatePlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbUpdatePlacementSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbUpdateUpdateConfigSwarm$inboundSchema: z.ZodType<
  MariadbUpdateUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type MariadbUpdateUpdateConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const MariadbUpdateUpdateConfigSwarm$outboundSchema: z.ZodType<
  MariadbUpdateUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  MariadbUpdateUpdateConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbUpdateUpdateConfigSwarm$ {
  /** @deprecated use `MariadbUpdateUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MariadbUpdateUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `MariadbUpdateUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MariadbUpdateUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `MariadbUpdateUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = MariadbUpdateUpdateConfigSwarm$Outbound;
}

export function mariadbUpdateUpdateConfigSwarmToJSON(
  mariadbUpdateUpdateConfigSwarm: MariadbUpdateUpdateConfigSwarm,
): string {
  return JSON.stringify(
    MariadbUpdateUpdateConfigSwarm$outboundSchema.parse(
      mariadbUpdateUpdateConfigSwarm,
    ),
  );
}

export function mariadbUpdateUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbUpdateUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbUpdateUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbUpdateUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbUpdateRollbackConfigSwarm$inboundSchema: z.ZodType<
  MariadbUpdateRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type MariadbUpdateRollbackConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const MariadbUpdateRollbackConfigSwarm$outboundSchema: z.ZodType<
  MariadbUpdateRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  MariadbUpdateRollbackConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbUpdateRollbackConfigSwarm$ {
  /** @deprecated use `MariadbUpdateRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MariadbUpdateRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `MariadbUpdateRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MariadbUpdateRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `MariadbUpdateRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = MariadbUpdateRollbackConfigSwarm$Outbound;
}

export function mariadbUpdateRollbackConfigSwarmToJSON(
  mariadbUpdateRollbackConfigSwarm: MariadbUpdateRollbackConfigSwarm,
): string {
  return JSON.stringify(
    MariadbUpdateRollbackConfigSwarm$outboundSchema.parse(
      mariadbUpdateRollbackConfigSwarm,
    ),
  );
}

export function mariadbUpdateRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbUpdateRollbackConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbUpdateRollbackConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbUpdateRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbUpdateReplicated$inboundSchema: z.ZodType<
  MariadbUpdateReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type MariadbUpdateReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const MariadbUpdateReplicated$outboundSchema: z.ZodType<
  MariadbUpdateReplicated$Outbound,
  z.ZodTypeDef,
  MariadbUpdateReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbUpdateReplicated$ {
  /** @deprecated use `MariadbUpdateReplicated$inboundSchema` instead. */
  export const inboundSchema = MariadbUpdateReplicated$inboundSchema;
  /** @deprecated use `MariadbUpdateReplicated$outboundSchema` instead. */
  export const outboundSchema = MariadbUpdateReplicated$outboundSchema;
  /** @deprecated use `MariadbUpdateReplicated$Outbound` instead. */
  export type Outbound = MariadbUpdateReplicated$Outbound;
}

export function mariadbUpdateReplicatedToJSON(
  mariadbUpdateReplicated: MariadbUpdateReplicated,
): string {
  return JSON.stringify(
    MariadbUpdateReplicated$outboundSchema.parse(mariadbUpdateReplicated),
  );
}

export function mariadbUpdateReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<MariadbUpdateReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbUpdateReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbUpdateReplicated' from JSON`,
  );
}

/** @internal */
export const MariadbUpdateGlobal$inboundSchema: z.ZodType<
  MariadbUpdateGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MariadbUpdateGlobal$Outbound = {};

/** @internal */
export const MariadbUpdateGlobal$outboundSchema: z.ZodType<
  MariadbUpdateGlobal$Outbound,
  z.ZodTypeDef,
  MariadbUpdateGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbUpdateGlobal$ {
  /** @deprecated use `MariadbUpdateGlobal$inboundSchema` instead. */
  export const inboundSchema = MariadbUpdateGlobal$inboundSchema;
  /** @deprecated use `MariadbUpdateGlobal$outboundSchema` instead. */
  export const outboundSchema = MariadbUpdateGlobal$outboundSchema;
  /** @deprecated use `MariadbUpdateGlobal$Outbound` instead. */
  export type Outbound = MariadbUpdateGlobal$Outbound;
}

export function mariadbUpdateGlobalToJSON(
  mariadbUpdateGlobal: MariadbUpdateGlobal,
): string {
  return JSON.stringify(
    MariadbUpdateGlobal$outboundSchema.parse(mariadbUpdateGlobal),
  );
}

export function mariadbUpdateGlobalFromJSON(
  jsonString: string,
): SafeParseResult<MariadbUpdateGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbUpdateGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbUpdateGlobal' from JSON`,
  );
}

/** @internal */
export const MariadbUpdateReplicatedJob$inboundSchema: z.ZodType<
  MariadbUpdateReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type MariadbUpdateReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const MariadbUpdateReplicatedJob$outboundSchema: z.ZodType<
  MariadbUpdateReplicatedJob$Outbound,
  z.ZodTypeDef,
  MariadbUpdateReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbUpdateReplicatedJob$ {
  /** @deprecated use `MariadbUpdateReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = MariadbUpdateReplicatedJob$inboundSchema;
  /** @deprecated use `MariadbUpdateReplicatedJob$outboundSchema` instead. */
  export const outboundSchema = MariadbUpdateReplicatedJob$outboundSchema;
  /** @deprecated use `MariadbUpdateReplicatedJob$Outbound` instead. */
  export type Outbound = MariadbUpdateReplicatedJob$Outbound;
}

export function mariadbUpdateReplicatedJobToJSON(
  mariadbUpdateReplicatedJob: MariadbUpdateReplicatedJob,
): string {
  return JSON.stringify(
    MariadbUpdateReplicatedJob$outboundSchema.parse(mariadbUpdateReplicatedJob),
  );
}

export function mariadbUpdateReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<MariadbUpdateReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbUpdateReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbUpdateReplicatedJob' from JSON`,
  );
}

/** @internal */
export const MariadbUpdateGlobalJob$inboundSchema: z.ZodType<
  MariadbUpdateGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MariadbUpdateGlobalJob$Outbound = {};

/** @internal */
export const MariadbUpdateGlobalJob$outboundSchema: z.ZodType<
  MariadbUpdateGlobalJob$Outbound,
  z.ZodTypeDef,
  MariadbUpdateGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbUpdateGlobalJob$ {
  /** @deprecated use `MariadbUpdateGlobalJob$inboundSchema` instead. */
  export const inboundSchema = MariadbUpdateGlobalJob$inboundSchema;
  /** @deprecated use `MariadbUpdateGlobalJob$outboundSchema` instead. */
  export const outboundSchema = MariadbUpdateGlobalJob$outboundSchema;
  /** @deprecated use `MariadbUpdateGlobalJob$Outbound` instead. */
  export type Outbound = MariadbUpdateGlobalJob$Outbound;
}

export function mariadbUpdateGlobalJobToJSON(
  mariadbUpdateGlobalJob: MariadbUpdateGlobalJob,
): string {
  return JSON.stringify(
    MariadbUpdateGlobalJob$outboundSchema.parse(mariadbUpdateGlobalJob),
  );
}

export function mariadbUpdateGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<MariadbUpdateGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbUpdateGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbUpdateGlobalJob' from JSON`,
  );
}

/** @internal */
export const MariadbUpdateModeSwarm$inboundSchema: z.ZodType<
  MariadbUpdateModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicated: z.lazy(() => MariadbUpdateReplicated$inboundSchema).optional(),
  Global: z.lazy(() => MariadbUpdateGlobal$inboundSchema).optional(),
  ReplicatedJob: z.lazy(() => MariadbUpdateReplicatedJob$inboundSchema)
    .optional(),
  GlobalJob: z.lazy(() => MariadbUpdateGlobalJob$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicated": "replicated",
    "Global": "global",
    "ReplicatedJob": "replicatedJob",
    "GlobalJob": "globalJob",
  });
});

/** @internal */
export type MariadbUpdateModeSwarm$Outbound = {
  Replicated?: MariadbUpdateReplicated$Outbound | undefined;
  Global?: MariadbUpdateGlobal$Outbound | undefined;
  ReplicatedJob?: MariadbUpdateReplicatedJob$Outbound | undefined;
  GlobalJob?: MariadbUpdateGlobalJob$Outbound | undefined;
};

/** @internal */
export const MariadbUpdateModeSwarm$outboundSchema: z.ZodType<
  MariadbUpdateModeSwarm$Outbound,
  z.ZodTypeDef,
  MariadbUpdateModeSwarm
> = z.object({
  replicated: z.lazy(() => MariadbUpdateReplicated$outboundSchema).optional(),
  global: z.lazy(() => MariadbUpdateGlobal$outboundSchema).optional(),
  replicatedJob: z.lazy(() => MariadbUpdateReplicatedJob$outboundSchema)
    .optional(),
  globalJob: z.lazy(() => MariadbUpdateGlobalJob$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    replicated: "Replicated",
    global: "Global",
    replicatedJob: "ReplicatedJob",
    globalJob: "GlobalJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbUpdateModeSwarm$ {
  /** @deprecated use `MariadbUpdateModeSwarm$inboundSchema` instead. */
  export const inboundSchema = MariadbUpdateModeSwarm$inboundSchema;
  /** @deprecated use `MariadbUpdateModeSwarm$outboundSchema` instead. */
  export const outboundSchema = MariadbUpdateModeSwarm$outboundSchema;
  /** @deprecated use `MariadbUpdateModeSwarm$Outbound` instead. */
  export type Outbound = MariadbUpdateModeSwarm$Outbound;
}

export function mariadbUpdateModeSwarmToJSON(
  mariadbUpdateModeSwarm: MariadbUpdateModeSwarm,
): string {
  return JSON.stringify(
    MariadbUpdateModeSwarm$outboundSchema.parse(mariadbUpdateModeSwarm),
  );
}

export function mariadbUpdateModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbUpdateModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbUpdateModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbUpdateModeSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbUpdateDriverOpts$inboundSchema: z.ZodType<
  MariadbUpdateDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MariadbUpdateDriverOpts$Outbound = {};

/** @internal */
export const MariadbUpdateDriverOpts$outboundSchema: z.ZodType<
  MariadbUpdateDriverOpts$Outbound,
  z.ZodTypeDef,
  MariadbUpdateDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbUpdateDriverOpts$ {
  /** @deprecated use `MariadbUpdateDriverOpts$inboundSchema` instead. */
  export const inboundSchema = MariadbUpdateDriverOpts$inboundSchema;
  /** @deprecated use `MariadbUpdateDriverOpts$outboundSchema` instead. */
  export const outboundSchema = MariadbUpdateDriverOpts$outboundSchema;
  /** @deprecated use `MariadbUpdateDriverOpts$Outbound` instead. */
  export type Outbound = MariadbUpdateDriverOpts$Outbound;
}

export function mariadbUpdateDriverOptsToJSON(
  mariadbUpdateDriverOpts: MariadbUpdateDriverOpts,
): string {
  return JSON.stringify(
    MariadbUpdateDriverOpts$outboundSchema.parse(mariadbUpdateDriverOpts),
  );
}

export function mariadbUpdateDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<MariadbUpdateDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbUpdateDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbUpdateDriverOpts' from JSON`,
  );
}

/** @internal */
export const MariadbUpdateNetworkSwarm$inboundSchema: z.ZodType<
  MariadbUpdateNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Target: z.string().optional(),
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => MariadbUpdateDriverOpts$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Target": "target",
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
  });
});

/** @internal */
export type MariadbUpdateNetworkSwarm$Outbound = {
  Target?: string | undefined;
  Aliases?: Array<string> | undefined;
  DriverOpts?: MariadbUpdateDriverOpts$Outbound | undefined;
};

/** @internal */
export const MariadbUpdateNetworkSwarm$outboundSchema: z.ZodType<
  MariadbUpdateNetworkSwarm$Outbound,
  z.ZodTypeDef,
  MariadbUpdateNetworkSwarm
> = z.object({
  target: z.string().optional(),
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => MariadbUpdateDriverOpts$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    target: "Target",
    aliases: "Aliases",
    driverOpts: "DriverOpts",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbUpdateNetworkSwarm$ {
  /** @deprecated use `MariadbUpdateNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = MariadbUpdateNetworkSwarm$inboundSchema;
  /** @deprecated use `MariadbUpdateNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = MariadbUpdateNetworkSwarm$outboundSchema;
  /** @deprecated use `MariadbUpdateNetworkSwarm$Outbound` instead. */
  export type Outbound = MariadbUpdateNetworkSwarm$Outbound;
}

export function mariadbUpdateNetworkSwarmToJSON(
  mariadbUpdateNetworkSwarm: MariadbUpdateNetworkSwarm,
): string {
  return JSON.stringify(
    MariadbUpdateNetworkSwarm$outboundSchema.parse(mariadbUpdateNetworkSwarm),
  );
}

export function mariadbUpdateNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbUpdateNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbUpdateNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbUpdateNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbUpdateRequest$inboundSchema: z.ZodType<
  MariadbUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mariadbId: z.string(),
  name: z.string().optional(),
  appName: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  databaseName: z.string().optional(),
  databaseUser: z.string().optional(),
  databasePassword: z.string().optional(),
  databaseRootPassword: z.string().optional(),
  dockerImage: z.string().default("mariadb:6"),
  command: z.nullable(z.string()).optional(),
  env: z.nullable(z.string()).optional(),
  memoryReservation: z.nullable(z.string()).optional(),
  memoryLimit: z.nullable(z.string()).optional(),
  cpuReservation: z.nullable(z.string()).optional(),
  cpuLimit: z.nullable(z.string()).optional(),
  externalPort: z.nullable(z.number()).optional(),
  applicationStatus: MariadbUpdateApplicationStatus$inboundSchema.optional(),
  healthCheckSwarm: z.nullable(
    z.lazy(() => MariadbUpdateHealthCheckSwarm$inboundSchema),
  ).optional(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MariadbUpdateRestartPolicySwarm$inboundSchema),
  ).optional(),
  placementSwarm: z.nullable(
    z.lazy(() => MariadbUpdatePlacementSwarm$inboundSchema),
  ).optional(),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MariadbUpdateUpdateConfigSwarm$inboundSchema),
  ).optional(),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MariadbUpdateRollbackConfigSwarm$inboundSchema),
  ).optional(),
  modeSwarm: z.nullable(z.lazy(() => MariadbUpdateModeSwarm$inboundSchema))
    .optional(),
  labelsSwarm: z.nullable(z.record(z.string())).optional(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MariadbUpdateNetworkSwarm$inboundSchema)),
  ).optional(),
  replicas: z.number().optional(),
  createdAt: z.string().optional(),
  environmentId: z.string().optional(),
});

/** @internal */
export type MariadbUpdateRequest$Outbound = {
  mariadbId: string;
  name?: string | undefined;
  appName?: string | undefined;
  description?: string | null | undefined;
  databaseName?: string | undefined;
  databaseUser?: string | undefined;
  databasePassword?: string | undefined;
  databaseRootPassword?: string | undefined;
  dockerImage: string;
  command?: string | null | undefined;
  env?: string | null | undefined;
  memoryReservation?: string | null | undefined;
  memoryLimit?: string | null | undefined;
  cpuReservation?: string | null | undefined;
  cpuLimit?: string | null | undefined;
  externalPort?: number | null | undefined;
  applicationStatus?: string | undefined;
  healthCheckSwarm?: MariadbUpdateHealthCheckSwarm$Outbound | null | undefined;
  restartPolicySwarm?:
    | MariadbUpdateRestartPolicySwarm$Outbound
    | null
    | undefined;
  placementSwarm?: MariadbUpdatePlacementSwarm$Outbound | null | undefined;
  updateConfigSwarm?:
    | MariadbUpdateUpdateConfigSwarm$Outbound
    | null
    | undefined;
  rollbackConfigSwarm?:
    | MariadbUpdateRollbackConfigSwarm$Outbound
    | null
    | undefined;
  modeSwarm?: MariadbUpdateModeSwarm$Outbound | null | undefined;
  labelsSwarm?: { [k: string]: string } | null | undefined;
  networkSwarm?: Array<MariadbUpdateNetworkSwarm$Outbound> | null | undefined;
  replicas?: number | undefined;
  createdAt?: string | undefined;
  environmentId?: string | undefined;
};

/** @internal */
export const MariadbUpdateRequest$outboundSchema: z.ZodType<
  MariadbUpdateRequest$Outbound,
  z.ZodTypeDef,
  MariadbUpdateRequest
> = z.object({
  mariadbId: z.string(),
  name: z.string().optional(),
  appName: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  databaseName: z.string().optional(),
  databaseUser: z.string().optional(),
  databasePassword: z.string().optional(),
  databaseRootPassword: z.string().optional(),
  dockerImage: z.string().default("mariadb:6"),
  command: z.nullable(z.string()).optional(),
  env: z.nullable(z.string()).optional(),
  memoryReservation: z.nullable(z.string()).optional(),
  memoryLimit: z.nullable(z.string()).optional(),
  cpuReservation: z.nullable(z.string()).optional(),
  cpuLimit: z.nullable(z.string()).optional(),
  externalPort: z.nullable(z.number()).optional(),
  applicationStatus: MariadbUpdateApplicationStatus$outboundSchema.optional(),
  healthCheckSwarm: z.nullable(
    z.lazy(() => MariadbUpdateHealthCheckSwarm$outboundSchema),
  ).optional(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MariadbUpdateRestartPolicySwarm$outboundSchema),
  ).optional(),
  placementSwarm: z.nullable(
    z.lazy(() => MariadbUpdatePlacementSwarm$outboundSchema),
  ).optional(),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MariadbUpdateUpdateConfigSwarm$outboundSchema),
  ).optional(),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MariadbUpdateRollbackConfigSwarm$outboundSchema),
  ).optional(),
  modeSwarm: z.nullable(z.lazy(() => MariadbUpdateModeSwarm$outboundSchema))
    .optional(),
  labelsSwarm: z.nullable(z.record(z.string())).optional(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MariadbUpdateNetworkSwarm$outboundSchema)),
  ).optional(),
  replicas: z.number().optional(),
  createdAt: z.string().optional(),
  environmentId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbUpdateRequest$ {
  /** @deprecated use `MariadbUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = MariadbUpdateRequest$inboundSchema;
  /** @deprecated use `MariadbUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = MariadbUpdateRequest$outboundSchema;
  /** @deprecated use `MariadbUpdateRequest$Outbound` instead. */
  export type Outbound = MariadbUpdateRequest$Outbound;
}

export function mariadbUpdateRequestToJSON(
  mariadbUpdateRequest: MariadbUpdateRequest,
): string {
  return JSON.stringify(
    MariadbUpdateRequest$outboundSchema.parse(mariadbUpdateRequest),
  );
}

export function mariadbUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<MariadbUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbUpdateRequest' from JSON`,
  );
}

/** @internal */
export const MariadbUpdateResponse$inboundSchema: z.ZodType<
  MariadbUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.boolean()]);

/** @internal */
export type MariadbUpdateResponse$Outbound = models.ErrorT$Outbound | boolean;

/** @internal */
export const MariadbUpdateResponse$outboundSchema: z.ZodType<
  MariadbUpdateResponse$Outbound,
  z.ZodTypeDef,
  MariadbUpdateResponse
> = z.union([models.ErrorT$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbUpdateResponse$ {
  /** @deprecated use `MariadbUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = MariadbUpdateResponse$inboundSchema;
  /** @deprecated use `MariadbUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = MariadbUpdateResponse$outboundSchema;
  /** @deprecated use `MariadbUpdateResponse$Outbound` instead. */
  export type Outbound = MariadbUpdateResponse$Outbound;
}

export function mariadbUpdateResponseToJSON(
  mariadbUpdateResponse: MariadbUpdateResponse,
): string {
  return JSON.stringify(
    MariadbUpdateResponse$outboundSchema.parse(mariadbUpdateResponse),
  );
}

export function mariadbUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<MariadbUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbUpdateResponse' from JSON`,
  );
}
