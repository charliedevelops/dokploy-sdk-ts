/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type EnvironmentOneRequest = {
  environmentId: string;
};

export const EnvironmentOneApplicationApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type EnvironmentOneApplicationApplicationStatus = ClosedEnum<
  typeof EnvironmentOneApplicationApplicationStatus
>;

export const EnvironmentOneBuildType = {
  Dockerfile: "dockerfile",
  HerokuBuildpacks: "heroku_buildpacks",
  PaketoBuildpacks: "paketo_buildpacks",
  Nixpacks: "nixpacks",
  Static: "static",
  Railpack: "railpack",
} as const;
export type EnvironmentOneBuildType = ClosedEnum<
  typeof EnvironmentOneBuildType
>;

export const EnvironmentOneHealthCheckSwarmApplicationEnum = {
  Null: "null",
} as const;
export type EnvironmentOneHealthCheckSwarmApplicationEnum = ClosedEnum<
  typeof EnvironmentOneHealthCheckSwarmApplicationEnum
>;

export type EnvironmentOneHealthCheckSwarmApplicationUnion =
  | string
  | number
  | boolean
  | EnvironmentOneHealthCheckSwarmApplicationEnum;

export type EnvironmentOneApplicationHealthCheckSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneHealthCheckSwarmApplicationEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneLabelsSwarmApplicationEnum = {
  Null: "null",
} as const;
export type EnvironmentOneLabelsSwarmApplicationEnum = ClosedEnum<
  typeof EnvironmentOneLabelsSwarmApplicationEnum
>;

export type EnvironmentOneLabelsSwarmApplicationUnion =
  | string
  | number
  | boolean
  | EnvironmentOneLabelsSwarmApplicationEnum;

export type EnvironmentOneApplicationLabelsSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneLabelsSwarmApplicationEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneModeSwarmApplicationEnum = {
  Null: "null",
} as const;
export type EnvironmentOneModeSwarmApplicationEnum = ClosedEnum<
  typeof EnvironmentOneModeSwarmApplicationEnum
>;

export type EnvironmentOneModeSwarmApplicationUnion =
  | string
  | number
  | boolean
  | EnvironmentOneModeSwarmApplicationEnum;

export type EnvironmentOneApplicationModeSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneModeSwarmApplicationEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneNetworkSwarmApplicationEnum = {
  Null: "null",
} as const;
export type EnvironmentOneNetworkSwarmApplicationEnum = ClosedEnum<
  typeof EnvironmentOneNetworkSwarmApplicationEnum
>;

export type EnvironmentOneNetworkSwarmApplicationUnion =
  | string
  | number
  | boolean
  | EnvironmentOneNetworkSwarmApplicationEnum;

export type EnvironmentOneApplicationNetworkSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneNetworkSwarmApplicationEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOnePlacementSwarmApplicationEnum = {
  Null: "null",
} as const;
export type EnvironmentOnePlacementSwarmApplicationEnum = ClosedEnum<
  typeof EnvironmentOnePlacementSwarmApplicationEnum
>;

export type EnvironmentOnePlacementSwarmApplicationUnion =
  | string
  | number
  | boolean
  | EnvironmentOnePlacementSwarmApplicationEnum;

export type EnvironmentOneApplicationPlacementSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOnePlacementSwarmApplicationEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOnePreviewCertificateType = {
  Letsencrypt: "letsencrypt",
  None: "none",
  Custom: "custom",
} as const;
export type EnvironmentOnePreviewCertificateType = ClosedEnum<
  typeof EnvironmentOnePreviewCertificateType
>;

export const EnvironmentOneRestartPolicySwarmApplicationEnum = {
  Null: "null",
} as const;
export type EnvironmentOneRestartPolicySwarmApplicationEnum = ClosedEnum<
  typeof EnvironmentOneRestartPolicySwarmApplicationEnum
>;

export type EnvironmentOneRestartPolicySwarmApplicationUnion =
  | string
  | number
  | boolean
  | EnvironmentOneRestartPolicySwarmApplicationEnum;

export type EnvironmentOneApplicationRestartPolicySwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneRestartPolicySwarmApplicationEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneRollbackConfigSwarmApplicationEnum = {
  Null: "null",
} as const;
export type EnvironmentOneRollbackConfigSwarmApplicationEnum = ClosedEnum<
  typeof EnvironmentOneRollbackConfigSwarmApplicationEnum
>;

export type EnvironmentOneRollbackConfigSwarmApplicationUnion =
  | string
  | number
  | boolean
  | EnvironmentOneRollbackConfigSwarmApplicationEnum;

export type EnvironmentOneApplicationRollbackConfigSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneRollbackConfigSwarmApplicationEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneApplicationSourceType = {
  Docker: "docker",
  Git: "git",
  Github: "github",
  Gitlab: "gitlab",
  Bitbucket: "bitbucket",
  Gitea: "gitea",
  Drop: "drop",
} as const;
export type EnvironmentOneApplicationSourceType = ClosedEnum<
  typeof EnvironmentOneApplicationSourceType
>;

export const EnvironmentOneApplicationTriggerType = {
  Push: "push",
  Tag: "tag",
} as const;
export type EnvironmentOneApplicationTriggerType = ClosedEnum<
  typeof EnvironmentOneApplicationTriggerType
>;

export const EnvironmentOneUpdateConfigSwarmApplicationEnum = {
  Null: "null",
} as const;
export type EnvironmentOneUpdateConfigSwarmApplicationEnum = ClosedEnum<
  typeof EnvironmentOneUpdateConfigSwarmApplicationEnum
>;

export type EnvironmentOneUpdateConfigSwarmApplicationUnion =
  | string
  | number
  | boolean
  | EnvironmentOneUpdateConfigSwarmApplicationEnum;

export type EnvironmentOneApplicationUpdateConfigSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneUpdateConfigSwarmApplicationEnum
  | Array<any>
  | { [k: string]: any };

export type EnvironmentOneApplication = {
  appName: string;
  applicationId: string;
  applicationStatus: EnvironmentOneApplicationApplicationStatus;
  autoDeploy: boolean | null;
  bitbucketBranch: string | null;
  bitbucketBuildPath: string | null;
  bitbucketId: string | null;
  bitbucketOwner: string | null;
  bitbucketRepository: string | null;
  branch: string | null;
  buildArgs: string | null;
  buildPath: string | null;
  buildType: EnvironmentOneBuildType;
  cleanCache: boolean | null;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  customGitBranch: string | null;
  customGitBuildPath: string | null;
  customGitSSHKeyId: string | null;
  customGitUrl: string | null;
  description: string | null;
  dockerBuildStage: string | null;
  dockerContextPath: string | null;
  dockerImage: string | null;
  dockerfile: string | null;
  dropBuildPath: string | null;
  enableSubmodules: boolean;
  enabled: boolean | null;
  env: string | null;
  environmentId: string;
  giteaBranch: string | null;
  giteaBuildPath: string | null;
  giteaId: string | null;
  giteaOwner: string | null;
  giteaRepository: string | null;
  githubId: string | null;
  gitlabBranch: string | null;
  gitlabBuildPath: string | null;
  gitlabId: string | null;
  gitlabOwner: string | null;
  gitlabPathNamespace: string | null;
  gitlabProjectId: number | null;
  gitlabRepository: string | null;
  healthCheckSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneHealthCheckSwarmApplicationEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  herokuVersion: string | null;
  isPreviewDeploymentsActive: boolean | null;
  isStaticSpa: boolean | null;
  labelsSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneLabelsSwarmApplicationEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneModeSwarmApplicationEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  name: string;
  networkSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneNetworkSwarmApplicationEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  owner: string | null;
  password: string | null;
  placementSwarm:
    | string
    | number
    | boolean
    | EnvironmentOnePlacementSwarmApplicationEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  previewBuildArgs: string | null;
  previewCertificateType: EnvironmentOnePreviewCertificateType;
  previewCustomCertResolver: string | null;
  previewEnv: string | null;
  previewHttps: boolean;
  previewLabels: Array<string> | null;
  previewLimit: number | null;
  previewPath: string | null;
  previewPort: number | null;
  previewRequireCollaboratorPermissions: boolean | null;
  previewWildcard: string | null;
  publishDirectory: string | null;
  railpackVersion: string | null;
  refreshToken: string | null;
  registryId: string | null;
  registryUrl: string | null;
  replicas: number;
  repository: string | null;
  restartPolicySwarm:
    | string
    | number
    | boolean
    | EnvironmentOneRestartPolicySwarmApplicationEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  rollbackActive: boolean | null;
  rollbackConfigSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneRollbackConfigSwarmApplicationEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  serverId: string | null;
  sourceType: EnvironmentOneApplicationSourceType;
  subtitle: string | null;
  title: string | null;
  triggerType: EnvironmentOneApplicationTriggerType | null;
  updateConfigSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneUpdateConfigSwarmApplicationEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  username: string | null;
  watchPaths: Array<string> | null;
};

export const EnvironmentOneComposeStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type EnvironmentOneComposeStatus = ClosedEnum<
  typeof EnvironmentOneComposeStatus
>;

export const EnvironmentOneComposeType = {
  DockerCompose: "docker-compose",
  Stack: "stack",
} as const;
export type EnvironmentOneComposeType = ClosedEnum<
  typeof EnvironmentOneComposeType
>;

export const EnvironmentOneComposeSourceType = {
  Git: "git",
  Github: "github",
  Gitlab: "gitlab",
  Bitbucket: "bitbucket",
  Gitea: "gitea",
  Raw: "raw",
} as const;
export type EnvironmentOneComposeSourceType = ClosedEnum<
  typeof EnvironmentOneComposeSourceType
>;

export const EnvironmentOneComposeTriggerType = {
  Push: "push",
  Tag: "tag",
} as const;
export type EnvironmentOneComposeTriggerType = ClosedEnum<
  typeof EnvironmentOneComposeTriggerType
>;

export type EnvironmentOneCompose = {
  appName: string;
  autoDeploy: boolean | null;
  bitbucketBranch: string | null;
  bitbucketId: string | null;
  bitbucketOwner: string | null;
  bitbucketRepository: string | null;
  branch: string | null;
  command: string;
  composeFile: string;
  composeId: string;
  composePath: string;
  composeStatus: EnvironmentOneComposeStatus;
  composeType: EnvironmentOneComposeType;
  createdAt: string;
  customGitBranch: string | null;
  customGitSSHKeyId: string | null;
  customGitUrl: string | null;
  description: string | null;
  enableSubmodules: boolean;
  env: string | null;
  environmentId: string;
  giteaBranch: string | null;
  giteaId: string | null;
  giteaOwner: string | null;
  giteaRepository: string | null;
  githubId: string | null;
  gitlabBranch: string | null;
  gitlabId: string | null;
  gitlabOwner: string | null;
  gitlabPathNamespace: string | null;
  gitlabProjectId: number | null;
  gitlabRepository: string | null;
  isolatedDeployment: boolean;
  isolatedDeploymentsVolume: boolean;
  name: string;
  owner: string | null;
  randomize: boolean;
  refreshToken: string | null;
  repository: string | null;
  serverId: string | null;
  sourceType: EnvironmentOneComposeSourceType;
  suffix: string;
  triggerType: EnvironmentOneComposeTriggerType | null;
  watchPaths: Array<string> | null;
};

export const EnvironmentOneMariadbApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type EnvironmentOneMariadbApplicationStatus = ClosedEnum<
  typeof EnvironmentOneMariadbApplicationStatus
>;

export const EnvironmentOneHealthCheckSwarmMariadbEnum = {
  Null: "null",
} as const;
export type EnvironmentOneHealthCheckSwarmMariadbEnum = ClosedEnum<
  typeof EnvironmentOneHealthCheckSwarmMariadbEnum
>;

export type EnvironmentOneHealthCheckSwarmMariadbUnion =
  | string
  | number
  | boolean
  | EnvironmentOneHealthCheckSwarmMariadbEnum;

export type EnvironmentOneMariadbHealthCheckSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneHealthCheckSwarmMariadbEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneLabelsSwarmMariadbEnum = {
  Null: "null",
} as const;
export type EnvironmentOneLabelsSwarmMariadbEnum = ClosedEnum<
  typeof EnvironmentOneLabelsSwarmMariadbEnum
>;

export type EnvironmentOneLabelsSwarmMariadbUnion =
  | string
  | number
  | boolean
  | EnvironmentOneLabelsSwarmMariadbEnum;

export type EnvironmentOneMariadbLabelsSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneLabelsSwarmMariadbEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneModeSwarmMariadbEnum = {
  Null: "null",
} as const;
export type EnvironmentOneModeSwarmMariadbEnum = ClosedEnum<
  typeof EnvironmentOneModeSwarmMariadbEnum
>;

export type EnvironmentOneModeSwarmMariadbUnion =
  | string
  | number
  | boolean
  | EnvironmentOneModeSwarmMariadbEnum;

export type EnvironmentOneMariadbModeSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneModeSwarmMariadbEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneNetworkSwarmMariadbEnum = {
  Null: "null",
} as const;
export type EnvironmentOneNetworkSwarmMariadbEnum = ClosedEnum<
  typeof EnvironmentOneNetworkSwarmMariadbEnum
>;

export type EnvironmentOneNetworkSwarmMariadbUnion =
  | string
  | number
  | boolean
  | EnvironmentOneNetworkSwarmMariadbEnum;

export type EnvironmentOneMariadbNetworkSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneNetworkSwarmMariadbEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOnePlacementSwarmMariadbEnum = {
  Null: "null",
} as const;
export type EnvironmentOnePlacementSwarmMariadbEnum = ClosedEnum<
  typeof EnvironmentOnePlacementSwarmMariadbEnum
>;

export type EnvironmentOnePlacementSwarmMariadbUnion =
  | string
  | number
  | boolean
  | EnvironmentOnePlacementSwarmMariadbEnum;

export type EnvironmentOneMariadbPlacementSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOnePlacementSwarmMariadbEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneRestartPolicySwarmMariadbEnum = {
  Null: "null",
} as const;
export type EnvironmentOneRestartPolicySwarmMariadbEnum = ClosedEnum<
  typeof EnvironmentOneRestartPolicySwarmMariadbEnum
>;

export type EnvironmentOneRestartPolicySwarmMariadbUnion =
  | string
  | number
  | boolean
  | EnvironmentOneRestartPolicySwarmMariadbEnum;

export type EnvironmentOneMariadbRestartPolicySwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneRestartPolicySwarmMariadbEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneRollbackConfigSwarmMariadbEnum = {
  Null: "null",
} as const;
export type EnvironmentOneRollbackConfigSwarmMariadbEnum = ClosedEnum<
  typeof EnvironmentOneRollbackConfigSwarmMariadbEnum
>;

export type EnvironmentOneRollbackConfigSwarmMariadbUnion =
  | string
  | number
  | boolean
  | EnvironmentOneRollbackConfigSwarmMariadbEnum;

export type EnvironmentOneMariadbRollbackConfigSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneRollbackConfigSwarmMariadbEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneUpdateConfigSwarmMariadbEnum = {
  Null: "null",
} as const;
export type EnvironmentOneUpdateConfigSwarmMariadbEnum = ClosedEnum<
  typeof EnvironmentOneUpdateConfigSwarmMariadbEnum
>;

export type EnvironmentOneUpdateConfigSwarmMariadbUnion =
  | string
  | number
  | boolean
  | EnvironmentOneUpdateConfigSwarmMariadbEnum;

export type EnvironmentOneMariadbUpdateConfigSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneUpdateConfigSwarmMariadbEnum
  | Array<any>
  | { [k: string]: any };

export type EnvironmentOneMariadb = {
  appName: string;
  applicationStatus: EnvironmentOneMariadbApplicationStatus;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databaseName: string;
  databasePassword: string;
  databaseRootPassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneHealthCheckSwarmMariadbEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  labelsSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneLabelsSwarmMariadbEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  mariadbId: string;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneModeSwarmMariadbEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  name: string;
  networkSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneNetworkSwarmMariadbEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  placementSwarm:
    | string
    | number
    | boolean
    | EnvironmentOnePlacementSwarmMariadbEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  replicas: number;
  restartPolicySwarm:
    | string
    | number
    | boolean
    | EnvironmentOneRestartPolicySwarmMariadbEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  rollbackConfigSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneRollbackConfigSwarmMariadbEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  serverId: string | null;
  updateConfigSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneUpdateConfigSwarmMariadbEnum
    | Array<any>
    | { [k: string]: any }
    | null;
};

export const EnvironmentOneMongoApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type EnvironmentOneMongoApplicationStatus = ClosedEnum<
  typeof EnvironmentOneMongoApplicationStatus
>;

export const EnvironmentOneHealthCheckSwarmMongoEnum = {
  Null: "null",
} as const;
export type EnvironmentOneHealthCheckSwarmMongoEnum = ClosedEnum<
  typeof EnvironmentOneHealthCheckSwarmMongoEnum
>;

export type EnvironmentOneHealthCheckSwarmMongoUnion =
  | string
  | number
  | boolean
  | EnvironmentOneHealthCheckSwarmMongoEnum;

export type EnvironmentOneMongoHealthCheckSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneHealthCheckSwarmMongoEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneLabelsSwarmMongoEnum = {
  Null: "null",
} as const;
export type EnvironmentOneLabelsSwarmMongoEnum = ClosedEnum<
  typeof EnvironmentOneLabelsSwarmMongoEnum
>;

export type EnvironmentOneLabelsSwarmMongoUnion =
  | string
  | number
  | boolean
  | EnvironmentOneLabelsSwarmMongoEnum;

export type EnvironmentOneMongoLabelsSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneLabelsSwarmMongoEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneModeSwarmMongoEnum = {
  Null: "null",
} as const;
export type EnvironmentOneModeSwarmMongoEnum = ClosedEnum<
  typeof EnvironmentOneModeSwarmMongoEnum
>;

export type EnvironmentOneModeSwarmMongoUnion =
  | string
  | number
  | boolean
  | EnvironmentOneModeSwarmMongoEnum;

export type EnvironmentOneMongoModeSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneModeSwarmMongoEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneNetworkSwarmMongoEnum = {
  Null: "null",
} as const;
export type EnvironmentOneNetworkSwarmMongoEnum = ClosedEnum<
  typeof EnvironmentOneNetworkSwarmMongoEnum
>;

export type EnvironmentOneNetworkSwarmMongoUnion =
  | string
  | number
  | boolean
  | EnvironmentOneNetworkSwarmMongoEnum;

export type EnvironmentOneMongoNetworkSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneNetworkSwarmMongoEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOnePlacementSwarmMongoEnum = {
  Null: "null",
} as const;
export type EnvironmentOnePlacementSwarmMongoEnum = ClosedEnum<
  typeof EnvironmentOnePlacementSwarmMongoEnum
>;

export type EnvironmentOnePlacementSwarmMongoUnion =
  | string
  | number
  | boolean
  | EnvironmentOnePlacementSwarmMongoEnum;

export type EnvironmentOneMongoPlacementSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOnePlacementSwarmMongoEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneRestartPolicySwarmMongoEnum = {
  Null: "null",
} as const;
export type EnvironmentOneRestartPolicySwarmMongoEnum = ClosedEnum<
  typeof EnvironmentOneRestartPolicySwarmMongoEnum
>;

export type EnvironmentOneRestartPolicySwarmMongoUnion =
  | string
  | number
  | boolean
  | EnvironmentOneRestartPolicySwarmMongoEnum;

export type EnvironmentOneMongoRestartPolicySwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneRestartPolicySwarmMongoEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneRollbackConfigSwarmMongoEnum = {
  Null: "null",
} as const;
export type EnvironmentOneRollbackConfigSwarmMongoEnum = ClosedEnum<
  typeof EnvironmentOneRollbackConfigSwarmMongoEnum
>;

export type EnvironmentOneRollbackConfigSwarmMongoUnion =
  | string
  | number
  | boolean
  | EnvironmentOneRollbackConfigSwarmMongoEnum;

export type EnvironmentOneMongoRollbackConfigSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneRollbackConfigSwarmMongoEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneUpdateConfigSwarmMongoEnum = {
  Null: "null",
} as const;
export type EnvironmentOneUpdateConfigSwarmMongoEnum = ClosedEnum<
  typeof EnvironmentOneUpdateConfigSwarmMongoEnum
>;

export type EnvironmentOneUpdateConfigSwarmMongoUnion =
  | string
  | number
  | boolean
  | EnvironmentOneUpdateConfigSwarmMongoEnum;

export type EnvironmentOneMongoUpdateConfigSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneUpdateConfigSwarmMongoEnum
  | Array<any>
  | { [k: string]: any };

export type EnvironmentOneMongo = {
  appName: string;
  applicationStatus: EnvironmentOneMongoApplicationStatus;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databasePassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneHealthCheckSwarmMongoEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  labelsSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneLabelsSwarmMongoEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneModeSwarmMongoEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  mongoId: string;
  name: string;
  networkSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneNetworkSwarmMongoEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  placementSwarm:
    | string
    | number
    | boolean
    | EnvironmentOnePlacementSwarmMongoEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  replicaSets: boolean | null;
  replicas: number;
  restartPolicySwarm:
    | string
    | number
    | boolean
    | EnvironmentOneRestartPolicySwarmMongoEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  rollbackConfigSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneRollbackConfigSwarmMongoEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  serverId: string | null;
  updateConfigSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneUpdateConfigSwarmMongoEnum
    | Array<any>
    | { [k: string]: any }
    | null;
};

export const EnvironmentOneMysqlApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type EnvironmentOneMysqlApplicationStatus = ClosedEnum<
  typeof EnvironmentOneMysqlApplicationStatus
>;

export const EnvironmentOneHealthCheckSwarmMysqlEnum = {
  Null: "null",
} as const;
export type EnvironmentOneHealthCheckSwarmMysqlEnum = ClosedEnum<
  typeof EnvironmentOneHealthCheckSwarmMysqlEnum
>;

export type EnvironmentOneHealthCheckSwarmMysqlUnion =
  | string
  | number
  | boolean
  | EnvironmentOneHealthCheckSwarmMysqlEnum;

export type EnvironmentOneMysqlHealthCheckSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneHealthCheckSwarmMysqlEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneLabelsSwarmMysqlEnum = {
  Null: "null",
} as const;
export type EnvironmentOneLabelsSwarmMysqlEnum = ClosedEnum<
  typeof EnvironmentOneLabelsSwarmMysqlEnum
>;

export type EnvironmentOneLabelsSwarmMysqlUnion =
  | string
  | number
  | boolean
  | EnvironmentOneLabelsSwarmMysqlEnum;

export type EnvironmentOneMysqlLabelsSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneLabelsSwarmMysqlEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneModeSwarmMysqlEnum = {
  Null: "null",
} as const;
export type EnvironmentOneModeSwarmMysqlEnum = ClosedEnum<
  typeof EnvironmentOneModeSwarmMysqlEnum
>;

export type EnvironmentOneModeSwarmMysqlUnion =
  | string
  | number
  | boolean
  | EnvironmentOneModeSwarmMysqlEnum;

export type EnvironmentOneMysqlModeSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneModeSwarmMysqlEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneNetworkSwarmMysqlEnum = {
  Null: "null",
} as const;
export type EnvironmentOneNetworkSwarmMysqlEnum = ClosedEnum<
  typeof EnvironmentOneNetworkSwarmMysqlEnum
>;

export type EnvironmentOneNetworkSwarmMysqlUnion =
  | string
  | number
  | boolean
  | EnvironmentOneNetworkSwarmMysqlEnum;

export type EnvironmentOneMysqlNetworkSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneNetworkSwarmMysqlEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOnePlacementSwarmMysqlEnum = {
  Null: "null",
} as const;
export type EnvironmentOnePlacementSwarmMysqlEnum = ClosedEnum<
  typeof EnvironmentOnePlacementSwarmMysqlEnum
>;

export type EnvironmentOnePlacementSwarmMysqlUnion =
  | string
  | number
  | boolean
  | EnvironmentOnePlacementSwarmMysqlEnum;

export type EnvironmentOneMysqlPlacementSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOnePlacementSwarmMysqlEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneRestartPolicySwarmMysqlEnum = {
  Null: "null",
} as const;
export type EnvironmentOneRestartPolicySwarmMysqlEnum = ClosedEnum<
  typeof EnvironmentOneRestartPolicySwarmMysqlEnum
>;

export type EnvironmentOneRestartPolicySwarmMysqlUnion =
  | string
  | number
  | boolean
  | EnvironmentOneRestartPolicySwarmMysqlEnum;

export type EnvironmentOneMysqlRestartPolicySwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneRestartPolicySwarmMysqlEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneRollbackConfigSwarmMysqlEnum = {
  Null: "null",
} as const;
export type EnvironmentOneRollbackConfigSwarmMysqlEnum = ClosedEnum<
  typeof EnvironmentOneRollbackConfigSwarmMysqlEnum
>;

export type EnvironmentOneRollbackConfigSwarmMysqlUnion =
  | string
  | number
  | boolean
  | EnvironmentOneRollbackConfigSwarmMysqlEnum;

export type EnvironmentOneMysqlRollbackConfigSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneRollbackConfigSwarmMysqlEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneUpdateConfigSwarmMysqlEnum = {
  Null: "null",
} as const;
export type EnvironmentOneUpdateConfigSwarmMysqlEnum = ClosedEnum<
  typeof EnvironmentOneUpdateConfigSwarmMysqlEnum
>;

export type EnvironmentOneUpdateConfigSwarmMysqlUnion =
  | string
  | number
  | boolean
  | EnvironmentOneUpdateConfigSwarmMysqlEnum;

export type EnvironmentOneMysqlUpdateConfigSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneUpdateConfigSwarmMysqlEnum
  | Array<any>
  | { [k: string]: any };

export type EnvironmentOneMysql = {
  appName: string;
  applicationStatus: EnvironmentOneMysqlApplicationStatus;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databaseName: string;
  databasePassword: string;
  databaseRootPassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneHealthCheckSwarmMysqlEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  labelsSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneLabelsSwarmMysqlEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneModeSwarmMysqlEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  mysqlId: string;
  name: string;
  networkSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneNetworkSwarmMysqlEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  placementSwarm:
    | string
    | number
    | boolean
    | EnvironmentOnePlacementSwarmMysqlEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  replicas: number;
  restartPolicySwarm:
    | string
    | number
    | boolean
    | EnvironmentOneRestartPolicySwarmMysqlEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  rollbackConfigSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneRollbackConfigSwarmMysqlEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  serverId: string | null;
  updateConfigSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneUpdateConfigSwarmMysqlEnum
    | Array<any>
    | { [k: string]: any }
    | null;
};

export const EnvironmentOnePostgreApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type EnvironmentOnePostgreApplicationStatus = ClosedEnum<
  typeof EnvironmentOnePostgreApplicationStatus
>;

export const EnvironmentOneHealthCheckSwarmPostgreEnum = {
  Null: "null",
} as const;
export type EnvironmentOneHealthCheckSwarmPostgreEnum = ClosedEnum<
  typeof EnvironmentOneHealthCheckSwarmPostgreEnum
>;

export type EnvironmentOneHealthCheckSwarmPostgreUnion =
  | string
  | number
  | boolean
  | EnvironmentOneHealthCheckSwarmPostgreEnum;

export type EnvironmentOnePostgreHealthCheckSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneHealthCheckSwarmPostgreEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneLabelsSwarmPostgreEnum = {
  Null: "null",
} as const;
export type EnvironmentOneLabelsSwarmPostgreEnum = ClosedEnum<
  typeof EnvironmentOneLabelsSwarmPostgreEnum
>;

export type EnvironmentOneLabelsSwarmPostgreUnion =
  | string
  | number
  | boolean
  | EnvironmentOneLabelsSwarmPostgreEnum;

export type EnvironmentOnePostgreLabelsSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneLabelsSwarmPostgreEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneModeSwarmPostgreEnum = {
  Null: "null",
} as const;
export type EnvironmentOneModeSwarmPostgreEnum = ClosedEnum<
  typeof EnvironmentOneModeSwarmPostgreEnum
>;

export type EnvironmentOneModeSwarmPostgreUnion =
  | string
  | number
  | boolean
  | EnvironmentOneModeSwarmPostgreEnum;

export type EnvironmentOnePostgreModeSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneModeSwarmPostgreEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneNetworkSwarmPostgreEnum = {
  Null: "null",
} as const;
export type EnvironmentOneNetworkSwarmPostgreEnum = ClosedEnum<
  typeof EnvironmentOneNetworkSwarmPostgreEnum
>;

export type EnvironmentOneNetworkSwarmPostgreUnion =
  | string
  | number
  | boolean
  | EnvironmentOneNetworkSwarmPostgreEnum;

export type EnvironmentOnePostgreNetworkSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneNetworkSwarmPostgreEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOnePlacementSwarmPostgreEnum = {
  Null: "null",
} as const;
export type EnvironmentOnePlacementSwarmPostgreEnum = ClosedEnum<
  typeof EnvironmentOnePlacementSwarmPostgreEnum
>;

export type EnvironmentOnePlacementSwarmPostgreUnion =
  | string
  | number
  | boolean
  | EnvironmentOnePlacementSwarmPostgreEnum;

export type EnvironmentOnePostgrePlacementSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOnePlacementSwarmPostgreEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneRestartPolicySwarmPostgreEnum = {
  Null: "null",
} as const;
export type EnvironmentOneRestartPolicySwarmPostgreEnum = ClosedEnum<
  typeof EnvironmentOneRestartPolicySwarmPostgreEnum
>;

export type EnvironmentOneRestartPolicySwarmPostgreUnion =
  | string
  | number
  | boolean
  | EnvironmentOneRestartPolicySwarmPostgreEnum;

export type EnvironmentOnePostgreRestartPolicySwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneRestartPolicySwarmPostgreEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneRollbackConfigSwarmPostgreEnum = {
  Null: "null",
} as const;
export type EnvironmentOneRollbackConfigSwarmPostgreEnum = ClosedEnum<
  typeof EnvironmentOneRollbackConfigSwarmPostgreEnum
>;

export type EnvironmentOneRollbackConfigSwarmPostgreUnion =
  | string
  | number
  | boolean
  | EnvironmentOneRollbackConfigSwarmPostgreEnum;

export type EnvironmentOnePostgreRollbackConfigSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneRollbackConfigSwarmPostgreEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneUpdateConfigSwarmPostgreEnum = {
  Null: "null",
} as const;
export type EnvironmentOneUpdateConfigSwarmPostgreEnum = ClosedEnum<
  typeof EnvironmentOneUpdateConfigSwarmPostgreEnum
>;

export type EnvironmentOneUpdateConfigSwarmPostgreUnion =
  | string
  | number
  | boolean
  | EnvironmentOneUpdateConfigSwarmPostgreEnum;

export type EnvironmentOnePostgreUpdateConfigSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneUpdateConfigSwarmPostgreEnum
  | Array<any>
  | { [k: string]: any };

export type EnvironmentOnePostgre = {
  appName: string;
  applicationStatus: EnvironmentOnePostgreApplicationStatus;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databaseName: string;
  databasePassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneHealthCheckSwarmPostgreEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  labelsSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneLabelsSwarmPostgreEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneModeSwarmPostgreEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  name: string;
  networkSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneNetworkSwarmPostgreEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  placementSwarm:
    | string
    | number
    | boolean
    | EnvironmentOnePlacementSwarmPostgreEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  postgresId: string;
  replicas: number;
  restartPolicySwarm:
    | string
    | number
    | boolean
    | EnvironmentOneRestartPolicySwarmPostgreEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  rollbackConfigSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneRollbackConfigSwarmPostgreEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  serverId: string | null;
  updateConfigSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneUpdateConfigSwarmPostgreEnum
    | Array<any>
    | { [k: string]: any }
    | null;
};

export type EnvironmentOneProject = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

export const EnvironmentOneRediApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type EnvironmentOneRediApplicationStatus = ClosedEnum<
  typeof EnvironmentOneRediApplicationStatus
>;

export const EnvironmentOneHealthCheckSwarmRediEnum = {
  Null: "null",
} as const;
export type EnvironmentOneHealthCheckSwarmRediEnum = ClosedEnum<
  typeof EnvironmentOneHealthCheckSwarmRediEnum
>;

export type EnvironmentOneHealthCheckSwarmRediUnion =
  | string
  | number
  | boolean
  | EnvironmentOneHealthCheckSwarmRediEnum;

export type EnvironmentOneRediHealthCheckSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneHealthCheckSwarmRediEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneLabelsSwarmRediEnum = {
  Null: "null",
} as const;
export type EnvironmentOneLabelsSwarmRediEnum = ClosedEnum<
  typeof EnvironmentOneLabelsSwarmRediEnum
>;

export type EnvironmentOneLabelsSwarmRediUnion =
  | string
  | number
  | boolean
  | EnvironmentOneLabelsSwarmRediEnum;

export type EnvironmentOneRediLabelsSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneLabelsSwarmRediEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneModeSwarmRediEnum = {
  Null: "null",
} as const;
export type EnvironmentOneModeSwarmRediEnum = ClosedEnum<
  typeof EnvironmentOneModeSwarmRediEnum
>;

export type EnvironmentOneModeSwarmRediUnion =
  | string
  | number
  | boolean
  | EnvironmentOneModeSwarmRediEnum;

export type EnvironmentOneRediModeSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneModeSwarmRediEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneNetworkSwarmRediEnum = {
  Null: "null",
} as const;
export type EnvironmentOneNetworkSwarmRediEnum = ClosedEnum<
  typeof EnvironmentOneNetworkSwarmRediEnum
>;

export type EnvironmentOneNetworkSwarmRediUnion =
  | string
  | number
  | boolean
  | EnvironmentOneNetworkSwarmRediEnum;

export type EnvironmentOneRediNetworkSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneNetworkSwarmRediEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOnePlacementSwarmRediEnum = {
  Null: "null",
} as const;
export type EnvironmentOnePlacementSwarmRediEnum = ClosedEnum<
  typeof EnvironmentOnePlacementSwarmRediEnum
>;

export type EnvironmentOnePlacementSwarmRediUnion =
  | string
  | number
  | boolean
  | EnvironmentOnePlacementSwarmRediEnum;

export type EnvironmentOneRediPlacementSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOnePlacementSwarmRediEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneRestartPolicySwarmRediEnum = {
  Null: "null",
} as const;
export type EnvironmentOneRestartPolicySwarmRediEnum = ClosedEnum<
  typeof EnvironmentOneRestartPolicySwarmRediEnum
>;

export type EnvironmentOneRestartPolicySwarmRediUnion =
  | string
  | number
  | boolean
  | EnvironmentOneRestartPolicySwarmRediEnum;

export type EnvironmentOneRediRestartPolicySwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneRestartPolicySwarmRediEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneRollbackConfigSwarmRediEnum = {
  Null: "null",
} as const;
export type EnvironmentOneRollbackConfigSwarmRediEnum = ClosedEnum<
  typeof EnvironmentOneRollbackConfigSwarmRediEnum
>;

export type EnvironmentOneRollbackConfigSwarmRediUnion =
  | string
  | number
  | boolean
  | EnvironmentOneRollbackConfigSwarmRediEnum;

export type EnvironmentOneRediRollbackConfigSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneRollbackConfigSwarmRediEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentOneUpdateConfigSwarmRediEnum = {
  Null: "null",
} as const;
export type EnvironmentOneUpdateConfigSwarmRediEnum = ClosedEnum<
  typeof EnvironmentOneUpdateConfigSwarmRediEnum
>;

export type EnvironmentOneUpdateConfigSwarmRediUnion =
  | string
  | number
  | boolean
  | EnvironmentOneUpdateConfigSwarmRediEnum;

export type EnvironmentOneRediUpdateConfigSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentOneUpdateConfigSwarmRediEnum
  | Array<any>
  | { [k: string]: any };

export type EnvironmentOneRedi = {
  appName: string;
  applicationStatus: EnvironmentOneRediApplicationStatus;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databasePassword: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneHealthCheckSwarmRediEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  labelsSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneLabelsSwarmRediEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneModeSwarmRediEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  name: string;
  networkSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneNetworkSwarmRediEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  placementSwarm:
    | string
    | number
    | boolean
    | EnvironmentOnePlacementSwarmRediEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  redisId: string;
  replicas: number;
  restartPolicySwarm:
    | string
    | number
    | boolean
    | EnvironmentOneRestartPolicySwarmRediEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  rollbackConfigSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneRollbackConfigSwarmRediEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  serverId: string | null;
  updateConfigSwarm:
    | string
    | number
    | boolean
    | EnvironmentOneUpdateConfigSwarmRediEnum
    | Array<any>
    | { [k: string]: any }
    | null;
};

/**
 * Successful response
 */
export type EnvironmentOneResponseBody = {
  applications: Array<EnvironmentOneApplication>;
  compose: Array<EnvironmentOneCompose>;
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  mariadb: Array<EnvironmentOneMariadb>;
  mongo: Array<EnvironmentOneMongo>;
  mysql: Array<EnvironmentOneMysql>;
  name: string;
  postgres: Array<EnvironmentOnePostgre>;
  project: EnvironmentOneProject;
  projectId: string;
  redis: Array<EnvironmentOneRedi>;
};

export type EnvironmentOneResponse = EnvironmentOneResponseBody | models.ErrorT;

/** @internal */
export const EnvironmentOneRequest$inboundSchema: z.ZodType<
  EnvironmentOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  environmentId: z.string(),
});

/** @internal */
export type EnvironmentOneRequest$Outbound = {
  environmentId: string;
};

/** @internal */
export const EnvironmentOneRequest$outboundSchema: z.ZodType<
  EnvironmentOneRequest$Outbound,
  z.ZodTypeDef,
  EnvironmentOneRequest
> = z.object({
  environmentId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRequest$ {
  /** @deprecated use `EnvironmentOneRequest$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneRequest$inboundSchema;
  /** @deprecated use `EnvironmentOneRequest$outboundSchema` instead. */
  export const outboundSchema = EnvironmentOneRequest$outboundSchema;
  /** @deprecated use `EnvironmentOneRequest$Outbound` instead. */
  export type Outbound = EnvironmentOneRequest$Outbound;
}

export function environmentOneRequestToJSON(
  environmentOneRequest: EnvironmentOneRequest,
): string {
  return JSON.stringify(
    EnvironmentOneRequest$outboundSchema.parse(environmentOneRequest),
  );
}

export function environmentOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneRequest' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneApplicationApplicationStatus$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneApplicationApplicationStatus> = z
    .nativeEnum(EnvironmentOneApplicationApplicationStatus);

/** @internal */
export const EnvironmentOneApplicationApplicationStatus$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneApplicationApplicationStatus> =
    EnvironmentOneApplicationApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneApplicationApplicationStatus$ {
  /** @deprecated use `EnvironmentOneApplicationApplicationStatus$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneApplicationApplicationStatus$inboundSchema;
  /** @deprecated use `EnvironmentOneApplicationApplicationStatus$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneApplicationApplicationStatus$outboundSchema;
}

/** @internal */
export const EnvironmentOneBuildType$inboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneBuildType
> = z.nativeEnum(EnvironmentOneBuildType);

/** @internal */
export const EnvironmentOneBuildType$outboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneBuildType
> = EnvironmentOneBuildType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneBuildType$ {
  /** @deprecated use `EnvironmentOneBuildType$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneBuildType$inboundSchema;
  /** @deprecated use `EnvironmentOneBuildType$outboundSchema` instead. */
  export const outboundSchema = EnvironmentOneBuildType$outboundSchema;
}

/** @internal */
export const EnvironmentOneHealthCheckSwarmApplicationEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneHealthCheckSwarmApplicationEnum> = z
    .nativeEnum(EnvironmentOneHealthCheckSwarmApplicationEnum);

/** @internal */
export const EnvironmentOneHealthCheckSwarmApplicationEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneHealthCheckSwarmApplicationEnum> =
    EnvironmentOneHealthCheckSwarmApplicationEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneHealthCheckSwarmApplicationEnum$ {
  /** @deprecated use `EnvironmentOneHealthCheckSwarmApplicationEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneHealthCheckSwarmApplicationEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneHealthCheckSwarmApplicationEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneHealthCheckSwarmApplicationEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneHealthCheckSwarmApplicationUnion$inboundSchema:
  z.ZodType<
    EnvironmentOneHealthCheckSwarmApplicationUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneHealthCheckSwarmApplicationEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentOneHealthCheckSwarmApplicationUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneHealthCheckSwarmApplicationUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneHealthCheckSwarmApplicationUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneHealthCheckSwarmApplicationUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneHealthCheckSwarmApplicationEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneHealthCheckSwarmApplicationUnion$ {
  /** @deprecated use `EnvironmentOneHealthCheckSwarmApplicationUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneHealthCheckSwarmApplicationUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneHealthCheckSwarmApplicationUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneHealthCheckSwarmApplicationUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneHealthCheckSwarmApplicationUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentOneHealthCheckSwarmApplicationUnion$Outbound;
}

export function environmentOneHealthCheckSwarmApplicationUnionToJSON(
  environmentOneHealthCheckSwarmApplicationUnion:
    EnvironmentOneHealthCheckSwarmApplicationUnion,
): string {
  return JSON.stringify(
    EnvironmentOneHealthCheckSwarmApplicationUnion$outboundSchema.parse(
      environmentOneHealthCheckSwarmApplicationUnion,
    ),
  );
}

export function environmentOneHealthCheckSwarmApplicationUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneHealthCheckSwarmApplicationUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneHealthCheckSwarmApplicationUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneHealthCheckSwarmApplicationUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneApplicationHealthCheckSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentOneApplicationHealthCheckSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneHealthCheckSwarmApplicationEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentOneApplicationHealthCheckSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneApplicationHealthCheckSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneApplicationHealthCheckSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneApplicationHealthCheckSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneHealthCheckSwarmApplicationEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneApplicationHealthCheckSwarmUnion$ {
  /** @deprecated use `EnvironmentOneApplicationHealthCheckSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneApplicationHealthCheckSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneApplicationHealthCheckSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneApplicationHealthCheckSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneApplicationHealthCheckSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentOneApplicationHealthCheckSwarmUnion$Outbound;
}

export function environmentOneApplicationHealthCheckSwarmUnionToJSON(
  environmentOneApplicationHealthCheckSwarmUnion:
    EnvironmentOneApplicationHealthCheckSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneApplicationHealthCheckSwarmUnion$outboundSchema.parse(
      environmentOneApplicationHealthCheckSwarmUnion,
    ),
  );
}

export function environmentOneApplicationHealthCheckSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneApplicationHealthCheckSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneApplicationHealthCheckSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneApplicationHealthCheckSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneLabelsSwarmApplicationEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneLabelsSwarmApplicationEnum> = z
    .nativeEnum(EnvironmentOneLabelsSwarmApplicationEnum);

/** @internal */
export const EnvironmentOneLabelsSwarmApplicationEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneLabelsSwarmApplicationEnum> =
    EnvironmentOneLabelsSwarmApplicationEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneLabelsSwarmApplicationEnum$ {
  /** @deprecated use `EnvironmentOneLabelsSwarmApplicationEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneLabelsSwarmApplicationEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneLabelsSwarmApplicationEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneLabelsSwarmApplicationEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneLabelsSwarmApplicationUnion$inboundSchema: z.ZodType<
  EnvironmentOneLabelsSwarmApplicationUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneLabelsSwarmApplicationEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentOneLabelsSwarmApplicationUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneLabelsSwarmApplicationUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneLabelsSwarmApplicationUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneLabelsSwarmApplicationUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneLabelsSwarmApplicationEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneLabelsSwarmApplicationUnion$ {
  /** @deprecated use `EnvironmentOneLabelsSwarmApplicationUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneLabelsSwarmApplicationUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneLabelsSwarmApplicationUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneLabelsSwarmApplicationUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneLabelsSwarmApplicationUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneLabelsSwarmApplicationUnion$Outbound;
}

export function environmentOneLabelsSwarmApplicationUnionToJSON(
  environmentOneLabelsSwarmApplicationUnion:
    EnvironmentOneLabelsSwarmApplicationUnion,
): string {
  return JSON.stringify(
    EnvironmentOneLabelsSwarmApplicationUnion$outboundSchema.parse(
      environmentOneLabelsSwarmApplicationUnion,
    ),
  );
}

export function environmentOneLabelsSwarmApplicationUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneLabelsSwarmApplicationUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneLabelsSwarmApplicationUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneLabelsSwarmApplicationUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneApplicationLabelsSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentOneApplicationLabelsSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneLabelsSwarmApplicationEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentOneApplicationLabelsSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneApplicationLabelsSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneApplicationLabelsSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneApplicationLabelsSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneLabelsSwarmApplicationEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneApplicationLabelsSwarmUnion$ {
  /** @deprecated use `EnvironmentOneApplicationLabelsSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneApplicationLabelsSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneApplicationLabelsSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneApplicationLabelsSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneApplicationLabelsSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneApplicationLabelsSwarmUnion$Outbound;
}

export function environmentOneApplicationLabelsSwarmUnionToJSON(
  environmentOneApplicationLabelsSwarmUnion:
    EnvironmentOneApplicationLabelsSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneApplicationLabelsSwarmUnion$outboundSchema.parse(
      environmentOneApplicationLabelsSwarmUnion,
    ),
  );
}

export function environmentOneApplicationLabelsSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneApplicationLabelsSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneApplicationLabelsSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneApplicationLabelsSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneModeSwarmApplicationEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneModeSwarmApplicationEnum> = z.nativeEnum(
    EnvironmentOneModeSwarmApplicationEnum,
  );

/** @internal */
export const EnvironmentOneModeSwarmApplicationEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneModeSwarmApplicationEnum> =
    EnvironmentOneModeSwarmApplicationEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneModeSwarmApplicationEnum$ {
  /** @deprecated use `EnvironmentOneModeSwarmApplicationEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneModeSwarmApplicationEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneModeSwarmApplicationEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneModeSwarmApplicationEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneModeSwarmApplicationUnion$inboundSchema: z.ZodType<
  EnvironmentOneModeSwarmApplicationUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneModeSwarmApplicationEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentOneModeSwarmApplicationUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneModeSwarmApplicationUnion$outboundSchema: z.ZodType<
  EnvironmentOneModeSwarmApplicationUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneModeSwarmApplicationUnion
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneModeSwarmApplicationEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneModeSwarmApplicationUnion$ {
  /** @deprecated use `EnvironmentOneModeSwarmApplicationUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneModeSwarmApplicationUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneModeSwarmApplicationUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneModeSwarmApplicationUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneModeSwarmApplicationUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneModeSwarmApplicationUnion$Outbound;
}

export function environmentOneModeSwarmApplicationUnionToJSON(
  environmentOneModeSwarmApplicationUnion:
    EnvironmentOneModeSwarmApplicationUnion,
): string {
  return JSON.stringify(
    EnvironmentOneModeSwarmApplicationUnion$outboundSchema.parse(
      environmentOneModeSwarmApplicationUnion,
    ),
  );
}

export function environmentOneModeSwarmApplicationUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneModeSwarmApplicationUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneModeSwarmApplicationUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneModeSwarmApplicationUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneApplicationModeSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentOneApplicationModeSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneModeSwarmApplicationEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentOneApplicationModeSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneApplicationModeSwarmUnion$outboundSchema: z.ZodType<
  EnvironmentOneApplicationModeSwarmUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneApplicationModeSwarmUnion
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneModeSwarmApplicationEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneApplicationModeSwarmUnion$ {
  /** @deprecated use `EnvironmentOneApplicationModeSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneApplicationModeSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneApplicationModeSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneApplicationModeSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneApplicationModeSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneApplicationModeSwarmUnion$Outbound;
}

export function environmentOneApplicationModeSwarmUnionToJSON(
  environmentOneApplicationModeSwarmUnion:
    EnvironmentOneApplicationModeSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneApplicationModeSwarmUnion$outboundSchema.parse(
      environmentOneApplicationModeSwarmUnion,
    ),
  );
}

export function environmentOneApplicationModeSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneApplicationModeSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneApplicationModeSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneApplicationModeSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneNetworkSwarmApplicationEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneNetworkSwarmApplicationEnum> = z
    .nativeEnum(EnvironmentOneNetworkSwarmApplicationEnum);

/** @internal */
export const EnvironmentOneNetworkSwarmApplicationEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneNetworkSwarmApplicationEnum> =
    EnvironmentOneNetworkSwarmApplicationEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneNetworkSwarmApplicationEnum$ {
  /** @deprecated use `EnvironmentOneNetworkSwarmApplicationEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneNetworkSwarmApplicationEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneNetworkSwarmApplicationEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneNetworkSwarmApplicationEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneNetworkSwarmApplicationUnion$inboundSchema:
  z.ZodType<EnvironmentOneNetworkSwarmApplicationUnion, z.ZodTypeDef, unknown> =
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneNetworkSwarmApplicationEnum$inboundSchema,
    ]);

/** @internal */
export type EnvironmentOneNetworkSwarmApplicationUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneNetworkSwarmApplicationUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneNetworkSwarmApplicationUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneNetworkSwarmApplicationUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneNetworkSwarmApplicationEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneNetworkSwarmApplicationUnion$ {
  /** @deprecated use `EnvironmentOneNetworkSwarmApplicationUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneNetworkSwarmApplicationUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneNetworkSwarmApplicationUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneNetworkSwarmApplicationUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneNetworkSwarmApplicationUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneNetworkSwarmApplicationUnion$Outbound;
}

export function environmentOneNetworkSwarmApplicationUnionToJSON(
  environmentOneNetworkSwarmApplicationUnion:
    EnvironmentOneNetworkSwarmApplicationUnion,
): string {
  return JSON.stringify(
    EnvironmentOneNetworkSwarmApplicationUnion$outboundSchema.parse(
      environmentOneNetworkSwarmApplicationUnion,
    ),
  );
}

export function environmentOneNetworkSwarmApplicationUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneNetworkSwarmApplicationUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneNetworkSwarmApplicationUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneNetworkSwarmApplicationUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneApplicationNetworkSwarmUnion$inboundSchema:
  z.ZodType<EnvironmentOneApplicationNetworkSwarmUnion, z.ZodTypeDef, unknown> =
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneNetworkSwarmApplicationEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]);

/** @internal */
export type EnvironmentOneApplicationNetworkSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneApplicationNetworkSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneApplicationNetworkSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneApplicationNetworkSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneNetworkSwarmApplicationEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneApplicationNetworkSwarmUnion$ {
  /** @deprecated use `EnvironmentOneApplicationNetworkSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneApplicationNetworkSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneApplicationNetworkSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneApplicationNetworkSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneApplicationNetworkSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneApplicationNetworkSwarmUnion$Outbound;
}

export function environmentOneApplicationNetworkSwarmUnionToJSON(
  environmentOneApplicationNetworkSwarmUnion:
    EnvironmentOneApplicationNetworkSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneApplicationNetworkSwarmUnion$outboundSchema.parse(
      environmentOneApplicationNetworkSwarmUnion,
    ),
  );
}

export function environmentOneApplicationNetworkSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneApplicationNetworkSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneApplicationNetworkSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneApplicationNetworkSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOnePlacementSwarmApplicationEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOnePlacementSwarmApplicationEnum> = z
    .nativeEnum(EnvironmentOnePlacementSwarmApplicationEnum);

/** @internal */
export const EnvironmentOnePlacementSwarmApplicationEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOnePlacementSwarmApplicationEnum> =
    EnvironmentOnePlacementSwarmApplicationEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOnePlacementSwarmApplicationEnum$ {
  /** @deprecated use `EnvironmentOnePlacementSwarmApplicationEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOnePlacementSwarmApplicationEnum$inboundSchema;
  /** @deprecated use `EnvironmentOnePlacementSwarmApplicationEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOnePlacementSwarmApplicationEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOnePlacementSwarmApplicationUnion$inboundSchema:
  z.ZodType<
    EnvironmentOnePlacementSwarmApplicationUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOnePlacementSwarmApplicationEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentOnePlacementSwarmApplicationUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOnePlacementSwarmApplicationUnion$outboundSchema:
  z.ZodType<
    EnvironmentOnePlacementSwarmApplicationUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOnePlacementSwarmApplicationUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOnePlacementSwarmApplicationEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOnePlacementSwarmApplicationUnion$ {
  /** @deprecated use `EnvironmentOnePlacementSwarmApplicationUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOnePlacementSwarmApplicationUnion$inboundSchema;
  /** @deprecated use `EnvironmentOnePlacementSwarmApplicationUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOnePlacementSwarmApplicationUnion$outboundSchema;
  /** @deprecated use `EnvironmentOnePlacementSwarmApplicationUnion$Outbound` instead. */
  export type Outbound = EnvironmentOnePlacementSwarmApplicationUnion$Outbound;
}

export function environmentOnePlacementSwarmApplicationUnionToJSON(
  environmentOnePlacementSwarmApplicationUnion:
    EnvironmentOnePlacementSwarmApplicationUnion,
): string {
  return JSON.stringify(
    EnvironmentOnePlacementSwarmApplicationUnion$outboundSchema.parse(
      environmentOnePlacementSwarmApplicationUnion,
    ),
  );
}

export function environmentOnePlacementSwarmApplicationUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOnePlacementSwarmApplicationUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOnePlacementSwarmApplicationUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOnePlacementSwarmApplicationUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneApplicationPlacementSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentOneApplicationPlacementSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOnePlacementSwarmApplicationEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentOneApplicationPlacementSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneApplicationPlacementSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneApplicationPlacementSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneApplicationPlacementSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOnePlacementSwarmApplicationEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneApplicationPlacementSwarmUnion$ {
  /** @deprecated use `EnvironmentOneApplicationPlacementSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneApplicationPlacementSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneApplicationPlacementSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneApplicationPlacementSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneApplicationPlacementSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneApplicationPlacementSwarmUnion$Outbound;
}

export function environmentOneApplicationPlacementSwarmUnionToJSON(
  environmentOneApplicationPlacementSwarmUnion:
    EnvironmentOneApplicationPlacementSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneApplicationPlacementSwarmUnion$outboundSchema.parse(
      environmentOneApplicationPlacementSwarmUnion,
    ),
  );
}

export function environmentOneApplicationPlacementSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneApplicationPlacementSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneApplicationPlacementSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneApplicationPlacementSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOnePreviewCertificateType$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOnePreviewCertificateType> = z.nativeEnum(
    EnvironmentOnePreviewCertificateType,
  );

/** @internal */
export const EnvironmentOnePreviewCertificateType$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOnePreviewCertificateType> =
    EnvironmentOnePreviewCertificateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOnePreviewCertificateType$ {
  /** @deprecated use `EnvironmentOnePreviewCertificateType$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOnePreviewCertificateType$inboundSchema;
  /** @deprecated use `EnvironmentOnePreviewCertificateType$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOnePreviewCertificateType$outboundSchema;
}

/** @internal */
export const EnvironmentOneRestartPolicySwarmApplicationEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneRestartPolicySwarmApplicationEnum> = z
    .nativeEnum(EnvironmentOneRestartPolicySwarmApplicationEnum);

/** @internal */
export const EnvironmentOneRestartPolicySwarmApplicationEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneRestartPolicySwarmApplicationEnum> =
    EnvironmentOneRestartPolicySwarmApplicationEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRestartPolicySwarmApplicationEnum$ {
  /** @deprecated use `EnvironmentOneRestartPolicySwarmApplicationEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRestartPolicySwarmApplicationEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneRestartPolicySwarmApplicationEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRestartPolicySwarmApplicationEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneRestartPolicySwarmApplicationUnion$inboundSchema:
  z.ZodType<
    EnvironmentOneRestartPolicySwarmApplicationUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneRestartPolicySwarmApplicationEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentOneRestartPolicySwarmApplicationUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneRestartPolicySwarmApplicationUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneRestartPolicySwarmApplicationUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneRestartPolicySwarmApplicationUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneRestartPolicySwarmApplicationEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRestartPolicySwarmApplicationUnion$ {
  /** @deprecated use `EnvironmentOneRestartPolicySwarmApplicationUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRestartPolicySwarmApplicationUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneRestartPolicySwarmApplicationUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRestartPolicySwarmApplicationUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneRestartPolicySwarmApplicationUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentOneRestartPolicySwarmApplicationUnion$Outbound;
}

export function environmentOneRestartPolicySwarmApplicationUnionToJSON(
  environmentOneRestartPolicySwarmApplicationUnion:
    EnvironmentOneRestartPolicySwarmApplicationUnion,
): string {
  return JSON.stringify(
    EnvironmentOneRestartPolicySwarmApplicationUnion$outboundSchema.parse(
      environmentOneRestartPolicySwarmApplicationUnion,
    ),
  );
}

export function environmentOneRestartPolicySwarmApplicationUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneRestartPolicySwarmApplicationUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneRestartPolicySwarmApplicationUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneRestartPolicySwarmApplicationUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneApplicationRestartPolicySwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentOneApplicationRestartPolicySwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneRestartPolicySwarmApplicationEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentOneApplicationRestartPolicySwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneApplicationRestartPolicySwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneApplicationRestartPolicySwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneApplicationRestartPolicySwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneRestartPolicySwarmApplicationEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneApplicationRestartPolicySwarmUnion$ {
  /** @deprecated use `EnvironmentOneApplicationRestartPolicySwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneApplicationRestartPolicySwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneApplicationRestartPolicySwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneApplicationRestartPolicySwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneApplicationRestartPolicySwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentOneApplicationRestartPolicySwarmUnion$Outbound;
}

export function environmentOneApplicationRestartPolicySwarmUnionToJSON(
  environmentOneApplicationRestartPolicySwarmUnion:
    EnvironmentOneApplicationRestartPolicySwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneApplicationRestartPolicySwarmUnion$outboundSchema.parse(
      environmentOneApplicationRestartPolicySwarmUnion,
    ),
  );
}

export function environmentOneApplicationRestartPolicySwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneApplicationRestartPolicySwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneApplicationRestartPolicySwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneApplicationRestartPolicySwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneRollbackConfigSwarmApplicationEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneRollbackConfigSwarmApplicationEnum> = z
    .nativeEnum(EnvironmentOneRollbackConfigSwarmApplicationEnum);

/** @internal */
export const EnvironmentOneRollbackConfigSwarmApplicationEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneRollbackConfigSwarmApplicationEnum> =
    EnvironmentOneRollbackConfigSwarmApplicationEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRollbackConfigSwarmApplicationEnum$ {
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmApplicationEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRollbackConfigSwarmApplicationEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmApplicationEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRollbackConfigSwarmApplicationEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneRollbackConfigSwarmApplicationUnion$inboundSchema:
  z.ZodType<
    EnvironmentOneRollbackConfigSwarmApplicationUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneRollbackConfigSwarmApplicationEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentOneRollbackConfigSwarmApplicationUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneRollbackConfigSwarmApplicationUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneRollbackConfigSwarmApplicationUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneRollbackConfigSwarmApplicationUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneRollbackConfigSwarmApplicationEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRollbackConfigSwarmApplicationUnion$ {
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmApplicationUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRollbackConfigSwarmApplicationUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmApplicationUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRollbackConfigSwarmApplicationUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmApplicationUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentOneRollbackConfigSwarmApplicationUnion$Outbound;
}

export function environmentOneRollbackConfigSwarmApplicationUnionToJSON(
  environmentOneRollbackConfigSwarmApplicationUnion:
    EnvironmentOneRollbackConfigSwarmApplicationUnion,
): string {
  return JSON.stringify(
    EnvironmentOneRollbackConfigSwarmApplicationUnion$outboundSchema.parse(
      environmentOneRollbackConfigSwarmApplicationUnion,
    ),
  );
}

export function environmentOneRollbackConfigSwarmApplicationUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneRollbackConfigSwarmApplicationUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneRollbackConfigSwarmApplicationUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneRollbackConfigSwarmApplicationUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneApplicationRollbackConfigSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentOneApplicationRollbackConfigSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneRollbackConfigSwarmApplicationEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentOneApplicationRollbackConfigSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneApplicationRollbackConfigSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneApplicationRollbackConfigSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneApplicationRollbackConfigSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneRollbackConfigSwarmApplicationEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneApplicationRollbackConfigSwarmUnion$ {
  /** @deprecated use `EnvironmentOneApplicationRollbackConfigSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneApplicationRollbackConfigSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneApplicationRollbackConfigSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneApplicationRollbackConfigSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneApplicationRollbackConfigSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentOneApplicationRollbackConfigSwarmUnion$Outbound;
}

export function environmentOneApplicationRollbackConfigSwarmUnionToJSON(
  environmentOneApplicationRollbackConfigSwarmUnion:
    EnvironmentOneApplicationRollbackConfigSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneApplicationRollbackConfigSwarmUnion$outboundSchema.parse(
      environmentOneApplicationRollbackConfigSwarmUnion,
    ),
  );
}

export function environmentOneApplicationRollbackConfigSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneApplicationRollbackConfigSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneApplicationRollbackConfigSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneApplicationRollbackConfigSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneApplicationSourceType$inboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneApplicationSourceType
> = z.nativeEnum(EnvironmentOneApplicationSourceType);

/** @internal */
export const EnvironmentOneApplicationSourceType$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneApplicationSourceType> =
    EnvironmentOneApplicationSourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneApplicationSourceType$ {
  /** @deprecated use `EnvironmentOneApplicationSourceType$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneApplicationSourceType$inboundSchema;
  /** @deprecated use `EnvironmentOneApplicationSourceType$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneApplicationSourceType$outboundSchema;
}

/** @internal */
export const EnvironmentOneApplicationTriggerType$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneApplicationTriggerType> = z.nativeEnum(
    EnvironmentOneApplicationTriggerType,
  );

/** @internal */
export const EnvironmentOneApplicationTriggerType$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneApplicationTriggerType> =
    EnvironmentOneApplicationTriggerType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneApplicationTriggerType$ {
  /** @deprecated use `EnvironmentOneApplicationTriggerType$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneApplicationTriggerType$inboundSchema;
  /** @deprecated use `EnvironmentOneApplicationTriggerType$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneApplicationTriggerType$outboundSchema;
}

/** @internal */
export const EnvironmentOneUpdateConfigSwarmApplicationEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneUpdateConfigSwarmApplicationEnum> = z
    .nativeEnum(EnvironmentOneUpdateConfigSwarmApplicationEnum);

/** @internal */
export const EnvironmentOneUpdateConfigSwarmApplicationEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneUpdateConfigSwarmApplicationEnum> =
    EnvironmentOneUpdateConfigSwarmApplicationEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneUpdateConfigSwarmApplicationEnum$ {
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmApplicationEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneUpdateConfigSwarmApplicationEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmApplicationEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneUpdateConfigSwarmApplicationEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneUpdateConfigSwarmApplicationUnion$inboundSchema:
  z.ZodType<
    EnvironmentOneUpdateConfigSwarmApplicationUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneUpdateConfigSwarmApplicationEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentOneUpdateConfigSwarmApplicationUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneUpdateConfigSwarmApplicationUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneUpdateConfigSwarmApplicationUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneUpdateConfigSwarmApplicationUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneUpdateConfigSwarmApplicationEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneUpdateConfigSwarmApplicationUnion$ {
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmApplicationUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneUpdateConfigSwarmApplicationUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmApplicationUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneUpdateConfigSwarmApplicationUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmApplicationUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentOneUpdateConfigSwarmApplicationUnion$Outbound;
}

export function environmentOneUpdateConfigSwarmApplicationUnionToJSON(
  environmentOneUpdateConfigSwarmApplicationUnion:
    EnvironmentOneUpdateConfigSwarmApplicationUnion,
): string {
  return JSON.stringify(
    EnvironmentOneUpdateConfigSwarmApplicationUnion$outboundSchema.parse(
      environmentOneUpdateConfigSwarmApplicationUnion,
    ),
  );
}

export function environmentOneUpdateConfigSwarmApplicationUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneUpdateConfigSwarmApplicationUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneUpdateConfigSwarmApplicationUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneUpdateConfigSwarmApplicationUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneApplicationUpdateConfigSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentOneApplicationUpdateConfigSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneUpdateConfigSwarmApplicationEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentOneApplicationUpdateConfigSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneApplicationUpdateConfigSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneApplicationUpdateConfigSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneApplicationUpdateConfigSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneUpdateConfigSwarmApplicationEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneApplicationUpdateConfigSwarmUnion$ {
  /** @deprecated use `EnvironmentOneApplicationUpdateConfigSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneApplicationUpdateConfigSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneApplicationUpdateConfigSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneApplicationUpdateConfigSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneApplicationUpdateConfigSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentOneApplicationUpdateConfigSwarmUnion$Outbound;
}

export function environmentOneApplicationUpdateConfigSwarmUnionToJSON(
  environmentOneApplicationUpdateConfigSwarmUnion:
    EnvironmentOneApplicationUpdateConfigSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneApplicationUpdateConfigSwarmUnion$outboundSchema.parse(
      environmentOneApplicationUpdateConfigSwarmUnion,
    ),
  );
}

export function environmentOneApplicationUpdateConfigSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneApplicationUpdateConfigSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneApplicationUpdateConfigSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneApplicationUpdateConfigSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneApplication$inboundSchema: z.ZodType<
  EnvironmentOneApplication,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  applicationId: z.string(),
  applicationStatus: EnvironmentOneApplicationApplicationStatus$inboundSchema,
  autoDeploy: z.nullable(z.boolean()),
  bitbucketBranch: z.nullable(z.string()),
  bitbucketBuildPath: z.nullable(z.string()),
  bitbucketId: z.nullable(z.string()),
  bitbucketOwner: z.nullable(z.string()),
  bitbucketRepository: z.nullable(z.string()),
  branch: z.nullable(z.string()),
  buildArgs: z.nullable(z.string()),
  buildPath: z.nullable(z.string()),
  buildType: EnvironmentOneBuildType$inboundSchema,
  cleanCache: z.nullable(z.boolean()),
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  customGitBranch: z.nullable(z.string()),
  customGitBuildPath: z.nullable(z.string()),
  customGitSSHKeyId: z.nullable(z.string()),
  customGitUrl: z.nullable(z.string()),
  description: z.nullable(z.string()),
  dockerBuildStage: z.nullable(z.string()),
  dockerContextPath: z.nullable(z.string()),
  dockerImage: z.nullable(z.string()),
  dockerfile: z.nullable(z.string()),
  dropBuildPath: z.nullable(z.string()),
  enableSubmodules: z.boolean(),
  enabled: z.nullable(z.boolean()),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  giteaBranch: z.nullable(z.string()),
  giteaBuildPath: z.nullable(z.string()),
  giteaId: z.nullable(z.string()),
  giteaOwner: z.nullable(z.string()),
  giteaRepository: z.nullable(z.string()),
  githubId: z.nullable(z.string()),
  gitlabBranch: z.nullable(z.string()),
  gitlabBuildPath: z.nullable(z.string()),
  gitlabId: z.nullable(z.string()),
  gitlabOwner: z.nullable(z.string()),
  gitlabPathNamespace: z.nullable(z.string()),
  gitlabProjectId: z.nullable(z.number()),
  gitlabRepository: z.nullable(z.string()),
  healthCheckSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneHealthCheckSwarmApplicationEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  herokuVersion: z.nullable(z.string()),
  isPreviewDeploymentsActive: z.nullable(z.boolean()),
  isStaticSpa: z.nullable(z.boolean()),
  labelsSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneLabelsSwarmApplicationEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneModeSwarmApplicationEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  name: z.string(),
  networkSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneNetworkSwarmApplicationEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  owner: z.nullable(z.string()),
  password: z.nullable(z.string()),
  placementSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOnePlacementSwarmApplicationEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  previewBuildArgs: z.nullable(z.string()),
  previewCertificateType: EnvironmentOnePreviewCertificateType$inboundSchema,
  previewCustomCertResolver: z.nullable(z.string()),
  previewEnv: z.nullable(z.string()),
  previewHttps: z.boolean(),
  previewLabels: z.nullable(z.array(z.string())),
  previewLimit: z.nullable(z.number()),
  previewPath: z.nullable(z.string()),
  previewPort: z.nullable(z.number()),
  previewRequireCollaboratorPermissions: z.nullable(z.boolean()),
  previewWildcard: z.nullable(z.string()),
  publishDirectory: z.nullable(z.string()),
  railpackVersion: z.nullable(z.string()),
  refreshToken: z.nullable(z.string()),
  registryId: z.nullable(z.string()),
  registryUrl: z.nullable(z.string()),
  replicas: z.number(),
  repository: z.nullable(z.string()),
  restartPolicySwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneRestartPolicySwarmApplicationEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  rollbackActive: z.nullable(z.boolean()),
  rollbackConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneRollbackConfigSwarmApplicationEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  serverId: z.nullable(z.string()),
  sourceType: EnvironmentOneApplicationSourceType$inboundSchema,
  subtitle: z.nullable(z.string()),
  title: z.nullable(z.string()),
  triggerType: z.nullable(EnvironmentOneApplicationTriggerType$inboundSchema),
  updateConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneUpdateConfigSwarmApplicationEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  username: z.nullable(z.string()),
  watchPaths: z.nullable(z.array(z.string())),
});

/** @internal */
export type EnvironmentOneApplication$Outbound = {
  appName: string;
  applicationId: string;
  applicationStatus: string;
  autoDeploy: boolean | null;
  bitbucketBranch: string | null;
  bitbucketBuildPath: string | null;
  bitbucketId: string | null;
  bitbucketOwner: string | null;
  bitbucketRepository: string | null;
  branch: string | null;
  buildArgs: string | null;
  buildPath: string | null;
  buildType: string;
  cleanCache: boolean | null;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  customGitBranch: string | null;
  customGitBuildPath: string | null;
  customGitSSHKeyId: string | null;
  customGitUrl: string | null;
  description: string | null;
  dockerBuildStage: string | null;
  dockerContextPath: string | null;
  dockerImage: string | null;
  dockerfile: string | null;
  dropBuildPath: string | null;
  enableSubmodules: boolean;
  enabled: boolean | null;
  env: string | null;
  environmentId: string;
  giteaBranch: string | null;
  giteaBuildPath: string | null;
  giteaId: string | null;
  giteaOwner: string | null;
  giteaRepository: string | null;
  githubId: string | null;
  gitlabBranch: string | null;
  gitlabBuildPath: string | null;
  gitlabId: string | null;
  gitlabOwner: string | null;
  gitlabPathNamespace: string | null;
  gitlabProjectId: number | null;
  gitlabRepository: string | null;
  healthCheckSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  herokuVersion: string | null;
  isPreviewDeploymentsActive: boolean | null;
  isStaticSpa: boolean | null;
  labelsSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  name: string;
  networkSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  owner: string | null;
  password: string | null;
  placementSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  previewBuildArgs: string | null;
  previewCertificateType: string;
  previewCustomCertResolver: string | null;
  previewEnv: string | null;
  previewHttps: boolean;
  previewLabels: Array<string> | null;
  previewLimit: number | null;
  previewPath: string | null;
  previewPort: number | null;
  previewRequireCollaboratorPermissions: boolean | null;
  previewWildcard: string | null;
  publishDirectory: string | null;
  railpackVersion: string | null;
  refreshToken: string | null;
  registryId: string | null;
  registryUrl: string | null;
  replicas: number;
  repository: string | null;
  restartPolicySwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  rollbackActive: boolean | null;
  rollbackConfigSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  serverId: string | null;
  sourceType: string;
  subtitle: string | null;
  title: string | null;
  triggerType: string | null;
  updateConfigSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  username: string | null;
  watchPaths: Array<string> | null;
};

/** @internal */
export const EnvironmentOneApplication$outboundSchema: z.ZodType<
  EnvironmentOneApplication$Outbound,
  z.ZodTypeDef,
  EnvironmentOneApplication
> = z.object({
  appName: z.string(),
  applicationId: z.string(),
  applicationStatus: EnvironmentOneApplicationApplicationStatus$outboundSchema,
  autoDeploy: z.nullable(z.boolean()),
  bitbucketBranch: z.nullable(z.string()),
  bitbucketBuildPath: z.nullable(z.string()),
  bitbucketId: z.nullable(z.string()),
  bitbucketOwner: z.nullable(z.string()),
  bitbucketRepository: z.nullable(z.string()),
  branch: z.nullable(z.string()),
  buildArgs: z.nullable(z.string()),
  buildPath: z.nullable(z.string()),
  buildType: EnvironmentOneBuildType$outboundSchema,
  cleanCache: z.nullable(z.boolean()),
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  customGitBranch: z.nullable(z.string()),
  customGitBuildPath: z.nullable(z.string()),
  customGitSSHKeyId: z.nullable(z.string()),
  customGitUrl: z.nullable(z.string()),
  description: z.nullable(z.string()),
  dockerBuildStage: z.nullable(z.string()),
  dockerContextPath: z.nullable(z.string()),
  dockerImage: z.nullable(z.string()),
  dockerfile: z.nullable(z.string()),
  dropBuildPath: z.nullable(z.string()),
  enableSubmodules: z.boolean(),
  enabled: z.nullable(z.boolean()),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  giteaBranch: z.nullable(z.string()),
  giteaBuildPath: z.nullable(z.string()),
  giteaId: z.nullable(z.string()),
  giteaOwner: z.nullable(z.string()),
  giteaRepository: z.nullable(z.string()),
  githubId: z.nullable(z.string()),
  gitlabBranch: z.nullable(z.string()),
  gitlabBuildPath: z.nullable(z.string()),
  gitlabId: z.nullable(z.string()),
  gitlabOwner: z.nullable(z.string()),
  gitlabPathNamespace: z.nullable(z.string()),
  gitlabProjectId: z.nullable(z.number()),
  gitlabRepository: z.nullable(z.string()),
  healthCheckSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneHealthCheckSwarmApplicationEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  herokuVersion: z.nullable(z.string()),
  isPreviewDeploymentsActive: z.nullable(z.boolean()),
  isStaticSpa: z.nullable(z.boolean()),
  labelsSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneLabelsSwarmApplicationEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneModeSwarmApplicationEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  name: z.string(),
  networkSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneNetworkSwarmApplicationEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  owner: z.nullable(z.string()),
  password: z.nullable(z.string()),
  placementSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOnePlacementSwarmApplicationEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  previewBuildArgs: z.nullable(z.string()),
  previewCertificateType: EnvironmentOnePreviewCertificateType$outboundSchema,
  previewCustomCertResolver: z.nullable(z.string()),
  previewEnv: z.nullable(z.string()),
  previewHttps: z.boolean(),
  previewLabels: z.nullable(z.array(z.string())),
  previewLimit: z.nullable(z.number()),
  previewPath: z.nullable(z.string()),
  previewPort: z.nullable(z.number()),
  previewRequireCollaboratorPermissions: z.nullable(z.boolean()),
  previewWildcard: z.nullable(z.string()),
  publishDirectory: z.nullable(z.string()),
  railpackVersion: z.nullable(z.string()),
  refreshToken: z.nullable(z.string()),
  registryId: z.nullable(z.string()),
  registryUrl: z.nullable(z.string()),
  replicas: z.number(),
  repository: z.nullable(z.string()),
  restartPolicySwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneRestartPolicySwarmApplicationEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  rollbackActive: z.nullable(z.boolean()),
  rollbackConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneRollbackConfigSwarmApplicationEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  serverId: z.nullable(z.string()),
  sourceType: EnvironmentOneApplicationSourceType$outboundSchema,
  subtitle: z.nullable(z.string()),
  title: z.nullable(z.string()),
  triggerType: z.nullable(EnvironmentOneApplicationTriggerType$outboundSchema),
  updateConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneUpdateConfigSwarmApplicationEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  username: z.nullable(z.string()),
  watchPaths: z.nullable(z.array(z.string())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneApplication$ {
  /** @deprecated use `EnvironmentOneApplication$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneApplication$inboundSchema;
  /** @deprecated use `EnvironmentOneApplication$outboundSchema` instead. */
  export const outboundSchema = EnvironmentOneApplication$outboundSchema;
  /** @deprecated use `EnvironmentOneApplication$Outbound` instead. */
  export type Outbound = EnvironmentOneApplication$Outbound;
}

export function environmentOneApplicationToJSON(
  environmentOneApplication: EnvironmentOneApplication,
): string {
  return JSON.stringify(
    EnvironmentOneApplication$outboundSchema.parse(environmentOneApplication),
  );
}

export function environmentOneApplicationFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneApplication, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentOneApplication$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneApplication' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneComposeStatus$inboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneComposeStatus
> = z.nativeEnum(EnvironmentOneComposeStatus);

/** @internal */
export const EnvironmentOneComposeStatus$outboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneComposeStatus
> = EnvironmentOneComposeStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneComposeStatus$ {
  /** @deprecated use `EnvironmentOneComposeStatus$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneComposeStatus$inboundSchema;
  /** @deprecated use `EnvironmentOneComposeStatus$outboundSchema` instead. */
  export const outboundSchema = EnvironmentOneComposeStatus$outboundSchema;
}

/** @internal */
export const EnvironmentOneComposeType$inboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneComposeType
> = z.nativeEnum(EnvironmentOneComposeType);

/** @internal */
export const EnvironmentOneComposeType$outboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneComposeType
> = EnvironmentOneComposeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneComposeType$ {
  /** @deprecated use `EnvironmentOneComposeType$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneComposeType$inboundSchema;
  /** @deprecated use `EnvironmentOneComposeType$outboundSchema` instead. */
  export const outboundSchema = EnvironmentOneComposeType$outboundSchema;
}

/** @internal */
export const EnvironmentOneComposeSourceType$inboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneComposeSourceType
> = z.nativeEnum(EnvironmentOneComposeSourceType);

/** @internal */
export const EnvironmentOneComposeSourceType$outboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneComposeSourceType
> = EnvironmentOneComposeSourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneComposeSourceType$ {
  /** @deprecated use `EnvironmentOneComposeSourceType$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneComposeSourceType$inboundSchema;
  /** @deprecated use `EnvironmentOneComposeSourceType$outboundSchema` instead. */
  export const outboundSchema = EnvironmentOneComposeSourceType$outboundSchema;
}

/** @internal */
export const EnvironmentOneComposeTriggerType$inboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneComposeTriggerType
> = z.nativeEnum(EnvironmentOneComposeTriggerType);

/** @internal */
export const EnvironmentOneComposeTriggerType$outboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneComposeTriggerType
> = EnvironmentOneComposeTriggerType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneComposeTriggerType$ {
  /** @deprecated use `EnvironmentOneComposeTriggerType$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneComposeTriggerType$inboundSchema;
  /** @deprecated use `EnvironmentOneComposeTriggerType$outboundSchema` instead. */
  export const outboundSchema = EnvironmentOneComposeTriggerType$outboundSchema;
}

/** @internal */
export const EnvironmentOneCompose$inboundSchema: z.ZodType<
  EnvironmentOneCompose,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  autoDeploy: z.nullable(z.boolean()),
  bitbucketBranch: z.nullable(z.string()),
  bitbucketId: z.nullable(z.string()),
  bitbucketOwner: z.nullable(z.string()),
  bitbucketRepository: z.nullable(z.string()),
  branch: z.nullable(z.string()),
  command: z.string(),
  composeFile: z.string(),
  composeId: z.string(),
  composePath: z.string(),
  composeStatus: EnvironmentOneComposeStatus$inboundSchema,
  composeType: EnvironmentOneComposeType$inboundSchema,
  createdAt: z.string(),
  customGitBranch: z.nullable(z.string()),
  customGitSSHKeyId: z.nullable(z.string()),
  customGitUrl: z.nullable(z.string()),
  description: z.nullable(z.string()),
  enableSubmodules: z.boolean(),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  giteaBranch: z.nullable(z.string()),
  giteaId: z.nullable(z.string()),
  giteaOwner: z.nullable(z.string()),
  giteaRepository: z.nullable(z.string()),
  githubId: z.nullable(z.string()),
  gitlabBranch: z.nullable(z.string()),
  gitlabId: z.nullable(z.string()),
  gitlabOwner: z.nullable(z.string()),
  gitlabPathNamespace: z.nullable(z.string()),
  gitlabProjectId: z.nullable(z.number()),
  gitlabRepository: z.nullable(z.string()),
  isolatedDeployment: z.boolean(),
  isolatedDeploymentsVolume: z.boolean(),
  name: z.string(),
  owner: z.nullable(z.string()),
  randomize: z.boolean(),
  refreshToken: z.nullable(z.string()),
  repository: z.nullable(z.string()),
  serverId: z.nullable(z.string()),
  sourceType: EnvironmentOneComposeSourceType$inboundSchema,
  suffix: z.string(),
  triggerType: z.nullable(EnvironmentOneComposeTriggerType$inboundSchema),
  watchPaths: z.nullable(z.array(z.string())),
});

/** @internal */
export type EnvironmentOneCompose$Outbound = {
  appName: string;
  autoDeploy: boolean | null;
  bitbucketBranch: string | null;
  bitbucketId: string | null;
  bitbucketOwner: string | null;
  bitbucketRepository: string | null;
  branch: string | null;
  command: string;
  composeFile: string;
  composeId: string;
  composePath: string;
  composeStatus: string;
  composeType: string;
  createdAt: string;
  customGitBranch: string | null;
  customGitSSHKeyId: string | null;
  customGitUrl: string | null;
  description: string | null;
  enableSubmodules: boolean;
  env: string | null;
  environmentId: string;
  giteaBranch: string | null;
  giteaId: string | null;
  giteaOwner: string | null;
  giteaRepository: string | null;
  githubId: string | null;
  gitlabBranch: string | null;
  gitlabId: string | null;
  gitlabOwner: string | null;
  gitlabPathNamespace: string | null;
  gitlabProjectId: number | null;
  gitlabRepository: string | null;
  isolatedDeployment: boolean;
  isolatedDeploymentsVolume: boolean;
  name: string;
  owner: string | null;
  randomize: boolean;
  refreshToken: string | null;
  repository: string | null;
  serverId: string | null;
  sourceType: string;
  suffix: string;
  triggerType: string | null;
  watchPaths: Array<string> | null;
};

/** @internal */
export const EnvironmentOneCompose$outboundSchema: z.ZodType<
  EnvironmentOneCompose$Outbound,
  z.ZodTypeDef,
  EnvironmentOneCompose
> = z.object({
  appName: z.string(),
  autoDeploy: z.nullable(z.boolean()),
  bitbucketBranch: z.nullable(z.string()),
  bitbucketId: z.nullable(z.string()),
  bitbucketOwner: z.nullable(z.string()),
  bitbucketRepository: z.nullable(z.string()),
  branch: z.nullable(z.string()),
  command: z.string(),
  composeFile: z.string(),
  composeId: z.string(),
  composePath: z.string(),
  composeStatus: EnvironmentOneComposeStatus$outboundSchema,
  composeType: EnvironmentOneComposeType$outboundSchema,
  createdAt: z.string(),
  customGitBranch: z.nullable(z.string()),
  customGitSSHKeyId: z.nullable(z.string()),
  customGitUrl: z.nullable(z.string()),
  description: z.nullable(z.string()),
  enableSubmodules: z.boolean(),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  giteaBranch: z.nullable(z.string()),
  giteaId: z.nullable(z.string()),
  giteaOwner: z.nullable(z.string()),
  giteaRepository: z.nullable(z.string()),
  githubId: z.nullable(z.string()),
  gitlabBranch: z.nullable(z.string()),
  gitlabId: z.nullable(z.string()),
  gitlabOwner: z.nullable(z.string()),
  gitlabPathNamespace: z.nullable(z.string()),
  gitlabProjectId: z.nullable(z.number()),
  gitlabRepository: z.nullable(z.string()),
  isolatedDeployment: z.boolean(),
  isolatedDeploymentsVolume: z.boolean(),
  name: z.string(),
  owner: z.nullable(z.string()),
  randomize: z.boolean(),
  refreshToken: z.nullable(z.string()),
  repository: z.nullable(z.string()),
  serverId: z.nullable(z.string()),
  sourceType: EnvironmentOneComposeSourceType$outboundSchema,
  suffix: z.string(),
  triggerType: z.nullable(EnvironmentOneComposeTriggerType$outboundSchema),
  watchPaths: z.nullable(z.array(z.string())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneCompose$ {
  /** @deprecated use `EnvironmentOneCompose$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneCompose$inboundSchema;
  /** @deprecated use `EnvironmentOneCompose$outboundSchema` instead. */
  export const outboundSchema = EnvironmentOneCompose$outboundSchema;
  /** @deprecated use `EnvironmentOneCompose$Outbound` instead. */
  export type Outbound = EnvironmentOneCompose$Outbound;
}

export function environmentOneComposeToJSON(
  environmentOneCompose: EnvironmentOneCompose,
): string {
  return JSON.stringify(
    EnvironmentOneCompose$outboundSchema.parse(environmentOneCompose),
  );
}

export function environmentOneComposeFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneCompose, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentOneCompose$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneCompose' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMariadbApplicationStatus$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneMariadbApplicationStatus> = z.nativeEnum(
    EnvironmentOneMariadbApplicationStatus,
  );

/** @internal */
export const EnvironmentOneMariadbApplicationStatus$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneMariadbApplicationStatus> =
    EnvironmentOneMariadbApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMariadbApplicationStatus$ {
  /** @deprecated use `EnvironmentOneMariadbApplicationStatus$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneMariadbApplicationStatus$inboundSchema;
  /** @deprecated use `EnvironmentOneMariadbApplicationStatus$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneMariadbApplicationStatus$outboundSchema;
}

/** @internal */
export const EnvironmentOneHealthCheckSwarmMariadbEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneHealthCheckSwarmMariadbEnum> = z
    .nativeEnum(EnvironmentOneHealthCheckSwarmMariadbEnum);

/** @internal */
export const EnvironmentOneHealthCheckSwarmMariadbEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneHealthCheckSwarmMariadbEnum> =
    EnvironmentOneHealthCheckSwarmMariadbEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneHealthCheckSwarmMariadbEnum$ {
  /** @deprecated use `EnvironmentOneHealthCheckSwarmMariadbEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneHealthCheckSwarmMariadbEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneHealthCheckSwarmMariadbEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneHealthCheckSwarmMariadbEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneHealthCheckSwarmMariadbUnion$inboundSchema:
  z.ZodType<EnvironmentOneHealthCheckSwarmMariadbUnion, z.ZodTypeDef, unknown> =
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneHealthCheckSwarmMariadbEnum$inboundSchema,
    ]);

/** @internal */
export type EnvironmentOneHealthCheckSwarmMariadbUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneHealthCheckSwarmMariadbUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneHealthCheckSwarmMariadbUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneHealthCheckSwarmMariadbUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneHealthCheckSwarmMariadbEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneHealthCheckSwarmMariadbUnion$ {
  /** @deprecated use `EnvironmentOneHealthCheckSwarmMariadbUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneHealthCheckSwarmMariadbUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneHealthCheckSwarmMariadbUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneHealthCheckSwarmMariadbUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneHealthCheckSwarmMariadbUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneHealthCheckSwarmMariadbUnion$Outbound;
}

export function environmentOneHealthCheckSwarmMariadbUnionToJSON(
  environmentOneHealthCheckSwarmMariadbUnion:
    EnvironmentOneHealthCheckSwarmMariadbUnion,
): string {
  return JSON.stringify(
    EnvironmentOneHealthCheckSwarmMariadbUnion$outboundSchema.parse(
      environmentOneHealthCheckSwarmMariadbUnion,
    ),
  );
}

export function environmentOneHealthCheckSwarmMariadbUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneHealthCheckSwarmMariadbUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneHealthCheckSwarmMariadbUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneHealthCheckSwarmMariadbUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMariadbHealthCheckSwarmUnion$inboundSchema:
  z.ZodType<EnvironmentOneMariadbHealthCheckSwarmUnion, z.ZodTypeDef, unknown> =
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneHealthCheckSwarmMariadbEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]);

/** @internal */
export type EnvironmentOneMariadbHealthCheckSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneMariadbHealthCheckSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneMariadbHealthCheckSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneMariadbHealthCheckSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneHealthCheckSwarmMariadbEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMariadbHealthCheckSwarmUnion$ {
  /** @deprecated use `EnvironmentOneMariadbHealthCheckSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneMariadbHealthCheckSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneMariadbHealthCheckSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneMariadbHealthCheckSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneMariadbHealthCheckSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneMariadbHealthCheckSwarmUnion$Outbound;
}

export function environmentOneMariadbHealthCheckSwarmUnionToJSON(
  environmentOneMariadbHealthCheckSwarmUnion:
    EnvironmentOneMariadbHealthCheckSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneMariadbHealthCheckSwarmUnion$outboundSchema.parse(
      environmentOneMariadbHealthCheckSwarmUnion,
    ),
  );
}

export function environmentOneMariadbHealthCheckSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneMariadbHealthCheckSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneMariadbHealthCheckSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneMariadbHealthCheckSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneLabelsSwarmMariadbEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneLabelsSwarmMariadbEnum> = z.nativeEnum(
    EnvironmentOneLabelsSwarmMariadbEnum,
  );

/** @internal */
export const EnvironmentOneLabelsSwarmMariadbEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneLabelsSwarmMariadbEnum> =
    EnvironmentOneLabelsSwarmMariadbEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneLabelsSwarmMariadbEnum$ {
  /** @deprecated use `EnvironmentOneLabelsSwarmMariadbEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneLabelsSwarmMariadbEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneLabelsSwarmMariadbEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneLabelsSwarmMariadbEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneLabelsSwarmMariadbUnion$inboundSchema: z.ZodType<
  EnvironmentOneLabelsSwarmMariadbUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneLabelsSwarmMariadbEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentOneLabelsSwarmMariadbUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneLabelsSwarmMariadbUnion$outboundSchema: z.ZodType<
  EnvironmentOneLabelsSwarmMariadbUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneLabelsSwarmMariadbUnion
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneLabelsSwarmMariadbEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneLabelsSwarmMariadbUnion$ {
  /** @deprecated use `EnvironmentOneLabelsSwarmMariadbUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneLabelsSwarmMariadbUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneLabelsSwarmMariadbUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneLabelsSwarmMariadbUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneLabelsSwarmMariadbUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneLabelsSwarmMariadbUnion$Outbound;
}

export function environmentOneLabelsSwarmMariadbUnionToJSON(
  environmentOneLabelsSwarmMariadbUnion: EnvironmentOneLabelsSwarmMariadbUnion,
): string {
  return JSON.stringify(
    EnvironmentOneLabelsSwarmMariadbUnion$outboundSchema.parse(
      environmentOneLabelsSwarmMariadbUnion,
    ),
  );
}

export function environmentOneLabelsSwarmMariadbUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneLabelsSwarmMariadbUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneLabelsSwarmMariadbUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneLabelsSwarmMariadbUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMariadbLabelsSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentOneMariadbLabelsSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneLabelsSwarmMariadbEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentOneMariadbLabelsSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneMariadbLabelsSwarmUnion$outboundSchema: z.ZodType<
  EnvironmentOneMariadbLabelsSwarmUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneMariadbLabelsSwarmUnion
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneLabelsSwarmMariadbEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMariadbLabelsSwarmUnion$ {
  /** @deprecated use `EnvironmentOneMariadbLabelsSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneMariadbLabelsSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneMariadbLabelsSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneMariadbLabelsSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneMariadbLabelsSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneMariadbLabelsSwarmUnion$Outbound;
}

export function environmentOneMariadbLabelsSwarmUnionToJSON(
  environmentOneMariadbLabelsSwarmUnion: EnvironmentOneMariadbLabelsSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneMariadbLabelsSwarmUnion$outboundSchema.parse(
      environmentOneMariadbLabelsSwarmUnion,
    ),
  );
}

export function environmentOneMariadbLabelsSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneMariadbLabelsSwarmUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneMariadbLabelsSwarmUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneMariadbLabelsSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneModeSwarmMariadbEnum$inboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneModeSwarmMariadbEnum
> = z.nativeEnum(EnvironmentOneModeSwarmMariadbEnum);

/** @internal */
export const EnvironmentOneModeSwarmMariadbEnum$outboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneModeSwarmMariadbEnum
> = EnvironmentOneModeSwarmMariadbEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneModeSwarmMariadbEnum$ {
  /** @deprecated use `EnvironmentOneModeSwarmMariadbEnum$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneModeSwarmMariadbEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneModeSwarmMariadbEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneModeSwarmMariadbEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneModeSwarmMariadbUnion$inboundSchema: z.ZodType<
  EnvironmentOneModeSwarmMariadbUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneModeSwarmMariadbEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentOneModeSwarmMariadbUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneModeSwarmMariadbUnion$outboundSchema: z.ZodType<
  EnvironmentOneModeSwarmMariadbUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneModeSwarmMariadbUnion
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneModeSwarmMariadbEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneModeSwarmMariadbUnion$ {
  /** @deprecated use `EnvironmentOneModeSwarmMariadbUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneModeSwarmMariadbUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneModeSwarmMariadbUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneModeSwarmMariadbUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneModeSwarmMariadbUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneModeSwarmMariadbUnion$Outbound;
}

export function environmentOneModeSwarmMariadbUnionToJSON(
  environmentOneModeSwarmMariadbUnion: EnvironmentOneModeSwarmMariadbUnion,
): string {
  return JSON.stringify(
    EnvironmentOneModeSwarmMariadbUnion$outboundSchema.parse(
      environmentOneModeSwarmMariadbUnion,
    ),
  );
}

export function environmentOneModeSwarmMariadbUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneModeSwarmMariadbUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneModeSwarmMariadbUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneModeSwarmMariadbUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMariadbModeSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentOneMariadbModeSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneModeSwarmMariadbEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentOneMariadbModeSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneMariadbModeSwarmUnion$outboundSchema: z.ZodType<
  EnvironmentOneMariadbModeSwarmUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneMariadbModeSwarmUnion
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneModeSwarmMariadbEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMariadbModeSwarmUnion$ {
  /** @deprecated use `EnvironmentOneMariadbModeSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneMariadbModeSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneMariadbModeSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneMariadbModeSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneMariadbModeSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneMariadbModeSwarmUnion$Outbound;
}

export function environmentOneMariadbModeSwarmUnionToJSON(
  environmentOneMariadbModeSwarmUnion: EnvironmentOneMariadbModeSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneMariadbModeSwarmUnion$outboundSchema.parse(
      environmentOneMariadbModeSwarmUnion,
    ),
  );
}

export function environmentOneMariadbModeSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneMariadbModeSwarmUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneMariadbModeSwarmUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneMariadbModeSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneNetworkSwarmMariadbEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneNetworkSwarmMariadbEnum> = z.nativeEnum(
    EnvironmentOneNetworkSwarmMariadbEnum,
  );

/** @internal */
export const EnvironmentOneNetworkSwarmMariadbEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneNetworkSwarmMariadbEnum> =
    EnvironmentOneNetworkSwarmMariadbEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneNetworkSwarmMariadbEnum$ {
  /** @deprecated use `EnvironmentOneNetworkSwarmMariadbEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneNetworkSwarmMariadbEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneNetworkSwarmMariadbEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneNetworkSwarmMariadbEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneNetworkSwarmMariadbUnion$inboundSchema: z.ZodType<
  EnvironmentOneNetworkSwarmMariadbUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneNetworkSwarmMariadbEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentOneNetworkSwarmMariadbUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneNetworkSwarmMariadbUnion$outboundSchema: z.ZodType<
  EnvironmentOneNetworkSwarmMariadbUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneNetworkSwarmMariadbUnion
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneNetworkSwarmMariadbEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneNetworkSwarmMariadbUnion$ {
  /** @deprecated use `EnvironmentOneNetworkSwarmMariadbUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneNetworkSwarmMariadbUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneNetworkSwarmMariadbUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneNetworkSwarmMariadbUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneNetworkSwarmMariadbUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneNetworkSwarmMariadbUnion$Outbound;
}

export function environmentOneNetworkSwarmMariadbUnionToJSON(
  environmentOneNetworkSwarmMariadbUnion:
    EnvironmentOneNetworkSwarmMariadbUnion,
): string {
  return JSON.stringify(
    EnvironmentOneNetworkSwarmMariadbUnion$outboundSchema.parse(
      environmentOneNetworkSwarmMariadbUnion,
    ),
  );
}

export function environmentOneNetworkSwarmMariadbUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneNetworkSwarmMariadbUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneNetworkSwarmMariadbUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneNetworkSwarmMariadbUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMariadbNetworkSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentOneMariadbNetworkSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneNetworkSwarmMariadbEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentOneMariadbNetworkSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneMariadbNetworkSwarmUnion$outboundSchema: z.ZodType<
  EnvironmentOneMariadbNetworkSwarmUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneMariadbNetworkSwarmUnion
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneNetworkSwarmMariadbEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMariadbNetworkSwarmUnion$ {
  /** @deprecated use `EnvironmentOneMariadbNetworkSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneMariadbNetworkSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneMariadbNetworkSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneMariadbNetworkSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneMariadbNetworkSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneMariadbNetworkSwarmUnion$Outbound;
}

export function environmentOneMariadbNetworkSwarmUnionToJSON(
  environmentOneMariadbNetworkSwarmUnion:
    EnvironmentOneMariadbNetworkSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneMariadbNetworkSwarmUnion$outboundSchema.parse(
      environmentOneMariadbNetworkSwarmUnion,
    ),
  );
}

export function environmentOneMariadbNetworkSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneMariadbNetworkSwarmUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneMariadbNetworkSwarmUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneMariadbNetworkSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOnePlacementSwarmMariadbEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOnePlacementSwarmMariadbEnum> = z
    .nativeEnum(EnvironmentOnePlacementSwarmMariadbEnum);

/** @internal */
export const EnvironmentOnePlacementSwarmMariadbEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOnePlacementSwarmMariadbEnum> =
    EnvironmentOnePlacementSwarmMariadbEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOnePlacementSwarmMariadbEnum$ {
  /** @deprecated use `EnvironmentOnePlacementSwarmMariadbEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOnePlacementSwarmMariadbEnum$inboundSchema;
  /** @deprecated use `EnvironmentOnePlacementSwarmMariadbEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOnePlacementSwarmMariadbEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOnePlacementSwarmMariadbUnion$inboundSchema: z.ZodType<
  EnvironmentOnePlacementSwarmMariadbUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOnePlacementSwarmMariadbEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentOnePlacementSwarmMariadbUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOnePlacementSwarmMariadbUnion$outboundSchema: z.ZodType<
  EnvironmentOnePlacementSwarmMariadbUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOnePlacementSwarmMariadbUnion
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOnePlacementSwarmMariadbEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOnePlacementSwarmMariadbUnion$ {
  /** @deprecated use `EnvironmentOnePlacementSwarmMariadbUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOnePlacementSwarmMariadbUnion$inboundSchema;
  /** @deprecated use `EnvironmentOnePlacementSwarmMariadbUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOnePlacementSwarmMariadbUnion$outboundSchema;
  /** @deprecated use `EnvironmentOnePlacementSwarmMariadbUnion$Outbound` instead. */
  export type Outbound = EnvironmentOnePlacementSwarmMariadbUnion$Outbound;
}

export function environmentOnePlacementSwarmMariadbUnionToJSON(
  environmentOnePlacementSwarmMariadbUnion:
    EnvironmentOnePlacementSwarmMariadbUnion,
): string {
  return JSON.stringify(
    EnvironmentOnePlacementSwarmMariadbUnion$outboundSchema.parse(
      environmentOnePlacementSwarmMariadbUnion,
    ),
  );
}

export function environmentOnePlacementSwarmMariadbUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOnePlacementSwarmMariadbUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOnePlacementSwarmMariadbUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOnePlacementSwarmMariadbUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMariadbPlacementSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentOneMariadbPlacementSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOnePlacementSwarmMariadbEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentOneMariadbPlacementSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneMariadbPlacementSwarmUnion$outboundSchema: z.ZodType<
  EnvironmentOneMariadbPlacementSwarmUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneMariadbPlacementSwarmUnion
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOnePlacementSwarmMariadbEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMariadbPlacementSwarmUnion$ {
  /** @deprecated use `EnvironmentOneMariadbPlacementSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneMariadbPlacementSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneMariadbPlacementSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneMariadbPlacementSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneMariadbPlacementSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneMariadbPlacementSwarmUnion$Outbound;
}

export function environmentOneMariadbPlacementSwarmUnionToJSON(
  environmentOneMariadbPlacementSwarmUnion:
    EnvironmentOneMariadbPlacementSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneMariadbPlacementSwarmUnion$outboundSchema.parse(
      environmentOneMariadbPlacementSwarmUnion,
    ),
  );
}

export function environmentOneMariadbPlacementSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneMariadbPlacementSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneMariadbPlacementSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneMariadbPlacementSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneRestartPolicySwarmMariadbEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneRestartPolicySwarmMariadbEnum> = z
    .nativeEnum(EnvironmentOneRestartPolicySwarmMariadbEnum);

/** @internal */
export const EnvironmentOneRestartPolicySwarmMariadbEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneRestartPolicySwarmMariadbEnum> =
    EnvironmentOneRestartPolicySwarmMariadbEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRestartPolicySwarmMariadbEnum$ {
  /** @deprecated use `EnvironmentOneRestartPolicySwarmMariadbEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRestartPolicySwarmMariadbEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneRestartPolicySwarmMariadbEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRestartPolicySwarmMariadbEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneRestartPolicySwarmMariadbUnion$inboundSchema:
  z.ZodType<
    EnvironmentOneRestartPolicySwarmMariadbUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneRestartPolicySwarmMariadbEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentOneRestartPolicySwarmMariadbUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneRestartPolicySwarmMariadbUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneRestartPolicySwarmMariadbUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneRestartPolicySwarmMariadbUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneRestartPolicySwarmMariadbEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRestartPolicySwarmMariadbUnion$ {
  /** @deprecated use `EnvironmentOneRestartPolicySwarmMariadbUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRestartPolicySwarmMariadbUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneRestartPolicySwarmMariadbUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRestartPolicySwarmMariadbUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneRestartPolicySwarmMariadbUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneRestartPolicySwarmMariadbUnion$Outbound;
}

export function environmentOneRestartPolicySwarmMariadbUnionToJSON(
  environmentOneRestartPolicySwarmMariadbUnion:
    EnvironmentOneRestartPolicySwarmMariadbUnion,
): string {
  return JSON.stringify(
    EnvironmentOneRestartPolicySwarmMariadbUnion$outboundSchema.parse(
      environmentOneRestartPolicySwarmMariadbUnion,
    ),
  );
}

export function environmentOneRestartPolicySwarmMariadbUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneRestartPolicySwarmMariadbUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneRestartPolicySwarmMariadbUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneRestartPolicySwarmMariadbUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMariadbRestartPolicySwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentOneMariadbRestartPolicySwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneRestartPolicySwarmMariadbEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentOneMariadbRestartPolicySwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneMariadbRestartPolicySwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneMariadbRestartPolicySwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneMariadbRestartPolicySwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneRestartPolicySwarmMariadbEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMariadbRestartPolicySwarmUnion$ {
  /** @deprecated use `EnvironmentOneMariadbRestartPolicySwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneMariadbRestartPolicySwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneMariadbRestartPolicySwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneMariadbRestartPolicySwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneMariadbRestartPolicySwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneMariadbRestartPolicySwarmUnion$Outbound;
}

export function environmentOneMariadbRestartPolicySwarmUnionToJSON(
  environmentOneMariadbRestartPolicySwarmUnion:
    EnvironmentOneMariadbRestartPolicySwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneMariadbRestartPolicySwarmUnion$outboundSchema.parse(
      environmentOneMariadbRestartPolicySwarmUnion,
    ),
  );
}

export function environmentOneMariadbRestartPolicySwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneMariadbRestartPolicySwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneMariadbRestartPolicySwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneMariadbRestartPolicySwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneRollbackConfigSwarmMariadbEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneRollbackConfigSwarmMariadbEnum> = z
    .nativeEnum(EnvironmentOneRollbackConfigSwarmMariadbEnum);

/** @internal */
export const EnvironmentOneRollbackConfigSwarmMariadbEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneRollbackConfigSwarmMariadbEnum> =
    EnvironmentOneRollbackConfigSwarmMariadbEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRollbackConfigSwarmMariadbEnum$ {
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmMariadbEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRollbackConfigSwarmMariadbEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmMariadbEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRollbackConfigSwarmMariadbEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneRollbackConfigSwarmMariadbUnion$inboundSchema:
  z.ZodType<
    EnvironmentOneRollbackConfigSwarmMariadbUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneRollbackConfigSwarmMariadbEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentOneRollbackConfigSwarmMariadbUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneRollbackConfigSwarmMariadbUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneRollbackConfigSwarmMariadbUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneRollbackConfigSwarmMariadbUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneRollbackConfigSwarmMariadbEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRollbackConfigSwarmMariadbUnion$ {
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmMariadbUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRollbackConfigSwarmMariadbUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmMariadbUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRollbackConfigSwarmMariadbUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmMariadbUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneRollbackConfigSwarmMariadbUnion$Outbound;
}

export function environmentOneRollbackConfigSwarmMariadbUnionToJSON(
  environmentOneRollbackConfigSwarmMariadbUnion:
    EnvironmentOneRollbackConfigSwarmMariadbUnion,
): string {
  return JSON.stringify(
    EnvironmentOneRollbackConfigSwarmMariadbUnion$outboundSchema.parse(
      environmentOneRollbackConfigSwarmMariadbUnion,
    ),
  );
}

export function environmentOneRollbackConfigSwarmMariadbUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneRollbackConfigSwarmMariadbUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneRollbackConfigSwarmMariadbUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneRollbackConfigSwarmMariadbUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMariadbRollbackConfigSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentOneMariadbRollbackConfigSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneRollbackConfigSwarmMariadbEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentOneMariadbRollbackConfigSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneMariadbRollbackConfigSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneMariadbRollbackConfigSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneMariadbRollbackConfigSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneRollbackConfigSwarmMariadbEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMariadbRollbackConfigSwarmUnion$ {
  /** @deprecated use `EnvironmentOneMariadbRollbackConfigSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneMariadbRollbackConfigSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneMariadbRollbackConfigSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneMariadbRollbackConfigSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneMariadbRollbackConfigSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneMariadbRollbackConfigSwarmUnion$Outbound;
}

export function environmentOneMariadbRollbackConfigSwarmUnionToJSON(
  environmentOneMariadbRollbackConfigSwarmUnion:
    EnvironmentOneMariadbRollbackConfigSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneMariadbRollbackConfigSwarmUnion$outboundSchema.parse(
      environmentOneMariadbRollbackConfigSwarmUnion,
    ),
  );
}

export function environmentOneMariadbRollbackConfigSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneMariadbRollbackConfigSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneMariadbRollbackConfigSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneMariadbRollbackConfigSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneUpdateConfigSwarmMariadbEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneUpdateConfigSwarmMariadbEnum> = z
    .nativeEnum(EnvironmentOneUpdateConfigSwarmMariadbEnum);

/** @internal */
export const EnvironmentOneUpdateConfigSwarmMariadbEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneUpdateConfigSwarmMariadbEnum> =
    EnvironmentOneUpdateConfigSwarmMariadbEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneUpdateConfigSwarmMariadbEnum$ {
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmMariadbEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneUpdateConfigSwarmMariadbEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmMariadbEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneUpdateConfigSwarmMariadbEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneUpdateConfigSwarmMariadbUnion$inboundSchema:
  z.ZodType<
    EnvironmentOneUpdateConfigSwarmMariadbUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneUpdateConfigSwarmMariadbEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentOneUpdateConfigSwarmMariadbUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneUpdateConfigSwarmMariadbUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneUpdateConfigSwarmMariadbUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneUpdateConfigSwarmMariadbUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneUpdateConfigSwarmMariadbEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneUpdateConfigSwarmMariadbUnion$ {
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmMariadbUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneUpdateConfigSwarmMariadbUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmMariadbUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneUpdateConfigSwarmMariadbUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmMariadbUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneUpdateConfigSwarmMariadbUnion$Outbound;
}

export function environmentOneUpdateConfigSwarmMariadbUnionToJSON(
  environmentOneUpdateConfigSwarmMariadbUnion:
    EnvironmentOneUpdateConfigSwarmMariadbUnion,
): string {
  return JSON.stringify(
    EnvironmentOneUpdateConfigSwarmMariadbUnion$outboundSchema.parse(
      environmentOneUpdateConfigSwarmMariadbUnion,
    ),
  );
}

export function environmentOneUpdateConfigSwarmMariadbUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneUpdateConfigSwarmMariadbUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneUpdateConfigSwarmMariadbUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneUpdateConfigSwarmMariadbUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMariadbUpdateConfigSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentOneMariadbUpdateConfigSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneUpdateConfigSwarmMariadbEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentOneMariadbUpdateConfigSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneMariadbUpdateConfigSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneMariadbUpdateConfigSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneMariadbUpdateConfigSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneUpdateConfigSwarmMariadbEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMariadbUpdateConfigSwarmUnion$ {
  /** @deprecated use `EnvironmentOneMariadbUpdateConfigSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneMariadbUpdateConfigSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneMariadbUpdateConfigSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneMariadbUpdateConfigSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneMariadbUpdateConfigSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneMariadbUpdateConfigSwarmUnion$Outbound;
}

export function environmentOneMariadbUpdateConfigSwarmUnionToJSON(
  environmentOneMariadbUpdateConfigSwarmUnion:
    EnvironmentOneMariadbUpdateConfigSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneMariadbUpdateConfigSwarmUnion$outboundSchema.parse(
      environmentOneMariadbUpdateConfigSwarmUnion,
    ),
  );
}

export function environmentOneMariadbUpdateConfigSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneMariadbUpdateConfigSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneMariadbUpdateConfigSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneMariadbUpdateConfigSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMariadb$inboundSchema: z.ZodType<
  EnvironmentOneMariadb,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  applicationStatus: EnvironmentOneMariadbApplicationStatus$inboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databaseName: z.string(),
  databasePassword: z.string(),
  databaseRootPassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneHealthCheckSwarmMariadbEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  labelsSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneLabelsSwarmMariadbEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  mariadbId: z.string(),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneModeSwarmMariadbEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  name: z.string(),
  networkSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneNetworkSwarmMariadbEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  placementSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOnePlacementSwarmMariadbEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneRestartPolicySwarmMariadbEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  rollbackConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneRollbackConfigSwarmMariadbEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneUpdateConfigSwarmMariadbEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
});

/** @internal */
export type EnvironmentOneMariadb$Outbound = {
  appName: string;
  applicationStatus: string;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databaseName: string;
  databasePassword: string;
  databaseRootPassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  labelsSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  mariadbId: string;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  name: string;
  networkSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  placementSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  replicas: number;
  restartPolicySwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  rollbackConfigSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  serverId: string | null;
  updateConfigSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
};

/** @internal */
export const EnvironmentOneMariadb$outboundSchema: z.ZodType<
  EnvironmentOneMariadb$Outbound,
  z.ZodTypeDef,
  EnvironmentOneMariadb
> = z.object({
  appName: z.string(),
  applicationStatus: EnvironmentOneMariadbApplicationStatus$outboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databaseName: z.string(),
  databasePassword: z.string(),
  databaseRootPassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneHealthCheckSwarmMariadbEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  labelsSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneLabelsSwarmMariadbEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  mariadbId: z.string(),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneModeSwarmMariadbEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  name: z.string(),
  networkSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneNetworkSwarmMariadbEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  placementSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOnePlacementSwarmMariadbEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneRestartPolicySwarmMariadbEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  rollbackConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneRollbackConfigSwarmMariadbEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneUpdateConfigSwarmMariadbEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMariadb$ {
  /** @deprecated use `EnvironmentOneMariadb$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneMariadb$inboundSchema;
  /** @deprecated use `EnvironmentOneMariadb$outboundSchema` instead. */
  export const outboundSchema = EnvironmentOneMariadb$outboundSchema;
  /** @deprecated use `EnvironmentOneMariadb$Outbound` instead. */
  export type Outbound = EnvironmentOneMariadb$Outbound;
}

export function environmentOneMariadbToJSON(
  environmentOneMariadb: EnvironmentOneMariadb,
): string {
  return JSON.stringify(
    EnvironmentOneMariadb$outboundSchema.parse(environmentOneMariadb),
  );
}

export function environmentOneMariadbFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneMariadb, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentOneMariadb$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneMariadb' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMongoApplicationStatus$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneMongoApplicationStatus> = z.nativeEnum(
    EnvironmentOneMongoApplicationStatus,
  );

/** @internal */
export const EnvironmentOneMongoApplicationStatus$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneMongoApplicationStatus> =
    EnvironmentOneMongoApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMongoApplicationStatus$ {
  /** @deprecated use `EnvironmentOneMongoApplicationStatus$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneMongoApplicationStatus$inboundSchema;
  /** @deprecated use `EnvironmentOneMongoApplicationStatus$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneMongoApplicationStatus$outboundSchema;
}

/** @internal */
export const EnvironmentOneHealthCheckSwarmMongoEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneHealthCheckSwarmMongoEnum> = z
    .nativeEnum(EnvironmentOneHealthCheckSwarmMongoEnum);

/** @internal */
export const EnvironmentOneHealthCheckSwarmMongoEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneHealthCheckSwarmMongoEnum> =
    EnvironmentOneHealthCheckSwarmMongoEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneHealthCheckSwarmMongoEnum$ {
  /** @deprecated use `EnvironmentOneHealthCheckSwarmMongoEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneHealthCheckSwarmMongoEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneHealthCheckSwarmMongoEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneHealthCheckSwarmMongoEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneHealthCheckSwarmMongoUnion$inboundSchema: z.ZodType<
  EnvironmentOneHealthCheckSwarmMongoUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneHealthCheckSwarmMongoEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentOneHealthCheckSwarmMongoUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneHealthCheckSwarmMongoUnion$outboundSchema: z.ZodType<
  EnvironmentOneHealthCheckSwarmMongoUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneHealthCheckSwarmMongoUnion
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneHealthCheckSwarmMongoEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneHealthCheckSwarmMongoUnion$ {
  /** @deprecated use `EnvironmentOneHealthCheckSwarmMongoUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneHealthCheckSwarmMongoUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneHealthCheckSwarmMongoUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneHealthCheckSwarmMongoUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneHealthCheckSwarmMongoUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneHealthCheckSwarmMongoUnion$Outbound;
}

export function environmentOneHealthCheckSwarmMongoUnionToJSON(
  environmentOneHealthCheckSwarmMongoUnion:
    EnvironmentOneHealthCheckSwarmMongoUnion,
): string {
  return JSON.stringify(
    EnvironmentOneHealthCheckSwarmMongoUnion$outboundSchema.parse(
      environmentOneHealthCheckSwarmMongoUnion,
    ),
  );
}

export function environmentOneHealthCheckSwarmMongoUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneHealthCheckSwarmMongoUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneHealthCheckSwarmMongoUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneHealthCheckSwarmMongoUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMongoHealthCheckSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentOneMongoHealthCheckSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneHealthCheckSwarmMongoEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentOneMongoHealthCheckSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneMongoHealthCheckSwarmUnion$outboundSchema: z.ZodType<
  EnvironmentOneMongoHealthCheckSwarmUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneMongoHealthCheckSwarmUnion
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneHealthCheckSwarmMongoEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMongoHealthCheckSwarmUnion$ {
  /** @deprecated use `EnvironmentOneMongoHealthCheckSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneMongoHealthCheckSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneMongoHealthCheckSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneMongoHealthCheckSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneMongoHealthCheckSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneMongoHealthCheckSwarmUnion$Outbound;
}

export function environmentOneMongoHealthCheckSwarmUnionToJSON(
  environmentOneMongoHealthCheckSwarmUnion:
    EnvironmentOneMongoHealthCheckSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneMongoHealthCheckSwarmUnion$outboundSchema.parse(
      environmentOneMongoHealthCheckSwarmUnion,
    ),
  );
}

export function environmentOneMongoHealthCheckSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneMongoHealthCheckSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneMongoHealthCheckSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneMongoHealthCheckSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneLabelsSwarmMongoEnum$inboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneLabelsSwarmMongoEnum
> = z.nativeEnum(EnvironmentOneLabelsSwarmMongoEnum);

/** @internal */
export const EnvironmentOneLabelsSwarmMongoEnum$outboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneLabelsSwarmMongoEnum
> = EnvironmentOneLabelsSwarmMongoEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneLabelsSwarmMongoEnum$ {
  /** @deprecated use `EnvironmentOneLabelsSwarmMongoEnum$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneLabelsSwarmMongoEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneLabelsSwarmMongoEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneLabelsSwarmMongoEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneLabelsSwarmMongoUnion$inboundSchema: z.ZodType<
  EnvironmentOneLabelsSwarmMongoUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneLabelsSwarmMongoEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentOneLabelsSwarmMongoUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneLabelsSwarmMongoUnion$outboundSchema: z.ZodType<
  EnvironmentOneLabelsSwarmMongoUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneLabelsSwarmMongoUnion
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneLabelsSwarmMongoEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneLabelsSwarmMongoUnion$ {
  /** @deprecated use `EnvironmentOneLabelsSwarmMongoUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneLabelsSwarmMongoUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneLabelsSwarmMongoUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneLabelsSwarmMongoUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneLabelsSwarmMongoUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneLabelsSwarmMongoUnion$Outbound;
}

export function environmentOneLabelsSwarmMongoUnionToJSON(
  environmentOneLabelsSwarmMongoUnion: EnvironmentOneLabelsSwarmMongoUnion,
): string {
  return JSON.stringify(
    EnvironmentOneLabelsSwarmMongoUnion$outboundSchema.parse(
      environmentOneLabelsSwarmMongoUnion,
    ),
  );
}

export function environmentOneLabelsSwarmMongoUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneLabelsSwarmMongoUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneLabelsSwarmMongoUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneLabelsSwarmMongoUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMongoLabelsSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentOneMongoLabelsSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneLabelsSwarmMongoEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentOneMongoLabelsSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneMongoLabelsSwarmUnion$outboundSchema: z.ZodType<
  EnvironmentOneMongoLabelsSwarmUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneMongoLabelsSwarmUnion
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneLabelsSwarmMongoEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMongoLabelsSwarmUnion$ {
  /** @deprecated use `EnvironmentOneMongoLabelsSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneMongoLabelsSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneMongoLabelsSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneMongoLabelsSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneMongoLabelsSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneMongoLabelsSwarmUnion$Outbound;
}

export function environmentOneMongoLabelsSwarmUnionToJSON(
  environmentOneMongoLabelsSwarmUnion: EnvironmentOneMongoLabelsSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneMongoLabelsSwarmUnion$outboundSchema.parse(
      environmentOneMongoLabelsSwarmUnion,
    ),
  );
}

export function environmentOneMongoLabelsSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneMongoLabelsSwarmUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneMongoLabelsSwarmUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneMongoLabelsSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneModeSwarmMongoEnum$inboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneModeSwarmMongoEnum
> = z.nativeEnum(EnvironmentOneModeSwarmMongoEnum);

/** @internal */
export const EnvironmentOneModeSwarmMongoEnum$outboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneModeSwarmMongoEnum
> = EnvironmentOneModeSwarmMongoEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneModeSwarmMongoEnum$ {
  /** @deprecated use `EnvironmentOneModeSwarmMongoEnum$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneModeSwarmMongoEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneModeSwarmMongoEnum$outboundSchema` instead. */
  export const outboundSchema = EnvironmentOneModeSwarmMongoEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneModeSwarmMongoUnion$inboundSchema: z.ZodType<
  EnvironmentOneModeSwarmMongoUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneModeSwarmMongoEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentOneModeSwarmMongoUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneModeSwarmMongoUnion$outboundSchema: z.ZodType<
  EnvironmentOneModeSwarmMongoUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneModeSwarmMongoUnion
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneModeSwarmMongoEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneModeSwarmMongoUnion$ {
  /** @deprecated use `EnvironmentOneModeSwarmMongoUnion$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneModeSwarmMongoUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneModeSwarmMongoUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneModeSwarmMongoUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneModeSwarmMongoUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneModeSwarmMongoUnion$Outbound;
}

export function environmentOneModeSwarmMongoUnionToJSON(
  environmentOneModeSwarmMongoUnion: EnvironmentOneModeSwarmMongoUnion,
): string {
  return JSON.stringify(
    EnvironmentOneModeSwarmMongoUnion$outboundSchema.parse(
      environmentOneModeSwarmMongoUnion,
    ),
  );
}

export function environmentOneModeSwarmMongoUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneModeSwarmMongoUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentOneModeSwarmMongoUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneModeSwarmMongoUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMongoModeSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentOneMongoModeSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneModeSwarmMongoEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentOneMongoModeSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneMongoModeSwarmUnion$outboundSchema: z.ZodType<
  EnvironmentOneMongoModeSwarmUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneMongoModeSwarmUnion
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneModeSwarmMongoEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMongoModeSwarmUnion$ {
  /** @deprecated use `EnvironmentOneMongoModeSwarmUnion$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneMongoModeSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneMongoModeSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneMongoModeSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneMongoModeSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneMongoModeSwarmUnion$Outbound;
}

export function environmentOneMongoModeSwarmUnionToJSON(
  environmentOneMongoModeSwarmUnion: EnvironmentOneMongoModeSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneMongoModeSwarmUnion$outboundSchema.parse(
      environmentOneMongoModeSwarmUnion,
    ),
  );
}

export function environmentOneMongoModeSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneMongoModeSwarmUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentOneMongoModeSwarmUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneMongoModeSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneNetworkSwarmMongoEnum$inboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneNetworkSwarmMongoEnum
> = z.nativeEnum(EnvironmentOneNetworkSwarmMongoEnum);

/** @internal */
export const EnvironmentOneNetworkSwarmMongoEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneNetworkSwarmMongoEnum> =
    EnvironmentOneNetworkSwarmMongoEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneNetworkSwarmMongoEnum$ {
  /** @deprecated use `EnvironmentOneNetworkSwarmMongoEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneNetworkSwarmMongoEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneNetworkSwarmMongoEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneNetworkSwarmMongoEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneNetworkSwarmMongoUnion$inboundSchema: z.ZodType<
  EnvironmentOneNetworkSwarmMongoUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneNetworkSwarmMongoEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentOneNetworkSwarmMongoUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneNetworkSwarmMongoUnion$outboundSchema: z.ZodType<
  EnvironmentOneNetworkSwarmMongoUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneNetworkSwarmMongoUnion
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneNetworkSwarmMongoEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneNetworkSwarmMongoUnion$ {
  /** @deprecated use `EnvironmentOneNetworkSwarmMongoUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneNetworkSwarmMongoUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneNetworkSwarmMongoUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneNetworkSwarmMongoUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneNetworkSwarmMongoUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneNetworkSwarmMongoUnion$Outbound;
}

export function environmentOneNetworkSwarmMongoUnionToJSON(
  environmentOneNetworkSwarmMongoUnion: EnvironmentOneNetworkSwarmMongoUnion,
): string {
  return JSON.stringify(
    EnvironmentOneNetworkSwarmMongoUnion$outboundSchema.parse(
      environmentOneNetworkSwarmMongoUnion,
    ),
  );
}

export function environmentOneNetworkSwarmMongoUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneNetworkSwarmMongoUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneNetworkSwarmMongoUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneNetworkSwarmMongoUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMongoNetworkSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentOneMongoNetworkSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneNetworkSwarmMongoEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentOneMongoNetworkSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneMongoNetworkSwarmUnion$outboundSchema: z.ZodType<
  EnvironmentOneMongoNetworkSwarmUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneMongoNetworkSwarmUnion
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneNetworkSwarmMongoEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMongoNetworkSwarmUnion$ {
  /** @deprecated use `EnvironmentOneMongoNetworkSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneMongoNetworkSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneMongoNetworkSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneMongoNetworkSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneMongoNetworkSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneMongoNetworkSwarmUnion$Outbound;
}

export function environmentOneMongoNetworkSwarmUnionToJSON(
  environmentOneMongoNetworkSwarmUnion: EnvironmentOneMongoNetworkSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneMongoNetworkSwarmUnion$outboundSchema.parse(
      environmentOneMongoNetworkSwarmUnion,
    ),
  );
}

export function environmentOneMongoNetworkSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneMongoNetworkSwarmUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneMongoNetworkSwarmUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneMongoNetworkSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOnePlacementSwarmMongoEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOnePlacementSwarmMongoEnum> = z.nativeEnum(
    EnvironmentOnePlacementSwarmMongoEnum,
  );

/** @internal */
export const EnvironmentOnePlacementSwarmMongoEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOnePlacementSwarmMongoEnum> =
    EnvironmentOnePlacementSwarmMongoEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOnePlacementSwarmMongoEnum$ {
  /** @deprecated use `EnvironmentOnePlacementSwarmMongoEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOnePlacementSwarmMongoEnum$inboundSchema;
  /** @deprecated use `EnvironmentOnePlacementSwarmMongoEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOnePlacementSwarmMongoEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOnePlacementSwarmMongoUnion$inboundSchema: z.ZodType<
  EnvironmentOnePlacementSwarmMongoUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOnePlacementSwarmMongoEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentOnePlacementSwarmMongoUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOnePlacementSwarmMongoUnion$outboundSchema: z.ZodType<
  EnvironmentOnePlacementSwarmMongoUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOnePlacementSwarmMongoUnion
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOnePlacementSwarmMongoEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOnePlacementSwarmMongoUnion$ {
  /** @deprecated use `EnvironmentOnePlacementSwarmMongoUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOnePlacementSwarmMongoUnion$inboundSchema;
  /** @deprecated use `EnvironmentOnePlacementSwarmMongoUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOnePlacementSwarmMongoUnion$outboundSchema;
  /** @deprecated use `EnvironmentOnePlacementSwarmMongoUnion$Outbound` instead. */
  export type Outbound = EnvironmentOnePlacementSwarmMongoUnion$Outbound;
}

export function environmentOnePlacementSwarmMongoUnionToJSON(
  environmentOnePlacementSwarmMongoUnion:
    EnvironmentOnePlacementSwarmMongoUnion,
): string {
  return JSON.stringify(
    EnvironmentOnePlacementSwarmMongoUnion$outboundSchema.parse(
      environmentOnePlacementSwarmMongoUnion,
    ),
  );
}

export function environmentOnePlacementSwarmMongoUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOnePlacementSwarmMongoUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOnePlacementSwarmMongoUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOnePlacementSwarmMongoUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMongoPlacementSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentOneMongoPlacementSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOnePlacementSwarmMongoEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentOneMongoPlacementSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneMongoPlacementSwarmUnion$outboundSchema: z.ZodType<
  EnvironmentOneMongoPlacementSwarmUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneMongoPlacementSwarmUnion
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOnePlacementSwarmMongoEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMongoPlacementSwarmUnion$ {
  /** @deprecated use `EnvironmentOneMongoPlacementSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneMongoPlacementSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneMongoPlacementSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneMongoPlacementSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneMongoPlacementSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneMongoPlacementSwarmUnion$Outbound;
}

export function environmentOneMongoPlacementSwarmUnionToJSON(
  environmentOneMongoPlacementSwarmUnion:
    EnvironmentOneMongoPlacementSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneMongoPlacementSwarmUnion$outboundSchema.parse(
      environmentOneMongoPlacementSwarmUnion,
    ),
  );
}

export function environmentOneMongoPlacementSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneMongoPlacementSwarmUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneMongoPlacementSwarmUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneMongoPlacementSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneRestartPolicySwarmMongoEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneRestartPolicySwarmMongoEnum> = z
    .nativeEnum(EnvironmentOneRestartPolicySwarmMongoEnum);

/** @internal */
export const EnvironmentOneRestartPolicySwarmMongoEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneRestartPolicySwarmMongoEnum> =
    EnvironmentOneRestartPolicySwarmMongoEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRestartPolicySwarmMongoEnum$ {
  /** @deprecated use `EnvironmentOneRestartPolicySwarmMongoEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRestartPolicySwarmMongoEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneRestartPolicySwarmMongoEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRestartPolicySwarmMongoEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneRestartPolicySwarmMongoUnion$inboundSchema:
  z.ZodType<EnvironmentOneRestartPolicySwarmMongoUnion, z.ZodTypeDef, unknown> =
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneRestartPolicySwarmMongoEnum$inboundSchema,
    ]);

/** @internal */
export type EnvironmentOneRestartPolicySwarmMongoUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneRestartPolicySwarmMongoUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneRestartPolicySwarmMongoUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneRestartPolicySwarmMongoUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneRestartPolicySwarmMongoEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRestartPolicySwarmMongoUnion$ {
  /** @deprecated use `EnvironmentOneRestartPolicySwarmMongoUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRestartPolicySwarmMongoUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneRestartPolicySwarmMongoUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRestartPolicySwarmMongoUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneRestartPolicySwarmMongoUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneRestartPolicySwarmMongoUnion$Outbound;
}

export function environmentOneRestartPolicySwarmMongoUnionToJSON(
  environmentOneRestartPolicySwarmMongoUnion:
    EnvironmentOneRestartPolicySwarmMongoUnion,
): string {
  return JSON.stringify(
    EnvironmentOneRestartPolicySwarmMongoUnion$outboundSchema.parse(
      environmentOneRestartPolicySwarmMongoUnion,
    ),
  );
}

export function environmentOneRestartPolicySwarmMongoUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneRestartPolicySwarmMongoUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneRestartPolicySwarmMongoUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneRestartPolicySwarmMongoUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMongoRestartPolicySwarmUnion$inboundSchema:
  z.ZodType<EnvironmentOneMongoRestartPolicySwarmUnion, z.ZodTypeDef, unknown> =
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneRestartPolicySwarmMongoEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]);

/** @internal */
export type EnvironmentOneMongoRestartPolicySwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneMongoRestartPolicySwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneMongoRestartPolicySwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneMongoRestartPolicySwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneRestartPolicySwarmMongoEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMongoRestartPolicySwarmUnion$ {
  /** @deprecated use `EnvironmentOneMongoRestartPolicySwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneMongoRestartPolicySwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneMongoRestartPolicySwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneMongoRestartPolicySwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneMongoRestartPolicySwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneMongoRestartPolicySwarmUnion$Outbound;
}

export function environmentOneMongoRestartPolicySwarmUnionToJSON(
  environmentOneMongoRestartPolicySwarmUnion:
    EnvironmentOneMongoRestartPolicySwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneMongoRestartPolicySwarmUnion$outboundSchema.parse(
      environmentOneMongoRestartPolicySwarmUnion,
    ),
  );
}

export function environmentOneMongoRestartPolicySwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneMongoRestartPolicySwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneMongoRestartPolicySwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneMongoRestartPolicySwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneRollbackConfigSwarmMongoEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneRollbackConfigSwarmMongoEnum> = z
    .nativeEnum(EnvironmentOneRollbackConfigSwarmMongoEnum);

/** @internal */
export const EnvironmentOneRollbackConfigSwarmMongoEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneRollbackConfigSwarmMongoEnum> =
    EnvironmentOneRollbackConfigSwarmMongoEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRollbackConfigSwarmMongoEnum$ {
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmMongoEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRollbackConfigSwarmMongoEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmMongoEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRollbackConfigSwarmMongoEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneRollbackConfigSwarmMongoUnion$inboundSchema:
  z.ZodType<
    EnvironmentOneRollbackConfigSwarmMongoUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneRollbackConfigSwarmMongoEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentOneRollbackConfigSwarmMongoUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneRollbackConfigSwarmMongoUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneRollbackConfigSwarmMongoUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneRollbackConfigSwarmMongoUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneRollbackConfigSwarmMongoEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRollbackConfigSwarmMongoUnion$ {
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmMongoUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRollbackConfigSwarmMongoUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmMongoUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRollbackConfigSwarmMongoUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmMongoUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneRollbackConfigSwarmMongoUnion$Outbound;
}

export function environmentOneRollbackConfigSwarmMongoUnionToJSON(
  environmentOneRollbackConfigSwarmMongoUnion:
    EnvironmentOneRollbackConfigSwarmMongoUnion,
): string {
  return JSON.stringify(
    EnvironmentOneRollbackConfigSwarmMongoUnion$outboundSchema.parse(
      environmentOneRollbackConfigSwarmMongoUnion,
    ),
  );
}

export function environmentOneRollbackConfigSwarmMongoUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneRollbackConfigSwarmMongoUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneRollbackConfigSwarmMongoUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneRollbackConfigSwarmMongoUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMongoRollbackConfigSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentOneMongoRollbackConfigSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneRollbackConfigSwarmMongoEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentOneMongoRollbackConfigSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneMongoRollbackConfigSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneMongoRollbackConfigSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneMongoRollbackConfigSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneRollbackConfigSwarmMongoEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMongoRollbackConfigSwarmUnion$ {
  /** @deprecated use `EnvironmentOneMongoRollbackConfigSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneMongoRollbackConfigSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneMongoRollbackConfigSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneMongoRollbackConfigSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneMongoRollbackConfigSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneMongoRollbackConfigSwarmUnion$Outbound;
}

export function environmentOneMongoRollbackConfigSwarmUnionToJSON(
  environmentOneMongoRollbackConfigSwarmUnion:
    EnvironmentOneMongoRollbackConfigSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneMongoRollbackConfigSwarmUnion$outboundSchema.parse(
      environmentOneMongoRollbackConfigSwarmUnion,
    ),
  );
}

export function environmentOneMongoRollbackConfigSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneMongoRollbackConfigSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneMongoRollbackConfigSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneMongoRollbackConfigSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneUpdateConfigSwarmMongoEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneUpdateConfigSwarmMongoEnum> = z
    .nativeEnum(EnvironmentOneUpdateConfigSwarmMongoEnum);

/** @internal */
export const EnvironmentOneUpdateConfigSwarmMongoEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneUpdateConfigSwarmMongoEnum> =
    EnvironmentOneUpdateConfigSwarmMongoEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneUpdateConfigSwarmMongoEnum$ {
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmMongoEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneUpdateConfigSwarmMongoEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmMongoEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneUpdateConfigSwarmMongoEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneUpdateConfigSwarmMongoUnion$inboundSchema: z.ZodType<
  EnvironmentOneUpdateConfigSwarmMongoUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneUpdateConfigSwarmMongoEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentOneUpdateConfigSwarmMongoUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneUpdateConfigSwarmMongoUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneUpdateConfigSwarmMongoUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneUpdateConfigSwarmMongoUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneUpdateConfigSwarmMongoEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneUpdateConfigSwarmMongoUnion$ {
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmMongoUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneUpdateConfigSwarmMongoUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmMongoUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneUpdateConfigSwarmMongoUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmMongoUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneUpdateConfigSwarmMongoUnion$Outbound;
}

export function environmentOneUpdateConfigSwarmMongoUnionToJSON(
  environmentOneUpdateConfigSwarmMongoUnion:
    EnvironmentOneUpdateConfigSwarmMongoUnion,
): string {
  return JSON.stringify(
    EnvironmentOneUpdateConfigSwarmMongoUnion$outboundSchema.parse(
      environmentOneUpdateConfigSwarmMongoUnion,
    ),
  );
}

export function environmentOneUpdateConfigSwarmMongoUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneUpdateConfigSwarmMongoUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneUpdateConfigSwarmMongoUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneUpdateConfigSwarmMongoUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMongoUpdateConfigSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentOneMongoUpdateConfigSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneUpdateConfigSwarmMongoEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentOneMongoUpdateConfigSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneMongoUpdateConfigSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneMongoUpdateConfigSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneMongoUpdateConfigSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneUpdateConfigSwarmMongoEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMongoUpdateConfigSwarmUnion$ {
  /** @deprecated use `EnvironmentOneMongoUpdateConfigSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneMongoUpdateConfigSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneMongoUpdateConfigSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneMongoUpdateConfigSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneMongoUpdateConfigSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneMongoUpdateConfigSwarmUnion$Outbound;
}

export function environmentOneMongoUpdateConfigSwarmUnionToJSON(
  environmentOneMongoUpdateConfigSwarmUnion:
    EnvironmentOneMongoUpdateConfigSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneMongoUpdateConfigSwarmUnion$outboundSchema.parse(
      environmentOneMongoUpdateConfigSwarmUnion,
    ),
  );
}

export function environmentOneMongoUpdateConfigSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneMongoUpdateConfigSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneMongoUpdateConfigSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneMongoUpdateConfigSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMongo$inboundSchema: z.ZodType<
  EnvironmentOneMongo,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  applicationStatus: EnvironmentOneMongoApplicationStatus$inboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databasePassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneHealthCheckSwarmMongoEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  labelsSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneLabelsSwarmMongoEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneModeSwarmMongoEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  mongoId: z.string(),
  name: z.string(),
  networkSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneNetworkSwarmMongoEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  placementSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOnePlacementSwarmMongoEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  replicaSets: z.nullable(z.boolean()),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneRestartPolicySwarmMongoEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  rollbackConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneRollbackConfigSwarmMongoEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneUpdateConfigSwarmMongoEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
});

/** @internal */
export type EnvironmentOneMongo$Outbound = {
  appName: string;
  applicationStatus: string;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databasePassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  labelsSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  mongoId: string;
  name: string;
  networkSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  placementSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  replicaSets: boolean | null;
  replicas: number;
  restartPolicySwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  rollbackConfigSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  serverId: string | null;
  updateConfigSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
};

/** @internal */
export const EnvironmentOneMongo$outboundSchema: z.ZodType<
  EnvironmentOneMongo$Outbound,
  z.ZodTypeDef,
  EnvironmentOneMongo
> = z.object({
  appName: z.string(),
  applicationStatus: EnvironmentOneMongoApplicationStatus$outboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databasePassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneHealthCheckSwarmMongoEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  labelsSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneLabelsSwarmMongoEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneModeSwarmMongoEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  mongoId: z.string(),
  name: z.string(),
  networkSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneNetworkSwarmMongoEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  placementSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOnePlacementSwarmMongoEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  replicaSets: z.nullable(z.boolean()),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneRestartPolicySwarmMongoEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  rollbackConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneRollbackConfigSwarmMongoEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneUpdateConfigSwarmMongoEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMongo$ {
  /** @deprecated use `EnvironmentOneMongo$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneMongo$inboundSchema;
  /** @deprecated use `EnvironmentOneMongo$outboundSchema` instead. */
  export const outboundSchema = EnvironmentOneMongo$outboundSchema;
  /** @deprecated use `EnvironmentOneMongo$Outbound` instead. */
  export type Outbound = EnvironmentOneMongo$Outbound;
}

export function environmentOneMongoToJSON(
  environmentOneMongo: EnvironmentOneMongo,
): string {
  return JSON.stringify(
    EnvironmentOneMongo$outboundSchema.parse(environmentOneMongo),
  );
}

export function environmentOneMongoFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneMongo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentOneMongo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneMongo' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMysqlApplicationStatus$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneMysqlApplicationStatus> = z.nativeEnum(
    EnvironmentOneMysqlApplicationStatus,
  );

/** @internal */
export const EnvironmentOneMysqlApplicationStatus$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneMysqlApplicationStatus> =
    EnvironmentOneMysqlApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMysqlApplicationStatus$ {
  /** @deprecated use `EnvironmentOneMysqlApplicationStatus$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneMysqlApplicationStatus$inboundSchema;
  /** @deprecated use `EnvironmentOneMysqlApplicationStatus$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneMysqlApplicationStatus$outboundSchema;
}

/** @internal */
export const EnvironmentOneHealthCheckSwarmMysqlEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneHealthCheckSwarmMysqlEnum> = z
    .nativeEnum(EnvironmentOneHealthCheckSwarmMysqlEnum);

/** @internal */
export const EnvironmentOneHealthCheckSwarmMysqlEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneHealthCheckSwarmMysqlEnum> =
    EnvironmentOneHealthCheckSwarmMysqlEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneHealthCheckSwarmMysqlEnum$ {
  /** @deprecated use `EnvironmentOneHealthCheckSwarmMysqlEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneHealthCheckSwarmMysqlEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneHealthCheckSwarmMysqlEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneHealthCheckSwarmMysqlEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneHealthCheckSwarmMysqlUnion$inboundSchema: z.ZodType<
  EnvironmentOneHealthCheckSwarmMysqlUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneHealthCheckSwarmMysqlEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentOneHealthCheckSwarmMysqlUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneHealthCheckSwarmMysqlUnion$outboundSchema: z.ZodType<
  EnvironmentOneHealthCheckSwarmMysqlUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneHealthCheckSwarmMysqlUnion
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneHealthCheckSwarmMysqlEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneHealthCheckSwarmMysqlUnion$ {
  /** @deprecated use `EnvironmentOneHealthCheckSwarmMysqlUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneHealthCheckSwarmMysqlUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneHealthCheckSwarmMysqlUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneHealthCheckSwarmMysqlUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneHealthCheckSwarmMysqlUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneHealthCheckSwarmMysqlUnion$Outbound;
}

export function environmentOneHealthCheckSwarmMysqlUnionToJSON(
  environmentOneHealthCheckSwarmMysqlUnion:
    EnvironmentOneHealthCheckSwarmMysqlUnion,
): string {
  return JSON.stringify(
    EnvironmentOneHealthCheckSwarmMysqlUnion$outboundSchema.parse(
      environmentOneHealthCheckSwarmMysqlUnion,
    ),
  );
}

export function environmentOneHealthCheckSwarmMysqlUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneHealthCheckSwarmMysqlUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneHealthCheckSwarmMysqlUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneHealthCheckSwarmMysqlUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMysqlHealthCheckSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentOneMysqlHealthCheckSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneHealthCheckSwarmMysqlEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentOneMysqlHealthCheckSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneMysqlHealthCheckSwarmUnion$outboundSchema: z.ZodType<
  EnvironmentOneMysqlHealthCheckSwarmUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneMysqlHealthCheckSwarmUnion
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneHealthCheckSwarmMysqlEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMysqlHealthCheckSwarmUnion$ {
  /** @deprecated use `EnvironmentOneMysqlHealthCheckSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneMysqlHealthCheckSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneMysqlHealthCheckSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneMysqlHealthCheckSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneMysqlHealthCheckSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneMysqlHealthCheckSwarmUnion$Outbound;
}

export function environmentOneMysqlHealthCheckSwarmUnionToJSON(
  environmentOneMysqlHealthCheckSwarmUnion:
    EnvironmentOneMysqlHealthCheckSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneMysqlHealthCheckSwarmUnion$outboundSchema.parse(
      environmentOneMysqlHealthCheckSwarmUnion,
    ),
  );
}

export function environmentOneMysqlHealthCheckSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneMysqlHealthCheckSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneMysqlHealthCheckSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneMysqlHealthCheckSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneLabelsSwarmMysqlEnum$inboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneLabelsSwarmMysqlEnum
> = z.nativeEnum(EnvironmentOneLabelsSwarmMysqlEnum);

/** @internal */
export const EnvironmentOneLabelsSwarmMysqlEnum$outboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneLabelsSwarmMysqlEnum
> = EnvironmentOneLabelsSwarmMysqlEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneLabelsSwarmMysqlEnum$ {
  /** @deprecated use `EnvironmentOneLabelsSwarmMysqlEnum$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneLabelsSwarmMysqlEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneLabelsSwarmMysqlEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneLabelsSwarmMysqlEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneLabelsSwarmMysqlUnion$inboundSchema: z.ZodType<
  EnvironmentOneLabelsSwarmMysqlUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneLabelsSwarmMysqlEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentOneLabelsSwarmMysqlUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneLabelsSwarmMysqlUnion$outboundSchema: z.ZodType<
  EnvironmentOneLabelsSwarmMysqlUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneLabelsSwarmMysqlUnion
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneLabelsSwarmMysqlEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneLabelsSwarmMysqlUnion$ {
  /** @deprecated use `EnvironmentOneLabelsSwarmMysqlUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneLabelsSwarmMysqlUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneLabelsSwarmMysqlUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneLabelsSwarmMysqlUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneLabelsSwarmMysqlUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneLabelsSwarmMysqlUnion$Outbound;
}

export function environmentOneLabelsSwarmMysqlUnionToJSON(
  environmentOneLabelsSwarmMysqlUnion: EnvironmentOneLabelsSwarmMysqlUnion,
): string {
  return JSON.stringify(
    EnvironmentOneLabelsSwarmMysqlUnion$outboundSchema.parse(
      environmentOneLabelsSwarmMysqlUnion,
    ),
  );
}

export function environmentOneLabelsSwarmMysqlUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneLabelsSwarmMysqlUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneLabelsSwarmMysqlUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneLabelsSwarmMysqlUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMysqlLabelsSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentOneMysqlLabelsSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneLabelsSwarmMysqlEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentOneMysqlLabelsSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneMysqlLabelsSwarmUnion$outboundSchema: z.ZodType<
  EnvironmentOneMysqlLabelsSwarmUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneMysqlLabelsSwarmUnion
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneLabelsSwarmMysqlEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMysqlLabelsSwarmUnion$ {
  /** @deprecated use `EnvironmentOneMysqlLabelsSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneMysqlLabelsSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneMysqlLabelsSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneMysqlLabelsSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneMysqlLabelsSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneMysqlLabelsSwarmUnion$Outbound;
}

export function environmentOneMysqlLabelsSwarmUnionToJSON(
  environmentOneMysqlLabelsSwarmUnion: EnvironmentOneMysqlLabelsSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneMysqlLabelsSwarmUnion$outboundSchema.parse(
      environmentOneMysqlLabelsSwarmUnion,
    ),
  );
}

export function environmentOneMysqlLabelsSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneMysqlLabelsSwarmUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneMysqlLabelsSwarmUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneMysqlLabelsSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneModeSwarmMysqlEnum$inboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneModeSwarmMysqlEnum
> = z.nativeEnum(EnvironmentOneModeSwarmMysqlEnum);

/** @internal */
export const EnvironmentOneModeSwarmMysqlEnum$outboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneModeSwarmMysqlEnum
> = EnvironmentOneModeSwarmMysqlEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneModeSwarmMysqlEnum$ {
  /** @deprecated use `EnvironmentOneModeSwarmMysqlEnum$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneModeSwarmMysqlEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneModeSwarmMysqlEnum$outboundSchema` instead. */
  export const outboundSchema = EnvironmentOneModeSwarmMysqlEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneModeSwarmMysqlUnion$inboundSchema: z.ZodType<
  EnvironmentOneModeSwarmMysqlUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneModeSwarmMysqlEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentOneModeSwarmMysqlUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneModeSwarmMysqlUnion$outboundSchema: z.ZodType<
  EnvironmentOneModeSwarmMysqlUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneModeSwarmMysqlUnion
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneModeSwarmMysqlEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneModeSwarmMysqlUnion$ {
  /** @deprecated use `EnvironmentOneModeSwarmMysqlUnion$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneModeSwarmMysqlUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneModeSwarmMysqlUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneModeSwarmMysqlUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneModeSwarmMysqlUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneModeSwarmMysqlUnion$Outbound;
}

export function environmentOneModeSwarmMysqlUnionToJSON(
  environmentOneModeSwarmMysqlUnion: EnvironmentOneModeSwarmMysqlUnion,
): string {
  return JSON.stringify(
    EnvironmentOneModeSwarmMysqlUnion$outboundSchema.parse(
      environmentOneModeSwarmMysqlUnion,
    ),
  );
}

export function environmentOneModeSwarmMysqlUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneModeSwarmMysqlUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentOneModeSwarmMysqlUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneModeSwarmMysqlUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMysqlModeSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentOneMysqlModeSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneModeSwarmMysqlEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentOneMysqlModeSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneMysqlModeSwarmUnion$outboundSchema: z.ZodType<
  EnvironmentOneMysqlModeSwarmUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneMysqlModeSwarmUnion
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneModeSwarmMysqlEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMysqlModeSwarmUnion$ {
  /** @deprecated use `EnvironmentOneMysqlModeSwarmUnion$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneMysqlModeSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneMysqlModeSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneMysqlModeSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneMysqlModeSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneMysqlModeSwarmUnion$Outbound;
}

export function environmentOneMysqlModeSwarmUnionToJSON(
  environmentOneMysqlModeSwarmUnion: EnvironmentOneMysqlModeSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneMysqlModeSwarmUnion$outboundSchema.parse(
      environmentOneMysqlModeSwarmUnion,
    ),
  );
}

export function environmentOneMysqlModeSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneMysqlModeSwarmUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentOneMysqlModeSwarmUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneMysqlModeSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneNetworkSwarmMysqlEnum$inboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneNetworkSwarmMysqlEnum
> = z.nativeEnum(EnvironmentOneNetworkSwarmMysqlEnum);

/** @internal */
export const EnvironmentOneNetworkSwarmMysqlEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneNetworkSwarmMysqlEnum> =
    EnvironmentOneNetworkSwarmMysqlEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneNetworkSwarmMysqlEnum$ {
  /** @deprecated use `EnvironmentOneNetworkSwarmMysqlEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneNetworkSwarmMysqlEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneNetworkSwarmMysqlEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneNetworkSwarmMysqlEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneNetworkSwarmMysqlUnion$inboundSchema: z.ZodType<
  EnvironmentOneNetworkSwarmMysqlUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneNetworkSwarmMysqlEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentOneNetworkSwarmMysqlUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneNetworkSwarmMysqlUnion$outboundSchema: z.ZodType<
  EnvironmentOneNetworkSwarmMysqlUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneNetworkSwarmMysqlUnion
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneNetworkSwarmMysqlEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneNetworkSwarmMysqlUnion$ {
  /** @deprecated use `EnvironmentOneNetworkSwarmMysqlUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneNetworkSwarmMysqlUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneNetworkSwarmMysqlUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneNetworkSwarmMysqlUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneNetworkSwarmMysqlUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneNetworkSwarmMysqlUnion$Outbound;
}

export function environmentOneNetworkSwarmMysqlUnionToJSON(
  environmentOneNetworkSwarmMysqlUnion: EnvironmentOneNetworkSwarmMysqlUnion,
): string {
  return JSON.stringify(
    EnvironmentOneNetworkSwarmMysqlUnion$outboundSchema.parse(
      environmentOneNetworkSwarmMysqlUnion,
    ),
  );
}

export function environmentOneNetworkSwarmMysqlUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneNetworkSwarmMysqlUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneNetworkSwarmMysqlUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneNetworkSwarmMysqlUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMysqlNetworkSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentOneMysqlNetworkSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneNetworkSwarmMysqlEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentOneMysqlNetworkSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneMysqlNetworkSwarmUnion$outboundSchema: z.ZodType<
  EnvironmentOneMysqlNetworkSwarmUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneMysqlNetworkSwarmUnion
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneNetworkSwarmMysqlEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMysqlNetworkSwarmUnion$ {
  /** @deprecated use `EnvironmentOneMysqlNetworkSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneMysqlNetworkSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneMysqlNetworkSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneMysqlNetworkSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneMysqlNetworkSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneMysqlNetworkSwarmUnion$Outbound;
}

export function environmentOneMysqlNetworkSwarmUnionToJSON(
  environmentOneMysqlNetworkSwarmUnion: EnvironmentOneMysqlNetworkSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneMysqlNetworkSwarmUnion$outboundSchema.parse(
      environmentOneMysqlNetworkSwarmUnion,
    ),
  );
}

export function environmentOneMysqlNetworkSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneMysqlNetworkSwarmUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneMysqlNetworkSwarmUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneMysqlNetworkSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOnePlacementSwarmMysqlEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOnePlacementSwarmMysqlEnum> = z.nativeEnum(
    EnvironmentOnePlacementSwarmMysqlEnum,
  );

/** @internal */
export const EnvironmentOnePlacementSwarmMysqlEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOnePlacementSwarmMysqlEnum> =
    EnvironmentOnePlacementSwarmMysqlEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOnePlacementSwarmMysqlEnum$ {
  /** @deprecated use `EnvironmentOnePlacementSwarmMysqlEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOnePlacementSwarmMysqlEnum$inboundSchema;
  /** @deprecated use `EnvironmentOnePlacementSwarmMysqlEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOnePlacementSwarmMysqlEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOnePlacementSwarmMysqlUnion$inboundSchema: z.ZodType<
  EnvironmentOnePlacementSwarmMysqlUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOnePlacementSwarmMysqlEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentOnePlacementSwarmMysqlUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOnePlacementSwarmMysqlUnion$outboundSchema: z.ZodType<
  EnvironmentOnePlacementSwarmMysqlUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOnePlacementSwarmMysqlUnion
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOnePlacementSwarmMysqlEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOnePlacementSwarmMysqlUnion$ {
  /** @deprecated use `EnvironmentOnePlacementSwarmMysqlUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOnePlacementSwarmMysqlUnion$inboundSchema;
  /** @deprecated use `EnvironmentOnePlacementSwarmMysqlUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOnePlacementSwarmMysqlUnion$outboundSchema;
  /** @deprecated use `EnvironmentOnePlacementSwarmMysqlUnion$Outbound` instead. */
  export type Outbound = EnvironmentOnePlacementSwarmMysqlUnion$Outbound;
}

export function environmentOnePlacementSwarmMysqlUnionToJSON(
  environmentOnePlacementSwarmMysqlUnion:
    EnvironmentOnePlacementSwarmMysqlUnion,
): string {
  return JSON.stringify(
    EnvironmentOnePlacementSwarmMysqlUnion$outboundSchema.parse(
      environmentOnePlacementSwarmMysqlUnion,
    ),
  );
}

export function environmentOnePlacementSwarmMysqlUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOnePlacementSwarmMysqlUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOnePlacementSwarmMysqlUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOnePlacementSwarmMysqlUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMysqlPlacementSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentOneMysqlPlacementSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOnePlacementSwarmMysqlEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentOneMysqlPlacementSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneMysqlPlacementSwarmUnion$outboundSchema: z.ZodType<
  EnvironmentOneMysqlPlacementSwarmUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneMysqlPlacementSwarmUnion
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOnePlacementSwarmMysqlEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMysqlPlacementSwarmUnion$ {
  /** @deprecated use `EnvironmentOneMysqlPlacementSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneMysqlPlacementSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneMysqlPlacementSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneMysqlPlacementSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneMysqlPlacementSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneMysqlPlacementSwarmUnion$Outbound;
}

export function environmentOneMysqlPlacementSwarmUnionToJSON(
  environmentOneMysqlPlacementSwarmUnion:
    EnvironmentOneMysqlPlacementSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneMysqlPlacementSwarmUnion$outboundSchema.parse(
      environmentOneMysqlPlacementSwarmUnion,
    ),
  );
}

export function environmentOneMysqlPlacementSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneMysqlPlacementSwarmUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneMysqlPlacementSwarmUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneMysqlPlacementSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneRestartPolicySwarmMysqlEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneRestartPolicySwarmMysqlEnum> = z
    .nativeEnum(EnvironmentOneRestartPolicySwarmMysqlEnum);

/** @internal */
export const EnvironmentOneRestartPolicySwarmMysqlEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneRestartPolicySwarmMysqlEnum> =
    EnvironmentOneRestartPolicySwarmMysqlEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRestartPolicySwarmMysqlEnum$ {
  /** @deprecated use `EnvironmentOneRestartPolicySwarmMysqlEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRestartPolicySwarmMysqlEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneRestartPolicySwarmMysqlEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRestartPolicySwarmMysqlEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneRestartPolicySwarmMysqlUnion$inboundSchema:
  z.ZodType<EnvironmentOneRestartPolicySwarmMysqlUnion, z.ZodTypeDef, unknown> =
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneRestartPolicySwarmMysqlEnum$inboundSchema,
    ]);

/** @internal */
export type EnvironmentOneRestartPolicySwarmMysqlUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneRestartPolicySwarmMysqlUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneRestartPolicySwarmMysqlUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneRestartPolicySwarmMysqlUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneRestartPolicySwarmMysqlEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRestartPolicySwarmMysqlUnion$ {
  /** @deprecated use `EnvironmentOneRestartPolicySwarmMysqlUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRestartPolicySwarmMysqlUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneRestartPolicySwarmMysqlUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRestartPolicySwarmMysqlUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneRestartPolicySwarmMysqlUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneRestartPolicySwarmMysqlUnion$Outbound;
}

export function environmentOneRestartPolicySwarmMysqlUnionToJSON(
  environmentOneRestartPolicySwarmMysqlUnion:
    EnvironmentOneRestartPolicySwarmMysqlUnion,
): string {
  return JSON.stringify(
    EnvironmentOneRestartPolicySwarmMysqlUnion$outboundSchema.parse(
      environmentOneRestartPolicySwarmMysqlUnion,
    ),
  );
}

export function environmentOneRestartPolicySwarmMysqlUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneRestartPolicySwarmMysqlUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneRestartPolicySwarmMysqlUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneRestartPolicySwarmMysqlUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMysqlRestartPolicySwarmUnion$inboundSchema:
  z.ZodType<EnvironmentOneMysqlRestartPolicySwarmUnion, z.ZodTypeDef, unknown> =
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneRestartPolicySwarmMysqlEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]);

/** @internal */
export type EnvironmentOneMysqlRestartPolicySwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneMysqlRestartPolicySwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneMysqlRestartPolicySwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneMysqlRestartPolicySwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneRestartPolicySwarmMysqlEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMysqlRestartPolicySwarmUnion$ {
  /** @deprecated use `EnvironmentOneMysqlRestartPolicySwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneMysqlRestartPolicySwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneMysqlRestartPolicySwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneMysqlRestartPolicySwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneMysqlRestartPolicySwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneMysqlRestartPolicySwarmUnion$Outbound;
}

export function environmentOneMysqlRestartPolicySwarmUnionToJSON(
  environmentOneMysqlRestartPolicySwarmUnion:
    EnvironmentOneMysqlRestartPolicySwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneMysqlRestartPolicySwarmUnion$outboundSchema.parse(
      environmentOneMysqlRestartPolicySwarmUnion,
    ),
  );
}

export function environmentOneMysqlRestartPolicySwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneMysqlRestartPolicySwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneMysqlRestartPolicySwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneMysqlRestartPolicySwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneRollbackConfigSwarmMysqlEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneRollbackConfigSwarmMysqlEnum> = z
    .nativeEnum(EnvironmentOneRollbackConfigSwarmMysqlEnum);

/** @internal */
export const EnvironmentOneRollbackConfigSwarmMysqlEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneRollbackConfigSwarmMysqlEnum> =
    EnvironmentOneRollbackConfigSwarmMysqlEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRollbackConfigSwarmMysqlEnum$ {
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmMysqlEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRollbackConfigSwarmMysqlEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmMysqlEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRollbackConfigSwarmMysqlEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneRollbackConfigSwarmMysqlUnion$inboundSchema:
  z.ZodType<
    EnvironmentOneRollbackConfigSwarmMysqlUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneRollbackConfigSwarmMysqlEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentOneRollbackConfigSwarmMysqlUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneRollbackConfigSwarmMysqlUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneRollbackConfigSwarmMysqlUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneRollbackConfigSwarmMysqlUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneRollbackConfigSwarmMysqlEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRollbackConfigSwarmMysqlUnion$ {
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmMysqlUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRollbackConfigSwarmMysqlUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmMysqlUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRollbackConfigSwarmMysqlUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmMysqlUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneRollbackConfigSwarmMysqlUnion$Outbound;
}

export function environmentOneRollbackConfigSwarmMysqlUnionToJSON(
  environmentOneRollbackConfigSwarmMysqlUnion:
    EnvironmentOneRollbackConfigSwarmMysqlUnion,
): string {
  return JSON.stringify(
    EnvironmentOneRollbackConfigSwarmMysqlUnion$outboundSchema.parse(
      environmentOneRollbackConfigSwarmMysqlUnion,
    ),
  );
}

export function environmentOneRollbackConfigSwarmMysqlUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneRollbackConfigSwarmMysqlUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneRollbackConfigSwarmMysqlUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneRollbackConfigSwarmMysqlUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMysqlRollbackConfigSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentOneMysqlRollbackConfigSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneRollbackConfigSwarmMysqlEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentOneMysqlRollbackConfigSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneMysqlRollbackConfigSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneMysqlRollbackConfigSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneMysqlRollbackConfigSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneRollbackConfigSwarmMysqlEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMysqlRollbackConfigSwarmUnion$ {
  /** @deprecated use `EnvironmentOneMysqlRollbackConfigSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneMysqlRollbackConfigSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneMysqlRollbackConfigSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneMysqlRollbackConfigSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneMysqlRollbackConfigSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneMysqlRollbackConfigSwarmUnion$Outbound;
}

export function environmentOneMysqlRollbackConfigSwarmUnionToJSON(
  environmentOneMysqlRollbackConfigSwarmUnion:
    EnvironmentOneMysqlRollbackConfigSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneMysqlRollbackConfigSwarmUnion$outboundSchema.parse(
      environmentOneMysqlRollbackConfigSwarmUnion,
    ),
  );
}

export function environmentOneMysqlRollbackConfigSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneMysqlRollbackConfigSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneMysqlRollbackConfigSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneMysqlRollbackConfigSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneUpdateConfigSwarmMysqlEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneUpdateConfigSwarmMysqlEnum> = z
    .nativeEnum(EnvironmentOneUpdateConfigSwarmMysqlEnum);

/** @internal */
export const EnvironmentOneUpdateConfigSwarmMysqlEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneUpdateConfigSwarmMysqlEnum> =
    EnvironmentOneUpdateConfigSwarmMysqlEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneUpdateConfigSwarmMysqlEnum$ {
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmMysqlEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneUpdateConfigSwarmMysqlEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmMysqlEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneUpdateConfigSwarmMysqlEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneUpdateConfigSwarmMysqlUnion$inboundSchema: z.ZodType<
  EnvironmentOneUpdateConfigSwarmMysqlUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneUpdateConfigSwarmMysqlEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentOneUpdateConfigSwarmMysqlUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneUpdateConfigSwarmMysqlUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneUpdateConfigSwarmMysqlUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneUpdateConfigSwarmMysqlUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneUpdateConfigSwarmMysqlEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneUpdateConfigSwarmMysqlUnion$ {
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmMysqlUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneUpdateConfigSwarmMysqlUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmMysqlUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneUpdateConfigSwarmMysqlUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmMysqlUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneUpdateConfigSwarmMysqlUnion$Outbound;
}

export function environmentOneUpdateConfigSwarmMysqlUnionToJSON(
  environmentOneUpdateConfigSwarmMysqlUnion:
    EnvironmentOneUpdateConfigSwarmMysqlUnion,
): string {
  return JSON.stringify(
    EnvironmentOneUpdateConfigSwarmMysqlUnion$outboundSchema.parse(
      environmentOneUpdateConfigSwarmMysqlUnion,
    ),
  );
}

export function environmentOneUpdateConfigSwarmMysqlUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneUpdateConfigSwarmMysqlUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneUpdateConfigSwarmMysqlUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneUpdateConfigSwarmMysqlUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMysqlUpdateConfigSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentOneMysqlUpdateConfigSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneUpdateConfigSwarmMysqlEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentOneMysqlUpdateConfigSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneMysqlUpdateConfigSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneMysqlUpdateConfigSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneMysqlUpdateConfigSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneUpdateConfigSwarmMysqlEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMysqlUpdateConfigSwarmUnion$ {
  /** @deprecated use `EnvironmentOneMysqlUpdateConfigSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneMysqlUpdateConfigSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneMysqlUpdateConfigSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneMysqlUpdateConfigSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneMysqlUpdateConfigSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneMysqlUpdateConfigSwarmUnion$Outbound;
}

export function environmentOneMysqlUpdateConfigSwarmUnionToJSON(
  environmentOneMysqlUpdateConfigSwarmUnion:
    EnvironmentOneMysqlUpdateConfigSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneMysqlUpdateConfigSwarmUnion$outboundSchema.parse(
      environmentOneMysqlUpdateConfigSwarmUnion,
    ),
  );
}

export function environmentOneMysqlUpdateConfigSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneMysqlUpdateConfigSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneMysqlUpdateConfigSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneMysqlUpdateConfigSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneMysql$inboundSchema: z.ZodType<
  EnvironmentOneMysql,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  applicationStatus: EnvironmentOneMysqlApplicationStatus$inboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databaseName: z.string(),
  databasePassword: z.string(),
  databaseRootPassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneHealthCheckSwarmMysqlEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  labelsSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneLabelsSwarmMysqlEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneModeSwarmMysqlEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  mysqlId: z.string(),
  name: z.string(),
  networkSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneNetworkSwarmMysqlEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  placementSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOnePlacementSwarmMysqlEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneRestartPolicySwarmMysqlEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  rollbackConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneRollbackConfigSwarmMysqlEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneUpdateConfigSwarmMysqlEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
});

/** @internal */
export type EnvironmentOneMysql$Outbound = {
  appName: string;
  applicationStatus: string;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databaseName: string;
  databasePassword: string;
  databaseRootPassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  labelsSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  mysqlId: string;
  name: string;
  networkSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  placementSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  replicas: number;
  restartPolicySwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  rollbackConfigSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  serverId: string | null;
  updateConfigSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
};

/** @internal */
export const EnvironmentOneMysql$outboundSchema: z.ZodType<
  EnvironmentOneMysql$Outbound,
  z.ZodTypeDef,
  EnvironmentOneMysql
> = z.object({
  appName: z.string(),
  applicationStatus: EnvironmentOneMysqlApplicationStatus$outboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databaseName: z.string(),
  databasePassword: z.string(),
  databaseRootPassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneHealthCheckSwarmMysqlEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  labelsSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneLabelsSwarmMysqlEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneModeSwarmMysqlEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  mysqlId: z.string(),
  name: z.string(),
  networkSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneNetworkSwarmMysqlEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  placementSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOnePlacementSwarmMysqlEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneRestartPolicySwarmMysqlEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  rollbackConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneRollbackConfigSwarmMysqlEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneUpdateConfigSwarmMysqlEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneMysql$ {
  /** @deprecated use `EnvironmentOneMysql$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneMysql$inboundSchema;
  /** @deprecated use `EnvironmentOneMysql$outboundSchema` instead. */
  export const outboundSchema = EnvironmentOneMysql$outboundSchema;
  /** @deprecated use `EnvironmentOneMysql$Outbound` instead. */
  export type Outbound = EnvironmentOneMysql$Outbound;
}

export function environmentOneMysqlToJSON(
  environmentOneMysql: EnvironmentOneMysql,
): string {
  return JSON.stringify(
    EnvironmentOneMysql$outboundSchema.parse(environmentOneMysql),
  );
}

export function environmentOneMysqlFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneMysql, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentOneMysql$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneMysql' from JSON`,
  );
}

/** @internal */
export const EnvironmentOnePostgreApplicationStatus$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOnePostgreApplicationStatus> = z.nativeEnum(
    EnvironmentOnePostgreApplicationStatus,
  );

/** @internal */
export const EnvironmentOnePostgreApplicationStatus$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOnePostgreApplicationStatus> =
    EnvironmentOnePostgreApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOnePostgreApplicationStatus$ {
  /** @deprecated use `EnvironmentOnePostgreApplicationStatus$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOnePostgreApplicationStatus$inboundSchema;
  /** @deprecated use `EnvironmentOnePostgreApplicationStatus$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOnePostgreApplicationStatus$outboundSchema;
}

/** @internal */
export const EnvironmentOneHealthCheckSwarmPostgreEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneHealthCheckSwarmPostgreEnum> = z
    .nativeEnum(EnvironmentOneHealthCheckSwarmPostgreEnum);

/** @internal */
export const EnvironmentOneHealthCheckSwarmPostgreEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneHealthCheckSwarmPostgreEnum> =
    EnvironmentOneHealthCheckSwarmPostgreEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneHealthCheckSwarmPostgreEnum$ {
  /** @deprecated use `EnvironmentOneHealthCheckSwarmPostgreEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneHealthCheckSwarmPostgreEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneHealthCheckSwarmPostgreEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneHealthCheckSwarmPostgreEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneHealthCheckSwarmPostgreUnion$inboundSchema:
  z.ZodType<EnvironmentOneHealthCheckSwarmPostgreUnion, z.ZodTypeDef, unknown> =
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneHealthCheckSwarmPostgreEnum$inboundSchema,
    ]);

/** @internal */
export type EnvironmentOneHealthCheckSwarmPostgreUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneHealthCheckSwarmPostgreUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneHealthCheckSwarmPostgreUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneHealthCheckSwarmPostgreUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneHealthCheckSwarmPostgreEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneHealthCheckSwarmPostgreUnion$ {
  /** @deprecated use `EnvironmentOneHealthCheckSwarmPostgreUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneHealthCheckSwarmPostgreUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneHealthCheckSwarmPostgreUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneHealthCheckSwarmPostgreUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneHealthCheckSwarmPostgreUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneHealthCheckSwarmPostgreUnion$Outbound;
}

export function environmentOneHealthCheckSwarmPostgreUnionToJSON(
  environmentOneHealthCheckSwarmPostgreUnion:
    EnvironmentOneHealthCheckSwarmPostgreUnion,
): string {
  return JSON.stringify(
    EnvironmentOneHealthCheckSwarmPostgreUnion$outboundSchema.parse(
      environmentOneHealthCheckSwarmPostgreUnion,
    ),
  );
}

export function environmentOneHealthCheckSwarmPostgreUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneHealthCheckSwarmPostgreUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneHealthCheckSwarmPostgreUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneHealthCheckSwarmPostgreUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOnePostgreHealthCheckSwarmUnion$inboundSchema:
  z.ZodType<EnvironmentOnePostgreHealthCheckSwarmUnion, z.ZodTypeDef, unknown> =
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneHealthCheckSwarmPostgreEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]);

/** @internal */
export type EnvironmentOnePostgreHealthCheckSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOnePostgreHealthCheckSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentOnePostgreHealthCheckSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOnePostgreHealthCheckSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneHealthCheckSwarmPostgreEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOnePostgreHealthCheckSwarmUnion$ {
  /** @deprecated use `EnvironmentOnePostgreHealthCheckSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOnePostgreHealthCheckSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOnePostgreHealthCheckSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOnePostgreHealthCheckSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOnePostgreHealthCheckSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOnePostgreHealthCheckSwarmUnion$Outbound;
}

export function environmentOnePostgreHealthCheckSwarmUnionToJSON(
  environmentOnePostgreHealthCheckSwarmUnion:
    EnvironmentOnePostgreHealthCheckSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOnePostgreHealthCheckSwarmUnion$outboundSchema.parse(
      environmentOnePostgreHealthCheckSwarmUnion,
    ),
  );
}

export function environmentOnePostgreHealthCheckSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOnePostgreHealthCheckSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOnePostgreHealthCheckSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOnePostgreHealthCheckSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneLabelsSwarmPostgreEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneLabelsSwarmPostgreEnum> = z.nativeEnum(
    EnvironmentOneLabelsSwarmPostgreEnum,
  );

/** @internal */
export const EnvironmentOneLabelsSwarmPostgreEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneLabelsSwarmPostgreEnum> =
    EnvironmentOneLabelsSwarmPostgreEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneLabelsSwarmPostgreEnum$ {
  /** @deprecated use `EnvironmentOneLabelsSwarmPostgreEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneLabelsSwarmPostgreEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneLabelsSwarmPostgreEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneLabelsSwarmPostgreEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneLabelsSwarmPostgreUnion$inboundSchema: z.ZodType<
  EnvironmentOneLabelsSwarmPostgreUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneLabelsSwarmPostgreEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentOneLabelsSwarmPostgreUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneLabelsSwarmPostgreUnion$outboundSchema: z.ZodType<
  EnvironmentOneLabelsSwarmPostgreUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneLabelsSwarmPostgreUnion
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneLabelsSwarmPostgreEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneLabelsSwarmPostgreUnion$ {
  /** @deprecated use `EnvironmentOneLabelsSwarmPostgreUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneLabelsSwarmPostgreUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneLabelsSwarmPostgreUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneLabelsSwarmPostgreUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneLabelsSwarmPostgreUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneLabelsSwarmPostgreUnion$Outbound;
}

export function environmentOneLabelsSwarmPostgreUnionToJSON(
  environmentOneLabelsSwarmPostgreUnion: EnvironmentOneLabelsSwarmPostgreUnion,
): string {
  return JSON.stringify(
    EnvironmentOneLabelsSwarmPostgreUnion$outboundSchema.parse(
      environmentOneLabelsSwarmPostgreUnion,
    ),
  );
}

export function environmentOneLabelsSwarmPostgreUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneLabelsSwarmPostgreUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneLabelsSwarmPostgreUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneLabelsSwarmPostgreUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOnePostgreLabelsSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentOnePostgreLabelsSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneLabelsSwarmPostgreEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentOnePostgreLabelsSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOnePostgreLabelsSwarmUnion$outboundSchema: z.ZodType<
  EnvironmentOnePostgreLabelsSwarmUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOnePostgreLabelsSwarmUnion
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneLabelsSwarmPostgreEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOnePostgreLabelsSwarmUnion$ {
  /** @deprecated use `EnvironmentOnePostgreLabelsSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOnePostgreLabelsSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOnePostgreLabelsSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOnePostgreLabelsSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOnePostgreLabelsSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOnePostgreLabelsSwarmUnion$Outbound;
}

export function environmentOnePostgreLabelsSwarmUnionToJSON(
  environmentOnePostgreLabelsSwarmUnion: EnvironmentOnePostgreLabelsSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOnePostgreLabelsSwarmUnion$outboundSchema.parse(
      environmentOnePostgreLabelsSwarmUnion,
    ),
  );
}

export function environmentOnePostgreLabelsSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOnePostgreLabelsSwarmUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOnePostgreLabelsSwarmUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOnePostgreLabelsSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneModeSwarmPostgreEnum$inboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneModeSwarmPostgreEnum
> = z.nativeEnum(EnvironmentOneModeSwarmPostgreEnum);

/** @internal */
export const EnvironmentOneModeSwarmPostgreEnum$outboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneModeSwarmPostgreEnum
> = EnvironmentOneModeSwarmPostgreEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneModeSwarmPostgreEnum$ {
  /** @deprecated use `EnvironmentOneModeSwarmPostgreEnum$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneModeSwarmPostgreEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneModeSwarmPostgreEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneModeSwarmPostgreEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneModeSwarmPostgreUnion$inboundSchema: z.ZodType<
  EnvironmentOneModeSwarmPostgreUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneModeSwarmPostgreEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentOneModeSwarmPostgreUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneModeSwarmPostgreUnion$outboundSchema: z.ZodType<
  EnvironmentOneModeSwarmPostgreUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneModeSwarmPostgreUnion
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneModeSwarmPostgreEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneModeSwarmPostgreUnion$ {
  /** @deprecated use `EnvironmentOneModeSwarmPostgreUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneModeSwarmPostgreUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneModeSwarmPostgreUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneModeSwarmPostgreUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneModeSwarmPostgreUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneModeSwarmPostgreUnion$Outbound;
}

export function environmentOneModeSwarmPostgreUnionToJSON(
  environmentOneModeSwarmPostgreUnion: EnvironmentOneModeSwarmPostgreUnion,
): string {
  return JSON.stringify(
    EnvironmentOneModeSwarmPostgreUnion$outboundSchema.parse(
      environmentOneModeSwarmPostgreUnion,
    ),
  );
}

export function environmentOneModeSwarmPostgreUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneModeSwarmPostgreUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneModeSwarmPostgreUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneModeSwarmPostgreUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOnePostgreModeSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentOnePostgreModeSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneModeSwarmPostgreEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentOnePostgreModeSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOnePostgreModeSwarmUnion$outboundSchema: z.ZodType<
  EnvironmentOnePostgreModeSwarmUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOnePostgreModeSwarmUnion
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneModeSwarmPostgreEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOnePostgreModeSwarmUnion$ {
  /** @deprecated use `EnvironmentOnePostgreModeSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOnePostgreModeSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOnePostgreModeSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOnePostgreModeSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOnePostgreModeSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOnePostgreModeSwarmUnion$Outbound;
}

export function environmentOnePostgreModeSwarmUnionToJSON(
  environmentOnePostgreModeSwarmUnion: EnvironmentOnePostgreModeSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOnePostgreModeSwarmUnion$outboundSchema.parse(
      environmentOnePostgreModeSwarmUnion,
    ),
  );
}

export function environmentOnePostgreModeSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOnePostgreModeSwarmUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOnePostgreModeSwarmUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOnePostgreModeSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneNetworkSwarmPostgreEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneNetworkSwarmPostgreEnum> = z.nativeEnum(
    EnvironmentOneNetworkSwarmPostgreEnum,
  );

/** @internal */
export const EnvironmentOneNetworkSwarmPostgreEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneNetworkSwarmPostgreEnum> =
    EnvironmentOneNetworkSwarmPostgreEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneNetworkSwarmPostgreEnum$ {
  /** @deprecated use `EnvironmentOneNetworkSwarmPostgreEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneNetworkSwarmPostgreEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneNetworkSwarmPostgreEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneNetworkSwarmPostgreEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneNetworkSwarmPostgreUnion$inboundSchema: z.ZodType<
  EnvironmentOneNetworkSwarmPostgreUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneNetworkSwarmPostgreEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentOneNetworkSwarmPostgreUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneNetworkSwarmPostgreUnion$outboundSchema: z.ZodType<
  EnvironmentOneNetworkSwarmPostgreUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneNetworkSwarmPostgreUnion
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneNetworkSwarmPostgreEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneNetworkSwarmPostgreUnion$ {
  /** @deprecated use `EnvironmentOneNetworkSwarmPostgreUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneNetworkSwarmPostgreUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneNetworkSwarmPostgreUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneNetworkSwarmPostgreUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneNetworkSwarmPostgreUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneNetworkSwarmPostgreUnion$Outbound;
}

export function environmentOneNetworkSwarmPostgreUnionToJSON(
  environmentOneNetworkSwarmPostgreUnion:
    EnvironmentOneNetworkSwarmPostgreUnion,
): string {
  return JSON.stringify(
    EnvironmentOneNetworkSwarmPostgreUnion$outboundSchema.parse(
      environmentOneNetworkSwarmPostgreUnion,
    ),
  );
}

export function environmentOneNetworkSwarmPostgreUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneNetworkSwarmPostgreUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneNetworkSwarmPostgreUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneNetworkSwarmPostgreUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOnePostgreNetworkSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentOnePostgreNetworkSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneNetworkSwarmPostgreEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentOnePostgreNetworkSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOnePostgreNetworkSwarmUnion$outboundSchema: z.ZodType<
  EnvironmentOnePostgreNetworkSwarmUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOnePostgreNetworkSwarmUnion
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneNetworkSwarmPostgreEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOnePostgreNetworkSwarmUnion$ {
  /** @deprecated use `EnvironmentOnePostgreNetworkSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOnePostgreNetworkSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOnePostgreNetworkSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOnePostgreNetworkSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOnePostgreNetworkSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOnePostgreNetworkSwarmUnion$Outbound;
}

export function environmentOnePostgreNetworkSwarmUnionToJSON(
  environmentOnePostgreNetworkSwarmUnion:
    EnvironmentOnePostgreNetworkSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOnePostgreNetworkSwarmUnion$outboundSchema.parse(
      environmentOnePostgreNetworkSwarmUnion,
    ),
  );
}

export function environmentOnePostgreNetworkSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOnePostgreNetworkSwarmUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOnePostgreNetworkSwarmUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOnePostgreNetworkSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOnePlacementSwarmPostgreEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOnePlacementSwarmPostgreEnum> = z
    .nativeEnum(EnvironmentOnePlacementSwarmPostgreEnum);

/** @internal */
export const EnvironmentOnePlacementSwarmPostgreEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOnePlacementSwarmPostgreEnum> =
    EnvironmentOnePlacementSwarmPostgreEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOnePlacementSwarmPostgreEnum$ {
  /** @deprecated use `EnvironmentOnePlacementSwarmPostgreEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOnePlacementSwarmPostgreEnum$inboundSchema;
  /** @deprecated use `EnvironmentOnePlacementSwarmPostgreEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOnePlacementSwarmPostgreEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOnePlacementSwarmPostgreUnion$inboundSchema: z.ZodType<
  EnvironmentOnePlacementSwarmPostgreUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOnePlacementSwarmPostgreEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentOnePlacementSwarmPostgreUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOnePlacementSwarmPostgreUnion$outboundSchema: z.ZodType<
  EnvironmentOnePlacementSwarmPostgreUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOnePlacementSwarmPostgreUnion
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOnePlacementSwarmPostgreEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOnePlacementSwarmPostgreUnion$ {
  /** @deprecated use `EnvironmentOnePlacementSwarmPostgreUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOnePlacementSwarmPostgreUnion$inboundSchema;
  /** @deprecated use `EnvironmentOnePlacementSwarmPostgreUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOnePlacementSwarmPostgreUnion$outboundSchema;
  /** @deprecated use `EnvironmentOnePlacementSwarmPostgreUnion$Outbound` instead. */
  export type Outbound = EnvironmentOnePlacementSwarmPostgreUnion$Outbound;
}

export function environmentOnePlacementSwarmPostgreUnionToJSON(
  environmentOnePlacementSwarmPostgreUnion:
    EnvironmentOnePlacementSwarmPostgreUnion,
): string {
  return JSON.stringify(
    EnvironmentOnePlacementSwarmPostgreUnion$outboundSchema.parse(
      environmentOnePlacementSwarmPostgreUnion,
    ),
  );
}

export function environmentOnePlacementSwarmPostgreUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOnePlacementSwarmPostgreUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOnePlacementSwarmPostgreUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOnePlacementSwarmPostgreUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOnePostgrePlacementSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentOnePostgrePlacementSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOnePlacementSwarmPostgreEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentOnePostgrePlacementSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOnePostgrePlacementSwarmUnion$outboundSchema: z.ZodType<
  EnvironmentOnePostgrePlacementSwarmUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOnePostgrePlacementSwarmUnion
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOnePlacementSwarmPostgreEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOnePostgrePlacementSwarmUnion$ {
  /** @deprecated use `EnvironmentOnePostgrePlacementSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOnePostgrePlacementSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOnePostgrePlacementSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOnePostgrePlacementSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOnePostgrePlacementSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOnePostgrePlacementSwarmUnion$Outbound;
}

export function environmentOnePostgrePlacementSwarmUnionToJSON(
  environmentOnePostgrePlacementSwarmUnion:
    EnvironmentOnePostgrePlacementSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOnePostgrePlacementSwarmUnion$outboundSchema.parse(
      environmentOnePostgrePlacementSwarmUnion,
    ),
  );
}

export function environmentOnePostgrePlacementSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOnePostgrePlacementSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOnePostgrePlacementSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOnePostgrePlacementSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneRestartPolicySwarmPostgreEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneRestartPolicySwarmPostgreEnum> = z
    .nativeEnum(EnvironmentOneRestartPolicySwarmPostgreEnum);

/** @internal */
export const EnvironmentOneRestartPolicySwarmPostgreEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneRestartPolicySwarmPostgreEnum> =
    EnvironmentOneRestartPolicySwarmPostgreEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRestartPolicySwarmPostgreEnum$ {
  /** @deprecated use `EnvironmentOneRestartPolicySwarmPostgreEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRestartPolicySwarmPostgreEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneRestartPolicySwarmPostgreEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRestartPolicySwarmPostgreEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneRestartPolicySwarmPostgreUnion$inboundSchema:
  z.ZodType<
    EnvironmentOneRestartPolicySwarmPostgreUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneRestartPolicySwarmPostgreEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentOneRestartPolicySwarmPostgreUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneRestartPolicySwarmPostgreUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneRestartPolicySwarmPostgreUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneRestartPolicySwarmPostgreUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneRestartPolicySwarmPostgreEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRestartPolicySwarmPostgreUnion$ {
  /** @deprecated use `EnvironmentOneRestartPolicySwarmPostgreUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRestartPolicySwarmPostgreUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneRestartPolicySwarmPostgreUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRestartPolicySwarmPostgreUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneRestartPolicySwarmPostgreUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneRestartPolicySwarmPostgreUnion$Outbound;
}

export function environmentOneRestartPolicySwarmPostgreUnionToJSON(
  environmentOneRestartPolicySwarmPostgreUnion:
    EnvironmentOneRestartPolicySwarmPostgreUnion,
): string {
  return JSON.stringify(
    EnvironmentOneRestartPolicySwarmPostgreUnion$outboundSchema.parse(
      environmentOneRestartPolicySwarmPostgreUnion,
    ),
  );
}

export function environmentOneRestartPolicySwarmPostgreUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneRestartPolicySwarmPostgreUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneRestartPolicySwarmPostgreUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneRestartPolicySwarmPostgreUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOnePostgreRestartPolicySwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentOnePostgreRestartPolicySwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneRestartPolicySwarmPostgreEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentOnePostgreRestartPolicySwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOnePostgreRestartPolicySwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentOnePostgreRestartPolicySwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOnePostgreRestartPolicySwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneRestartPolicySwarmPostgreEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOnePostgreRestartPolicySwarmUnion$ {
  /** @deprecated use `EnvironmentOnePostgreRestartPolicySwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOnePostgreRestartPolicySwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOnePostgreRestartPolicySwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOnePostgreRestartPolicySwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOnePostgreRestartPolicySwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOnePostgreRestartPolicySwarmUnion$Outbound;
}

export function environmentOnePostgreRestartPolicySwarmUnionToJSON(
  environmentOnePostgreRestartPolicySwarmUnion:
    EnvironmentOnePostgreRestartPolicySwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOnePostgreRestartPolicySwarmUnion$outboundSchema.parse(
      environmentOnePostgreRestartPolicySwarmUnion,
    ),
  );
}

export function environmentOnePostgreRestartPolicySwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOnePostgreRestartPolicySwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOnePostgreRestartPolicySwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOnePostgreRestartPolicySwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneRollbackConfigSwarmPostgreEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneRollbackConfigSwarmPostgreEnum> = z
    .nativeEnum(EnvironmentOneRollbackConfigSwarmPostgreEnum);

/** @internal */
export const EnvironmentOneRollbackConfigSwarmPostgreEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneRollbackConfigSwarmPostgreEnum> =
    EnvironmentOneRollbackConfigSwarmPostgreEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRollbackConfigSwarmPostgreEnum$ {
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmPostgreEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRollbackConfigSwarmPostgreEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmPostgreEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRollbackConfigSwarmPostgreEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneRollbackConfigSwarmPostgreUnion$inboundSchema:
  z.ZodType<
    EnvironmentOneRollbackConfigSwarmPostgreUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneRollbackConfigSwarmPostgreEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentOneRollbackConfigSwarmPostgreUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneRollbackConfigSwarmPostgreUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneRollbackConfigSwarmPostgreUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneRollbackConfigSwarmPostgreUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneRollbackConfigSwarmPostgreEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRollbackConfigSwarmPostgreUnion$ {
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmPostgreUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRollbackConfigSwarmPostgreUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmPostgreUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRollbackConfigSwarmPostgreUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmPostgreUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneRollbackConfigSwarmPostgreUnion$Outbound;
}

export function environmentOneRollbackConfigSwarmPostgreUnionToJSON(
  environmentOneRollbackConfigSwarmPostgreUnion:
    EnvironmentOneRollbackConfigSwarmPostgreUnion,
): string {
  return JSON.stringify(
    EnvironmentOneRollbackConfigSwarmPostgreUnion$outboundSchema.parse(
      environmentOneRollbackConfigSwarmPostgreUnion,
    ),
  );
}

export function environmentOneRollbackConfigSwarmPostgreUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneRollbackConfigSwarmPostgreUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneRollbackConfigSwarmPostgreUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneRollbackConfigSwarmPostgreUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOnePostgreRollbackConfigSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentOnePostgreRollbackConfigSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneRollbackConfigSwarmPostgreEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentOnePostgreRollbackConfigSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOnePostgreRollbackConfigSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentOnePostgreRollbackConfigSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOnePostgreRollbackConfigSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneRollbackConfigSwarmPostgreEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOnePostgreRollbackConfigSwarmUnion$ {
  /** @deprecated use `EnvironmentOnePostgreRollbackConfigSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOnePostgreRollbackConfigSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOnePostgreRollbackConfigSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOnePostgreRollbackConfigSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOnePostgreRollbackConfigSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOnePostgreRollbackConfigSwarmUnion$Outbound;
}

export function environmentOnePostgreRollbackConfigSwarmUnionToJSON(
  environmentOnePostgreRollbackConfigSwarmUnion:
    EnvironmentOnePostgreRollbackConfigSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOnePostgreRollbackConfigSwarmUnion$outboundSchema.parse(
      environmentOnePostgreRollbackConfigSwarmUnion,
    ),
  );
}

export function environmentOnePostgreRollbackConfigSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOnePostgreRollbackConfigSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOnePostgreRollbackConfigSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOnePostgreRollbackConfigSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneUpdateConfigSwarmPostgreEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneUpdateConfigSwarmPostgreEnum> = z
    .nativeEnum(EnvironmentOneUpdateConfigSwarmPostgreEnum);

/** @internal */
export const EnvironmentOneUpdateConfigSwarmPostgreEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneUpdateConfigSwarmPostgreEnum> =
    EnvironmentOneUpdateConfigSwarmPostgreEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneUpdateConfigSwarmPostgreEnum$ {
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmPostgreEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneUpdateConfigSwarmPostgreEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmPostgreEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneUpdateConfigSwarmPostgreEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneUpdateConfigSwarmPostgreUnion$inboundSchema:
  z.ZodType<
    EnvironmentOneUpdateConfigSwarmPostgreUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneUpdateConfigSwarmPostgreEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentOneUpdateConfigSwarmPostgreUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneUpdateConfigSwarmPostgreUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneUpdateConfigSwarmPostgreUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneUpdateConfigSwarmPostgreUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneUpdateConfigSwarmPostgreEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneUpdateConfigSwarmPostgreUnion$ {
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmPostgreUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneUpdateConfigSwarmPostgreUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmPostgreUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneUpdateConfigSwarmPostgreUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmPostgreUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneUpdateConfigSwarmPostgreUnion$Outbound;
}

export function environmentOneUpdateConfigSwarmPostgreUnionToJSON(
  environmentOneUpdateConfigSwarmPostgreUnion:
    EnvironmentOneUpdateConfigSwarmPostgreUnion,
): string {
  return JSON.stringify(
    EnvironmentOneUpdateConfigSwarmPostgreUnion$outboundSchema.parse(
      environmentOneUpdateConfigSwarmPostgreUnion,
    ),
  );
}

export function environmentOneUpdateConfigSwarmPostgreUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneUpdateConfigSwarmPostgreUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneUpdateConfigSwarmPostgreUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneUpdateConfigSwarmPostgreUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOnePostgreUpdateConfigSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentOnePostgreUpdateConfigSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneUpdateConfigSwarmPostgreEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentOnePostgreUpdateConfigSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOnePostgreUpdateConfigSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentOnePostgreUpdateConfigSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOnePostgreUpdateConfigSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneUpdateConfigSwarmPostgreEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOnePostgreUpdateConfigSwarmUnion$ {
  /** @deprecated use `EnvironmentOnePostgreUpdateConfigSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOnePostgreUpdateConfigSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOnePostgreUpdateConfigSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOnePostgreUpdateConfigSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOnePostgreUpdateConfigSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOnePostgreUpdateConfigSwarmUnion$Outbound;
}

export function environmentOnePostgreUpdateConfigSwarmUnionToJSON(
  environmentOnePostgreUpdateConfigSwarmUnion:
    EnvironmentOnePostgreUpdateConfigSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOnePostgreUpdateConfigSwarmUnion$outboundSchema.parse(
      environmentOnePostgreUpdateConfigSwarmUnion,
    ),
  );
}

export function environmentOnePostgreUpdateConfigSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOnePostgreUpdateConfigSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOnePostgreUpdateConfigSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOnePostgreUpdateConfigSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOnePostgre$inboundSchema: z.ZodType<
  EnvironmentOnePostgre,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  applicationStatus: EnvironmentOnePostgreApplicationStatus$inboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databaseName: z.string(),
  databasePassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneHealthCheckSwarmPostgreEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  labelsSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneLabelsSwarmPostgreEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneModeSwarmPostgreEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  name: z.string(),
  networkSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneNetworkSwarmPostgreEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  placementSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOnePlacementSwarmPostgreEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  postgresId: z.string(),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneRestartPolicySwarmPostgreEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  rollbackConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneRollbackConfigSwarmPostgreEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneUpdateConfigSwarmPostgreEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
});

/** @internal */
export type EnvironmentOnePostgre$Outbound = {
  appName: string;
  applicationStatus: string;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databaseName: string;
  databasePassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  labelsSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  name: string;
  networkSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  placementSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  postgresId: string;
  replicas: number;
  restartPolicySwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  rollbackConfigSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  serverId: string | null;
  updateConfigSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
};

/** @internal */
export const EnvironmentOnePostgre$outboundSchema: z.ZodType<
  EnvironmentOnePostgre$Outbound,
  z.ZodTypeDef,
  EnvironmentOnePostgre
> = z.object({
  appName: z.string(),
  applicationStatus: EnvironmentOnePostgreApplicationStatus$outboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databaseName: z.string(),
  databasePassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneHealthCheckSwarmPostgreEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  labelsSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneLabelsSwarmPostgreEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneModeSwarmPostgreEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  name: z.string(),
  networkSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneNetworkSwarmPostgreEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  placementSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOnePlacementSwarmPostgreEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  postgresId: z.string(),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneRestartPolicySwarmPostgreEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  rollbackConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneRollbackConfigSwarmPostgreEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneUpdateConfigSwarmPostgreEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOnePostgre$ {
  /** @deprecated use `EnvironmentOnePostgre$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOnePostgre$inboundSchema;
  /** @deprecated use `EnvironmentOnePostgre$outboundSchema` instead. */
  export const outboundSchema = EnvironmentOnePostgre$outboundSchema;
  /** @deprecated use `EnvironmentOnePostgre$Outbound` instead. */
  export type Outbound = EnvironmentOnePostgre$Outbound;
}

export function environmentOnePostgreToJSON(
  environmentOnePostgre: EnvironmentOnePostgre,
): string {
  return JSON.stringify(
    EnvironmentOnePostgre$outboundSchema.parse(environmentOnePostgre),
  );
}

export function environmentOnePostgreFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOnePostgre, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentOnePostgre$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOnePostgre' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneProject$inboundSchema: z.ZodType<
  EnvironmentOneProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/** @internal */
export type EnvironmentOneProject$Outbound = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

/** @internal */
export const EnvironmentOneProject$outboundSchema: z.ZodType<
  EnvironmentOneProject$Outbound,
  z.ZodTypeDef,
  EnvironmentOneProject
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneProject$ {
  /** @deprecated use `EnvironmentOneProject$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneProject$inboundSchema;
  /** @deprecated use `EnvironmentOneProject$outboundSchema` instead. */
  export const outboundSchema = EnvironmentOneProject$outboundSchema;
  /** @deprecated use `EnvironmentOneProject$Outbound` instead. */
  export type Outbound = EnvironmentOneProject$Outbound;
}

export function environmentOneProjectToJSON(
  environmentOneProject: EnvironmentOneProject,
): string {
  return JSON.stringify(
    EnvironmentOneProject$outboundSchema.parse(environmentOneProject),
  );
}

export function environmentOneProjectFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentOneProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneProject' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneRediApplicationStatus$inboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneRediApplicationStatus
> = z.nativeEnum(EnvironmentOneRediApplicationStatus);

/** @internal */
export const EnvironmentOneRediApplicationStatus$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneRediApplicationStatus> =
    EnvironmentOneRediApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRediApplicationStatus$ {
  /** @deprecated use `EnvironmentOneRediApplicationStatus$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRediApplicationStatus$inboundSchema;
  /** @deprecated use `EnvironmentOneRediApplicationStatus$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRediApplicationStatus$outboundSchema;
}

/** @internal */
export const EnvironmentOneHealthCheckSwarmRediEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneHealthCheckSwarmRediEnum> = z.nativeEnum(
    EnvironmentOneHealthCheckSwarmRediEnum,
  );

/** @internal */
export const EnvironmentOneHealthCheckSwarmRediEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneHealthCheckSwarmRediEnum> =
    EnvironmentOneHealthCheckSwarmRediEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneHealthCheckSwarmRediEnum$ {
  /** @deprecated use `EnvironmentOneHealthCheckSwarmRediEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneHealthCheckSwarmRediEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneHealthCheckSwarmRediEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneHealthCheckSwarmRediEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneHealthCheckSwarmRediUnion$inboundSchema: z.ZodType<
  EnvironmentOneHealthCheckSwarmRediUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneHealthCheckSwarmRediEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentOneHealthCheckSwarmRediUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneHealthCheckSwarmRediUnion$outboundSchema: z.ZodType<
  EnvironmentOneHealthCheckSwarmRediUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneHealthCheckSwarmRediUnion
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneHealthCheckSwarmRediEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneHealthCheckSwarmRediUnion$ {
  /** @deprecated use `EnvironmentOneHealthCheckSwarmRediUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneHealthCheckSwarmRediUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneHealthCheckSwarmRediUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneHealthCheckSwarmRediUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneHealthCheckSwarmRediUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneHealthCheckSwarmRediUnion$Outbound;
}

export function environmentOneHealthCheckSwarmRediUnionToJSON(
  environmentOneHealthCheckSwarmRediUnion:
    EnvironmentOneHealthCheckSwarmRediUnion,
): string {
  return JSON.stringify(
    EnvironmentOneHealthCheckSwarmRediUnion$outboundSchema.parse(
      environmentOneHealthCheckSwarmRediUnion,
    ),
  );
}

export function environmentOneHealthCheckSwarmRediUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneHealthCheckSwarmRediUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneHealthCheckSwarmRediUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneHealthCheckSwarmRediUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneRediHealthCheckSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentOneRediHealthCheckSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneHealthCheckSwarmRediEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentOneRediHealthCheckSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneRediHealthCheckSwarmUnion$outboundSchema: z.ZodType<
  EnvironmentOneRediHealthCheckSwarmUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneRediHealthCheckSwarmUnion
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneHealthCheckSwarmRediEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRediHealthCheckSwarmUnion$ {
  /** @deprecated use `EnvironmentOneRediHealthCheckSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRediHealthCheckSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneRediHealthCheckSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRediHealthCheckSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneRediHealthCheckSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneRediHealthCheckSwarmUnion$Outbound;
}

export function environmentOneRediHealthCheckSwarmUnionToJSON(
  environmentOneRediHealthCheckSwarmUnion:
    EnvironmentOneRediHealthCheckSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneRediHealthCheckSwarmUnion$outboundSchema.parse(
      environmentOneRediHealthCheckSwarmUnion,
    ),
  );
}

export function environmentOneRediHealthCheckSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneRediHealthCheckSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneRediHealthCheckSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneRediHealthCheckSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneLabelsSwarmRediEnum$inboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneLabelsSwarmRediEnum
> = z.nativeEnum(EnvironmentOneLabelsSwarmRediEnum);

/** @internal */
export const EnvironmentOneLabelsSwarmRediEnum$outboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneLabelsSwarmRediEnum
> = EnvironmentOneLabelsSwarmRediEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneLabelsSwarmRediEnum$ {
  /** @deprecated use `EnvironmentOneLabelsSwarmRediEnum$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneLabelsSwarmRediEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneLabelsSwarmRediEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneLabelsSwarmRediEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneLabelsSwarmRediUnion$inboundSchema: z.ZodType<
  EnvironmentOneLabelsSwarmRediUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneLabelsSwarmRediEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentOneLabelsSwarmRediUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneLabelsSwarmRediUnion$outboundSchema: z.ZodType<
  EnvironmentOneLabelsSwarmRediUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneLabelsSwarmRediUnion
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneLabelsSwarmRediEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneLabelsSwarmRediUnion$ {
  /** @deprecated use `EnvironmentOneLabelsSwarmRediUnion$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneLabelsSwarmRediUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneLabelsSwarmRediUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneLabelsSwarmRediUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneLabelsSwarmRediUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneLabelsSwarmRediUnion$Outbound;
}

export function environmentOneLabelsSwarmRediUnionToJSON(
  environmentOneLabelsSwarmRediUnion: EnvironmentOneLabelsSwarmRediUnion,
): string {
  return JSON.stringify(
    EnvironmentOneLabelsSwarmRediUnion$outboundSchema.parse(
      environmentOneLabelsSwarmRediUnion,
    ),
  );
}

export function environmentOneLabelsSwarmRediUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneLabelsSwarmRediUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneLabelsSwarmRediUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneLabelsSwarmRediUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneRediLabelsSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentOneRediLabelsSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneLabelsSwarmRediEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentOneRediLabelsSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneRediLabelsSwarmUnion$outboundSchema: z.ZodType<
  EnvironmentOneRediLabelsSwarmUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneRediLabelsSwarmUnion
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneLabelsSwarmRediEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRediLabelsSwarmUnion$ {
  /** @deprecated use `EnvironmentOneRediLabelsSwarmUnion$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneRediLabelsSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneRediLabelsSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRediLabelsSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneRediLabelsSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneRediLabelsSwarmUnion$Outbound;
}

export function environmentOneRediLabelsSwarmUnionToJSON(
  environmentOneRediLabelsSwarmUnion: EnvironmentOneRediLabelsSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneRediLabelsSwarmUnion$outboundSchema.parse(
      environmentOneRediLabelsSwarmUnion,
    ),
  );
}

export function environmentOneRediLabelsSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneRediLabelsSwarmUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneRediLabelsSwarmUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneRediLabelsSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneModeSwarmRediEnum$inboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneModeSwarmRediEnum
> = z.nativeEnum(EnvironmentOneModeSwarmRediEnum);

/** @internal */
export const EnvironmentOneModeSwarmRediEnum$outboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneModeSwarmRediEnum
> = EnvironmentOneModeSwarmRediEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneModeSwarmRediEnum$ {
  /** @deprecated use `EnvironmentOneModeSwarmRediEnum$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneModeSwarmRediEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneModeSwarmRediEnum$outboundSchema` instead. */
  export const outboundSchema = EnvironmentOneModeSwarmRediEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneModeSwarmRediUnion$inboundSchema: z.ZodType<
  EnvironmentOneModeSwarmRediUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneModeSwarmRediEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentOneModeSwarmRediUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneModeSwarmRediUnion$outboundSchema: z.ZodType<
  EnvironmentOneModeSwarmRediUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneModeSwarmRediUnion
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneModeSwarmRediEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneModeSwarmRediUnion$ {
  /** @deprecated use `EnvironmentOneModeSwarmRediUnion$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneModeSwarmRediUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneModeSwarmRediUnion$outboundSchema` instead. */
  export const outboundSchema = EnvironmentOneModeSwarmRediUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneModeSwarmRediUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneModeSwarmRediUnion$Outbound;
}

export function environmentOneModeSwarmRediUnionToJSON(
  environmentOneModeSwarmRediUnion: EnvironmentOneModeSwarmRediUnion,
): string {
  return JSON.stringify(
    EnvironmentOneModeSwarmRediUnion$outboundSchema.parse(
      environmentOneModeSwarmRediUnion,
    ),
  );
}

export function environmentOneModeSwarmRediUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneModeSwarmRediUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentOneModeSwarmRediUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneModeSwarmRediUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneRediModeSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentOneRediModeSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneModeSwarmRediEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentOneRediModeSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneRediModeSwarmUnion$outboundSchema: z.ZodType<
  EnvironmentOneRediModeSwarmUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneRediModeSwarmUnion
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneModeSwarmRediEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRediModeSwarmUnion$ {
  /** @deprecated use `EnvironmentOneRediModeSwarmUnion$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneRediModeSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneRediModeSwarmUnion$outboundSchema` instead. */
  export const outboundSchema = EnvironmentOneRediModeSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneRediModeSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneRediModeSwarmUnion$Outbound;
}

export function environmentOneRediModeSwarmUnionToJSON(
  environmentOneRediModeSwarmUnion: EnvironmentOneRediModeSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneRediModeSwarmUnion$outboundSchema.parse(
      environmentOneRediModeSwarmUnion,
    ),
  );
}

export function environmentOneRediModeSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneRediModeSwarmUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentOneRediModeSwarmUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneRediModeSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneNetworkSwarmRediEnum$inboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneNetworkSwarmRediEnum
> = z.nativeEnum(EnvironmentOneNetworkSwarmRediEnum);

/** @internal */
export const EnvironmentOneNetworkSwarmRediEnum$outboundSchema: z.ZodNativeEnum<
  typeof EnvironmentOneNetworkSwarmRediEnum
> = EnvironmentOneNetworkSwarmRediEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneNetworkSwarmRediEnum$ {
  /** @deprecated use `EnvironmentOneNetworkSwarmRediEnum$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneNetworkSwarmRediEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneNetworkSwarmRediEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneNetworkSwarmRediEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneNetworkSwarmRediUnion$inboundSchema: z.ZodType<
  EnvironmentOneNetworkSwarmRediUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneNetworkSwarmRediEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentOneNetworkSwarmRediUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneNetworkSwarmRediUnion$outboundSchema: z.ZodType<
  EnvironmentOneNetworkSwarmRediUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneNetworkSwarmRediUnion
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneNetworkSwarmRediEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneNetworkSwarmRediUnion$ {
  /** @deprecated use `EnvironmentOneNetworkSwarmRediUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneNetworkSwarmRediUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneNetworkSwarmRediUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneNetworkSwarmRediUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneNetworkSwarmRediUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneNetworkSwarmRediUnion$Outbound;
}

export function environmentOneNetworkSwarmRediUnionToJSON(
  environmentOneNetworkSwarmRediUnion: EnvironmentOneNetworkSwarmRediUnion,
): string {
  return JSON.stringify(
    EnvironmentOneNetworkSwarmRediUnion$outboundSchema.parse(
      environmentOneNetworkSwarmRediUnion,
    ),
  );
}

export function environmentOneNetworkSwarmRediUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneNetworkSwarmRediUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneNetworkSwarmRediUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneNetworkSwarmRediUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneRediNetworkSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentOneRediNetworkSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneNetworkSwarmRediEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentOneRediNetworkSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneRediNetworkSwarmUnion$outboundSchema: z.ZodType<
  EnvironmentOneRediNetworkSwarmUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneRediNetworkSwarmUnion
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneNetworkSwarmRediEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRediNetworkSwarmUnion$ {
  /** @deprecated use `EnvironmentOneRediNetworkSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRediNetworkSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneRediNetworkSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRediNetworkSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneRediNetworkSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneRediNetworkSwarmUnion$Outbound;
}

export function environmentOneRediNetworkSwarmUnionToJSON(
  environmentOneRediNetworkSwarmUnion: EnvironmentOneRediNetworkSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneRediNetworkSwarmUnion$outboundSchema.parse(
      environmentOneRediNetworkSwarmUnion,
    ),
  );
}

export function environmentOneRediNetworkSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneRediNetworkSwarmUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneRediNetworkSwarmUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneRediNetworkSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOnePlacementSwarmRediEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOnePlacementSwarmRediEnum> = z.nativeEnum(
    EnvironmentOnePlacementSwarmRediEnum,
  );

/** @internal */
export const EnvironmentOnePlacementSwarmRediEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOnePlacementSwarmRediEnum> =
    EnvironmentOnePlacementSwarmRediEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOnePlacementSwarmRediEnum$ {
  /** @deprecated use `EnvironmentOnePlacementSwarmRediEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOnePlacementSwarmRediEnum$inboundSchema;
  /** @deprecated use `EnvironmentOnePlacementSwarmRediEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOnePlacementSwarmRediEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOnePlacementSwarmRediUnion$inboundSchema: z.ZodType<
  EnvironmentOnePlacementSwarmRediUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOnePlacementSwarmRediEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentOnePlacementSwarmRediUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOnePlacementSwarmRediUnion$outboundSchema: z.ZodType<
  EnvironmentOnePlacementSwarmRediUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOnePlacementSwarmRediUnion
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOnePlacementSwarmRediEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOnePlacementSwarmRediUnion$ {
  /** @deprecated use `EnvironmentOnePlacementSwarmRediUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOnePlacementSwarmRediUnion$inboundSchema;
  /** @deprecated use `EnvironmentOnePlacementSwarmRediUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOnePlacementSwarmRediUnion$outboundSchema;
  /** @deprecated use `EnvironmentOnePlacementSwarmRediUnion$Outbound` instead. */
  export type Outbound = EnvironmentOnePlacementSwarmRediUnion$Outbound;
}

export function environmentOnePlacementSwarmRediUnionToJSON(
  environmentOnePlacementSwarmRediUnion: EnvironmentOnePlacementSwarmRediUnion,
): string {
  return JSON.stringify(
    EnvironmentOnePlacementSwarmRediUnion$outboundSchema.parse(
      environmentOnePlacementSwarmRediUnion,
    ),
  );
}

export function environmentOnePlacementSwarmRediUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOnePlacementSwarmRediUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOnePlacementSwarmRediUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOnePlacementSwarmRediUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneRediPlacementSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentOneRediPlacementSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOnePlacementSwarmRediEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentOneRediPlacementSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneRediPlacementSwarmUnion$outboundSchema: z.ZodType<
  EnvironmentOneRediPlacementSwarmUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneRediPlacementSwarmUnion
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOnePlacementSwarmRediEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRediPlacementSwarmUnion$ {
  /** @deprecated use `EnvironmentOneRediPlacementSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRediPlacementSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneRediPlacementSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRediPlacementSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneRediPlacementSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneRediPlacementSwarmUnion$Outbound;
}

export function environmentOneRediPlacementSwarmUnionToJSON(
  environmentOneRediPlacementSwarmUnion: EnvironmentOneRediPlacementSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneRediPlacementSwarmUnion$outboundSchema.parse(
      environmentOneRediPlacementSwarmUnion,
    ),
  );
}

export function environmentOneRediPlacementSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneRediPlacementSwarmUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneRediPlacementSwarmUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneRediPlacementSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneRestartPolicySwarmRediEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneRestartPolicySwarmRediEnum> = z
    .nativeEnum(EnvironmentOneRestartPolicySwarmRediEnum);

/** @internal */
export const EnvironmentOneRestartPolicySwarmRediEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneRestartPolicySwarmRediEnum> =
    EnvironmentOneRestartPolicySwarmRediEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRestartPolicySwarmRediEnum$ {
  /** @deprecated use `EnvironmentOneRestartPolicySwarmRediEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRestartPolicySwarmRediEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneRestartPolicySwarmRediEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRestartPolicySwarmRediEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneRestartPolicySwarmRediUnion$inboundSchema: z.ZodType<
  EnvironmentOneRestartPolicySwarmRediUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneRestartPolicySwarmRediEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentOneRestartPolicySwarmRediUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneRestartPolicySwarmRediUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneRestartPolicySwarmRediUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneRestartPolicySwarmRediUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneRestartPolicySwarmRediEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRestartPolicySwarmRediUnion$ {
  /** @deprecated use `EnvironmentOneRestartPolicySwarmRediUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRestartPolicySwarmRediUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneRestartPolicySwarmRediUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRestartPolicySwarmRediUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneRestartPolicySwarmRediUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneRestartPolicySwarmRediUnion$Outbound;
}

export function environmentOneRestartPolicySwarmRediUnionToJSON(
  environmentOneRestartPolicySwarmRediUnion:
    EnvironmentOneRestartPolicySwarmRediUnion,
): string {
  return JSON.stringify(
    EnvironmentOneRestartPolicySwarmRediUnion$outboundSchema.parse(
      environmentOneRestartPolicySwarmRediUnion,
    ),
  );
}

export function environmentOneRestartPolicySwarmRediUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneRestartPolicySwarmRediUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneRestartPolicySwarmRediUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneRestartPolicySwarmRediUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneRediRestartPolicySwarmUnion$inboundSchema: z.ZodType<
  EnvironmentOneRediRestartPolicySwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneRestartPolicySwarmRediEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentOneRediRestartPolicySwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneRediRestartPolicySwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneRediRestartPolicySwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneRediRestartPolicySwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneRestartPolicySwarmRediEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRediRestartPolicySwarmUnion$ {
  /** @deprecated use `EnvironmentOneRediRestartPolicySwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRediRestartPolicySwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneRediRestartPolicySwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRediRestartPolicySwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneRediRestartPolicySwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneRediRestartPolicySwarmUnion$Outbound;
}

export function environmentOneRediRestartPolicySwarmUnionToJSON(
  environmentOneRediRestartPolicySwarmUnion:
    EnvironmentOneRediRestartPolicySwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneRediRestartPolicySwarmUnion$outboundSchema.parse(
      environmentOneRediRestartPolicySwarmUnion,
    ),
  );
}

export function environmentOneRediRestartPolicySwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneRediRestartPolicySwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneRediRestartPolicySwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneRediRestartPolicySwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneRollbackConfigSwarmRediEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneRollbackConfigSwarmRediEnum> = z
    .nativeEnum(EnvironmentOneRollbackConfigSwarmRediEnum);

/** @internal */
export const EnvironmentOneRollbackConfigSwarmRediEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneRollbackConfigSwarmRediEnum> =
    EnvironmentOneRollbackConfigSwarmRediEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRollbackConfigSwarmRediEnum$ {
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmRediEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRollbackConfigSwarmRediEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmRediEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRollbackConfigSwarmRediEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneRollbackConfigSwarmRediUnion$inboundSchema:
  z.ZodType<EnvironmentOneRollbackConfigSwarmRediUnion, z.ZodTypeDef, unknown> =
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneRollbackConfigSwarmRediEnum$inboundSchema,
    ]);

/** @internal */
export type EnvironmentOneRollbackConfigSwarmRediUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneRollbackConfigSwarmRediUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneRollbackConfigSwarmRediUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneRollbackConfigSwarmRediUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneRollbackConfigSwarmRediEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRollbackConfigSwarmRediUnion$ {
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmRediUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRollbackConfigSwarmRediUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmRediUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRollbackConfigSwarmRediUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneRollbackConfigSwarmRediUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneRollbackConfigSwarmRediUnion$Outbound;
}

export function environmentOneRollbackConfigSwarmRediUnionToJSON(
  environmentOneRollbackConfigSwarmRediUnion:
    EnvironmentOneRollbackConfigSwarmRediUnion,
): string {
  return JSON.stringify(
    EnvironmentOneRollbackConfigSwarmRediUnion$outboundSchema.parse(
      environmentOneRollbackConfigSwarmRediUnion,
    ),
  );
}

export function environmentOneRollbackConfigSwarmRediUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneRollbackConfigSwarmRediUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneRollbackConfigSwarmRediUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneRollbackConfigSwarmRediUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneRediRollbackConfigSwarmUnion$inboundSchema:
  z.ZodType<EnvironmentOneRediRollbackConfigSwarmUnion, z.ZodTypeDef, unknown> =
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneRollbackConfigSwarmRediEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]);

/** @internal */
export type EnvironmentOneRediRollbackConfigSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneRediRollbackConfigSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentOneRediRollbackConfigSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentOneRediRollbackConfigSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentOneRollbackConfigSwarmRediEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRediRollbackConfigSwarmUnion$ {
  /** @deprecated use `EnvironmentOneRediRollbackConfigSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRediRollbackConfigSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneRediRollbackConfigSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRediRollbackConfigSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneRediRollbackConfigSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneRediRollbackConfigSwarmUnion$Outbound;
}

export function environmentOneRediRollbackConfigSwarmUnionToJSON(
  environmentOneRediRollbackConfigSwarmUnion:
    EnvironmentOneRediRollbackConfigSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneRediRollbackConfigSwarmUnion$outboundSchema.parse(
      environmentOneRediRollbackConfigSwarmUnion,
    ),
  );
}

export function environmentOneRediRollbackConfigSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneRediRollbackConfigSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneRediRollbackConfigSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneRediRollbackConfigSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneUpdateConfigSwarmRediEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneUpdateConfigSwarmRediEnum> = z
    .nativeEnum(EnvironmentOneUpdateConfigSwarmRediEnum);

/** @internal */
export const EnvironmentOneUpdateConfigSwarmRediEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentOneUpdateConfigSwarmRediEnum> =
    EnvironmentOneUpdateConfigSwarmRediEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneUpdateConfigSwarmRediEnum$ {
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmRediEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneUpdateConfigSwarmRediEnum$inboundSchema;
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmRediEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneUpdateConfigSwarmRediEnum$outboundSchema;
}

/** @internal */
export const EnvironmentOneUpdateConfigSwarmRediUnion$inboundSchema: z.ZodType<
  EnvironmentOneUpdateConfigSwarmRediUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneUpdateConfigSwarmRediEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentOneUpdateConfigSwarmRediUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentOneUpdateConfigSwarmRediUnion$outboundSchema: z.ZodType<
  EnvironmentOneUpdateConfigSwarmRediUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneUpdateConfigSwarmRediUnion
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentOneUpdateConfigSwarmRediEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneUpdateConfigSwarmRediUnion$ {
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmRediUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneUpdateConfigSwarmRediUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmRediUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneUpdateConfigSwarmRediUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneUpdateConfigSwarmRediUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneUpdateConfigSwarmRediUnion$Outbound;
}

export function environmentOneUpdateConfigSwarmRediUnionToJSON(
  environmentOneUpdateConfigSwarmRediUnion:
    EnvironmentOneUpdateConfigSwarmRediUnion,
): string {
  return JSON.stringify(
    EnvironmentOneUpdateConfigSwarmRediUnion$outboundSchema.parse(
      environmentOneUpdateConfigSwarmRediUnion,
    ),
  );
}

export function environmentOneUpdateConfigSwarmRediUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneUpdateConfigSwarmRediUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneUpdateConfigSwarmRediUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneUpdateConfigSwarmRediUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneRediUpdateConfigSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentOneRediUpdateConfigSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneUpdateConfigSwarmRediEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentOneRediUpdateConfigSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentOneRediUpdateConfigSwarmUnion$outboundSchema: z.ZodType<
  EnvironmentOneRediUpdateConfigSwarmUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentOneRediUpdateConfigSwarmUnion
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentOneUpdateConfigSwarmRediEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRediUpdateConfigSwarmUnion$ {
  /** @deprecated use `EnvironmentOneRediUpdateConfigSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentOneRediUpdateConfigSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentOneRediUpdateConfigSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentOneRediUpdateConfigSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentOneRediUpdateConfigSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentOneRediUpdateConfigSwarmUnion$Outbound;
}

export function environmentOneRediUpdateConfigSwarmUnionToJSON(
  environmentOneRediUpdateConfigSwarmUnion:
    EnvironmentOneRediUpdateConfigSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentOneRediUpdateConfigSwarmUnion$outboundSchema.parse(
      environmentOneRediUpdateConfigSwarmUnion,
    ),
  );
}

export function environmentOneRediUpdateConfigSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentOneRediUpdateConfigSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentOneRediUpdateConfigSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentOneRediUpdateConfigSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneRedi$inboundSchema: z.ZodType<
  EnvironmentOneRedi,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  applicationStatus: EnvironmentOneRediApplicationStatus$inboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databasePassword: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneHealthCheckSwarmRediEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  labelsSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneLabelsSwarmRediEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneModeSwarmRediEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  name: z.string(),
  networkSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneNetworkSwarmRediEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  placementSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOnePlacementSwarmRediEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  redisId: z.string(),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneRestartPolicySwarmRediEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  rollbackConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneRollbackConfigSwarmRediEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneUpdateConfigSwarmRediEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
});

/** @internal */
export type EnvironmentOneRedi$Outbound = {
  appName: string;
  applicationStatus: string;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databasePassword: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  labelsSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  name: string;
  networkSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  placementSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  redisId: string;
  replicas: number;
  restartPolicySwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  rollbackConfigSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  serverId: string | null;
  updateConfigSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
};

/** @internal */
export const EnvironmentOneRedi$outboundSchema: z.ZodType<
  EnvironmentOneRedi$Outbound,
  z.ZodTypeDef,
  EnvironmentOneRedi
> = z.object({
  appName: z.string(),
  applicationStatus: EnvironmentOneRediApplicationStatus$outboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databasePassword: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneHealthCheckSwarmRediEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  labelsSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneLabelsSwarmRediEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneModeSwarmRediEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  name: z.string(),
  networkSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneNetworkSwarmRediEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  placementSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOnePlacementSwarmRediEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  redisId: z.string(),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneRestartPolicySwarmRediEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  rollbackConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneRollbackConfigSwarmRediEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentOneUpdateConfigSwarmRediEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneRedi$ {
  /** @deprecated use `EnvironmentOneRedi$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneRedi$inboundSchema;
  /** @deprecated use `EnvironmentOneRedi$outboundSchema` instead. */
  export const outboundSchema = EnvironmentOneRedi$outboundSchema;
  /** @deprecated use `EnvironmentOneRedi$Outbound` instead. */
  export type Outbound = EnvironmentOneRedi$Outbound;
}

export function environmentOneRediToJSON(
  environmentOneRedi: EnvironmentOneRedi,
): string {
  return JSON.stringify(
    EnvironmentOneRedi$outboundSchema.parse(environmentOneRedi),
  );
}

export function environmentOneRediFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneRedi, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentOneRedi$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneRedi' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneResponseBody$inboundSchema: z.ZodType<
  EnvironmentOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  applications: z.array(z.lazy(() => EnvironmentOneApplication$inboundSchema)),
  compose: z.array(z.lazy(() => EnvironmentOneCompose$inboundSchema)),
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  mariadb: z.array(z.lazy(() => EnvironmentOneMariadb$inboundSchema)),
  mongo: z.array(z.lazy(() => EnvironmentOneMongo$inboundSchema)),
  mysql: z.array(z.lazy(() => EnvironmentOneMysql$inboundSchema)),
  name: z.string(),
  postgres: z.array(z.lazy(() => EnvironmentOnePostgre$inboundSchema)),
  project: z.lazy(() => EnvironmentOneProject$inboundSchema),
  projectId: z.string(),
  redis: z.array(z.lazy(() => EnvironmentOneRedi$inboundSchema)),
});

/** @internal */
export type EnvironmentOneResponseBody$Outbound = {
  applications: Array<EnvironmentOneApplication$Outbound>;
  compose: Array<EnvironmentOneCompose$Outbound>;
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  mariadb: Array<EnvironmentOneMariadb$Outbound>;
  mongo: Array<EnvironmentOneMongo$Outbound>;
  mysql: Array<EnvironmentOneMysql$Outbound>;
  name: string;
  postgres: Array<EnvironmentOnePostgre$Outbound>;
  project: EnvironmentOneProject$Outbound;
  projectId: string;
  redis: Array<EnvironmentOneRedi$Outbound>;
};

/** @internal */
export const EnvironmentOneResponseBody$outboundSchema: z.ZodType<
  EnvironmentOneResponseBody$Outbound,
  z.ZodTypeDef,
  EnvironmentOneResponseBody
> = z.object({
  applications: z.array(z.lazy(() => EnvironmentOneApplication$outboundSchema)),
  compose: z.array(z.lazy(() => EnvironmentOneCompose$outboundSchema)),
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  mariadb: z.array(z.lazy(() => EnvironmentOneMariadb$outboundSchema)),
  mongo: z.array(z.lazy(() => EnvironmentOneMongo$outboundSchema)),
  mysql: z.array(z.lazy(() => EnvironmentOneMysql$outboundSchema)),
  name: z.string(),
  postgres: z.array(z.lazy(() => EnvironmentOnePostgre$outboundSchema)),
  project: z.lazy(() => EnvironmentOneProject$outboundSchema),
  projectId: z.string(),
  redis: z.array(z.lazy(() => EnvironmentOneRedi$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneResponseBody$ {
  /** @deprecated use `EnvironmentOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneResponseBody$inboundSchema;
  /** @deprecated use `EnvironmentOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = EnvironmentOneResponseBody$outboundSchema;
  /** @deprecated use `EnvironmentOneResponseBody$Outbound` instead. */
  export type Outbound = EnvironmentOneResponseBody$Outbound;
}

export function environmentOneResponseBodyToJSON(
  environmentOneResponseBody: EnvironmentOneResponseBody,
): string {
  return JSON.stringify(
    EnvironmentOneResponseBody$outboundSchema.parse(environmentOneResponseBody),
  );
}

export function environmentOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneResponseBody' from JSON`,
  );
}

/** @internal */
export const EnvironmentOneResponse$inboundSchema: z.ZodType<
  EnvironmentOneResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => EnvironmentOneResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type EnvironmentOneResponse$Outbound =
  | EnvironmentOneResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const EnvironmentOneResponse$outboundSchema: z.ZodType<
  EnvironmentOneResponse$Outbound,
  z.ZodTypeDef,
  EnvironmentOneResponse
> = z.union([
  z.lazy(() => EnvironmentOneResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOneResponse$ {
  /** @deprecated use `EnvironmentOneResponse$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOneResponse$inboundSchema;
  /** @deprecated use `EnvironmentOneResponse$outboundSchema` instead. */
  export const outboundSchema = EnvironmentOneResponse$outboundSchema;
  /** @deprecated use `EnvironmentOneResponse$Outbound` instead. */
  export type Outbound = EnvironmentOneResponse$Outbound;
}

export function environmentOneResponseToJSON(
  environmentOneResponse: EnvironmentOneResponse,
): string {
  return JSON.stringify(
    EnvironmentOneResponse$outboundSchema.parse(environmentOneResponse),
  );
}

export function environmentOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOneResponse' from JSON`,
  );
}
