/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type MysqlRebuildRequest = {
  mysqlId: string;
};

export type MysqlRebuildResponse = models.ErrorT | boolean;

/** @internal */
export const MysqlRebuildRequest$inboundSchema: z.ZodType<
  MysqlRebuildRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mysqlId: z.string(),
});

/** @internal */
export type MysqlRebuildRequest$Outbound = {
  mysqlId: string;
};

/** @internal */
export const MysqlRebuildRequest$outboundSchema: z.ZodType<
  MysqlRebuildRequest$Outbound,
  z.ZodTypeDef,
  MysqlRebuildRequest
> = z.object({
  mysqlId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRebuildRequest$ {
  /** @deprecated use `MysqlRebuildRequest$inboundSchema` instead. */
  export const inboundSchema = MysqlRebuildRequest$inboundSchema;
  /** @deprecated use `MysqlRebuildRequest$outboundSchema` instead. */
  export const outboundSchema = MysqlRebuildRequest$outboundSchema;
  /** @deprecated use `MysqlRebuildRequest$Outbound` instead. */
  export type Outbound = MysqlRebuildRequest$Outbound;
}

export function mysqlRebuildRequestToJSON(
  mysqlRebuildRequest: MysqlRebuildRequest,
): string {
  return JSON.stringify(
    MysqlRebuildRequest$outboundSchema.parse(mysqlRebuildRequest),
  );
}

export function mysqlRebuildRequestFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRebuildRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRebuildRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRebuildRequest' from JSON`,
  );
}

/** @internal */
export const MysqlRebuildResponse$inboundSchema: z.ZodType<
  MysqlRebuildResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.boolean()]);

/** @internal */
export type MysqlRebuildResponse$Outbound = models.ErrorT$Outbound | boolean;

/** @internal */
export const MysqlRebuildResponse$outboundSchema: z.ZodType<
  MysqlRebuildResponse$Outbound,
  z.ZodTypeDef,
  MysqlRebuildResponse
> = z.union([models.ErrorT$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRebuildResponse$ {
  /** @deprecated use `MysqlRebuildResponse$inboundSchema` instead. */
  export const inboundSchema = MysqlRebuildResponse$inboundSchema;
  /** @deprecated use `MysqlRebuildResponse$outboundSchema` instead. */
  export const outboundSchema = MysqlRebuildResponse$outboundSchema;
  /** @deprecated use `MysqlRebuildResponse$Outbound` instead. */
  export type Outbound = MysqlRebuildResponse$Outbound;
}

export function mysqlRebuildResponseToJSON(
  mysqlRebuildResponse: MysqlRebuildResponse,
): string {
  return JSON.stringify(
    MysqlRebuildResponse$outboundSchema.parse(mysqlRebuildResponse),
  );
}

export function mysqlRebuildResponseFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRebuildResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRebuildResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRebuildResponse' from JSON`,
  );
}
