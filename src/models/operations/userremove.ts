/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UserRemoveRequest = {
  userId: string;
};

/** @internal */
export const UserRemoveRequest$inboundSchema: z.ZodType<
  UserRemoveRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  userId: z.string(),
});

/** @internal */
export type UserRemoveRequest$Outbound = {
  userId: string;
};

/** @internal */
export const UserRemoveRequest$outboundSchema: z.ZodType<
  UserRemoveRequest$Outbound,
  z.ZodTypeDef,
  UserRemoveRequest
> = z.object({
  userId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserRemoveRequest$ {
  /** @deprecated use `UserRemoveRequest$inboundSchema` instead. */
  export const inboundSchema = UserRemoveRequest$inboundSchema;
  /** @deprecated use `UserRemoveRequest$outboundSchema` instead. */
  export const outboundSchema = UserRemoveRequest$outboundSchema;
  /** @deprecated use `UserRemoveRequest$Outbound` instead. */
  export type Outbound = UserRemoveRequest$Outbound;
}

export function userRemoveRequestToJSON(
  userRemoveRequest: UserRemoveRequest,
): string {
  return JSON.stringify(
    UserRemoveRequest$outboundSchema.parse(userRemoveRequest),
  );
}

export function userRemoveRequestFromJSON(
  jsonString: string,
): SafeParseResult<UserRemoveRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserRemoveRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserRemoveRequest' from JSON`,
  );
}
