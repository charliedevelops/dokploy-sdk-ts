/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ProjectCreateRequest = {
  description?: string | null | undefined;
  env?: string | undefined;
  name: string;
};

export type ProjectCreateEnvironment = {
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  name: string;
  projectId: string;
};

export type ProjectCreateProject = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

/**
 * Successful response
 */
export type ProjectCreateResponseBody = {
  environment: ProjectCreateEnvironment;
  project: ProjectCreateProject;
};

export type ProjectCreateResponse = ProjectCreateResponseBody | models.ErrorT;

/** @internal */
export const ProjectCreateRequest$inboundSchema: z.ZodType<
  ProjectCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.nullable(z.string()).optional(),
  env: z.string().optional(),
  name: z.string(),
});

/** @internal */
export type ProjectCreateRequest$Outbound = {
  description?: string | null | undefined;
  env?: string | undefined;
  name: string;
};

/** @internal */
export const ProjectCreateRequest$outboundSchema: z.ZodType<
  ProjectCreateRequest$Outbound,
  z.ZodTypeDef,
  ProjectCreateRequest
> = z.object({
  description: z.nullable(z.string()).optional(),
  env: z.string().optional(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectCreateRequest$ {
  /** @deprecated use `ProjectCreateRequest$inboundSchema` instead. */
  export const inboundSchema = ProjectCreateRequest$inboundSchema;
  /** @deprecated use `ProjectCreateRequest$outboundSchema` instead. */
  export const outboundSchema = ProjectCreateRequest$outboundSchema;
  /** @deprecated use `ProjectCreateRequest$Outbound` instead. */
  export type Outbound = ProjectCreateRequest$Outbound;
}

export function projectCreateRequestToJSON(
  projectCreateRequest: ProjectCreateRequest,
): string {
  return JSON.stringify(
    ProjectCreateRequest$outboundSchema.parse(projectCreateRequest),
  );
}

export function projectCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<ProjectCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectCreateRequest' from JSON`,
  );
}

/** @internal */
export const ProjectCreateEnvironment$inboundSchema: z.ZodType<
  ProjectCreateEnvironment,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  name: z.string(),
  projectId: z.string(),
});

/** @internal */
export type ProjectCreateEnvironment$Outbound = {
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  name: string;
  projectId: string;
};

/** @internal */
export const ProjectCreateEnvironment$outboundSchema: z.ZodType<
  ProjectCreateEnvironment$Outbound,
  z.ZodTypeDef,
  ProjectCreateEnvironment
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  name: z.string(),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectCreateEnvironment$ {
  /** @deprecated use `ProjectCreateEnvironment$inboundSchema` instead. */
  export const inboundSchema = ProjectCreateEnvironment$inboundSchema;
  /** @deprecated use `ProjectCreateEnvironment$outboundSchema` instead. */
  export const outboundSchema = ProjectCreateEnvironment$outboundSchema;
  /** @deprecated use `ProjectCreateEnvironment$Outbound` instead. */
  export type Outbound = ProjectCreateEnvironment$Outbound;
}

export function projectCreateEnvironmentToJSON(
  projectCreateEnvironment: ProjectCreateEnvironment,
): string {
  return JSON.stringify(
    ProjectCreateEnvironment$outboundSchema.parse(projectCreateEnvironment),
  );
}

export function projectCreateEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<ProjectCreateEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectCreateEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectCreateEnvironment' from JSON`,
  );
}

/** @internal */
export const ProjectCreateProject$inboundSchema: z.ZodType<
  ProjectCreateProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/** @internal */
export type ProjectCreateProject$Outbound = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

/** @internal */
export const ProjectCreateProject$outboundSchema: z.ZodType<
  ProjectCreateProject$Outbound,
  z.ZodTypeDef,
  ProjectCreateProject
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectCreateProject$ {
  /** @deprecated use `ProjectCreateProject$inboundSchema` instead. */
  export const inboundSchema = ProjectCreateProject$inboundSchema;
  /** @deprecated use `ProjectCreateProject$outboundSchema` instead. */
  export const outboundSchema = ProjectCreateProject$outboundSchema;
  /** @deprecated use `ProjectCreateProject$Outbound` instead. */
  export type Outbound = ProjectCreateProject$Outbound;
}

export function projectCreateProjectToJSON(
  projectCreateProject: ProjectCreateProject,
): string {
  return JSON.stringify(
    ProjectCreateProject$outboundSchema.parse(projectCreateProject),
  );
}

export function projectCreateProjectFromJSON(
  jsonString: string,
): SafeParseResult<ProjectCreateProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectCreateProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectCreateProject' from JSON`,
  );
}

/** @internal */
export const ProjectCreateResponseBody$inboundSchema: z.ZodType<
  ProjectCreateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  environment: z.lazy(() => ProjectCreateEnvironment$inboundSchema),
  project: z.lazy(() => ProjectCreateProject$inboundSchema),
});

/** @internal */
export type ProjectCreateResponseBody$Outbound = {
  environment: ProjectCreateEnvironment$Outbound;
  project: ProjectCreateProject$Outbound;
};

/** @internal */
export const ProjectCreateResponseBody$outboundSchema: z.ZodType<
  ProjectCreateResponseBody$Outbound,
  z.ZodTypeDef,
  ProjectCreateResponseBody
> = z.object({
  environment: z.lazy(() => ProjectCreateEnvironment$outboundSchema),
  project: z.lazy(() => ProjectCreateProject$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectCreateResponseBody$ {
  /** @deprecated use `ProjectCreateResponseBody$inboundSchema` instead. */
  export const inboundSchema = ProjectCreateResponseBody$inboundSchema;
  /** @deprecated use `ProjectCreateResponseBody$outboundSchema` instead. */
  export const outboundSchema = ProjectCreateResponseBody$outboundSchema;
  /** @deprecated use `ProjectCreateResponseBody$Outbound` instead. */
  export type Outbound = ProjectCreateResponseBody$Outbound;
}

export function projectCreateResponseBodyToJSON(
  projectCreateResponseBody: ProjectCreateResponseBody,
): string {
  return JSON.stringify(
    ProjectCreateResponseBody$outboundSchema.parse(projectCreateResponseBody),
  );
}

export function projectCreateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ProjectCreateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectCreateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectCreateResponseBody' from JSON`,
  );
}

/** @internal */
export const ProjectCreateResponse$inboundSchema: z.ZodType<
  ProjectCreateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ProjectCreateResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type ProjectCreateResponse$Outbound =
  | ProjectCreateResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const ProjectCreateResponse$outboundSchema: z.ZodType<
  ProjectCreateResponse$Outbound,
  z.ZodTypeDef,
  ProjectCreateResponse
> = z.union([
  z.lazy(() => ProjectCreateResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectCreateResponse$ {
  /** @deprecated use `ProjectCreateResponse$inboundSchema` instead. */
  export const inboundSchema = ProjectCreateResponse$inboundSchema;
  /** @deprecated use `ProjectCreateResponse$outboundSchema` instead. */
  export const outboundSchema = ProjectCreateResponse$outboundSchema;
  /** @deprecated use `ProjectCreateResponse$Outbound` instead. */
  export type Outbound = ProjectCreateResponse$Outbound;
}

export function projectCreateResponseToJSON(
  projectCreateResponse: ProjectCreateResponse,
): string {
  return JSON.stringify(
    ProjectCreateResponse$outboundSchema.parse(projectCreateResponse),
  );
}

export function projectCreateResponseFromJSON(
  jsonString: string,
): SafeParseResult<ProjectCreateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectCreateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectCreateResponse' from JSON`,
  );
}
