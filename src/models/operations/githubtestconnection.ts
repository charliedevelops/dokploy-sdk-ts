/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GithubTestConnectionRequest = {
  githubId: string;
};

export type GithubTestConnectionResponse = models.ErrorT | string;

/** @internal */
export const GithubTestConnectionRequest$inboundSchema: z.ZodType<
  GithubTestConnectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  githubId: z.string(),
});

/** @internal */
export type GithubTestConnectionRequest$Outbound = {
  githubId: string;
};

/** @internal */
export const GithubTestConnectionRequest$outboundSchema: z.ZodType<
  GithubTestConnectionRequest$Outbound,
  z.ZodTypeDef,
  GithubTestConnectionRequest
> = z.object({
  githubId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GithubTestConnectionRequest$ {
  /** @deprecated use `GithubTestConnectionRequest$inboundSchema` instead. */
  export const inboundSchema = GithubTestConnectionRequest$inboundSchema;
  /** @deprecated use `GithubTestConnectionRequest$outboundSchema` instead. */
  export const outboundSchema = GithubTestConnectionRequest$outboundSchema;
  /** @deprecated use `GithubTestConnectionRequest$Outbound` instead. */
  export type Outbound = GithubTestConnectionRequest$Outbound;
}

export function githubTestConnectionRequestToJSON(
  githubTestConnectionRequest: GithubTestConnectionRequest,
): string {
  return JSON.stringify(
    GithubTestConnectionRequest$outboundSchema.parse(
      githubTestConnectionRequest,
    ),
  );
}

export function githubTestConnectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GithubTestConnectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GithubTestConnectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GithubTestConnectionRequest' from JSON`,
  );
}

/** @internal */
export const GithubTestConnectionResponse$inboundSchema: z.ZodType<
  GithubTestConnectionResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.string()]);

/** @internal */
export type GithubTestConnectionResponse$Outbound =
  | models.ErrorT$Outbound
  | string;

/** @internal */
export const GithubTestConnectionResponse$outboundSchema: z.ZodType<
  GithubTestConnectionResponse$Outbound,
  z.ZodTypeDef,
  GithubTestConnectionResponse
> = z.union([models.ErrorT$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GithubTestConnectionResponse$ {
  /** @deprecated use `GithubTestConnectionResponse$inboundSchema` instead. */
  export const inboundSchema = GithubTestConnectionResponse$inboundSchema;
  /** @deprecated use `GithubTestConnectionResponse$outboundSchema` instead. */
  export const outboundSchema = GithubTestConnectionResponse$outboundSchema;
  /** @deprecated use `GithubTestConnectionResponse$Outbound` instead. */
  export type Outbound = GithubTestConnectionResponse$Outbound;
}

export function githubTestConnectionResponseToJSON(
  githubTestConnectionResponse: GithubTestConnectionResponse,
): string {
  return JSON.stringify(
    GithubTestConnectionResponse$outboundSchema.parse(
      githubTestConnectionResponse,
    ),
  );
}

export function githubTestConnectionResponseFromJSON(
  jsonString: string,
): SafeParseResult<GithubTestConnectionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GithubTestConnectionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GithubTestConnectionResponse' from JSON`,
  );
}
