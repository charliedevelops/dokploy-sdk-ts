/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export const BitbucketBitbucketProvidersProviderType = {
  Github: "github",
  Gitlab: "gitlab",
  Bitbucket: "bitbucket",
  Gitea: "gitea",
} as const;
export type BitbucketBitbucketProvidersProviderType = ClosedEnum<
  typeof BitbucketBitbucketProvidersProviderType
>;

export type BitbucketBitbucketProvidersGitProvider = {
  createdAt: string;
  gitProviderId: string;
  name: string;
  organizationId: string;
  providerType: BitbucketBitbucketProvidersProviderType;
  userId: string;
};

export type BitbucketBitbucketProvidersResponseBody = {
  bitbucketId: string;
  gitProvider: BitbucketBitbucketProvidersGitProvider;
};

export type BitbucketBitbucketProvidersResponse =
  | models.ErrorT
  | Array<BitbucketBitbucketProvidersResponseBody>;

/** @internal */
export const BitbucketBitbucketProvidersProviderType$inboundSchema:
  z.ZodNativeEnum<typeof BitbucketBitbucketProvidersProviderType> = z
    .nativeEnum(BitbucketBitbucketProvidersProviderType);

/** @internal */
export const BitbucketBitbucketProvidersProviderType$outboundSchema:
  z.ZodNativeEnum<typeof BitbucketBitbucketProvidersProviderType> =
    BitbucketBitbucketProvidersProviderType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BitbucketBitbucketProvidersProviderType$ {
  /** @deprecated use `BitbucketBitbucketProvidersProviderType$inboundSchema` instead. */
  export const inboundSchema =
    BitbucketBitbucketProvidersProviderType$inboundSchema;
  /** @deprecated use `BitbucketBitbucketProvidersProviderType$outboundSchema` instead. */
  export const outboundSchema =
    BitbucketBitbucketProvidersProviderType$outboundSchema;
}

/** @internal */
export const BitbucketBitbucketProvidersGitProvider$inboundSchema: z.ZodType<
  BitbucketBitbucketProvidersGitProvider,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  gitProviderId: z.string(),
  name: z.string(),
  organizationId: z.string(),
  providerType: BitbucketBitbucketProvidersProviderType$inboundSchema,
  userId: z.string(),
});

/** @internal */
export type BitbucketBitbucketProvidersGitProvider$Outbound = {
  createdAt: string;
  gitProviderId: string;
  name: string;
  organizationId: string;
  providerType: string;
  userId: string;
};

/** @internal */
export const BitbucketBitbucketProvidersGitProvider$outboundSchema: z.ZodType<
  BitbucketBitbucketProvidersGitProvider$Outbound,
  z.ZodTypeDef,
  BitbucketBitbucketProvidersGitProvider
> = z.object({
  createdAt: z.string(),
  gitProviderId: z.string(),
  name: z.string(),
  organizationId: z.string(),
  providerType: BitbucketBitbucketProvidersProviderType$outboundSchema,
  userId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BitbucketBitbucketProvidersGitProvider$ {
  /** @deprecated use `BitbucketBitbucketProvidersGitProvider$inboundSchema` instead. */
  export const inboundSchema =
    BitbucketBitbucketProvidersGitProvider$inboundSchema;
  /** @deprecated use `BitbucketBitbucketProvidersGitProvider$outboundSchema` instead. */
  export const outboundSchema =
    BitbucketBitbucketProvidersGitProvider$outboundSchema;
  /** @deprecated use `BitbucketBitbucketProvidersGitProvider$Outbound` instead. */
  export type Outbound = BitbucketBitbucketProvidersGitProvider$Outbound;
}

export function bitbucketBitbucketProvidersGitProviderToJSON(
  bitbucketBitbucketProvidersGitProvider:
    BitbucketBitbucketProvidersGitProvider,
): string {
  return JSON.stringify(
    BitbucketBitbucketProvidersGitProvider$outboundSchema.parse(
      bitbucketBitbucketProvidersGitProvider,
    ),
  );
}

export function bitbucketBitbucketProvidersGitProviderFromJSON(
  jsonString: string,
): SafeParseResult<BitbucketBitbucketProvidersGitProvider, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BitbucketBitbucketProvidersGitProvider$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BitbucketBitbucketProvidersGitProvider' from JSON`,
  );
}

/** @internal */
export const BitbucketBitbucketProvidersResponseBody$inboundSchema: z.ZodType<
  BitbucketBitbucketProvidersResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  bitbucketId: z.string(),
  gitProvider: z.lazy(() =>
    BitbucketBitbucketProvidersGitProvider$inboundSchema
  ),
});

/** @internal */
export type BitbucketBitbucketProvidersResponseBody$Outbound = {
  bitbucketId: string;
  gitProvider: BitbucketBitbucketProvidersGitProvider$Outbound;
};

/** @internal */
export const BitbucketBitbucketProvidersResponseBody$outboundSchema: z.ZodType<
  BitbucketBitbucketProvidersResponseBody$Outbound,
  z.ZodTypeDef,
  BitbucketBitbucketProvidersResponseBody
> = z.object({
  bitbucketId: z.string(),
  gitProvider: z.lazy(() =>
    BitbucketBitbucketProvidersGitProvider$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BitbucketBitbucketProvidersResponseBody$ {
  /** @deprecated use `BitbucketBitbucketProvidersResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    BitbucketBitbucketProvidersResponseBody$inboundSchema;
  /** @deprecated use `BitbucketBitbucketProvidersResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    BitbucketBitbucketProvidersResponseBody$outboundSchema;
  /** @deprecated use `BitbucketBitbucketProvidersResponseBody$Outbound` instead. */
  export type Outbound = BitbucketBitbucketProvidersResponseBody$Outbound;
}

export function bitbucketBitbucketProvidersResponseBodyToJSON(
  bitbucketBitbucketProvidersResponseBody:
    BitbucketBitbucketProvidersResponseBody,
): string {
  return JSON.stringify(
    BitbucketBitbucketProvidersResponseBody$outboundSchema.parse(
      bitbucketBitbucketProvidersResponseBody,
    ),
  );
}

export function bitbucketBitbucketProvidersResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  BitbucketBitbucketProvidersResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BitbucketBitbucketProvidersResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BitbucketBitbucketProvidersResponseBody' from JSON`,
  );
}

/** @internal */
export const BitbucketBitbucketProvidersResponse$inboundSchema: z.ZodType<
  BitbucketBitbucketProvidersResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ErrorT$inboundSchema,
  z.array(z.lazy(() => BitbucketBitbucketProvidersResponseBody$inboundSchema)),
]);

/** @internal */
export type BitbucketBitbucketProvidersResponse$Outbound =
  | models.ErrorT$Outbound
  | Array<BitbucketBitbucketProvidersResponseBody$Outbound>;

/** @internal */
export const BitbucketBitbucketProvidersResponse$outboundSchema: z.ZodType<
  BitbucketBitbucketProvidersResponse$Outbound,
  z.ZodTypeDef,
  BitbucketBitbucketProvidersResponse
> = z.union([
  models.ErrorT$outboundSchema,
  z.array(z.lazy(() => BitbucketBitbucketProvidersResponseBody$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BitbucketBitbucketProvidersResponse$ {
  /** @deprecated use `BitbucketBitbucketProvidersResponse$inboundSchema` instead. */
  export const inboundSchema =
    BitbucketBitbucketProvidersResponse$inboundSchema;
  /** @deprecated use `BitbucketBitbucketProvidersResponse$outboundSchema` instead. */
  export const outboundSchema =
    BitbucketBitbucketProvidersResponse$outboundSchema;
  /** @deprecated use `BitbucketBitbucketProvidersResponse$Outbound` instead. */
  export type Outbound = BitbucketBitbucketProvidersResponse$Outbound;
}

export function bitbucketBitbucketProvidersResponseToJSON(
  bitbucketBitbucketProvidersResponse: BitbucketBitbucketProvidersResponse,
): string {
  return JSON.stringify(
    BitbucketBitbucketProvidersResponse$outboundSchema.parse(
      bitbucketBitbucketProvidersResponse,
    ),
  );
}

export function bitbucketBitbucketProvidersResponseFromJSON(
  jsonString: string,
): SafeParseResult<BitbucketBitbucketProvidersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BitbucketBitbucketProvidersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BitbucketBitbucketProvidersResponse' from JSON`,
  );
}
