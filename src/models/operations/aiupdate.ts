/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AiUpdateSecurity = {
  authorization: string;
};

export type AiUpdateRequest = {
  aiId: string;
  apiKey?: string | undefined;
  apiUrl?: string | undefined;
  createdAt?: string | undefined;
  isEnabled?: boolean | undefined;
  model?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const AiUpdateSecurity$inboundSchema: z.ZodType<
  AiUpdateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type AiUpdateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const AiUpdateSecurity$outboundSchema: z.ZodType<
  AiUpdateSecurity$Outbound,
  z.ZodTypeDef,
  AiUpdateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AiUpdateSecurity$ {
  /** @deprecated use `AiUpdateSecurity$inboundSchema` instead. */
  export const inboundSchema = AiUpdateSecurity$inboundSchema;
  /** @deprecated use `AiUpdateSecurity$outboundSchema` instead. */
  export const outboundSchema = AiUpdateSecurity$outboundSchema;
  /** @deprecated use `AiUpdateSecurity$Outbound` instead. */
  export type Outbound = AiUpdateSecurity$Outbound;
}

export function aiUpdateSecurityToJSON(
  aiUpdateSecurity: AiUpdateSecurity,
): string {
  return JSON.stringify(
    AiUpdateSecurity$outboundSchema.parse(aiUpdateSecurity),
  );
}

export function aiUpdateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<AiUpdateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AiUpdateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AiUpdateSecurity' from JSON`,
  );
}

/** @internal */
export const AiUpdateRequest$inboundSchema: z.ZodType<
  AiUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  aiId: z.string(),
  apiKey: z.string().optional(),
  apiUrl: z.string().optional(),
  createdAt: z.string().optional(),
  isEnabled: z.boolean().optional(),
  model: z.string().optional(),
  name: z.string().optional(),
});

/** @internal */
export type AiUpdateRequest$Outbound = {
  aiId: string;
  apiKey?: string | undefined;
  apiUrl?: string | undefined;
  createdAt?: string | undefined;
  isEnabled?: boolean | undefined;
  model?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const AiUpdateRequest$outboundSchema: z.ZodType<
  AiUpdateRequest$Outbound,
  z.ZodTypeDef,
  AiUpdateRequest
> = z.object({
  aiId: z.string(),
  apiKey: z.string().optional(),
  apiUrl: z.string().optional(),
  createdAt: z.string().optional(),
  isEnabled: z.boolean().optional(),
  model: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AiUpdateRequest$ {
  /** @deprecated use `AiUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = AiUpdateRequest$inboundSchema;
  /** @deprecated use `AiUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = AiUpdateRequest$outboundSchema;
  /** @deprecated use `AiUpdateRequest$Outbound` instead. */
  export type Outbound = AiUpdateRequest$Outbound;
}

export function aiUpdateRequestToJSON(
  aiUpdateRequest: AiUpdateRequest,
): string {
  return JSON.stringify(AiUpdateRequest$outboundSchema.parse(aiUpdateRequest));
}

export function aiUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<AiUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AiUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AiUpdateRequest' from JSON`,
  );
}
