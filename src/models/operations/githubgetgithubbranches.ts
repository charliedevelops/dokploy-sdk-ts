/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GithubGetGithubBranchesRequest = {
  repo: string;
  owner: string;
  githubId?: string | undefined;
};

/** @internal */
export const GithubGetGithubBranchesRequest$inboundSchema: z.ZodType<
  GithubGetGithubBranchesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  repo: z.string(),
  owner: z.string(),
  githubId: z.string().optional(),
});

/** @internal */
export type GithubGetGithubBranchesRequest$Outbound = {
  repo: string;
  owner: string;
  githubId?: string | undefined;
};

/** @internal */
export const GithubGetGithubBranchesRequest$outboundSchema: z.ZodType<
  GithubGetGithubBranchesRequest$Outbound,
  z.ZodTypeDef,
  GithubGetGithubBranchesRequest
> = z.object({
  repo: z.string(),
  owner: z.string(),
  githubId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GithubGetGithubBranchesRequest$ {
  /** @deprecated use `GithubGetGithubBranchesRequest$inboundSchema` instead. */
  export const inboundSchema = GithubGetGithubBranchesRequest$inboundSchema;
  /** @deprecated use `GithubGetGithubBranchesRequest$outboundSchema` instead. */
  export const outboundSchema = GithubGetGithubBranchesRequest$outboundSchema;
  /** @deprecated use `GithubGetGithubBranchesRequest$Outbound` instead. */
  export type Outbound = GithubGetGithubBranchesRequest$Outbound;
}

export function githubGetGithubBranchesRequestToJSON(
  githubGetGithubBranchesRequest: GithubGetGithubBranchesRequest,
): string {
  return JSON.stringify(
    GithubGetGithubBranchesRequest$outboundSchema.parse(
      githubGetGithubBranchesRequest,
    ),
  );
}

export function githubGetGithubBranchesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GithubGetGithubBranchesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GithubGetGithubBranchesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GithubGetGithubBranchesRequest' from JSON`,
  );
}
