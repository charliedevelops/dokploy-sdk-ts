/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type MongoStopSecurity = {
  authorization: string;
};

export type MongoStopRequest = {
  mongoId: string;
};

export const MongoStopApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type MongoStopApplicationStatus = ClosedEnum<
  typeof MongoStopApplicationStatus
>;

export const MongoStopBackupType = {
  Database: "database",
  Compose: "compose",
} as const;
export type MongoStopBackupType = ClosedEnum<typeof MongoStopBackupType>;

export const MongoStopDatabaseType = {
  Postgres: "postgres",
  Mariadb: "mariadb",
  Mysql: "mysql",
  Mongo: "mongo",
  WebServer: "web-server",
} as const;
export type MongoStopDatabaseType = ClosedEnum<typeof MongoStopDatabaseType>;

export const MongoStopMetadataEnum = {
  Null: "null",
} as const;
export type MongoStopMetadataEnum = ClosedEnum<typeof MongoStopMetadataEnum>;

export type MongoStopMariadb = {
  databasePassword: string;
  databaseUser: string;
};

export type MongoStopMongo = {
  databasePassword: string;
  databaseUser: string;
};

export type MongoStopMysql = {
  databaseRootPassword: string;
};

export type MongoStopPostgres = {
  databaseUser: string;
};

export type MongoStopMetadata = {
  mariadb?: MongoStopMariadb | undefined;
  mongo?: MongoStopMongo | undefined;
  mysql?: MongoStopMysql | undefined;
  postgres?: MongoStopPostgres | undefined;
};

export type MongoStopMetadataUnion = MongoStopMetadata | MongoStopMetadataEnum;

export type MongoStopBackup = {
  appName: string;
  backupId: string;
  backupType: MongoStopBackupType;
  composeId: string | null;
  database: string;
  databaseType: MongoStopDatabaseType;
  destinationId: string;
  enabled: boolean | null;
  keepLatestCount: number | null;
  mariadbId: string | null;
  metadata?: MongoStopMetadata | MongoStopMetadataEnum | null | undefined;
  mongoId: string | null;
  mysqlId: string | null;
  postgresId: string | null;
  prefix: string;
  schedule: string;
  serviceName: string | null;
  userId: string | null;
};

export type MongoStopProject = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

export type MongoStopEnvironment = {
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  name: string;
  project: MongoStopProject;
  projectId: string;
};

export type MongoStopHealthCheckSwarm = {
  interval?: number | undefined;
  retries?: number | undefined;
  startPeriod?: number | undefined;
  test?: Array<string> | undefined;
  timeout?: number | undefined;
};

export type MongoStopGlobal = {};

export type MongoStopGlobalJob = {};

export type MongoStopReplicated = {
  replicas?: number | undefined;
};

export type MongoStopReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type MongoStopModeSwarm = {
  global?: MongoStopGlobal | undefined;
  globalJob?: MongoStopGlobalJob | undefined;
  replicated?: MongoStopReplicated | undefined;
  replicatedJob?: MongoStopReplicatedJob | undefined;
};

export const MongoStopServiceType = {
  Application: "application",
  Postgres: "postgres",
  Mysql: "mysql",
  Mariadb: "mariadb",
  Mongo: "mongo",
  Redis: "redis",
  Compose: "compose",
} as const;
export type MongoStopServiceType = ClosedEnum<typeof MongoStopServiceType>;

export const MongoStopType = {
  Bind: "bind",
  Volume: "volume",
  File: "file",
} as const;
export type MongoStopType = ClosedEnum<typeof MongoStopType>;

export type MongoStopMount = {
  applicationId: string | null;
  composeId: string | null;
  content: string | null;
  filePath: string | null;
  hostPath: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mountId: string;
  mountPath: string;
  mysqlId: string | null;
  postgresId: string | null;
  redisId: string | null;
  serviceType: MongoStopServiceType;
  type: MongoStopType;
  volumeName: string | null;
};

export type MongoStopDriverOpts = {};

export type MongoStopNetworkSwarm = {
  aliases?: Array<string> | undefined;
  driverOpts?: MongoStopDriverOpts | undefined;
  target?: string | undefined;
};

export type MongoStopPlatform = {
  architecture: string;
  os: string;
};

export type MongoStopSpread = {
  spreadDescriptor: string;
};

export type MongoStopPreference = {
  spread: MongoStopSpread;
};

export type MongoStopPlacementSwarm = {
  constraints?: Array<string> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<MongoStopPlatform> | undefined;
  preferences?: Array<MongoStopPreference> | undefined;
};

export type MongoStopRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type MongoStopRollbackConfigSwarm = {
  delay?: number | undefined;
  failureAction?: string | undefined;
  maxFailureRatio?: number | undefined;
  monitor?: number | undefined;
  order: string;
  parallelism: number;
};

export const MongoStopMetricsConfigEnum = {
  Null: "null",
} as const;
export type MongoStopMetricsConfigEnum = ClosedEnum<
  typeof MongoStopMetricsConfigEnum
>;

export type MongoStopMetricsConfigUnion1 =
  | string
  | number
  | boolean
  | MongoStopMetricsConfigEnum;

export type MongoStopMetricsConfigUnion2 =
  | string
  | number
  | boolean
  | MongoStopMetricsConfigEnum
  | Array<any>
  | { [k: string]: any };

export const MongoStopServerStatus = {
  Active: "active",
  Inactive: "inactive",
} as const;
export type MongoStopServerStatus = ClosedEnum<typeof MongoStopServerStatus>;

export type MongoStopServer = {
  appName: string;
  command: string;
  createdAt: string;
  description: string | null;
  enableDockerCleanup: boolean;
  ipAddress: string;
  metricsConfig:
    | string
    | number
    | boolean
    | MongoStopMetricsConfigEnum
    | Array<any>
    | { [k: string]: any };
  name: string;
  organizationId: string;
  port: number;
  serverId: string;
  serverStatus: MongoStopServerStatus;
  sshKeyId: string | null;
  username: string;
};

export type MongoStopUpdateConfigSwarm = {
  delay?: number | undefined;
  failureAction?: string | undefined;
  maxFailureRatio?: number | undefined;
  monitor?: number | undefined;
  order: string;
  parallelism: number;
};

/**
 * Successful response
 */
export type MongoStopResponseBody = {
  appName: string;
  applicationStatus: MongoStopApplicationStatus;
  backups: Array<MongoStopBackup>;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databasePassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environment: MongoStopEnvironment;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: MongoStopHealthCheckSwarm | null;
  labelsSwarm: { [k: string]: string } | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: MongoStopModeSwarm | null;
  mongoId: string;
  mounts: Array<MongoStopMount>;
  name: string;
  networkSwarm: Array<MongoStopNetworkSwarm> | null;
  placementSwarm: MongoStopPlacementSwarm | null;
  replicaSets: boolean | null;
  replicas: number;
  restartPolicySwarm: MongoStopRestartPolicySwarm | null;
  rollbackConfigSwarm: MongoStopRollbackConfigSwarm | null;
  server: MongoStopServer | null;
  serverId: string | null;
  updateConfigSwarm: MongoStopUpdateConfigSwarm | null;
};

export type MongoStopResponse = MongoStopResponseBody | models.ErrorT;

/** @internal */
export const MongoStopSecurity$inboundSchema: z.ZodType<
  MongoStopSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type MongoStopSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const MongoStopSecurity$outboundSchema: z.ZodType<
  MongoStopSecurity$Outbound,
  z.ZodTypeDef,
  MongoStopSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopSecurity$ {
  /** @deprecated use `MongoStopSecurity$inboundSchema` instead. */
  export const inboundSchema = MongoStopSecurity$inboundSchema;
  /** @deprecated use `MongoStopSecurity$outboundSchema` instead. */
  export const outboundSchema = MongoStopSecurity$outboundSchema;
  /** @deprecated use `MongoStopSecurity$Outbound` instead. */
  export type Outbound = MongoStopSecurity$Outbound;
}

export function mongoStopSecurityToJSON(
  mongoStopSecurity: MongoStopSecurity,
): string {
  return JSON.stringify(
    MongoStopSecurity$outboundSchema.parse(mongoStopSecurity),
  );
}

export function mongoStopSecurityFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopSecurity' from JSON`,
  );
}

/** @internal */
export const MongoStopRequest$inboundSchema: z.ZodType<
  MongoStopRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mongoId: z.string(),
});

/** @internal */
export type MongoStopRequest$Outbound = {
  mongoId: string;
};

/** @internal */
export const MongoStopRequest$outboundSchema: z.ZodType<
  MongoStopRequest$Outbound,
  z.ZodTypeDef,
  MongoStopRequest
> = z.object({
  mongoId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopRequest$ {
  /** @deprecated use `MongoStopRequest$inboundSchema` instead. */
  export const inboundSchema = MongoStopRequest$inboundSchema;
  /** @deprecated use `MongoStopRequest$outboundSchema` instead. */
  export const outboundSchema = MongoStopRequest$outboundSchema;
  /** @deprecated use `MongoStopRequest$Outbound` instead. */
  export type Outbound = MongoStopRequest$Outbound;
}

export function mongoStopRequestToJSON(
  mongoStopRequest: MongoStopRequest,
): string {
  return JSON.stringify(
    MongoStopRequest$outboundSchema.parse(mongoStopRequest),
  );
}

export function mongoStopRequestFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopRequest' from JSON`,
  );
}

/** @internal */
export const MongoStopApplicationStatus$inboundSchema: z.ZodNativeEnum<
  typeof MongoStopApplicationStatus
> = z.nativeEnum(MongoStopApplicationStatus);

/** @internal */
export const MongoStopApplicationStatus$outboundSchema: z.ZodNativeEnum<
  typeof MongoStopApplicationStatus
> = MongoStopApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopApplicationStatus$ {
  /** @deprecated use `MongoStopApplicationStatus$inboundSchema` instead. */
  export const inboundSchema = MongoStopApplicationStatus$inboundSchema;
  /** @deprecated use `MongoStopApplicationStatus$outboundSchema` instead. */
  export const outboundSchema = MongoStopApplicationStatus$outboundSchema;
}

/** @internal */
export const MongoStopBackupType$inboundSchema: z.ZodNativeEnum<
  typeof MongoStopBackupType
> = z.nativeEnum(MongoStopBackupType);

/** @internal */
export const MongoStopBackupType$outboundSchema: z.ZodNativeEnum<
  typeof MongoStopBackupType
> = MongoStopBackupType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopBackupType$ {
  /** @deprecated use `MongoStopBackupType$inboundSchema` instead. */
  export const inboundSchema = MongoStopBackupType$inboundSchema;
  /** @deprecated use `MongoStopBackupType$outboundSchema` instead. */
  export const outboundSchema = MongoStopBackupType$outboundSchema;
}

/** @internal */
export const MongoStopDatabaseType$inboundSchema: z.ZodNativeEnum<
  typeof MongoStopDatabaseType
> = z.nativeEnum(MongoStopDatabaseType);

/** @internal */
export const MongoStopDatabaseType$outboundSchema: z.ZodNativeEnum<
  typeof MongoStopDatabaseType
> = MongoStopDatabaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopDatabaseType$ {
  /** @deprecated use `MongoStopDatabaseType$inboundSchema` instead. */
  export const inboundSchema = MongoStopDatabaseType$inboundSchema;
  /** @deprecated use `MongoStopDatabaseType$outboundSchema` instead. */
  export const outboundSchema = MongoStopDatabaseType$outboundSchema;
}

/** @internal */
export const MongoStopMetadataEnum$inboundSchema: z.ZodNativeEnum<
  typeof MongoStopMetadataEnum
> = z.nativeEnum(MongoStopMetadataEnum);

/** @internal */
export const MongoStopMetadataEnum$outboundSchema: z.ZodNativeEnum<
  typeof MongoStopMetadataEnum
> = MongoStopMetadataEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopMetadataEnum$ {
  /** @deprecated use `MongoStopMetadataEnum$inboundSchema` instead. */
  export const inboundSchema = MongoStopMetadataEnum$inboundSchema;
  /** @deprecated use `MongoStopMetadataEnum$outboundSchema` instead. */
  export const outboundSchema = MongoStopMetadataEnum$outboundSchema;
}

/** @internal */
export const MongoStopMariadb$inboundSchema: z.ZodType<
  MongoStopMariadb,
  z.ZodTypeDef,
  unknown
> = z.object({
  databasePassword: z.string(),
  databaseUser: z.string(),
});

/** @internal */
export type MongoStopMariadb$Outbound = {
  databasePassword: string;
  databaseUser: string;
};

/** @internal */
export const MongoStopMariadb$outboundSchema: z.ZodType<
  MongoStopMariadb$Outbound,
  z.ZodTypeDef,
  MongoStopMariadb
> = z.object({
  databasePassword: z.string(),
  databaseUser: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopMariadb$ {
  /** @deprecated use `MongoStopMariadb$inboundSchema` instead. */
  export const inboundSchema = MongoStopMariadb$inboundSchema;
  /** @deprecated use `MongoStopMariadb$outboundSchema` instead. */
  export const outboundSchema = MongoStopMariadb$outboundSchema;
  /** @deprecated use `MongoStopMariadb$Outbound` instead. */
  export type Outbound = MongoStopMariadb$Outbound;
}

export function mongoStopMariadbToJSON(
  mongoStopMariadb: MongoStopMariadb,
): string {
  return JSON.stringify(
    MongoStopMariadb$outboundSchema.parse(mongoStopMariadb),
  );
}

export function mongoStopMariadbFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopMariadb, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopMariadb$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopMariadb' from JSON`,
  );
}

/** @internal */
export const MongoStopMongo$inboundSchema: z.ZodType<
  MongoStopMongo,
  z.ZodTypeDef,
  unknown
> = z.object({
  databasePassword: z.string(),
  databaseUser: z.string(),
});

/** @internal */
export type MongoStopMongo$Outbound = {
  databasePassword: string;
  databaseUser: string;
};

/** @internal */
export const MongoStopMongo$outboundSchema: z.ZodType<
  MongoStopMongo$Outbound,
  z.ZodTypeDef,
  MongoStopMongo
> = z.object({
  databasePassword: z.string(),
  databaseUser: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopMongo$ {
  /** @deprecated use `MongoStopMongo$inboundSchema` instead. */
  export const inboundSchema = MongoStopMongo$inboundSchema;
  /** @deprecated use `MongoStopMongo$outboundSchema` instead. */
  export const outboundSchema = MongoStopMongo$outboundSchema;
  /** @deprecated use `MongoStopMongo$Outbound` instead. */
  export type Outbound = MongoStopMongo$Outbound;
}

export function mongoStopMongoToJSON(mongoStopMongo: MongoStopMongo): string {
  return JSON.stringify(MongoStopMongo$outboundSchema.parse(mongoStopMongo));
}

export function mongoStopMongoFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopMongo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopMongo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopMongo' from JSON`,
  );
}

/** @internal */
export const MongoStopMysql$inboundSchema: z.ZodType<
  MongoStopMysql,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseRootPassword: z.string(),
});

/** @internal */
export type MongoStopMysql$Outbound = {
  databaseRootPassword: string;
};

/** @internal */
export const MongoStopMysql$outboundSchema: z.ZodType<
  MongoStopMysql$Outbound,
  z.ZodTypeDef,
  MongoStopMysql
> = z.object({
  databaseRootPassword: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopMysql$ {
  /** @deprecated use `MongoStopMysql$inboundSchema` instead. */
  export const inboundSchema = MongoStopMysql$inboundSchema;
  /** @deprecated use `MongoStopMysql$outboundSchema` instead. */
  export const outboundSchema = MongoStopMysql$outboundSchema;
  /** @deprecated use `MongoStopMysql$Outbound` instead. */
  export type Outbound = MongoStopMysql$Outbound;
}

export function mongoStopMysqlToJSON(mongoStopMysql: MongoStopMysql): string {
  return JSON.stringify(MongoStopMysql$outboundSchema.parse(mongoStopMysql));
}

export function mongoStopMysqlFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopMysql, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopMysql$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopMysql' from JSON`,
  );
}

/** @internal */
export const MongoStopPostgres$inboundSchema: z.ZodType<
  MongoStopPostgres,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseUser: z.string(),
});

/** @internal */
export type MongoStopPostgres$Outbound = {
  databaseUser: string;
};

/** @internal */
export const MongoStopPostgres$outboundSchema: z.ZodType<
  MongoStopPostgres$Outbound,
  z.ZodTypeDef,
  MongoStopPostgres
> = z.object({
  databaseUser: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopPostgres$ {
  /** @deprecated use `MongoStopPostgres$inboundSchema` instead. */
  export const inboundSchema = MongoStopPostgres$inboundSchema;
  /** @deprecated use `MongoStopPostgres$outboundSchema` instead. */
  export const outboundSchema = MongoStopPostgres$outboundSchema;
  /** @deprecated use `MongoStopPostgres$Outbound` instead. */
  export type Outbound = MongoStopPostgres$Outbound;
}

export function mongoStopPostgresToJSON(
  mongoStopPostgres: MongoStopPostgres,
): string {
  return JSON.stringify(
    MongoStopPostgres$outboundSchema.parse(mongoStopPostgres),
  );
}

export function mongoStopPostgresFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopPostgres, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopPostgres$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopPostgres' from JSON`,
  );
}

/** @internal */
export const MongoStopMetadata$inboundSchema: z.ZodType<
  MongoStopMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  mariadb: z.lazy(() => MongoStopMariadb$inboundSchema).optional(),
  mongo: z.lazy(() => MongoStopMongo$inboundSchema).optional(),
  mysql: z.lazy(() => MongoStopMysql$inboundSchema).optional(),
  postgres: z.lazy(() => MongoStopPostgres$inboundSchema).optional(),
});

/** @internal */
export type MongoStopMetadata$Outbound = {
  mariadb?: MongoStopMariadb$Outbound | undefined;
  mongo?: MongoStopMongo$Outbound | undefined;
  mysql?: MongoStopMysql$Outbound | undefined;
  postgres?: MongoStopPostgres$Outbound | undefined;
};

/** @internal */
export const MongoStopMetadata$outboundSchema: z.ZodType<
  MongoStopMetadata$Outbound,
  z.ZodTypeDef,
  MongoStopMetadata
> = z.object({
  mariadb: z.lazy(() => MongoStopMariadb$outboundSchema).optional(),
  mongo: z.lazy(() => MongoStopMongo$outboundSchema).optional(),
  mysql: z.lazy(() => MongoStopMysql$outboundSchema).optional(),
  postgres: z.lazy(() => MongoStopPostgres$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopMetadata$ {
  /** @deprecated use `MongoStopMetadata$inboundSchema` instead. */
  export const inboundSchema = MongoStopMetadata$inboundSchema;
  /** @deprecated use `MongoStopMetadata$outboundSchema` instead. */
  export const outboundSchema = MongoStopMetadata$outboundSchema;
  /** @deprecated use `MongoStopMetadata$Outbound` instead. */
  export type Outbound = MongoStopMetadata$Outbound;
}

export function mongoStopMetadataToJSON(
  mongoStopMetadata: MongoStopMetadata,
): string {
  return JSON.stringify(
    MongoStopMetadata$outboundSchema.parse(mongoStopMetadata),
  );
}

export function mongoStopMetadataFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopMetadata' from JSON`,
  );
}

/** @internal */
export const MongoStopMetadataUnion$inboundSchema: z.ZodType<
  MongoStopMetadataUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => MongoStopMetadata$inboundSchema),
  MongoStopMetadataEnum$inboundSchema,
]);

/** @internal */
export type MongoStopMetadataUnion$Outbound =
  | MongoStopMetadata$Outbound
  | string;

/** @internal */
export const MongoStopMetadataUnion$outboundSchema: z.ZodType<
  MongoStopMetadataUnion$Outbound,
  z.ZodTypeDef,
  MongoStopMetadataUnion
> = z.union([
  z.lazy(() => MongoStopMetadata$outboundSchema),
  MongoStopMetadataEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopMetadataUnion$ {
  /** @deprecated use `MongoStopMetadataUnion$inboundSchema` instead. */
  export const inboundSchema = MongoStopMetadataUnion$inboundSchema;
  /** @deprecated use `MongoStopMetadataUnion$outboundSchema` instead. */
  export const outboundSchema = MongoStopMetadataUnion$outboundSchema;
  /** @deprecated use `MongoStopMetadataUnion$Outbound` instead. */
  export type Outbound = MongoStopMetadataUnion$Outbound;
}

export function mongoStopMetadataUnionToJSON(
  mongoStopMetadataUnion: MongoStopMetadataUnion,
): string {
  return JSON.stringify(
    MongoStopMetadataUnion$outboundSchema.parse(mongoStopMetadataUnion),
  );
}

export function mongoStopMetadataUnionFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopMetadataUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopMetadataUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopMetadataUnion' from JSON`,
  );
}

/** @internal */
export const MongoStopBackup$inboundSchema: z.ZodType<
  MongoStopBackup,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  backupId: z.string(),
  backupType: MongoStopBackupType$inboundSchema,
  composeId: z.nullable(z.string()),
  database: z.string(),
  databaseType: MongoStopDatabaseType$inboundSchema,
  destinationId: z.string(),
  enabled: z.nullable(z.boolean()),
  keepLatestCount: z.nullable(z.number()),
  mariadbId: z.nullable(z.string()),
  metadata: z.nullable(
    z.union([
      z.lazy(() => MongoStopMetadata$inboundSchema),
      MongoStopMetadataEnum$inboundSchema,
    ]),
  ).optional(),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  prefix: z.string(),
  schedule: z.string(),
  serviceName: z.nullable(z.string()),
  userId: z.nullable(z.string()),
});

/** @internal */
export type MongoStopBackup$Outbound = {
  appName: string;
  backupId: string;
  backupType: string;
  composeId: string | null;
  database: string;
  databaseType: string;
  destinationId: string;
  enabled: boolean | null;
  keepLatestCount: number | null;
  mariadbId: string | null;
  metadata?: MongoStopMetadata$Outbound | string | null | undefined;
  mongoId: string | null;
  mysqlId: string | null;
  postgresId: string | null;
  prefix: string;
  schedule: string;
  serviceName: string | null;
  userId: string | null;
};

/** @internal */
export const MongoStopBackup$outboundSchema: z.ZodType<
  MongoStopBackup$Outbound,
  z.ZodTypeDef,
  MongoStopBackup
> = z.object({
  appName: z.string(),
  backupId: z.string(),
  backupType: MongoStopBackupType$outboundSchema,
  composeId: z.nullable(z.string()),
  database: z.string(),
  databaseType: MongoStopDatabaseType$outboundSchema,
  destinationId: z.string(),
  enabled: z.nullable(z.boolean()),
  keepLatestCount: z.nullable(z.number()),
  mariadbId: z.nullable(z.string()),
  metadata: z.nullable(
    z.union([
      z.lazy(() => MongoStopMetadata$outboundSchema),
      MongoStopMetadataEnum$outboundSchema,
    ]),
  ).optional(),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  prefix: z.string(),
  schedule: z.string(),
  serviceName: z.nullable(z.string()),
  userId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopBackup$ {
  /** @deprecated use `MongoStopBackup$inboundSchema` instead. */
  export const inboundSchema = MongoStopBackup$inboundSchema;
  /** @deprecated use `MongoStopBackup$outboundSchema` instead. */
  export const outboundSchema = MongoStopBackup$outboundSchema;
  /** @deprecated use `MongoStopBackup$Outbound` instead. */
  export type Outbound = MongoStopBackup$Outbound;
}

export function mongoStopBackupToJSON(
  mongoStopBackup: MongoStopBackup,
): string {
  return JSON.stringify(MongoStopBackup$outboundSchema.parse(mongoStopBackup));
}

export function mongoStopBackupFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopBackup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopBackup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopBackup' from JSON`,
  );
}

/** @internal */
export const MongoStopProject$inboundSchema: z.ZodType<
  MongoStopProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/** @internal */
export type MongoStopProject$Outbound = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

/** @internal */
export const MongoStopProject$outboundSchema: z.ZodType<
  MongoStopProject$Outbound,
  z.ZodTypeDef,
  MongoStopProject
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopProject$ {
  /** @deprecated use `MongoStopProject$inboundSchema` instead. */
  export const inboundSchema = MongoStopProject$inboundSchema;
  /** @deprecated use `MongoStopProject$outboundSchema` instead. */
  export const outboundSchema = MongoStopProject$outboundSchema;
  /** @deprecated use `MongoStopProject$Outbound` instead. */
  export type Outbound = MongoStopProject$Outbound;
}

export function mongoStopProjectToJSON(
  mongoStopProject: MongoStopProject,
): string {
  return JSON.stringify(
    MongoStopProject$outboundSchema.parse(mongoStopProject),
  );
}

export function mongoStopProjectFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopProject' from JSON`,
  );
}

/** @internal */
export const MongoStopEnvironment$inboundSchema: z.ZodType<
  MongoStopEnvironment,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  name: z.string(),
  project: z.lazy(() => MongoStopProject$inboundSchema),
  projectId: z.string(),
});

/** @internal */
export type MongoStopEnvironment$Outbound = {
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  name: string;
  project: MongoStopProject$Outbound;
  projectId: string;
};

/** @internal */
export const MongoStopEnvironment$outboundSchema: z.ZodType<
  MongoStopEnvironment$Outbound,
  z.ZodTypeDef,
  MongoStopEnvironment
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  name: z.string(),
  project: z.lazy(() => MongoStopProject$outboundSchema),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopEnvironment$ {
  /** @deprecated use `MongoStopEnvironment$inboundSchema` instead. */
  export const inboundSchema = MongoStopEnvironment$inboundSchema;
  /** @deprecated use `MongoStopEnvironment$outboundSchema` instead. */
  export const outboundSchema = MongoStopEnvironment$outboundSchema;
  /** @deprecated use `MongoStopEnvironment$Outbound` instead. */
  export type Outbound = MongoStopEnvironment$Outbound;
}

export function mongoStopEnvironmentToJSON(
  mongoStopEnvironment: MongoStopEnvironment,
): string {
  return JSON.stringify(
    MongoStopEnvironment$outboundSchema.parse(mongoStopEnvironment),
  );
}

export function mongoStopEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopEnvironment' from JSON`,
  );
}

/** @internal */
export const MongoStopHealthCheckSwarm$inboundSchema: z.ZodType<
  MongoStopHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Interval: z.number().optional(),
  Retries: z.number().optional(),
  StartPeriod: z.number().optional(),
  Test: z.array(z.string()).optional(),
  Timeout: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Interval": "interval",
    "Retries": "retries",
    "StartPeriod": "startPeriod",
    "Test": "test",
    "Timeout": "timeout",
  });
});

/** @internal */
export type MongoStopHealthCheckSwarm$Outbound = {
  Interval?: number | undefined;
  Retries?: number | undefined;
  StartPeriod?: number | undefined;
  Test?: Array<string> | undefined;
  Timeout?: number | undefined;
};

/** @internal */
export const MongoStopHealthCheckSwarm$outboundSchema: z.ZodType<
  MongoStopHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  MongoStopHealthCheckSwarm
> = z.object({
  interval: z.number().optional(),
  retries: z.number().optional(),
  startPeriod: z.number().optional(),
  test: z.array(z.string()).optional(),
  timeout: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    interval: "Interval",
    retries: "Retries",
    startPeriod: "StartPeriod",
    test: "Test",
    timeout: "Timeout",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopHealthCheckSwarm$ {
  /** @deprecated use `MongoStopHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoStopHealthCheckSwarm$inboundSchema;
  /** @deprecated use `MongoStopHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoStopHealthCheckSwarm$outboundSchema;
  /** @deprecated use `MongoStopHealthCheckSwarm$Outbound` instead. */
  export type Outbound = MongoStopHealthCheckSwarm$Outbound;
}

export function mongoStopHealthCheckSwarmToJSON(
  mongoStopHealthCheckSwarm: MongoStopHealthCheckSwarm,
): string {
  return JSON.stringify(
    MongoStopHealthCheckSwarm$outboundSchema.parse(mongoStopHealthCheckSwarm),
  );
}

export function mongoStopHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const MongoStopGlobal$inboundSchema: z.ZodType<
  MongoStopGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MongoStopGlobal$Outbound = {};

/** @internal */
export const MongoStopGlobal$outboundSchema: z.ZodType<
  MongoStopGlobal$Outbound,
  z.ZodTypeDef,
  MongoStopGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopGlobal$ {
  /** @deprecated use `MongoStopGlobal$inboundSchema` instead. */
  export const inboundSchema = MongoStopGlobal$inboundSchema;
  /** @deprecated use `MongoStopGlobal$outboundSchema` instead. */
  export const outboundSchema = MongoStopGlobal$outboundSchema;
  /** @deprecated use `MongoStopGlobal$Outbound` instead. */
  export type Outbound = MongoStopGlobal$Outbound;
}

export function mongoStopGlobalToJSON(
  mongoStopGlobal: MongoStopGlobal,
): string {
  return JSON.stringify(MongoStopGlobal$outboundSchema.parse(mongoStopGlobal));
}

export function mongoStopGlobalFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopGlobal' from JSON`,
  );
}

/** @internal */
export const MongoStopGlobalJob$inboundSchema: z.ZodType<
  MongoStopGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MongoStopGlobalJob$Outbound = {};

/** @internal */
export const MongoStopGlobalJob$outboundSchema: z.ZodType<
  MongoStopGlobalJob$Outbound,
  z.ZodTypeDef,
  MongoStopGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopGlobalJob$ {
  /** @deprecated use `MongoStopGlobalJob$inboundSchema` instead. */
  export const inboundSchema = MongoStopGlobalJob$inboundSchema;
  /** @deprecated use `MongoStopGlobalJob$outboundSchema` instead. */
  export const outboundSchema = MongoStopGlobalJob$outboundSchema;
  /** @deprecated use `MongoStopGlobalJob$Outbound` instead. */
  export type Outbound = MongoStopGlobalJob$Outbound;
}

export function mongoStopGlobalJobToJSON(
  mongoStopGlobalJob: MongoStopGlobalJob,
): string {
  return JSON.stringify(
    MongoStopGlobalJob$outboundSchema.parse(mongoStopGlobalJob),
  );
}

export function mongoStopGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopGlobalJob' from JSON`,
  );
}

/** @internal */
export const MongoStopReplicated$inboundSchema: z.ZodType<
  MongoStopReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type MongoStopReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const MongoStopReplicated$outboundSchema: z.ZodType<
  MongoStopReplicated$Outbound,
  z.ZodTypeDef,
  MongoStopReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopReplicated$ {
  /** @deprecated use `MongoStopReplicated$inboundSchema` instead. */
  export const inboundSchema = MongoStopReplicated$inboundSchema;
  /** @deprecated use `MongoStopReplicated$outboundSchema` instead. */
  export const outboundSchema = MongoStopReplicated$outboundSchema;
  /** @deprecated use `MongoStopReplicated$Outbound` instead. */
  export type Outbound = MongoStopReplicated$Outbound;
}

export function mongoStopReplicatedToJSON(
  mongoStopReplicated: MongoStopReplicated,
): string {
  return JSON.stringify(
    MongoStopReplicated$outboundSchema.parse(mongoStopReplicated),
  );
}

export function mongoStopReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopReplicated' from JSON`,
  );
}

/** @internal */
export const MongoStopReplicatedJob$inboundSchema: z.ZodType<
  MongoStopReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type MongoStopReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const MongoStopReplicatedJob$outboundSchema: z.ZodType<
  MongoStopReplicatedJob$Outbound,
  z.ZodTypeDef,
  MongoStopReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopReplicatedJob$ {
  /** @deprecated use `MongoStopReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = MongoStopReplicatedJob$inboundSchema;
  /** @deprecated use `MongoStopReplicatedJob$outboundSchema` instead. */
  export const outboundSchema = MongoStopReplicatedJob$outboundSchema;
  /** @deprecated use `MongoStopReplicatedJob$Outbound` instead. */
  export type Outbound = MongoStopReplicatedJob$Outbound;
}

export function mongoStopReplicatedJobToJSON(
  mongoStopReplicatedJob: MongoStopReplicatedJob,
): string {
  return JSON.stringify(
    MongoStopReplicatedJob$outboundSchema.parse(mongoStopReplicatedJob),
  );
}

export function mongoStopReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopReplicatedJob' from JSON`,
  );
}

/** @internal */
export const MongoStopModeSwarm$inboundSchema: z.ZodType<
  MongoStopModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Global: z.lazy(() => MongoStopGlobal$inboundSchema).optional(),
  GlobalJob: z.lazy(() => MongoStopGlobalJob$inboundSchema).optional(),
  Replicated: z.lazy(() => MongoStopReplicated$inboundSchema).optional(),
  ReplicatedJob: z.lazy(() => MongoStopReplicatedJob$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Global": "global",
    "GlobalJob": "globalJob",
    "Replicated": "replicated",
    "ReplicatedJob": "replicatedJob",
  });
});

/** @internal */
export type MongoStopModeSwarm$Outbound = {
  Global?: MongoStopGlobal$Outbound | undefined;
  GlobalJob?: MongoStopGlobalJob$Outbound | undefined;
  Replicated?: MongoStopReplicated$Outbound | undefined;
  ReplicatedJob?: MongoStopReplicatedJob$Outbound | undefined;
};

/** @internal */
export const MongoStopModeSwarm$outboundSchema: z.ZodType<
  MongoStopModeSwarm$Outbound,
  z.ZodTypeDef,
  MongoStopModeSwarm
> = z.object({
  global: z.lazy(() => MongoStopGlobal$outboundSchema).optional(),
  globalJob: z.lazy(() => MongoStopGlobalJob$outboundSchema).optional(),
  replicated: z.lazy(() => MongoStopReplicated$outboundSchema).optional(),
  replicatedJob: z.lazy(() => MongoStopReplicatedJob$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    global: "Global",
    globalJob: "GlobalJob",
    replicated: "Replicated",
    replicatedJob: "ReplicatedJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopModeSwarm$ {
  /** @deprecated use `MongoStopModeSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoStopModeSwarm$inboundSchema;
  /** @deprecated use `MongoStopModeSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoStopModeSwarm$outboundSchema;
  /** @deprecated use `MongoStopModeSwarm$Outbound` instead. */
  export type Outbound = MongoStopModeSwarm$Outbound;
}

export function mongoStopModeSwarmToJSON(
  mongoStopModeSwarm: MongoStopModeSwarm,
): string {
  return JSON.stringify(
    MongoStopModeSwarm$outboundSchema.parse(mongoStopModeSwarm),
  );
}

export function mongoStopModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopModeSwarm' from JSON`,
  );
}

/** @internal */
export const MongoStopServiceType$inboundSchema: z.ZodNativeEnum<
  typeof MongoStopServiceType
> = z.nativeEnum(MongoStopServiceType);

/** @internal */
export const MongoStopServiceType$outboundSchema: z.ZodNativeEnum<
  typeof MongoStopServiceType
> = MongoStopServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopServiceType$ {
  /** @deprecated use `MongoStopServiceType$inboundSchema` instead. */
  export const inboundSchema = MongoStopServiceType$inboundSchema;
  /** @deprecated use `MongoStopServiceType$outboundSchema` instead. */
  export const outboundSchema = MongoStopServiceType$outboundSchema;
}

/** @internal */
export const MongoStopType$inboundSchema: z.ZodNativeEnum<
  typeof MongoStopType
> = z.nativeEnum(MongoStopType);

/** @internal */
export const MongoStopType$outboundSchema: z.ZodNativeEnum<
  typeof MongoStopType
> = MongoStopType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopType$ {
  /** @deprecated use `MongoStopType$inboundSchema` instead. */
  export const inboundSchema = MongoStopType$inboundSchema;
  /** @deprecated use `MongoStopType$outboundSchema` instead. */
  export const outboundSchema = MongoStopType$outboundSchema;
}

/** @internal */
export const MongoStopMount$inboundSchema: z.ZodType<
  MongoStopMount,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  content: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  hostPath: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mountId: z.string(),
  mountPath: z.string(),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  serviceType: MongoStopServiceType$inboundSchema,
  type: MongoStopType$inboundSchema,
  volumeName: z.nullable(z.string()),
});

/** @internal */
export type MongoStopMount$Outbound = {
  applicationId: string | null;
  composeId: string | null;
  content: string | null;
  filePath: string | null;
  hostPath: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mountId: string;
  mountPath: string;
  mysqlId: string | null;
  postgresId: string | null;
  redisId: string | null;
  serviceType: string;
  type: string;
  volumeName: string | null;
};

/** @internal */
export const MongoStopMount$outboundSchema: z.ZodType<
  MongoStopMount$Outbound,
  z.ZodTypeDef,
  MongoStopMount
> = z.object({
  applicationId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  content: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  hostPath: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mountId: z.string(),
  mountPath: z.string(),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  serviceType: MongoStopServiceType$outboundSchema,
  type: MongoStopType$outboundSchema,
  volumeName: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopMount$ {
  /** @deprecated use `MongoStopMount$inboundSchema` instead. */
  export const inboundSchema = MongoStopMount$inboundSchema;
  /** @deprecated use `MongoStopMount$outboundSchema` instead. */
  export const outboundSchema = MongoStopMount$outboundSchema;
  /** @deprecated use `MongoStopMount$Outbound` instead. */
  export type Outbound = MongoStopMount$Outbound;
}

export function mongoStopMountToJSON(mongoStopMount: MongoStopMount): string {
  return JSON.stringify(MongoStopMount$outboundSchema.parse(mongoStopMount));
}

export function mongoStopMountFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopMount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopMount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopMount' from JSON`,
  );
}

/** @internal */
export const MongoStopDriverOpts$inboundSchema: z.ZodType<
  MongoStopDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MongoStopDriverOpts$Outbound = {};

/** @internal */
export const MongoStopDriverOpts$outboundSchema: z.ZodType<
  MongoStopDriverOpts$Outbound,
  z.ZodTypeDef,
  MongoStopDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopDriverOpts$ {
  /** @deprecated use `MongoStopDriverOpts$inboundSchema` instead. */
  export const inboundSchema = MongoStopDriverOpts$inboundSchema;
  /** @deprecated use `MongoStopDriverOpts$outboundSchema` instead. */
  export const outboundSchema = MongoStopDriverOpts$outboundSchema;
  /** @deprecated use `MongoStopDriverOpts$Outbound` instead. */
  export type Outbound = MongoStopDriverOpts$Outbound;
}

export function mongoStopDriverOptsToJSON(
  mongoStopDriverOpts: MongoStopDriverOpts,
): string {
  return JSON.stringify(
    MongoStopDriverOpts$outboundSchema.parse(mongoStopDriverOpts),
  );
}

export function mongoStopDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopDriverOpts' from JSON`,
  );
}

/** @internal */
export const MongoStopNetworkSwarm$inboundSchema: z.ZodType<
  MongoStopNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => MongoStopDriverOpts$inboundSchema).optional(),
  Target: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
    "Target": "target",
  });
});

/** @internal */
export type MongoStopNetworkSwarm$Outbound = {
  Aliases?: Array<string> | undefined;
  DriverOpts?: MongoStopDriverOpts$Outbound | undefined;
  Target?: string | undefined;
};

/** @internal */
export const MongoStopNetworkSwarm$outboundSchema: z.ZodType<
  MongoStopNetworkSwarm$Outbound,
  z.ZodTypeDef,
  MongoStopNetworkSwarm
> = z.object({
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => MongoStopDriverOpts$outboundSchema).optional(),
  target: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    aliases: "Aliases",
    driverOpts: "DriverOpts",
    target: "Target",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopNetworkSwarm$ {
  /** @deprecated use `MongoStopNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoStopNetworkSwarm$inboundSchema;
  /** @deprecated use `MongoStopNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoStopNetworkSwarm$outboundSchema;
  /** @deprecated use `MongoStopNetworkSwarm$Outbound` instead. */
  export type Outbound = MongoStopNetworkSwarm$Outbound;
}

export function mongoStopNetworkSwarmToJSON(
  mongoStopNetworkSwarm: MongoStopNetworkSwarm,
): string {
  return JSON.stringify(
    MongoStopNetworkSwarm$outboundSchema.parse(mongoStopNetworkSwarm),
  );
}

export function mongoStopNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const MongoStopPlatform$inboundSchema: z.ZodType<
  MongoStopPlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type MongoStopPlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const MongoStopPlatform$outboundSchema: z.ZodType<
  MongoStopPlatform$Outbound,
  z.ZodTypeDef,
  MongoStopPlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopPlatform$ {
  /** @deprecated use `MongoStopPlatform$inboundSchema` instead. */
  export const inboundSchema = MongoStopPlatform$inboundSchema;
  /** @deprecated use `MongoStopPlatform$outboundSchema` instead. */
  export const outboundSchema = MongoStopPlatform$outboundSchema;
  /** @deprecated use `MongoStopPlatform$Outbound` instead. */
  export type Outbound = MongoStopPlatform$Outbound;
}

export function mongoStopPlatformToJSON(
  mongoStopPlatform: MongoStopPlatform,
): string {
  return JSON.stringify(
    MongoStopPlatform$outboundSchema.parse(mongoStopPlatform),
  );
}

export function mongoStopPlatformFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopPlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopPlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopPlatform' from JSON`,
  );
}

/** @internal */
export const MongoStopSpread$inboundSchema: z.ZodType<
  MongoStopSpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type MongoStopSpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const MongoStopSpread$outboundSchema: z.ZodType<
  MongoStopSpread$Outbound,
  z.ZodTypeDef,
  MongoStopSpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopSpread$ {
  /** @deprecated use `MongoStopSpread$inboundSchema` instead. */
  export const inboundSchema = MongoStopSpread$inboundSchema;
  /** @deprecated use `MongoStopSpread$outboundSchema` instead. */
  export const outboundSchema = MongoStopSpread$outboundSchema;
  /** @deprecated use `MongoStopSpread$Outbound` instead. */
  export type Outbound = MongoStopSpread$Outbound;
}

export function mongoStopSpreadToJSON(
  mongoStopSpread: MongoStopSpread,
): string {
  return JSON.stringify(MongoStopSpread$outboundSchema.parse(mongoStopSpread));
}

export function mongoStopSpreadFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopSpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopSpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopSpread' from JSON`,
  );
}

/** @internal */
export const MongoStopPreference$inboundSchema: z.ZodType<
  MongoStopPreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => MongoStopSpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type MongoStopPreference$Outbound = {
  Spread: MongoStopSpread$Outbound;
};

/** @internal */
export const MongoStopPreference$outboundSchema: z.ZodType<
  MongoStopPreference$Outbound,
  z.ZodTypeDef,
  MongoStopPreference
> = z.object({
  spread: z.lazy(() => MongoStopSpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopPreference$ {
  /** @deprecated use `MongoStopPreference$inboundSchema` instead. */
  export const inboundSchema = MongoStopPreference$inboundSchema;
  /** @deprecated use `MongoStopPreference$outboundSchema` instead. */
  export const outboundSchema = MongoStopPreference$outboundSchema;
  /** @deprecated use `MongoStopPreference$Outbound` instead. */
  export type Outbound = MongoStopPreference$Outbound;
}

export function mongoStopPreferenceToJSON(
  mongoStopPreference: MongoStopPreference,
): string {
  return JSON.stringify(
    MongoStopPreference$outboundSchema.parse(mongoStopPreference),
  );
}

export function mongoStopPreferenceFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopPreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopPreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopPreference' from JSON`,
  );
}

/** @internal */
export const MongoStopPlacementSwarm$inboundSchema: z.ZodType<
  MongoStopPlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => MongoStopPlatform$inboundSchema)).optional(),
  Preferences: z.array(z.lazy(() => MongoStopPreference$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
    "Preferences": "preferences",
  });
});

/** @internal */
export type MongoStopPlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<MongoStopPlatform$Outbound> | undefined;
  Preferences?: Array<MongoStopPreference$Outbound> | undefined;
};

/** @internal */
export const MongoStopPlacementSwarm$outboundSchema: z.ZodType<
  MongoStopPlacementSwarm$Outbound,
  z.ZodTypeDef,
  MongoStopPlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => MongoStopPlatform$outboundSchema)).optional(),
  preferences: z.array(z.lazy(() => MongoStopPreference$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
    preferences: "Preferences",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopPlacementSwarm$ {
  /** @deprecated use `MongoStopPlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoStopPlacementSwarm$inboundSchema;
  /** @deprecated use `MongoStopPlacementSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoStopPlacementSwarm$outboundSchema;
  /** @deprecated use `MongoStopPlacementSwarm$Outbound` instead. */
  export type Outbound = MongoStopPlacementSwarm$Outbound;
}

export function mongoStopPlacementSwarmToJSON(
  mongoStopPlacementSwarm: MongoStopPlacementSwarm,
): string {
  return JSON.stringify(
    MongoStopPlacementSwarm$outboundSchema.parse(mongoStopPlacementSwarm),
  );
}

export function mongoStopPlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopPlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopPlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopPlacementSwarm' from JSON`,
  );
}

/** @internal */
export const MongoStopRestartPolicySwarm$inboundSchema: z.ZodType<
  MongoStopRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type MongoStopRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const MongoStopRestartPolicySwarm$outboundSchema: z.ZodType<
  MongoStopRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  MongoStopRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopRestartPolicySwarm$ {
  /** @deprecated use `MongoStopRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema = MongoStopRestartPolicySwarm$inboundSchema;
  /** @deprecated use `MongoStopRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema = MongoStopRestartPolicySwarm$outboundSchema;
  /** @deprecated use `MongoStopRestartPolicySwarm$Outbound` instead. */
  export type Outbound = MongoStopRestartPolicySwarm$Outbound;
}

export function mongoStopRestartPolicySwarmToJSON(
  mongoStopRestartPolicySwarm: MongoStopRestartPolicySwarm,
): string {
  return JSON.stringify(
    MongoStopRestartPolicySwarm$outboundSchema.parse(
      mongoStopRestartPolicySwarm,
    ),
  );
}

export function mongoStopRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const MongoStopRollbackConfigSwarm$inboundSchema: z.ZodType<
  MongoStopRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  MaxFailureRatio: z.number().optional(),
  Monitor: z.number().optional(),
  Order: z.string(),
  Parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    "Delay": "delay",
    "FailureAction": "failureAction",
    "MaxFailureRatio": "maxFailureRatio",
    "Monitor": "monitor",
    "Order": "order",
    "Parallelism": "parallelism",
  });
});

/** @internal */
export type MongoStopRollbackConfigSwarm$Outbound = {
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  MaxFailureRatio?: number | undefined;
  Monitor?: number | undefined;
  Order: string;
  Parallelism: number;
};

/** @internal */
export const MongoStopRollbackConfigSwarm$outboundSchema: z.ZodType<
  MongoStopRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  MongoStopRollbackConfigSwarm
> = z.object({
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  maxFailureRatio: z.number().optional(),
  monitor: z.number().optional(),
  order: z.string(),
  parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    delay: "Delay",
    failureAction: "FailureAction",
    maxFailureRatio: "MaxFailureRatio",
    monitor: "Monitor",
    order: "Order",
    parallelism: "Parallelism",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopRollbackConfigSwarm$ {
  /** @deprecated use `MongoStopRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoStopRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `MongoStopRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoStopRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `MongoStopRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = MongoStopRollbackConfigSwarm$Outbound;
}

export function mongoStopRollbackConfigSwarmToJSON(
  mongoStopRollbackConfigSwarm: MongoStopRollbackConfigSwarm,
): string {
  return JSON.stringify(
    MongoStopRollbackConfigSwarm$outboundSchema.parse(
      mongoStopRollbackConfigSwarm,
    ),
  );
}

export function mongoStopRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopRollbackConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopRollbackConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MongoStopMetricsConfigEnum$inboundSchema: z.ZodNativeEnum<
  typeof MongoStopMetricsConfigEnum
> = z.nativeEnum(MongoStopMetricsConfigEnum);

/** @internal */
export const MongoStopMetricsConfigEnum$outboundSchema: z.ZodNativeEnum<
  typeof MongoStopMetricsConfigEnum
> = MongoStopMetricsConfigEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopMetricsConfigEnum$ {
  /** @deprecated use `MongoStopMetricsConfigEnum$inboundSchema` instead. */
  export const inboundSchema = MongoStopMetricsConfigEnum$inboundSchema;
  /** @deprecated use `MongoStopMetricsConfigEnum$outboundSchema` instead. */
  export const outboundSchema = MongoStopMetricsConfigEnum$outboundSchema;
}

/** @internal */
export const MongoStopMetricsConfigUnion1$inboundSchema: z.ZodType<
  MongoStopMetricsConfigUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  MongoStopMetricsConfigEnum$inboundSchema,
]);

/** @internal */
export type MongoStopMetricsConfigUnion1$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const MongoStopMetricsConfigUnion1$outboundSchema: z.ZodType<
  MongoStopMetricsConfigUnion1$Outbound,
  z.ZodTypeDef,
  MongoStopMetricsConfigUnion1
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  MongoStopMetricsConfigEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopMetricsConfigUnion1$ {
  /** @deprecated use `MongoStopMetricsConfigUnion1$inboundSchema` instead. */
  export const inboundSchema = MongoStopMetricsConfigUnion1$inboundSchema;
  /** @deprecated use `MongoStopMetricsConfigUnion1$outboundSchema` instead. */
  export const outboundSchema = MongoStopMetricsConfigUnion1$outboundSchema;
  /** @deprecated use `MongoStopMetricsConfigUnion1$Outbound` instead. */
  export type Outbound = MongoStopMetricsConfigUnion1$Outbound;
}

export function mongoStopMetricsConfigUnion1ToJSON(
  mongoStopMetricsConfigUnion1: MongoStopMetricsConfigUnion1,
): string {
  return JSON.stringify(
    MongoStopMetricsConfigUnion1$outboundSchema.parse(
      mongoStopMetricsConfigUnion1,
    ),
  );
}

export function mongoStopMetricsConfigUnion1FromJSON(
  jsonString: string,
): SafeParseResult<MongoStopMetricsConfigUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopMetricsConfigUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopMetricsConfigUnion1' from JSON`,
  );
}

/** @internal */
export const MongoStopMetricsConfigUnion2$inboundSchema: z.ZodType<
  MongoStopMetricsConfigUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    MongoStopMetricsConfigEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type MongoStopMetricsConfigUnion2$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const MongoStopMetricsConfigUnion2$outboundSchema: z.ZodType<
  MongoStopMetricsConfigUnion2$Outbound,
  z.ZodTypeDef,
  MongoStopMetricsConfigUnion2
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    MongoStopMetricsConfigEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopMetricsConfigUnion2$ {
  /** @deprecated use `MongoStopMetricsConfigUnion2$inboundSchema` instead. */
  export const inboundSchema = MongoStopMetricsConfigUnion2$inboundSchema;
  /** @deprecated use `MongoStopMetricsConfigUnion2$outboundSchema` instead. */
  export const outboundSchema = MongoStopMetricsConfigUnion2$outboundSchema;
  /** @deprecated use `MongoStopMetricsConfigUnion2$Outbound` instead. */
  export type Outbound = MongoStopMetricsConfigUnion2$Outbound;
}

export function mongoStopMetricsConfigUnion2ToJSON(
  mongoStopMetricsConfigUnion2: MongoStopMetricsConfigUnion2,
): string {
  return JSON.stringify(
    MongoStopMetricsConfigUnion2$outboundSchema.parse(
      mongoStopMetricsConfigUnion2,
    ),
  );
}

export function mongoStopMetricsConfigUnion2FromJSON(
  jsonString: string,
): SafeParseResult<MongoStopMetricsConfigUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopMetricsConfigUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopMetricsConfigUnion2' from JSON`,
  );
}

/** @internal */
export const MongoStopServerStatus$inboundSchema: z.ZodNativeEnum<
  typeof MongoStopServerStatus
> = z.nativeEnum(MongoStopServerStatus);

/** @internal */
export const MongoStopServerStatus$outboundSchema: z.ZodNativeEnum<
  typeof MongoStopServerStatus
> = MongoStopServerStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopServerStatus$ {
  /** @deprecated use `MongoStopServerStatus$inboundSchema` instead. */
  export const inboundSchema = MongoStopServerStatus$inboundSchema;
  /** @deprecated use `MongoStopServerStatus$outboundSchema` instead. */
  export const outboundSchema = MongoStopServerStatus$outboundSchema;
}

/** @internal */
export const MongoStopServer$inboundSchema: z.ZodType<
  MongoStopServer,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  command: z.string(),
  createdAt: z.string(),
  description: z.nullable(z.string()),
  enableDockerCleanup: z.boolean(),
  ipAddress: z.string(),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      MongoStopMetricsConfigEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
  name: z.string(),
  organizationId: z.string(),
  port: z.number(),
  serverId: z.string(),
  serverStatus: MongoStopServerStatus$inboundSchema,
  sshKeyId: z.nullable(z.string()),
  username: z.string(),
});

/** @internal */
export type MongoStopServer$Outbound = {
  appName: string;
  command: string;
  createdAt: string;
  description: string | null;
  enableDockerCleanup: boolean;
  ipAddress: string;
  metricsConfig: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  };
  name: string;
  organizationId: string;
  port: number;
  serverId: string;
  serverStatus: string;
  sshKeyId: string | null;
  username: string;
};

/** @internal */
export const MongoStopServer$outboundSchema: z.ZodType<
  MongoStopServer$Outbound,
  z.ZodTypeDef,
  MongoStopServer
> = z.object({
  appName: z.string(),
  command: z.string(),
  createdAt: z.string(),
  description: z.nullable(z.string()),
  enableDockerCleanup: z.boolean(),
  ipAddress: z.string(),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      MongoStopMetricsConfigEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
  name: z.string(),
  organizationId: z.string(),
  port: z.number(),
  serverId: z.string(),
  serverStatus: MongoStopServerStatus$outboundSchema,
  sshKeyId: z.nullable(z.string()),
  username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopServer$ {
  /** @deprecated use `MongoStopServer$inboundSchema` instead. */
  export const inboundSchema = MongoStopServer$inboundSchema;
  /** @deprecated use `MongoStopServer$outboundSchema` instead. */
  export const outboundSchema = MongoStopServer$outboundSchema;
  /** @deprecated use `MongoStopServer$Outbound` instead. */
  export type Outbound = MongoStopServer$Outbound;
}

export function mongoStopServerToJSON(
  mongoStopServer: MongoStopServer,
): string {
  return JSON.stringify(MongoStopServer$outboundSchema.parse(mongoStopServer));
}

export function mongoStopServerFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopServer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopServer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopServer' from JSON`,
  );
}

/** @internal */
export const MongoStopUpdateConfigSwarm$inboundSchema: z.ZodType<
  MongoStopUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  MaxFailureRatio: z.number().optional(),
  Monitor: z.number().optional(),
  Order: z.string(),
  Parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    "Delay": "delay",
    "FailureAction": "failureAction",
    "MaxFailureRatio": "maxFailureRatio",
    "Monitor": "monitor",
    "Order": "order",
    "Parallelism": "parallelism",
  });
});

/** @internal */
export type MongoStopUpdateConfigSwarm$Outbound = {
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  MaxFailureRatio?: number | undefined;
  Monitor?: number | undefined;
  Order: string;
  Parallelism: number;
};

/** @internal */
export const MongoStopUpdateConfigSwarm$outboundSchema: z.ZodType<
  MongoStopUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  MongoStopUpdateConfigSwarm
> = z.object({
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  maxFailureRatio: z.number().optional(),
  monitor: z.number().optional(),
  order: z.string(),
  parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    delay: "Delay",
    failureAction: "FailureAction",
    maxFailureRatio: "MaxFailureRatio",
    monitor: "Monitor",
    order: "Order",
    parallelism: "Parallelism",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopUpdateConfigSwarm$ {
  /** @deprecated use `MongoStopUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoStopUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `MongoStopUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoStopUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `MongoStopUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = MongoStopUpdateConfigSwarm$Outbound;
}

export function mongoStopUpdateConfigSwarmToJSON(
  mongoStopUpdateConfigSwarm: MongoStopUpdateConfigSwarm,
): string {
  return JSON.stringify(
    MongoStopUpdateConfigSwarm$outboundSchema.parse(mongoStopUpdateConfigSwarm),
  );
}

export function mongoStopUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MongoStopResponseBody$inboundSchema: z.ZodType<
  MongoStopResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  applicationStatus: MongoStopApplicationStatus$inboundSchema,
  backups: z.array(z.lazy(() => MongoStopBackup$inboundSchema)),
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databasePassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environment: z.lazy(() => MongoStopEnvironment$inboundSchema),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.lazy(() => MongoStopHealthCheckSwarm$inboundSchema),
  ),
  labelsSwarm: z.nullable(z.record(z.string())),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(z.lazy(() => MongoStopModeSwarm$inboundSchema)),
  mongoId: z.string(),
  mounts: z.array(z.lazy(() => MongoStopMount$inboundSchema)),
  name: z.string(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MongoStopNetworkSwarm$inboundSchema)),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => MongoStopPlacementSwarm$inboundSchema),
  ),
  replicaSets: z.nullable(z.boolean()),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MongoStopRestartPolicySwarm$inboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MongoStopRollbackConfigSwarm$inboundSchema),
  ),
  server: z.nullable(z.lazy(() => MongoStopServer$inboundSchema)),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MongoStopUpdateConfigSwarm$inboundSchema),
  ),
});

/** @internal */
export type MongoStopResponseBody$Outbound = {
  appName: string;
  applicationStatus: string;
  backups: Array<MongoStopBackup$Outbound>;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databasePassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environment: MongoStopEnvironment$Outbound;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: MongoStopHealthCheckSwarm$Outbound | null;
  labelsSwarm: { [k: string]: string } | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: MongoStopModeSwarm$Outbound | null;
  mongoId: string;
  mounts: Array<MongoStopMount$Outbound>;
  name: string;
  networkSwarm: Array<MongoStopNetworkSwarm$Outbound> | null;
  placementSwarm: MongoStopPlacementSwarm$Outbound | null;
  replicaSets: boolean | null;
  replicas: number;
  restartPolicySwarm: MongoStopRestartPolicySwarm$Outbound | null;
  rollbackConfigSwarm: MongoStopRollbackConfigSwarm$Outbound | null;
  server: MongoStopServer$Outbound | null;
  serverId: string | null;
  updateConfigSwarm: MongoStopUpdateConfigSwarm$Outbound | null;
};

/** @internal */
export const MongoStopResponseBody$outboundSchema: z.ZodType<
  MongoStopResponseBody$Outbound,
  z.ZodTypeDef,
  MongoStopResponseBody
> = z.object({
  appName: z.string(),
  applicationStatus: MongoStopApplicationStatus$outboundSchema,
  backups: z.array(z.lazy(() => MongoStopBackup$outboundSchema)),
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databasePassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environment: z.lazy(() => MongoStopEnvironment$outboundSchema),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.lazy(() => MongoStopHealthCheckSwarm$outboundSchema),
  ),
  labelsSwarm: z.nullable(z.record(z.string())),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(z.lazy(() => MongoStopModeSwarm$outboundSchema)),
  mongoId: z.string(),
  mounts: z.array(z.lazy(() => MongoStopMount$outboundSchema)),
  name: z.string(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MongoStopNetworkSwarm$outboundSchema)),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => MongoStopPlacementSwarm$outboundSchema),
  ),
  replicaSets: z.nullable(z.boolean()),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MongoStopRestartPolicySwarm$outboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MongoStopRollbackConfigSwarm$outboundSchema),
  ),
  server: z.nullable(z.lazy(() => MongoStopServer$outboundSchema)),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MongoStopUpdateConfigSwarm$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopResponseBody$ {
  /** @deprecated use `MongoStopResponseBody$inboundSchema` instead. */
  export const inboundSchema = MongoStopResponseBody$inboundSchema;
  /** @deprecated use `MongoStopResponseBody$outboundSchema` instead. */
  export const outboundSchema = MongoStopResponseBody$outboundSchema;
  /** @deprecated use `MongoStopResponseBody$Outbound` instead. */
  export type Outbound = MongoStopResponseBody$Outbound;
}

export function mongoStopResponseBodyToJSON(
  mongoStopResponseBody: MongoStopResponseBody,
): string {
  return JSON.stringify(
    MongoStopResponseBody$outboundSchema.parse(mongoStopResponseBody),
  );
}

export function mongoStopResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopResponseBody' from JSON`,
  );
}

/** @internal */
export const MongoStopResponse$inboundSchema: z.ZodType<
  MongoStopResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => MongoStopResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type MongoStopResponse$Outbound =
  | MongoStopResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const MongoStopResponse$outboundSchema: z.ZodType<
  MongoStopResponse$Outbound,
  z.ZodTypeDef,
  MongoStopResponse
> = z.union([
  z.lazy(() => MongoStopResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStopResponse$ {
  /** @deprecated use `MongoStopResponse$inboundSchema` instead. */
  export const inboundSchema = MongoStopResponse$inboundSchema;
  /** @deprecated use `MongoStopResponse$outboundSchema` instead. */
  export const outboundSchema = MongoStopResponse$outboundSchema;
  /** @deprecated use `MongoStopResponse$Outbound` instead. */
  export type Outbound = MongoStopResponse$Outbound;
}

export function mongoStopResponseToJSON(
  mongoStopResponse: MongoStopResponse,
): string {
  return JSON.stringify(
    MongoStopResponse$outboundSchema.parse(mongoStopResponse),
  );
}

export function mongoStopResponseFromJSON(
  jsonString: string,
): SafeParseResult<MongoStopResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStopResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStopResponse' from JSON`,
  );
}
