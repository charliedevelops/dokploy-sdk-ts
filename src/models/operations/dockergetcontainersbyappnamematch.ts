/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AppTypeDockerCompose = {
  DockerCompose: "docker-compose",
} as const;
export type AppTypeDockerCompose = ClosedEnum<typeof AppTypeDockerCompose>;

export const AppTypeStack = {
  Stack: "stack",
} as const;
export type AppTypeStack = ClosedEnum<typeof AppTypeStack>;

export type AppType = AppTypeStack | AppTypeDockerCompose;

export type DockerGetContainersByAppNameMatchRequest = {
  appType?: AppTypeStack | AppTypeDockerCompose | undefined;
  appName: string;
  serverId?: string | undefined;
};

/** @internal */
export const AppTypeDockerCompose$inboundSchema: z.ZodNativeEnum<
  typeof AppTypeDockerCompose
> = z.nativeEnum(AppTypeDockerCompose);

/** @internal */
export const AppTypeDockerCompose$outboundSchema: z.ZodNativeEnum<
  typeof AppTypeDockerCompose
> = AppTypeDockerCompose$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppTypeDockerCompose$ {
  /** @deprecated use `AppTypeDockerCompose$inboundSchema` instead. */
  export const inboundSchema = AppTypeDockerCompose$inboundSchema;
  /** @deprecated use `AppTypeDockerCompose$outboundSchema` instead. */
  export const outboundSchema = AppTypeDockerCompose$outboundSchema;
}

/** @internal */
export const AppTypeStack$inboundSchema: z.ZodNativeEnum<typeof AppTypeStack> =
  z.nativeEnum(AppTypeStack);

/** @internal */
export const AppTypeStack$outboundSchema: z.ZodNativeEnum<typeof AppTypeStack> =
  AppTypeStack$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppTypeStack$ {
  /** @deprecated use `AppTypeStack$inboundSchema` instead. */
  export const inboundSchema = AppTypeStack$inboundSchema;
  /** @deprecated use `AppTypeStack$outboundSchema` instead. */
  export const outboundSchema = AppTypeStack$outboundSchema;
}

/** @internal */
export const AppType$inboundSchema: z.ZodType<AppType, z.ZodTypeDef, unknown> =
  z.union([AppTypeStack$inboundSchema, AppTypeDockerCompose$inboundSchema]);

/** @internal */
export type AppType$Outbound = string | string;

/** @internal */
export const AppType$outboundSchema: z.ZodType<
  AppType$Outbound,
  z.ZodTypeDef,
  AppType
> = z.union([AppTypeStack$outboundSchema, AppTypeDockerCompose$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppType$ {
  /** @deprecated use `AppType$inboundSchema` instead. */
  export const inboundSchema = AppType$inboundSchema;
  /** @deprecated use `AppType$outboundSchema` instead. */
  export const outboundSchema = AppType$outboundSchema;
  /** @deprecated use `AppType$Outbound` instead. */
  export type Outbound = AppType$Outbound;
}

export function appTypeToJSON(appType: AppType): string {
  return JSON.stringify(AppType$outboundSchema.parse(appType));
}

export function appTypeFromJSON(
  jsonString: string,
): SafeParseResult<AppType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppType' from JSON`,
  );
}

/** @internal */
export const DockerGetContainersByAppNameMatchRequest$inboundSchema: z.ZodType<
  DockerGetContainersByAppNameMatchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appType: z.union([
    AppTypeStack$inboundSchema,
    AppTypeDockerCompose$inboundSchema,
  ]).optional(),
  appName: z.string(),
  serverId: z.string().optional(),
});

/** @internal */
export type DockerGetContainersByAppNameMatchRequest$Outbound = {
  appType?: string | string | undefined;
  appName: string;
  serverId?: string | undefined;
};

/** @internal */
export const DockerGetContainersByAppNameMatchRequest$outboundSchema: z.ZodType<
  DockerGetContainersByAppNameMatchRequest$Outbound,
  z.ZodTypeDef,
  DockerGetContainersByAppNameMatchRequest
> = z.object({
  appType: z.union([
    AppTypeStack$outboundSchema,
    AppTypeDockerCompose$outboundSchema,
  ]).optional(),
  appName: z.string(),
  serverId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DockerGetContainersByAppNameMatchRequest$ {
  /** @deprecated use `DockerGetContainersByAppNameMatchRequest$inboundSchema` instead. */
  export const inboundSchema =
    DockerGetContainersByAppNameMatchRequest$inboundSchema;
  /** @deprecated use `DockerGetContainersByAppNameMatchRequest$outboundSchema` instead. */
  export const outboundSchema =
    DockerGetContainersByAppNameMatchRequest$outboundSchema;
  /** @deprecated use `DockerGetContainersByAppNameMatchRequest$Outbound` instead. */
  export type Outbound = DockerGetContainersByAppNameMatchRequest$Outbound;
}

export function dockerGetContainersByAppNameMatchRequestToJSON(
  dockerGetContainersByAppNameMatchRequest:
    DockerGetContainersByAppNameMatchRequest,
): string {
  return JSON.stringify(
    DockerGetContainersByAppNameMatchRequest$outboundSchema.parse(
      dockerGetContainersByAppNameMatchRequest,
    ),
  );
}

export function dockerGetContainersByAppNameMatchRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DockerGetContainersByAppNameMatchRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DockerGetContainersByAppNameMatchRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DockerGetContainersByAppNameMatchRequest' from JSON`,
  );
}
