/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AiDeleteSecurity = {
  authorization: string;
};

export type AiDeleteRequest = {
  aiId: string;
};

/** @internal */
export const AiDeleteSecurity$inboundSchema: z.ZodType<
  AiDeleteSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type AiDeleteSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const AiDeleteSecurity$outboundSchema: z.ZodType<
  AiDeleteSecurity$Outbound,
  z.ZodTypeDef,
  AiDeleteSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AiDeleteSecurity$ {
  /** @deprecated use `AiDeleteSecurity$inboundSchema` instead. */
  export const inboundSchema = AiDeleteSecurity$inboundSchema;
  /** @deprecated use `AiDeleteSecurity$outboundSchema` instead. */
  export const outboundSchema = AiDeleteSecurity$outboundSchema;
  /** @deprecated use `AiDeleteSecurity$Outbound` instead. */
  export type Outbound = AiDeleteSecurity$Outbound;
}

export function aiDeleteSecurityToJSON(
  aiDeleteSecurity: AiDeleteSecurity,
): string {
  return JSON.stringify(
    AiDeleteSecurity$outboundSchema.parse(aiDeleteSecurity),
  );
}

export function aiDeleteSecurityFromJSON(
  jsonString: string,
): SafeParseResult<AiDeleteSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AiDeleteSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AiDeleteSecurity' from JSON`,
  );
}

/** @internal */
export const AiDeleteRequest$inboundSchema: z.ZodType<
  AiDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  aiId: z.string(),
});

/** @internal */
export type AiDeleteRequest$Outbound = {
  aiId: string;
};

/** @internal */
export const AiDeleteRequest$outboundSchema: z.ZodType<
  AiDeleteRequest$Outbound,
  z.ZodTypeDef,
  AiDeleteRequest
> = z.object({
  aiId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AiDeleteRequest$ {
  /** @deprecated use `AiDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = AiDeleteRequest$inboundSchema;
  /** @deprecated use `AiDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = AiDeleteRequest$outboundSchema;
  /** @deprecated use `AiDeleteRequest$Outbound` instead. */
  export type Outbound = AiDeleteRequest$Outbound;
}

export function aiDeleteRequestToJSON(
  aiDeleteRequest: AiDeleteRequest,
): string {
  return JSON.stringify(AiDeleteRequest$outboundSchema.parse(aiDeleteRequest));
}

export function aiDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<AiDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AiDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AiDeleteRequest' from JSON`,
  );
}
