/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ServerRemoveRequest = {
  serverId: string;
};

/** @internal */
export const ServerRemoveRequest$inboundSchema: z.ZodType<
  ServerRemoveRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serverId: z.string(),
});

/** @internal */
export type ServerRemoveRequest$Outbound = {
  serverId: string;
};

/** @internal */
export const ServerRemoveRequest$outboundSchema: z.ZodType<
  ServerRemoveRequest$Outbound,
  z.ZodTypeDef,
  ServerRemoveRequest
> = z.object({
  serverId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServerRemoveRequest$ {
  /** @deprecated use `ServerRemoveRequest$inboundSchema` instead. */
  export const inboundSchema = ServerRemoveRequest$inboundSchema;
  /** @deprecated use `ServerRemoveRequest$outboundSchema` instead. */
  export const outboundSchema = ServerRemoveRequest$outboundSchema;
  /** @deprecated use `ServerRemoveRequest$Outbound` instead. */
  export type Outbound = ServerRemoveRequest$Outbound;
}

export function serverRemoveRequestToJSON(
  serverRemoveRequest: ServerRemoveRequest,
): string {
  return JSON.stringify(
    ServerRemoveRequest$outboundSchema.parse(serverRemoveRequest),
  );
}

export function serverRemoveRequestFromJSON(
  jsonString: string,
): SafeParseResult<ServerRemoveRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServerRemoveRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServerRemoveRequest' from JSON`,
  );
}
