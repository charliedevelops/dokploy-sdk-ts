/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type DeploymentAllSecurity = {
  authorization: string;
};

export type DeploymentAllRequest = {
  applicationId: string;
};

export const DeploymentAllStatus = {
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type DeploymentAllStatus = ClosedEnum<typeof DeploymentAllStatus>;

export type DeploymentAllResponseBody = {
  applicationId: string | null;
  backupId: string | null;
  composeId: string | null;
  createdAt: string;
  deploymentId: string;
  description: string | null;
  errorMessage: string | null;
  finishedAt: string | null;
  isPreviewDeployment: boolean | null;
  logPath: string;
  pid: string | null;
  previewDeploymentId: string | null;
  rollbackId: string | null;
  scheduleId: string | null;
  serverId: string | null;
  startedAt: string | null;
  status: DeploymentAllStatus | null;
  title: string;
  volumeBackupId: string | null;
};

export type DeploymentAllResponse =
  | models.ErrorT
  | Array<DeploymentAllResponseBody>;

/** @internal */
export const DeploymentAllSecurity$inboundSchema: z.ZodType<
  DeploymentAllSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type DeploymentAllSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const DeploymentAllSecurity$outboundSchema: z.ZodType<
  DeploymentAllSecurity$Outbound,
  z.ZodTypeDef,
  DeploymentAllSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentAllSecurity$ {
  /** @deprecated use `DeploymentAllSecurity$inboundSchema` instead. */
  export const inboundSchema = DeploymentAllSecurity$inboundSchema;
  /** @deprecated use `DeploymentAllSecurity$outboundSchema` instead. */
  export const outboundSchema = DeploymentAllSecurity$outboundSchema;
  /** @deprecated use `DeploymentAllSecurity$Outbound` instead. */
  export type Outbound = DeploymentAllSecurity$Outbound;
}

export function deploymentAllSecurityToJSON(
  deploymentAllSecurity: DeploymentAllSecurity,
): string {
  return JSON.stringify(
    DeploymentAllSecurity$outboundSchema.parse(deploymentAllSecurity),
  );
}

export function deploymentAllSecurityFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentAllSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentAllSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentAllSecurity' from JSON`,
  );
}

/** @internal */
export const DeploymentAllRequest$inboundSchema: z.ZodType<
  DeploymentAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string(),
});

/** @internal */
export type DeploymentAllRequest$Outbound = {
  applicationId: string;
};

/** @internal */
export const DeploymentAllRequest$outboundSchema: z.ZodType<
  DeploymentAllRequest$Outbound,
  z.ZodTypeDef,
  DeploymentAllRequest
> = z.object({
  applicationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentAllRequest$ {
  /** @deprecated use `DeploymentAllRequest$inboundSchema` instead. */
  export const inboundSchema = DeploymentAllRequest$inboundSchema;
  /** @deprecated use `DeploymentAllRequest$outboundSchema` instead. */
  export const outboundSchema = DeploymentAllRequest$outboundSchema;
  /** @deprecated use `DeploymentAllRequest$Outbound` instead. */
  export type Outbound = DeploymentAllRequest$Outbound;
}

export function deploymentAllRequestToJSON(
  deploymentAllRequest: DeploymentAllRequest,
): string {
  return JSON.stringify(
    DeploymentAllRequest$outboundSchema.parse(deploymentAllRequest),
  );
}

export function deploymentAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentAllRequest' from JSON`,
  );
}

/** @internal */
export const DeploymentAllStatus$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentAllStatus
> = z.nativeEnum(DeploymentAllStatus);

/** @internal */
export const DeploymentAllStatus$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentAllStatus
> = DeploymentAllStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentAllStatus$ {
  /** @deprecated use `DeploymentAllStatus$inboundSchema` instead. */
  export const inboundSchema = DeploymentAllStatus$inboundSchema;
  /** @deprecated use `DeploymentAllStatus$outboundSchema` instead. */
  export const outboundSchema = DeploymentAllStatus$outboundSchema;
}

/** @internal */
export const DeploymentAllResponseBody$inboundSchema: z.ZodType<
  DeploymentAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.nullable(z.string()),
  backupId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  createdAt: z.string(),
  deploymentId: z.string(),
  description: z.nullable(z.string()),
  errorMessage: z.nullable(z.string()),
  finishedAt: z.nullable(z.string()),
  isPreviewDeployment: z.nullable(z.boolean()),
  logPath: z.string(),
  pid: z.nullable(z.string()),
  previewDeploymentId: z.nullable(z.string()),
  rollbackId: z.nullable(z.string()),
  scheduleId: z.nullable(z.string()),
  serverId: z.nullable(z.string()),
  startedAt: z.nullable(z.string()),
  status: z.nullable(DeploymentAllStatus$inboundSchema),
  title: z.string(),
  volumeBackupId: z.nullable(z.string()),
});

/** @internal */
export type DeploymentAllResponseBody$Outbound = {
  applicationId: string | null;
  backupId: string | null;
  composeId: string | null;
  createdAt: string;
  deploymentId: string;
  description: string | null;
  errorMessage: string | null;
  finishedAt: string | null;
  isPreviewDeployment: boolean | null;
  logPath: string;
  pid: string | null;
  previewDeploymentId: string | null;
  rollbackId: string | null;
  scheduleId: string | null;
  serverId: string | null;
  startedAt: string | null;
  status: string | null;
  title: string;
  volumeBackupId: string | null;
};

/** @internal */
export const DeploymentAllResponseBody$outboundSchema: z.ZodType<
  DeploymentAllResponseBody$Outbound,
  z.ZodTypeDef,
  DeploymentAllResponseBody
> = z.object({
  applicationId: z.nullable(z.string()),
  backupId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  createdAt: z.string(),
  deploymentId: z.string(),
  description: z.nullable(z.string()),
  errorMessage: z.nullable(z.string()),
  finishedAt: z.nullable(z.string()),
  isPreviewDeployment: z.nullable(z.boolean()),
  logPath: z.string(),
  pid: z.nullable(z.string()),
  previewDeploymentId: z.nullable(z.string()),
  rollbackId: z.nullable(z.string()),
  scheduleId: z.nullable(z.string()),
  serverId: z.nullable(z.string()),
  startedAt: z.nullable(z.string()),
  status: z.nullable(DeploymentAllStatus$outboundSchema),
  title: z.string(),
  volumeBackupId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentAllResponseBody$ {
  /** @deprecated use `DeploymentAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeploymentAllResponseBody$inboundSchema;
  /** @deprecated use `DeploymentAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeploymentAllResponseBody$outboundSchema;
  /** @deprecated use `DeploymentAllResponseBody$Outbound` instead. */
  export type Outbound = DeploymentAllResponseBody$Outbound;
}

export function deploymentAllResponseBodyToJSON(
  deploymentAllResponseBody: DeploymentAllResponseBody,
): string {
  return JSON.stringify(
    DeploymentAllResponseBody$outboundSchema.parse(deploymentAllResponseBody),
  );
}

export function deploymentAllResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentAllResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentAllResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentAllResponseBody' from JSON`,
  );
}

/** @internal */
export const DeploymentAllResponse$inboundSchema: z.ZodType<
  DeploymentAllResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ErrorT$inboundSchema,
  z.array(z.lazy(() => DeploymentAllResponseBody$inboundSchema)),
]);

/** @internal */
export type DeploymentAllResponse$Outbound =
  | models.ErrorT$Outbound
  | Array<DeploymentAllResponseBody$Outbound>;

/** @internal */
export const DeploymentAllResponse$outboundSchema: z.ZodType<
  DeploymentAllResponse$Outbound,
  z.ZodTypeDef,
  DeploymentAllResponse
> = z.union([
  models.ErrorT$outboundSchema,
  z.array(z.lazy(() => DeploymentAllResponseBody$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentAllResponse$ {
  /** @deprecated use `DeploymentAllResponse$inboundSchema` instead. */
  export const inboundSchema = DeploymentAllResponse$inboundSchema;
  /** @deprecated use `DeploymentAllResponse$outboundSchema` instead. */
  export const outboundSchema = DeploymentAllResponse$outboundSchema;
  /** @deprecated use `DeploymentAllResponse$Outbound` instead. */
  export type Outbound = DeploymentAllResponse$Outbound;
}

export function deploymentAllResponseToJSON(
  deploymentAllResponse: DeploymentAllResponse,
): string {
  return JSON.stringify(
    DeploymentAllResponse$outboundSchema.parse(deploymentAllResponse),
  );
}

export function deploymentAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentAllResponse' from JSON`,
  );
}
