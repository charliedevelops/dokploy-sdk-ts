/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type BitbucketTestConnectionRequest = {
  bitbucketId: string;
  bitbucketUsername?: string | undefined;
  workspaceName?: string | undefined;
};

export type BitbucketTestConnectionResponse = models.ErrorT | string;

/** @internal */
export const BitbucketTestConnectionRequest$inboundSchema: z.ZodType<
  BitbucketTestConnectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  bitbucketId: z.string(),
  bitbucketUsername: z.string().optional(),
  workspaceName: z.string().optional(),
});

/** @internal */
export type BitbucketTestConnectionRequest$Outbound = {
  bitbucketId: string;
  bitbucketUsername?: string | undefined;
  workspaceName?: string | undefined;
};

/** @internal */
export const BitbucketTestConnectionRequest$outboundSchema: z.ZodType<
  BitbucketTestConnectionRequest$Outbound,
  z.ZodTypeDef,
  BitbucketTestConnectionRequest
> = z.object({
  bitbucketId: z.string(),
  bitbucketUsername: z.string().optional(),
  workspaceName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BitbucketTestConnectionRequest$ {
  /** @deprecated use `BitbucketTestConnectionRequest$inboundSchema` instead. */
  export const inboundSchema = BitbucketTestConnectionRequest$inboundSchema;
  /** @deprecated use `BitbucketTestConnectionRequest$outboundSchema` instead. */
  export const outboundSchema = BitbucketTestConnectionRequest$outboundSchema;
  /** @deprecated use `BitbucketTestConnectionRequest$Outbound` instead. */
  export type Outbound = BitbucketTestConnectionRequest$Outbound;
}

export function bitbucketTestConnectionRequestToJSON(
  bitbucketTestConnectionRequest: BitbucketTestConnectionRequest,
): string {
  return JSON.stringify(
    BitbucketTestConnectionRequest$outboundSchema.parse(
      bitbucketTestConnectionRequest,
    ),
  );
}

export function bitbucketTestConnectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<BitbucketTestConnectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BitbucketTestConnectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BitbucketTestConnectionRequest' from JSON`,
  );
}

/** @internal */
export const BitbucketTestConnectionResponse$inboundSchema: z.ZodType<
  BitbucketTestConnectionResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.string()]);

/** @internal */
export type BitbucketTestConnectionResponse$Outbound =
  | models.ErrorT$Outbound
  | string;

/** @internal */
export const BitbucketTestConnectionResponse$outboundSchema: z.ZodType<
  BitbucketTestConnectionResponse$Outbound,
  z.ZodTypeDef,
  BitbucketTestConnectionResponse
> = z.union([models.ErrorT$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BitbucketTestConnectionResponse$ {
  /** @deprecated use `BitbucketTestConnectionResponse$inboundSchema` instead. */
  export const inboundSchema = BitbucketTestConnectionResponse$inboundSchema;
  /** @deprecated use `BitbucketTestConnectionResponse$outboundSchema` instead. */
  export const outboundSchema = BitbucketTestConnectionResponse$outboundSchema;
  /** @deprecated use `BitbucketTestConnectionResponse$Outbound` instead. */
  export type Outbound = BitbucketTestConnectionResponse$Outbound;
}

export function bitbucketTestConnectionResponseToJSON(
  bitbucketTestConnectionResponse: BitbucketTestConnectionResponse,
): string {
  return JSON.stringify(
    BitbucketTestConnectionResponse$outboundSchema.parse(
      bitbucketTestConnectionResponse,
    ),
  );
}

export function bitbucketTestConnectionResponseFromJSON(
  jsonString: string,
): SafeParseResult<BitbucketTestConnectionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BitbucketTestConnectionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BitbucketTestConnectionResponse' from JSON`,
  );
}
