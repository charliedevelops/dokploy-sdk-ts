/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type MongoRebuildSecurity = {
  authorization: string;
};

export type MongoRebuildRequest = {
  mongoId: string;
};

export type MongoRebuildResponse = models.ErrorT | boolean;

/** @internal */
export const MongoRebuildSecurity$inboundSchema: z.ZodType<
  MongoRebuildSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type MongoRebuildSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const MongoRebuildSecurity$outboundSchema: z.ZodType<
  MongoRebuildSecurity$Outbound,
  z.ZodTypeDef,
  MongoRebuildSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoRebuildSecurity$ {
  /** @deprecated use `MongoRebuildSecurity$inboundSchema` instead. */
  export const inboundSchema = MongoRebuildSecurity$inboundSchema;
  /** @deprecated use `MongoRebuildSecurity$outboundSchema` instead. */
  export const outboundSchema = MongoRebuildSecurity$outboundSchema;
  /** @deprecated use `MongoRebuildSecurity$Outbound` instead. */
  export type Outbound = MongoRebuildSecurity$Outbound;
}

export function mongoRebuildSecurityToJSON(
  mongoRebuildSecurity: MongoRebuildSecurity,
): string {
  return JSON.stringify(
    MongoRebuildSecurity$outboundSchema.parse(mongoRebuildSecurity),
  );
}

export function mongoRebuildSecurityFromJSON(
  jsonString: string,
): SafeParseResult<MongoRebuildSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoRebuildSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoRebuildSecurity' from JSON`,
  );
}

/** @internal */
export const MongoRebuildRequest$inboundSchema: z.ZodType<
  MongoRebuildRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mongoId: z.string(),
});

/** @internal */
export type MongoRebuildRequest$Outbound = {
  mongoId: string;
};

/** @internal */
export const MongoRebuildRequest$outboundSchema: z.ZodType<
  MongoRebuildRequest$Outbound,
  z.ZodTypeDef,
  MongoRebuildRequest
> = z.object({
  mongoId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoRebuildRequest$ {
  /** @deprecated use `MongoRebuildRequest$inboundSchema` instead. */
  export const inboundSchema = MongoRebuildRequest$inboundSchema;
  /** @deprecated use `MongoRebuildRequest$outboundSchema` instead. */
  export const outboundSchema = MongoRebuildRequest$outboundSchema;
  /** @deprecated use `MongoRebuildRequest$Outbound` instead. */
  export type Outbound = MongoRebuildRequest$Outbound;
}

export function mongoRebuildRequestToJSON(
  mongoRebuildRequest: MongoRebuildRequest,
): string {
  return JSON.stringify(
    MongoRebuildRequest$outboundSchema.parse(mongoRebuildRequest),
  );
}

export function mongoRebuildRequestFromJSON(
  jsonString: string,
): SafeParseResult<MongoRebuildRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoRebuildRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoRebuildRequest' from JSON`,
  );
}

/** @internal */
export const MongoRebuildResponse$inboundSchema: z.ZodType<
  MongoRebuildResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.boolean()]);

/** @internal */
export type MongoRebuildResponse$Outbound = models.ErrorT$Outbound | boolean;

/** @internal */
export const MongoRebuildResponse$outboundSchema: z.ZodType<
  MongoRebuildResponse$Outbound,
  z.ZodTypeDef,
  MongoRebuildResponse
> = z.union([models.ErrorT$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoRebuildResponse$ {
  /** @deprecated use `MongoRebuildResponse$inboundSchema` instead. */
  export const inboundSchema = MongoRebuildResponse$inboundSchema;
  /** @deprecated use `MongoRebuildResponse$outboundSchema` instead. */
  export const outboundSchema = MongoRebuildResponse$outboundSchema;
  /** @deprecated use `MongoRebuildResponse$Outbound` instead. */
  export type Outbound = MongoRebuildResponse$Outbound;
}

export function mongoRebuildResponseToJSON(
  mongoRebuildResponse: MongoRebuildResponse,
): string {
  return JSON.stringify(
    MongoRebuildResponse$outboundSchema.parse(mongoRebuildResponse),
  );
}

export function mongoRebuildResponseFromJSON(
  jsonString: string,
): SafeParseResult<MongoRebuildResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoRebuildResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoRebuildResponse' from JSON`,
  );
}
