/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type RedisSaveExternalPortSecurity = {
  authorization: string;
};

export type RedisSaveExternalPortRequest = {
  externalPort: number | null;
  redisId: string;
};

export const RedisSaveExternalPortApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type RedisSaveExternalPortApplicationStatus = ClosedEnum<
  typeof RedisSaveExternalPortApplicationStatus
>;

export type RedisSaveExternalPortProject = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

export type RedisSaveExternalPortEnvironment = {
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  name: string;
  project: RedisSaveExternalPortProject;
  projectId: string;
};

export type RedisSaveExternalPortHealthCheckSwarm = {
  interval?: number | undefined;
  retries?: number | undefined;
  startPeriod?: number | undefined;
  test?: Array<string> | undefined;
  timeout?: number | undefined;
};

export type RedisSaveExternalPortGlobal = {};

export type RedisSaveExternalPortGlobalJob = {};

export type RedisSaveExternalPortReplicated = {
  replicas?: number | undefined;
};

export type RedisSaveExternalPortReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type RedisSaveExternalPortModeSwarm = {
  global?: RedisSaveExternalPortGlobal | undefined;
  globalJob?: RedisSaveExternalPortGlobalJob | undefined;
  replicated?: RedisSaveExternalPortReplicated | undefined;
  replicatedJob?: RedisSaveExternalPortReplicatedJob | undefined;
};

export const RedisSaveExternalPortServiceType = {
  Application: "application",
  Postgres: "postgres",
  Mysql: "mysql",
  Mariadb: "mariadb",
  Mongo: "mongo",
  Redis: "redis",
  Compose: "compose",
} as const;
export type RedisSaveExternalPortServiceType = ClosedEnum<
  typeof RedisSaveExternalPortServiceType
>;

export const RedisSaveExternalPortType = {
  Bind: "bind",
  Volume: "volume",
  File: "file",
} as const;
export type RedisSaveExternalPortType = ClosedEnum<
  typeof RedisSaveExternalPortType
>;

export type RedisSaveExternalPortMount = {
  applicationId: string | null;
  composeId: string | null;
  content: string | null;
  filePath: string | null;
  hostPath: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mountId: string;
  mountPath: string;
  mysqlId: string | null;
  postgresId: string | null;
  redisId: string | null;
  serviceType: RedisSaveExternalPortServiceType;
  type: RedisSaveExternalPortType;
  volumeName: string | null;
};

export type RedisSaveExternalPortDriverOpts = {};

export type RedisSaveExternalPortNetworkSwarm = {
  aliases?: Array<string> | undefined;
  driverOpts?: RedisSaveExternalPortDriverOpts | undefined;
  target?: string | undefined;
};

export type RedisSaveExternalPortPlatform = {
  architecture: string;
  os: string;
};

export type RedisSaveExternalPortSpread = {
  spreadDescriptor: string;
};

export type RedisSaveExternalPortPreference = {
  spread: RedisSaveExternalPortSpread;
};

export type RedisSaveExternalPortPlacementSwarm = {
  constraints?: Array<string> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<RedisSaveExternalPortPlatform> | undefined;
  preferences?: Array<RedisSaveExternalPortPreference> | undefined;
};

export type RedisSaveExternalPortRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type RedisSaveExternalPortRollbackConfigSwarm = {
  delay?: number | undefined;
  failureAction?: string | undefined;
  maxFailureRatio?: number | undefined;
  monitor?: number | undefined;
  order: string;
  parallelism: number;
};

export const RedisSaveExternalPortMetricsConfigEnum = {
  Null: "null",
} as const;
export type RedisSaveExternalPortMetricsConfigEnum = ClosedEnum<
  typeof RedisSaveExternalPortMetricsConfigEnum
>;

export type RedisSaveExternalPortMetricsConfigUnion1 =
  | string
  | number
  | boolean
  | RedisSaveExternalPortMetricsConfigEnum;

export type RedisSaveExternalPortMetricsConfigUnion2 =
  | string
  | number
  | boolean
  | RedisSaveExternalPortMetricsConfigEnum
  | Array<any>
  | { [k: string]: any };

export const RedisSaveExternalPortServerStatus = {
  Active: "active",
  Inactive: "inactive",
} as const;
export type RedisSaveExternalPortServerStatus = ClosedEnum<
  typeof RedisSaveExternalPortServerStatus
>;

export type RedisSaveExternalPortServer = {
  appName: string;
  command: string;
  createdAt: string;
  description: string | null;
  enableDockerCleanup: boolean;
  ipAddress: string;
  metricsConfig:
    | string
    | number
    | boolean
    | RedisSaveExternalPortMetricsConfigEnum
    | Array<any>
    | { [k: string]: any };
  name: string;
  organizationId: string;
  port: number;
  serverId: string;
  serverStatus: RedisSaveExternalPortServerStatus;
  sshKeyId: string | null;
  username: string;
};

export type RedisSaveExternalPortUpdateConfigSwarm = {
  delay?: number | undefined;
  failureAction?: string | undefined;
  maxFailureRatio?: number | undefined;
  monitor?: number | undefined;
  order: string;
  parallelism: number;
};

/**
 * Successful response
 */
export type RedisSaveExternalPortResponseBody = {
  appName: string;
  applicationStatus: RedisSaveExternalPortApplicationStatus;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databasePassword: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environment: RedisSaveExternalPortEnvironment;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: RedisSaveExternalPortHealthCheckSwarm | null;
  labelsSwarm: { [k: string]: string } | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: RedisSaveExternalPortModeSwarm | null;
  mounts: Array<RedisSaveExternalPortMount>;
  name: string;
  networkSwarm: Array<RedisSaveExternalPortNetworkSwarm> | null;
  placementSwarm: RedisSaveExternalPortPlacementSwarm | null;
  redisId: string;
  replicas: number;
  restartPolicySwarm: RedisSaveExternalPortRestartPolicySwarm | null;
  rollbackConfigSwarm: RedisSaveExternalPortRollbackConfigSwarm | null;
  server: RedisSaveExternalPortServer | null;
  serverId: string | null;
  updateConfigSwarm: RedisSaveExternalPortUpdateConfigSwarm | null;
};

export type RedisSaveExternalPortResponse =
  | RedisSaveExternalPortResponseBody
  | models.ErrorT;

/** @internal */
export const RedisSaveExternalPortSecurity$inboundSchema: z.ZodType<
  RedisSaveExternalPortSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type RedisSaveExternalPortSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const RedisSaveExternalPortSecurity$outboundSchema: z.ZodType<
  RedisSaveExternalPortSecurity$Outbound,
  z.ZodTypeDef,
  RedisSaveExternalPortSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortSecurity$ {
  /** @deprecated use `RedisSaveExternalPortSecurity$inboundSchema` instead. */
  export const inboundSchema = RedisSaveExternalPortSecurity$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortSecurity$outboundSchema` instead. */
  export const outboundSchema = RedisSaveExternalPortSecurity$outboundSchema;
  /** @deprecated use `RedisSaveExternalPortSecurity$Outbound` instead. */
  export type Outbound = RedisSaveExternalPortSecurity$Outbound;
}

export function redisSaveExternalPortSecurityToJSON(
  redisSaveExternalPortSecurity: RedisSaveExternalPortSecurity,
): string {
  return JSON.stringify(
    RedisSaveExternalPortSecurity$outboundSchema.parse(
      redisSaveExternalPortSecurity,
    ),
  );
}

export function redisSaveExternalPortSecurityFromJSON(
  jsonString: string,
): SafeParseResult<RedisSaveExternalPortSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisSaveExternalPortSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisSaveExternalPortSecurity' from JSON`,
  );
}

/** @internal */
export const RedisSaveExternalPortRequest$inboundSchema: z.ZodType<
  RedisSaveExternalPortRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  externalPort: z.nullable(z.number()),
  redisId: z.string(),
});

/** @internal */
export type RedisSaveExternalPortRequest$Outbound = {
  externalPort: number | null;
  redisId: string;
};

/** @internal */
export const RedisSaveExternalPortRequest$outboundSchema: z.ZodType<
  RedisSaveExternalPortRequest$Outbound,
  z.ZodTypeDef,
  RedisSaveExternalPortRequest
> = z.object({
  externalPort: z.nullable(z.number()),
  redisId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortRequest$ {
  /** @deprecated use `RedisSaveExternalPortRequest$inboundSchema` instead. */
  export const inboundSchema = RedisSaveExternalPortRequest$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortRequest$outboundSchema` instead. */
  export const outboundSchema = RedisSaveExternalPortRequest$outboundSchema;
  /** @deprecated use `RedisSaveExternalPortRequest$Outbound` instead. */
  export type Outbound = RedisSaveExternalPortRequest$Outbound;
}

export function redisSaveExternalPortRequestToJSON(
  redisSaveExternalPortRequest: RedisSaveExternalPortRequest,
): string {
  return JSON.stringify(
    RedisSaveExternalPortRequest$outboundSchema.parse(
      redisSaveExternalPortRequest,
    ),
  );
}

export function redisSaveExternalPortRequestFromJSON(
  jsonString: string,
): SafeParseResult<RedisSaveExternalPortRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisSaveExternalPortRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisSaveExternalPortRequest' from JSON`,
  );
}

/** @internal */
export const RedisSaveExternalPortApplicationStatus$inboundSchema:
  z.ZodNativeEnum<typeof RedisSaveExternalPortApplicationStatus> = z.nativeEnum(
    RedisSaveExternalPortApplicationStatus,
  );

/** @internal */
export const RedisSaveExternalPortApplicationStatus$outboundSchema:
  z.ZodNativeEnum<typeof RedisSaveExternalPortApplicationStatus> =
    RedisSaveExternalPortApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortApplicationStatus$ {
  /** @deprecated use `RedisSaveExternalPortApplicationStatus$inboundSchema` instead. */
  export const inboundSchema =
    RedisSaveExternalPortApplicationStatus$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortApplicationStatus$outboundSchema` instead. */
  export const outboundSchema =
    RedisSaveExternalPortApplicationStatus$outboundSchema;
}

/** @internal */
export const RedisSaveExternalPortProject$inboundSchema: z.ZodType<
  RedisSaveExternalPortProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/** @internal */
export type RedisSaveExternalPortProject$Outbound = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

/** @internal */
export const RedisSaveExternalPortProject$outboundSchema: z.ZodType<
  RedisSaveExternalPortProject$Outbound,
  z.ZodTypeDef,
  RedisSaveExternalPortProject
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortProject$ {
  /** @deprecated use `RedisSaveExternalPortProject$inboundSchema` instead. */
  export const inboundSchema = RedisSaveExternalPortProject$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortProject$outboundSchema` instead. */
  export const outboundSchema = RedisSaveExternalPortProject$outboundSchema;
  /** @deprecated use `RedisSaveExternalPortProject$Outbound` instead. */
  export type Outbound = RedisSaveExternalPortProject$Outbound;
}

export function redisSaveExternalPortProjectToJSON(
  redisSaveExternalPortProject: RedisSaveExternalPortProject,
): string {
  return JSON.stringify(
    RedisSaveExternalPortProject$outboundSchema.parse(
      redisSaveExternalPortProject,
    ),
  );
}

export function redisSaveExternalPortProjectFromJSON(
  jsonString: string,
): SafeParseResult<RedisSaveExternalPortProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisSaveExternalPortProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisSaveExternalPortProject' from JSON`,
  );
}

/** @internal */
export const RedisSaveExternalPortEnvironment$inboundSchema: z.ZodType<
  RedisSaveExternalPortEnvironment,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  name: z.string(),
  project: z.lazy(() => RedisSaveExternalPortProject$inboundSchema),
  projectId: z.string(),
});

/** @internal */
export type RedisSaveExternalPortEnvironment$Outbound = {
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  name: string;
  project: RedisSaveExternalPortProject$Outbound;
  projectId: string;
};

/** @internal */
export const RedisSaveExternalPortEnvironment$outboundSchema: z.ZodType<
  RedisSaveExternalPortEnvironment$Outbound,
  z.ZodTypeDef,
  RedisSaveExternalPortEnvironment
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  name: z.string(),
  project: z.lazy(() => RedisSaveExternalPortProject$outboundSchema),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortEnvironment$ {
  /** @deprecated use `RedisSaveExternalPortEnvironment$inboundSchema` instead. */
  export const inboundSchema = RedisSaveExternalPortEnvironment$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortEnvironment$outboundSchema` instead. */
  export const outboundSchema = RedisSaveExternalPortEnvironment$outboundSchema;
  /** @deprecated use `RedisSaveExternalPortEnvironment$Outbound` instead. */
  export type Outbound = RedisSaveExternalPortEnvironment$Outbound;
}

export function redisSaveExternalPortEnvironmentToJSON(
  redisSaveExternalPortEnvironment: RedisSaveExternalPortEnvironment,
): string {
  return JSON.stringify(
    RedisSaveExternalPortEnvironment$outboundSchema.parse(
      redisSaveExternalPortEnvironment,
    ),
  );
}

export function redisSaveExternalPortEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<RedisSaveExternalPortEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisSaveExternalPortEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisSaveExternalPortEnvironment' from JSON`,
  );
}

/** @internal */
export const RedisSaveExternalPortHealthCheckSwarm$inboundSchema: z.ZodType<
  RedisSaveExternalPortHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Interval: z.number().optional(),
  Retries: z.number().optional(),
  StartPeriod: z.number().optional(),
  Test: z.array(z.string()).optional(),
  Timeout: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Interval": "interval",
    "Retries": "retries",
    "StartPeriod": "startPeriod",
    "Test": "test",
    "Timeout": "timeout",
  });
});

/** @internal */
export type RedisSaveExternalPortHealthCheckSwarm$Outbound = {
  Interval?: number | undefined;
  Retries?: number | undefined;
  StartPeriod?: number | undefined;
  Test?: Array<string> | undefined;
  Timeout?: number | undefined;
};

/** @internal */
export const RedisSaveExternalPortHealthCheckSwarm$outboundSchema: z.ZodType<
  RedisSaveExternalPortHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  RedisSaveExternalPortHealthCheckSwarm
> = z.object({
  interval: z.number().optional(),
  retries: z.number().optional(),
  startPeriod: z.number().optional(),
  test: z.array(z.string()).optional(),
  timeout: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    interval: "Interval",
    retries: "Retries",
    startPeriod: "StartPeriod",
    test: "Test",
    timeout: "Timeout",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortHealthCheckSwarm$ {
  /** @deprecated use `RedisSaveExternalPortHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema =
    RedisSaveExternalPortHealthCheckSwarm$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema =
    RedisSaveExternalPortHealthCheckSwarm$outboundSchema;
  /** @deprecated use `RedisSaveExternalPortHealthCheckSwarm$Outbound` instead. */
  export type Outbound = RedisSaveExternalPortHealthCheckSwarm$Outbound;
}

export function redisSaveExternalPortHealthCheckSwarmToJSON(
  redisSaveExternalPortHealthCheckSwarm: RedisSaveExternalPortHealthCheckSwarm,
): string {
  return JSON.stringify(
    RedisSaveExternalPortHealthCheckSwarm$outboundSchema.parse(
      redisSaveExternalPortHealthCheckSwarm,
    ),
  );
}

export function redisSaveExternalPortHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisSaveExternalPortHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RedisSaveExternalPortHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisSaveExternalPortHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const RedisSaveExternalPortGlobal$inboundSchema: z.ZodType<
  RedisSaveExternalPortGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RedisSaveExternalPortGlobal$Outbound = {};

/** @internal */
export const RedisSaveExternalPortGlobal$outboundSchema: z.ZodType<
  RedisSaveExternalPortGlobal$Outbound,
  z.ZodTypeDef,
  RedisSaveExternalPortGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortGlobal$ {
  /** @deprecated use `RedisSaveExternalPortGlobal$inboundSchema` instead. */
  export const inboundSchema = RedisSaveExternalPortGlobal$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortGlobal$outboundSchema` instead. */
  export const outboundSchema = RedisSaveExternalPortGlobal$outboundSchema;
  /** @deprecated use `RedisSaveExternalPortGlobal$Outbound` instead. */
  export type Outbound = RedisSaveExternalPortGlobal$Outbound;
}

export function redisSaveExternalPortGlobalToJSON(
  redisSaveExternalPortGlobal: RedisSaveExternalPortGlobal,
): string {
  return JSON.stringify(
    RedisSaveExternalPortGlobal$outboundSchema.parse(
      redisSaveExternalPortGlobal,
    ),
  );
}

export function redisSaveExternalPortGlobalFromJSON(
  jsonString: string,
): SafeParseResult<RedisSaveExternalPortGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisSaveExternalPortGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisSaveExternalPortGlobal' from JSON`,
  );
}

/** @internal */
export const RedisSaveExternalPortGlobalJob$inboundSchema: z.ZodType<
  RedisSaveExternalPortGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RedisSaveExternalPortGlobalJob$Outbound = {};

/** @internal */
export const RedisSaveExternalPortGlobalJob$outboundSchema: z.ZodType<
  RedisSaveExternalPortGlobalJob$Outbound,
  z.ZodTypeDef,
  RedisSaveExternalPortGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortGlobalJob$ {
  /** @deprecated use `RedisSaveExternalPortGlobalJob$inboundSchema` instead. */
  export const inboundSchema = RedisSaveExternalPortGlobalJob$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortGlobalJob$outboundSchema` instead. */
  export const outboundSchema = RedisSaveExternalPortGlobalJob$outboundSchema;
  /** @deprecated use `RedisSaveExternalPortGlobalJob$Outbound` instead. */
  export type Outbound = RedisSaveExternalPortGlobalJob$Outbound;
}

export function redisSaveExternalPortGlobalJobToJSON(
  redisSaveExternalPortGlobalJob: RedisSaveExternalPortGlobalJob,
): string {
  return JSON.stringify(
    RedisSaveExternalPortGlobalJob$outboundSchema.parse(
      redisSaveExternalPortGlobalJob,
    ),
  );
}

export function redisSaveExternalPortGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<RedisSaveExternalPortGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisSaveExternalPortGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisSaveExternalPortGlobalJob' from JSON`,
  );
}

/** @internal */
export const RedisSaveExternalPortReplicated$inboundSchema: z.ZodType<
  RedisSaveExternalPortReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type RedisSaveExternalPortReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const RedisSaveExternalPortReplicated$outboundSchema: z.ZodType<
  RedisSaveExternalPortReplicated$Outbound,
  z.ZodTypeDef,
  RedisSaveExternalPortReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortReplicated$ {
  /** @deprecated use `RedisSaveExternalPortReplicated$inboundSchema` instead. */
  export const inboundSchema = RedisSaveExternalPortReplicated$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortReplicated$outboundSchema` instead. */
  export const outboundSchema = RedisSaveExternalPortReplicated$outboundSchema;
  /** @deprecated use `RedisSaveExternalPortReplicated$Outbound` instead. */
  export type Outbound = RedisSaveExternalPortReplicated$Outbound;
}

export function redisSaveExternalPortReplicatedToJSON(
  redisSaveExternalPortReplicated: RedisSaveExternalPortReplicated,
): string {
  return JSON.stringify(
    RedisSaveExternalPortReplicated$outboundSchema.parse(
      redisSaveExternalPortReplicated,
    ),
  );
}

export function redisSaveExternalPortReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<RedisSaveExternalPortReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisSaveExternalPortReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisSaveExternalPortReplicated' from JSON`,
  );
}

/** @internal */
export const RedisSaveExternalPortReplicatedJob$inboundSchema: z.ZodType<
  RedisSaveExternalPortReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type RedisSaveExternalPortReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const RedisSaveExternalPortReplicatedJob$outboundSchema: z.ZodType<
  RedisSaveExternalPortReplicatedJob$Outbound,
  z.ZodTypeDef,
  RedisSaveExternalPortReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortReplicatedJob$ {
  /** @deprecated use `RedisSaveExternalPortReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = RedisSaveExternalPortReplicatedJob$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortReplicatedJob$outboundSchema` instead. */
  export const outboundSchema =
    RedisSaveExternalPortReplicatedJob$outboundSchema;
  /** @deprecated use `RedisSaveExternalPortReplicatedJob$Outbound` instead. */
  export type Outbound = RedisSaveExternalPortReplicatedJob$Outbound;
}

export function redisSaveExternalPortReplicatedJobToJSON(
  redisSaveExternalPortReplicatedJob: RedisSaveExternalPortReplicatedJob,
): string {
  return JSON.stringify(
    RedisSaveExternalPortReplicatedJob$outboundSchema.parse(
      redisSaveExternalPortReplicatedJob,
    ),
  );
}

export function redisSaveExternalPortReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<RedisSaveExternalPortReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RedisSaveExternalPortReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisSaveExternalPortReplicatedJob' from JSON`,
  );
}

/** @internal */
export const RedisSaveExternalPortModeSwarm$inboundSchema: z.ZodType<
  RedisSaveExternalPortModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Global: z.lazy(() => RedisSaveExternalPortGlobal$inboundSchema).optional(),
  GlobalJob: z.lazy(() => RedisSaveExternalPortGlobalJob$inboundSchema)
    .optional(),
  Replicated: z.lazy(() => RedisSaveExternalPortReplicated$inboundSchema)
    .optional(),
  ReplicatedJob: z.lazy(() => RedisSaveExternalPortReplicatedJob$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Global": "global",
    "GlobalJob": "globalJob",
    "Replicated": "replicated",
    "ReplicatedJob": "replicatedJob",
  });
});

/** @internal */
export type RedisSaveExternalPortModeSwarm$Outbound = {
  Global?: RedisSaveExternalPortGlobal$Outbound | undefined;
  GlobalJob?: RedisSaveExternalPortGlobalJob$Outbound | undefined;
  Replicated?: RedisSaveExternalPortReplicated$Outbound | undefined;
  ReplicatedJob?: RedisSaveExternalPortReplicatedJob$Outbound | undefined;
};

/** @internal */
export const RedisSaveExternalPortModeSwarm$outboundSchema: z.ZodType<
  RedisSaveExternalPortModeSwarm$Outbound,
  z.ZodTypeDef,
  RedisSaveExternalPortModeSwarm
> = z.object({
  global: z.lazy(() => RedisSaveExternalPortGlobal$outboundSchema).optional(),
  globalJob: z.lazy(() => RedisSaveExternalPortGlobalJob$outboundSchema)
    .optional(),
  replicated: z.lazy(() => RedisSaveExternalPortReplicated$outboundSchema)
    .optional(),
  replicatedJob: z.lazy(() => RedisSaveExternalPortReplicatedJob$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    global: "Global",
    globalJob: "GlobalJob",
    replicated: "Replicated",
    replicatedJob: "ReplicatedJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortModeSwarm$ {
  /** @deprecated use `RedisSaveExternalPortModeSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisSaveExternalPortModeSwarm$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortModeSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisSaveExternalPortModeSwarm$outboundSchema;
  /** @deprecated use `RedisSaveExternalPortModeSwarm$Outbound` instead. */
  export type Outbound = RedisSaveExternalPortModeSwarm$Outbound;
}

export function redisSaveExternalPortModeSwarmToJSON(
  redisSaveExternalPortModeSwarm: RedisSaveExternalPortModeSwarm,
): string {
  return JSON.stringify(
    RedisSaveExternalPortModeSwarm$outboundSchema.parse(
      redisSaveExternalPortModeSwarm,
    ),
  );
}

export function redisSaveExternalPortModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisSaveExternalPortModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisSaveExternalPortModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisSaveExternalPortModeSwarm' from JSON`,
  );
}

/** @internal */
export const RedisSaveExternalPortServiceType$inboundSchema: z.ZodNativeEnum<
  typeof RedisSaveExternalPortServiceType
> = z.nativeEnum(RedisSaveExternalPortServiceType);

/** @internal */
export const RedisSaveExternalPortServiceType$outboundSchema: z.ZodNativeEnum<
  typeof RedisSaveExternalPortServiceType
> = RedisSaveExternalPortServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortServiceType$ {
  /** @deprecated use `RedisSaveExternalPortServiceType$inboundSchema` instead. */
  export const inboundSchema = RedisSaveExternalPortServiceType$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortServiceType$outboundSchema` instead. */
  export const outboundSchema = RedisSaveExternalPortServiceType$outboundSchema;
}

/** @internal */
export const RedisSaveExternalPortType$inboundSchema: z.ZodNativeEnum<
  typeof RedisSaveExternalPortType
> = z.nativeEnum(RedisSaveExternalPortType);

/** @internal */
export const RedisSaveExternalPortType$outboundSchema: z.ZodNativeEnum<
  typeof RedisSaveExternalPortType
> = RedisSaveExternalPortType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortType$ {
  /** @deprecated use `RedisSaveExternalPortType$inboundSchema` instead. */
  export const inboundSchema = RedisSaveExternalPortType$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortType$outboundSchema` instead. */
  export const outboundSchema = RedisSaveExternalPortType$outboundSchema;
}

/** @internal */
export const RedisSaveExternalPortMount$inboundSchema: z.ZodType<
  RedisSaveExternalPortMount,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  content: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  hostPath: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mountId: z.string(),
  mountPath: z.string(),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  serviceType: RedisSaveExternalPortServiceType$inboundSchema,
  type: RedisSaveExternalPortType$inboundSchema,
  volumeName: z.nullable(z.string()),
});

/** @internal */
export type RedisSaveExternalPortMount$Outbound = {
  applicationId: string | null;
  composeId: string | null;
  content: string | null;
  filePath: string | null;
  hostPath: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mountId: string;
  mountPath: string;
  mysqlId: string | null;
  postgresId: string | null;
  redisId: string | null;
  serviceType: string;
  type: string;
  volumeName: string | null;
};

/** @internal */
export const RedisSaveExternalPortMount$outboundSchema: z.ZodType<
  RedisSaveExternalPortMount$Outbound,
  z.ZodTypeDef,
  RedisSaveExternalPortMount
> = z.object({
  applicationId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  content: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  hostPath: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mountId: z.string(),
  mountPath: z.string(),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  serviceType: RedisSaveExternalPortServiceType$outboundSchema,
  type: RedisSaveExternalPortType$outboundSchema,
  volumeName: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortMount$ {
  /** @deprecated use `RedisSaveExternalPortMount$inboundSchema` instead. */
  export const inboundSchema = RedisSaveExternalPortMount$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortMount$outboundSchema` instead. */
  export const outboundSchema = RedisSaveExternalPortMount$outboundSchema;
  /** @deprecated use `RedisSaveExternalPortMount$Outbound` instead. */
  export type Outbound = RedisSaveExternalPortMount$Outbound;
}

export function redisSaveExternalPortMountToJSON(
  redisSaveExternalPortMount: RedisSaveExternalPortMount,
): string {
  return JSON.stringify(
    RedisSaveExternalPortMount$outboundSchema.parse(redisSaveExternalPortMount),
  );
}

export function redisSaveExternalPortMountFromJSON(
  jsonString: string,
): SafeParseResult<RedisSaveExternalPortMount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisSaveExternalPortMount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisSaveExternalPortMount' from JSON`,
  );
}

/** @internal */
export const RedisSaveExternalPortDriverOpts$inboundSchema: z.ZodType<
  RedisSaveExternalPortDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RedisSaveExternalPortDriverOpts$Outbound = {};

/** @internal */
export const RedisSaveExternalPortDriverOpts$outboundSchema: z.ZodType<
  RedisSaveExternalPortDriverOpts$Outbound,
  z.ZodTypeDef,
  RedisSaveExternalPortDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortDriverOpts$ {
  /** @deprecated use `RedisSaveExternalPortDriverOpts$inboundSchema` instead. */
  export const inboundSchema = RedisSaveExternalPortDriverOpts$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortDriverOpts$outboundSchema` instead. */
  export const outboundSchema = RedisSaveExternalPortDriverOpts$outboundSchema;
  /** @deprecated use `RedisSaveExternalPortDriverOpts$Outbound` instead. */
  export type Outbound = RedisSaveExternalPortDriverOpts$Outbound;
}

export function redisSaveExternalPortDriverOptsToJSON(
  redisSaveExternalPortDriverOpts: RedisSaveExternalPortDriverOpts,
): string {
  return JSON.stringify(
    RedisSaveExternalPortDriverOpts$outboundSchema.parse(
      redisSaveExternalPortDriverOpts,
    ),
  );
}

export function redisSaveExternalPortDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<RedisSaveExternalPortDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisSaveExternalPortDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisSaveExternalPortDriverOpts' from JSON`,
  );
}

/** @internal */
export const RedisSaveExternalPortNetworkSwarm$inboundSchema: z.ZodType<
  RedisSaveExternalPortNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => RedisSaveExternalPortDriverOpts$inboundSchema)
    .optional(),
  Target: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
    "Target": "target",
  });
});

/** @internal */
export type RedisSaveExternalPortNetworkSwarm$Outbound = {
  Aliases?: Array<string> | undefined;
  DriverOpts?: RedisSaveExternalPortDriverOpts$Outbound | undefined;
  Target?: string | undefined;
};

/** @internal */
export const RedisSaveExternalPortNetworkSwarm$outboundSchema: z.ZodType<
  RedisSaveExternalPortNetworkSwarm$Outbound,
  z.ZodTypeDef,
  RedisSaveExternalPortNetworkSwarm
> = z.object({
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => RedisSaveExternalPortDriverOpts$outboundSchema)
    .optional(),
  target: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    aliases: "Aliases",
    driverOpts: "DriverOpts",
    target: "Target",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortNetworkSwarm$ {
  /** @deprecated use `RedisSaveExternalPortNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisSaveExternalPortNetworkSwarm$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema =
    RedisSaveExternalPortNetworkSwarm$outboundSchema;
  /** @deprecated use `RedisSaveExternalPortNetworkSwarm$Outbound` instead. */
  export type Outbound = RedisSaveExternalPortNetworkSwarm$Outbound;
}

export function redisSaveExternalPortNetworkSwarmToJSON(
  redisSaveExternalPortNetworkSwarm: RedisSaveExternalPortNetworkSwarm,
): string {
  return JSON.stringify(
    RedisSaveExternalPortNetworkSwarm$outboundSchema.parse(
      redisSaveExternalPortNetworkSwarm,
    ),
  );
}

export function redisSaveExternalPortNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisSaveExternalPortNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisSaveExternalPortNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisSaveExternalPortNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const RedisSaveExternalPortPlatform$inboundSchema: z.ZodType<
  RedisSaveExternalPortPlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type RedisSaveExternalPortPlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const RedisSaveExternalPortPlatform$outboundSchema: z.ZodType<
  RedisSaveExternalPortPlatform$Outbound,
  z.ZodTypeDef,
  RedisSaveExternalPortPlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortPlatform$ {
  /** @deprecated use `RedisSaveExternalPortPlatform$inboundSchema` instead. */
  export const inboundSchema = RedisSaveExternalPortPlatform$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortPlatform$outboundSchema` instead. */
  export const outboundSchema = RedisSaveExternalPortPlatform$outboundSchema;
  /** @deprecated use `RedisSaveExternalPortPlatform$Outbound` instead. */
  export type Outbound = RedisSaveExternalPortPlatform$Outbound;
}

export function redisSaveExternalPortPlatformToJSON(
  redisSaveExternalPortPlatform: RedisSaveExternalPortPlatform,
): string {
  return JSON.stringify(
    RedisSaveExternalPortPlatform$outboundSchema.parse(
      redisSaveExternalPortPlatform,
    ),
  );
}

export function redisSaveExternalPortPlatformFromJSON(
  jsonString: string,
): SafeParseResult<RedisSaveExternalPortPlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisSaveExternalPortPlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisSaveExternalPortPlatform' from JSON`,
  );
}

/** @internal */
export const RedisSaveExternalPortSpread$inboundSchema: z.ZodType<
  RedisSaveExternalPortSpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type RedisSaveExternalPortSpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const RedisSaveExternalPortSpread$outboundSchema: z.ZodType<
  RedisSaveExternalPortSpread$Outbound,
  z.ZodTypeDef,
  RedisSaveExternalPortSpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortSpread$ {
  /** @deprecated use `RedisSaveExternalPortSpread$inboundSchema` instead. */
  export const inboundSchema = RedisSaveExternalPortSpread$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortSpread$outboundSchema` instead. */
  export const outboundSchema = RedisSaveExternalPortSpread$outboundSchema;
  /** @deprecated use `RedisSaveExternalPortSpread$Outbound` instead. */
  export type Outbound = RedisSaveExternalPortSpread$Outbound;
}

export function redisSaveExternalPortSpreadToJSON(
  redisSaveExternalPortSpread: RedisSaveExternalPortSpread,
): string {
  return JSON.stringify(
    RedisSaveExternalPortSpread$outboundSchema.parse(
      redisSaveExternalPortSpread,
    ),
  );
}

export function redisSaveExternalPortSpreadFromJSON(
  jsonString: string,
): SafeParseResult<RedisSaveExternalPortSpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisSaveExternalPortSpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisSaveExternalPortSpread' from JSON`,
  );
}

/** @internal */
export const RedisSaveExternalPortPreference$inboundSchema: z.ZodType<
  RedisSaveExternalPortPreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => RedisSaveExternalPortSpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type RedisSaveExternalPortPreference$Outbound = {
  Spread: RedisSaveExternalPortSpread$Outbound;
};

/** @internal */
export const RedisSaveExternalPortPreference$outboundSchema: z.ZodType<
  RedisSaveExternalPortPreference$Outbound,
  z.ZodTypeDef,
  RedisSaveExternalPortPreference
> = z.object({
  spread: z.lazy(() => RedisSaveExternalPortSpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortPreference$ {
  /** @deprecated use `RedisSaveExternalPortPreference$inboundSchema` instead. */
  export const inboundSchema = RedisSaveExternalPortPreference$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortPreference$outboundSchema` instead. */
  export const outboundSchema = RedisSaveExternalPortPreference$outboundSchema;
  /** @deprecated use `RedisSaveExternalPortPreference$Outbound` instead. */
  export type Outbound = RedisSaveExternalPortPreference$Outbound;
}

export function redisSaveExternalPortPreferenceToJSON(
  redisSaveExternalPortPreference: RedisSaveExternalPortPreference,
): string {
  return JSON.stringify(
    RedisSaveExternalPortPreference$outboundSchema.parse(
      redisSaveExternalPortPreference,
    ),
  );
}

export function redisSaveExternalPortPreferenceFromJSON(
  jsonString: string,
): SafeParseResult<RedisSaveExternalPortPreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisSaveExternalPortPreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisSaveExternalPortPreference' from JSON`,
  );
}

/** @internal */
export const RedisSaveExternalPortPlacementSwarm$inboundSchema: z.ZodType<
  RedisSaveExternalPortPlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => RedisSaveExternalPortPlatform$inboundSchema))
    .optional(),
  Preferences: z.array(
    z.lazy(() => RedisSaveExternalPortPreference$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
    "Preferences": "preferences",
  });
});

/** @internal */
export type RedisSaveExternalPortPlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<RedisSaveExternalPortPlatform$Outbound> | undefined;
  Preferences?: Array<RedisSaveExternalPortPreference$Outbound> | undefined;
};

/** @internal */
export const RedisSaveExternalPortPlacementSwarm$outboundSchema: z.ZodType<
  RedisSaveExternalPortPlacementSwarm$Outbound,
  z.ZodTypeDef,
  RedisSaveExternalPortPlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => RedisSaveExternalPortPlatform$outboundSchema))
    .optional(),
  preferences: z.array(
    z.lazy(() => RedisSaveExternalPortPreference$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
    preferences: "Preferences",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortPlacementSwarm$ {
  /** @deprecated use `RedisSaveExternalPortPlacementSwarm$inboundSchema` instead. */
  export const inboundSchema =
    RedisSaveExternalPortPlacementSwarm$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortPlacementSwarm$outboundSchema` instead. */
  export const outboundSchema =
    RedisSaveExternalPortPlacementSwarm$outboundSchema;
  /** @deprecated use `RedisSaveExternalPortPlacementSwarm$Outbound` instead. */
  export type Outbound = RedisSaveExternalPortPlacementSwarm$Outbound;
}

export function redisSaveExternalPortPlacementSwarmToJSON(
  redisSaveExternalPortPlacementSwarm: RedisSaveExternalPortPlacementSwarm,
): string {
  return JSON.stringify(
    RedisSaveExternalPortPlacementSwarm$outboundSchema.parse(
      redisSaveExternalPortPlacementSwarm,
    ),
  );
}

export function redisSaveExternalPortPlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisSaveExternalPortPlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RedisSaveExternalPortPlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisSaveExternalPortPlacementSwarm' from JSON`,
  );
}

/** @internal */
export const RedisSaveExternalPortRestartPolicySwarm$inboundSchema: z.ZodType<
  RedisSaveExternalPortRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type RedisSaveExternalPortRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const RedisSaveExternalPortRestartPolicySwarm$outboundSchema: z.ZodType<
  RedisSaveExternalPortRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  RedisSaveExternalPortRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortRestartPolicySwarm$ {
  /** @deprecated use `RedisSaveExternalPortRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema =
    RedisSaveExternalPortRestartPolicySwarm$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema =
    RedisSaveExternalPortRestartPolicySwarm$outboundSchema;
  /** @deprecated use `RedisSaveExternalPortRestartPolicySwarm$Outbound` instead. */
  export type Outbound = RedisSaveExternalPortRestartPolicySwarm$Outbound;
}

export function redisSaveExternalPortRestartPolicySwarmToJSON(
  redisSaveExternalPortRestartPolicySwarm:
    RedisSaveExternalPortRestartPolicySwarm,
): string {
  return JSON.stringify(
    RedisSaveExternalPortRestartPolicySwarm$outboundSchema.parse(
      redisSaveExternalPortRestartPolicySwarm,
    ),
  );
}

export function redisSaveExternalPortRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<
  RedisSaveExternalPortRestartPolicySwarm,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RedisSaveExternalPortRestartPolicySwarm$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RedisSaveExternalPortRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const RedisSaveExternalPortRollbackConfigSwarm$inboundSchema: z.ZodType<
  RedisSaveExternalPortRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  MaxFailureRatio: z.number().optional(),
  Monitor: z.number().optional(),
  Order: z.string(),
  Parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    "Delay": "delay",
    "FailureAction": "failureAction",
    "MaxFailureRatio": "maxFailureRatio",
    "Monitor": "monitor",
    "Order": "order",
    "Parallelism": "parallelism",
  });
});

/** @internal */
export type RedisSaveExternalPortRollbackConfigSwarm$Outbound = {
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  MaxFailureRatio?: number | undefined;
  Monitor?: number | undefined;
  Order: string;
  Parallelism: number;
};

/** @internal */
export const RedisSaveExternalPortRollbackConfigSwarm$outboundSchema: z.ZodType<
  RedisSaveExternalPortRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  RedisSaveExternalPortRollbackConfigSwarm
> = z.object({
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  maxFailureRatio: z.number().optional(),
  monitor: z.number().optional(),
  order: z.string(),
  parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    delay: "Delay",
    failureAction: "FailureAction",
    maxFailureRatio: "MaxFailureRatio",
    monitor: "Monitor",
    order: "Order",
    parallelism: "Parallelism",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortRollbackConfigSwarm$ {
  /** @deprecated use `RedisSaveExternalPortRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema =
    RedisSaveExternalPortRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema =
    RedisSaveExternalPortRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `RedisSaveExternalPortRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = RedisSaveExternalPortRollbackConfigSwarm$Outbound;
}

export function redisSaveExternalPortRollbackConfigSwarmToJSON(
  redisSaveExternalPortRollbackConfigSwarm:
    RedisSaveExternalPortRollbackConfigSwarm,
): string {
  return JSON.stringify(
    RedisSaveExternalPortRollbackConfigSwarm$outboundSchema.parse(
      redisSaveExternalPortRollbackConfigSwarm,
    ),
  );
}

export function redisSaveExternalPortRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<
  RedisSaveExternalPortRollbackConfigSwarm,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RedisSaveExternalPortRollbackConfigSwarm$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RedisSaveExternalPortRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const RedisSaveExternalPortMetricsConfigEnum$inboundSchema:
  z.ZodNativeEnum<typeof RedisSaveExternalPortMetricsConfigEnum> = z.nativeEnum(
    RedisSaveExternalPortMetricsConfigEnum,
  );

/** @internal */
export const RedisSaveExternalPortMetricsConfigEnum$outboundSchema:
  z.ZodNativeEnum<typeof RedisSaveExternalPortMetricsConfigEnum> =
    RedisSaveExternalPortMetricsConfigEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortMetricsConfigEnum$ {
  /** @deprecated use `RedisSaveExternalPortMetricsConfigEnum$inboundSchema` instead. */
  export const inboundSchema =
    RedisSaveExternalPortMetricsConfigEnum$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortMetricsConfigEnum$outboundSchema` instead. */
  export const outboundSchema =
    RedisSaveExternalPortMetricsConfigEnum$outboundSchema;
}

/** @internal */
export const RedisSaveExternalPortMetricsConfigUnion1$inboundSchema: z.ZodType<
  RedisSaveExternalPortMetricsConfigUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  RedisSaveExternalPortMetricsConfigEnum$inboundSchema,
]);

/** @internal */
export type RedisSaveExternalPortMetricsConfigUnion1$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const RedisSaveExternalPortMetricsConfigUnion1$outboundSchema: z.ZodType<
  RedisSaveExternalPortMetricsConfigUnion1$Outbound,
  z.ZodTypeDef,
  RedisSaveExternalPortMetricsConfigUnion1
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  RedisSaveExternalPortMetricsConfigEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortMetricsConfigUnion1$ {
  /** @deprecated use `RedisSaveExternalPortMetricsConfigUnion1$inboundSchema` instead. */
  export const inboundSchema =
    RedisSaveExternalPortMetricsConfigUnion1$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortMetricsConfigUnion1$outboundSchema` instead. */
  export const outboundSchema =
    RedisSaveExternalPortMetricsConfigUnion1$outboundSchema;
  /** @deprecated use `RedisSaveExternalPortMetricsConfigUnion1$Outbound` instead. */
  export type Outbound = RedisSaveExternalPortMetricsConfigUnion1$Outbound;
}

export function redisSaveExternalPortMetricsConfigUnion1ToJSON(
  redisSaveExternalPortMetricsConfigUnion1:
    RedisSaveExternalPortMetricsConfigUnion1,
): string {
  return JSON.stringify(
    RedisSaveExternalPortMetricsConfigUnion1$outboundSchema.parse(
      redisSaveExternalPortMetricsConfigUnion1,
    ),
  );
}

export function redisSaveExternalPortMetricsConfigUnion1FromJSON(
  jsonString: string,
): SafeParseResult<
  RedisSaveExternalPortMetricsConfigUnion1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RedisSaveExternalPortMetricsConfigUnion1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RedisSaveExternalPortMetricsConfigUnion1' from JSON`,
  );
}

/** @internal */
export const RedisSaveExternalPortMetricsConfigUnion2$inboundSchema: z.ZodType<
  RedisSaveExternalPortMetricsConfigUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    RedisSaveExternalPortMetricsConfigEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type RedisSaveExternalPortMetricsConfigUnion2$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const RedisSaveExternalPortMetricsConfigUnion2$outboundSchema: z.ZodType<
  RedisSaveExternalPortMetricsConfigUnion2$Outbound,
  z.ZodTypeDef,
  RedisSaveExternalPortMetricsConfigUnion2
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    RedisSaveExternalPortMetricsConfigEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortMetricsConfigUnion2$ {
  /** @deprecated use `RedisSaveExternalPortMetricsConfigUnion2$inboundSchema` instead. */
  export const inboundSchema =
    RedisSaveExternalPortMetricsConfigUnion2$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortMetricsConfigUnion2$outboundSchema` instead. */
  export const outboundSchema =
    RedisSaveExternalPortMetricsConfigUnion2$outboundSchema;
  /** @deprecated use `RedisSaveExternalPortMetricsConfigUnion2$Outbound` instead. */
  export type Outbound = RedisSaveExternalPortMetricsConfigUnion2$Outbound;
}

export function redisSaveExternalPortMetricsConfigUnion2ToJSON(
  redisSaveExternalPortMetricsConfigUnion2:
    RedisSaveExternalPortMetricsConfigUnion2,
): string {
  return JSON.stringify(
    RedisSaveExternalPortMetricsConfigUnion2$outboundSchema.parse(
      redisSaveExternalPortMetricsConfigUnion2,
    ),
  );
}

export function redisSaveExternalPortMetricsConfigUnion2FromJSON(
  jsonString: string,
): SafeParseResult<
  RedisSaveExternalPortMetricsConfigUnion2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RedisSaveExternalPortMetricsConfigUnion2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RedisSaveExternalPortMetricsConfigUnion2' from JSON`,
  );
}

/** @internal */
export const RedisSaveExternalPortServerStatus$inboundSchema: z.ZodNativeEnum<
  typeof RedisSaveExternalPortServerStatus
> = z.nativeEnum(RedisSaveExternalPortServerStatus);

/** @internal */
export const RedisSaveExternalPortServerStatus$outboundSchema: z.ZodNativeEnum<
  typeof RedisSaveExternalPortServerStatus
> = RedisSaveExternalPortServerStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortServerStatus$ {
  /** @deprecated use `RedisSaveExternalPortServerStatus$inboundSchema` instead. */
  export const inboundSchema = RedisSaveExternalPortServerStatus$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortServerStatus$outboundSchema` instead. */
  export const outboundSchema =
    RedisSaveExternalPortServerStatus$outboundSchema;
}

/** @internal */
export const RedisSaveExternalPortServer$inboundSchema: z.ZodType<
  RedisSaveExternalPortServer,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  command: z.string(),
  createdAt: z.string(),
  description: z.nullable(z.string()),
  enableDockerCleanup: z.boolean(),
  ipAddress: z.string(),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      RedisSaveExternalPortMetricsConfigEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
  name: z.string(),
  organizationId: z.string(),
  port: z.number(),
  serverId: z.string(),
  serverStatus: RedisSaveExternalPortServerStatus$inboundSchema,
  sshKeyId: z.nullable(z.string()),
  username: z.string(),
});

/** @internal */
export type RedisSaveExternalPortServer$Outbound = {
  appName: string;
  command: string;
  createdAt: string;
  description: string | null;
  enableDockerCleanup: boolean;
  ipAddress: string;
  metricsConfig: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  };
  name: string;
  organizationId: string;
  port: number;
  serverId: string;
  serverStatus: string;
  sshKeyId: string | null;
  username: string;
};

/** @internal */
export const RedisSaveExternalPortServer$outboundSchema: z.ZodType<
  RedisSaveExternalPortServer$Outbound,
  z.ZodTypeDef,
  RedisSaveExternalPortServer
> = z.object({
  appName: z.string(),
  command: z.string(),
  createdAt: z.string(),
  description: z.nullable(z.string()),
  enableDockerCleanup: z.boolean(),
  ipAddress: z.string(),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      RedisSaveExternalPortMetricsConfigEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
  name: z.string(),
  organizationId: z.string(),
  port: z.number(),
  serverId: z.string(),
  serverStatus: RedisSaveExternalPortServerStatus$outboundSchema,
  sshKeyId: z.nullable(z.string()),
  username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortServer$ {
  /** @deprecated use `RedisSaveExternalPortServer$inboundSchema` instead. */
  export const inboundSchema = RedisSaveExternalPortServer$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortServer$outboundSchema` instead. */
  export const outboundSchema = RedisSaveExternalPortServer$outboundSchema;
  /** @deprecated use `RedisSaveExternalPortServer$Outbound` instead. */
  export type Outbound = RedisSaveExternalPortServer$Outbound;
}

export function redisSaveExternalPortServerToJSON(
  redisSaveExternalPortServer: RedisSaveExternalPortServer,
): string {
  return JSON.stringify(
    RedisSaveExternalPortServer$outboundSchema.parse(
      redisSaveExternalPortServer,
    ),
  );
}

export function redisSaveExternalPortServerFromJSON(
  jsonString: string,
): SafeParseResult<RedisSaveExternalPortServer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisSaveExternalPortServer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisSaveExternalPortServer' from JSON`,
  );
}

/** @internal */
export const RedisSaveExternalPortUpdateConfigSwarm$inboundSchema: z.ZodType<
  RedisSaveExternalPortUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  MaxFailureRatio: z.number().optional(),
  Monitor: z.number().optional(),
  Order: z.string(),
  Parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    "Delay": "delay",
    "FailureAction": "failureAction",
    "MaxFailureRatio": "maxFailureRatio",
    "Monitor": "monitor",
    "Order": "order",
    "Parallelism": "parallelism",
  });
});

/** @internal */
export type RedisSaveExternalPortUpdateConfigSwarm$Outbound = {
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  MaxFailureRatio?: number | undefined;
  Monitor?: number | undefined;
  Order: string;
  Parallelism: number;
};

/** @internal */
export const RedisSaveExternalPortUpdateConfigSwarm$outboundSchema: z.ZodType<
  RedisSaveExternalPortUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  RedisSaveExternalPortUpdateConfigSwarm
> = z.object({
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  maxFailureRatio: z.number().optional(),
  monitor: z.number().optional(),
  order: z.string(),
  parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    delay: "Delay",
    failureAction: "FailureAction",
    maxFailureRatio: "MaxFailureRatio",
    monitor: "Monitor",
    order: "Order",
    parallelism: "Parallelism",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortUpdateConfigSwarm$ {
  /** @deprecated use `RedisSaveExternalPortUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema =
    RedisSaveExternalPortUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema =
    RedisSaveExternalPortUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `RedisSaveExternalPortUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = RedisSaveExternalPortUpdateConfigSwarm$Outbound;
}

export function redisSaveExternalPortUpdateConfigSwarmToJSON(
  redisSaveExternalPortUpdateConfigSwarm:
    RedisSaveExternalPortUpdateConfigSwarm,
): string {
  return JSON.stringify(
    RedisSaveExternalPortUpdateConfigSwarm$outboundSchema.parse(
      redisSaveExternalPortUpdateConfigSwarm,
    ),
  );
}

export function redisSaveExternalPortUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisSaveExternalPortUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RedisSaveExternalPortUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisSaveExternalPortUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const RedisSaveExternalPortResponseBody$inboundSchema: z.ZodType<
  RedisSaveExternalPortResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  applicationStatus: RedisSaveExternalPortApplicationStatus$inboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databasePassword: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environment: z.lazy(() => RedisSaveExternalPortEnvironment$inboundSchema),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.lazy(() => RedisSaveExternalPortHealthCheckSwarm$inboundSchema),
  ),
  labelsSwarm: z.nullable(z.record(z.string())),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.lazy(() => RedisSaveExternalPortModeSwarm$inboundSchema),
  ),
  mounts: z.array(z.lazy(() => RedisSaveExternalPortMount$inboundSchema)),
  name: z.string(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => RedisSaveExternalPortNetworkSwarm$inboundSchema)),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => RedisSaveExternalPortPlacementSwarm$inboundSchema),
  ),
  redisId: z.string(),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => RedisSaveExternalPortRestartPolicySwarm$inboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => RedisSaveExternalPortRollbackConfigSwarm$inboundSchema),
  ),
  server: z.nullable(z.lazy(() => RedisSaveExternalPortServer$inboundSchema)),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.lazy(() => RedisSaveExternalPortUpdateConfigSwarm$inboundSchema),
  ),
});

/** @internal */
export type RedisSaveExternalPortResponseBody$Outbound = {
  appName: string;
  applicationStatus: string;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databasePassword: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environment: RedisSaveExternalPortEnvironment$Outbound;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: RedisSaveExternalPortHealthCheckSwarm$Outbound | null;
  labelsSwarm: { [k: string]: string } | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: RedisSaveExternalPortModeSwarm$Outbound | null;
  mounts: Array<RedisSaveExternalPortMount$Outbound>;
  name: string;
  networkSwarm: Array<RedisSaveExternalPortNetworkSwarm$Outbound> | null;
  placementSwarm: RedisSaveExternalPortPlacementSwarm$Outbound | null;
  redisId: string;
  replicas: number;
  restartPolicySwarm: RedisSaveExternalPortRestartPolicySwarm$Outbound | null;
  rollbackConfigSwarm: RedisSaveExternalPortRollbackConfigSwarm$Outbound | null;
  server: RedisSaveExternalPortServer$Outbound | null;
  serverId: string | null;
  updateConfigSwarm: RedisSaveExternalPortUpdateConfigSwarm$Outbound | null;
};

/** @internal */
export const RedisSaveExternalPortResponseBody$outboundSchema: z.ZodType<
  RedisSaveExternalPortResponseBody$Outbound,
  z.ZodTypeDef,
  RedisSaveExternalPortResponseBody
> = z.object({
  appName: z.string(),
  applicationStatus: RedisSaveExternalPortApplicationStatus$outboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databasePassword: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environment: z.lazy(() => RedisSaveExternalPortEnvironment$outboundSchema),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.lazy(() => RedisSaveExternalPortHealthCheckSwarm$outboundSchema),
  ),
  labelsSwarm: z.nullable(z.record(z.string())),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.lazy(() => RedisSaveExternalPortModeSwarm$outboundSchema),
  ),
  mounts: z.array(z.lazy(() => RedisSaveExternalPortMount$outboundSchema)),
  name: z.string(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => RedisSaveExternalPortNetworkSwarm$outboundSchema)),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => RedisSaveExternalPortPlacementSwarm$outboundSchema),
  ),
  redisId: z.string(),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => RedisSaveExternalPortRestartPolicySwarm$outboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => RedisSaveExternalPortRollbackConfigSwarm$outboundSchema),
  ),
  server: z.nullable(z.lazy(() => RedisSaveExternalPortServer$outboundSchema)),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.lazy(() => RedisSaveExternalPortUpdateConfigSwarm$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortResponseBody$ {
  /** @deprecated use `RedisSaveExternalPortResponseBody$inboundSchema` instead. */
  export const inboundSchema = RedisSaveExternalPortResponseBody$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RedisSaveExternalPortResponseBody$outboundSchema;
  /** @deprecated use `RedisSaveExternalPortResponseBody$Outbound` instead. */
  export type Outbound = RedisSaveExternalPortResponseBody$Outbound;
}

export function redisSaveExternalPortResponseBodyToJSON(
  redisSaveExternalPortResponseBody: RedisSaveExternalPortResponseBody,
): string {
  return JSON.stringify(
    RedisSaveExternalPortResponseBody$outboundSchema.parse(
      redisSaveExternalPortResponseBody,
    ),
  );
}

export function redisSaveExternalPortResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RedisSaveExternalPortResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisSaveExternalPortResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisSaveExternalPortResponseBody' from JSON`,
  );
}

/** @internal */
export const RedisSaveExternalPortResponse$inboundSchema: z.ZodType<
  RedisSaveExternalPortResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => RedisSaveExternalPortResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type RedisSaveExternalPortResponse$Outbound =
  | RedisSaveExternalPortResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const RedisSaveExternalPortResponse$outboundSchema: z.ZodType<
  RedisSaveExternalPortResponse$Outbound,
  z.ZodTypeDef,
  RedisSaveExternalPortResponse
> = z.union([
  z.lazy(() => RedisSaveExternalPortResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisSaveExternalPortResponse$ {
  /** @deprecated use `RedisSaveExternalPortResponse$inboundSchema` instead. */
  export const inboundSchema = RedisSaveExternalPortResponse$inboundSchema;
  /** @deprecated use `RedisSaveExternalPortResponse$outboundSchema` instead. */
  export const outboundSchema = RedisSaveExternalPortResponse$outboundSchema;
  /** @deprecated use `RedisSaveExternalPortResponse$Outbound` instead. */
  export type Outbound = RedisSaveExternalPortResponse$Outbound;
}

export function redisSaveExternalPortResponseToJSON(
  redisSaveExternalPortResponse: RedisSaveExternalPortResponse,
): string {
  return JSON.stringify(
    RedisSaveExternalPortResponse$outboundSchema.parse(
      redisSaveExternalPortResponse,
    ),
  );
}

export function redisSaveExternalPortResponseFromJSON(
  jsonString: string,
): SafeParseResult<RedisSaveExternalPortResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisSaveExternalPortResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisSaveExternalPortResponse' from JSON`,
  );
}
