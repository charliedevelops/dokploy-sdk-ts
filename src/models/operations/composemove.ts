/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComposeMoveSecurity = {
  authorization: string;
};

export type ComposeMoveRequest = {
  composeId: string;
  targetEnvironmentId: string;
};

/** @internal */
export const ComposeMoveSecurity$inboundSchema: z.ZodType<
  ComposeMoveSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type ComposeMoveSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const ComposeMoveSecurity$outboundSchema: z.ZodType<
  ComposeMoveSecurity$Outbound,
  z.ZodTypeDef,
  ComposeMoveSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComposeMoveSecurity$ {
  /** @deprecated use `ComposeMoveSecurity$inboundSchema` instead. */
  export const inboundSchema = ComposeMoveSecurity$inboundSchema;
  /** @deprecated use `ComposeMoveSecurity$outboundSchema` instead. */
  export const outboundSchema = ComposeMoveSecurity$outboundSchema;
  /** @deprecated use `ComposeMoveSecurity$Outbound` instead. */
  export type Outbound = ComposeMoveSecurity$Outbound;
}

export function composeMoveSecurityToJSON(
  composeMoveSecurity: ComposeMoveSecurity,
): string {
  return JSON.stringify(
    ComposeMoveSecurity$outboundSchema.parse(composeMoveSecurity),
  );
}

export function composeMoveSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ComposeMoveSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComposeMoveSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComposeMoveSecurity' from JSON`,
  );
}

/** @internal */
export const ComposeMoveRequest$inboundSchema: z.ZodType<
  ComposeMoveRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  composeId: z.string(),
  targetEnvironmentId: z.string(),
});

/** @internal */
export type ComposeMoveRequest$Outbound = {
  composeId: string;
  targetEnvironmentId: string;
};

/** @internal */
export const ComposeMoveRequest$outboundSchema: z.ZodType<
  ComposeMoveRequest$Outbound,
  z.ZodTypeDef,
  ComposeMoveRequest
> = z.object({
  composeId: z.string(),
  targetEnvironmentId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComposeMoveRequest$ {
  /** @deprecated use `ComposeMoveRequest$inboundSchema` instead. */
  export const inboundSchema = ComposeMoveRequest$inboundSchema;
  /** @deprecated use `ComposeMoveRequest$outboundSchema` instead. */
  export const outboundSchema = ComposeMoveRequest$outboundSchema;
  /** @deprecated use `ComposeMoveRequest$Outbound` instead. */
  export type Outbound = ComposeMoveRequest$Outbound;
}

export function composeMoveRequestToJSON(
  composeMoveRequest: ComposeMoveRequest,
): string {
  return JSON.stringify(
    ComposeMoveRequest$outboundSchema.parse(composeMoveRequest),
  );
}

export function composeMoveRequestFromJSON(
  jsonString: string,
): SafeParseResult<ComposeMoveRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComposeMoveRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComposeMoveRequest' from JSON`,
  );
}
