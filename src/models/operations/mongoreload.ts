/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type MongoReloadRequest = {
  appName: string;
  mongoId: string;
};

export type MongoReloadResponse = models.ErrorT | boolean;

/** @internal */
export const MongoReloadRequest$inboundSchema: z.ZodType<
  MongoReloadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  mongoId: z.string(),
});

/** @internal */
export type MongoReloadRequest$Outbound = {
  appName: string;
  mongoId: string;
};

/** @internal */
export const MongoReloadRequest$outboundSchema: z.ZodType<
  MongoReloadRequest$Outbound,
  z.ZodTypeDef,
  MongoReloadRequest
> = z.object({
  appName: z.string(),
  mongoId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoReloadRequest$ {
  /** @deprecated use `MongoReloadRequest$inboundSchema` instead. */
  export const inboundSchema = MongoReloadRequest$inboundSchema;
  /** @deprecated use `MongoReloadRequest$outboundSchema` instead. */
  export const outboundSchema = MongoReloadRequest$outboundSchema;
  /** @deprecated use `MongoReloadRequest$Outbound` instead. */
  export type Outbound = MongoReloadRequest$Outbound;
}

export function mongoReloadRequestToJSON(
  mongoReloadRequest: MongoReloadRequest,
): string {
  return JSON.stringify(
    MongoReloadRequest$outboundSchema.parse(mongoReloadRequest),
  );
}

export function mongoReloadRequestFromJSON(
  jsonString: string,
): SafeParseResult<MongoReloadRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoReloadRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoReloadRequest' from JSON`,
  );
}

/** @internal */
export const MongoReloadResponse$inboundSchema: z.ZodType<
  MongoReloadResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.boolean()]);

/** @internal */
export type MongoReloadResponse$Outbound = models.ErrorT$Outbound | boolean;

/** @internal */
export const MongoReloadResponse$outboundSchema: z.ZodType<
  MongoReloadResponse$Outbound,
  z.ZodTypeDef,
  MongoReloadResponse
> = z.union([models.ErrorT$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoReloadResponse$ {
  /** @deprecated use `MongoReloadResponse$inboundSchema` instead. */
  export const inboundSchema = MongoReloadResponse$inboundSchema;
  /** @deprecated use `MongoReloadResponse$outboundSchema` instead. */
  export const outboundSchema = MongoReloadResponse$outboundSchema;
  /** @deprecated use `MongoReloadResponse$Outbound` instead. */
  export type Outbound = MongoReloadResponse$Outbound;
}

export function mongoReloadResponseToJSON(
  mongoReloadResponse: MongoReloadResponse,
): string {
  return JSON.stringify(
    MongoReloadResponse$outboundSchema.parse(mongoReloadResponse),
  );
}

export function mongoReloadResponseFromJSON(
  jsonString: string,
): SafeParseResult<MongoReloadResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoReloadResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoReloadResponse' from JSON`,
  );
}
