/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GiteaTestConnectionSecurity = {
  authorization: string;
};

export type GiteaTestConnectionRequest = {
  giteaId?: string | undefined;
  organizationName?: string | undefined;
};

export type GiteaTestConnectionResponse = models.ErrorT | string;

/** @internal */
export const GiteaTestConnectionSecurity$inboundSchema: z.ZodType<
  GiteaTestConnectionSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type GiteaTestConnectionSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const GiteaTestConnectionSecurity$outboundSchema: z.ZodType<
  GiteaTestConnectionSecurity$Outbound,
  z.ZodTypeDef,
  GiteaTestConnectionSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiteaTestConnectionSecurity$ {
  /** @deprecated use `GiteaTestConnectionSecurity$inboundSchema` instead. */
  export const inboundSchema = GiteaTestConnectionSecurity$inboundSchema;
  /** @deprecated use `GiteaTestConnectionSecurity$outboundSchema` instead. */
  export const outboundSchema = GiteaTestConnectionSecurity$outboundSchema;
  /** @deprecated use `GiteaTestConnectionSecurity$Outbound` instead. */
  export type Outbound = GiteaTestConnectionSecurity$Outbound;
}

export function giteaTestConnectionSecurityToJSON(
  giteaTestConnectionSecurity: GiteaTestConnectionSecurity,
): string {
  return JSON.stringify(
    GiteaTestConnectionSecurity$outboundSchema.parse(
      giteaTestConnectionSecurity,
    ),
  );
}

export function giteaTestConnectionSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GiteaTestConnectionSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiteaTestConnectionSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiteaTestConnectionSecurity' from JSON`,
  );
}

/** @internal */
export const GiteaTestConnectionRequest$inboundSchema: z.ZodType<
  GiteaTestConnectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  giteaId: z.string().optional(),
  organizationName: z.string().optional(),
});

/** @internal */
export type GiteaTestConnectionRequest$Outbound = {
  giteaId?: string | undefined;
  organizationName?: string | undefined;
};

/** @internal */
export const GiteaTestConnectionRequest$outboundSchema: z.ZodType<
  GiteaTestConnectionRequest$Outbound,
  z.ZodTypeDef,
  GiteaTestConnectionRequest
> = z.object({
  giteaId: z.string().optional(),
  organizationName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiteaTestConnectionRequest$ {
  /** @deprecated use `GiteaTestConnectionRequest$inboundSchema` instead. */
  export const inboundSchema = GiteaTestConnectionRequest$inboundSchema;
  /** @deprecated use `GiteaTestConnectionRequest$outboundSchema` instead. */
  export const outboundSchema = GiteaTestConnectionRequest$outboundSchema;
  /** @deprecated use `GiteaTestConnectionRequest$Outbound` instead. */
  export type Outbound = GiteaTestConnectionRequest$Outbound;
}

export function giteaTestConnectionRequestToJSON(
  giteaTestConnectionRequest: GiteaTestConnectionRequest,
): string {
  return JSON.stringify(
    GiteaTestConnectionRequest$outboundSchema.parse(giteaTestConnectionRequest),
  );
}

export function giteaTestConnectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GiteaTestConnectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiteaTestConnectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiteaTestConnectionRequest' from JSON`,
  );
}

/** @internal */
export const GiteaTestConnectionResponse$inboundSchema: z.ZodType<
  GiteaTestConnectionResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.string()]);

/** @internal */
export type GiteaTestConnectionResponse$Outbound =
  | models.ErrorT$Outbound
  | string;

/** @internal */
export const GiteaTestConnectionResponse$outboundSchema: z.ZodType<
  GiteaTestConnectionResponse$Outbound,
  z.ZodTypeDef,
  GiteaTestConnectionResponse
> = z.union([models.ErrorT$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiteaTestConnectionResponse$ {
  /** @deprecated use `GiteaTestConnectionResponse$inboundSchema` instead. */
  export const inboundSchema = GiteaTestConnectionResponse$inboundSchema;
  /** @deprecated use `GiteaTestConnectionResponse$outboundSchema` instead. */
  export const outboundSchema = GiteaTestConnectionResponse$outboundSchema;
  /** @deprecated use `GiteaTestConnectionResponse$Outbound` instead. */
  export type Outbound = GiteaTestConnectionResponse$Outbound;
}

export function giteaTestConnectionResponseToJSON(
  giteaTestConnectionResponse: GiteaTestConnectionResponse,
): string {
  return JSON.stringify(
    GiteaTestConnectionResponse$outboundSchema.parse(
      giteaTestConnectionResponse,
    ),
  );
}

export function giteaTestConnectionResponseFromJSON(
  jsonString: string,
): SafeParseResult<GiteaTestConnectionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiteaTestConnectionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiteaTestConnectionResponse' from JSON`,
  );
}
