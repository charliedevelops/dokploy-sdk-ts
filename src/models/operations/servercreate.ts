/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ServerCreateSecurity = {
  authorization: string;
};

export type ServerCreateRequest = {
  description?: string | null | undefined;
  ipAddress: string;
  name: string;
  port: number;
  sshKeyId: string | null;
  username: string;
};

/** @internal */
export const ServerCreateSecurity$inboundSchema: z.ZodType<
  ServerCreateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type ServerCreateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const ServerCreateSecurity$outboundSchema: z.ZodType<
  ServerCreateSecurity$Outbound,
  z.ZodTypeDef,
  ServerCreateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServerCreateSecurity$ {
  /** @deprecated use `ServerCreateSecurity$inboundSchema` instead. */
  export const inboundSchema = ServerCreateSecurity$inboundSchema;
  /** @deprecated use `ServerCreateSecurity$outboundSchema` instead. */
  export const outboundSchema = ServerCreateSecurity$outboundSchema;
  /** @deprecated use `ServerCreateSecurity$Outbound` instead. */
  export type Outbound = ServerCreateSecurity$Outbound;
}

export function serverCreateSecurityToJSON(
  serverCreateSecurity: ServerCreateSecurity,
): string {
  return JSON.stringify(
    ServerCreateSecurity$outboundSchema.parse(serverCreateSecurity),
  );
}

export function serverCreateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ServerCreateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServerCreateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServerCreateSecurity' from JSON`,
  );
}

/** @internal */
export const ServerCreateRequest$inboundSchema: z.ZodType<
  ServerCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.nullable(z.string()).optional(),
  ipAddress: z.string(),
  name: z.string(),
  port: z.number(),
  sshKeyId: z.nullable(z.string()),
  username: z.string(),
});

/** @internal */
export type ServerCreateRequest$Outbound = {
  description?: string | null | undefined;
  ipAddress: string;
  name: string;
  port: number;
  sshKeyId: string | null;
  username: string;
};

/** @internal */
export const ServerCreateRequest$outboundSchema: z.ZodType<
  ServerCreateRequest$Outbound,
  z.ZodTypeDef,
  ServerCreateRequest
> = z.object({
  description: z.nullable(z.string()).optional(),
  ipAddress: z.string(),
  name: z.string(),
  port: z.number(),
  sshKeyId: z.nullable(z.string()),
  username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServerCreateRequest$ {
  /** @deprecated use `ServerCreateRequest$inboundSchema` instead. */
  export const inboundSchema = ServerCreateRequest$inboundSchema;
  /** @deprecated use `ServerCreateRequest$outboundSchema` instead. */
  export const outboundSchema = ServerCreateRequest$outboundSchema;
  /** @deprecated use `ServerCreateRequest$Outbound` instead. */
  export type Outbound = ServerCreateRequest$Outbound;
}

export function serverCreateRequestToJSON(
  serverCreateRequest: ServerCreateRequest,
): string {
  return JSON.stringify(
    ServerCreateRequest$outboundSchema.parse(serverCreateRequest),
  );
}

export function serverCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<ServerCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServerCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServerCreateRequest' from JSON`,
  );
}
