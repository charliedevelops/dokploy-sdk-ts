/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ApplicationSaveBitbucketProviderSecurity = {
  authorization: string;
};

export type ApplicationSaveBitbucketProviderRequest = {
  bitbucketBranch: string | null;
  bitbucketBuildPath: string | null;
  bitbucketOwner: string | null;
  bitbucketRepository: string | null;
  bitbucketId: string | null;
  applicationId: string;
  watchPaths?: Array<string> | null | undefined;
  enableSubmodules: boolean;
};

export type ApplicationSaveBitbucketProviderResponse = models.ErrorT | boolean;

/** @internal */
export const ApplicationSaveBitbucketProviderSecurity$inboundSchema: z.ZodType<
  ApplicationSaveBitbucketProviderSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type ApplicationSaveBitbucketProviderSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const ApplicationSaveBitbucketProviderSecurity$outboundSchema: z.ZodType<
  ApplicationSaveBitbucketProviderSecurity$Outbound,
  z.ZodTypeDef,
  ApplicationSaveBitbucketProviderSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationSaveBitbucketProviderSecurity$ {
  /** @deprecated use `ApplicationSaveBitbucketProviderSecurity$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationSaveBitbucketProviderSecurity$inboundSchema;
  /** @deprecated use `ApplicationSaveBitbucketProviderSecurity$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationSaveBitbucketProviderSecurity$outboundSchema;
  /** @deprecated use `ApplicationSaveBitbucketProviderSecurity$Outbound` instead. */
  export type Outbound = ApplicationSaveBitbucketProviderSecurity$Outbound;
}

export function applicationSaveBitbucketProviderSecurityToJSON(
  applicationSaveBitbucketProviderSecurity:
    ApplicationSaveBitbucketProviderSecurity,
): string {
  return JSON.stringify(
    ApplicationSaveBitbucketProviderSecurity$outboundSchema.parse(
      applicationSaveBitbucketProviderSecurity,
    ),
  );
}

export function applicationSaveBitbucketProviderSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  ApplicationSaveBitbucketProviderSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationSaveBitbucketProviderSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApplicationSaveBitbucketProviderSecurity' from JSON`,
  );
}

/** @internal */
export const ApplicationSaveBitbucketProviderRequest$inboundSchema: z.ZodType<
  ApplicationSaveBitbucketProviderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  bitbucketBranch: z.nullable(z.string()),
  bitbucketBuildPath: z.nullable(z.string()),
  bitbucketOwner: z.nullable(z.string()),
  bitbucketRepository: z.nullable(z.string()),
  bitbucketId: z.nullable(z.string()),
  applicationId: z.string(),
  watchPaths: z.nullable(z.array(z.string())).optional(),
  enableSubmodules: z.boolean(),
});

/** @internal */
export type ApplicationSaveBitbucketProviderRequest$Outbound = {
  bitbucketBranch: string | null;
  bitbucketBuildPath: string | null;
  bitbucketOwner: string | null;
  bitbucketRepository: string | null;
  bitbucketId: string | null;
  applicationId: string;
  watchPaths?: Array<string> | null | undefined;
  enableSubmodules: boolean;
};

/** @internal */
export const ApplicationSaveBitbucketProviderRequest$outboundSchema: z.ZodType<
  ApplicationSaveBitbucketProviderRequest$Outbound,
  z.ZodTypeDef,
  ApplicationSaveBitbucketProviderRequest
> = z.object({
  bitbucketBranch: z.nullable(z.string()),
  bitbucketBuildPath: z.nullable(z.string()),
  bitbucketOwner: z.nullable(z.string()),
  bitbucketRepository: z.nullable(z.string()),
  bitbucketId: z.nullable(z.string()),
  applicationId: z.string(),
  watchPaths: z.nullable(z.array(z.string())).optional(),
  enableSubmodules: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationSaveBitbucketProviderRequest$ {
  /** @deprecated use `ApplicationSaveBitbucketProviderRequest$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationSaveBitbucketProviderRequest$inboundSchema;
  /** @deprecated use `ApplicationSaveBitbucketProviderRequest$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationSaveBitbucketProviderRequest$outboundSchema;
  /** @deprecated use `ApplicationSaveBitbucketProviderRequest$Outbound` instead. */
  export type Outbound = ApplicationSaveBitbucketProviderRequest$Outbound;
}

export function applicationSaveBitbucketProviderRequestToJSON(
  applicationSaveBitbucketProviderRequest:
    ApplicationSaveBitbucketProviderRequest,
): string {
  return JSON.stringify(
    ApplicationSaveBitbucketProviderRequest$outboundSchema.parse(
      applicationSaveBitbucketProviderRequest,
    ),
  );
}

export function applicationSaveBitbucketProviderRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ApplicationSaveBitbucketProviderRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationSaveBitbucketProviderRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApplicationSaveBitbucketProviderRequest' from JSON`,
  );
}

/** @internal */
export const ApplicationSaveBitbucketProviderResponse$inboundSchema: z.ZodType<
  ApplicationSaveBitbucketProviderResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.boolean()]);

/** @internal */
export type ApplicationSaveBitbucketProviderResponse$Outbound =
  | models.ErrorT$Outbound
  | boolean;

/** @internal */
export const ApplicationSaveBitbucketProviderResponse$outboundSchema: z.ZodType<
  ApplicationSaveBitbucketProviderResponse$Outbound,
  z.ZodTypeDef,
  ApplicationSaveBitbucketProviderResponse
> = z.union([models.ErrorT$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationSaveBitbucketProviderResponse$ {
  /** @deprecated use `ApplicationSaveBitbucketProviderResponse$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationSaveBitbucketProviderResponse$inboundSchema;
  /** @deprecated use `ApplicationSaveBitbucketProviderResponse$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationSaveBitbucketProviderResponse$outboundSchema;
  /** @deprecated use `ApplicationSaveBitbucketProviderResponse$Outbound` instead. */
  export type Outbound = ApplicationSaveBitbucketProviderResponse$Outbound;
}

export function applicationSaveBitbucketProviderResponseToJSON(
  applicationSaveBitbucketProviderResponse:
    ApplicationSaveBitbucketProviderResponse,
): string {
  return JSON.stringify(
    ApplicationSaveBitbucketProviderResponse$outboundSchema.parse(
      applicationSaveBitbucketProviderResponse,
    ),
  );
}

export function applicationSaveBitbucketProviderResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ApplicationSaveBitbucketProviderResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationSaveBitbucketProviderResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApplicationSaveBitbucketProviderResponse' from JSON`,
  );
}
