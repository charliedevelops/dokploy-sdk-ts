/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NotificationCreateDiscordSecurity = {
  authorization: string;
};

export type NotificationCreateDiscordRequest = {
  appBuildError: boolean;
  appDeploy: boolean;
  databaseBackup: boolean;
  decoration: boolean;
  dockerCleanup: boolean;
  dokployRestart: boolean;
  name: string;
  serverThreshold: boolean;
  webhookUrl: string;
};

/** @internal */
export const NotificationCreateDiscordSecurity$inboundSchema: z.ZodType<
  NotificationCreateDiscordSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type NotificationCreateDiscordSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const NotificationCreateDiscordSecurity$outboundSchema: z.ZodType<
  NotificationCreateDiscordSecurity$Outbound,
  z.ZodTypeDef,
  NotificationCreateDiscordSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationCreateDiscordSecurity$ {
  /** @deprecated use `NotificationCreateDiscordSecurity$inboundSchema` instead. */
  export const inboundSchema = NotificationCreateDiscordSecurity$inboundSchema;
  /** @deprecated use `NotificationCreateDiscordSecurity$outboundSchema` instead. */
  export const outboundSchema =
    NotificationCreateDiscordSecurity$outboundSchema;
  /** @deprecated use `NotificationCreateDiscordSecurity$Outbound` instead. */
  export type Outbound = NotificationCreateDiscordSecurity$Outbound;
}

export function notificationCreateDiscordSecurityToJSON(
  notificationCreateDiscordSecurity: NotificationCreateDiscordSecurity,
): string {
  return JSON.stringify(
    NotificationCreateDiscordSecurity$outboundSchema.parse(
      notificationCreateDiscordSecurity,
    ),
  );
}

export function notificationCreateDiscordSecurityFromJSON(
  jsonString: string,
): SafeParseResult<NotificationCreateDiscordSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationCreateDiscordSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationCreateDiscordSecurity' from JSON`,
  );
}

/** @internal */
export const NotificationCreateDiscordRequest$inboundSchema: z.ZodType<
  NotificationCreateDiscordRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appBuildError: z.boolean(),
  appDeploy: z.boolean(),
  databaseBackup: z.boolean(),
  decoration: z.boolean(),
  dockerCleanup: z.boolean(),
  dokployRestart: z.boolean(),
  name: z.string(),
  serverThreshold: z.boolean(),
  webhookUrl: z.string(),
});

/** @internal */
export type NotificationCreateDiscordRequest$Outbound = {
  appBuildError: boolean;
  appDeploy: boolean;
  databaseBackup: boolean;
  decoration: boolean;
  dockerCleanup: boolean;
  dokployRestart: boolean;
  name: string;
  serverThreshold: boolean;
  webhookUrl: string;
};

/** @internal */
export const NotificationCreateDiscordRequest$outboundSchema: z.ZodType<
  NotificationCreateDiscordRequest$Outbound,
  z.ZodTypeDef,
  NotificationCreateDiscordRequest
> = z.object({
  appBuildError: z.boolean(),
  appDeploy: z.boolean(),
  databaseBackup: z.boolean(),
  decoration: z.boolean(),
  dockerCleanup: z.boolean(),
  dokployRestart: z.boolean(),
  name: z.string(),
  serverThreshold: z.boolean(),
  webhookUrl: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationCreateDiscordRequest$ {
  /** @deprecated use `NotificationCreateDiscordRequest$inboundSchema` instead. */
  export const inboundSchema = NotificationCreateDiscordRequest$inboundSchema;
  /** @deprecated use `NotificationCreateDiscordRequest$outboundSchema` instead. */
  export const outboundSchema = NotificationCreateDiscordRequest$outboundSchema;
  /** @deprecated use `NotificationCreateDiscordRequest$Outbound` instead. */
  export type Outbound = NotificationCreateDiscordRequest$Outbound;
}

export function notificationCreateDiscordRequestToJSON(
  notificationCreateDiscordRequest: NotificationCreateDiscordRequest,
): string {
  return JSON.stringify(
    NotificationCreateDiscordRequest$outboundSchema.parse(
      notificationCreateDiscordRequest,
    ),
  );
}

export function notificationCreateDiscordRequestFromJSON(
  jsonString: string,
): SafeParseResult<NotificationCreateDiscordRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationCreateDiscordRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationCreateDiscordRequest' from JSON`,
  );
}
