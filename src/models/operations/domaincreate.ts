/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type DomainCreateSecurity = {
  authorization: string;
};

export const DomainCreateCertificateTypeRequest = {
  Letsencrypt: "letsencrypt",
  None: "none",
  Custom: "custom",
} as const;
export type DomainCreateCertificateTypeRequest = ClosedEnum<
  typeof DomainCreateCertificateTypeRequest
>;

export const DomainCreateDomainTypeRequest = {
  Compose: "compose",
  Application: "application",
  Preview: "preview",
} as const;
export type DomainCreateDomainTypeRequest = ClosedEnum<
  typeof DomainCreateDomainTypeRequest
>;

export type DomainCreateRequest = {
  applicationId?: string | null | undefined;
  certificateType?: DomainCreateCertificateTypeRequest | undefined;
  composeId?: string | null | undefined;
  customCertResolver?: string | null | undefined;
  domainType?: DomainCreateDomainTypeRequest | null | undefined;
  host: string;
  https?: boolean | undefined;
  internalPath?: string | null | undefined;
  path?: string | null | undefined;
  port?: number | null | undefined;
  previewDeploymentId?: string | null | undefined;
  serviceName?: string | null | undefined;
  stripPath?: boolean | undefined;
};

export const DomainCreateCertificateTypeResponse = {
  Letsencrypt: "letsencrypt",
  None: "none",
  Custom: "custom",
} as const;
export type DomainCreateCertificateTypeResponse = ClosedEnum<
  typeof DomainCreateCertificateTypeResponse
>;

export const DomainCreateDomainTypeResponse = {
  Compose: "compose",
  Application: "application",
  Preview: "preview",
} as const;
export type DomainCreateDomainTypeResponse = ClosedEnum<
  typeof DomainCreateDomainTypeResponse
>;

/**
 * Successful response
 */
export type DomainCreateResponseBody = {
  applicationId: string | null;
  certificateType: DomainCreateCertificateTypeResponse;
  composeId: string | null;
  createdAt: string;
  customCertResolver: string | null;
  domainId: string;
  domainType: DomainCreateDomainTypeResponse | null;
  host: string;
  https: boolean;
  internalPath: string | null;
  path: string | null;
  port: number | null;
  previewDeploymentId: string | null;
  serviceName: string | null;
  stripPath: boolean;
  uniqueConfigKey: number;
};

export type DomainCreateResponse = DomainCreateResponseBody | models.ErrorT;

/** @internal */
export const DomainCreateSecurity$inboundSchema: z.ZodType<
  DomainCreateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type DomainCreateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const DomainCreateSecurity$outboundSchema: z.ZodType<
  DomainCreateSecurity$Outbound,
  z.ZodTypeDef,
  DomainCreateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainCreateSecurity$ {
  /** @deprecated use `DomainCreateSecurity$inboundSchema` instead. */
  export const inboundSchema = DomainCreateSecurity$inboundSchema;
  /** @deprecated use `DomainCreateSecurity$outboundSchema` instead. */
  export const outboundSchema = DomainCreateSecurity$outboundSchema;
  /** @deprecated use `DomainCreateSecurity$Outbound` instead. */
  export type Outbound = DomainCreateSecurity$Outbound;
}

export function domainCreateSecurityToJSON(
  domainCreateSecurity: DomainCreateSecurity,
): string {
  return JSON.stringify(
    DomainCreateSecurity$outboundSchema.parse(domainCreateSecurity),
  );
}

export function domainCreateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<DomainCreateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DomainCreateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DomainCreateSecurity' from JSON`,
  );
}

/** @internal */
export const DomainCreateCertificateTypeRequest$inboundSchema: z.ZodNativeEnum<
  typeof DomainCreateCertificateTypeRequest
> = z.nativeEnum(DomainCreateCertificateTypeRequest);

/** @internal */
export const DomainCreateCertificateTypeRequest$outboundSchema: z.ZodNativeEnum<
  typeof DomainCreateCertificateTypeRequest
> = DomainCreateCertificateTypeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainCreateCertificateTypeRequest$ {
  /** @deprecated use `DomainCreateCertificateTypeRequest$inboundSchema` instead. */
  export const inboundSchema = DomainCreateCertificateTypeRequest$inboundSchema;
  /** @deprecated use `DomainCreateCertificateTypeRequest$outboundSchema` instead. */
  export const outboundSchema =
    DomainCreateCertificateTypeRequest$outboundSchema;
}

/** @internal */
export const DomainCreateDomainTypeRequest$inboundSchema: z.ZodNativeEnum<
  typeof DomainCreateDomainTypeRequest
> = z.nativeEnum(DomainCreateDomainTypeRequest);

/** @internal */
export const DomainCreateDomainTypeRequest$outboundSchema: z.ZodNativeEnum<
  typeof DomainCreateDomainTypeRequest
> = DomainCreateDomainTypeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainCreateDomainTypeRequest$ {
  /** @deprecated use `DomainCreateDomainTypeRequest$inboundSchema` instead. */
  export const inboundSchema = DomainCreateDomainTypeRequest$inboundSchema;
  /** @deprecated use `DomainCreateDomainTypeRequest$outboundSchema` instead. */
  export const outboundSchema = DomainCreateDomainTypeRequest$outboundSchema;
}

/** @internal */
export const DomainCreateRequest$inboundSchema: z.ZodType<
  DomainCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.nullable(z.string()).optional(),
  certificateType: DomainCreateCertificateTypeRequest$inboundSchema.optional(),
  composeId: z.nullable(z.string()).optional(),
  customCertResolver: z.nullable(z.string()).optional(),
  domainType: z.nullable(DomainCreateDomainTypeRequest$inboundSchema)
    .optional(),
  host: z.string(),
  https: z.boolean().optional(),
  internalPath: z.nullable(z.string()).optional(),
  path: z.nullable(z.string()).optional(),
  port: z.nullable(z.number()).optional(),
  previewDeploymentId: z.nullable(z.string()).optional(),
  serviceName: z.nullable(z.string()).optional(),
  stripPath: z.boolean().optional(),
});

/** @internal */
export type DomainCreateRequest$Outbound = {
  applicationId?: string | null | undefined;
  certificateType?: string | undefined;
  composeId?: string | null | undefined;
  customCertResolver?: string | null | undefined;
  domainType?: string | null | undefined;
  host: string;
  https?: boolean | undefined;
  internalPath?: string | null | undefined;
  path?: string | null | undefined;
  port?: number | null | undefined;
  previewDeploymentId?: string | null | undefined;
  serviceName?: string | null | undefined;
  stripPath?: boolean | undefined;
};

/** @internal */
export const DomainCreateRequest$outboundSchema: z.ZodType<
  DomainCreateRequest$Outbound,
  z.ZodTypeDef,
  DomainCreateRequest
> = z.object({
  applicationId: z.nullable(z.string()).optional(),
  certificateType: DomainCreateCertificateTypeRequest$outboundSchema.optional(),
  composeId: z.nullable(z.string()).optional(),
  customCertResolver: z.nullable(z.string()).optional(),
  domainType: z.nullable(DomainCreateDomainTypeRequest$outboundSchema)
    .optional(),
  host: z.string(),
  https: z.boolean().optional(),
  internalPath: z.nullable(z.string()).optional(),
  path: z.nullable(z.string()).optional(),
  port: z.nullable(z.number()).optional(),
  previewDeploymentId: z.nullable(z.string()).optional(),
  serviceName: z.nullable(z.string()).optional(),
  stripPath: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainCreateRequest$ {
  /** @deprecated use `DomainCreateRequest$inboundSchema` instead. */
  export const inboundSchema = DomainCreateRequest$inboundSchema;
  /** @deprecated use `DomainCreateRequest$outboundSchema` instead. */
  export const outboundSchema = DomainCreateRequest$outboundSchema;
  /** @deprecated use `DomainCreateRequest$Outbound` instead. */
  export type Outbound = DomainCreateRequest$Outbound;
}

export function domainCreateRequestToJSON(
  domainCreateRequest: DomainCreateRequest,
): string {
  return JSON.stringify(
    DomainCreateRequest$outboundSchema.parse(domainCreateRequest),
  );
}

export function domainCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<DomainCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DomainCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DomainCreateRequest' from JSON`,
  );
}

/** @internal */
export const DomainCreateCertificateTypeResponse$inboundSchema: z.ZodNativeEnum<
  typeof DomainCreateCertificateTypeResponse
> = z.nativeEnum(DomainCreateCertificateTypeResponse);

/** @internal */
export const DomainCreateCertificateTypeResponse$outboundSchema:
  z.ZodNativeEnum<typeof DomainCreateCertificateTypeResponse> =
    DomainCreateCertificateTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainCreateCertificateTypeResponse$ {
  /** @deprecated use `DomainCreateCertificateTypeResponse$inboundSchema` instead. */
  export const inboundSchema =
    DomainCreateCertificateTypeResponse$inboundSchema;
  /** @deprecated use `DomainCreateCertificateTypeResponse$outboundSchema` instead. */
  export const outboundSchema =
    DomainCreateCertificateTypeResponse$outboundSchema;
}

/** @internal */
export const DomainCreateDomainTypeResponse$inboundSchema: z.ZodNativeEnum<
  typeof DomainCreateDomainTypeResponse
> = z.nativeEnum(DomainCreateDomainTypeResponse);

/** @internal */
export const DomainCreateDomainTypeResponse$outboundSchema: z.ZodNativeEnum<
  typeof DomainCreateDomainTypeResponse
> = DomainCreateDomainTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainCreateDomainTypeResponse$ {
  /** @deprecated use `DomainCreateDomainTypeResponse$inboundSchema` instead. */
  export const inboundSchema = DomainCreateDomainTypeResponse$inboundSchema;
  /** @deprecated use `DomainCreateDomainTypeResponse$outboundSchema` instead. */
  export const outboundSchema = DomainCreateDomainTypeResponse$outboundSchema;
}

/** @internal */
export const DomainCreateResponseBody$inboundSchema: z.ZodType<
  DomainCreateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.nullable(z.string()),
  certificateType: DomainCreateCertificateTypeResponse$inboundSchema,
  composeId: z.nullable(z.string()),
  createdAt: z.string(),
  customCertResolver: z.nullable(z.string()),
  domainId: z.string(),
  domainType: z.nullable(DomainCreateDomainTypeResponse$inboundSchema),
  host: z.string(),
  https: z.boolean(),
  internalPath: z.nullable(z.string()),
  path: z.nullable(z.string()),
  port: z.nullable(z.number()),
  previewDeploymentId: z.nullable(z.string()),
  serviceName: z.nullable(z.string()),
  stripPath: z.boolean(),
  uniqueConfigKey: z.number(),
});

/** @internal */
export type DomainCreateResponseBody$Outbound = {
  applicationId: string | null;
  certificateType: string;
  composeId: string | null;
  createdAt: string;
  customCertResolver: string | null;
  domainId: string;
  domainType: string | null;
  host: string;
  https: boolean;
  internalPath: string | null;
  path: string | null;
  port: number | null;
  previewDeploymentId: string | null;
  serviceName: string | null;
  stripPath: boolean;
  uniqueConfigKey: number;
};

/** @internal */
export const DomainCreateResponseBody$outboundSchema: z.ZodType<
  DomainCreateResponseBody$Outbound,
  z.ZodTypeDef,
  DomainCreateResponseBody
> = z.object({
  applicationId: z.nullable(z.string()),
  certificateType: DomainCreateCertificateTypeResponse$outboundSchema,
  composeId: z.nullable(z.string()),
  createdAt: z.string(),
  customCertResolver: z.nullable(z.string()),
  domainId: z.string(),
  domainType: z.nullable(DomainCreateDomainTypeResponse$outboundSchema),
  host: z.string(),
  https: z.boolean(),
  internalPath: z.nullable(z.string()),
  path: z.nullable(z.string()),
  port: z.nullable(z.number()),
  previewDeploymentId: z.nullable(z.string()),
  serviceName: z.nullable(z.string()),
  stripPath: z.boolean(),
  uniqueConfigKey: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainCreateResponseBody$ {
  /** @deprecated use `DomainCreateResponseBody$inboundSchema` instead. */
  export const inboundSchema = DomainCreateResponseBody$inboundSchema;
  /** @deprecated use `DomainCreateResponseBody$outboundSchema` instead. */
  export const outboundSchema = DomainCreateResponseBody$outboundSchema;
  /** @deprecated use `DomainCreateResponseBody$Outbound` instead. */
  export type Outbound = DomainCreateResponseBody$Outbound;
}

export function domainCreateResponseBodyToJSON(
  domainCreateResponseBody: DomainCreateResponseBody,
): string {
  return JSON.stringify(
    DomainCreateResponseBody$outboundSchema.parse(domainCreateResponseBody),
  );
}

export function domainCreateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DomainCreateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DomainCreateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DomainCreateResponseBody' from JSON`,
  );
}

/** @internal */
export const DomainCreateResponse$inboundSchema: z.ZodType<
  DomainCreateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DomainCreateResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type DomainCreateResponse$Outbound =
  | DomainCreateResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const DomainCreateResponse$outboundSchema: z.ZodType<
  DomainCreateResponse$Outbound,
  z.ZodTypeDef,
  DomainCreateResponse
> = z.union([
  z.lazy(() => DomainCreateResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainCreateResponse$ {
  /** @deprecated use `DomainCreateResponse$inboundSchema` instead. */
  export const inboundSchema = DomainCreateResponse$inboundSchema;
  /** @deprecated use `DomainCreateResponse$outboundSchema` instead. */
  export const outboundSchema = DomainCreateResponse$outboundSchema;
  /** @deprecated use `DomainCreateResponse$Outbound` instead. */
  export type Outbound = DomainCreateResponse$Outbound;
}

export function domainCreateResponseToJSON(
  domainCreateResponse: DomainCreateResponse,
): string {
  return JSON.stringify(
    DomainCreateResponse$outboundSchema.parse(domainCreateResponse),
  );
}

export function domainCreateResponseFromJSON(
  jsonString: string,
): SafeParseResult<DomainCreateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DomainCreateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DomainCreateResponse' from JSON`,
  );
}
