/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type DomainByApplicationIdSecurity = {
  authorization: string;
};

export type DomainByApplicationIdRequest = {
  applicationId: string;
};

export const DomainByApplicationIdDomainType = {
  Compose: "compose",
  Application: "application",
  Preview: "preview",
} as const;
export type DomainByApplicationIdDomainType = ClosedEnum<
  typeof DomainByApplicationIdDomainType
>;

export const DomainByApplicationIdCertificateType = {
  Letsencrypt: "letsencrypt",
  None: "none",
  Custom: "custom",
} as const;
export type DomainByApplicationIdCertificateType = ClosedEnum<
  typeof DomainByApplicationIdCertificateType
>;

export type DomainByApplicationIdResponseBody = {
  domainId: string;
  host: string;
  https: boolean;
  port: number | null;
  path: string | null;
  serviceName: string | null;
  domainType: DomainByApplicationIdDomainType | null;
  uniqueConfigKey: number;
  createdAt: string;
  composeId: string | null;
  customCertResolver: string | null;
  applicationId: string | null;
  previewDeploymentId: string | null;
  certificateType: DomainByApplicationIdCertificateType;
  internalPath: string | null;
  stripPath: boolean;
};

export type DomainByApplicationIdResponse =
  | models.ErrorT
  | Array<DomainByApplicationIdResponseBody>;

/** @internal */
export const DomainByApplicationIdSecurity$inboundSchema: z.ZodType<
  DomainByApplicationIdSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type DomainByApplicationIdSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const DomainByApplicationIdSecurity$outboundSchema: z.ZodType<
  DomainByApplicationIdSecurity$Outbound,
  z.ZodTypeDef,
  DomainByApplicationIdSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainByApplicationIdSecurity$ {
  /** @deprecated use `DomainByApplicationIdSecurity$inboundSchema` instead. */
  export const inboundSchema = DomainByApplicationIdSecurity$inboundSchema;
  /** @deprecated use `DomainByApplicationIdSecurity$outboundSchema` instead. */
  export const outboundSchema = DomainByApplicationIdSecurity$outboundSchema;
  /** @deprecated use `DomainByApplicationIdSecurity$Outbound` instead. */
  export type Outbound = DomainByApplicationIdSecurity$Outbound;
}

export function domainByApplicationIdSecurityToJSON(
  domainByApplicationIdSecurity: DomainByApplicationIdSecurity,
): string {
  return JSON.stringify(
    DomainByApplicationIdSecurity$outboundSchema.parse(
      domainByApplicationIdSecurity,
    ),
  );
}

export function domainByApplicationIdSecurityFromJSON(
  jsonString: string,
): SafeParseResult<DomainByApplicationIdSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DomainByApplicationIdSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DomainByApplicationIdSecurity' from JSON`,
  );
}

/** @internal */
export const DomainByApplicationIdRequest$inboundSchema: z.ZodType<
  DomainByApplicationIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string(),
});

/** @internal */
export type DomainByApplicationIdRequest$Outbound = {
  applicationId: string;
};

/** @internal */
export const DomainByApplicationIdRequest$outboundSchema: z.ZodType<
  DomainByApplicationIdRequest$Outbound,
  z.ZodTypeDef,
  DomainByApplicationIdRequest
> = z.object({
  applicationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainByApplicationIdRequest$ {
  /** @deprecated use `DomainByApplicationIdRequest$inboundSchema` instead. */
  export const inboundSchema = DomainByApplicationIdRequest$inboundSchema;
  /** @deprecated use `DomainByApplicationIdRequest$outboundSchema` instead. */
  export const outboundSchema = DomainByApplicationIdRequest$outboundSchema;
  /** @deprecated use `DomainByApplicationIdRequest$Outbound` instead. */
  export type Outbound = DomainByApplicationIdRequest$Outbound;
}

export function domainByApplicationIdRequestToJSON(
  domainByApplicationIdRequest: DomainByApplicationIdRequest,
): string {
  return JSON.stringify(
    DomainByApplicationIdRequest$outboundSchema.parse(
      domainByApplicationIdRequest,
    ),
  );
}

export function domainByApplicationIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DomainByApplicationIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DomainByApplicationIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DomainByApplicationIdRequest' from JSON`,
  );
}

/** @internal */
export const DomainByApplicationIdDomainType$inboundSchema: z.ZodNativeEnum<
  typeof DomainByApplicationIdDomainType
> = z.nativeEnum(DomainByApplicationIdDomainType);

/** @internal */
export const DomainByApplicationIdDomainType$outboundSchema: z.ZodNativeEnum<
  typeof DomainByApplicationIdDomainType
> = DomainByApplicationIdDomainType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainByApplicationIdDomainType$ {
  /** @deprecated use `DomainByApplicationIdDomainType$inboundSchema` instead. */
  export const inboundSchema = DomainByApplicationIdDomainType$inboundSchema;
  /** @deprecated use `DomainByApplicationIdDomainType$outboundSchema` instead. */
  export const outboundSchema = DomainByApplicationIdDomainType$outboundSchema;
}

/** @internal */
export const DomainByApplicationIdCertificateType$inboundSchema:
  z.ZodNativeEnum<typeof DomainByApplicationIdCertificateType> = z.nativeEnum(
    DomainByApplicationIdCertificateType,
  );

/** @internal */
export const DomainByApplicationIdCertificateType$outboundSchema:
  z.ZodNativeEnum<typeof DomainByApplicationIdCertificateType> =
    DomainByApplicationIdCertificateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainByApplicationIdCertificateType$ {
  /** @deprecated use `DomainByApplicationIdCertificateType$inboundSchema` instead. */
  export const inboundSchema =
    DomainByApplicationIdCertificateType$inboundSchema;
  /** @deprecated use `DomainByApplicationIdCertificateType$outboundSchema` instead. */
  export const outboundSchema =
    DomainByApplicationIdCertificateType$outboundSchema;
}

/** @internal */
export const DomainByApplicationIdResponseBody$inboundSchema: z.ZodType<
  DomainByApplicationIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  domainId: z.string(),
  host: z.string(),
  https: z.boolean(),
  port: z.nullable(z.number()),
  path: z.nullable(z.string()),
  serviceName: z.nullable(z.string()),
  domainType: z.nullable(DomainByApplicationIdDomainType$inboundSchema),
  uniqueConfigKey: z.number(),
  createdAt: z.string(),
  composeId: z.nullable(z.string()),
  customCertResolver: z.nullable(z.string()),
  applicationId: z.nullable(z.string()),
  previewDeploymentId: z.nullable(z.string()),
  certificateType: DomainByApplicationIdCertificateType$inboundSchema,
  internalPath: z.nullable(z.string()),
  stripPath: z.boolean(),
});

/** @internal */
export type DomainByApplicationIdResponseBody$Outbound = {
  domainId: string;
  host: string;
  https: boolean;
  port: number | null;
  path: string | null;
  serviceName: string | null;
  domainType: string | null;
  uniqueConfigKey: number;
  createdAt: string;
  composeId: string | null;
  customCertResolver: string | null;
  applicationId: string | null;
  previewDeploymentId: string | null;
  certificateType: string;
  internalPath: string | null;
  stripPath: boolean;
};

/** @internal */
export const DomainByApplicationIdResponseBody$outboundSchema: z.ZodType<
  DomainByApplicationIdResponseBody$Outbound,
  z.ZodTypeDef,
  DomainByApplicationIdResponseBody
> = z.object({
  domainId: z.string(),
  host: z.string(),
  https: z.boolean(),
  port: z.nullable(z.number()),
  path: z.nullable(z.string()),
  serviceName: z.nullable(z.string()),
  domainType: z.nullable(DomainByApplicationIdDomainType$outboundSchema),
  uniqueConfigKey: z.number(),
  createdAt: z.string(),
  composeId: z.nullable(z.string()),
  customCertResolver: z.nullable(z.string()),
  applicationId: z.nullable(z.string()),
  previewDeploymentId: z.nullable(z.string()),
  certificateType: DomainByApplicationIdCertificateType$outboundSchema,
  internalPath: z.nullable(z.string()),
  stripPath: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainByApplicationIdResponseBody$ {
  /** @deprecated use `DomainByApplicationIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = DomainByApplicationIdResponseBody$inboundSchema;
  /** @deprecated use `DomainByApplicationIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    DomainByApplicationIdResponseBody$outboundSchema;
  /** @deprecated use `DomainByApplicationIdResponseBody$Outbound` instead. */
  export type Outbound = DomainByApplicationIdResponseBody$Outbound;
}

export function domainByApplicationIdResponseBodyToJSON(
  domainByApplicationIdResponseBody: DomainByApplicationIdResponseBody,
): string {
  return JSON.stringify(
    DomainByApplicationIdResponseBody$outboundSchema.parse(
      domainByApplicationIdResponseBody,
    ),
  );
}

export function domainByApplicationIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DomainByApplicationIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DomainByApplicationIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DomainByApplicationIdResponseBody' from JSON`,
  );
}

/** @internal */
export const DomainByApplicationIdResponse$inboundSchema: z.ZodType<
  DomainByApplicationIdResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ErrorT$inboundSchema,
  z.array(z.lazy(() => DomainByApplicationIdResponseBody$inboundSchema)),
]);

/** @internal */
export type DomainByApplicationIdResponse$Outbound =
  | models.ErrorT$Outbound
  | Array<DomainByApplicationIdResponseBody$Outbound>;

/** @internal */
export const DomainByApplicationIdResponse$outboundSchema: z.ZodType<
  DomainByApplicationIdResponse$Outbound,
  z.ZodTypeDef,
  DomainByApplicationIdResponse
> = z.union([
  models.ErrorT$outboundSchema,
  z.array(z.lazy(() => DomainByApplicationIdResponseBody$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainByApplicationIdResponse$ {
  /** @deprecated use `DomainByApplicationIdResponse$inboundSchema` instead. */
  export const inboundSchema = DomainByApplicationIdResponse$inboundSchema;
  /** @deprecated use `DomainByApplicationIdResponse$outboundSchema` instead. */
  export const outboundSchema = DomainByApplicationIdResponse$outboundSchema;
  /** @deprecated use `DomainByApplicationIdResponse$Outbound` instead. */
  export type Outbound = DomainByApplicationIdResponse$Outbound;
}

export function domainByApplicationIdResponseToJSON(
  domainByApplicationIdResponse: DomainByApplicationIdResponse,
): string {
  return JSON.stringify(
    DomainByApplicationIdResponse$outboundSchema.parse(
      domainByApplicationIdResponse,
    ),
  );
}

export function domainByApplicationIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<DomainByApplicationIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DomainByApplicationIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DomainByApplicationIdResponse' from JSON`,
  );
}
