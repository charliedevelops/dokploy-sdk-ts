/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComposeLoadMountsByServiceSecurity = {
  authorization: string;
};

export type ComposeLoadMountsByServiceRequest = {
  composeId: string;
  serviceName: string;
};

/** @internal */
export const ComposeLoadMountsByServiceSecurity$inboundSchema: z.ZodType<
  ComposeLoadMountsByServiceSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type ComposeLoadMountsByServiceSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const ComposeLoadMountsByServiceSecurity$outboundSchema: z.ZodType<
  ComposeLoadMountsByServiceSecurity$Outbound,
  z.ZodTypeDef,
  ComposeLoadMountsByServiceSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComposeLoadMountsByServiceSecurity$ {
  /** @deprecated use `ComposeLoadMountsByServiceSecurity$inboundSchema` instead. */
  export const inboundSchema = ComposeLoadMountsByServiceSecurity$inboundSchema;
  /** @deprecated use `ComposeLoadMountsByServiceSecurity$outboundSchema` instead. */
  export const outboundSchema =
    ComposeLoadMountsByServiceSecurity$outboundSchema;
  /** @deprecated use `ComposeLoadMountsByServiceSecurity$Outbound` instead. */
  export type Outbound = ComposeLoadMountsByServiceSecurity$Outbound;
}

export function composeLoadMountsByServiceSecurityToJSON(
  composeLoadMountsByServiceSecurity: ComposeLoadMountsByServiceSecurity,
): string {
  return JSON.stringify(
    ComposeLoadMountsByServiceSecurity$outboundSchema.parse(
      composeLoadMountsByServiceSecurity,
    ),
  );
}

export function composeLoadMountsByServiceSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ComposeLoadMountsByServiceSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ComposeLoadMountsByServiceSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComposeLoadMountsByServiceSecurity' from JSON`,
  );
}

/** @internal */
export const ComposeLoadMountsByServiceRequest$inboundSchema: z.ZodType<
  ComposeLoadMountsByServiceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  composeId: z.string(),
  serviceName: z.string(),
});

/** @internal */
export type ComposeLoadMountsByServiceRequest$Outbound = {
  composeId: string;
  serviceName: string;
};

/** @internal */
export const ComposeLoadMountsByServiceRequest$outboundSchema: z.ZodType<
  ComposeLoadMountsByServiceRequest$Outbound,
  z.ZodTypeDef,
  ComposeLoadMountsByServiceRequest
> = z.object({
  composeId: z.string(),
  serviceName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComposeLoadMountsByServiceRequest$ {
  /** @deprecated use `ComposeLoadMountsByServiceRequest$inboundSchema` instead. */
  export const inboundSchema = ComposeLoadMountsByServiceRequest$inboundSchema;
  /** @deprecated use `ComposeLoadMountsByServiceRequest$outboundSchema` instead. */
  export const outboundSchema =
    ComposeLoadMountsByServiceRequest$outboundSchema;
  /** @deprecated use `ComposeLoadMountsByServiceRequest$Outbound` instead. */
  export type Outbound = ComposeLoadMountsByServiceRequest$Outbound;
}

export function composeLoadMountsByServiceRequestToJSON(
  composeLoadMountsByServiceRequest: ComposeLoadMountsByServiceRequest,
): string {
  return JSON.stringify(
    ComposeLoadMountsByServiceRequest$outboundSchema.parse(
      composeLoadMountsByServiceRequest,
    ),
  );
}

export function composeLoadMountsByServiceRequestFromJSON(
  jsonString: string,
): SafeParseResult<ComposeLoadMountsByServiceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComposeLoadMountsByServiceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComposeLoadMountsByServiceRequest' from JSON`,
  );
}
