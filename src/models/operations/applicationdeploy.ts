/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ApplicationDeploySecurity = {
  authorization: string;
};

export type ApplicationDeployRequest = {
  applicationId: string;
  description?: string | undefined;
  title?: string | undefined;
};

/** @internal */
export const ApplicationDeploySecurity$inboundSchema: z.ZodType<
  ApplicationDeploySecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type ApplicationDeploySecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const ApplicationDeploySecurity$outboundSchema: z.ZodType<
  ApplicationDeploySecurity$Outbound,
  z.ZodTypeDef,
  ApplicationDeploySecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeploySecurity$ {
  /** @deprecated use `ApplicationDeploySecurity$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeploySecurity$inboundSchema;
  /** @deprecated use `ApplicationDeploySecurity$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeploySecurity$outboundSchema;
  /** @deprecated use `ApplicationDeploySecurity$Outbound` instead. */
  export type Outbound = ApplicationDeploySecurity$Outbound;
}

export function applicationDeploySecurityToJSON(
  applicationDeploySecurity: ApplicationDeploySecurity,
): string {
  return JSON.stringify(
    ApplicationDeploySecurity$outboundSchema.parse(applicationDeploySecurity),
  );
}

export function applicationDeploySecurityFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeploySecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeploySecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeploySecurity' from JSON`,
  );
}

/** @internal */
export const ApplicationDeployRequest$inboundSchema: z.ZodType<
  ApplicationDeployRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string(),
  description: z.string().optional(),
  title: z.string().optional(),
});

/** @internal */
export type ApplicationDeployRequest$Outbound = {
  applicationId: string;
  description?: string | undefined;
  title?: string | undefined;
};

/** @internal */
export const ApplicationDeployRequest$outboundSchema: z.ZodType<
  ApplicationDeployRequest$Outbound,
  z.ZodTypeDef,
  ApplicationDeployRequest
> = z.object({
  applicationId: z.string(),
  description: z.string().optional(),
  title: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeployRequest$ {
  /** @deprecated use `ApplicationDeployRequest$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeployRequest$inboundSchema;
  /** @deprecated use `ApplicationDeployRequest$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeployRequest$outboundSchema;
  /** @deprecated use `ApplicationDeployRequest$Outbound` instead. */
  export type Outbound = ApplicationDeployRequest$Outbound;
}

export function applicationDeployRequestToJSON(
  applicationDeployRequest: ApplicationDeployRequest,
): string {
  return JSON.stringify(
    ApplicationDeployRequest$outboundSchema.parse(applicationDeployRequest),
  );
}

export function applicationDeployRequestFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeployRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeployRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeployRequest' from JSON`,
  );
}
