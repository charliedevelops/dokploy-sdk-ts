/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MountsUpdateSecurity = {
  authorization: string;
};

export const MountsUpdateServiceType = {
  Application: "application",
  Postgres: "postgres",
  Mysql: "mysql",
  Mariadb: "mariadb",
  Mongo: "mongo",
  Redis: "redis",
  Compose: "compose",
} as const;
export type MountsUpdateServiceType = ClosedEnum<
  typeof MountsUpdateServiceType
>;

export const MountsUpdateType = {
  Bind: "bind",
  Volume: "volume",
  File: "file",
} as const;
export type MountsUpdateType = ClosedEnum<typeof MountsUpdateType>;

export type MountsUpdateRequest = {
  applicationId?: string | null | undefined;
  composeId?: string | null | undefined;
  content?: string | null | undefined;
  filePath?: string | null | undefined;
  hostPath?: string | null | undefined;
  mariadbId?: string | null | undefined;
  mongoId?: string | null | undefined;
  mountId: string;
  mountPath?: string | undefined;
  mysqlId?: string | null | undefined;
  postgresId?: string | null | undefined;
  redisId?: string | null | undefined;
  serviceType?: MountsUpdateServiceType | undefined;
  type?: MountsUpdateType | undefined;
  volumeName?: string | null | undefined;
};

/** @internal */
export const MountsUpdateSecurity$inboundSchema: z.ZodType<
  MountsUpdateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type MountsUpdateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const MountsUpdateSecurity$outboundSchema: z.ZodType<
  MountsUpdateSecurity$Outbound,
  z.ZodTypeDef,
  MountsUpdateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MountsUpdateSecurity$ {
  /** @deprecated use `MountsUpdateSecurity$inboundSchema` instead. */
  export const inboundSchema = MountsUpdateSecurity$inboundSchema;
  /** @deprecated use `MountsUpdateSecurity$outboundSchema` instead. */
  export const outboundSchema = MountsUpdateSecurity$outboundSchema;
  /** @deprecated use `MountsUpdateSecurity$Outbound` instead. */
  export type Outbound = MountsUpdateSecurity$Outbound;
}

export function mountsUpdateSecurityToJSON(
  mountsUpdateSecurity: MountsUpdateSecurity,
): string {
  return JSON.stringify(
    MountsUpdateSecurity$outboundSchema.parse(mountsUpdateSecurity),
  );
}

export function mountsUpdateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<MountsUpdateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MountsUpdateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MountsUpdateSecurity' from JSON`,
  );
}

/** @internal */
export const MountsUpdateServiceType$inboundSchema: z.ZodNativeEnum<
  typeof MountsUpdateServiceType
> = z.nativeEnum(MountsUpdateServiceType);

/** @internal */
export const MountsUpdateServiceType$outboundSchema: z.ZodNativeEnum<
  typeof MountsUpdateServiceType
> = MountsUpdateServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MountsUpdateServiceType$ {
  /** @deprecated use `MountsUpdateServiceType$inboundSchema` instead. */
  export const inboundSchema = MountsUpdateServiceType$inboundSchema;
  /** @deprecated use `MountsUpdateServiceType$outboundSchema` instead. */
  export const outboundSchema = MountsUpdateServiceType$outboundSchema;
}

/** @internal */
export const MountsUpdateType$inboundSchema: z.ZodNativeEnum<
  typeof MountsUpdateType
> = z.nativeEnum(MountsUpdateType);

/** @internal */
export const MountsUpdateType$outboundSchema: z.ZodNativeEnum<
  typeof MountsUpdateType
> = MountsUpdateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MountsUpdateType$ {
  /** @deprecated use `MountsUpdateType$inboundSchema` instead. */
  export const inboundSchema = MountsUpdateType$inboundSchema;
  /** @deprecated use `MountsUpdateType$outboundSchema` instead. */
  export const outboundSchema = MountsUpdateType$outboundSchema;
}

/** @internal */
export const MountsUpdateRequest$inboundSchema: z.ZodType<
  MountsUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.nullable(z.string()).optional(),
  composeId: z.nullable(z.string()).optional(),
  content: z.nullable(z.string()).optional(),
  filePath: z.nullable(z.string()).optional(),
  hostPath: z.nullable(z.string()).optional(),
  mariadbId: z.nullable(z.string()).optional(),
  mongoId: z.nullable(z.string()).optional(),
  mountId: z.string(),
  mountPath: z.string().optional(),
  mysqlId: z.nullable(z.string()).optional(),
  postgresId: z.nullable(z.string()).optional(),
  redisId: z.nullable(z.string()).optional(),
  serviceType: MountsUpdateServiceType$inboundSchema.default("application"),
  type: MountsUpdateType$inboundSchema.optional(),
  volumeName: z.nullable(z.string()).optional(),
});

/** @internal */
export type MountsUpdateRequest$Outbound = {
  applicationId?: string | null | undefined;
  composeId?: string | null | undefined;
  content?: string | null | undefined;
  filePath?: string | null | undefined;
  hostPath?: string | null | undefined;
  mariadbId?: string | null | undefined;
  mongoId?: string | null | undefined;
  mountId: string;
  mountPath?: string | undefined;
  mysqlId?: string | null | undefined;
  postgresId?: string | null | undefined;
  redisId?: string | null | undefined;
  serviceType: string;
  type?: string | undefined;
  volumeName?: string | null | undefined;
};

/** @internal */
export const MountsUpdateRequest$outboundSchema: z.ZodType<
  MountsUpdateRequest$Outbound,
  z.ZodTypeDef,
  MountsUpdateRequest
> = z.object({
  applicationId: z.nullable(z.string()).optional(),
  composeId: z.nullable(z.string()).optional(),
  content: z.nullable(z.string()).optional(),
  filePath: z.nullable(z.string()).optional(),
  hostPath: z.nullable(z.string()).optional(),
  mariadbId: z.nullable(z.string()).optional(),
  mongoId: z.nullable(z.string()).optional(),
  mountId: z.string(),
  mountPath: z.string().optional(),
  mysqlId: z.nullable(z.string()).optional(),
  postgresId: z.nullable(z.string()).optional(),
  redisId: z.nullable(z.string()).optional(),
  serviceType: MountsUpdateServiceType$outboundSchema.default("application"),
  type: MountsUpdateType$outboundSchema.optional(),
  volumeName: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MountsUpdateRequest$ {
  /** @deprecated use `MountsUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = MountsUpdateRequest$inboundSchema;
  /** @deprecated use `MountsUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = MountsUpdateRequest$outboundSchema;
  /** @deprecated use `MountsUpdateRequest$Outbound` instead. */
  export type Outbound = MountsUpdateRequest$Outbound;
}

export function mountsUpdateRequestToJSON(
  mountsUpdateRequest: MountsUpdateRequest,
): string {
  return JSON.stringify(
    MountsUpdateRequest$outboundSchema.parse(mountsUpdateRequest),
  );
}

export function mountsUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<MountsUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MountsUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MountsUpdateRequest' from JSON`,
  );
}
