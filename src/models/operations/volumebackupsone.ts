/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type VolumeBackupsOneRequest = {
  volumeBackupId: string;
};

/** @internal */
export const VolumeBackupsOneRequest$inboundSchema: z.ZodType<
  VolumeBackupsOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  volumeBackupId: z.string(),
});

/** @internal */
export type VolumeBackupsOneRequest$Outbound = {
  volumeBackupId: string;
};

/** @internal */
export const VolumeBackupsOneRequest$outboundSchema: z.ZodType<
  VolumeBackupsOneRequest$Outbound,
  z.ZodTypeDef,
  VolumeBackupsOneRequest
> = z.object({
  volumeBackupId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VolumeBackupsOneRequest$ {
  /** @deprecated use `VolumeBackupsOneRequest$inboundSchema` instead. */
  export const inboundSchema = VolumeBackupsOneRequest$inboundSchema;
  /** @deprecated use `VolumeBackupsOneRequest$outboundSchema` instead. */
  export const outboundSchema = VolumeBackupsOneRequest$outboundSchema;
  /** @deprecated use `VolumeBackupsOneRequest$Outbound` instead. */
  export type Outbound = VolumeBackupsOneRequest$Outbound;
}

export function volumeBackupsOneRequestToJSON(
  volumeBackupsOneRequest: VolumeBackupsOneRequest,
): string {
  return JSON.stringify(
    VolumeBackupsOneRequest$outboundSchema.parse(volumeBackupsOneRequest),
  );
}

export function volumeBackupsOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<VolumeBackupsOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VolumeBackupsOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VolumeBackupsOneRequest' from JSON`,
  );
}
