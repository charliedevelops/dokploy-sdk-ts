/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UserDeleteApiKeySecurity = {
  authorization: string;
};

export type UserDeleteApiKeyRequest = {
  apiKeyId: string;
};

/** @internal */
export const UserDeleteApiKeySecurity$inboundSchema: z.ZodType<
  UserDeleteApiKeySecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type UserDeleteApiKeySecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const UserDeleteApiKeySecurity$outboundSchema: z.ZodType<
  UserDeleteApiKeySecurity$Outbound,
  z.ZodTypeDef,
  UserDeleteApiKeySecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserDeleteApiKeySecurity$ {
  /** @deprecated use `UserDeleteApiKeySecurity$inboundSchema` instead. */
  export const inboundSchema = UserDeleteApiKeySecurity$inboundSchema;
  /** @deprecated use `UserDeleteApiKeySecurity$outboundSchema` instead. */
  export const outboundSchema = UserDeleteApiKeySecurity$outboundSchema;
  /** @deprecated use `UserDeleteApiKeySecurity$Outbound` instead. */
  export type Outbound = UserDeleteApiKeySecurity$Outbound;
}

export function userDeleteApiKeySecurityToJSON(
  userDeleteApiKeySecurity: UserDeleteApiKeySecurity,
): string {
  return JSON.stringify(
    UserDeleteApiKeySecurity$outboundSchema.parse(userDeleteApiKeySecurity),
  );
}

export function userDeleteApiKeySecurityFromJSON(
  jsonString: string,
): SafeParseResult<UserDeleteApiKeySecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserDeleteApiKeySecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserDeleteApiKeySecurity' from JSON`,
  );
}

/** @internal */
export const UserDeleteApiKeyRequest$inboundSchema: z.ZodType<
  UserDeleteApiKeyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKeyId: z.string(),
});

/** @internal */
export type UserDeleteApiKeyRequest$Outbound = {
  apiKeyId: string;
};

/** @internal */
export const UserDeleteApiKeyRequest$outboundSchema: z.ZodType<
  UserDeleteApiKeyRequest$Outbound,
  z.ZodTypeDef,
  UserDeleteApiKeyRequest
> = z.object({
  apiKeyId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserDeleteApiKeyRequest$ {
  /** @deprecated use `UserDeleteApiKeyRequest$inboundSchema` instead. */
  export const inboundSchema = UserDeleteApiKeyRequest$inboundSchema;
  /** @deprecated use `UserDeleteApiKeyRequest$outboundSchema` instead. */
  export const outboundSchema = UserDeleteApiKeyRequest$outboundSchema;
  /** @deprecated use `UserDeleteApiKeyRequest$Outbound` instead. */
  export type Outbound = UserDeleteApiKeyRequest$Outbound;
}

export function userDeleteApiKeyRequestToJSON(
  userDeleteApiKeyRequest: UserDeleteApiKeyRequest,
): string {
  return JSON.stringify(
    UserDeleteApiKeyRequest$outboundSchema.parse(userDeleteApiKeyRequest),
  );
}

export function userDeleteApiKeyRequestFromJSON(
  jsonString: string,
): SafeParseResult<UserDeleteApiKeyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserDeleteApiKeyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserDeleteApiKeyRequest' from JSON`,
  );
}
