/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type RedisRemoveSecurity = {
  authorization: string;
};

export type RedisRemoveRequest = {
  redisId: string;
};

export const RedisRemoveApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type RedisRemoveApplicationStatus = ClosedEnum<
  typeof RedisRemoveApplicationStatus
>;

export type RedisRemoveHealthCheckSwarm = {
  test?: Array<string> | undefined;
  interval?: number | undefined;
  timeout?: number | undefined;
  startPeriod?: number | undefined;
  retries?: number | undefined;
};

export type RedisRemoveRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type RedisRemoveSpread = {
  spreadDescriptor: string;
};

export type RedisRemovePreference = {
  spread: RedisRemoveSpread;
};

export type RedisRemovePlatform = {
  architecture: string;
  os: string;
};

export type RedisRemovePlacementSwarm = {
  constraints?: Array<string> | undefined;
  preferences?: Array<RedisRemovePreference> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<RedisRemovePlatform> | undefined;
};

export type RedisRemoveUpdateConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type RedisRemoveRollbackConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type RedisRemoveReplicated = {
  replicas?: number | undefined;
};

export type RedisRemoveGlobal = {};

export type RedisRemoveReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type RedisRemoveGlobalJob = {};

export type RedisRemoveModeSwarm = {
  replicated?: RedisRemoveReplicated | undefined;
  global?: RedisRemoveGlobal | undefined;
  replicatedJob?: RedisRemoveReplicatedJob | undefined;
  globalJob?: RedisRemoveGlobalJob | undefined;
};

export type RedisRemoveDriverOpts = {};

export type RedisRemoveNetworkSwarm = {
  target?: string | undefined;
  aliases?: Array<string> | undefined;
  driverOpts?: RedisRemoveDriverOpts | undefined;
};

export type RedisRemoveProject = {
  projectId: string;
  name: string;
  description: string | null;
  createdAt: string;
  organizationId: string;
  env: string;
};

export type RedisRemoveEnvironment = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
  project: RedisRemoveProject;
};

export const RedisRemoveType = {
  Bind: "bind",
  Volume: "volume",
  File: "file",
} as const;
export type RedisRemoveType = ClosedEnum<typeof RedisRemoveType>;

export const RedisRemoveServiceType = {
  Application: "application",
  Postgres: "postgres",
  Mysql: "mysql",
  Mariadb: "mariadb",
  Mongo: "mongo",
  Redis: "redis",
  Compose: "compose",
} as const;
export type RedisRemoveServiceType = ClosedEnum<typeof RedisRemoveServiceType>;

export type RedisRemoveMount = {
  mountId: string;
  type: RedisRemoveType;
  hostPath: string | null;
  volumeName: string | null;
  filePath: string | null;
  content: string | null;
  serviceType: RedisRemoveServiceType;
  mountPath: string;
  applicationId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mysqlId: string | null;
  redisId: string | null;
  composeId: string | null;
};

export const RedisRemoveServerStatus = {
  Active: "active",
  Inactive: "inactive",
} as const;
export type RedisRemoveServerStatus = ClosedEnum<
  typeof RedisRemoveServerStatus
>;

export const RedisRemoveMetricsConfigEnum = {
  Null: "null",
} as const;
export type RedisRemoveMetricsConfigEnum = ClosedEnum<
  typeof RedisRemoveMetricsConfigEnum
>;

export type RedisRemoveMetricsConfigUnion1 =
  | string
  | number
  | boolean
  | RedisRemoveMetricsConfigEnum;

export type RedisRemoveMetricsConfigUnion2 =
  | string
  | number
  | boolean
  | RedisRemoveMetricsConfigEnum
  | Array<any>
  | { [k: string]: any };

export type RedisRemoveServer = {
  serverId: string;
  name: string;
  description: string | null;
  ipAddress: string;
  port: number;
  username: string;
  appName: string;
  enableDockerCleanup: boolean;
  createdAt: string;
  organizationId: string;
  serverStatus: RedisRemoveServerStatus;
  command: string;
  sshKeyId: string | null;
  metricsConfig:
    | string
    | number
    | boolean
    | RedisRemoveMetricsConfigEnum
    | Array<any>
    | { [k: string]: any };
};

/**
 * Successful response
 */
export type RedisRemoveResponseBody = {
  redisId: string;
  name: string;
  appName: string;
  description: string | null;
  databasePassword: string;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  externalPort: number | null;
  createdAt: string;
  applicationStatus: RedisRemoveApplicationStatus;
  healthCheckSwarm: RedisRemoveHealthCheckSwarm | null;
  restartPolicySwarm: RedisRemoveRestartPolicySwarm | null;
  placementSwarm: RedisRemovePlacementSwarm | null;
  updateConfigSwarm: RedisRemoveUpdateConfigSwarm | null;
  rollbackConfigSwarm: RedisRemoveRollbackConfigSwarm | null;
  modeSwarm: RedisRemoveModeSwarm | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<RedisRemoveNetworkSwarm> | null;
  replicas: number;
  environmentId: string;
  serverId: string | null;
  environment: RedisRemoveEnvironment;
  mounts: Array<RedisRemoveMount>;
  server: RedisRemoveServer | null;
};

export type RedisRemoveResponse = RedisRemoveResponseBody | models.ErrorT;

/** @internal */
export const RedisRemoveSecurity$inboundSchema: z.ZodType<
  RedisRemoveSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type RedisRemoveSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const RedisRemoveSecurity$outboundSchema: z.ZodType<
  RedisRemoveSecurity$Outbound,
  z.ZodTypeDef,
  RedisRemoveSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemoveSecurity$ {
  /** @deprecated use `RedisRemoveSecurity$inboundSchema` instead. */
  export const inboundSchema = RedisRemoveSecurity$inboundSchema;
  /** @deprecated use `RedisRemoveSecurity$outboundSchema` instead. */
  export const outboundSchema = RedisRemoveSecurity$outboundSchema;
  /** @deprecated use `RedisRemoveSecurity$Outbound` instead. */
  export type Outbound = RedisRemoveSecurity$Outbound;
}

export function redisRemoveSecurityToJSON(
  redisRemoveSecurity: RedisRemoveSecurity,
): string {
  return JSON.stringify(
    RedisRemoveSecurity$outboundSchema.parse(redisRemoveSecurity),
  );
}

export function redisRemoveSecurityFromJSON(
  jsonString: string,
): SafeParseResult<RedisRemoveSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisRemoveSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisRemoveSecurity' from JSON`,
  );
}

/** @internal */
export const RedisRemoveRequest$inboundSchema: z.ZodType<
  RedisRemoveRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  redisId: z.string(),
});

/** @internal */
export type RedisRemoveRequest$Outbound = {
  redisId: string;
};

/** @internal */
export const RedisRemoveRequest$outboundSchema: z.ZodType<
  RedisRemoveRequest$Outbound,
  z.ZodTypeDef,
  RedisRemoveRequest
> = z.object({
  redisId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemoveRequest$ {
  /** @deprecated use `RedisRemoveRequest$inboundSchema` instead. */
  export const inboundSchema = RedisRemoveRequest$inboundSchema;
  /** @deprecated use `RedisRemoveRequest$outboundSchema` instead. */
  export const outboundSchema = RedisRemoveRequest$outboundSchema;
  /** @deprecated use `RedisRemoveRequest$Outbound` instead. */
  export type Outbound = RedisRemoveRequest$Outbound;
}

export function redisRemoveRequestToJSON(
  redisRemoveRequest: RedisRemoveRequest,
): string {
  return JSON.stringify(
    RedisRemoveRequest$outboundSchema.parse(redisRemoveRequest),
  );
}

export function redisRemoveRequestFromJSON(
  jsonString: string,
): SafeParseResult<RedisRemoveRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisRemoveRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisRemoveRequest' from JSON`,
  );
}

/** @internal */
export const RedisRemoveApplicationStatus$inboundSchema: z.ZodNativeEnum<
  typeof RedisRemoveApplicationStatus
> = z.nativeEnum(RedisRemoveApplicationStatus);

/** @internal */
export const RedisRemoveApplicationStatus$outboundSchema: z.ZodNativeEnum<
  typeof RedisRemoveApplicationStatus
> = RedisRemoveApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemoveApplicationStatus$ {
  /** @deprecated use `RedisRemoveApplicationStatus$inboundSchema` instead. */
  export const inboundSchema = RedisRemoveApplicationStatus$inboundSchema;
  /** @deprecated use `RedisRemoveApplicationStatus$outboundSchema` instead. */
  export const outboundSchema = RedisRemoveApplicationStatus$outboundSchema;
}

/** @internal */
export const RedisRemoveHealthCheckSwarm$inboundSchema: z.ZodType<
  RedisRemoveHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Test: z.array(z.string()).optional(),
  Interval: z.number().optional(),
  Timeout: z.number().optional(),
  StartPeriod: z.number().optional(),
  Retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Test": "test",
    "Interval": "interval",
    "Timeout": "timeout",
    "StartPeriod": "startPeriod",
    "Retries": "retries",
  });
});

/** @internal */
export type RedisRemoveHealthCheckSwarm$Outbound = {
  Test?: Array<string> | undefined;
  Interval?: number | undefined;
  Timeout?: number | undefined;
  StartPeriod?: number | undefined;
  Retries?: number | undefined;
};

/** @internal */
export const RedisRemoveHealthCheckSwarm$outboundSchema: z.ZodType<
  RedisRemoveHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  RedisRemoveHealthCheckSwarm
> = z.object({
  test: z.array(z.string()).optional(),
  interval: z.number().optional(),
  timeout: z.number().optional(),
  startPeriod: z.number().optional(),
  retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    test: "Test",
    interval: "Interval",
    timeout: "Timeout",
    startPeriod: "StartPeriod",
    retries: "Retries",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemoveHealthCheckSwarm$ {
  /** @deprecated use `RedisRemoveHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisRemoveHealthCheckSwarm$inboundSchema;
  /** @deprecated use `RedisRemoveHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisRemoveHealthCheckSwarm$outboundSchema;
  /** @deprecated use `RedisRemoveHealthCheckSwarm$Outbound` instead. */
  export type Outbound = RedisRemoveHealthCheckSwarm$Outbound;
}

export function redisRemoveHealthCheckSwarmToJSON(
  redisRemoveHealthCheckSwarm: RedisRemoveHealthCheckSwarm,
): string {
  return JSON.stringify(
    RedisRemoveHealthCheckSwarm$outboundSchema.parse(
      redisRemoveHealthCheckSwarm,
    ),
  );
}

export function redisRemoveHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisRemoveHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisRemoveHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisRemoveHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const RedisRemoveRestartPolicySwarm$inboundSchema: z.ZodType<
  RedisRemoveRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type RedisRemoveRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const RedisRemoveRestartPolicySwarm$outboundSchema: z.ZodType<
  RedisRemoveRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  RedisRemoveRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemoveRestartPolicySwarm$ {
  /** @deprecated use `RedisRemoveRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema = RedisRemoveRestartPolicySwarm$inboundSchema;
  /** @deprecated use `RedisRemoveRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema = RedisRemoveRestartPolicySwarm$outboundSchema;
  /** @deprecated use `RedisRemoveRestartPolicySwarm$Outbound` instead. */
  export type Outbound = RedisRemoveRestartPolicySwarm$Outbound;
}

export function redisRemoveRestartPolicySwarmToJSON(
  redisRemoveRestartPolicySwarm: RedisRemoveRestartPolicySwarm,
): string {
  return JSON.stringify(
    RedisRemoveRestartPolicySwarm$outboundSchema.parse(
      redisRemoveRestartPolicySwarm,
    ),
  );
}

export function redisRemoveRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisRemoveRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisRemoveRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisRemoveRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const RedisRemoveSpread$inboundSchema: z.ZodType<
  RedisRemoveSpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type RedisRemoveSpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const RedisRemoveSpread$outboundSchema: z.ZodType<
  RedisRemoveSpread$Outbound,
  z.ZodTypeDef,
  RedisRemoveSpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemoveSpread$ {
  /** @deprecated use `RedisRemoveSpread$inboundSchema` instead. */
  export const inboundSchema = RedisRemoveSpread$inboundSchema;
  /** @deprecated use `RedisRemoveSpread$outboundSchema` instead. */
  export const outboundSchema = RedisRemoveSpread$outboundSchema;
  /** @deprecated use `RedisRemoveSpread$Outbound` instead. */
  export type Outbound = RedisRemoveSpread$Outbound;
}

export function redisRemoveSpreadToJSON(
  redisRemoveSpread: RedisRemoveSpread,
): string {
  return JSON.stringify(
    RedisRemoveSpread$outboundSchema.parse(redisRemoveSpread),
  );
}

export function redisRemoveSpreadFromJSON(
  jsonString: string,
): SafeParseResult<RedisRemoveSpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisRemoveSpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisRemoveSpread' from JSON`,
  );
}

/** @internal */
export const RedisRemovePreference$inboundSchema: z.ZodType<
  RedisRemovePreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => RedisRemoveSpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type RedisRemovePreference$Outbound = {
  Spread: RedisRemoveSpread$Outbound;
};

/** @internal */
export const RedisRemovePreference$outboundSchema: z.ZodType<
  RedisRemovePreference$Outbound,
  z.ZodTypeDef,
  RedisRemovePreference
> = z.object({
  spread: z.lazy(() => RedisRemoveSpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemovePreference$ {
  /** @deprecated use `RedisRemovePreference$inboundSchema` instead. */
  export const inboundSchema = RedisRemovePreference$inboundSchema;
  /** @deprecated use `RedisRemovePreference$outboundSchema` instead. */
  export const outboundSchema = RedisRemovePreference$outboundSchema;
  /** @deprecated use `RedisRemovePreference$Outbound` instead. */
  export type Outbound = RedisRemovePreference$Outbound;
}

export function redisRemovePreferenceToJSON(
  redisRemovePreference: RedisRemovePreference,
): string {
  return JSON.stringify(
    RedisRemovePreference$outboundSchema.parse(redisRemovePreference),
  );
}

export function redisRemovePreferenceFromJSON(
  jsonString: string,
): SafeParseResult<RedisRemovePreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisRemovePreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisRemovePreference' from JSON`,
  );
}

/** @internal */
export const RedisRemovePlatform$inboundSchema: z.ZodType<
  RedisRemovePlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type RedisRemovePlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const RedisRemovePlatform$outboundSchema: z.ZodType<
  RedisRemovePlatform$Outbound,
  z.ZodTypeDef,
  RedisRemovePlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemovePlatform$ {
  /** @deprecated use `RedisRemovePlatform$inboundSchema` instead. */
  export const inboundSchema = RedisRemovePlatform$inboundSchema;
  /** @deprecated use `RedisRemovePlatform$outboundSchema` instead. */
  export const outboundSchema = RedisRemovePlatform$outboundSchema;
  /** @deprecated use `RedisRemovePlatform$Outbound` instead. */
  export type Outbound = RedisRemovePlatform$Outbound;
}

export function redisRemovePlatformToJSON(
  redisRemovePlatform: RedisRemovePlatform,
): string {
  return JSON.stringify(
    RedisRemovePlatform$outboundSchema.parse(redisRemovePlatform),
  );
}

export function redisRemovePlatformFromJSON(
  jsonString: string,
): SafeParseResult<RedisRemovePlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisRemovePlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisRemovePlatform' from JSON`,
  );
}

/** @internal */
export const RedisRemovePlacementSwarm$inboundSchema: z.ZodType<
  RedisRemovePlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  Preferences: z.array(z.lazy(() => RedisRemovePreference$inboundSchema))
    .optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => RedisRemovePlatform$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "Preferences": "preferences",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
  });
});

/** @internal */
export type RedisRemovePlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  Preferences?: Array<RedisRemovePreference$Outbound> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<RedisRemovePlatform$Outbound> | undefined;
};

/** @internal */
export const RedisRemovePlacementSwarm$outboundSchema: z.ZodType<
  RedisRemovePlacementSwarm$Outbound,
  z.ZodTypeDef,
  RedisRemovePlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  preferences: z.array(z.lazy(() => RedisRemovePreference$outboundSchema))
    .optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => RedisRemovePlatform$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    preferences: "Preferences",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemovePlacementSwarm$ {
  /** @deprecated use `RedisRemovePlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisRemovePlacementSwarm$inboundSchema;
  /** @deprecated use `RedisRemovePlacementSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisRemovePlacementSwarm$outboundSchema;
  /** @deprecated use `RedisRemovePlacementSwarm$Outbound` instead. */
  export type Outbound = RedisRemovePlacementSwarm$Outbound;
}

export function redisRemovePlacementSwarmToJSON(
  redisRemovePlacementSwarm: RedisRemovePlacementSwarm,
): string {
  return JSON.stringify(
    RedisRemovePlacementSwarm$outboundSchema.parse(redisRemovePlacementSwarm),
  );
}

export function redisRemovePlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisRemovePlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisRemovePlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisRemovePlacementSwarm' from JSON`,
  );
}

/** @internal */
export const RedisRemoveUpdateConfigSwarm$inboundSchema: z.ZodType<
  RedisRemoveUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type RedisRemoveUpdateConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const RedisRemoveUpdateConfigSwarm$outboundSchema: z.ZodType<
  RedisRemoveUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  RedisRemoveUpdateConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemoveUpdateConfigSwarm$ {
  /** @deprecated use `RedisRemoveUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisRemoveUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `RedisRemoveUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisRemoveUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `RedisRemoveUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = RedisRemoveUpdateConfigSwarm$Outbound;
}

export function redisRemoveUpdateConfigSwarmToJSON(
  redisRemoveUpdateConfigSwarm: RedisRemoveUpdateConfigSwarm,
): string {
  return JSON.stringify(
    RedisRemoveUpdateConfigSwarm$outboundSchema.parse(
      redisRemoveUpdateConfigSwarm,
    ),
  );
}

export function redisRemoveUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisRemoveUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisRemoveUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisRemoveUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const RedisRemoveRollbackConfigSwarm$inboundSchema: z.ZodType<
  RedisRemoveRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type RedisRemoveRollbackConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const RedisRemoveRollbackConfigSwarm$outboundSchema: z.ZodType<
  RedisRemoveRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  RedisRemoveRollbackConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemoveRollbackConfigSwarm$ {
  /** @deprecated use `RedisRemoveRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisRemoveRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `RedisRemoveRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisRemoveRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `RedisRemoveRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = RedisRemoveRollbackConfigSwarm$Outbound;
}

export function redisRemoveRollbackConfigSwarmToJSON(
  redisRemoveRollbackConfigSwarm: RedisRemoveRollbackConfigSwarm,
): string {
  return JSON.stringify(
    RedisRemoveRollbackConfigSwarm$outboundSchema.parse(
      redisRemoveRollbackConfigSwarm,
    ),
  );
}

export function redisRemoveRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisRemoveRollbackConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisRemoveRollbackConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisRemoveRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const RedisRemoveReplicated$inboundSchema: z.ZodType<
  RedisRemoveReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type RedisRemoveReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const RedisRemoveReplicated$outboundSchema: z.ZodType<
  RedisRemoveReplicated$Outbound,
  z.ZodTypeDef,
  RedisRemoveReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemoveReplicated$ {
  /** @deprecated use `RedisRemoveReplicated$inboundSchema` instead. */
  export const inboundSchema = RedisRemoveReplicated$inboundSchema;
  /** @deprecated use `RedisRemoveReplicated$outboundSchema` instead. */
  export const outboundSchema = RedisRemoveReplicated$outboundSchema;
  /** @deprecated use `RedisRemoveReplicated$Outbound` instead. */
  export type Outbound = RedisRemoveReplicated$Outbound;
}

export function redisRemoveReplicatedToJSON(
  redisRemoveReplicated: RedisRemoveReplicated,
): string {
  return JSON.stringify(
    RedisRemoveReplicated$outboundSchema.parse(redisRemoveReplicated),
  );
}

export function redisRemoveReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<RedisRemoveReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisRemoveReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisRemoveReplicated' from JSON`,
  );
}

/** @internal */
export const RedisRemoveGlobal$inboundSchema: z.ZodType<
  RedisRemoveGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RedisRemoveGlobal$Outbound = {};

/** @internal */
export const RedisRemoveGlobal$outboundSchema: z.ZodType<
  RedisRemoveGlobal$Outbound,
  z.ZodTypeDef,
  RedisRemoveGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemoveGlobal$ {
  /** @deprecated use `RedisRemoveGlobal$inboundSchema` instead. */
  export const inboundSchema = RedisRemoveGlobal$inboundSchema;
  /** @deprecated use `RedisRemoveGlobal$outboundSchema` instead. */
  export const outboundSchema = RedisRemoveGlobal$outboundSchema;
  /** @deprecated use `RedisRemoveGlobal$Outbound` instead. */
  export type Outbound = RedisRemoveGlobal$Outbound;
}

export function redisRemoveGlobalToJSON(
  redisRemoveGlobal: RedisRemoveGlobal,
): string {
  return JSON.stringify(
    RedisRemoveGlobal$outboundSchema.parse(redisRemoveGlobal),
  );
}

export function redisRemoveGlobalFromJSON(
  jsonString: string,
): SafeParseResult<RedisRemoveGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisRemoveGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisRemoveGlobal' from JSON`,
  );
}

/** @internal */
export const RedisRemoveReplicatedJob$inboundSchema: z.ZodType<
  RedisRemoveReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type RedisRemoveReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const RedisRemoveReplicatedJob$outboundSchema: z.ZodType<
  RedisRemoveReplicatedJob$Outbound,
  z.ZodTypeDef,
  RedisRemoveReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemoveReplicatedJob$ {
  /** @deprecated use `RedisRemoveReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = RedisRemoveReplicatedJob$inboundSchema;
  /** @deprecated use `RedisRemoveReplicatedJob$outboundSchema` instead. */
  export const outboundSchema = RedisRemoveReplicatedJob$outboundSchema;
  /** @deprecated use `RedisRemoveReplicatedJob$Outbound` instead. */
  export type Outbound = RedisRemoveReplicatedJob$Outbound;
}

export function redisRemoveReplicatedJobToJSON(
  redisRemoveReplicatedJob: RedisRemoveReplicatedJob,
): string {
  return JSON.stringify(
    RedisRemoveReplicatedJob$outboundSchema.parse(redisRemoveReplicatedJob),
  );
}

export function redisRemoveReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<RedisRemoveReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisRemoveReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisRemoveReplicatedJob' from JSON`,
  );
}

/** @internal */
export const RedisRemoveGlobalJob$inboundSchema: z.ZodType<
  RedisRemoveGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RedisRemoveGlobalJob$Outbound = {};

/** @internal */
export const RedisRemoveGlobalJob$outboundSchema: z.ZodType<
  RedisRemoveGlobalJob$Outbound,
  z.ZodTypeDef,
  RedisRemoveGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemoveGlobalJob$ {
  /** @deprecated use `RedisRemoveGlobalJob$inboundSchema` instead. */
  export const inboundSchema = RedisRemoveGlobalJob$inboundSchema;
  /** @deprecated use `RedisRemoveGlobalJob$outboundSchema` instead. */
  export const outboundSchema = RedisRemoveGlobalJob$outboundSchema;
  /** @deprecated use `RedisRemoveGlobalJob$Outbound` instead. */
  export type Outbound = RedisRemoveGlobalJob$Outbound;
}

export function redisRemoveGlobalJobToJSON(
  redisRemoveGlobalJob: RedisRemoveGlobalJob,
): string {
  return JSON.stringify(
    RedisRemoveGlobalJob$outboundSchema.parse(redisRemoveGlobalJob),
  );
}

export function redisRemoveGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<RedisRemoveGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisRemoveGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisRemoveGlobalJob' from JSON`,
  );
}

/** @internal */
export const RedisRemoveModeSwarm$inboundSchema: z.ZodType<
  RedisRemoveModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicated: z.lazy(() => RedisRemoveReplicated$inboundSchema).optional(),
  Global: z.lazy(() => RedisRemoveGlobal$inboundSchema).optional(),
  ReplicatedJob: z.lazy(() => RedisRemoveReplicatedJob$inboundSchema)
    .optional(),
  GlobalJob: z.lazy(() => RedisRemoveGlobalJob$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicated": "replicated",
    "Global": "global",
    "ReplicatedJob": "replicatedJob",
    "GlobalJob": "globalJob",
  });
});

/** @internal */
export type RedisRemoveModeSwarm$Outbound = {
  Replicated?: RedisRemoveReplicated$Outbound | undefined;
  Global?: RedisRemoveGlobal$Outbound | undefined;
  ReplicatedJob?: RedisRemoveReplicatedJob$Outbound | undefined;
  GlobalJob?: RedisRemoveGlobalJob$Outbound | undefined;
};

/** @internal */
export const RedisRemoveModeSwarm$outboundSchema: z.ZodType<
  RedisRemoveModeSwarm$Outbound,
  z.ZodTypeDef,
  RedisRemoveModeSwarm
> = z.object({
  replicated: z.lazy(() => RedisRemoveReplicated$outboundSchema).optional(),
  global: z.lazy(() => RedisRemoveGlobal$outboundSchema).optional(),
  replicatedJob: z.lazy(() => RedisRemoveReplicatedJob$outboundSchema)
    .optional(),
  globalJob: z.lazy(() => RedisRemoveGlobalJob$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    replicated: "Replicated",
    global: "Global",
    replicatedJob: "ReplicatedJob",
    globalJob: "GlobalJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemoveModeSwarm$ {
  /** @deprecated use `RedisRemoveModeSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisRemoveModeSwarm$inboundSchema;
  /** @deprecated use `RedisRemoveModeSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisRemoveModeSwarm$outboundSchema;
  /** @deprecated use `RedisRemoveModeSwarm$Outbound` instead. */
  export type Outbound = RedisRemoveModeSwarm$Outbound;
}

export function redisRemoveModeSwarmToJSON(
  redisRemoveModeSwarm: RedisRemoveModeSwarm,
): string {
  return JSON.stringify(
    RedisRemoveModeSwarm$outboundSchema.parse(redisRemoveModeSwarm),
  );
}

export function redisRemoveModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisRemoveModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisRemoveModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisRemoveModeSwarm' from JSON`,
  );
}

/** @internal */
export const RedisRemoveDriverOpts$inboundSchema: z.ZodType<
  RedisRemoveDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RedisRemoveDriverOpts$Outbound = {};

/** @internal */
export const RedisRemoveDriverOpts$outboundSchema: z.ZodType<
  RedisRemoveDriverOpts$Outbound,
  z.ZodTypeDef,
  RedisRemoveDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemoveDriverOpts$ {
  /** @deprecated use `RedisRemoveDriverOpts$inboundSchema` instead. */
  export const inboundSchema = RedisRemoveDriverOpts$inboundSchema;
  /** @deprecated use `RedisRemoveDriverOpts$outboundSchema` instead. */
  export const outboundSchema = RedisRemoveDriverOpts$outboundSchema;
  /** @deprecated use `RedisRemoveDriverOpts$Outbound` instead. */
  export type Outbound = RedisRemoveDriverOpts$Outbound;
}

export function redisRemoveDriverOptsToJSON(
  redisRemoveDriverOpts: RedisRemoveDriverOpts,
): string {
  return JSON.stringify(
    RedisRemoveDriverOpts$outboundSchema.parse(redisRemoveDriverOpts),
  );
}

export function redisRemoveDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<RedisRemoveDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisRemoveDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisRemoveDriverOpts' from JSON`,
  );
}

/** @internal */
export const RedisRemoveNetworkSwarm$inboundSchema: z.ZodType<
  RedisRemoveNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Target: z.string().optional(),
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => RedisRemoveDriverOpts$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Target": "target",
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
  });
});

/** @internal */
export type RedisRemoveNetworkSwarm$Outbound = {
  Target?: string | undefined;
  Aliases?: Array<string> | undefined;
  DriverOpts?: RedisRemoveDriverOpts$Outbound | undefined;
};

/** @internal */
export const RedisRemoveNetworkSwarm$outboundSchema: z.ZodType<
  RedisRemoveNetworkSwarm$Outbound,
  z.ZodTypeDef,
  RedisRemoveNetworkSwarm
> = z.object({
  target: z.string().optional(),
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => RedisRemoveDriverOpts$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    target: "Target",
    aliases: "Aliases",
    driverOpts: "DriverOpts",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemoveNetworkSwarm$ {
  /** @deprecated use `RedisRemoveNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisRemoveNetworkSwarm$inboundSchema;
  /** @deprecated use `RedisRemoveNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisRemoveNetworkSwarm$outboundSchema;
  /** @deprecated use `RedisRemoveNetworkSwarm$Outbound` instead. */
  export type Outbound = RedisRemoveNetworkSwarm$Outbound;
}

export function redisRemoveNetworkSwarmToJSON(
  redisRemoveNetworkSwarm: RedisRemoveNetworkSwarm,
): string {
  return JSON.stringify(
    RedisRemoveNetworkSwarm$outboundSchema.parse(redisRemoveNetworkSwarm),
  );
}

export function redisRemoveNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisRemoveNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisRemoveNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisRemoveNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const RedisRemoveProject$inboundSchema: z.ZodType<
  RedisRemoveProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  organizationId: z.string(),
  env: z.string(),
});

/** @internal */
export type RedisRemoveProject$Outbound = {
  projectId: string;
  name: string;
  description: string | null;
  createdAt: string;
  organizationId: string;
  env: string;
};

/** @internal */
export const RedisRemoveProject$outboundSchema: z.ZodType<
  RedisRemoveProject$Outbound,
  z.ZodTypeDef,
  RedisRemoveProject
> = z.object({
  projectId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  organizationId: z.string(),
  env: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemoveProject$ {
  /** @deprecated use `RedisRemoveProject$inboundSchema` instead. */
  export const inboundSchema = RedisRemoveProject$inboundSchema;
  /** @deprecated use `RedisRemoveProject$outboundSchema` instead. */
  export const outboundSchema = RedisRemoveProject$outboundSchema;
  /** @deprecated use `RedisRemoveProject$Outbound` instead. */
  export type Outbound = RedisRemoveProject$Outbound;
}

export function redisRemoveProjectToJSON(
  redisRemoveProject: RedisRemoveProject,
): string {
  return JSON.stringify(
    RedisRemoveProject$outboundSchema.parse(redisRemoveProject),
  );
}

export function redisRemoveProjectFromJSON(
  jsonString: string,
): SafeParseResult<RedisRemoveProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisRemoveProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisRemoveProject' from JSON`,
  );
}

/** @internal */
export const RedisRemoveEnvironment$inboundSchema: z.ZodType<
  RedisRemoveEnvironment,
  z.ZodTypeDef,
  unknown
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
  project: z.lazy(() => RedisRemoveProject$inboundSchema),
});

/** @internal */
export type RedisRemoveEnvironment$Outbound = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
  project: RedisRemoveProject$Outbound;
};

/** @internal */
export const RedisRemoveEnvironment$outboundSchema: z.ZodType<
  RedisRemoveEnvironment$Outbound,
  z.ZodTypeDef,
  RedisRemoveEnvironment
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
  project: z.lazy(() => RedisRemoveProject$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemoveEnvironment$ {
  /** @deprecated use `RedisRemoveEnvironment$inboundSchema` instead. */
  export const inboundSchema = RedisRemoveEnvironment$inboundSchema;
  /** @deprecated use `RedisRemoveEnvironment$outboundSchema` instead. */
  export const outboundSchema = RedisRemoveEnvironment$outboundSchema;
  /** @deprecated use `RedisRemoveEnvironment$Outbound` instead. */
  export type Outbound = RedisRemoveEnvironment$Outbound;
}

export function redisRemoveEnvironmentToJSON(
  redisRemoveEnvironment: RedisRemoveEnvironment,
): string {
  return JSON.stringify(
    RedisRemoveEnvironment$outboundSchema.parse(redisRemoveEnvironment),
  );
}

export function redisRemoveEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<RedisRemoveEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisRemoveEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisRemoveEnvironment' from JSON`,
  );
}

/** @internal */
export const RedisRemoveType$inboundSchema: z.ZodNativeEnum<
  typeof RedisRemoveType
> = z.nativeEnum(RedisRemoveType);

/** @internal */
export const RedisRemoveType$outboundSchema: z.ZodNativeEnum<
  typeof RedisRemoveType
> = RedisRemoveType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemoveType$ {
  /** @deprecated use `RedisRemoveType$inboundSchema` instead. */
  export const inboundSchema = RedisRemoveType$inboundSchema;
  /** @deprecated use `RedisRemoveType$outboundSchema` instead. */
  export const outboundSchema = RedisRemoveType$outboundSchema;
}

/** @internal */
export const RedisRemoveServiceType$inboundSchema: z.ZodNativeEnum<
  typeof RedisRemoveServiceType
> = z.nativeEnum(RedisRemoveServiceType);

/** @internal */
export const RedisRemoveServiceType$outboundSchema: z.ZodNativeEnum<
  typeof RedisRemoveServiceType
> = RedisRemoveServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemoveServiceType$ {
  /** @deprecated use `RedisRemoveServiceType$inboundSchema` instead. */
  export const inboundSchema = RedisRemoveServiceType$inboundSchema;
  /** @deprecated use `RedisRemoveServiceType$outboundSchema` instead. */
  export const outboundSchema = RedisRemoveServiceType$outboundSchema;
}

/** @internal */
export const RedisRemoveMount$inboundSchema: z.ZodType<
  RedisRemoveMount,
  z.ZodTypeDef,
  unknown
> = z.object({
  mountId: z.string(),
  type: RedisRemoveType$inboundSchema,
  hostPath: z.nullable(z.string()),
  volumeName: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  content: z.nullable(z.string()),
  serviceType: RedisRemoveServiceType$inboundSchema,
  mountPath: z.string(),
  applicationId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
});

/** @internal */
export type RedisRemoveMount$Outbound = {
  mountId: string;
  type: string;
  hostPath: string | null;
  volumeName: string | null;
  filePath: string | null;
  content: string | null;
  serviceType: string;
  mountPath: string;
  applicationId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mysqlId: string | null;
  redisId: string | null;
  composeId: string | null;
};

/** @internal */
export const RedisRemoveMount$outboundSchema: z.ZodType<
  RedisRemoveMount$Outbound,
  z.ZodTypeDef,
  RedisRemoveMount
> = z.object({
  mountId: z.string(),
  type: RedisRemoveType$outboundSchema,
  hostPath: z.nullable(z.string()),
  volumeName: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  content: z.nullable(z.string()),
  serviceType: RedisRemoveServiceType$outboundSchema,
  mountPath: z.string(),
  applicationId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemoveMount$ {
  /** @deprecated use `RedisRemoveMount$inboundSchema` instead. */
  export const inboundSchema = RedisRemoveMount$inboundSchema;
  /** @deprecated use `RedisRemoveMount$outboundSchema` instead. */
  export const outboundSchema = RedisRemoveMount$outboundSchema;
  /** @deprecated use `RedisRemoveMount$Outbound` instead. */
  export type Outbound = RedisRemoveMount$Outbound;
}

export function redisRemoveMountToJSON(
  redisRemoveMount: RedisRemoveMount,
): string {
  return JSON.stringify(
    RedisRemoveMount$outboundSchema.parse(redisRemoveMount),
  );
}

export function redisRemoveMountFromJSON(
  jsonString: string,
): SafeParseResult<RedisRemoveMount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisRemoveMount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisRemoveMount' from JSON`,
  );
}

/** @internal */
export const RedisRemoveServerStatus$inboundSchema: z.ZodNativeEnum<
  typeof RedisRemoveServerStatus
> = z.nativeEnum(RedisRemoveServerStatus);

/** @internal */
export const RedisRemoveServerStatus$outboundSchema: z.ZodNativeEnum<
  typeof RedisRemoveServerStatus
> = RedisRemoveServerStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemoveServerStatus$ {
  /** @deprecated use `RedisRemoveServerStatus$inboundSchema` instead. */
  export const inboundSchema = RedisRemoveServerStatus$inboundSchema;
  /** @deprecated use `RedisRemoveServerStatus$outboundSchema` instead. */
  export const outboundSchema = RedisRemoveServerStatus$outboundSchema;
}

/** @internal */
export const RedisRemoveMetricsConfigEnum$inboundSchema: z.ZodNativeEnum<
  typeof RedisRemoveMetricsConfigEnum
> = z.nativeEnum(RedisRemoveMetricsConfigEnum);

/** @internal */
export const RedisRemoveMetricsConfigEnum$outboundSchema: z.ZodNativeEnum<
  typeof RedisRemoveMetricsConfigEnum
> = RedisRemoveMetricsConfigEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemoveMetricsConfigEnum$ {
  /** @deprecated use `RedisRemoveMetricsConfigEnum$inboundSchema` instead. */
  export const inboundSchema = RedisRemoveMetricsConfigEnum$inboundSchema;
  /** @deprecated use `RedisRemoveMetricsConfigEnum$outboundSchema` instead. */
  export const outboundSchema = RedisRemoveMetricsConfigEnum$outboundSchema;
}

/** @internal */
export const RedisRemoveMetricsConfigUnion1$inboundSchema: z.ZodType<
  RedisRemoveMetricsConfigUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  RedisRemoveMetricsConfigEnum$inboundSchema,
]);

/** @internal */
export type RedisRemoveMetricsConfigUnion1$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const RedisRemoveMetricsConfigUnion1$outboundSchema: z.ZodType<
  RedisRemoveMetricsConfigUnion1$Outbound,
  z.ZodTypeDef,
  RedisRemoveMetricsConfigUnion1
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  RedisRemoveMetricsConfigEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemoveMetricsConfigUnion1$ {
  /** @deprecated use `RedisRemoveMetricsConfigUnion1$inboundSchema` instead. */
  export const inboundSchema = RedisRemoveMetricsConfigUnion1$inboundSchema;
  /** @deprecated use `RedisRemoveMetricsConfigUnion1$outboundSchema` instead. */
  export const outboundSchema = RedisRemoveMetricsConfigUnion1$outboundSchema;
  /** @deprecated use `RedisRemoveMetricsConfigUnion1$Outbound` instead. */
  export type Outbound = RedisRemoveMetricsConfigUnion1$Outbound;
}

export function redisRemoveMetricsConfigUnion1ToJSON(
  redisRemoveMetricsConfigUnion1: RedisRemoveMetricsConfigUnion1,
): string {
  return JSON.stringify(
    RedisRemoveMetricsConfigUnion1$outboundSchema.parse(
      redisRemoveMetricsConfigUnion1,
    ),
  );
}

export function redisRemoveMetricsConfigUnion1FromJSON(
  jsonString: string,
): SafeParseResult<RedisRemoveMetricsConfigUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisRemoveMetricsConfigUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisRemoveMetricsConfigUnion1' from JSON`,
  );
}

/** @internal */
export const RedisRemoveMetricsConfigUnion2$inboundSchema: z.ZodType<
  RedisRemoveMetricsConfigUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    RedisRemoveMetricsConfigEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type RedisRemoveMetricsConfigUnion2$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const RedisRemoveMetricsConfigUnion2$outboundSchema: z.ZodType<
  RedisRemoveMetricsConfigUnion2$Outbound,
  z.ZodTypeDef,
  RedisRemoveMetricsConfigUnion2
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    RedisRemoveMetricsConfigEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemoveMetricsConfigUnion2$ {
  /** @deprecated use `RedisRemoveMetricsConfigUnion2$inboundSchema` instead. */
  export const inboundSchema = RedisRemoveMetricsConfigUnion2$inboundSchema;
  /** @deprecated use `RedisRemoveMetricsConfigUnion2$outboundSchema` instead. */
  export const outboundSchema = RedisRemoveMetricsConfigUnion2$outboundSchema;
  /** @deprecated use `RedisRemoveMetricsConfigUnion2$Outbound` instead. */
  export type Outbound = RedisRemoveMetricsConfigUnion2$Outbound;
}

export function redisRemoveMetricsConfigUnion2ToJSON(
  redisRemoveMetricsConfigUnion2: RedisRemoveMetricsConfigUnion2,
): string {
  return JSON.stringify(
    RedisRemoveMetricsConfigUnion2$outboundSchema.parse(
      redisRemoveMetricsConfigUnion2,
    ),
  );
}

export function redisRemoveMetricsConfigUnion2FromJSON(
  jsonString: string,
): SafeParseResult<RedisRemoveMetricsConfigUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisRemoveMetricsConfigUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisRemoveMetricsConfigUnion2' from JSON`,
  );
}

/** @internal */
export const RedisRemoveServer$inboundSchema: z.ZodType<
  RedisRemoveServer,
  z.ZodTypeDef,
  unknown
> = z.object({
  serverId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  ipAddress: z.string(),
  port: z.number(),
  username: z.string(),
  appName: z.string(),
  enableDockerCleanup: z.boolean(),
  createdAt: z.string(),
  organizationId: z.string(),
  serverStatus: RedisRemoveServerStatus$inboundSchema,
  command: z.string(),
  sshKeyId: z.nullable(z.string()),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      RedisRemoveMetricsConfigEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
});

/** @internal */
export type RedisRemoveServer$Outbound = {
  serverId: string;
  name: string;
  description: string | null;
  ipAddress: string;
  port: number;
  username: string;
  appName: string;
  enableDockerCleanup: boolean;
  createdAt: string;
  organizationId: string;
  serverStatus: string;
  command: string;
  sshKeyId: string | null;
  metricsConfig: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  };
};

/** @internal */
export const RedisRemoveServer$outboundSchema: z.ZodType<
  RedisRemoveServer$Outbound,
  z.ZodTypeDef,
  RedisRemoveServer
> = z.object({
  serverId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  ipAddress: z.string(),
  port: z.number(),
  username: z.string(),
  appName: z.string(),
  enableDockerCleanup: z.boolean(),
  createdAt: z.string(),
  organizationId: z.string(),
  serverStatus: RedisRemoveServerStatus$outboundSchema,
  command: z.string(),
  sshKeyId: z.nullable(z.string()),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      RedisRemoveMetricsConfigEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemoveServer$ {
  /** @deprecated use `RedisRemoveServer$inboundSchema` instead. */
  export const inboundSchema = RedisRemoveServer$inboundSchema;
  /** @deprecated use `RedisRemoveServer$outboundSchema` instead. */
  export const outboundSchema = RedisRemoveServer$outboundSchema;
  /** @deprecated use `RedisRemoveServer$Outbound` instead. */
  export type Outbound = RedisRemoveServer$Outbound;
}

export function redisRemoveServerToJSON(
  redisRemoveServer: RedisRemoveServer,
): string {
  return JSON.stringify(
    RedisRemoveServer$outboundSchema.parse(redisRemoveServer),
  );
}

export function redisRemoveServerFromJSON(
  jsonString: string,
): SafeParseResult<RedisRemoveServer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisRemoveServer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisRemoveServer' from JSON`,
  );
}

/** @internal */
export const RedisRemoveResponseBody$inboundSchema: z.ZodType<
  RedisRemoveResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  redisId: z.string(),
  name: z.string(),
  appName: z.string(),
  description: z.nullable(z.string()),
  databasePassword: z.string(),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  createdAt: z.string(),
  applicationStatus: RedisRemoveApplicationStatus$inboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => RedisRemoveHealthCheckSwarm$inboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => RedisRemoveRestartPolicySwarm$inboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => RedisRemovePlacementSwarm$inboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => RedisRemoveUpdateConfigSwarm$inboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => RedisRemoveRollbackConfigSwarm$inboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => RedisRemoveModeSwarm$inboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => RedisRemoveNetworkSwarm$inboundSchema)),
  ),
  replicas: z.number(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
  environment: z.lazy(() => RedisRemoveEnvironment$inboundSchema),
  mounts: z.array(z.lazy(() => RedisRemoveMount$inboundSchema)),
  server: z.nullable(z.lazy(() => RedisRemoveServer$inboundSchema)),
});

/** @internal */
export type RedisRemoveResponseBody$Outbound = {
  redisId: string;
  name: string;
  appName: string;
  description: string | null;
  databasePassword: string;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  externalPort: number | null;
  createdAt: string;
  applicationStatus: string;
  healthCheckSwarm: RedisRemoveHealthCheckSwarm$Outbound | null;
  restartPolicySwarm: RedisRemoveRestartPolicySwarm$Outbound | null;
  placementSwarm: RedisRemovePlacementSwarm$Outbound | null;
  updateConfigSwarm: RedisRemoveUpdateConfigSwarm$Outbound | null;
  rollbackConfigSwarm: RedisRemoveRollbackConfigSwarm$Outbound | null;
  modeSwarm: RedisRemoveModeSwarm$Outbound | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<RedisRemoveNetworkSwarm$Outbound> | null;
  replicas: number;
  environmentId: string;
  serverId: string | null;
  environment: RedisRemoveEnvironment$Outbound;
  mounts: Array<RedisRemoveMount$Outbound>;
  server: RedisRemoveServer$Outbound | null;
};

/** @internal */
export const RedisRemoveResponseBody$outboundSchema: z.ZodType<
  RedisRemoveResponseBody$Outbound,
  z.ZodTypeDef,
  RedisRemoveResponseBody
> = z.object({
  redisId: z.string(),
  name: z.string(),
  appName: z.string(),
  description: z.nullable(z.string()),
  databasePassword: z.string(),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  createdAt: z.string(),
  applicationStatus: RedisRemoveApplicationStatus$outboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => RedisRemoveHealthCheckSwarm$outboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => RedisRemoveRestartPolicySwarm$outboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => RedisRemovePlacementSwarm$outboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => RedisRemoveUpdateConfigSwarm$outboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => RedisRemoveRollbackConfigSwarm$outboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => RedisRemoveModeSwarm$outboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => RedisRemoveNetworkSwarm$outboundSchema)),
  ),
  replicas: z.number(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
  environment: z.lazy(() => RedisRemoveEnvironment$outboundSchema),
  mounts: z.array(z.lazy(() => RedisRemoveMount$outboundSchema)),
  server: z.nullable(z.lazy(() => RedisRemoveServer$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemoveResponseBody$ {
  /** @deprecated use `RedisRemoveResponseBody$inboundSchema` instead. */
  export const inboundSchema = RedisRemoveResponseBody$inboundSchema;
  /** @deprecated use `RedisRemoveResponseBody$outboundSchema` instead. */
  export const outboundSchema = RedisRemoveResponseBody$outboundSchema;
  /** @deprecated use `RedisRemoveResponseBody$Outbound` instead. */
  export type Outbound = RedisRemoveResponseBody$Outbound;
}

export function redisRemoveResponseBodyToJSON(
  redisRemoveResponseBody: RedisRemoveResponseBody,
): string {
  return JSON.stringify(
    RedisRemoveResponseBody$outboundSchema.parse(redisRemoveResponseBody),
  );
}

export function redisRemoveResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RedisRemoveResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisRemoveResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisRemoveResponseBody' from JSON`,
  );
}

/** @internal */
export const RedisRemoveResponse$inboundSchema: z.ZodType<
  RedisRemoveResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => RedisRemoveResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type RedisRemoveResponse$Outbound =
  | RedisRemoveResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const RedisRemoveResponse$outboundSchema: z.ZodType<
  RedisRemoveResponse$Outbound,
  z.ZodTypeDef,
  RedisRemoveResponse
> = z.union([
  z.lazy(() => RedisRemoveResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRemoveResponse$ {
  /** @deprecated use `RedisRemoveResponse$inboundSchema` instead. */
  export const inboundSchema = RedisRemoveResponse$inboundSchema;
  /** @deprecated use `RedisRemoveResponse$outboundSchema` instead. */
  export const outboundSchema = RedisRemoveResponse$outboundSchema;
  /** @deprecated use `RedisRemoveResponse$Outbound` instead. */
  export type Outbound = RedisRemoveResponse$Outbound;
}

export function redisRemoveResponseToJSON(
  redisRemoveResponse: RedisRemoveResponse,
): string {
  return JSON.stringify(
    RedisRemoveResponse$outboundSchema.parse(redisRemoveResponse),
  );
}

export function redisRemoveResponseFromJSON(
  jsonString: string,
): SafeParseResult<RedisRemoveResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisRemoveResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisRemoveResponse' from JSON`,
  );
}
