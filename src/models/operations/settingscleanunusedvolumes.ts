/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SettingsCleanUnusedVolumesSecurity = {
  authorization: string;
};

export type SettingsCleanUnusedVolumesRequest = {
  serverId?: string | undefined;
};

/** @internal */
export const SettingsCleanUnusedVolumesSecurity$inboundSchema: z.ZodType<
  SettingsCleanUnusedVolumesSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type SettingsCleanUnusedVolumesSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const SettingsCleanUnusedVolumesSecurity$outboundSchema: z.ZodType<
  SettingsCleanUnusedVolumesSecurity$Outbound,
  z.ZodTypeDef,
  SettingsCleanUnusedVolumesSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SettingsCleanUnusedVolumesSecurity$ {
  /** @deprecated use `SettingsCleanUnusedVolumesSecurity$inboundSchema` instead. */
  export const inboundSchema = SettingsCleanUnusedVolumesSecurity$inboundSchema;
  /** @deprecated use `SettingsCleanUnusedVolumesSecurity$outboundSchema` instead. */
  export const outboundSchema =
    SettingsCleanUnusedVolumesSecurity$outboundSchema;
  /** @deprecated use `SettingsCleanUnusedVolumesSecurity$Outbound` instead. */
  export type Outbound = SettingsCleanUnusedVolumesSecurity$Outbound;
}

export function settingsCleanUnusedVolumesSecurityToJSON(
  settingsCleanUnusedVolumesSecurity: SettingsCleanUnusedVolumesSecurity,
): string {
  return JSON.stringify(
    SettingsCleanUnusedVolumesSecurity$outboundSchema.parse(
      settingsCleanUnusedVolumesSecurity,
    ),
  );
}

export function settingsCleanUnusedVolumesSecurityFromJSON(
  jsonString: string,
): SafeParseResult<SettingsCleanUnusedVolumesSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SettingsCleanUnusedVolumesSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SettingsCleanUnusedVolumesSecurity' from JSON`,
  );
}

/** @internal */
export const SettingsCleanUnusedVolumesRequest$inboundSchema: z.ZodType<
  SettingsCleanUnusedVolumesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serverId: z.string().optional(),
});

/** @internal */
export type SettingsCleanUnusedVolumesRequest$Outbound = {
  serverId?: string | undefined;
};

/** @internal */
export const SettingsCleanUnusedVolumesRequest$outboundSchema: z.ZodType<
  SettingsCleanUnusedVolumesRequest$Outbound,
  z.ZodTypeDef,
  SettingsCleanUnusedVolumesRequest
> = z.object({
  serverId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SettingsCleanUnusedVolumesRequest$ {
  /** @deprecated use `SettingsCleanUnusedVolumesRequest$inboundSchema` instead. */
  export const inboundSchema = SettingsCleanUnusedVolumesRequest$inboundSchema;
  /** @deprecated use `SettingsCleanUnusedVolumesRequest$outboundSchema` instead. */
  export const outboundSchema =
    SettingsCleanUnusedVolumesRequest$outboundSchema;
  /** @deprecated use `SettingsCleanUnusedVolumesRequest$Outbound` instead. */
  export type Outbound = SettingsCleanUnusedVolumesRequest$Outbound;
}

export function settingsCleanUnusedVolumesRequestToJSON(
  settingsCleanUnusedVolumesRequest: SettingsCleanUnusedVolumesRequest,
): string {
  return JSON.stringify(
    SettingsCleanUnusedVolumesRequest$outboundSchema.parse(
      settingsCleanUnusedVolumesRequest,
    ),
  );
}

export function settingsCleanUnusedVolumesRequestFromJSON(
  jsonString: string,
): SafeParseResult<SettingsCleanUnusedVolumesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SettingsCleanUnusedVolumesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SettingsCleanUnusedVolumesRequest' from JSON`,
  );
}
