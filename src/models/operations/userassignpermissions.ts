/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UserAssignPermissionsSecurity = {
  authorization: string;
};

export type UserAssignPermissionsRequest = {
  id: string;
  accessedProjects: Array<string>;
  accessedEnvironments: Array<string>;
  accessedServices: Array<string>;
  canCreateProjects: boolean;
  canCreateServices: boolean;
  canDeleteProjects: boolean;
  canDeleteServices: boolean;
  canAccessToDocker: boolean;
  canAccessToTraefikFiles: boolean;
  canAccessToAPI: boolean;
  canAccessToSSHKeys: boolean;
  canAccessToGitProviders: boolean;
};

/** @internal */
export const UserAssignPermissionsSecurity$inboundSchema: z.ZodType<
  UserAssignPermissionsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type UserAssignPermissionsSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const UserAssignPermissionsSecurity$outboundSchema: z.ZodType<
  UserAssignPermissionsSecurity$Outbound,
  z.ZodTypeDef,
  UserAssignPermissionsSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserAssignPermissionsSecurity$ {
  /** @deprecated use `UserAssignPermissionsSecurity$inboundSchema` instead. */
  export const inboundSchema = UserAssignPermissionsSecurity$inboundSchema;
  /** @deprecated use `UserAssignPermissionsSecurity$outboundSchema` instead. */
  export const outboundSchema = UserAssignPermissionsSecurity$outboundSchema;
  /** @deprecated use `UserAssignPermissionsSecurity$Outbound` instead. */
  export type Outbound = UserAssignPermissionsSecurity$Outbound;
}

export function userAssignPermissionsSecurityToJSON(
  userAssignPermissionsSecurity: UserAssignPermissionsSecurity,
): string {
  return JSON.stringify(
    UserAssignPermissionsSecurity$outboundSchema.parse(
      userAssignPermissionsSecurity,
    ),
  );
}

export function userAssignPermissionsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UserAssignPermissionsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserAssignPermissionsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserAssignPermissionsSecurity' from JSON`,
  );
}

/** @internal */
export const UserAssignPermissionsRequest$inboundSchema: z.ZodType<
  UserAssignPermissionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  accessedProjects: z.array(z.string()),
  accessedEnvironments: z.array(z.string()),
  accessedServices: z.array(z.string()),
  canCreateProjects: z.boolean(),
  canCreateServices: z.boolean(),
  canDeleteProjects: z.boolean(),
  canDeleteServices: z.boolean(),
  canAccessToDocker: z.boolean(),
  canAccessToTraefikFiles: z.boolean(),
  canAccessToAPI: z.boolean(),
  canAccessToSSHKeys: z.boolean(),
  canAccessToGitProviders: z.boolean(),
});

/** @internal */
export type UserAssignPermissionsRequest$Outbound = {
  id: string;
  accessedProjects: Array<string>;
  accessedEnvironments: Array<string>;
  accessedServices: Array<string>;
  canCreateProjects: boolean;
  canCreateServices: boolean;
  canDeleteProjects: boolean;
  canDeleteServices: boolean;
  canAccessToDocker: boolean;
  canAccessToTraefikFiles: boolean;
  canAccessToAPI: boolean;
  canAccessToSSHKeys: boolean;
  canAccessToGitProviders: boolean;
};

/** @internal */
export const UserAssignPermissionsRequest$outboundSchema: z.ZodType<
  UserAssignPermissionsRequest$Outbound,
  z.ZodTypeDef,
  UserAssignPermissionsRequest
> = z.object({
  id: z.string(),
  accessedProjects: z.array(z.string()),
  accessedEnvironments: z.array(z.string()),
  accessedServices: z.array(z.string()),
  canCreateProjects: z.boolean(),
  canCreateServices: z.boolean(),
  canDeleteProjects: z.boolean(),
  canDeleteServices: z.boolean(),
  canAccessToDocker: z.boolean(),
  canAccessToTraefikFiles: z.boolean(),
  canAccessToAPI: z.boolean(),
  canAccessToSSHKeys: z.boolean(),
  canAccessToGitProviders: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserAssignPermissionsRequest$ {
  /** @deprecated use `UserAssignPermissionsRequest$inboundSchema` instead. */
  export const inboundSchema = UserAssignPermissionsRequest$inboundSchema;
  /** @deprecated use `UserAssignPermissionsRequest$outboundSchema` instead. */
  export const outboundSchema = UserAssignPermissionsRequest$outboundSchema;
  /** @deprecated use `UserAssignPermissionsRequest$Outbound` instead. */
  export type Outbound = UserAssignPermissionsRequest$Outbound;
}

export function userAssignPermissionsRequestToJSON(
  userAssignPermissionsRequest: UserAssignPermissionsRequest,
): string {
  return JSON.stringify(
    UserAssignPermissionsRequest$outboundSchema.parse(
      userAssignPermissionsRequest,
    ),
  );
}

export function userAssignPermissionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UserAssignPermissionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserAssignPermissionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserAssignPermissionsRequest' from JSON`,
  );
}
