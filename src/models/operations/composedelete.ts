/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComposeDeleteRequest = {
  composeId: string;
  deleteVolumes: boolean;
};

/** @internal */
export const ComposeDeleteRequest$inboundSchema: z.ZodType<
  ComposeDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  composeId: z.string(),
  deleteVolumes: z.boolean(),
});

/** @internal */
export type ComposeDeleteRequest$Outbound = {
  composeId: string;
  deleteVolumes: boolean;
};

/** @internal */
export const ComposeDeleteRequest$outboundSchema: z.ZodType<
  ComposeDeleteRequest$Outbound,
  z.ZodTypeDef,
  ComposeDeleteRequest
> = z.object({
  composeId: z.string(),
  deleteVolumes: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComposeDeleteRequest$ {
  /** @deprecated use `ComposeDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = ComposeDeleteRequest$inboundSchema;
  /** @deprecated use `ComposeDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = ComposeDeleteRequest$outboundSchema;
  /** @deprecated use `ComposeDeleteRequest$Outbound` instead. */
  export type Outbound = ComposeDeleteRequest$Outbound;
}

export function composeDeleteRequestToJSON(
  composeDeleteRequest: ComposeDeleteRequest,
): string {
  return JSON.stringify(
    ComposeDeleteRequest$outboundSchema.parse(composeDeleteRequest),
  );
}

export function composeDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<ComposeDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComposeDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComposeDeleteRequest' from JSON`,
  );
}
