/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CertificatesCreateRequest = {
  autoRenew?: boolean | null | undefined;
  certificateData: string;
  certificateId?: string | undefined;
  certificatePath?: string | undefined;
  name: string;
  organizationId: string;
  privateKey: string;
  serverId?: string | null | undefined;
};

/**
 * Successful response
 */
export type CertificatesCreateResponseBody = {
  autoRenew: boolean | null;
  certificateData: string;
  certificateId: string;
  certificatePath: string;
  name: string;
  organizationId: string;
  privateKey: string;
  serverId: string | null;
};

export type CertificatesCreateResponse =
  | CertificatesCreateResponseBody
  | models.ErrorT;

/** @internal */
export const CertificatesCreateRequest$inboundSchema: z.ZodType<
  CertificatesCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  autoRenew: z.nullable(z.boolean()).optional(),
  certificateData: z.string(),
  certificateId: z.string().optional(),
  certificatePath: z.string().optional(),
  name: z.string(),
  organizationId: z.string(),
  privateKey: z.string(),
  serverId: z.nullable(z.string()).optional(),
});

/** @internal */
export type CertificatesCreateRequest$Outbound = {
  autoRenew?: boolean | null | undefined;
  certificateData: string;
  certificateId?: string | undefined;
  certificatePath?: string | undefined;
  name: string;
  organizationId: string;
  privateKey: string;
  serverId?: string | null | undefined;
};

/** @internal */
export const CertificatesCreateRequest$outboundSchema: z.ZodType<
  CertificatesCreateRequest$Outbound,
  z.ZodTypeDef,
  CertificatesCreateRequest
> = z.object({
  autoRenew: z.nullable(z.boolean()).optional(),
  certificateData: z.string(),
  certificateId: z.string().optional(),
  certificatePath: z.string().optional(),
  name: z.string(),
  organizationId: z.string(),
  privateKey: z.string(),
  serverId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CertificatesCreateRequest$ {
  /** @deprecated use `CertificatesCreateRequest$inboundSchema` instead. */
  export const inboundSchema = CertificatesCreateRequest$inboundSchema;
  /** @deprecated use `CertificatesCreateRequest$outboundSchema` instead. */
  export const outboundSchema = CertificatesCreateRequest$outboundSchema;
  /** @deprecated use `CertificatesCreateRequest$Outbound` instead. */
  export type Outbound = CertificatesCreateRequest$Outbound;
}

export function certificatesCreateRequestToJSON(
  certificatesCreateRequest: CertificatesCreateRequest,
): string {
  return JSON.stringify(
    CertificatesCreateRequest$outboundSchema.parse(certificatesCreateRequest),
  );
}

export function certificatesCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<CertificatesCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CertificatesCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CertificatesCreateRequest' from JSON`,
  );
}

/** @internal */
export const CertificatesCreateResponseBody$inboundSchema: z.ZodType<
  CertificatesCreateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  autoRenew: z.nullable(z.boolean()),
  certificateData: z.string(),
  certificateId: z.string(),
  certificatePath: z.string(),
  name: z.string(),
  organizationId: z.string(),
  privateKey: z.string(),
  serverId: z.nullable(z.string()),
});

/** @internal */
export type CertificatesCreateResponseBody$Outbound = {
  autoRenew: boolean | null;
  certificateData: string;
  certificateId: string;
  certificatePath: string;
  name: string;
  organizationId: string;
  privateKey: string;
  serverId: string | null;
};

/** @internal */
export const CertificatesCreateResponseBody$outboundSchema: z.ZodType<
  CertificatesCreateResponseBody$Outbound,
  z.ZodTypeDef,
  CertificatesCreateResponseBody
> = z.object({
  autoRenew: z.nullable(z.boolean()),
  certificateData: z.string(),
  certificateId: z.string(),
  certificatePath: z.string(),
  name: z.string(),
  organizationId: z.string(),
  privateKey: z.string(),
  serverId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CertificatesCreateResponseBody$ {
  /** @deprecated use `CertificatesCreateResponseBody$inboundSchema` instead. */
  export const inboundSchema = CertificatesCreateResponseBody$inboundSchema;
  /** @deprecated use `CertificatesCreateResponseBody$outboundSchema` instead. */
  export const outboundSchema = CertificatesCreateResponseBody$outboundSchema;
  /** @deprecated use `CertificatesCreateResponseBody$Outbound` instead. */
  export type Outbound = CertificatesCreateResponseBody$Outbound;
}

export function certificatesCreateResponseBodyToJSON(
  certificatesCreateResponseBody: CertificatesCreateResponseBody,
): string {
  return JSON.stringify(
    CertificatesCreateResponseBody$outboundSchema.parse(
      certificatesCreateResponseBody,
    ),
  );
}

export function certificatesCreateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CertificatesCreateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CertificatesCreateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CertificatesCreateResponseBody' from JSON`,
  );
}

/** @internal */
export const CertificatesCreateResponse$inboundSchema: z.ZodType<
  CertificatesCreateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CertificatesCreateResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type CertificatesCreateResponse$Outbound =
  | CertificatesCreateResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const CertificatesCreateResponse$outboundSchema: z.ZodType<
  CertificatesCreateResponse$Outbound,
  z.ZodTypeDef,
  CertificatesCreateResponse
> = z.union([
  z.lazy(() => CertificatesCreateResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CertificatesCreateResponse$ {
  /** @deprecated use `CertificatesCreateResponse$inboundSchema` instead. */
  export const inboundSchema = CertificatesCreateResponse$inboundSchema;
  /** @deprecated use `CertificatesCreateResponse$outboundSchema` instead. */
  export const outboundSchema = CertificatesCreateResponse$outboundSchema;
  /** @deprecated use `CertificatesCreateResponse$Outbound` instead. */
  export type Outbound = CertificatesCreateResponse$Outbound;
}

export function certificatesCreateResponseToJSON(
  certificatesCreateResponse: CertificatesCreateResponse,
): string {
  return JSON.stringify(
    CertificatesCreateResponse$outboundSchema.parse(certificatesCreateResponse),
  );
}

export function certificatesCreateResponseFromJSON(
  jsonString: string,
): SafeParseResult<CertificatesCreateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CertificatesCreateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CertificatesCreateResponse' from JSON`,
  );
}
