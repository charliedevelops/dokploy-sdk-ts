/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NotificationTestSlackConnectionRequest = {
  channel: string;
  webhookUrl: string;
};

/** @internal */
export const NotificationTestSlackConnectionRequest$inboundSchema: z.ZodType<
  NotificationTestSlackConnectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  channel: z.string(),
  webhookUrl: z.string(),
});

/** @internal */
export type NotificationTestSlackConnectionRequest$Outbound = {
  channel: string;
  webhookUrl: string;
};

/** @internal */
export const NotificationTestSlackConnectionRequest$outboundSchema: z.ZodType<
  NotificationTestSlackConnectionRequest$Outbound,
  z.ZodTypeDef,
  NotificationTestSlackConnectionRequest
> = z.object({
  channel: z.string(),
  webhookUrl: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationTestSlackConnectionRequest$ {
  /** @deprecated use `NotificationTestSlackConnectionRequest$inboundSchema` instead. */
  export const inboundSchema =
    NotificationTestSlackConnectionRequest$inboundSchema;
  /** @deprecated use `NotificationTestSlackConnectionRequest$outboundSchema` instead. */
  export const outboundSchema =
    NotificationTestSlackConnectionRequest$outboundSchema;
  /** @deprecated use `NotificationTestSlackConnectionRequest$Outbound` instead. */
  export type Outbound = NotificationTestSlackConnectionRequest$Outbound;
}

export function notificationTestSlackConnectionRequestToJSON(
  notificationTestSlackConnectionRequest:
    NotificationTestSlackConnectionRequest,
): string {
  return JSON.stringify(
    NotificationTestSlackConnectionRequest$outboundSchema.parse(
      notificationTestSlackConnectionRequest,
    ),
  );
}

export function notificationTestSlackConnectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<NotificationTestSlackConnectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      NotificationTestSlackConnectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationTestSlackConnectionRequest' from JSON`,
  );
}
