/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ApplicationRedeployRequest = {
  applicationId: string;
  description?: string | undefined;
  title?: string | undefined;
};

/** @internal */
export const ApplicationRedeployRequest$inboundSchema: z.ZodType<
  ApplicationRedeployRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string(),
  description: z.string().optional(),
  title: z.string().optional(),
});

/** @internal */
export type ApplicationRedeployRequest$Outbound = {
  applicationId: string;
  description?: string | undefined;
  title?: string | undefined;
};

/** @internal */
export const ApplicationRedeployRequest$outboundSchema: z.ZodType<
  ApplicationRedeployRequest$Outbound,
  z.ZodTypeDef,
  ApplicationRedeployRequest
> = z.object({
  applicationId: z.string(),
  description: z.string().optional(),
  title: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationRedeployRequest$ {
  /** @deprecated use `ApplicationRedeployRequest$inboundSchema` instead. */
  export const inboundSchema = ApplicationRedeployRequest$inboundSchema;
  /** @deprecated use `ApplicationRedeployRequest$outboundSchema` instead. */
  export const outboundSchema = ApplicationRedeployRequest$outboundSchema;
  /** @deprecated use `ApplicationRedeployRequest$Outbound` instead. */
  export type Outbound = ApplicationRedeployRequest$Outbound;
}

export function applicationRedeployRequestToJSON(
  applicationRedeployRequest: ApplicationRedeployRequest,
): string {
  return JSON.stringify(
    ApplicationRedeployRequest$outboundSchema.parse(applicationRedeployRequest),
  );
}

export function applicationRedeployRequestFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationRedeployRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationRedeployRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationRedeployRequest' from JSON`,
  );
}
