/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type OrganizationOneSecurity = {
  authorization: string;
};

export type OrganizationOneRequest = {
  organizationId: string;
};

/**
 * Successful response
 */
export type OrganizationOneResponseBody = {
  id: string;
  name: string;
  slug: string | null;
  logo: string | null;
  createdAt: Date;
  metadata: string | null;
  ownerId: string;
};

export type OrganizationOneResponse =
  | OrganizationOneResponseBody
  | models.ErrorT;

/** @internal */
export const OrganizationOneSecurity$inboundSchema: z.ZodType<
  OrganizationOneSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type OrganizationOneSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const OrganizationOneSecurity$outboundSchema: z.ZodType<
  OrganizationOneSecurity$Outbound,
  z.ZodTypeDef,
  OrganizationOneSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationOneSecurity$ {
  /** @deprecated use `OrganizationOneSecurity$inboundSchema` instead. */
  export const inboundSchema = OrganizationOneSecurity$inboundSchema;
  /** @deprecated use `OrganizationOneSecurity$outboundSchema` instead. */
  export const outboundSchema = OrganizationOneSecurity$outboundSchema;
  /** @deprecated use `OrganizationOneSecurity$Outbound` instead. */
  export type Outbound = OrganizationOneSecurity$Outbound;
}

export function organizationOneSecurityToJSON(
  organizationOneSecurity: OrganizationOneSecurity,
): string {
  return JSON.stringify(
    OrganizationOneSecurity$outboundSchema.parse(organizationOneSecurity),
  );
}

export function organizationOneSecurityFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationOneSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationOneSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationOneSecurity' from JSON`,
  );
}

/** @internal */
export const OrganizationOneRequest$inboundSchema: z.ZodType<
  OrganizationOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organizationId: z.string(),
});

/** @internal */
export type OrganizationOneRequest$Outbound = {
  organizationId: string;
};

/** @internal */
export const OrganizationOneRequest$outboundSchema: z.ZodType<
  OrganizationOneRequest$Outbound,
  z.ZodTypeDef,
  OrganizationOneRequest
> = z.object({
  organizationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationOneRequest$ {
  /** @deprecated use `OrganizationOneRequest$inboundSchema` instead. */
  export const inboundSchema = OrganizationOneRequest$inboundSchema;
  /** @deprecated use `OrganizationOneRequest$outboundSchema` instead. */
  export const outboundSchema = OrganizationOneRequest$outboundSchema;
  /** @deprecated use `OrganizationOneRequest$Outbound` instead. */
  export type Outbound = OrganizationOneRequest$Outbound;
}

export function organizationOneRequestToJSON(
  organizationOneRequest: OrganizationOneRequest,
): string {
  return JSON.stringify(
    OrganizationOneRequest$outboundSchema.parse(organizationOneRequest),
  );
}

export function organizationOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationOneRequest' from JSON`,
  );
}

/** @internal */
export const OrganizationOneResponseBody$inboundSchema: z.ZodType<
  OrganizationOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.nullable(z.string()),
  logo: z.nullable(z.string()),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  metadata: z.nullable(z.string()),
  ownerId: z.string(),
});

/** @internal */
export type OrganizationOneResponseBody$Outbound = {
  id: string;
  name: string;
  slug: string | null;
  logo: string | null;
  createdAt: string;
  metadata: string | null;
  ownerId: string;
};

/** @internal */
export const OrganizationOneResponseBody$outboundSchema: z.ZodType<
  OrganizationOneResponseBody$Outbound,
  z.ZodTypeDef,
  OrganizationOneResponseBody
> = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.nullable(z.string()),
  logo: z.nullable(z.string()),
  createdAt: z.date().transform(v => v.toISOString()),
  metadata: z.nullable(z.string()),
  ownerId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationOneResponseBody$ {
  /** @deprecated use `OrganizationOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = OrganizationOneResponseBody$inboundSchema;
  /** @deprecated use `OrganizationOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = OrganizationOneResponseBody$outboundSchema;
  /** @deprecated use `OrganizationOneResponseBody$Outbound` instead. */
  export type Outbound = OrganizationOneResponseBody$Outbound;
}

export function organizationOneResponseBodyToJSON(
  organizationOneResponseBody: OrganizationOneResponseBody,
): string {
  return JSON.stringify(
    OrganizationOneResponseBody$outboundSchema.parse(
      organizationOneResponseBody,
    ),
  );
}

export function organizationOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationOneResponseBody' from JSON`,
  );
}

/** @internal */
export const OrganizationOneResponse$inboundSchema: z.ZodType<
  OrganizationOneResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => OrganizationOneResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type OrganizationOneResponse$Outbound =
  | OrganizationOneResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const OrganizationOneResponse$outboundSchema: z.ZodType<
  OrganizationOneResponse$Outbound,
  z.ZodTypeDef,
  OrganizationOneResponse
> = z.union([
  z.lazy(() => OrganizationOneResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationOneResponse$ {
  /** @deprecated use `OrganizationOneResponse$inboundSchema` instead. */
  export const inboundSchema = OrganizationOneResponse$inboundSchema;
  /** @deprecated use `OrganizationOneResponse$outboundSchema` instead. */
  export const outboundSchema = OrganizationOneResponse$outboundSchema;
  /** @deprecated use `OrganizationOneResponse$Outbound` instead. */
  export type Outbound = OrganizationOneResponse$Outbound;
}

export function organizationOneResponseToJSON(
  organizationOneResponse: OrganizationOneResponse,
): string {
  return JSON.stringify(
    OrganizationOneResponse$outboundSchema.parse(organizationOneResponse),
  );
}

export function organizationOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationOneResponse' from JSON`,
  );
}
