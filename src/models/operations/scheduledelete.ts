/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ScheduleDeleteSecurity = {
  authorization: string;
};

export type ScheduleDeleteRequest = {
  scheduleId: string;
};

/** @internal */
export const ScheduleDeleteSecurity$inboundSchema: z.ZodType<
  ScheduleDeleteSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type ScheduleDeleteSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const ScheduleDeleteSecurity$outboundSchema: z.ZodType<
  ScheduleDeleteSecurity$Outbound,
  z.ZodTypeDef,
  ScheduleDeleteSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScheduleDeleteSecurity$ {
  /** @deprecated use `ScheduleDeleteSecurity$inboundSchema` instead. */
  export const inboundSchema = ScheduleDeleteSecurity$inboundSchema;
  /** @deprecated use `ScheduleDeleteSecurity$outboundSchema` instead. */
  export const outboundSchema = ScheduleDeleteSecurity$outboundSchema;
  /** @deprecated use `ScheduleDeleteSecurity$Outbound` instead. */
  export type Outbound = ScheduleDeleteSecurity$Outbound;
}

export function scheduleDeleteSecurityToJSON(
  scheduleDeleteSecurity: ScheduleDeleteSecurity,
): string {
  return JSON.stringify(
    ScheduleDeleteSecurity$outboundSchema.parse(scheduleDeleteSecurity),
  );
}

export function scheduleDeleteSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ScheduleDeleteSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScheduleDeleteSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScheduleDeleteSecurity' from JSON`,
  );
}

/** @internal */
export const ScheduleDeleteRequest$inboundSchema: z.ZodType<
  ScheduleDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  scheduleId: z.string(),
});

/** @internal */
export type ScheduleDeleteRequest$Outbound = {
  scheduleId: string;
};

/** @internal */
export const ScheduleDeleteRequest$outboundSchema: z.ZodType<
  ScheduleDeleteRequest$Outbound,
  z.ZodTypeDef,
  ScheduleDeleteRequest
> = z.object({
  scheduleId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScheduleDeleteRequest$ {
  /** @deprecated use `ScheduleDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = ScheduleDeleteRequest$inboundSchema;
  /** @deprecated use `ScheduleDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = ScheduleDeleteRequest$outboundSchema;
  /** @deprecated use `ScheduleDeleteRequest$Outbound` instead. */
  export type Outbound = ScheduleDeleteRequest$Outbound;
}

export function scheduleDeleteRequestToJSON(
  scheduleDeleteRequest: ScheduleDeleteRequest,
): string {
  return JSON.stringify(
    ScheduleDeleteRequest$outboundSchema.parse(scheduleDeleteRequest),
  );
}

export function scheduleDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<ScheduleDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScheduleDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScheduleDeleteRequest' from JSON`,
  );
}
