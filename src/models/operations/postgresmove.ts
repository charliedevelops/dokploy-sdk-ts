/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PostgresMoveSecurity = {
  authorization: string;
};

export type PostgresMoveRequest = {
  postgresId: string;
  targetEnvironmentId: string;
};

export const PostgresMoveApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type PostgresMoveApplicationStatus = ClosedEnum<
  typeof PostgresMoveApplicationStatus
>;

export type PostgresMoveHealthCheckSwarm = {
  test?: Array<string> | undefined;
  interval?: number | undefined;
  timeout?: number | undefined;
  startPeriod?: number | undefined;
  retries?: number | undefined;
};

export type PostgresMoveRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type PostgresMoveSpread = {
  spreadDescriptor: string;
};

export type PostgresMovePreference = {
  spread: PostgresMoveSpread;
};

export type PostgresMovePlatform = {
  architecture: string;
  os: string;
};

export type PostgresMovePlacementSwarm = {
  constraints?: Array<string> | undefined;
  preferences?: Array<PostgresMovePreference> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<PostgresMovePlatform> | undefined;
};

export type PostgresMoveUpdateConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type PostgresMoveRollbackConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type PostgresMoveReplicated = {
  replicas?: number | undefined;
};

export type PostgresMoveGlobal = {};

export type PostgresMoveReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type PostgresMoveGlobalJob = {};

export type PostgresMoveModeSwarm = {
  replicated?: PostgresMoveReplicated | undefined;
  global?: PostgresMoveGlobal | undefined;
  replicatedJob?: PostgresMoveReplicatedJob | undefined;
  globalJob?: PostgresMoveGlobalJob | undefined;
};

export type PostgresMoveDriverOpts = {};

export type PostgresMoveNetworkSwarm = {
  target?: string | undefined;
  aliases?: Array<string> | undefined;
  driverOpts?: PostgresMoveDriverOpts | undefined;
};

/**
 * Successful response
 */
export type PostgresMoveResponseBody = {
  postgresId: string;
  name: string;
  appName: string;
  databaseName: string;
  databaseUser: string;
  databasePassword: string;
  description: string | null;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  externalPort: number | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  applicationStatus: PostgresMoveApplicationStatus;
  healthCheckSwarm: PostgresMoveHealthCheckSwarm | null;
  restartPolicySwarm: PostgresMoveRestartPolicySwarm | null;
  placementSwarm: PostgresMovePlacementSwarm | null;
  updateConfigSwarm: PostgresMoveUpdateConfigSwarm | null;
  rollbackConfigSwarm: PostgresMoveRollbackConfigSwarm | null;
  modeSwarm: PostgresMoveModeSwarm | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<PostgresMoveNetworkSwarm> | null;
  replicas: number;
  createdAt: string;
  environmentId: string;
  serverId: string | null;
};

export type PostgresMoveResponse = PostgresMoveResponseBody | models.ErrorT;

/** @internal */
export const PostgresMoveSecurity$inboundSchema: z.ZodType<
  PostgresMoveSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type PostgresMoveSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const PostgresMoveSecurity$outboundSchema: z.ZodType<
  PostgresMoveSecurity$Outbound,
  z.ZodTypeDef,
  PostgresMoveSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresMoveSecurity$ {
  /** @deprecated use `PostgresMoveSecurity$inboundSchema` instead. */
  export const inboundSchema = PostgresMoveSecurity$inboundSchema;
  /** @deprecated use `PostgresMoveSecurity$outboundSchema` instead. */
  export const outboundSchema = PostgresMoveSecurity$outboundSchema;
  /** @deprecated use `PostgresMoveSecurity$Outbound` instead. */
  export type Outbound = PostgresMoveSecurity$Outbound;
}

export function postgresMoveSecurityToJSON(
  postgresMoveSecurity: PostgresMoveSecurity,
): string {
  return JSON.stringify(
    PostgresMoveSecurity$outboundSchema.parse(postgresMoveSecurity),
  );
}

export function postgresMoveSecurityFromJSON(
  jsonString: string,
): SafeParseResult<PostgresMoveSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresMoveSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresMoveSecurity' from JSON`,
  );
}

/** @internal */
export const PostgresMoveRequest$inboundSchema: z.ZodType<
  PostgresMoveRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  postgresId: z.string(),
  targetEnvironmentId: z.string(),
});

/** @internal */
export type PostgresMoveRequest$Outbound = {
  postgresId: string;
  targetEnvironmentId: string;
};

/** @internal */
export const PostgresMoveRequest$outboundSchema: z.ZodType<
  PostgresMoveRequest$Outbound,
  z.ZodTypeDef,
  PostgresMoveRequest
> = z.object({
  postgresId: z.string(),
  targetEnvironmentId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresMoveRequest$ {
  /** @deprecated use `PostgresMoveRequest$inboundSchema` instead. */
  export const inboundSchema = PostgresMoveRequest$inboundSchema;
  /** @deprecated use `PostgresMoveRequest$outboundSchema` instead. */
  export const outboundSchema = PostgresMoveRequest$outboundSchema;
  /** @deprecated use `PostgresMoveRequest$Outbound` instead. */
  export type Outbound = PostgresMoveRequest$Outbound;
}

export function postgresMoveRequestToJSON(
  postgresMoveRequest: PostgresMoveRequest,
): string {
  return JSON.stringify(
    PostgresMoveRequest$outboundSchema.parse(postgresMoveRequest),
  );
}

export function postgresMoveRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostgresMoveRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresMoveRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresMoveRequest' from JSON`,
  );
}

/** @internal */
export const PostgresMoveApplicationStatus$inboundSchema: z.ZodNativeEnum<
  typeof PostgresMoveApplicationStatus
> = z.nativeEnum(PostgresMoveApplicationStatus);

/** @internal */
export const PostgresMoveApplicationStatus$outboundSchema: z.ZodNativeEnum<
  typeof PostgresMoveApplicationStatus
> = PostgresMoveApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresMoveApplicationStatus$ {
  /** @deprecated use `PostgresMoveApplicationStatus$inboundSchema` instead. */
  export const inboundSchema = PostgresMoveApplicationStatus$inboundSchema;
  /** @deprecated use `PostgresMoveApplicationStatus$outboundSchema` instead. */
  export const outboundSchema = PostgresMoveApplicationStatus$outboundSchema;
}

/** @internal */
export const PostgresMoveHealthCheckSwarm$inboundSchema: z.ZodType<
  PostgresMoveHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Test: z.array(z.string()).optional(),
  Interval: z.number().optional(),
  Timeout: z.number().optional(),
  StartPeriod: z.number().optional(),
  Retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Test": "test",
    "Interval": "interval",
    "Timeout": "timeout",
    "StartPeriod": "startPeriod",
    "Retries": "retries",
  });
});

/** @internal */
export type PostgresMoveHealthCheckSwarm$Outbound = {
  Test?: Array<string> | undefined;
  Interval?: number | undefined;
  Timeout?: number | undefined;
  StartPeriod?: number | undefined;
  Retries?: number | undefined;
};

/** @internal */
export const PostgresMoveHealthCheckSwarm$outboundSchema: z.ZodType<
  PostgresMoveHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  PostgresMoveHealthCheckSwarm
> = z.object({
  test: z.array(z.string()).optional(),
  interval: z.number().optional(),
  timeout: z.number().optional(),
  startPeriod: z.number().optional(),
  retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    test: "Test",
    interval: "Interval",
    timeout: "Timeout",
    startPeriod: "StartPeriod",
    retries: "Retries",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresMoveHealthCheckSwarm$ {
  /** @deprecated use `PostgresMoveHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresMoveHealthCheckSwarm$inboundSchema;
  /** @deprecated use `PostgresMoveHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema = PostgresMoveHealthCheckSwarm$outboundSchema;
  /** @deprecated use `PostgresMoveHealthCheckSwarm$Outbound` instead. */
  export type Outbound = PostgresMoveHealthCheckSwarm$Outbound;
}

export function postgresMoveHealthCheckSwarmToJSON(
  postgresMoveHealthCheckSwarm: PostgresMoveHealthCheckSwarm,
): string {
  return JSON.stringify(
    PostgresMoveHealthCheckSwarm$outboundSchema.parse(
      postgresMoveHealthCheckSwarm,
    ),
  );
}

export function postgresMoveHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresMoveHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresMoveHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresMoveHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresMoveRestartPolicySwarm$inboundSchema: z.ZodType<
  PostgresMoveRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type PostgresMoveRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const PostgresMoveRestartPolicySwarm$outboundSchema: z.ZodType<
  PostgresMoveRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  PostgresMoveRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresMoveRestartPolicySwarm$ {
  /** @deprecated use `PostgresMoveRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresMoveRestartPolicySwarm$inboundSchema;
  /** @deprecated use `PostgresMoveRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema = PostgresMoveRestartPolicySwarm$outboundSchema;
  /** @deprecated use `PostgresMoveRestartPolicySwarm$Outbound` instead. */
  export type Outbound = PostgresMoveRestartPolicySwarm$Outbound;
}

export function postgresMoveRestartPolicySwarmToJSON(
  postgresMoveRestartPolicySwarm: PostgresMoveRestartPolicySwarm,
): string {
  return JSON.stringify(
    PostgresMoveRestartPolicySwarm$outboundSchema.parse(
      postgresMoveRestartPolicySwarm,
    ),
  );
}

export function postgresMoveRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresMoveRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresMoveRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresMoveRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const PostgresMoveSpread$inboundSchema: z.ZodType<
  PostgresMoveSpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type PostgresMoveSpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const PostgresMoveSpread$outboundSchema: z.ZodType<
  PostgresMoveSpread$Outbound,
  z.ZodTypeDef,
  PostgresMoveSpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresMoveSpread$ {
  /** @deprecated use `PostgresMoveSpread$inboundSchema` instead. */
  export const inboundSchema = PostgresMoveSpread$inboundSchema;
  /** @deprecated use `PostgresMoveSpread$outboundSchema` instead. */
  export const outboundSchema = PostgresMoveSpread$outboundSchema;
  /** @deprecated use `PostgresMoveSpread$Outbound` instead. */
  export type Outbound = PostgresMoveSpread$Outbound;
}

export function postgresMoveSpreadToJSON(
  postgresMoveSpread: PostgresMoveSpread,
): string {
  return JSON.stringify(
    PostgresMoveSpread$outboundSchema.parse(postgresMoveSpread),
  );
}

export function postgresMoveSpreadFromJSON(
  jsonString: string,
): SafeParseResult<PostgresMoveSpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresMoveSpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresMoveSpread' from JSON`,
  );
}

/** @internal */
export const PostgresMovePreference$inboundSchema: z.ZodType<
  PostgresMovePreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => PostgresMoveSpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type PostgresMovePreference$Outbound = {
  Spread: PostgresMoveSpread$Outbound;
};

/** @internal */
export const PostgresMovePreference$outboundSchema: z.ZodType<
  PostgresMovePreference$Outbound,
  z.ZodTypeDef,
  PostgresMovePreference
> = z.object({
  spread: z.lazy(() => PostgresMoveSpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresMovePreference$ {
  /** @deprecated use `PostgresMovePreference$inboundSchema` instead. */
  export const inboundSchema = PostgresMovePreference$inboundSchema;
  /** @deprecated use `PostgresMovePreference$outboundSchema` instead. */
  export const outboundSchema = PostgresMovePreference$outboundSchema;
  /** @deprecated use `PostgresMovePreference$Outbound` instead. */
  export type Outbound = PostgresMovePreference$Outbound;
}

export function postgresMovePreferenceToJSON(
  postgresMovePreference: PostgresMovePreference,
): string {
  return JSON.stringify(
    PostgresMovePreference$outboundSchema.parse(postgresMovePreference),
  );
}

export function postgresMovePreferenceFromJSON(
  jsonString: string,
): SafeParseResult<PostgresMovePreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresMovePreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresMovePreference' from JSON`,
  );
}

/** @internal */
export const PostgresMovePlatform$inboundSchema: z.ZodType<
  PostgresMovePlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type PostgresMovePlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const PostgresMovePlatform$outboundSchema: z.ZodType<
  PostgresMovePlatform$Outbound,
  z.ZodTypeDef,
  PostgresMovePlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresMovePlatform$ {
  /** @deprecated use `PostgresMovePlatform$inboundSchema` instead. */
  export const inboundSchema = PostgresMovePlatform$inboundSchema;
  /** @deprecated use `PostgresMovePlatform$outboundSchema` instead. */
  export const outboundSchema = PostgresMovePlatform$outboundSchema;
  /** @deprecated use `PostgresMovePlatform$Outbound` instead. */
  export type Outbound = PostgresMovePlatform$Outbound;
}

export function postgresMovePlatformToJSON(
  postgresMovePlatform: PostgresMovePlatform,
): string {
  return JSON.stringify(
    PostgresMovePlatform$outboundSchema.parse(postgresMovePlatform),
  );
}

export function postgresMovePlatformFromJSON(
  jsonString: string,
): SafeParseResult<PostgresMovePlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresMovePlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresMovePlatform' from JSON`,
  );
}

/** @internal */
export const PostgresMovePlacementSwarm$inboundSchema: z.ZodType<
  PostgresMovePlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  Preferences: z.array(z.lazy(() => PostgresMovePreference$inboundSchema))
    .optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => PostgresMovePlatform$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "Preferences": "preferences",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
  });
});

/** @internal */
export type PostgresMovePlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  Preferences?: Array<PostgresMovePreference$Outbound> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<PostgresMovePlatform$Outbound> | undefined;
};

/** @internal */
export const PostgresMovePlacementSwarm$outboundSchema: z.ZodType<
  PostgresMovePlacementSwarm$Outbound,
  z.ZodTypeDef,
  PostgresMovePlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  preferences: z.array(z.lazy(() => PostgresMovePreference$outboundSchema))
    .optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => PostgresMovePlatform$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    preferences: "Preferences",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresMovePlacementSwarm$ {
  /** @deprecated use `PostgresMovePlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresMovePlacementSwarm$inboundSchema;
  /** @deprecated use `PostgresMovePlacementSwarm$outboundSchema` instead. */
  export const outboundSchema = PostgresMovePlacementSwarm$outboundSchema;
  /** @deprecated use `PostgresMovePlacementSwarm$Outbound` instead. */
  export type Outbound = PostgresMovePlacementSwarm$Outbound;
}

export function postgresMovePlacementSwarmToJSON(
  postgresMovePlacementSwarm: PostgresMovePlacementSwarm,
): string {
  return JSON.stringify(
    PostgresMovePlacementSwarm$outboundSchema.parse(postgresMovePlacementSwarm),
  );
}

export function postgresMovePlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresMovePlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresMovePlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresMovePlacementSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresMoveUpdateConfigSwarm$inboundSchema: z.ZodType<
  PostgresMoveUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type PostgresMoveUpdateConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const PostgresMoveUpdateConfigSwarm$outboundSchema: z.ZodType<
  PostgresMoveUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  PostgresMoveUpdateConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresMoveUpdateConfigSwarm$ {
  /** @deprecated use `PostgresMoveUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresMoveUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `PostgresMoveUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = PostgresMoveUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `PostgresMoveUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = PostgresMoveUpdateConfigSwarm$Outbound;
}

export function postgresMoveUpdateConfigSwarmToJSON(
  postgresMoveUpdateConfigSwarm: PostgresMoveUpdateConfigSwarm,
): string {
  return JSON.stringify(
    PostgresMoveUpdateConfigSwarm$outboundSchema.parse(
      postgresMoveUpdateConfigSwarm,
    ),
  );
}

export function postgresMoveUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresMoveUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresMoveUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresMoveUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresMoveRollbackConfigSwarm$inboundSchema: z.ZodType<
  PostgresMoveRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type PostgresMoveRollbackConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const PostgresMoveRollbackConfigSwarm$outboundSchema: z.ZodType<
  PostgresMoveRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  PostgresMoveRollbackConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresMoveRollbackConfigSwarm$ {
  /** @deprecated use `PostgresMoveRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresMoveRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `PostgresMoveRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = PostgresMoveRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `PostgresMoveRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = PostgresMoveRollbackConfigSwarm$Outbound;
}

export function postgresMoveRollbackConfigSwarmToJSON(
  postgresMoveRollbackConfigSwarm: PostgresMoveRollbackConfigSwarm,
): string {
  return JSON.stringify(
    PostgresMoveRollbackConfigSwarm$outboundSchema.parse(
      postgresMoveRollbackConfigSwarm,
    ),
  );
}

export function postgresMoveRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresMoveRollbackConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresMoveRollbackConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresMoveRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresMoveReplicated$inboundSchema: z.ZodType<
  PostgresMoveReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type PostgresMoveReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const PostgresMoveReplicated$outboundSchema: z.ZodType<
  PostgresMoveReplicated$Outbound,
  z.ZodTypeDef,
  PostgresMoveReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresMoveReplicated$ {
  /** @deprecated use `PostgresMoveReplicated$inboundSchema` instead. */
  export const inboundSchema = PostgresMoveReplicated$inboundSchema;
  /** @deprecated use `PostgresMoveReplicated$outboundSchema` instead. */
  export const outboundSchema = PostgresMoveReplicated$outboundSchema;
  /** @deprecated use `PostgresMoveReplicated$Outbound` instead. */
  export type Outbound = PostgresMoveReplicated$Outbound;
}

export function postgresMoveReplicatedToJSON(
  postgresMoveReplicated: PostgresMoveReplicated,
): string {
  return JSON.stringify(
    PostgresMoveReplicated$outboundSchema.parse(postgresMoveReplicated),
  );
}

export function postgresMoveReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<PostgresMoveReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresMoveReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresMoveReplicated' from JSON`,
  );
}

/** @internal */
export const PostgresMoveGlobal$inboundSchema: z.ZodType<
  PostgresMoveGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostgresMoveGlobal$Outbound = {};

/** @internal */
export const PostgresMoveGlobal$outboundSchema: z.ZodType<
  PostgresMoveGlobal$Outbound,
  z.ZodTypeDef,
  PostgresMoveGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresMoveGlobal$ {
  /** @deprecated use `PostgresMoveGlobal$inboundSchema` instead. */
  export const inboundSchema = PostgresMoveGlobal$inboundSchema;
  /** @deprecated use `PostgresMoveGlobal$outboundSchema` instead. */
  export const outboundSchema = PostgresMoveGlobal$outboundSchema;
  /** @deprecated use `PostgresMoveGlobal$Outbound` instead. */
  export type Outbound = PostgresMoveGlobal$Outbound;
}

export function postgresMoveGlobalToJSON(
  postgresMoveGlobal: PostgresMoveGlobal,
): string {
  return JSON.stringify(
    PostgresMoveGlobal$outboundSchema.parse(postgresMoveGlobal),
  );
}

export function postgresMoveGlobalFromJSON(
  jsonString: string,
): SafeParseResult<PostgresMoveGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresMoveGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresMoveGlobal' from JSON`,
  );
}

/** @internal */
export const PostgresMoveReplicatedJob$inboundSchema: z.ZodType<
  PostgresMoveReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type PostgresMoveReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const PostgresMoveReplicatedJob$outboundSchema: z.ZodType<
  PostgresMoveReplicatedJob$Outbound,
  z.ZodTypeDef,
  PostgresMoveReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresMoveReplicatedJob$ {
  /** @deprecated use `PostgresMoveReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = PostgresMoveReplicatedJob$inboundSchema;
  /** @deprecated use `PostgresMoveReplicatedJob$outboundSchema` instead. */
  export const outboundSchema = PostgresMoveReplicatedJob$outboundSchema;
  /** @deprecated use `PostgresMoveReplicatedJob$Outbound` instead. */
  export type Outbound = PostgresMoveReplicatedJob$Outbound;
}

export function postgresMoveReplicatedJobToJSON(
  postgresMoveReplicatedJob: PostgresMoveReplicatedJob,
): string {
  return JSON.stringify(
    PostgresMoveReplicatedJob$outboundSchema.parse(postgresMoveReplicatedJob),
  );
}

export function postgresMoveReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<PostgresMoveReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresMoveReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresMoveReplicatedJob' from JSON`,
  );
}

/** @internal */
export const PostgresMoveGlobalJob$inboundSchema: z.ZodType<
  PostgresMoveGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostgresMoveGlobalJob$Outbound = {};

/** @internal */
export const PostgresMoveGlobalJob$outboundSchema: z.ZodType<
  PostgresMoveGlobalJob$Outbound,
  z.ZodTypeDef,
  PostgresMoveGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresMoveGlobalJob$ {
  /** @deprecated use `PostgresMoveGlobalJob$inboundSchema` instead. */
  export const inboundSchema = PostgresMoveGlobalJob$inboundSchema;
  /** @deprecated use `PostgresMoveGlobalJob$outboundSchema` instead. */
  export const outboundSchema = PostgresMoveGlobalJob$outboundSchema;
  /** @deprecated use `PostgresMoveGlobalJob$Outbound` instead. */
  export type Outbound = PostgresMoveGlobalJob$Outbound;
}

export function postgresMoveGlobalJobToJSON(
  postgresMoveGlobalJob: PostgresMoveGlobalJob,
): string {
  return JSON.stringify(
    PostgresMoveGlobalJob$outboundSchema.parse(postgresMoveGlobalJob),
  );
}

export function postgresMoveGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<PostgresMoveGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresMoveGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresMoveGlobalJob' from JSON`,
  );
}

/** @internal */
export const PostgresMoveModeSwarm$inboundSchema: z.ZodType<
  PostgresMoveModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicated: z.lazy(() => PostgresMoveReplicated$inboundSchema).optional(),
  Global: z.lazy(() => PostgresMoveGlobal$inboundSchema).optional(),
  ReplicatedJob: z.lazy(() => PostgresMoveReplicatedJob$inboundSchema)
    .optional(),
  GlobalJob: z.lazy(() => PostgresMoveGlobalJob$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicated": "replicated",
    "Global": "global",
    "ReplicatedJob": "replicatedJob",
    "GlobalJob": "globalJob",
  });
});

/** @internal */
export type PostgresMoveModeSwarm$Outbound = {
  Replicated?: PostgresMoveReplicated$Outbound | undefined;
  Global?: PostgresMoveGlobal$Outbound | undefined;
  ReplicatedJob?: PostgresMoveReplicatedJob$Outbound | undefined;
  GlobalJob?: PostgresMoveGlobalJob$Outbound | undefined;
};

/** @internal */
export const PostgresMoveModeSwarm$outboundSchema: z.ZodType<
  PostgresMoveModeSwarm$Outbound,
  z.ZodTypeDef,
  PostgresMoveModeSwarm
> = z.object({
  replicated: z.lazy(() => PostgresMoveReplicated$outboundSchema).optional(),
  global: z.lazy(() => PostgresMoveGlobal$outboundSchema).optional(),
  replicatedJob: z.lazy(() => PostgresMoveReplicatedJob$outboundSchema)
    .optional(),
  globalJob: z.lazy(() => PostgresMoveGlobalJob$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    replicated: "Replicated",
    global: "Global",
    replicatedJob: "ReplicatedJob",
    globalJob: "GlobalJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresMoveModeSwarm$ {
  /** @deprecated use `PostgresMoveModeSwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresMoveModeSwarm$inboundSchema;
  /** @deprecated use `PostgresMoveModeSwarm$outboundSchema` instead. */
  export const outboundSchema = PostgresMoveModeSwarm$outboundSchema;
  /** @deprecated use `PostgresMoveModeSwarm$Outbound` instead. */
  export type Outbound = PostgresMoveModeSwarm$Outbound;
}

export function postgresMoveModeSwarmToJSON(
  postgresMoveModeSwarm: PostgresMoveModeSwarm,
): string {
  return JSON.stringify(
    PostgresMoveModeSwarm$outboundSchema.parse(postgresMoveModeSwarm),
  );
}

export function postgresMoveModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresMoveModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresMoveModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresMoveModeSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresMoveDriverOpts$inboundSchema: z.ZodType<
  PostgresMoveDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostgresMoveDriverOpts$Outbound = {};

/** @internal */
export const PostgresMoveDriverOpts$outboundSchema: z.ZodType<
  PostgresMoveDriverOpts$Outbound,
  z.ZodTypeDef,
  PostgresMoveDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresMoveDriverOpts$ {
  /** @deprecated use `PostgresMoveDriverOpts$inboundSchema` instead. */
  export const inboundSchema = PostgresMoveDriverOpts$inboundSchema;
  /** @deprecated use `PostgresMoveDriverOpts$outboundSchema` instead. */
  export const outboundSchema = PostgresMoveDriverOpts$outboundSchema;
  /** @deprecated use `PostgresMoveDriverOpts$Outbound` instead. */
  export type Outbound = PostgresMoveDriverOpts$Outbound;
}

export function postgresMoveDriverOptsToJSON(
  postgresMoveDriverOpts: PostgresMoveDriverOpts,
): string {
  return JSON.stringify(
    PostgresMoveDriverOpts$outboundSchema.parse(postgresMoveDriverOpts),
  );
}

export function postgresMoveDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<PostgresMoveDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresMoveDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresMoveDriverOpts' from JSON`,
  );
}

/** @internal */
export const PostgresMoveNetworkSwarm$inboundSchema: z.ZodType<
  PostgresMoveNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Target: z.string().optional(),
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => PostgresMoveDriverOpts$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Target": "target",
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
  });
});

/** @internal */
export type PostgresMoveNetworkSwarm$Outbound = {
  Target?: string | undefined;
  Aliases?: Array<string> | undefined;
  DriverOpts?: PostgresMoveDriverOpts$Outbound | undefined;
};

/** @internal */
export const PostgresMoveNetworkSwarm$outboundSchema: z.ZodType<
  PostgresMoveNetworkSwarm$Outbound,
  z.ZodTypeDef,
  PostgresMoveNetworkSwarm
> = z.object({
  target: z.string().optional(),
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => PostgresMoveDriverOpts$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    target: "Target",
    aliases: "Aliases",
    driverOpts: "DriverOpts",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresMoveNetworkSwarm$ {
  /** @deprecated use `PostgresMoveNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresMoveNetworkSwarm$inboundSchema;
  /** @deprecated use `PostgresMoveNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = PostgresMoveNetworkSwarm$outboundSchema;
  /** @deprecated use `PostgresMoveNetworkSwarm$Outbound` instead. */
  export type Outbound = PostgresMoveNetworkSwarm$Outbound;
}

export function postgresMoveNetworkSwarmToJSON(
  postgresMoveNetworkSwarm: PostgresMoveNetworkSwarm,
): string {
  return JSON.stringify(
    PostgresMoveNetworkSwarm$outboundSchema.parse(postgresMoveNetworkSwarm),
  );
}

export function postgresMoveNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresMoveNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresMoveNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresMoveNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresMoveResponseBody$inboundSchema: z.ZodType<
  PostgresMoveResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  postgresId: z.string(),
  name: z.string(),
  appName: z.string(),
  databaseName: z.string(),
  databaseUser: z.string(),
  databasePassword: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  applicationStatus: PostgresMoveApplicationStatus$inboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => PostgresMoveHealthCheckSwarm$inboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => PostgresMoveRestartPolicySwarm$inboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => PostgresMovePlacementSwarm$inboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => PostgresMoveUpdateConfigSwarm$inboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => PostgresMoveRollbackConfigSwarm$inboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => PostgresMoveModeSwarm$inboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => PostgresMoveNetworkSwarm$inboundSchema)),
  ),
  replicas: z.number(),
  createdAt: z.string(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
});

/** @internal */
export type PostgresMoveResponseBody$Outbound = {
  postgresId: string;
  name: string;
  appName: string;
  databaseName: string;
  databaseUser: string;
  databasePassword: string;
  description: string | null;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  externalPort: number | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  applicationStatus: string;
  healthCheckSwarm: PostgresMoveHealthCheckSwarm$Outbound | null;
  restartPolicySwarm: PostgresMoveRestartPolicySwarm$Outbound | null;
  placementSwarm: PostgresMovePlacementSwarm$Outbound | null;
  updateConfigSwarm: PostgresMoveUpdateConfigSwarm$Outbound | null;
  rollbackConfigSwarm: PostgresMoveRollbackConfigSwarm$Outbound | null;
  modeSwarm: PostgresMoveModeSwarm$Outbound | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<PostgresMoveNetworkSwarm$Outbound> | null;
  replicas: number;
  createdAt: string;
  environmentId: string;
  serverId: string | null;
};

/** @internal */
export const PostgresMoveResponseBody$outboundSchema: z.ZodType<
  PostgresMoveResponseBody$Outbound,
  z.ZodTypeDef,
  PostgresMoveResponseBody
> = z.object({
  postgresId: z.string(),
  name: z.string(),
  appName: z.string(),
  databaseName: z.string(),
  databaseUser: z.string(),
  databasePassword: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  applicationStatus: PostgresMoveApplicationStatus$outboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => PostgresMoveHealthCheckSwarm$outboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => PostgresMoveRestartPolicySwarm$outboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => PostgresMovePlacementSwarm$outboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => PostgresMoveUpdateConfigSwarm$outboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => PostgresMoveRollbackConfigSwarm$outboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => PostgresMoveModeSwarm$outboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => PostgresMoveNetworkSwarm$outboundSchema)),
  ),
  replicas: z.number(),
  createdAt: z.string(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresMoveResponseBody$ {
  /** @deprecated use `PostgresMoveResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostgresMoveResponseBody$inboundSchema;
  /** @deprecated use `PostgresMoveResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostgresMoveResponseBody$outboundSchema;
  /** @deprecated use `PostgresMoveResponseBody$Outbound` instead. */
  export type Outbound = PostgresMoveResponseBody$Outbound;
}

export function postgresMoveResponseBodyToJSON(
  postgresMoveResponseBody: PostgresMoveResponseBody,
): string {
  return JSON.stringify(
    PostgresMoveResponseBody$outboundSchema.parse(postgresMoveResponseBody),
  );
}

export function postgresMoveResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostgresMoveResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresMoveResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresMoveResponseBody' from JSON`,
  );
}

/** @internal */
export const PostgresMoveResponse$inboundSchema: z.ZodType<
  PostgresMoveResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PostgresMoveResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type PostgresMoveResponse$Outbound =
  | PostgresMoveResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const PostgresMoveResponse$outboundSchema: z.ZodType<
  PostgresMoveResponse$Outbound,
  z.ZodTypeDef,
  PostgresMoveResponse
> = z.union([
  z.lazy(() => PostgresMoveResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresMoveResponse$ {
  /** @deprecated use `PostgresMoveResponse$inboundSchema` instead. */
  export const inboundSchema = PostgresMoveResponse$inboundSchema;
  /** @deprecated use `PostgresMoveResponse$outboundSchema` instead. */
  export const outboundSchema = PostgresMoveResponse$outboundSchema;
  /** @deprecated use `PostgresMoveResponse$Outbound` instead. */
  export type Outbound = PostgresMoveResponse$Outbound;
}

export function postgresMoveResponseToJSON(
  postgresMoveResponse: PostgresMoveResponse,
): string {
  return JSON.stringify(
    PostgresMoveResponse$outboundSchema.parse(postgresMoveResponse),
  );
}

export function postgresMoveResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostgresMoveResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresMoveResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresMoveResponse' from JSON`,
  );
}
