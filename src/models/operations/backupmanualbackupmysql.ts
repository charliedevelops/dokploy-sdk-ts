/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BackupManualBackupMySqlSecurity = {
  authorization: string;
};

export type BackupManualBackupMySqlRequest = {
  backupId: string;
};

/** @internal */
export const BackupManualBackupMySqlSecurity$inboundSchema: z.ZodType<
  BackupManualBackupMySqlSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type BackupManualBackupMySqlSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const BackupManualBackupMySqlSecurity$outboundSchema: z.ZodType<
  BackupManualBackupMySqlSecurity$Outbound,
  z.ZodTypeDef,
  BackupManualBackupMySqlSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackupManualBackupMySqlSecurity$ {
  /** @deprecated use `BackupManualBackupMySqlSecurity$inboundSchema` instead. */
  export const inboundSchema = BackupManualBackupMySqlSecurity$inboundSchema;
  /** @deprecated use `BackupManualBackupMySqlSecurity$outboundSchema` instead. */
  export const outboundSchema = BackupManualBackupMySqlSecurity$outboundSchema;
  /** @deprecated use `BackupManualBackupMySqlSecurity$Outbound` instead. */
  export type Outbound = BackupManualBackupMySqlSecurity$Outbound;
}

export function backupManualBackupMySqlSecurityToJSON(
  backupManualBackupMySqlSecurity: BackupManualBackupMySqlSecurity,
): string {
  return JSON.stringify(
    BackupManualBackupMySqlSecurity$outboundSchema.parse(
      backupManualBackupMySqlSecurity,
    ),
  );
}

export function backupManualBackupMySqlSecurityFromJSON(
  jsonString: string,
): SafeParseResult<BackupManualBackupMySqlSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BackupManualBackupMySqlSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackupManualBackupMySqlSecurity' from JSON`,
  );
}

/** @internal */
export const BackupManualBackupMySqlRequest$inboundSchema: z.ZodType<
  BackupManualBackupMySqlRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  backupId: z.string(),
});

/** @internal */
export type BackupManualBackupMySqlRequest$Outbound = {
  backupId: string;
};

/** @internal */
export const BackupManualBackupMySqlRequest$outboundSchema: z.ZodType<
  BackupManualBackupMySqlRequest$Outbound,
  z.ZodTypeDef,
  BackupManualBackupMySqlRequest
> = z.object({
  backupId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackupManualBackupMySqlRequest$ {
  /** @deprecated use `BackupManualBackupMySqlRequest$inboundSchema` instead. */
  export const inboundSchema = BackupManualBackupMySqlRequest$inboundSchema;
  /** @deprecated use `BackupManualBackupMySqlRequest$outboundSchema` instead. */
  export const outboundSchema = BackupManualBackupMySqlRequest$outboundSchema;
  /** @deprecated use `BackupManualBackupMySqlRequest$Outbound` instead. */
  export type Outbound = BackupManualBackupMySqlRequest$Outbound;
}

export function backupManualBackupMySqlRequestToJSON(
  backupManualBackupMySqlRequest: BackupManualBackupMySqlRequest,
): string {
  return JSON.stringify(
    BackupManualBackupMySqlRequest$outboundSchema.parse(
      backupManualBackupMySqlRequest,
    ),
  );
}

export function backupManualBackupMySqlRequestFromJSON(
  jsonString: string,
): SafeParseResult<BackupManualBackupMySqlRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BackupManualBackupMySqlRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackupManualBackupMySqlRequest' from JSON`,
  );
}
