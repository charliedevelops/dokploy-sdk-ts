/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type SecurityCreateSecurity = {
  authorization: string;
};

export type SecurityCreateRequest = {
  applicationId: string;
  password: string;
  username: string;
};

/**
 * Successful response
 */
export type SecurityCreateResponseBody = {
  applicationId: string;
  createdAt: string;
  password: string;
  securityId: string;
  username: string;
};

export type SecurityCreateResponse = SecurityCreateResponseBody | models.ErrorT;

/** @internal */
export const SecurityCreateSecurity$inboundSchema: z.ZodType<
  SecurityCreateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type SecurityCreateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const SecurityCreateSecurity$outboundSchema: z.ZodType<
  SecurityCreateSecurity$Outbound,
  z.ZodTypeDef,
  SecurityCreateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SecurityCreateSecurity$ {
  /** @deprecated use `SecurityCreateSecurity$inboundSchema` instead. */
  export const inboundSchema = SecurityCreateSecurity$inboundSchema;
  /** @deprecated use `SecurityCreateSecurity$outboundSchema` instead. */
  export const outboundSchema = SecurityCreateSecurity$outboundSchema;
  /** @deprecated use `SecurityCreateSecurity$Outbound` instead. */
  export type Outbound = SecurityCreateSecurity$Outbound;
}

export function securityCreateSecurityToJSON(
  securityCreateSecurity: SecurityCreateSecurity,
): string {
  return JSON.stringify(
    SecurityCreateSecurity$outboundSchema.parse(securityCreateSecurity),
  );
}

export function securityCreateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<SecurityCreateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SecurityCreateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SecurityCreateSecurity' from JSON`,
  );
}

/** @internal */
export const SecurityCreateRequest$inboundSchema: z.ZodType<
  SecurityCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string(),
  password: z.string(),
  username: z.string(),
});

/** @internal */
export type SecurityCreateRequest$Outbound = {
  applicationId: string;
  password: string;
  username: string;
};

/** @internal */
export const SecurityCreateRequest$outboundSchema: z.ZodType<
  SecurityCreateRequest$Outbound,
  z.ZodTypeDef,
  SecurityCreateRequest
> = z.object({
  applicationId: z.string(),
  password: z.string(),
  username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SecurityCreateRequest$ {
  /** @deprecated use `SecurityCreateRequest$inboundSchema` instead. */
  export const inboundSchema = SecurityCreateRequest$inboundSchema;
  /** @deprecated use `SecurityCreateRequest$outboundSchema` instead. */
  export const outboundSchema = SecurityCreateRequest$outboundSchema;
  /** @deprecated use `SecurityCreateRequest$Outbound` instead. */
  export type Outbound = SecurityCreateRequest$Outbound;
}

export function securityCreateRequestToJSON(
  securityCreateRequest: SecurityCreateRequest,
): string {
  return JSON.stringify(
    SecurityCreateRequest$outboundSchema.parse(securityCreateRequest),
  );
}

export function securityCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<SecurityCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SecurityCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SecurityCreateRequest' from JSON`,
  );
}

/** @internal */
export const SecurityCreateResponseBody$inboundSchema: z.ZodType<
  SecurityCreateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string(),
  createdAt: z.string(),
  password: z.string(),
  securityId: z.string(),
  username: z.string(),
});

/** @internal */
export type SecurityCreateResponseBody$Outbound = {
  applicationId: string;
  createdAt: string;
  password: string;
  securityId: string;
  username: string;
};

/** @internal */
export const SecurityCreateResponseBody$outboundSchema: z.ZodType<
  SecurityCreateResponseBody$Outbound,
  z.ZodTypeDef,
  SecurityCreateResponseBody
> = z.object({
  applicationId: z.string(),
  createdAt: z.string(),
  password: z.string(),
  securityId: z.string(),
  username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SecurityCreateResponseBody$ {
  /** @deprecated use `SecurityCreateResponseBody$inboundSchema` instead. */
  export const inboundSchema = SecurityCreateResponseBody$inboundSchema;
  /** @deprecated use `SecurityCreateResponseBody$outboundSchema` instead. */
  export const outboundSchema = SecurityCreateResponseBody$outboundSchema;
  /** @deprecated use `SecurityCreateResponseBody$Outbound` instead. */
  export type Outbound = SecurityCreateResponseBody$Outbound;
}

export function securityCreateResponseBodyToJSON(
  securityCreateResponseBody: SecurityCreateResponseBody,
): string {
  return JSON.stringify(
    SecurityCreateResponseBody$outboundSchema.parse(securityCreateResponseBody),
  );
}

export function securityCreateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<SecurityCreateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SecurityCreateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SecurityCreateResponseBody' from JSON`,
  );
}

/** @internal */
export const SecurityCreateResponse$inboundSchema: z.ZodType<
  SecurityCreateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => SecurityCreateResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type SecurityCreateResponse$Outbound =
  | SecurityCreateResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const SecurityCreateResponse$outboundSchema: z.ZodType<
  SecurityCreateResponse$Outbound,
  z.ZodTypeDef,
  SecurityCreateResponse
> = z.union([
  z.lazy(() => SecurityCreateResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SecurityCreateResponse$ {
  /** @deprecated use `SecurityCreateResponse$inboundSchema` instead. */
  export const inboundSchema = SecurityCreateResponse$inboundSchema;
  /** @deprecated use `SecurityCreateResponse$outboundSchema` instead. */
  export const outboundSchema = SecurityCreateResponse$outboundSchema;
  /** @deprecated use `SecurityCreateResponse$Outbound` instead. */
  export type Outbound = SecurityCreateResponse$Outbound;
}

export function securityCreateResponseToJSON(
  securityCreateResponse: SecurityCreateResponse,
): string {
  return JSON.stringify(
    SecurityCreateResponse$outboundSchema.parse(securityCreateResponse),
  );
}

export function securityCreateResponseFromJSON(
  jsonString: string,
): SafeParseResult<SecurityCreateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SecurityCreateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SecurityCreateResponse' from JSON`,
  );
}
