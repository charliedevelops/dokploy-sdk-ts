/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type RedisDeploySecurity = {
  authorization: string;
};

export type RedisDeployRequest = {
  redisId: string;
};

export const RedisDeployApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type RedisDeployApplicationStatus = ClosedEnum<
  typeof RedisDeployApplicationStatus
>;

export type RedisDeployHealthCheckSwarm = {
  test?: Array<string> | undefined;
  interval?: number | undefined;
  timeout?: number | undefined;
  startPeriod?: number | undefined;
  retries?: number | undefined;
};

export type RedisDeployRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type RedisDeploySpread = {
  spreadDescriptor: string;
};

export type RedisDeployPreference = {
  spread: RedisDeploySpread;
};

export type RedisDeployPlatform = {
  architecture: string;
  os: string;
};

export type RedisDeployPlacementSwarm = {
  constraints?: Array<string> | undefined;
  preferences?: Array<RedisDeployPreference> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<RedisDeployPlatform> | undefined;
};

export type RedisDeployUpdateConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type RedisDeployRollbackConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type RedisDeployReplicated = {
  replicas?: number | undefined;
};

export type RedisDeployGlobal = {};

export type RedisDeployReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type RedisDeployGlobalJob = {};

export type RedisDeployModeSwarm = {
  replicated?: RedisDeployReplicated | undefined;
  global?: RedisDeployGlobal | undefined;
  replicatedJob?: RedisDeployReplicatedJob | undefined;
  globalJob?: RedisDeployGlobalJob | undefined;
};

export type RedisDeployDriverOpts = {};

export type RedisDeployNetworkSwarm = {
  target?: string | undefined;
  aliases?: Array<string> | undefined;
  driverOpts?: RedisDeployDriverOpts | undefined;
};

export type RedisDeployProject = {
  projectId: string;
  name: string;
  description: string | null;
  createdAt: string;
  organizationId: string;
  env: string;
};

export type RedisDeployEnvironment = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
  project: RedisDeployProject;
};

export const RedisDeployType = {
  Bind: "bind",
  Volume: "volume",
  File: "file",
} as const;
export type RedisDeployType = ClosedEnum<typeof RedisDeployType>;

export const RedisDeployServiceType = {
  Application: "application",
  Postgres: "postgres",
  Mysql: "mysql",
  Mariadb: "mariadb",
  Mongo: "mongo",
  Redis: "redis",
  Compose: "compose",
} as const;
export type RedisDeployServiceType = ClosedEnum<typeof RedisDeployServiceType>;

export type RedisDeployMount = {
  mountId: string;
  type: RedisDeployType;
  hostPath: string | null;
  volumeName: string | null;
  filePath: string | null;
  content: string | null;
  serviceType: RedisDeployServiceType;
  mountPath: string;
  applicationId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mysqlId: string | null;
  redisId: string | null;
  composeId: string | null;
};

export const RedisDeployServerStatus = {
  Active: "active",
  Inactive: "inactive",
} as const;
export type RedisDeployServerStatus = ClosedEnum<
  typeof RedisDeployServerStatus
>;

export const RedisDeployMetricsConfigEnum = {
  Null: "null",
} as const;
export type RedisDeployMetricsConfigEnum = ClosedEnum<
  typeof RedisDeployMetricsConfigEnum
>;

export type RedisDeployMetricsConfigUnion1 =
  | string
  | number
  | boolean
  | RedisDeployMetricsConfigEnum;

export type RedisDeployMetricsConfigUnion2 =
  | string
  | number
  | boolean
  | RedisDeployMetricsConfigEnum
  | Array<any>
  | { [k: string]: any };

export type RedisDeployServer = {
  serverId: string;
  name: string;
  description: string | null;
  ipAddress: string;
  port: number;
  username: string;
  appName: string;
  enableDockerCleanup: boolean;
  createdAt: string;
  organizationId: string;
  serverStatus: RedisDeployServerStatus;
  command: string;
  sshKeyId: string | null;
  metricsConfig:
    | string
    | number
    | boolean
    | RedisDeployMetricsConfigEnum
    | Array<any>
    | { [k: string]: any };
};

/**
 * Successful response
 */
export type RedisDeployResponseBody = {
  redisId: string;
  name: string;
  appName: string;
  description: string | null;
  databasePassword: string;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  externalPort: number | null;
  createdAt: string;
  applicationStatus: RedisDeployApplicationStatus;
  healthCheckSwarm: RedisDeployHealthCheckSwarm | null;
  restartPolicySwarm: RedisDeployRestartPolicySwarm | null;
  placementSwarm: RedisDeployPlacementSwarm | null;
  updateConfigSwarm: RedisDeployUpdateConfigSwarm | null;
  rollbackConfigSwarm: RedisDeployRollbackConfigSwarm | null;
  modeSwarm: RedisDeployModeSwarm | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<RedisDeployNetworkSwarm> | null;
  replicas: number;
  environmentId: string;
  serverId: string | null;
  environment: RedisDeployEnvironment;
  mounts: Array<RedisDeployMount>;
  server: RedisDeployServer | null;
};

export type RedisDeployResponse = RedisDeployResponseBody | models.ErrorT;

/** @internal */
export const RedisDeploySecurity$inboundSchema: z.ZodType<
  RedisDeploySecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type RedisDeploySecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const RedisDeploySecurity$outboundSchema: z.ZodType<
  RedisDeploySecurity$Outbound,
  z.ZodTypeDef,
  RedisDeploySecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeploySecurity$ {
  /** @deprecated use `RedisDeploySecurity$inboundSchema` instead. */
  export const inboundSchema = RedisDeploySecurity$inboundSchema;
  /** @deprecated use `RedisDeploySecurity$outboundSchema` instead. */
  export const outboundSchema = RedisDeploySecurity$outboundSchema;
  /** @deprecated use `RedisDeploySecurity$Outbound` instead. */
  export type Outbound = RedisDeploySecurity$Outbound;
}

export function redisDeploySecurityToJSON(
  redisDeploySecurity: RedisDeploySecurity,
): string {
  return JSON.stringify(
    RedisDeploySecurity$outboundSchema.parse(redisDeploySecurity),
  );
}

export function redisDeploySecurityFromJSON(
  jsonString: string,
): SafeParseResult<RedisDeploySecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisDeploySecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisDeploySecurity' from JSON`,
  );
}

/** @internal */
export const RedisDeployRequest$inboundSchema: z.ZodType<
  RedisDeployRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  redisId: z.string(),
});

/** @internal */
export type RedisDeployRequest$Outbound = {
  redisId: string;
};

/** @internal */
export const RedisDeployRequest$outboundSchema: z.ZodType<
  RedisDeployRequest$Outbound,
  z.ZodTypeDef,
  RedisDeployRequest
> = z.object({
  redisId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeployRequest$ {
  /** @deprecated use `RedisDeployRequest$inboundSchema` instead. */
  export const inboundSchema = RedisDeployRequest$inboundSchema;
  /** @deprecated use `RedisDeployRequest$outboundSchema` instead. */
  export const outboundSchema = RedisDeployRequest$outboundSchema;
  /** @deprecated use `RedisDeployRequest$Outbound` instead. */
  export type Outbound = RedisDeployRequest$Outbound;
}

export function redisDeployRequestToJSON(
  redisDeployRequest: RedisDeployRequest,
): string {
  return JSON.stringify(
    RedisDeployRequest$outboundSchema.parse(redisDeployRequest),
  );
}

export function redisDeployRequestFromJSON(
  jsonString: string,
): SafeParseResult<RedisDeployRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisDeployRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisDeployRequest' from JSON`,
  );
}

/** @internal */
export const RedisDeployApplicationStatus$inboundSchema: z.ZodNativeEnum<
  typeof RedisDeployApplicationStatus
> = z.nativeEnum(RedisDeployApplicationStatus);

/** @internal */
export const RedisDeployApplicationStatus$outboundSchema: z.ZodNativeEnum<
  typeof RedisDeployApplicationStatus
> = RedisDeployApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeployApplicationStatus$ {
  /** @deprecated use `RedisDeployApplicationStatus$inboundSchema` instead. */
  export const inboundSchema = RedisDeployApplicationStatus$inboundSchema;
  /** @deprecated use `RedisDeployApplicationStatus$outboundSchema` instead. */
  export const outboundSchema = RedisDeployApplicationStatus$outboundSchema;
}

/** @internal */
export const RedisDeployHealthCheckSwarm$inboundSchema: z.ZodType<
  RedisDeployHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Test: z.array(z.string()).optional(),
  Interval: z.number().optional(),
  Timeout: z.number().optional(),
  StartPeriod: z.number().optional(),
  Retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Test": "test",
    "Interval": "interval",
    "Timeout": "timeout",
    "StartPeriod": "startPeriod",
    "Retries": "retries",
  });
});

/** @internal */
export type RedisDeployHealthCheckSwarm$Outbound = {
  Test?: Array<string> | undefined;
  Interval?: number | undefined;
  Timeout?: number | undefined;
  StartPeriod?: number | undefined;
  Retries?: number | undefined;
};

/** @internal */
export const RedisDeployHealthCheckSwarm$outboundSchema: z.ZodType<
  RedisDeployHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  RedisDeployHealthCheckSwarm
> = z.object({
  test: z.array(z.string()).optional(),
  interval: z.number().optional(),
  timeout: z.number().optional(),
  startPeriod: z.number().optional(),
  retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    test: "Test",
    interval: "Interval",
    timeout: "Timeout",
    startPeriod: "StartPeriod",
    retries: "Retries",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeployHealthCheckSwarm$ {
  /** @deprecated use `RedisDeployHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisDeployHealthCheckSwarm$inboundSchema;
  /** @deprecated use `RedisDeployHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisDeployHealthCheckSwarm$outboundSchema;
  /** @deprecated use `RedisDeployHealthCheckSwarm$Outbound` instead. */
  export type Outbound = RedisDeployHealthCheckSwarm$Outbound;
}

export function redisDeployHealthCheckSwarmToJSON(
  redisDeployHealthCheckSwarm: RedisDeployHealthCheckSwarm,
): string {
  return JSON.stringify(
    RedisDeployHealthCheckSwarm$outboundSchema.parse(
      redisDeployHealthCheckSwarm,
    ),
  );
}

export function redisDeployHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisDeployHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisDeployHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisDeployHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const RedisDeployRestartPolicySwarm$inboundSchema: z.ZodType<
  RedisDeployRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type RedisDeployRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const RedisDeployRestartPolicySwarm$outboundSchema: z.ZodType<
  RedisDeployRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  RedisDeployRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeployRestartPolicySwarm$ {
  /** @deprecated use `RedisDeployRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema = RedisDeployRestartPolicySwarm$inboundSchema;
  /** @deprecated use `RedisDeployRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema = RedisDeployRestartPolicySwarm$outboundSchema;
  /** @deprecated use `RedisDeployRestartPolicySwarm$Outbound` instead. */
  export type Outbound = RedisDeployRestartPolicySwarm$Outbound;
}

export function redisDeployRestartPolicySwarmToJSON(
  redisDeployRestartPolicySwarm: RedisDeployRestartPolicySwarm,
): string {
  return JSON.stringify(
    RedisDeployRestartPolicySwarm$outboundSchema.parse(
      redisDeployRestartPolicySwarm,
    ),
  );
}

export function redisDeployRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisDeployRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisDeployRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisDeployRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const RedisDeploySpread$inboundSchema: z.ZodType<
  RedisDeploySpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type RedisDeploySpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const RedisDeploySpread$outboundSchema: z.ZodType<
  RedisDeploySpread$Outbound,
  z.ZodTypeDef,
  RedisDeploySpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeploySpread$ {
  /** @deprecated use `RedisDeploySpread$inboundSchema` instead. */
  export const inboundSchema = RedisDeploySpread$inboundSchema;
  /** @deprecated use `RedisDeploySpread$outboundSchema` instead. */
  export const outboundSchema = RedisDeploySpread$outboundSchema;
  /** @deprecated use `RedisDeploySpread$Outbound` instead. */
  export type Outbound = RedisDeploySpread$Outbound;
}

export function redisDeploySpreadToJSON(
  redisDeploySpread: RedisDeploySpread,
): string {
  return JSON.stringify(
    RedisDeploySpread$outboundSchema.parse(redisDeploySpread),
  );
}

export function redisDeploySpreadFromJSON(
  jsonString: string,
): SafeParseResult<RedisDeploySpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisDeploySpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisDeploySpread' from JSON`,
  );
}

/** @internal */
export const RedisDeployPreference$inboundSchema: z.ZodType<
  RedisDeployPreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => RedisDeploySpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type RedisDeployPreference$Outbound = {
  Spread: RedisDeploySpread$Outbound;
};

/** @internal */
export const RedisDeployPreference$outboundSchema: z.ZodType<
  RedisDeployPreference$Outbound,
  z.ZodTypeDef,
  RedisDeployPreference
> = z.object({
  spread: z.lazy(() => RedisDeploySpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeployPreference$ {
  /** @deprecated use `RedisDeployPreference$inboundSchema` instead. */
  export const inboundSchema = RedisDeployPreference$inboundSchema;
  /** @deprecated use `RedisDeployPreference$outboundSchema` instead. */
  export const outboundSchema = RedisDeployPreference$outboundSchema;
  /** @deprecated use `RedisDeployPreference$Outbound` instead. */
  export type Outbound = RedisDeployPreference$Outbound;
}

export function redisDeployPreferenceToJSON(
  redisDeployPreference: RedisDeployPreference,
): string {
  return JSON.stringify(
    RedisDeployPreference$outboundSchema.parse(redisDeployPreference),
  );
}

export function redisDeployPreferenceFromJSON(
  jsonString: string,
): SafeParseResult<RedisDeployPreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisDeployPreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisDeployPreference' from JSON`,
  );
}

/** @internal */
export const RedisDeployPlatform$inboundSchema: z.ZodType<
  RedisDeployPlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type RedisDeployPlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const RedisDeployPlatform$outboundSchema: z.ZodType<
  RedisDeployPlatform$Outbound,
  z.ZodTypeDef,
  RedisDeployPlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeployPlatform$ {
  /** @deprecated use `RedisDeployPlatform$inboundSchema` instead. */
  export const inboundSchema = RedisDeployPlatform$inboundSchema;
  /** @deprecated use `RedisDeployPlatform$outboundSchema` instead. */
  export const outboundSchema = RedisDeployPlatform$outboundSchema;
  /** @deprecated use `RedisDeployPlatform$Outbound` instead. */
  export type Outbound = RedisDeployPlatform$Outbound;
}

export function redisDeployPlatformToJSON(
  redisDeployPlatform: RedisDeployPlatform,
): string {
  return JSON.stringify(
    RedisDeployPlatform$outboundSchema.parse(redisDeployPlatform),
  );
}

export function redisDeployPlatformFromJSON(
  jsonString: string,
): SafeParseResult<RedisDeployPlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisDeployPlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisDeployPlatform' from JSON`,
  );
}

/** @internal */
export const RedisDeployPlacementSwarm$inboundSchema: z.ZodType<
  RedisDeployPlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  Preferences: z.array(z.lazy(() => RedisDeployPreference$inboundSchema))
    .optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => RedisDeployPlatform$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "Preferences": "preferences",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
  });
});

/** @internal */
export type RedisDeployPlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  Preferences?: Array<RedisDeployPreference$Outbound> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<RedisDeployPlatform$Outbound> | undefined;
};

/** @internal */
export const RedisDeployPlacementSwarm$outboundSchema: z.ZodType<
  RedisDeployPlacementSwarm$Outbound,
  z.ZodTypeDef,
  RedisDeployPlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  preferences: z.array(z.lazy(() => RedisDeployPreference$outboundSchema))
    .optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => RedisDeployPlatform$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    preferences: "Preferences",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeployPlacementSwarm$ {
  /** @deprecated use `RedisDeployPlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisDeployPlacementSwarm$inboundSchema;
  /** @deprecated use `RedisDeployPlacementSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisDeployPlacementSwarm$outboundSchema;
  /** @deprecated use `RedisDeployPlacementSwarm$Outbound` instead. */
  export type Outbound = RedisDeployPlacementSwarm$Outbound;
}

export function redisDeployPlacementSwarmToJSON(
  redisDeployPlacementSwarm: RedisDeployPlacementSwarm,
): string {
  return JSON.stringify(
    RedisDeployPlacementSwarm$outboundSchema.parse(redisDeployPlacementSwarm),
  );
}

export function redisDeployPlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisDeployPlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisDeployPlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisDeployPlacementSwarm' from JSON`,
  );
}

/** @internal */
export const RedisDeployUpdateConfigSwarm$inboundSchema: z.ZodType<
  RedisDeployUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type RedisDeployUpdateConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const RedisDeployUpdateConfigSwarm$outboundSchema: z.ZodType<
  RedisDeployUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  RedisDeployUpdateConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeployUpdateConfigSwarm$ {
  /** @deprecated use `RedisDeployUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisDeployUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `RedisDeployUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisDeployUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `RedisDeployUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = RedisDeployUpdateConfigSwarm$Outbound;
}

export function redisDeployUpdateConfigSwarmToJSON(
  redisDeployUpdateConfigSwarm: RedisDeployUpdateConfigSwarm,
): string {
  return JSON.stringify(
    RedisDeployUpdateConfigSwarm$outboundSchema.parse(
      redisDeployUpdateConfigSwarm,
    ),
  );
}

export function redisDeployUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisDeployUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisDeployUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisDeployUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const RedisDeployRollbackConfigSwarm$inboundSchema: z.ZodType<
  RedisDeployRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type RedisDeployRollbackConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const RedisDeployRollbackConfigSwarm$outboundSchema: z.ZodType<
  RedisDeployRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  RedisDeployRollbackConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeployRollbackConfigSwarm$ {
  /** @deprecated use `RedisDeployRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisDeployRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `RedisDeployRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisDeployRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `RedisDeployRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = RedisDeployRollbackConfigSwarm$Outbound;
}

export function redisDeployRollbackConfigSwarmToJSON(
  redisDeployRollbackConfigSwarm: RedisDeployRollbackConfigSwarm,
): string {
  return JSON.stringify(
    RedisDeployRollbackConfigSwarm$outboundSchema.parse(
      redisDeployRollbackConfigSwarm,
    ),
  );
}

export function redisDeployRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisDeployRollbackConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisDeployRollbackConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisDeployRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const RedisDeployReplicated$inboundSchema: z.ZodType<
  RedisDeployReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type RedisDeployReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const RedisDeployReplicated$outboundSchema: z.ZodType<
  RedisDeployReplicated$Outbound,
  z.ZodTypeDef,
  RedisDeployReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeployReplicated$ {
  /** @deprecated use `RedisDeployReplicated$inboundSchema` instead. */
  export const inboundSchema = RedisDeployReplicated$inboundSchema;
  /** @deprecated use `RedisDeployReplicated$outboundSchema` instead. */
  export const outboundSchema = RedisDeployReplicated$outboundSchema;
  /** @deprecated use `RedisDeployReplicated$Outbound` instead. */
  export type Outbound = RedisDeployReplicated$Outbound;
}

export function redisDeployReplicatedToJSON(
  redisDeployReplicated: RedisDeployReplicated,
): string {
  return JSON.stringify(
    RedisDeployReplicated$outboundSchema.parse(redisDeployReplicated),
  );
}

export function redisDeployReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<RedisDeployReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisDeployReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisDeployReplicated' from JSON`,
  );
}

/** @internal */
export const RedisDeployGlobal$inboundSchema: z.ZodType<
  RedisDeployGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RedisDeployGlobal$Outbound = {};

/** @internal */
export const RedisDeployGlobal$outboundSchema: z.ZodType<
  RedisDeployGlobal$Outbound,
  z.ZodTypeDef,
  RedisDeployGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeployGlobal$ {
  /** @deprecated use `RedisDeployGlobal$inboundSchema` instead. */
  export const inboundSchema = RedisDeployGlobal$inboundSchema;
  /** @deprecated use `RedisDeployGlobal$outboundSchema` instead. */
  export const outboundSchema = RedisDeployGlobal$outboundSchema;
  /** @deprecated use `RedisDeployGlobal$Outbound` instead. */
  export type Outbound = RedisDeployGlobal$Outbound;
}

export function redisDeployGlobalToJSON(
  redisDeployGlobal: RedisDeployGlobal,
): string {
  return JSON.stringify(
    RedisDeployGlobal$outboundSchema.parse(redisDeployGlobal),
  );
}

export function redisDeployGlobalFromJSON(
  jsonString: string,
): SafeParseResult<RedisDeployGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisDeployGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisDeployGlobal' from JSON`,
  );
}

/** @internal */
export const RedisDeployReplicatedJob$inboundSchema: z.ZodType<
  RedisDeployReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type RedisDeployReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const RedisDeployReplicatedJob$outboundSchema: z.ZodType<
  RedisDeployReplicatedJob$Outbound,
  z.ZodTypeDef,
  RedisDeployReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeployReplicatedJob$ {
  /** @deprecated use `RedisDeployReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = RedisDeployReplicatedJob$inboundSchema;
  /** @deprecated use `RedisDeployReplicatedJob$outboundSchema` instead. */
  export const outboundSchema = RedisDeployReplicatedJob$outboundSchema;
  /** @deprecated use `RedisDeployReplicatedJob$Outbound` instead. */
  export type Outbound = RedisDeployReplicatedJob$Outbound;
}

export function redisDeployReplicatedJobToJSON(
  redisDeployReplicatedJob: RedisDeployReplicatedJob,
): string {
  return JSON.stringify(
    RedisDeployReplicatedJob$outboundSchema.parse(redisDeployReplicatedJob),
  );
}

export function redisDeployReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<RedisDeployReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisDeployReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisDeployReplicatedJob' from JSON`,
  );
}

/** @internal */
export const RedisDeployGlobalJob$inboundSchema: z.ZodType<
  RedisDeployGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RedisDeployGlobalJob$Outbound = {};

/** @internal */
export const RedisDeployGlobalJob$outboundSchema: z.ZodType<
  RedisDeployGlobalJob$Outbound,
  z.ZodTypeDef,
  RedisDeployGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeployGlobalJob$ {
  /** @deprecated use `RedisDeployGlobalJob$inboundSchema` instead. */
  export const inboundSchema = RedisDeployGlobalJob$inboundSchema;
  /** @deprecated use `RedisDeployGlobalJob$outboundSchema` instead. */
  export const outboundSchema = RedisDeployGlobalJob$outboundSchema;
  /** @deprecated use `RedisDeployGlobalJob$Outbound` instead. */
  export type Outbound = RedisDeployGlobalJob$Outbound;
}

export function redisDeployGlobalJobToJSON(
  redisDeployGlobalJob: RedisDeployGlobalJob,
): string {
  return JSON.stringify(
    RedisDeployGlobalJob$outboundSchema.parse(redisDeployGlobalJob),
  );
}

export function redisDeployGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<RedisDeployGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisDeployGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisDeployGlobalJob' from JSON`,
  );
}

/** @internal */
export const RedisDeployModeSwarm$inboundSchema: z.ZodType<
  RedisDeployModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicated: z.lazy(() => RedisDeployReplicated$inboundSchema).optional(),
  Global: z.lazy(() => RedisDeployGlobal$inboundSchema).optional(),
  ReplicatedJob: z.lazy(() => RedisDeployReplicatedJob$inboundSchema)
    .optional(),
  GlobalJob: z.lazy(() => RedisDeployGlobalJob$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicated": "replicated",
    "Global": "global",
    "ReplicatedJob": "replicatedJob",
    "GlobalJob": "globalJob",
  });
});

/** @internal */
export type RedisDeployModeSwarm$Outbound = {
  Replicated?: RedisDeployReplicated$Outbound | undefined;
  Global?: RedisDeployGlobal$Outbound | undefined;
  ReplicatedJob?: RedisDeployReplicatedJob$Outbound | undefined;
  GlobalJob?: RedisDeployGlobalJob$Outbound | undefined;
};

/** @internal */
export const RedisDeployModeSwarm$outboundSchema: z.ZodType<
  RedisDeployModeSwarm$Outbound,
  z.ZodTypeDef,
  RedisDeployModeSwarm
> = z.object({
  replicated: z.lazy(() => RedisDeployReplicated$outboundSchema).optional(),
  global: z.lazy(() => RedisDeployGlobal$outboundSchema).optional(),
  replicatedJob: z.lazy(() => RedisDeployReplicatedJob$outboundSchema)
    .optional(),
  globalJob: z.lazy(() => RedisDeployGlobalJob$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    replicated: "Replicated",
    global: "Global",
    replicatedJob: "ReplicatedJob",
    globalJob: "GlobalJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeployModeSwarm$ {
  /** @deprecated use `RedisDeployModeSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisDeployModeSwarm$inboundSchema;
  /** @deprecated use `RedisDeployModeSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisDeployModeSwarm$outboundSchema;
  /** @deprecated use `RedisDeployModeSwarm$Outbound` instead. */
  export type Outbound = RedisDeployModeSwarm$Outbound;
}

export function redisDeployModeSwarmToJSON(
  redisDeployModeSwarm: RedisDeployModeSwarm,
): string {
  return JSON.stringify(
    RedisDeployModeSwarm$outboundSchema.parse(redisDeployModeSwarm),
  );
}

export function redisDeployModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisDeployModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisDeployModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisDeployModeSwarm' from JSON`,
  );
}

/** @internal */
export const RedisDeployDriverOpts$inboundSchema: z.ZodType<
  RedisDeployDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RedisDeployDriverOpts$Outbound = {};

/** @internal */
export const RedisDeployDriverOpts$outboundSchema: z.ZodType<
  RedisDeployDriverOpts$Outbound,
  z.ZodTypeDef,
  RedisDeployDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeployDriverOpts$ {
  /** @deprecated use `RedisDeployDriverOpts$inboundSchema` instead. */
  export const inboundSchema = RedisDeployDriverOpts$inboundSchema;
  /** @deprecated use `RedisDeployDriverOpts$outboundSchema` instead. */
  export const outboundSchema = RedisDeployDriverOpts$outboundSchema;
  /** @deprecated use `RedisDeployDriverOpts$Outbound` instead. */
  export type Outbound = RedisDeployDriverOpts$Outbound;
}

export function redisDeployDriverOptsToJSON(
  redisDeployDriverOpts: RedisDeployDriverOpts,
): string {
  return JSON.stringify(
    RedisDeployDriverOpts$outboundSchema.parse(redisDeployDriverOpts),
  );
}

export function redisDeployDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<RedisDeployDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisDeployDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisDeployDriverOpts' from JSON`,
  );
}

/** @internal */
export const RedisDeployNetworkSwarm$inboundSchema: z.ZodType<
  RedisDeployNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Target: z.string().optional(),
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => RedisDeployDriverOpts$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Target": "target",
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
  });
});

/** @internal */
export type RedisDeployNetworkSwarm$Outbound = {
  Target?: string | undefined;
  Aliases?: Array<string> | undefined;
  DriverOpts?: RedisDeployDriverOpts$Outbound | undefined;
};

/** @internal */
export const RedisDeployNetworkSwarm$outboundSchema: z.ZodType<
  RedisDeployNetworkSwarm$Outbound,
  z.ZodTypeDef,
  RedisDeployNetworkSwarm
> = z.object({
  target: z.string().optional(),
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => RedisDeployDriverOpts$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    target: "Target",
    aliases: "Aliases",
    driverOpts: "DriverOpts",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeployNetworkSwarm$ {
  /** @deprecated use `RedisDeployNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisDeployNetworkSwarm$inboundSchema;
  /** @deprecated use `RedisDeployNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisDeployNetworkSwarm$outboundSchema;
  /** @deprecated use `RedisDeployNetworkSwarm$Outbound` instead. */
  export type Outbound = RedisDeployNetworkSwarm$Outbound;
}

export function redisDeployNetworkSwarmToJSON(
  redisDeployNetworkSwarm: RedisDeployNetworkSwarm,
): string {
  return JSON.stringify(
    RedisDeployNetworkSwarm$outboundSchema.parse(redisDeployNetworkSwarm),
  );
}

export function redisDeployNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisDeployNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisDeployNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisDeployNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const RedisDeployProject$inboundSchema: z.ZodType<
  RedisDeployProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  organizationId: z.string(),
  env: z.string(),
});

/** @internal */
export type RedisDeployProject$Outbound = {
  projectId: string;
  name: string;
  description: string | null;
  createdAt: string;
  organizationId: string;
  env: string;
};

/** @internal */
export const RedisDeployProject$outboundSchema: z.ZodType<
  RedisDeployProject$Outbound,
  z.ZodTypeDef,
  RedisDeployProject
> = z.object({
  projectId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  organizationId: z.string(),
  env: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeployProject$ {
  /** @deprecated use `RedisDeployProject$inboundSchema` instead. */
  export const inboundSchema = RedisDeployProject$inboundSchema;
  /** @deprecated use `RedisDeployProject$outboundSchema` instead. */
  export const outboundSchema = RedisDeployProject$outboundSchema;
  /** @deprecated use `RedisDeployProject$Outbound` instead. */
  export type Outbound = RedisDeployProject$Outbound;
}

export function redisDeployProjectToJSON(
  redisDeployProject: RedisDeployProject,
): string {
  return JSON.stringify(
    RedisDeployProject$outboundSchema.parse(redisDeployProject),
  );
}

export function redisDeployProjectFromJSON(
  jsonString: string,
): SafeParseResult<RedisDeployProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisDeployProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisDeployProject' from JSON`,
  );
}

/** @internal */
export const RedisDeployEnvironment$inboundSchema: z.ZodType<
  RedisDeployEnvironment,
  z.ZodTypeDef,
  unknown
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
  project: z.lazy(() => RedisDeployProject$inboundSchema),
});

/** @internal */
export type RedisDeployEnvironment$Outbound = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
  project: RedisDeployProject$Outbound;
};

/** @internal */
export const RedisDeployEnvironment$outboundSchema: z.ZodType<
  RedisDeployEnvironment$Outbound,
  z.ZodTypeDef,
  RedisDeployEnvironment
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
  project: z.lazy(() => RedisDeployProject$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeployEnvironment$ {
  /** @deprecated use `RedisDeployEnvironment$inboundSchema` instead. */
  export const inboundSchema = RedisDeployEnvironment$inboundSchema;
  /** @deprecated use `RedisDeployEnvironment$outboundSchema` instead. */
  export const outboundSchema = RedisDeployEnvironment$outboundSchema;
  /** @deprecated use `RedisDeployEnvironment$Outbound` instead. */
  export type Outbound = RedisDeployEnvironment$Outbound;
}

export function redisDeployEnvironmentToJSON(
  redisDeployEnvironment: RedisDeployEnvironment,
): string {
  return JSON.stringify(
    RedisDeployEnvironment$outboundSchema.parse(redisDeployEnvironment),
  );
}

export function redisDeployEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<RedisDeployEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisDeployEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisDeployEnvironment' from JSON`,
  );
}

/** @internal */
export const RedisDeployType$inboundSchema: z.ZodNativeEnum<
  typeof RedisDeployType
> = z.nativeEnum(RedisDeployType);

/** @internal */
export const RedisDeployType$outboundSchema: z.ZodNativeEnum<
  typeof RedisDeployType
> = RedisDeployType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeployType$ {
  /** @deprecated use `RedisDeployType$inboundSchema` instead. */
  export const inboundSchema = RedisDeployType$inboundSchema;
  /** @deprecated use `RedisDeployType$outboundSchema` instead. */
  export const outboundSchema = RedisDeployType$outboundSchema;
}

/** @internal */
export const RedisDeployServiceType$inboundSchema: z.ZodNativeEnum<
  typeof RedisDeployServiceType
> = z.nativeEnum(RedisDeployServiceType);

/** @internal */
export const RedisDeployServiceType$outboundSchema: z.ZodNativeEnum<
  typeof RedisDeployServiceType
> = RedisDeployServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeployServiceType$ {
  /** @deprecated use `RedisDeployServiceType$inboundSchema` instead. */
  export const inboundSchema = RedisDeployServiceType$inboundSchema;
  /** @deprecated use `RedisDeployServiceType$outboundSchema` instead. */
  export const outboundSchema = RedisDeployServiceType$outboundSchema;
}

/** @internal */
export const RedisDeployMount$inboundSchema: z.ZodType<
  RedisDeployMount,
  z.ZodTypeDef,
  unknown
> = z.object({
  mountId: z.string(),
  type: RedisDeployType$inboundSchema,
  hostPath: z.nullable(z.string()),
  volumeName: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  content: z.nullable(z.string()),
  serviceType: RedisDeployServiceType$inboundSchema,
  mountPath: z.string(),
  applicationId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
});

/** @internal */
export type RedisDeployMount$Outbound = {
  mountId: string;
  type: string;
  hostPath: string | null;
  volumeName: string | null;
  filePath: string | null;
  content: string | null;
  serviceType: string;
  mountPath: string;
  applicationId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mysqlId: string | null;
  redisId: string | null;
  composeId: string | null;
};

/** @internal */
export const RedisDeployMount$outboundSchema: z.ZodType<
  RedisDeployMount$Outbound,
  z.ZodTypeDef,
  RedisDeployMount
> = z.object({
  mountId: z.string(),
  type: RedisDeployType$outboundSchema,
  hostPath: z.nullable(z.string()),
  volumeName: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  content: z.nullable(z.string()),
  serviceType: RedisDeployServiceType$outboundSchema,
  mountPath: z.string(),
  applicationId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeployMount$ {
  /** @deprecated use `RedisDeployMount$inboundSchema` instead. */
  export const inboundSchema = RedisDeployMount$inboundSchema;
  /** @deprecated use `RedisDeployMount$outboundSchema` instead. */
  export const outboundSchema = RedisDeployMount$outboundSchema;
  /** @deprecated use `RedisDeployMount$Outbound` instead. */
  export type Outbound = RedisDeployMount$Outbound;
}

export function redisDeployMountToJSON(
  redisDeployMount: RedisDeployMount,
): string {
  return JSON.stringify(
    RedisDeployMount$outboundSchema.parse(redisDeployMount),
  );
}

export function redisDeployMountFromJSON(
  jsonString: string,
): SafeParseResult<RedisDeployMount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisDeployMount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisDeployMount' from JSON`,
  );
}

/** @internal */
export const RedisDeployServerStatus$inboundSchema: z.ZodNativeEnum<
  typeof RedisDeployServerStatus
> = z.nativeEnum(RedisDeployServerStatus);

/** @internal */
export const RedisDeployServerStatus$outboundSchema: z.ZodNativeEnum<
  typeof RedisDeployServerStatus
> = RedisDeployServerStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeployServerStatus$ {
  /** @deprecated use `RedisDeployServerStatus$inboundSchema` instead. */
  export const inboundSchema = RedisDeployServerStatus$inboundSchema;
  /** @deprecated use `RedisDeployServerStatus$outboundSchema` instead. */
  export const outboundSchema = RedisDeployServerStatus$outboundSchema;
}

/** @internal */
export const RedisDeployMetricsConfigEnum$inboundSchema: z.ZodNativeEnum<
  typeof RedisDeployMetricsConfigEnum
> = z.nativeEnum(RedisDeployMetricsConfigEnum);

/** @internal */
export const RedisDeployMetricsConfigEnum$outboundSchema: z.ZodNativeEnum<
  typeof RedisDeployMetricsConfigEnum
> = RedisDeployMetricsConfigEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeployMetricsConfigEnum$ {
  /** @deprecated use `RedisDeployMetricsConfigEnum$inboundSchema` instead. */
  export const inboundSchema = RedisDeployMetricsConfigEnum$inboundSchema;
  /** @deprecated use `RedisDeployMetricsConfigEnum$outboundSchema` instead. */
  export const outboundSchema = RedisDeployMetricsConfigEnum$outboundSchema;
}

/** @internal */
export const RedisDeployMetricsConfigUnion1$inboundSchema: z.ZodType<
  RedisDeployMetricsConfigUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  RedisDeployMetricsConfigEnum$inboundSchema,
]);

/** @internal */
export type RedisDeployMetricsConfigUnion1$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const RedisDeployMetricsConfigUnion1$outboundSchema: z.ZodType<
  RedisDeployMetricsConfigUnion1$Outbound,
  z.ZodTypeDef,
  RedisDeployMetricsConfigUnion1
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  RedisDeployMetricsConfigEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeployMetricsConfigUnion1$ {
  /** @deprecated use `RedisDeployMetricsConfigUnion1$inboundSchema` instead. */
  export const inboundSchema = RedisDeployMetricsConfigUnion1$inboundSchema;
  /** @deprecated use `RedisDeployMetricsConfigUnion1$outboundSchema` instead. */
  export const outboundSchema = RedisDeployMetricsConfigUnion1$outboundSchema;
  /** @deprecated use `RedisDeployMetricsConfigUnion1$Outbound` instead. */
  export type Outbound = RedisDeployMetricsConfigUnion1$Outbound;
}

export function redisDeployMetricsConfigUnion1ToJSON(
  redisDeployMetricsConfigUnion1: RedisDeployMetricsConfigUnion1,
): string {
  return JSON.stringify(
    RedisDeployMetricsConfigUnion1$outboundSchema.parse(
      redisDeployMetricsConfigUnion1,
    ),
  );
}

export function redisDeployMetricsConfigUnion1FromJSON(
  jsonString: string,
): SafeParseResult<RedisDeployMetricsConfigUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisDeployMetricsConfigUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisDeployMetricsConfigUnion1' from JSON`,
  );
}

/** @internal */
export const RedisDeployMetricsConfigUnion2$inboundSchema: z.ZodType<
  RedisDeployMetricsConfigUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    RedisDeployMetricsConfigEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type RedisDeployMetricsConfigUnion2$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const RedisDeployMetricsConfigUnion2$outboundSchema: z.ZodType<
  RedisDeployMetricsConfigUnion2$Outbound,
  z.ZodTypeDef,
  RedisDeployMetricsConfigUnion2
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    RedisDeployMetricsConfigEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeployMetricsConfigUnion2$ {
  /** @deprecated use `RedisDeployMetricsConfigUnion2$inboundSchema` instead. */
  export const inboundSchema = RedisDeployMetricsConfigUnion2$inboundSchema;
  /** @deprecated use `RedisDeployMetricsConfigUnion2$outboundSchema` instead. */
  export const outboundSchema = RedisDeployMetricsConfigUnion2$outboundSchema;
  /** @deprecated use `RedisDeployMetricsConfigUnion2$Outbound` instead. */
  export type Outbound = RedisDeployMetricsConfigUnion2$Outbound;
}

export function redisDeployMetricsConfigUnion2ToJSON(
  redisDeployMetricsConfigUnion2: RedisDeployMetricsConfigUnion2,
): string {
  return JSON.stringify(
    RedisDeployMetricsConfigUnion2$outboundSchema.parse(
      redisDeployMetricsConfigUnion2,
    ),
  );
}

export function redisDeployMetricsConfigUnion2FromJSON(
  jsonString: string,
): SafeParseResult<RedisDeployMetricsConfigUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisDeployMetricsConfigUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisDeployMetricsConfigUnion2' from JSON`,
  );
}

/** @internal */
export const RedisDeployServer$inboundSchema: z.ZodType<
  RedisDeployServer,
  z.ZodTypeDef,
  unknown
> = z.object({
  serverId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  ipAddress: z.string(),
  port: z.number(),
  username: z.string(),
  appName: z.string(),
  enableDockerCleanup: z.boolean(),
  createdAt: z.string(),
  organizationId: z.string(),
  serverStatus: RedisDeployServerStatus$inboundSchema,
  command: z.string(),
  sshKeyId: z.nullable(z.string()),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      RedisDeployMetricsConfigEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
});

/** @internal */
export type RedisDeployServer$Outbound = {
  serverId: string;
  name: string;
  description: string | null;
  ipAddress: string;
  port: number;
  username: string;
  appName: string;
  enableDockerCleanup: boolean;
  createdAt: string;
  organizationId: string;
  serverStatus: string;
  command: string;
  sshKeyId: string | null;
  metricsConfig: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  };
};

/** @internal */
export const RedisDeployServer$outboundSchema: z.ZodType<
  RedisDeployServer$Outbound,
  z.ZodTypeDef,
  RedisDeployServer
> = z.object({
  serverId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  ipAddress: z.string(),
  port: z.number(),
  username: z.string(),
  appName: z.string(),
  enableDockerCleanup: z.boolean(),
  createdAt: z.string(),
  organizationId: z.string(),
  serverStatus: RedisDeployServerStatus$outboundSchema,
  command: z.string(),
  sshKeyId: z.nullable(z.string()),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      RedisDeployMetricsConfigEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeployServer$ {
  /** @deprecated use `RedisDeployServer$inboundSchema` instead. */
  export const inboundSchema = RedisDeployServer$inboundSchema;
  /** @deprecated use `RedisDeployServer$outboundSchema` instead. */
  export const outboundSchema = RedisDeployServer$outboundSchema;
  /** @deprecated use `RedisDeployServer$Outbound` instead. */
  export type Outbound = RedisDeployServer$Outbound;
}

export function redisDeployServerToJSON(
  redisDeployServer: RedisDeployServer,
): string {
  return JSON.stringify(
    RedisDeployServer$outboundSchema.parse(redisDeployServer),
  );
}

export function redisDeployServerFromJSON(
  jsonString: string,
): SafeParseResult<RedisDeployServer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisDeployServer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisDeployServer' from JSON`,
  );
}

/** @internal */
export const RedisDeployResponseBody$inboundSchema: z.ZodType<
  RedisDeployResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  redisId: z.string(),
  name: z.string(),
  appName: z.string(),
  description: z.nullable(z.string()),
  databasePassword: z.string(),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  createdAt: z.string(),
  applicationStatus: RedisDeployApplicationStatus$inboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => RedisDeployHealthCheckSwarm$inboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => RedisDeployRestartPolicySwarm$inboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => RedisDeployPlacementSwarm$inboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => RedisDeployUpdateConfigSwarm$inboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => RedisDeployRollbackConfigSwarm$inboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => RedisDeployModeSwarm$inboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => RedisDeployNetworkSwarm$inboundSchema)),
  ),
  replicas: z.number(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
  environment: z.lazy(() => RedisDeployEnvironment$inboundSchema),
  mounts: z.array(z.lazy(() => RedisDeployMount$inboundSchema)),
  server: z.nullable(z.lazy(() => RedisDeployServer$inboundSchema)),
});

/** @internal */
export type RedisDeployResponseBody$Outbound = {
  redisId: string;
  name: string;
  appName: string;
  description: string | null;
  databasePassword: string;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  externalPort: number | null;
  createdAt: string;
  applicationStatus: string;
  healthCheckSwarm: RedisDeployHealthCheckSwarm$Outbound | null;
  restartPolicySwarm: RedisDeployRestartPolicySwarm$Outbound | null;
  placementSwarm: RedisDeployPlacementSwarm$Outbound | null;
  updateConfigSwarm: RedisDeployUpdateConfigSwarm$Outbound | null;
  rollbackConfigSwarm: RedisDeployRollbackConfigSwarm$Outbound | null;
  modeSwarm: RedisDeployModeSwarm$Outbound | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<RedisDeployNetworkSwarm$Outbound> | null;
  replicas: number;
  environmentId: string;
  serverId: string | null;
  environment: RedisDeployEnvironment$Outbound;
  mounts: Array<RedisDeployMount$Outbound>;
  server: RedisDeployServer$Outbound | null;
};

/** @internal */
export const RedisDeployResponseBody$outboundSchema: z.ZodType<
  RedisDeployResponseBody$Outbound,
  z.ZodTypeDef,
  RedisDeployResponseBody
> = z.object({
  redisId: z.string(),
  name: z.string(),
  appName: z.string(),
  description: z.nullable(z.string()),
  databasePassword: z.string(),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  createdAt: z.string(),
  applicationStatus: RedisDeployApplicationStatus$outboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => RedisDeployHealthCheckSwarm$outboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => RedisDeployRestartPolicySwarm$outboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => RedisDeployPlacementSwarm$outboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => RedisDeployUpdateConfigSwarm$outboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => RedisDeployRollbackConfigSwarm$outboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => RedisDeployModeSwarm$outboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => RedisDeployNetworkSwarm$outboundSchema)),
  ),
  replicas: z.number(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
  environment: z.lazy(() => RedisDeployEnvironment$outboundSchema),
  mounts: z.array(z.lazy(() => RedisDeployMount$outboundSchema)),
  server: z.nullable(z.lazy(() => RedisDeployServer$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeployResponseBody$ {
  /** @deprecated use `RedisDeployResponseBody$inboundSchema` instead. */
  export const inboundSchema = RedisDeployResponseBody$inboundSchema;
  /** @deprecated use `RedisDeployResponseBody$outboundSchema` instead. */
  export const outboundSchema = RedisDeployResponseBody$outboundSchema;
  /** @deprecated use `RedisDeployResponseBody$Outbound` instead. */
  export type Outbound = RedisDeployResponseBody$Outbound;
}

export function redisDeployResponseBodyToJSON(
  redisDeployResponseBody: RedisDeployResponseBody,
): string {
  return JSON.stringify(
    RedisDeployResponseBody$outboundSchema.parse(redisDeployResponseBody),
  );
}

export function redisDeployResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RedisDeployResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisDeployResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisDeployResponseBody' from JSON`,
  );
}

/** @internal */
export const RedisDeployResponse$inboundSchema: z.ZodType<
  RedisDeployResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => RedisDeployResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type RedisDeployResponse$Outbound =
  | RedisDeployResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const RedisDeployResponse$outboundSchema: z.ZodType<
  RedisDeployResponse$Outbound,
  z.ZodTypeDef,
  RedisDeployResponse
> = z.union([
  z.lazy(() => RedisDeployResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisDeployResponse$ {
  /** @deprecated use `RedisDeployResponse$inboundSchema` instead. */
  export const inboundSchema = RedisDeployResponse$inboundSchema;
  /** @deprecated use `RedisDeployResponse$outboundSchema` instead. */
  export const outboundSchema = RedisDeployResponse$outboundSchema;
  /** @deprecated use `RedisDeployResponse$Outbound` instead. */
  export type Outbound = RedisDeployResponse$Outbound;
}

export function redisDeployResponseToJSON(
  redisDeployResponse: RedisDeployResponse,
): string {
  return JSON.stringify(
    RedisDeployResponse$outboundSchema.parse(redisDeployResponse),
  );
}

export function redisDeployResponseFromJSON(
  jsonString: string,
): SafeParseResult<RedisDeployResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisDeployResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisDeployResponse' from JSON`,
  );
}
