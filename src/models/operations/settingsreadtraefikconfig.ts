/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SettingsReadTraefikConfigSecurity = {
  authorization: string;
};

/** @internal */
export const SettingsReadTraefikConfigSecurity$inboundSchema: z.ZodType<
  SettingsReadTraefikConfigSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type SettingsReadTraefikConfigSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const SettingsReadTraefikConfigSecurity$outboundSchema: z.ZodType<
  SettingsReadTraefikConfigSecurity$Outbound,
  z.ZodTypeDef,
  SettingsReadTraefikConfigSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SettingsReadTraefikConfigSecurity$ {
  /** @deprecated use `SettingsReadTraefikConfigSecurity$inboundSchema` instead. */
  export const inboundSchema = SettingsReadTraefikConfigSecurity$inboundSchema;
  /** @deprecated use `SettingsReadTraefikConfigSecurity$outboundSchema` instead. */
  export const outboundSchema =
    SettingsReadTraefikConfigSecurity$outboundSchema;
  /** @deprecated use `SettingsReadTraefikConfigSecurity$Outbound` instead. */
  export type Outbound = SettingsReadTraefikConfigSecurity$Outbound;
}

export function settingsReadTraefikConfigSecurityToJSON(
  settingsReadTraefikConfigSecurity: SettingsReadTraefikConfigSecurity,
): string {
  return JSON.stringify(
    SettingsReadTraefikConfigSecurity$outboundSchema.parse(
      settingsReadTraefikConfigSecurity,
    ),
  );
}

export function settingsReadTraefikConfigSecurityFromJSON(
  jsonString: string,
): SafeParseResult<SettingsReadTraefikConfigSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SettingsReadTraefikConfigSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SettingsReadTraefikConfigSecurity' from JSON`,
  );
}
