/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type DomainOneSecurity = {
  authorization: string;
};

export type DomainOneRequest = {
  domainId: string;
};

export const DomainOneDomainType = {
  Compose: "compose",
  Application: "application",
  Preview: "preview",
} as const;
export type DomainOneDomainType = ClosedEnum<typeof DomainOneDomainType>;

export const DomainOneCertificateType = {
  Letsencrypt: "letsencrypt",
  None: "none",
  Custom: "custom",
} as const;
export type DomainOneCertificateType = ClosedEnum<
  typeof DomainOneCertificateType
>;

/**
 * Successful response
 */
export type DomainOneResponseBody = {
  domainId: string;
  host: string;
  https: boolean;
  port: number | null;
  path: string | null;
  serviceName: string | null;
  domainType: DomainOneDomainType | null;
  uniqueConfigKey: number;
  createdAt: string;
  composeId: string | null;
  customCertResolver: string | null;
  applicationId: string | null;
  previewDeploymentId: string | null;
  certificateType: DomainOneCertificateType;
  internalPath: string | null;
  stripPath: boolean;
};

export type DomainOneResponse = DomainOneResponseBody | models.ErrorT;

/** @internal */
export const DomainOneSecurity$inboundSchema: z.ZodType<
  DomainOneSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type DomainOneSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const DomainOneSecurity$outboundSchema: z.ZodType<
  DomainOneSecurity$Outbound,
  z.ZodTypeDef,
  DomainOneSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainOneSecurity$ {
  /** @deprecated use `DomainOneSecurity$inboundSchema` instead. */
  export const inboundSchema = DomainOneSecurity$inboundSchema;
  /** @deprecated use `DomainOneSecurity$outboundSchema` instead. */
  export const outboundSchema = DomainOneSecurity$outboundSchema;
  /** @deprecated use `DomainOneSecurity$Outbound` instead. */
  export type Outbound = DomainOneSecurity$Outbound;
}

export function domainOneSecurityToJSON(
  domainOneSecurity: DomainOneSecurity,
): string {
  return JSON.stringify(
    DomainOneSecurity$outboundSchema.parse(domainOneSecurity),
  );
}

export function domainOneSecurityFromJSON(
  jsonString: string,
): SafeParseResult<DomainOneSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DomainOneSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DomainOneSecurity' from JSON`,
  );
}

/** @internal */
export const DomainOneRequest$inboundSchema: z.ZodType<
  DomainOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  domainId: z.string(),
});

/** @internal */
export type DomainOneRequest$Outbound = {
  domainId: string;
};

/** @internal */
export const DomainOneRequest$outboundSchema: z.ZodType<
  DomainOneRequest$Outbound,
  z.ZodTypeDef,
  DomainOneRequest
> = z.object({
  domainId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainOneRequest$ {
  /** @deprecated use `DomainOneRequest$inboundSchema` instead. */
  export const inboundSchema = DomainOneRequest$inboundSchema;
  /** @deprecated use `DomainOneRequest$outboundSchema` instead. */
  export const outboundSchema = DomainOneRequest$outboundSchema;
  /** @deprecated use `DomainOneRequest$Outbound` instead. */
  export type Outbound = DomainOneRequest$Outbound;
}

export function domainOneRequestToJSON(
  domainOneRequest: DomainOneRequest,
): string {
  return JSON.stringify(
    DomainOneRequest$outboundSchema.parse(domainOneRequest),
  );
}

export function domainOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<DomainOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DomainOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DomainOneRequest' from JSON`,
  );
}

/** @internal */
export const DomainOneDomainType$inboundSchema: z.ZodNativeEnum<
  typeof DomainOneDomainType
> = z.nativeEnum(DomainOneDomainType);

/** @internal */
export const DomainOneDomainType$outboundSchema: z.ZodNativeEnum<
  typeof DomainOneDomainType
> = DomainOneDomainType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainOneDomainType$ {
  /** @deprecated use `DomainOneDomainType$inboundSchema` instead. */
  export const inboundSchema = DomainOneDomainType$inboundSchema;
  /** @deprecated use `DomainOneDomainType$outboundSchema` instead. */
  export const outboundSchema = DomainOneDomainType$outboundSchema;
}

/** @internal */
export const DomainOneCertificateType$inboundSchema: z.ZodNativeEnum<
  typeof DomainOneCertificateType
> = z.nativeEnum(DomainOneCertificateType);

/** @internal */
export const DomainOneCertificateType$outboundSchema: z.ZodNativeEnum<
  typeof DomainOneCertificateType
> = DomainOneCertificateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainOneCertificateType$ {
  /** @deprecated use `DomainOneCertificateType$inboundSchema` instead. */
  export const inboundSchema = DomainOneCertificateType$inboundSchema;
  /** @deprecated use `DomainOneCertificateType$outboundSchema` instead. */
  export const outboundSchema = DomainOneCertificateType$outboundSchema;
}

/** @internal */
export const DomainOneResponseBody$inboundSchema: z.ZodType<
  DomainOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  domainId: z.string(),
  host: z.string(),
  https: z.boolean(),
  port: z.nullable(z.number()),
  path: z.nullable(z.string()),
  serviceName: z.nullable(z.string()),
  domainType: z.nullable(DomainOneDomainType$inboundSchema),
  uniqueConfigKey: z.number(),
  createdAt: z.string(),
  composeId: z.nullable(z.string()),
  customCertResolver: z.nullable(z.string()),
  applicationId: z.nullable(z.string()),
  previewDeploymentId: z.nullable(z.string()),
  certificateType: DomainOneCertificateType$inboundSchema,
  internalPath: z.nullable(z.string()),
  stripPath: z.boolean(),
});

/** @internal */
export type DomainOneResponseBody$Outbound = {
  domainId: string;
  host: string;
  https: boolean;
  port: number | null;
  path: string | null;
  serviceName: string | null;
  domainType: string | null;
  uniqueConfigKey: number;
  createdAt: string;
  composeId: string | null;
  customCertResolver: string | null;
  applicationId: string | null;
  previewDeploymentId: string | null;
  certificateType: string;
  internalPath: string | null;
  stripPath: boolean;
};

/** @internal */
export const DomainOneResponseBody$outboundSchema: z.ZodType<
  DomainOneResponseBody$Outbound,
  z.ZodTypeDef,
  DomainOneResponseBody
> = z.object({
  domainId: z.string(),
  host: z.string(),
  https: z.boolean(),
  port: z.nullable(z.number()),
  path: z.nullable(z.string()),
  serviceName: z.nullable(z.string()),
  domainType: z.nullable(DomainOneDomainType$outboundSchema),
  uniqueConfigKey: z.number(),
  createdAt: z.string(),
  composeId: z.nullable(z.string()),
  customCertResolver: z.nullable(z.string()),
  applicationId: z.nullable(z.string()),
  previewDeploymentId: z.nullable(z.string()),
  certificateType: DomainOneCertificateType$outboundSchema,
  internalPath: z.nullable(z.string()),
  stripPath: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainOneResponseBody$ {
  /** @deprecated use `DomainOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = DomainOneResponseBody$inboundSchema;
  /** @deprecated use `DomainOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = DomainOneResponseBody$outboundSchema;
  /** @deprecated use `DomainOneResponseBody$Outbound` instead. */
  export type Outbound = DomainOneResponseBody$Outbound;
}

export function domainOneResponseBodyToJSON(
  domainOneResponseBody: DomainOneResponseBody,
): string {
  return JSON.stringify(
    DomainOneResponseBody$outboundSchema.parse(domainOneResponseBody),
  );
}

export function domainOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DomainOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DomainOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DomainOneResponseBody' from JSON`,
  );
}

/** @internal */
export const DomainOneResponse$inboundSchema: z.ZodType<
  DomainOneResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DomainOneResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type DomainOneResponse$Outbound =
  | DomainOneResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const DomainOneResponse$outboundSchema: z.ZodType<
  DomainOneResponse$Outbound,
  z.ZodTypeDef,
  DomainOneResponse
> = z.union([
  z.lazy(() => DomainOneResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainOneResponse$ {
  /** @deprecated use `DomainOneResponse$inboundSchema` instead. */
  export const inboundSchema = DomainOneResponse$inboundSchema;
  /** @deprecated use `DomainOneResponse$outboundSchema` instead. */
  export const outboundSchema = DomainOneResponse$outboundSchema;
  /** @deprecated use `DomainOneResponse$Outbound` instead. */
  export type Outbound = DomainOneResponse$Outbound;
}

export function domainOneResponseToJSON(
  domainOneResponse: DomainOneResponse,
): string {
  return JSON.stringify(
    DomainOneResponse$outboundSchema.parse(domainOneResponse),
  );
}

export function domainOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<DomainOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DomainOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DomainOneResponse' from JSON`,
  );
}
