/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AiDeploySecurity = {
  authorization: string;
};

export type ConfigFile = {
  content: string;
  filePath: string;
};

export type AiDeployDomain = {
  host: string;
  port: number;
  serviceName: string;
};

export type AiDeployRequest = {
  configFiles?: Array<ConfigFile> | undefined;
  description: string;
  dockerCompose: string;
  domains?: Array<AiDeployDomain> | undefined;
  envVariables: string;
  environmentId: string;
  id: string;
  name: string;
  serverId?: string | undefined;
};

/** @internal */
export const AiDeploySecurity$inboundSchema: z.ZodType<
  AiDeploySecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type AiDeploySecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const AiDeploySecurity$outboundSchema: z.ZodType<
  AiDeploySecurity$Outbound,
  z.ZodTypeDef,
  AiDeploySecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AiDeploySecurity$ {
  /** @deprecated use `AiDeploySecurity$inboundSchema` instead. */
  export const inboundSchema = AiDeploySecurity$inboundSchema;
  /** @deprecated use `AiDeploySecurity$outboundSchema` instead. */
  export const outboundSchema = AiDeploySecurity$outboundSchema;
  /** @deprecated use `AiDeploySecurity$Outbound` instead. */
  export type Outbound = AiDeploySecurity$Outbound;
}

export function aiDeploySecurityToJSON(
  aiDeploySecurity: AiDeploySecurity,
): string {
  return JSON.stringify(
    AiDeploySecurity$outboundSchema.parse(aiDeploySecurity),
  );
}

export function aiDeploySecurityFromJSON(
  jsonString: string,
): SafeParseResult<AiDeploySecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AiDeploySecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AiDeploySecurity' from JSON`,
  );
}

/** @internal */
export const ConfigFile$inboundSchema: z.ZodType<
  ConfigFile,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.string(),
  filePath: z.string(),
});

/** @internal */
export type ConfigFile$Outbound = {
  content: string;
  filePath: string;
};

/** @internal */
export const ConfigFile$outboundSchema: z.ZodType<
  ConfigFile$Outbound,
  z.ZodTypeDef,
  ConfigFile
> = z.object({
  content: z.string(),
  filePath: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfigFile$ {
  /** @deprecated use `ConfigFile$inboundSchema` instead. */
  export const inboundSchema = ConfigFile$inboundSchema;
  /** @deprecated use `ConfigFile$outboundSchema` instead. */
  export const outboundSchema = ConfigFile$outboundSchema;
  /** @deprecated use `ConfigFile$Outbound` instead. */
  export type Outbound = ConfigFile$Outbound;
}

export function configFileToJSON(configFile: ConfigFile): string {
  return JSON.stringify(ConfigFile$outboundSchema.parse(configFile));
}

export function configFileFromJSON(
  jsonString: string,
): SafeParseResult<ConfigFile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConfigFile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConfigFile' from JSON`,
  );
}

/** @internal */
export const AiDeployDomain$inboundSchema: z.ZodType<
  AiDeployDomain,
  z.ZodTypeDef,
  unknown
> = z.object({
  host: z.string(),
  port: z.number(),
  serviceName: z.string(),
});

/** @internal */
export type AiDeployDomain$Outbound = {
  host: string;
  port: number;
  serviceName: string;
};

/** @internal */
export const AiDeployDomain$outboundSchema: z.ZodType<
  AiDeployDomain$Outbound,
  z.ZodTypeDef,
  AiDeployDomain
> = z.object({
  host: z.string(),
  port: z.number(),
  serviceName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AiDeployDomain$ {
  /** @deprecated use `AiDeployDomain$inboundSchema` instead. */
  export const inboundSchema = AiDeployDomain$inboundSchema;
  /** @deprecated use `AiDeployDomain$outboundSchema` instead. */
  export const outboundSchema = AiDeployDomain$outboundSchema;
  /** @deprecated use `AiDeployDomain$Outbound` instead. */
  export type Outbound = AiDeployDomain$Outbound;
}

export function aiDeployDomainToJSON(aiDeployDomain: AiDeployDomain): string {
  return JSON.stringify(AiDeployDomain$outboundSchema.parse(aiDeployDomain));
}

export function aiDeployDomainFromJSON(
  jsonString: string,
): SafeParseResult<AiDeployDomain, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AiDeployDomain$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AiDeployDomain' from JSON`,
  );
}

/** @internal */
export const AiDeployRequest$inboundSchema: z.ZodType<
  AiDeployRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  configFiles: z.array(z.lazy(() => ConfigFile$inboundSchema)).optional(),
  description: z.string(),
  dockerCompose: z.string(),
  domains: z.array(z.lazy(() => AiDeployDomain$inboundSchema)).optional(),
  envVariables: z.string(),
  environmentId: z.string(),
  id: z.string(),
  name: z.string(),
  serverId: z.string().optional(),
});

/** @internal */
export type AiDeployRequest$Outbound = {
  configFiles?: Array<ConfigFile$Outbound> | undefined;
  description: string;
  dockerCompose: string;
  domains?: Array<AiDeployDomain$Outbound> | undefined;
  envVariables: string;
  environmentId: string;
  id: string;
  name: string;
  serverId?: string | undefined;
};

/** @internal */
export const AiDeployRequest$outboundSchema: z.ZodType<
  AiDeployRequest$Outbound,
  z.ZodTypeDef,
  AiDeployRequest
> = z.object({
  configFiles: z.array(z.lazy(() => ConfigFile$outboundSchema)).optional(),
  description: z.string(),
  dockerCompose: z.string(),
  domains: z.array(z.lazy(() => AiDeployDomain$outboundSchema)).optional(),
  envVariables: z.string(),
  environmentId: z.string(),
  id: z.string(),
  name: z.string(),
  serverId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AiDeployRequest$ {
  /** @deprecated use `AiDeployRequest$inboundSchema` instead. */
  export const inboundSchema = AiDeployRequest$inboundSchema;
  /** @deprecated use `AiDeployRequest$outboundSchema` instead. */
  export const outboundSchema = AiDeployRequest$outboundSchema;
  /** @deprecated use `AiDeployRequest$Outbound` instead. */
  export type Outbound = AiDeployRequest$Outbound;
}

export function aiDeployRequestToJSON(
  aiDeployRequest: AiDeployRequest,
): string {
  return JSON.stringify(AiDeployRequest$outboundSchema.parse(aiDeployRequest));
}

export function aiDeployRequestFromJSON(
  jsonString: string,
): SafeParseResult<AiDeployRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AiDeployRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AiDeployRequest' from JSON`,
  );
}
