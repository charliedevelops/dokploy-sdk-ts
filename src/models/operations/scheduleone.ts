/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ScheduleOneSecurity = {
  authorization: string;
};

export type ScheduleOneRequest = {
  scheduleId: string;
};

/** @internal */
export const ScheduleOneSecurity$inboundSchema: z.ZodType<
  ScheduleOneSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type ScheduleOneSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const ScheduleOneSecurity$outboundSchema: z.ZodType<
  ScheduleOneSecurity$Outbound,
  z.ZodTypeDef,
  ScheduleOneSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScheduleOneSecurity$ {
  /** @deprecated use `ScheduleOneSecurity$inboundSchema` instead. */
  export const inboundSchema = ScheduleOneSecurity$inboundSchema;
  /** @deprecated use `ScheduleOneSecurity$outboundSchema` instead. */
  export const outboundSchema = ScheduleOneSecurity$outboundSchema;
  /** @deprecated use `ScheduleOneSecurity$Outbound` instead. */
  export type Outbound = ScheduleOneSecurity$Outbound;
}

export function scheduleOneSecurityToJSON(
  scheduleOneSecurity: ScheduleOneSecurity,
): string {
  return JSON.stringify(
    ScheduleOneSecurity$outboundSchema.parse(scheduleOneSecurity),
  );
}

export function scheduleOneSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ScheduleOneSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScheduleOneSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScheduleOneSecurity' from JSON`,
  );
}

/** @internal */
export const ScheduleOneRequest$inboundSchema: z.ZodType<
  ScheduleOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  scheduleId: z.string(),
});

/** @internal */
export type ScheduleOneRequest$Outbound = {
  scheduleId: string;
};

/** @internal */
export const ScheduleOneRequest$outboundSchema: z.ZodType<
  ScheduleOneRequest$Outbound,
  z.ZodTypeDef,
  ScheduleOneRequest
> = z.object({
  scheduleId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScheduleOneRequest$ {
  /** @deprecated use `ScheduleOneRequest$inboundSchema` instead. */
  export const inboundSchema = ScheduleOneRequest$inboundSchema;
  /** @deprecated use `ScheduleOneRequest$outboundSchema` instead. */
  export const outboundSchema = ScheduleOneRequest$outboundSchema;
  /** @deprecated use `ScheduleOneRequest$Outbound` instead. */
  export type Outbound = ScheduleOneRequest$Outbound;
}

export function scheduleOneRequestToJSON(
  scheduleOneRequest: ScheduleOneRequest,
): string {
  return JSON.stringify(
    ScheduleOneRequest$outboundSchema.parse(scheduleOneRequest),
  );
}

export function scheduleOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<ScheduleOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScheduleOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScheduleOneRequest' from JSON`,
  );
}
