/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SettingsIsCloudSecurity = {
  authorization: string;
};

/** @internal */
export const SettingsIsCloudSecurity$inboundSchema: z.ZodType<
  SettingsIsCloudSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type SettingsIsCloudSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const SettingsIsCloudSecurity$outboundSchema: z.ZodType<
  SettingsIsCloudSecurity$Outbound,
  z.ZodTypeDef,
  SettingsIsCloudSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SettingsIsCloudSecurity$ {
  /** @deprecated use `SettingsIsCloudSecurity$inboundSchema` instead. */
  export const inboundSchema = SettingsIsCloudSecurity$inboundSchema;
  /** @deprecated use `SettingsIsCloudSecurity$outboundSchema` instead. */
  export const outboundSchema = SettingsIsCloudSecurity$outboundSchema;
  /** @deprecated use `SettingsIsCloudSecurity$Outbound` instead. */
  export type Outbound = SettingsIsCloudSecurity$Outbound;
}

export function settingsIsCloudSecurityToJSON(
  settingsIsCloudSecurity: SettingsIsCloudSecurity,
): string {
  return JSON.stringify(
    SettingsIsCloudSecurity$outboundSchema.parse(settingsIsCloudSecurity),
  );
}

export function settingsIsCloudSecurityFromJSON(
  jsonString: string,
): SafeParseResult<SettingsIsCloudSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SettingsIsCloudSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SettingsIsCloudSecurity' from JSON`,
  );
}
