/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NotificationUpdateEmailSecurity = {
  authorization: string;
};

export type NotificationUpdateEmailRequest = {
  appBuildError?: boolean | undefined;
  databaseBackup?: boolean | undefined;
  dokployRestart?: boolean | undefined;
  name?: string | undefined;
  appDeploy?: boolean | undefined;
  dockerCleanup?: boolean | undefined;
  serverThreshold?: boolean | undefined;
  smtpServer?: string | undefined;
  smtpPort?: number | undefined;
  username?: string | undefined;
  password?: string | undefined;
  fromAddress?: string | undefined;
  toAddresses?: Array<string> | undefined;
  notificationId: string;
  emailId: string;
  organizationId?: string | undefined;
};

/** @internal */
export const NotificationUpdateEmailSecurity$inboundSchema: z.ZodType<
  NotificationUpdateEmailSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type NotificationUpdateEmailSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const NotificationUpdateEmailSecurity$outboundSchema: z.ZodType<
  NotificationUpdateEmailSecurity$Outbound,
  z.ZodTypeDef,
  NotificationUpdateEmailSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationUpdateEmailSecurity$ {
  /** @deprecated use `NotificationUpdateEmailSecurity$inboundSchema` instead. */
  export const inboundSchema = NotificationUpdateEmailSecurity$inboundSchema;
  /** @deprecated use `NotificationUpdateEmailSecurity$outboundSchema` instead. */
  export const outboundSchema = NotificationUpdateEmailSecurity$outboundSchema;
  /** @deprecated use `NotificationUpdateEmailSecurity$Outbound` instead. */
  export type Outbound = NotificationUpdateEmailSecurity$Outbound;
}

export function notificationUpdateEmailSecurityToJSON(
  notificationUpdateEmailSecurity: NotificationUpdateEmailSecurity,
): string {
  return JSON.stringify(
    NotificationUpdateEmailSecurity$outboundSchema.parse(
      notificationUpdateEmailSecurity,
    ),
  );
}

export function notificationUpdateEmailSecurityFromJSON(
  jsonString: string,
): SafeParseResult<NotificationUpdateEmailSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationUpdateEmailSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationUpdateEmailSecurity' from JSON`,
  );
}

/** @internal */
export const NotificationUpdateEmailRequest$inboundSchema: z.ZodType<
  NotificationUpdateEmailRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appBuildError: z.boolean().optional(),
  databaseBackup: z.boolean().optional(),
  dokployRestart: z.boolean().optional(),
  name: z.string().optional(),
  appDeploy: z.boolean().optional(),
  dockerCleanup: z.boolean().optional(),
  serverThreshold: z.boolean().optional(),
  smtpServer: z.string().optional(),
  smtpPort: z.number().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  fromAddress: z.string().optional(),
  toAddresses: z.array(z.string()).optional(),
  notificationId: z.string(),
  emailId: z.string(),
  organizationId: z.string().optional(),
});

/** @internal */
export type NotificationUpdateEmailRequest$Outbound = {
  appBuildError?: boolean | undefined;
  databaseBackup?: boolean | undefined;
  dokployRestart?: boolean | undefined;
  name?: string | undefined;
  appDeploy?: boolean | undefined;
  dockerCleanup?: boolean | undefined;
  serverThreshold?: boolean | undefined;
  smtpServer?: string | undefined;
  smtpPort?: number | undefined;
  username?: string | undefined;
  password?: string | undefined;
  fromAddress?: string | undefined;
  toAddresses?: Array<string> | undefined;
  notificationId: string;
  emailId: string;
  organizationId?: string | undefined;
};

/** @internal */
export const NotificationUpdateEmailRequest$outboundSchema: z.ZodType<
  NotificationUpdateEmailRequest$Outbound,
  z.ZodTypeDef,
  NotificationUpdateEmailRequest
> = z.object({
  appBuildError: z.boolean().optional(),
  databaseBackup: z.boolean().optional(),
  dokployRestart: z.boolean().optional(),
  name: z.string().optional(),
  appDeploy: z.boolean().optional(),
  dockerCleanup: z.boolean().optional(),
  serverThreshold: z.boolean().optional(),
  smtpServer: z.string().optional(),
  smtpPort: z.number().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  fromAddress: z.string().optional(),
  toAddresses: z.array(z.string()).optional(),
  notificationId: z.string(),
  emailId: z.string(),
  organizationId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationUpdateEmailRequest$ {
  /** @deprecated use `NotificationUpdateEmailRequest$inboundSchema` instead. */
  export const inboundSchema = NotificationUpdateEmailRequest$inboundSchema;
  /** @deprecated use `NotificationUpdateEmailRequest$outboundSchema` instead. */
  export const outboundSchema = NotificationUpdateEmailRequest$outboundSchema;
  /** @deprecated use `NotificationUpdateEmailRequest$Outbound` instead. */
  export type Outbound = NotificationUpdateEmailRequest$Outbound;
}

export function notificationUpdateEmailRequestToJSON(
  notificationUpdateEmailRequest: NotificationUpdateEmailRequest,
): string {
  return JSON.stringify(
    NotificationUpdateEmailRequest$outboundSchema.parse(
      notificationUpdateEmailRequest,
    ),
  );
}

export function notificationUpdateEmailRequestFromJSON(
  jsonString: string,
): SafeParseResult<NotificationUpdateEmailRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationUpdateEmailRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationUpdateEmailRequest' from JSON`,
  );
}
