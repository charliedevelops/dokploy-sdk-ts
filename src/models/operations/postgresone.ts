/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PostgresOneSecurity = {
  authorization: string;
};

export type PostgresOneRequest = {
  postgresId: string;
};

export const PostgresOneApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type PostgresOneApplicationStatus = ClosedEnum<
  typeof PostgresOneApplicationStatus
>;

export type PostgresOneHealthCheckSwarm = {
  test?: Array<string> | undefined;
  interval?: number | undefined;
  timeout?: number | undefined;
  startPeriod?: number | undefined;
  retries?: number | undefined;
};

export type PostgresOneRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type PostgresOneSpread = {
  spreadDescriptor: string;
};

export type PostgresOnePreference = {
  spread: PostgresOneSpread;
};

export type PostgresOnePlatform = {
  architecture: string;
  os: string;
};

export type PostgresOnePlacementSwarm = {
  constraints?: Array<string> | undefined;
  preferences?: Array<PostgresOnePreference> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<PostgresOnePlatform> | undefined;
};

export type PostgresOneUpdateConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type PostgresOneRollbackConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type PostgresOneReplicated = {
  replicas?: number | undefined;
};

export type PostgresOneGlobal = {};

export type PostgresOneReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type PostgresOneGlobalJob = {};

export type PostgresOneModeSwarm = {
  replicated?: PostgresOneReplicated | undefined;
  global?: PostgresOneGlobal | undefined;
  replicatedJob?: PostgresOneReplicatedJob | undefined;
  globalJob?: PostgresOneGlobalJob | undefined;
};

export type PostgresOneDriverOpts = {};

export type PostgresOneNetworkSwarm = {
  target?: string | undefined;
  aliases?: Array<string> | undefined;
  driverOpts?: PostgresOneDriverOpts | undefined;
};

export type PostgresOneProject = {
  projectId: string;
  name: string;
  description: string | null;
  createdAt: string;
  organizationId: string;
  env: string;
};

export type PostgresOneEnvironment = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
  project: PostgresOneProject;
};

export const PostgresOneType = {
  Bind: "bind",
  Volume: "volume",
  File: "file",
} as const;
export type PostgresOneType = ClosedEnum<typeof PostgresOneType>;

export const PostgresOneServiceType = {
  Application: "application",
  Postgres: "postgres",
  Mysql: "mysql",
  Mariadb: "mariadb",
  Mongo: "mongo",
  Redis: "redis",
  Compose: "compose",
} as const;
export type PostgresOneServiceType = ClosedEnum<typeof PostgresOneServiceType>;

export type PostgresOneMount = {
  mountId: string;
  type: PostgresOneType;
  hostPath: string | null;
  volumeName: string | null;
  filePath: string | null;
  content: string | null;
  serviceType: PostgresOneServiceType;
  mountPath: string;
  applicationId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mysqlId: string | null;
  redisId: string | null;
  composeId: string | null;
};

export const PostgresOneServerStatus = {
  Active: "active",
  Inactive: "inactive",
} as const;
export type PostgresOneServerStatus = ClosedEnum<
  typeof PostgresOneServerStatus
>;

export const PostgresOneMetricsConfigEnum = {
  Null: "null",
} as const;
export type PostgresOneMetricsConfigEnum = ClosedEnum<
  typeof PostgresOneMetricsConfigEnum
>;

export type PostgresOneMetricsConfigUnion1 =
  | string
  | number
  | boolean
  | PostgresOneMetricsConfigEnum;

export type PostgresOneMetricsConfigUnion2 =
  | string
  | number
  | boolean
  | PostgresOneMetricsConfigEnum
  | Array<any>
  | { [k: string]: any };

export type PostgresOneServer = {
  serverId: string;
  name: string;
  description: string | null;
  ipAddress: string;
  port: number;
  username: string;
  appName: string;
  enableDockerCleanup: boolean;
  createdAt: string;
  organizationId: string;
  serverStatus: PostgresOneServerStatus;
  command: string;
  sshKeyId: string | null;
  metricsConfig:
    | string
    | number
    | boolean
    | PostgresOneMetricsConfigEnum
    | Array<any>
    | { [k: string]: any };
};

export const PostgresOneBackupType = {
  Database: "database",
  Compose: "compose",
} as const;
export type PostgresOneBackupType = ClosedEnum<typeof PostgresOneBackupType>;

export const PostgresOneDatabaseType = {
  Postgres: "postgres",
  Mariadb: "mariadb",
  Mysql: "mysql",
  Mongo: "mongo",
  WebServer: "web-server",
} as const;
export type PostgresOneDatabaseType = ClosedEnum<
  typeof PostgresOneDatabaseType
>;

export const PostgresOneMetadataEnum = {
  Null: "null",
} as const;
export type PostgresOneMetadataEnum = ClosedEnum<
  typeof PostgresOneMetadataEnum
>;

export type PostgresOnePostgres = {
  databaseUser: string;
};

export type PostgresOneMariadb = {
  databaseUser: string;
  databasePassword: string;
};

export type PostgresOneMongo = {
  databaseUser: string;
  databasePassword: string;
};

export type PostgresOneMysql = {
  databaseRootPassword: string;
};

export type PostgresOneMetadata = {
  postgres?: PostgresOnePostgres | undefined;
  mariadb?: PostgresOneMariadb | undefined;
  mongo?: PostgresOneMongo | undefined;
  mysql?: PostgresOneMysql | undefined;
};

export type PostgresOneMetadataUnion =
  | PostgresOneMetadata
  | PostgresOneMetadataEnum;

export type PostgresOneBackup = {
  backupId: string;
  appName: string;
  schedule: string;
  enabled: boolean | null;
  database: string;
  prefix: string;
  serviceName: string | null;
  destinationId: string;
  keepLatestCount: number | null;
  backupType: PostgresOneBackupType;
  databaseType: PostgresOneDatabaseType;
  composeId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mysqlId: string | null;
  mongoId: string | null;
  userId: string | null;
  metadata?: PostgresOneMetadata | PostgresOneMetadataEnum | null | undefined;
};

/**
 * Successful response
 */
export type PostgresOneResponseBody = {
  postgresId: string;
  name: string;
  appName: string;
  databaseName: string;
  databaseUser: string;
  databasePassword: string;
  description: string | null;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  externalPort: number | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  applicationStatus: PostgresOneApplicationStatus;
  healthCheckSwarm: PostgresOneHealthCheckSwarm | null;
  restartPolicySwarm: PostgresOneRestartPolicySwarm | null;
  placementSwarm: PostgresOnePlacementSwarm | null;
  updateConfigSwarm: PostgresOneUpdateConfigSwarm | null;
  rollbackConfigSwarm: PostgresOneRollbackConfigSwarm | null;
  modeSwarm: PostgresOneModeSwarm | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<PostgresOneNetworkSwarm> | null;
  replicas: number;
  createdAt: string;
  environmentId: string;
  serverId: string | null;
  environment: PostgresOneEnvironment;
  mounts: Array<PostgresOneMount>;
  server: PostgresOneServer | null;
  backups: Array<PostgresOneBackup>;
};

export type PostgresOneResponse = PostgresOneResponseBody | models.ErrorT;

/** @internal */
export const PostgresOneSecurity$inboundSchema: z.ZodType<
  PostgresOneSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type PostgresOneSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const PostgresOneSecurity$outboundSchema: z.ZodType<
  PostgresOneSecurity$Outbound,
  z.ZodTypeDef,
  PostgresOneSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneSecurity$ {
  /** @deprecated use `PostgresOneSecurity$inboundSchema` instead. */
  export const inboundSchema = PostgresOneSecurity$inboundSchema;
  /** @deprecated use `PostgresOneSecurity$outboundSchema` instead. */
  export const outboundSchema = PostgresOneSecurity$outboundSchema;
  /** @deprecated use `PostgresOneSecurity$Outbound` instead. */
  export type Outbound = PostgresOneSecurity$Outbound;
}

export function postgresOneSecurityToJSON(
  postgresOneSecurity: PostgresOneSecurity,
): string {
  return JSON.stringify(
    PostgresOneSecurity$outboundSchema.parse(postgresOneSecurity),
  );
}

export function postgresOneSecurityFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOneSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOneSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOneSecurity' from JSON`,
  );
}

/** @internal */
export const PostgresOneRequest$inboundSchema: z.ZodType<
  PostgresOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  postgresId: z.string(),
});

/** @internal */
export type PostgresOneRequest$Outbound = {
  postgresId: string;
};

/** @internal */
export const PostgresOneRequest$outboundSchema: z.ZodType<
  PostgresOneRequest$Outbound,
  z.ZodTypeDef,
  PostgresOneRequest
> = z.object({
  postgresId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneRequest$ {
  /** @deprecated use `PostgresOneRequest$inboundSchema` instead. */
  export const inboundSchema = PostgresOneRequest$inboundSchema;
  /** @deprecated use `PostgresOneRequest$outboundSchema` instead. */
  export const outboundSchema = PostgresOneRequest$outboundSchema;
  /** @deprecated use `PostgresOneRequest$Outbound` instead. */
  export type Outbound = PostgresOneRequest$Outbound;
}

export function postgresOneRequestToJSON(
  postgresOneRequest: PostgresOneRequest,
): string {
  return JSON.stringify(
    PostgresOneRequest$outboundSchema.parse(postgresOneRequest),
  );
}

export function postgresOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOneRequest' from JSON`,
  );
}

/** @internal */
export const PostgresOneApplicationStatus$inboundSchema: z.ZodNativeEnum<
  typeof PostgresOneApplicationStatus
> = z.nativeEnum(PostgresOneApplicationStatus);

/** @internal */
export const PostgresOneApplicationStatus$outboundSchema: z.ZodNativeEnum<
  typeof PostgresOneApplicationStatus
> = PostgresOneApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneApplicationStatus$ {
  /** @deprecated use `PostgresOneApplicationStatus$inboundSchema` instead. */
  export const inboundSchema = PostgresOneApplicationStatus$inboundSchema;
  /** @deprecated use `PostgresOneApplicationStatus$outboundSchema` instead. */
  export const outboundSchema = PostgresOneApplicationStatus$outboundSchema;
}

/** @internal */
export const PostgresOneHealthCheckSwarm$inboundSchema: z.ZodType<
  PostgresOneHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Test: z.array(z.string()).optional(),
  Interval: z.number().optional(),
  Timeout: z.number().optional(),
  StartPeriod: z.number().optional(),
  Retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Test": "test",
    "Interval": "interval",
    "Timeout": "timeout",
    "StartPeriod": "startPeriod",
    "Retries": "retries",
  });
});

/** @internal */
export type PostgresOneHealthCheckSwarm$Outbound = {
  Test?: Array<string> | undefined;
  Interval?: number | undefined;
  Timeout?: number | undefined;
  StartPeriod?: number | undefined;
  Retries?: number | undefined;
};

/** @internal */
export const PostgresOneHealthCheckSwarm$outboundSchema: z.ZodType<
  PostgresOneHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  PostgresOneHealthCheckSwarm
> = z.object({
  test: z.array(z.string()).optional(),
  interval: z.number().optional(),
  timeout: z.number().optional(),
  startPeriod: z.number().optional(),
  retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    test: "Test",
    interval: "Interval",
    timeout: "Timeout",
    startPeriod: "StartPeriod",
    retries: "Retries",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneHealthCheckSwarm$ {
  /** @deprecated use `PostgresOneHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresOneHealthCheckSwarm$inboundSchema;
  /** @deprecated use `PostgresOneHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema = PostgresOneHealthCheckSwarm$outboundSchema;
  /** @deprecated use `PostgresOneHealthCheckSwarm$Outbound` instead. */
  export type Outbound = PostgresOneHealthCheckSwarm$Outbound;
}

export function postgresOneHealthCheckSwarmToJSON(
  postgresOneHealthCheckSwarm: PostgresOneHealthCheckSwarm,
): string {
  return JSON.stringify(
    PostgresOneHealthCheckSwarm$outboundSchema.parse(
      postgresOneHealthCheckSwarm,
    ),
  );
}

export function postgresOneHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOneHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOneHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOneHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresOneRestartPolicySwarm$inboundSchema: z.ZodType<
  PostgresOneRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type PostgresOneRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const PostgresOneRestartPolicySwarm$outboundSchema: z.ZodType<
  PostgresOneRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  PostgresOneRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneRestartPolicySwarm$ {
  /** @deprecated use `PostgresOneRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresOneRestartPolicySwarm$inboundSchema;
  /** @deprecated use `PostgresOneRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema = PostgresOneRestartPolicySwarm$outboundSchema;
  /** @deprecated use `PostgresOneRestartPolicySwarm$Outbound` instead. */
  export type Outbound = PostgresOneRestartPolicySwarm$Outbound;
}

export function postgresOneRestartPolicySwarmToJSON(
  postgresOneRestartPolicySwarm: PostgresOneRestartPolicySwarm,
): string {
  return JSON.stringify(
    PostgresOneRestartPolicySwarm$outboundSchema.parse(
      postgresOneRestartPolicySwarm,
    ),
  );
}

export function postgresOneRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOneRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOneRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOneRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const PostgresOneSpread$inboundSchema: z.ZodType<
  PostgresOneSpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type PostgresOneSpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const PostgresOneSpread$outboundSchema: z.ZodType<
  PostgresOneSpread$Outbound,
  z.ZodTypeDef,
  PostgresOneSpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneSpread$ {
  /** @deprecated use `PostgresOneSpread$inboundSchema` instead. */
  export const inboundSchema = PostgresOneSpread$inboundSchema;
  /** @deprecated use `PostgresOneSpread$outboundSchema` instead. */
  export const outboundSchema = PostgresOneSpread$outboundSchema;
  /** @deprecated use `PostgresOneSpread$Outbound` instead. */
  export type Outbound = PostgresOneSpread$Outbound;
}

export function postgresOneSpreadToJSON(
  postgresOneSpread: PostgresOneSpread,
): string {
  return JSON.stringify(
    PostgresOneSpread$outboundSchema.parse(postgresOneSpread),
  );
}

export function postgresOneSpreadFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOneSpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOneSpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOneSpread' from JSON`,
  );
}

/** @internal */
export const PostgresOnePreference$inboundSchema: z.ZodType<
  PostgresOnePreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => PostgresOneSpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type PostgresOnePreference$Outbound = {
  Spread: PostgresOneSpread$Outbound;
};

/** @internal */
export const PostgresOnePreference$outboundSchema: z.ZodType<
  PostgresOnePreference$Outbound,
  z.ZodTypeDef,
  PostgresOnePreference
> = z.object({
  spread: z.lazy(() => PostgresOneSpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOnePreference$ {
  /** @deprecated use `PostgresOnePreference$inboundSchema` instead. */
  export const inboundSchema = PostgresOnePreference$inboundSchema;
  /** @deprecated use `PostgresOnePreference$outboundSchema` instead. */
  export const outboundSchema = PostgresOnePreference$outboundSchema;
  /** @deprecated use `PostgresOnePreference$Outbound` instead. */
  export type Outbound = PostgresOnePreference$Outbound;
}

export function postgresOnePreferenceToJSON(
  postgresOnePreference: PostgresOnePreference,
): string {
  return JSON.stringify(
    PostgresOnePreference$outboundSchema.parse(postgresOnePreference),
  );
}

export function postgresOnePreferenceFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOnePreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOnePreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOnePreference' from JSON`,
  );
}

/** @internal */
export const PostgresOnePlatform$inboundSchema: z.ZodType<
  PostgresOnePlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type PostgresOnePlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const PostgresOnePlatform$outboundSchema: z.ZodType<
  PostgresOnePlatform$Outbound,
  z.ZodTypeDef,
  PostgresOnePlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOnePlatform$ {
  /** @deprecated use `PostgresOnePlatform$inboundSchema` instead. */
  export const inboundSchema = PostgresOnePlatform$inboundSchema;
  /** @deprecated use `PostgresOnePlatform$outboundSchema` instead. */
  export const outboundSchema = PostgresOnePlatform$outboundSchema;
  /** @deprecated use `PostgresOnePlatform$Outbound` instead. */
  export type Outbound = PostgresOnePlatform$Outbound;
}

export function postgresOnePlatformToJSON(
  postgresOnePlatform: PostgresOnePlatform,
): string {
  return JSON.stringify(
    PostgresOnePlatform$outboundSchema.parse(postgresOnePlatform),
  );
}

export function postgresOnePlatformFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOnePlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOnePlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOnePlatform' from JSON`,
  );
}

/** @internal */
export const PostgresOnePlacementSwarm$inboundSchema: z.ZodType<
  PostgresOnePlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  Preferences: z.array(z.lazy(() => PostgresOnePreference$inboundSchema))
    .optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => PostgresOnePlatform$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "Preferences": "preferences",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
  });
});

/** @internal */
export type PostgresOnePlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  Preferences?: Array<PostgresOnePreference$Outbound> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<PostgresOnePlatform$Outbound> | undefined;
};

/** @internal */
export const PostgresOnePlacementSwarm$outboundSchema: z.ZodType<
  PostgresOnePlacementSwarm$Outbound,
  z.ZodTypeDef,
  PostgresOnePlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  preferences: z.array(z.lazy(() => PostgresOnePreference$outboundSchema))
    .optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => PostgresOnePlatform$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    preferences: "Preferences",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOnePlacementSwarm$ {
  /** @deprecated use `PostgresOnePlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresOnePlacementSwarm$inboundSchema;
  /** @deprecated use `PostgresOnePlacementSwarm$outboundSchema` instead. */
  export const outboundSchema = PostgresOnePlacementSwarm$outboundSchema;
  /** @deprecated use `PostgresOnePlacementSwarm$Outbound` instead. */
  export type Outbound = PostgresOnePlacementSwarm$Outbound;
}

export function postgresOnePlacementSwarmToJSON(
  postgresOnePlacementSwarm: PostgresOnePlacementSwarm,
): string {
  return JSON.stringify(
    PostgresOnePlacementSwarm$outboundSchema.parse(postgresOnePlacementSwarm),
  );
}

export function postgresOnePlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOnePlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOnePlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOnePlacementSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresOneUpdateConfigSwarm$inboundSchema: z.ZodType<
  PostgresOneUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type PostgresOneUpdateConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const PostgresOneUpdateConfigSwarm$outboundSchema: z.ZodType<
  PostgresOneUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  PostgresOneUpdateConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneUpdateConfigSwarm$ {
  /** @deprecated use `PostgresOneUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresOneUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `PostgresOneUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = PostgresOneUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `PostgresOneUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = PostgresOneUpdateConfigSwarm$Outbound;
}

export function postgresOneUpdateConfigSwarmToJSON(
  postgresOneUpdateConfigSwarm: PostgresOneUpdateConfigSwarm,
): string {
  return JSON.stringify(
    PostgresOneUpdateConfigSwarm$outboundSchema.parse(
      postgresOneUpdateConfigSwarm,
    ),
  );
}

export function postgresOneUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOneUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOneUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOneUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresOneRollbackConfigSwarm$inboundSchema: z.ZodType<
  PostgresOneRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type PostgresOneRollbackConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const PostgresOneRollbackConfigSwarm$outboundSchema: z.ZodType<
  PostgresOneRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  PostgresOneRollbackConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneRollbackConfigSwarm$ {
  /** @deprecated use `PostgresOneRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresOneRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `PostgresOneRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = PostgresOneRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `PostgresOneRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = PostgresOneRollbackConfigSwarm$Outbound;
}

export function postgresOneRollbackConfigSwarmToJSON(
  postgresOneRollbackConfigSwarm: PostgresOneRollbackConfigSwarm,
): string {
  return JSON.stringify(
    PostgresOneRollbackConfigSwarm$outboundSchema.parse(
      postgresOneRollbackConfigSwarm,
    ),
  );
}

export function postgresOneRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOneRollbackConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOneRollbackConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOneRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresOneReplicated$inboundSchema: z.ZodType<
  PostgresOneReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type PostgresOneReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const PostgresOneReplicated$outboundSchema: z.ZodType<
  PostgresOneReplicated$Outbound,
  z.ZodTypeDef,
  PostgresOneReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneReplicated$ {
  /** @deprecated use `PostgresOneReplicated$inboundSchema` instead. */
  export const inboundSchema = PostgresOneReplicated$inboundSchema;
  /** @deprecated use `PostgresOneReplicated$outboundSchema` instead. */
  export const outboundSchema = PostgresOneReplicated$outboundSchema;
  /** @deprecated use `PostgresOneReplicated$Outbound` instead. */
  export type Outbound = PostgresOneReplicated$Outbound;
}

export function postgresOneReplicatedToJSON(
  postgresOneReplicated: PostgresOneReplicated,
): string {
  return JSON.stringify(
    PostgresOneReplicated$outboundSchema.parse(postgresOneReplicated),
  );
}

export function postgresOneReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOneReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOneReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOneReplicated' from JSON`,
  );
}

/** @internal */
export const PostgresOneGlobal$inboundSchema: z.ZodType<
  PostgresOneGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostgresOneGlobal$Outbound = {};

/** @internal */
export const PostgresOneGlobal$outboundSchema: z.ZodType<
  PostgresOneGlobal$Outbound,
  z.ZodTypeDef,
  PostgresOneGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneGlobal$ {
  /** @deprecated use `PostgresOneGlobal$inboundSchema` instead. */
  export const inboundSchema = PostgresOneGlobal$inboundSchema;
  /** @deprecated use `PostgresOneGlobal$outboundSchema` instead. */
  export const outboundSchema = PostgresOneGlobal$outboundSchema;
  /** @deprecated use `PostgresOneGlobal$Outbound` instead. */
  export type Outbound = PostgresOneGlobal$Outbound;
}

export function postgresOneGlobalToJSON(
  postgresOneGlobal: PostgresOneGlobal,
): string {
  return JSON.stringify(
    PostgresOneGlobal$outboundSchema.parse(postgresOneGlobal),
  );
}

export function postgresOneGlobalFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOneGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOneGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOneGlobal' from JSON`,
  );
}

/** @internal */
export const PostgresOneReplicatedJob$inboundSchema: z.ZodType<
  PostgresOneReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type PostgresOneReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const PostgresOneReplicatedJob$outboundSchema: z.ZodType<
  PostgresOneReplicatedJob$Outbound,
  z.ZodTypeDef,
  PostgresOneReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneReplicatedJob$ {
  /** @deprecated use `PostgresOneReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = PostgresOneReplicatedJob$inboundSchema;
  /** @deprecated use `PostgresOneReplicatedJob$outboundSchema` instead. */
  export const outboundSchema = PostgresOneReplicatedJob$outboundSchema;
  /** @deprecated use `PostgresOneReplicatedJob$Outbound` instead. */
  export type Outbound = PostgresOneReplicatedJob$Outbound;
}

export function postgresOneReplicatedJobToJSON(
  postgresOneReplicatedJob: PostgresOneReplicatedJob,
): string {
  return JSON.stringify(
    PostgresOneReplicatedJob$outboundSchema.parse(postgresOneReplicatedJob),
  );
}

export function postgresOneReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOneReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOneReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOneReplicatedJob' from JSON`,
  );
}

/** @internal */
export const PostgresOneGlobalJob$inboundSchema: z.ZodType<
  PostgresOneGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostgresOneGlobalJob$Outbound = {};

/** @internal */
export const PostgresOneGlobalJob$outboundSchema: z.ZodType<
  PostgresOneGlobalJob$Outbound,
  z.ZodTypeDef,
  PostgresOneGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneGlobalJob$ {
  /** @deprecated use `PostgresOneGlobalJob$inboundSchema` instead. */
  export const inboundSchema = PostgresOneGlobalJob$inboundSchema;
  /** @deprecated use `PostgresOneGlobalJob$outboundSchema` instead. */
  export const outboundSchema = PostgresOneGlobalJob$outboundSchema;
  /** @deprecated use `PostgresOneGlobalJob$Outbound` instead. */
  export type Outbound = PostgresOneGlobalJob$Outbound;
}

export function postgresOneGlobalJobToJSON(
  postgresOneGlobalJob: PostgresOneGlobalJob,
): string {
  return JSON.stringify(
    PostgresOneGlobalJob$outboundSchema.parse(postgresOneGlobalJob),
  );
}

export function postgresOneGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOneGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOneGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOneGlobalJob' from JSON`,
  );
}

/** @internal */
export const PostgresOneModeSwarm$inboundSchema: z.ZodType<
  PostgresOneModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicated: z.lazy(() => PostgresOneReplicated$inboundSchema).optional(),
  Global: z.lazy(() => PostgresOneGlobal$inboundSchema).optional(),
  ReplicatedJob: z.lazy(() => PostgresOneReplicatedJob$inboundSchema)
    .optional(),
  GlobalJob: z.lazy(() => PostgresOneGlobalJob$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicated": "replicated",
    "Global": "global",
    "ReplicatedJob": "replicatedJob",
    "GlobalJob": "globalJob",
  });
});

/** @internal */
export type PostgresOneModeSwarm$Outbound = {
  Replicated?: PostgresOneReplicated$Outbound | undefined;
  Global?: PostgresOneGlobal$Outbound | undefined;
  ReplicatedJob?: PostgresOneReplicatedJob$Outbound | undefined;
  GlobalJob?: PostgresOneGlobalJob$Outbound | undefined;
};

/** @internal */
export const PostgresOneModeSwarm$outboundSchema: z.ZodType<
  PostgresOneModeSwarm$Outbound,
  z.ZodTypeDef,
  PostgresOneModeSwarm
> = z.object({
  replicated: z.lazy(() => PostgresOneReplicated$outboundSchema).optional(),
  global: z.lazy(() => PostgresOneGlobal$outboundSchema).optional(),
  replicatedJob: z.lazy(() => PostgresOneReplicatedJob$outboundSchema)
    .optional(),
  globalJob: z.lazy(() => PostgresOneGlobalJob$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    replicated: "Replicated",
    global: "Global",
    replicatedJob: "ReplicatedJob",
    globalJob: "GlobalJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneModeSwarm$ {
  /** @deprecated use `PostgresOneModeSwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresOneModeSwarm$inboundSchema;
  /** @deprecated use `PostgresOneModeSwarm$outboundSchema` instead. */
  export const outboundSchema = PostgresOneModeSwarm$outboundSchema;
  /** @deprecated use `PostgresOneModeSwarm$Outbound` instead. */
  export type Outbound = PostgresOneModeSwarm$Outbound;
}

export function postgresOneModeSwarmToJSON(
  postgresOneModeSwarm: PostgresOneModeSwarm,
): string {
  return JSON.stringify(
    PostgresOneModeSwarm$outboundSchema.parse(postgresOneModeSwarm),
  );
}

export function postgresOneModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOneModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOneModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOneModeSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresOneDriverOpts$inboundSchema: z.ZodType<
  PostgresOneDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostgresOneDriverOpts$Outbound = {};

/** @internal */
export const PostgresOneDriverOpts$outboundSchema: z.ZodType<
  PostgresOneDriverOpts$Outbound,
  z.ZodTypeDef,
  PostgresOneDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneDriverOpts$ {
  /** @deprecated use `PostgresOneDriverOpts$inboundSchema` instead. */
  export const inboundSchema = PostgresOneDriverOpts$inboundSchema;
  /** @deprecated use `PostgresOneDriverOpts$outboundSchema` instead. */
  export const outboundSchema = PostgresOneDriverOpts$outboundSchema;
  /** @deprecated use `PostgresOneDriverOpts$Outbound` instead. */
  export type Outbound = PostgresOneDriverOpts$Outbound;
}

export function postgresOneDriverOptsToJSON(
  postgresOneDriverOpts: PostgresOneDriverOpts,
): string {
  return JSON.stringify(
    PostgresOneDriverOpts$outboundSchema.parse(postgresOneDriverOpts),
  );
}

export function postgresOneDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOneDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOneDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOneDriverOpts' from JSON`,
  );
}

/** @internal */
export const PostgresOneNetworkSwarm$inboundSchema: z.ZodType<
  PostgresOneNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Target: z.string().optional(),
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => PostgresOneDriverOpts$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Target": "target",
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
  });
});

/** @internal */
export type PostgresOneNetworkSwarm$Outbound = {
  Target?: string | undefined;
  Aliases?: Array<string> | undefined;
  DriverOpts?: PostgresOneDriverOpts$Outbound | undefined;
};

/** @internal */
export const PostgresOneNetworkSwarm$outboundSchema: z.ZodType<
  PostgresOneNetworkSwarm$Outbound,
  z.ZodTypeDef,
  PostgresOneNetworkSwarm
> = z.object({
  target: z.string().optional(),
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => PostgresOneDriverOpts$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    target: "Target",
    aliases: "Aliases",
    driverOpts: "DriverOpts",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneNetworkSwarm$ {
  /** @deprecated use `PostgresOneNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresOneNetworkSwarm$inboundSchema;
  /** @deprecated use `PostgresOneNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = PostgresOneNetworkSwarm$outboundSchema;
  /** @deprecated use `PostgresOneNetworkSwarm$Outbound` instead. */
  export type Outbound = PostgresOneNetworkSwarm$Outbound;
}

export function postgresOneNetworkSwarmToJSON(
  postgresOneNetworkSwarm: PostgresOneNetworkSwarm,
): string {
  return JSON.stringify(
    PostgresOneNetworkSwarm$outboundSchema.parse(postgresOneNetworkSwarm),
  );
}

export function postgresOneNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOneNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOneNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOneNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresOneProject$inboundSchema: z.ZodType<
  PostgresOneProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  organizationId: z.string(),
  env: z.string(),
});

/** @internal */
export type PostgresOneProject$Outbound = {
  projectId: string;
  name: string;
  description: string | null;
  createdAt: string;
  organizationId: string;
  env: string;
};

/** @internal */
export const PostgresOneProject$outboundSchema: z.ZodType<
  PostgresOneProject$Outbound,
  z.ZodTypeDef,
  PostgresOneProject
> = z.object({
  projectId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  organizationId: z.string(),
  env: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneProject$ {
  /** @deprecated use `PostgresOneProject$inboundSchema` instead. */
  export const inboundSchema = PostgresOneProject$inboundSchema;
  /** @deprecated use `PostgresOneProject$outboundSchema` instead. */
  export const outboundSchema = PostgresOneProject$outboundSchema;
  /** @deprecated use `PostgresOneProject$Outbound` instead. */
  export type Outbound = PostgresOneProject$Outbound;
}

export function postgresOneProjectToJSON(
  postgresOneProject: PostgresOneProject,
): string {
  return JSON.stringify(
    PostgresOneProject$outboundSchema.parse(postgresOneProject),
  );
}

export function postgresOneProjectFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOneProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOneProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOneProject' from JSON`,
  );
}

/** @internal */
export const PostgresOneEnvironment$inboundSchema: z.ZodType<
  PostgresOneEnvironment,
  z.ZodTypeDef,
  unknown
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
  project: z.lazy(() => PostgresOneProject$inboundSchema),
});

/** @internal */
export type PostgresOneEnvironment$Outbound = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
  project: PostgresOneProject$Outbound;
};

/** @internal */
export const PostgresOneEnvironment$outboundSchema: z.ZodType<
  PostgresOneEnvironment$Outbound,
  z.ZodTypeDef,
  PostgresOneEnvironment
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
  project: z.lazy(() => PostgresOneProject$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneEnvironment$ {
  /** @deprecated use `PostgresOneEnvironment$inboundSchema` instead. */
  export const inboundSchema = PostgresOneEnvironment$inboundSchema;
  /** @deprecated use `PostgresOneEnvironment$outboundSchema` instead. */
  export const outboundSchema = PostgresOneEnvironment$outboundSchema;
  /** @deprecated use `PostgresOneEnvironment$Outbound` instead. */
  export type Outbound = PostgresOneEnvironment$Outbound;
}

export function postgresOneEnvironmentToJSON(
  postgresOneEnvironment: PostgresOneEnvironment,
): string {
  return JSON.stringify(
    PostgresOneEnvironment$outboundSchema.parse(postgresOneEnvironment),
  );
}

export function postgresOneEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOneEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOneEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOneEnvironment' from JSON`,
  );
}

/** @internal */
export const PostgresOneType$inboundSchema: z.ZodNativeEnum<
  typeof PostgresOneType
> = z.nativeEnum(PostgresOneType);

/** @internal */
export const PostgresOneType$outboundSchema: z.ZodNativeEnum<
  typeof PostgresOneType
> = PostgresOneType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneType$ {
  /** @deprecated use `PostgresOneType$inboundSchema` instead. */
  export const inboundSchema = PostgresOneType$inboundSchema;
  /** @deprecated use `PostgresOneType$outboundSchema` instead. */
  export const outboundSchema = PostgresOneType$outboundSchema;
}

/** @internal */
export const PostgresOneServiceType$inboundSchema: z.ZodNativeEnum<
  typeof PostgresOneServiceType
> = z.nativeEnum(PostgresOneServiceType);

/** @internal */
export const PostgresOneServiceType$outboundSchema: z.ZodNativeEnum<
  typeof PostgresOneServiceType
> = PostgresOneServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneServiceType$ {
  /** @deprecated use `PostgresOneServiceType$inboundSchema` instead. */
  export const inboundSchema = PostgresOneServiceType$inboundSchema;
  /** @deprecated use `PostgresOneServiceType$outboundSchema` instead. */
  export const outboundSchema = PostgresOneServiceType$outboundSchema;
}

/** @internal */
export const PostgresOneMount$inboundSchema: z.ZodType<
  PostgresOneMount,
  z.ZodTypeDef,
  unknown
> = z.object({
  mountId: z.string(),
  type: PostgresOneType$inboundSchema,
  hostPath: z.nullable(z.string()),
  volumeName: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  content: z.nullable(z.string()),
  serviceType: PostgresOneServiceType$inboundSchema,
  mountPath: z.string(),
  applicationId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
});

/** @internal */
export type PostgresOneMount$Outbound = {
  mountId: string;
  type: string;
  hostPath: string | null;
  volumeName: string | null;
  filePath: string | null;
  content: string | null;
  serviceType: string;
  mountPath: string;
  applicationId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mysqlId: string | null;
  redisId: string | null;
  composeId: string | null;
};

/** @internal */
export const PostgresOneMount$outboundSchema: z.ZodType<
  PostgresOneMount$Outbound,
  z.ZodTypeDef,
  PostgresOneMount
> = z.object({
  mountId: z.string(),
  type: PostgresOneType$outboundSchema,
  hostPath: z.nullable(z.string()),
  volumeName: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  content: z.nullable(z.string()),
  serviceType: PostgresOneServiceType$outboundSchema,
  mountPath: z.string(),
  applicationId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneMount$ {
  /** @deprecated use `PostgresOneMount$inboundSchema` instead. */
  export const inboundSchema = PostgresOneMount$inboundSchema;
  /** @deprecated use `PostgresOneMount$outboundSchema` instead. */
  export const outboundSchema = PostgresOneMount$outboundSchema;
  /** @deprecated use `PostgresOneMount$Outbound` instead. */
  export type Outbound = PostgresOneMount$Outbound;
}

export function postgresOneMountToJSON(
  postgresOneMount: PostgresOneMount,
): string {
  return JSON.stringify(
    PostgresOneMount$outboundSchema.parse(postgresOneMount),
  );
}

export function postgresOneMountFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOneMount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOneMount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOneMount' from JSON`,
  );
}

/** @internal */
export const PostgresOneServerStatus$inboundSchema: z.ZodNativeEnum<
  typeof PostgresOneServerStatus
> = z.nativeEnum(PostgresOneServerStatus);

/** @internal */
export const PostgresOneServerStatus$outboundSchema: z.ZodNativeEnum<
  typeof PostgresOneServerStatus
> = PostgresOneServerStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneServerStatus$ {
  /** @deprecated use `PostgresOneServerStatus$inboundSchema` instead. */
  export const inboundSchema = PostgresOneServerStatus$inboundSchema;
  /** @deprecated use `PostgresOneServerStatus$outboundSchema` instead. */
  export const outboundSchema = PostgresOneServerStatus$outboundSchema;
}

/** @internal */
export const PostgresOneMetricsConfigEnum$inboundSchema: z.ZodNativeEnum<
  typeof PostgresOneMetricsConfigEnum
> = z.nativeEnum(PostgresOneMetricsConfigEnum);

/** @internal */
export const PostgresOneMetricsConfigEnum$outboundSchema: z.ZodNativeEnum<
  typeof PostgresOneMetricsConfigEnum
> = PostgresOneMetricsConfigEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneMetricsConfigEnum$ {
  /** @deprecated use `PostgresOneMetricsConfigEnum$inboundSchema` instead. */
  export const inboundSchema = PostgresOneMetricsConfigEnum$inboundSchema;
  /** @deprecated use `PostgresOneMetricsConfigEnum$outboundSchema` instead. */
  export const outboundSchema = PostgresOneMetricsConfigEnum$outboundSchema;
}

/** @internal */
export const PostgresOneMetricsConfigUnion1$inboundSchema: z.ZodType<
  PostgresOneMetricsConfigUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  PostgresOneMetricsConfigEnum$inboundSchema,
]);

/** @internal */
export type PostgresOneMetricsConfigUnion1$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const PostgresOneMetricsConfigUnion1$outboundSchema: z.ZodType<
  PostgresOneMetricsConfigUnion1$Outbound,
  z.ZodTypeDef,
  PostgresOneMetricsConfigUnion1
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  PostgresOneMetricsConfigEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneMetricsConfigUnion1$ {
  /** @deprecated use `PostgresOneMetricsConfigUnion1$inboundSchema` instead. */
  export const inboundSchema = PostgresOneMetricsConfigUnion1$inboundSchema;
  /** @deprecated use `PostgresOneMetricsConfigUnion1$outboundSchema` instead. */
  export const outboundSchema = PostgresOneMetricsConfigUnion1$outboundSchema;
  /** @deprecated use `PostgresOneMetricsConfigUnion1$Outbound` instead. */
  export type Outbound = PostgresOneMetricsConfigUnion1$Outbound;
}

export function postgresOneMetricsConfigUnion1ToJSON(
  postgresOneMetricsConfigUnion1: PostgresOneMetricsConfigUnion1,
): string {
  return JSON.stringify(
    PostgresOneMetricsConfigUnion1$outboundSchema.parse(
      postgresOneMetricsConfigUnion1,
    ),
  );
}

export function postgresOneMetricsConfigUnion1FromJSON(
  jsonString: string,
): SafeParseResult<PostgresOneMetricsConfigUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOneMetricsConfigUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOneMetricsConfigUnion1' from JSON`,
  );
}

/** @internal */
export const PostgresOneMetricsConfigUnion2$inboundSchema: z.ZodType<
  PostgresOneMetricsConfigUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    PostgresOneMetricsConfigEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type PostgresOneMetricsConfigUnion2$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const PostgresOneMetricsConfigUnion2$outboundSchema: z.ZodType<
  PostgresOneMetricsConfigUnion2$Outbound,
  z.ZodTypeDef,
  PostgresOneMetricsConfigUnion2
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    PostgresOneMetricsConfigEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneMetricsConfigUnion2$ {
  /** @deprecated use `PostgresOneMetricsConfigUnion2$inboundSchema` instead. */
  export const inboundSchema = PostgresOneMetricsConfigUnion2$inboundSchema;
  /** @deprecated use `PostgresOneMetricsConfigUnion2$outboundSchema` instead. */
  export const outboundSchema = PostgresOneMetricsConfigUnion2$outboundSchema;
  /** @deprecated use `PostgresOneMetricsConfigUnion2$Outbound` instead. */
  export type Outbound = PostgresOneMetricsConfigUnion2$Outbound;
}

export function postgresOneMetricsConfigUnion2ToJSON(
  postgresOneMetricsConfigUnion2: PostgresOneMetricsConfigUnion2,
): string {
  return JSON.stringify(
    PostgresOneMetricsConfigUnion2$outboundSchema.parse(
      postgresOneMetricsConfigUnion2,
    ),
  );
}

export function postgresOneMetricsConfigUnion2FromJSON(
  jsonString: string,
): SafeParseResult<PostgresOneMetricsConfigUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOneMetricsConfigUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOneMetricsConfigUnion2' from JSON`,
  );
}

/** @internal */
export const PostgresOneServer$inboundSchema: z.ZodType<
  PostgresOneServer,
  z.ZodTypeDef,
  unknown
> = z.object({
  serverId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  ipAddress: z.string(),
  port: z.number(),
  username: z.string(),
  appName: z.string(),
  enableDockerCleanup: z.boolean(),
  createdAt: z.string(),
  organizationId: z.string(),
  serverStatus: PostgresOneServerStatus$inboundSchema,
  command: z.string(),
  sshKeyId: z.nullable(z.string()),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      PostgresOneMetricsConfigEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
});

/** @internal */
export type PostgresOneServer$Outbound = {
  serverId: string;
  name: string;
  description: string | null;
  ipAddress: string;
  port: number;
  username: string;
  appName: string;
  enableDockerCleanup: boolean;
  createdAt: string;
  organizationId: string;
  serverStatus: string;
  command: string;
  sshKeyId: string | null;
  metricsConfig: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  };
};

/** @internal */
export const PostgresOneServer$outboundSchema: z.ZodType<
  PostgresOneServer$Outbound,
  z.ZodTypeDef,
  PostgresOneServer
> = z.object({
  serverId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  ipAddress: z.string(),
  port: z.number(),
  username: z.string(),
  appName: z.string(),
  enableDockerCleanup: z.boolean(),
  createdAt: z.string(),
  organizationId: z.string(),
  serverStatus: PostgresOneServerStatus$outboundSchema,
  command: z.string(),
  sshKeyId: z.nullable(z.string()),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      PostgresOneMetricsConfigEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneServer$ {
  /** @deprecated use `PostgresOneServer$inboundSchema` instead. */
  export const inboundSchema = PostgresOneServer$inboundSchema;
  /** @deprecated use `PostgresOneServer$outboundSchema` instead. */
  export const outboundSchema = PostgresOneServer$outboundSchema;
  /** @deprecated use `PostgresOneServer$Outbound` instead. */
  export type Outbound = PostgresOneServer$Outbound;
}

export function postgresOneServerToJSON(
  postgresOneServer: PostgresOneServer,
): string {
  return JSON.stringify(
    PostgresOneServer$outboundSchema.parse(postgresOneServer),
  );
}

export function postgresOneServerFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOneServer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOneServer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOneServer' from JSON`,
  );
}

/** @internal */
export const PostgresOneBackupType$inboundSchema: z.ZodNativeEnum<
  typeof PostgresOneBackupType
> = z.nativeEnum(PostgresOneBackupType);

/** @internal */
export const PostgresOneBackupType$outboundSchema: z.ZodNativeEnum<
  typeof PostgresOneBackupType
> = PostgresOneBackupType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneBackupType$ {
  /** @deprecated use `PostgresOneBackupType$inboundSchema` instead. */
  export const inboundSchema = PostgresOneBackupType$inboundSchema;
  /** @deprecated use `PostgresOneBackupType$outboundSchema` instead. */
  export const outboundSchema = PostgresOneBackupType$outboundSchema;
}

/** @internal */
export const PostgresOneDatabaseType$inboundSchema: z.ZodNativeEnum<
  typeof PostgresOneDatabaseType
> = z.nativeEnum(PostgresOneDatabaseType);

/** @internal */
export const PostgresOneDatabaseType$outboundSchema: z.ZodNativeEnum<
  typeof PostgresOneDatabaseType
> = PostgresOneDatabaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneDatabaseType$ {
  /** @deprecated use `PostgresOneDatabaseType$inboundSchema` instead. */
  export const inboundSchema = PostgresOneDatabaseType$inboundSchema;
  /** @deprecated use `PostgresOneDatabaseType$outboundSchema` instead. */
  export const outboundSchema = PostgresOneDatabaseType$outboundSchema;
}

/** @internal */
export const PostgresOneMetadataEnum$inboundSchema: z.ZodNativeEnum<
  typeof PostgresOneMetadataEnum
> = z.nativeEnum(PostgresOneMetadataEnum);

/** @internal */
export const PostgresOneMetadataEnum$outboundSchema: z.ZodNativeEnum<
  typeof PostgresOneMetadataEnum
> = PostgresOneMetadataEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneMetadataEnum$ {
  /** @deprecated use `PostgresOneMetadataEnum$inboundSchema` instead. */
  export const inboundSchema = PostgresOneMetadataEnum$inboundSchema;
  /** @deprecated use `PostgresOneMetadataEnum$outboundSchema` instead. */
  export const outboundSchema = PostgresOneMetadataEnum$outboundSchema;
}

/** @internal */
export const PostgresOnePostgres$inboundSchema: z.ZodType<
  PostgresOnePostgres,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseUser: z.string(),
});

/** @internal */
export type PostgresOnePostgres$Outbound = {
  databaseUser: string;
};

/** @internal */
export const PostgresOnePostgres$outboundSchema: z.ZodType<
  PostgresOnePostgres$Outbound,
  z.ZodTypeDef,
  PostgresOnePostgres
> = z.object({
  databaseUser: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOnePostgres$ {
  /** @deprecated use `PostgresOnePostgres$inboundSchema` instead. */
  export const inboundSchema = PostgresOnePostgres$inboundSchema;
  /** @deprecated use `PostgresOnePostgres$outboundSchema` instead. */
  export const outboundSchema = PostgresOnePostgres$outboundSchema;
  /** @deprecated use `PostgresOnePostgres$Outbound` instead. */
  export type Outbound = PostgresOnePostgres$Outbound;
}

export function postgresOnePostgresToJSON(
  postgresOnePostgres: PostgresOnePostgres,
): string {
  return JSON.stringify(
    PostgresOnePostgres$outboundSchema.parse(postgresOnePostgres),
  );
}

export function postgresOnePostgresFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOnePostgres, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOnePostgres$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOnePostgres' from JSON`,
  );
}

/** @internal */
export const PostgresOneMariadb$inboundSchema: z.ZodType<
  PostgresOneMariadb,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseUser: z.string(),
  databasePassword: z.string(),
});

/** @internal */
export type PostgresOneMariadb$Outbound = {
  databaseUser: string;
  databasePassword: string;
};

/** @internal */
export const PostgresOneMariadb$outboundSchema: z.ZodType<
  PostgresOneMariadb$Outbound,
  z.ZodTypeDef,
  PostgresOneMariadb
> = z.object({
  databaseUser: z.string(),
  databasePassword: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneMariadb$ {
  /** @deprecated use `PostgresOneMariadb$inboundSchema` instead. */
  export const inboundSchema = PostgresOneMariadb$inboundSchema;
  /** @deprecated use `PostgresOneMariadb$outboundSchema` instead. */
  export const outboundSchema = PostgresOneMariadb$outboundSchema;
  /** @deprecated use `PostgresOneMariadb$Outbound` instead. */
  export type Outbound = PostgresOneMariadb$Outbound;
}

export function postgresOneMariadbToJSON(
  postgresOneMariadb: PostgresOneMariadb,
): string {
  return JSON.stringify(
    PostgresOneMariadb$outboundSchema.parse(postgresOneMariadb),
  );
}

export function postgresOneMariadbFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOneMariadb, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOneMariadb$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOneMariadb' from JSON`,
  );
}

/** @internal */
export const PostgresOneMongo$inboundSchema: z.ZodType<
  PostgresOneMongo,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseUser: z.string(),
  databasePassword: z.string(),
});

/** @internal */
export type PostgresOneMongo$Outbound = {
  databaseUser: string;
  databasePassword: string;
};

/** @internal */
export const PostgresOneMongo$outboundSchema: z.ZodType<
  PostgresOneMongo$Outbound,
  z.ZodTypeDef,
  PostgresOneMongo
> = z.object({
  databaseUser: z.string(),
  databasePassword: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneMongo$ {
  /** @deprecated use `PostgresOneMongo$inboundSchema` instead. */
  export const inboundSchema = PostgresOneMongo$inboundSchema;
  /** @deprecated use `PostgresOneMongo$outboundSchema` instead. */
  export const outboundSchema = PostgresOneMongo$outboundSchema;
  /** @deprecated use `PostgresOneMongo$Outbound` instead. */
  export type Outbound = PostgresOneMongo$Outbound;
}

export function postgresOneMongoToJSON(
  postgresOneMongo: PostgresOneMongo,
): string {
  return JSON.stringify(
    PostgresOneMongo$outboundSchema.parse(postgresOneMongo),
  );
}

export function postgresOneMongoFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOneMongo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOneMongo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOneMongo' from JSON`,
  );
}

/** @internal */
export const PostgresOneMysql$inboundSchema: z.ZodType<
  PostgresOneMysql,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseRootPassword: z.string(),
});

/** @internal */
export type PostgresOneMysql$Outbound = {
  databaseRootPassword: string;
};

/** @internal */
export const PostgresOneMysql$outboundSchema: z.ZodType<
  PostgresOneMysql$Outbound,
  z.ZodTypeDef,
  PostgresOneMysql
> = z.object({
  databaseRootPassword: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneMysql$ {
  /** @deprecated use `PostgresOneMysql$inboundSchema` instead. */
  export const inboundSchema = PostgresOneMysql$inboundSchema;
  /** @deprecated use `PostgresOneMysql$outboundSchema` instead. */
  export const outboundSchema = PostgresOneMysql$outboundSchema;
  /** @deprecated use `PostgresOneMysql$Outbound` instead. */
  export type Outbound = PostgresOneMysql$Outbound;
}

export function postgresOneMysqlToJSON(
  postgresOneMysql: PostgresOneMysql,
): string {
  return JSON.stringify(
    PostgresOneMysql$outboundSchema.parse(postgresOneMysql),
  );
}

export function postgresOneMysqlFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOneMysql, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOneMysql$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOneMysql' from JSON`,
  );
}

/** @internal */
export const PostgresOneMetadata$inboundSchema: z.ZodType<
  PostgresOneMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  postgres: z.lazy(() => PostgresOnePostgres$inboundSchema).optional(),
  mariadb: z.lazy(() => PostgresOneMariadb$inboundSchema).optional(),
  mongo: z.lazy(() => PostgresOneMongo$inboundSchema).optional(),
  mysql: z.lazy(() => PostgresOneMysql$inboundSchema).optional(),
});

/** @internal */
export type PostgresOneMetadata$Outbound = {
  postgres?: PostgresOnePostgres$Outbound | undefined;
  mariadb?: PostgresOneMariadb$Outbound | undefined;
  mongo?: PostgresOneMongo$Outbound | undefined;
  mysql?: PostgresOneMysql$Outbound | undefined;
};

/** @internal */
export const PostgresOneMetadata$outboundSchema: z.ZodType<
  PostgresOneMetadata$Outbound,
  z.ZodTypeDef,
  PostgresOneMetadata
> = z.object({
  postgres: z.lazy(() => PostgresOnePostgres$outboundSchema).optional(),
  mariadb: z.lazy(() => PostgresOneMariadb$outboundSchema).optional(),
  mongo: z.lazy(() => PostgresOneMongo$outboundSchema).optional(),
  mysql: z.lazy(() => PostgresOneMysql$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneMetadata$ {
  /** @deprecated use `PostgresOneMetadata$inboundSchema` instead. */
  export const inboundSchema = PostgresOneMetadata$inboundSchema;
  /** @deprecated use `PostgresOneMetadata$outboundSchema` instead. */
  export const outboundSchema = PostgresOneMetadata$outboundSchema;
  /** @deprecated use `PostgresOneMetadata$Outbound` instead. */
  export type Outbound = PostgresOneMetadata$Outbound;
}

export function postgresOneMetadataToJSON(
  postgresOneMetadata: PostgresOneMetadata,
): string {
  return JSON.stringify(
    PostgresOneMetadata$outboundSchema.parse(postgresOneMetadata),
  );
}

export function postgresOneMetadataFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOneMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOneMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOneMetadata' from JSON`,
  );
}

/** @internal */
export const PostgresOneMetadataUnion$inboundSchema: z.ZodType<
  PostgresOneMetadataUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PostgresOneMetadata$inboundSchema),
  PostgresOneMetadataEnum$inboundSchema,
]);

/** @internal */
export type PostgresOneMetadataUnion$Outbound =
  | PostgresOneMetadata$Outbound
  | string;

/** @internal */
export const PostgresOneMetadataUnion$outboundSchema: z.ZodType<
  PostgresOneMetadataUnion$Outbound,
  z.ZodTypeDef,
  PostgresOneMetadataUnion
> = z.union([
  z.lazy(() => PostgresOneMetadata$outboundSchema),
  PostgresOneMetadataEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneMetadataUnion$ {
  /** @deprecated use `PostgresOneMetadataUnion$inboundSchema` instead. */
  export const inboundSchema = PostgresOneMetadataUnion$inboundSchema;
  /** @deprecated use `PostgresOneMetadataUnion$outboundSchema` instead. */
  export const outboundSchema = PostgresOneMetadataUnion$outboundSchema;
  /** @deprecated use `PostgresOneMetadataUnion$Outbound` instead. */
  export type Outbound = PostgresOneMetadataUnion$Outbound;
}

export function postgresOneMetadataUnionToJSON(
  postgresOneMetadataUnion: PostgresOneMetadataUnion,
): string {
  return JSON.stringify(
    PostgresOneMetadataUnion$outboundSchema.parse(postgresOneMetadataUnion),
  );
}

export function postgresOneMetadataUnionFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOneMetadataUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOneMetadataUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOneMetadataUnion' from JSON`,
  );
}

/** @internal */
export const PostgresOneBackup$inboundSchema: z.ZodType<
  PostgresOneBackup,
  z.ZodTypeDef,
  unknown
> = z.object({
  backupId: z.string(),
  appName: z.string(),
  schedule: z.string(),
  enabled: z.nullable(z.boolean()),
  database: z.string(),
  prefix: z.string(),
  serviceName: z.nullable(z.string()),
  destinationId: z.string(),
  keepLatestCount: z.nullable(z.number()),
  backupType: PostgresOneBackupType$inboundSchema,
  databaseType: PostgresOneDatabaseType$inboundSchema,
  composeId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  userId: z.nullable(z.string()),
  metadata: z.nullable(
    z.union([
      z.lazy(() => PostgresOneMetadata$inboundSchema),
      PostgresOneMetadataEnum$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type PostgresOneBackup$Outbound = {
  backupId: string;
  appName: string;
  schedule: string;
  enabled: boolean | null;
  database: string;
  prefix: string;
  serviceName: string | null;
  destinationId: string;
  keepLatestCount: number | null;
  backupType: string;
  databaseType: string;
  composeId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mysqlId: string | null;
  mongoId: string | null;
  userId: string | null;
  metadata?: PostgresOneMetadata$Outbound | string | null | undefined;
};

/** @internal */
export const PostgresOneBackup$outboundSchema: z.ZodType<
  PostgresOneBackup$Outbound,
  z.ZodTypeDef,
  PostgresOneBackup
> = z.object({
  backupId: z.string(),
  appName: z.string(),
  schedule: z.string(),
  enabled: z.nullable(z.boolean()),
  database: z.string(),
  prefix: z.string(),
  serviceName: z.nullable(z.string()),
  destinationId: z.string(),
  keepLatestCount: z.nullable(z.number()),
  backupType: PostgresOneBackupType$outboundSchema,
  databaseType: PostgresOneDatabaseType$outboundSchema,
  composeId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  userId: z.nullable(z.string()),
  metadata: z.nullable(
    z.union([
      z.lazy(() => PostgresOneMetadata$outboundSchema),
      PostgresOneMetadataEnum$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneBackup$ {
  /** @deprecated use `PostgresOneBackup$inboundSchema` instead. */
  export const inboundSchema = PostgresOneBackup$inboundSchema;
  /** @deprecated use `PostgresOneBackup$outboundSchema` instead. */
  export const outboundSchema = PostgresOneBackup$outboundSchema;
  /** @deprecated use `PostgresOneBackup$Outbound` instead. */
  export type Outbound = PostgresOneBackup$Outbound;
}

export function postgresOneBackupToJSON(
  postgresOneBackup: PostgresOneBackup,
): string {
  return JSON.stringify(
    PostgresOneBackup$outboundSchema.parse(postgresOneBackup),
  );
}

export function postgresOneBackupFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOneBackup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOneBackup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOneBackup' from JSON`,
  );
}

/** @internal */
export const PostgresOneResponseBody$inboundSchema: z.ZodType<
  PostgresOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  postgresId: z.string(),
  name: z.string(),
  appName: z.string(),
  databaseName: z.string(),
  databaseUser: z.string(),
  databasePassword: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  applicationStatus: PostgresOneApplicationStatus$inboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => PostgresOneHealthCheckSwarm$inboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => PostgresOneRestartPolicySwarm$inboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => PostgresOnePlacementSwarm$inboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => PostgresOneUpdateConfigSwarm$inboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => PostgresOneRollbackConfigSwarm$inboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => PostgresOneModeSwarm$inboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => PostgresOneNetworkSwarm$inboundSchema)),
  ),
  replicas: z.number(),
  createdAt: z.string(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
  environment: z.lazy(() => PostgresOneEnvironment$inboundSchema),
  mounts: z.array(z.lazy(() => PostgresOneMount$inboundSchema)),
  server: z.nullable(z.lazy(() => PostgresOneServer$inboundSchema)),
  backups: z.array(z.lazy(() => PostgresOneBackup$inboundSchema)),
});

/** @internal */
export type PostgresOneResponseBody$Outbound = {
  postgresId: string;
  name: string;
  appName: string;
  databaseName: string;
  databaseUser: string;
  databasePassword: string;
  description: string | null;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  externalPort: number | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  applicationStatus: string;
  healthCheckSwarm: PostgresOneHealthCheckSwarm$Outbound | null;
  restartPolicySwarm: PostgresOneRestartPolicySwarm$Outbound | null;
  placementSwarm: PostgresOnePlacementSwarm$Outbound | null;
  updateConfigSwarm: PostgresOneUpdateConfigSwarm$Outbound | null;
  rollbackConfigSwarm: PostgresOneRollbackConfigSwarm$Outbound | null;
  modeSwarm: PostgresOneModeSwarm$Outbound | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<PostgresOneNetworkSwarm$Outbound> | null;
  replicas: number;
  createdAt: string;
  environmentId: string;
  serverId: string | null;
  environment: PostgresOneEnvironment$Outbound;
  mounts: Array<PostgresOneMount$Outbound>;
  server: PostgresOneServer$Outbound | null;
  backups: Array<PostgresOneBackup$Outbound>;
};

/** @internal */
export const PostgresOneResponseBody$outboundSchema: z.ZodType<
  PostgresOneResponseBody$Outbound,
  z.ZodTypeDef,
  PostgresOneResponseBody
> = z.object({
  postgresId: z.string(),
  name: z.string(),
  appName: z.string(),
  databaseName: z.string(),
  databaseUser: z.string(),
  databasePassword: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  applicationStatus: PostgresOneApplicationStatus$outboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => PostgresOneHealthCheckSwarm$outboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => PostgresOneRestartPolicySwarm$outboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => PostgresOnePlacementSwarm$outboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => PostgresOneUpdateConfigSwarm$outboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => PostgresOneRollbackConfigSwarm$outboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => PostgresOneModeSwarm$outboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => PostgresOneNetworkSwarm$outboundSchema)),
  ),
  replicas: z.number(),
  createdAt: z.string(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
  environment: z.lazy(() => PostgresOneEnvironment$outboundSchema),
  mounts: z.array(z.lazy(() => PostgresOneMount$outboundSchema)),
  server: z.nullable(z.lazy(() => PostgresOneServer$outboundSchema)),
  backups: z.array(z.lazy(() => PostgresOneBackup$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneResponseBody$ {
  /** @deprecated use `PostgresOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostgresOneResponseBody$inboundSchema;
  /** @deprecated use `PostgresOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostgresOneResponseBody$outboundSchema;
  /** @deprecated use `PostgresOneResponseBody$Outbound` instead. */
  export type Outbound = PostgresOneResponseBody$Outbound;
}

export function postgresOneResponseBodyToJSON(
  postgresOneResponseBody: PostgresOneResponseBody,
): string {
  return JSON.stringify(
    PostgresOneResponseBody$outboundSchema.parse(postgresOneResponseBody),
  );
}

export function postgresOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOneResponseBody' from JSON`,
  );
}

/** @internal */
export const PostgresOneResponse$inboundSchema: z.ZodType<
  PostgresOneResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PostgresOneResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type PostgresOneResponse$Outbound =
  | PostgresOneResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const PostgresOneResponse$outboundSchema: z.ZodType<
  PostgresOneResponse$Outbound,
  z.ZodTypeDef,
  PostgresOneResponse
> = z.union([
  z.lazy(() => PostgresOneResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresOneResponse$ {
  /** @deprecated use `PostgresOneResponse$inboundSchema` instead. */
  export const inboundSchema = PostgresOneResponse$inboundSchema;
  /** @deprecated use `PostgresOneResponse$outboundSchema` instead. */
  export const outboundSchema = PostgresOneResponse$outboundSchema;
  /** @deprecated use `PostgresOneResponse$Outbound` instead. */
  export type Outbound = PostgresOneResponse$Outbound;
}

export function postgresOneResponseToJSON(
  postgresOneResponse: PostgresOneResponse,
): string {
  return JSON.stringify(
    PostgresOneResponse$outboundSchema.parse(postgresOneResponse),
  );
}

export function postgresOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostgresOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresOneResponse' from JSON`,
  );
}
