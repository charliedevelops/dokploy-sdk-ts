/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RollbackDeleteSecurity = {
  authorization: string;
};

export type RollbackDeleteRequest = {
  rollbackId: string;
};

/** @internal */
export const RollbackDeleteSecurity$inboundSchema: z.ZodType<
  RollbackDeleteSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type RollbackDeleteSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const RollbackDeleteSecurity$outboundSchema: z.ZodType<
  RollbackDeleteSecurity$Outbound,
  z.ZodTypeDef,
  RollbackDeleteSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RollbackDeleteSecurity$ {
  /** @deprecated use `RollbackDeleteSecurity$inboundSchema` instead. */
  export const inboundSchema = RollbackDeleteSecurity$inboundSchema;
  /** @deprecated use `RollbackDeleteSecurity$outboundSchema` instead. */
  export const outboundSchema = RollbackDeleteSecurity$outboundSchema;
  /** @deprecated use `RollbackDeleteSecurity$Outbound` instead. */
  export type Outbound = RollbackDeleteSecurity$Outbound;
}

export function rollbackDeleteSecurityToJSON(
  rollbackDeleteSecurity: RollbackDeleteSecurity,
): string {
  return JSON.stringify(
    RollbackDeleteSecurity$outboundSchema.parse(rollbackDeleteSecurity),
  );
}

export function rollbackDeleteSecurityFromJSON(
  jsonString: string,
): SafeParseResult<RollbackDeleteSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RollbackDeleteSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RollbackDeleteSecurity' from JSON`,
  );
}

/** @internal */
export const RollbackDeleteRequest$inboundSchema: z.ZodType<
  RollbackDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  rollbackId: z.string(),
});

/** @internal */
export type RollbackDeleteRequest$Outbound = {
  rollbackId: string;
};

/** @internal */
export const RollbackDeleteRequest$outboundSchema: z.ZodType<
  RollbackDeleteRequest$Outbound,
  z.ZodTypeDef,
  RollbackDeleteRequest
> = z.object({
  rollbackId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RollbackDeleteRequest$ {
  /** @deprecated use `RollbackDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = RollbackDeleteRequest$inboundSchema;
  /** @deprecated use `RollbackDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = RollbackDeleteRequest$outboundSchema;
  /** @deprecated use `RollbackDeleteRequest$Outbound` instead. */
  export type Outbound = RollbackDeleteRequest$Outbound;
}

export function rollbackDeleteRequestToJSON(
  rollbackDeleteRequest: RollbackDeleteRequest,
): string {
  return JSON.stringify(
    RollbackDeleteRequest$outboundSchema.parse(rollbackDeleteRequest),
  );
}

export function rollbackDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<RollbackDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RollbackDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RollbackDeleteRequest' from JSON`,
  );
}
