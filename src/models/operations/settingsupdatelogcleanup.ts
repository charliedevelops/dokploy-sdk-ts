/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SettingsUpdateLogCleanupRequest = {
  cronExpression: string | null;
};

/** @internal */
export const SettingsUpdateLogCleanupRequest$inboundSchema: z.ZodType<
  SettingsUpdateLogCleanupRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cronExpression: z.nullable(z.string()),
});

/** @internal */
export type SettingsUpdateLogCleanupRequest$Outbound = {
  cronExpression: string | null;
};

/** @internal */
export const SettingsUpdateLogCleanupRequest$outboundSchema: z.ZodType<
  SettingsUpdateLogCleanupRequest$Outbound,
  z.ZodTypeDef,
  SettingsUpdateLogCleanupRequest
> = z.object({
  cronExpression: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SettingsUpdateLogCleanupRequest$ {
  /** @deprecated use `SettingsUpdateLogCleanupRequest$inboundSchema` instead. */
  export const inboundSchema = SettingsUpdateLogCleanupRequest$inboundSchema;
  /** @deprecated use `SettingsUpdateLogCleanupRequest$outboundSchema` instead. */
  export const outboundSchema = SettingsUpdateLogCleanupRequest$outboundSchema;
  /** @deprecated use `SettingsUpdateLogCleanupRequest$Outbound` instead. */
  export type Outbound = SettingsUpdateLogCleanupRequest$Outbound;
}

export function settingsUpdateLogCleanupRequestToJSON(
  settingsUpdateLogCleanupRequest: SettingsUpdateLogCleanupRequest,
): string {
  return JSON.stringify(
    SettingsUpdateLogCleanupRequest$outboundSchema.parse(
      settingsUpdateLogCleanupRequest,
    ),
  );
}

export function settingsUpdateLogCleanupRequestFromJSON(
  jsonString: string,
): SafeParseResult<SettingsUpdateLogCleanupRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SettingsUpdateLogCleanupRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SettingsUpdateLogCleanupRequest' from JSON`,
  );
}
