/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type RedirectsUpdateSecurity = {
  authorization: string;
};

export type RedirectsUpdateRequest = {
  redirectId: string;
  regex: string;
  replacement: string;
  permanent: boolean;
};

/**
 * Successful response
 */
export type RedirectsUpdateResponseBody = {
  redirectId: string;
  regex: string;
  replacement: string;
  permanent: boolean;
  uniqueConfigKey: number;
  createdAt: string;
  applicationId: string;
};

export type RedirectsUpdateResponse =
  | RedirectsUpdateResponseBody
  | models.ErrorT;

/** @internal */
export const RedirectsUpdateSecurity$inboundSchema: z.ZodType<
  RedirectsUpdateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type RedirectsUpdateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const RedirectsUpdateSecurity$outboundSchema: z.ZodType<
  RedirectsUpdateSecurity$Outbound,
  z.ZodTypeDef,
  RedirectsUpdateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedirectsUpdateSecurity$ {
  /** @deprecated use `RedirectsUpdateSecurity$inboundSchema` instead. */
  export const inboundSchema = RedirectsUpdateSecurity$inboundSchema;
  /** @deprecated use `RedirectsUpdateSecurity$outboundSchema` instead. */
  export const outboundSchema = RedirectsUpdateSecurity$outboundSchema;
  /** @deprecated use `RedirectsUpdateSecurity$Outbound` instead. */
  export type Outbound = RedirectsUpdateSecurity$Outbound;
}

export function redirectsUpdateSecurityToJSON(
  redirectsUpdateSecurity: RedirectsUpdateSecurity,
): string {
  return JSON.stringify(
    RedirectsUpdateSecurity$outboundSchema.parse(redirectsUpdateSecurity),
  );
}

export function redirectsUpdateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<RedirectsUpdateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedirectsUpdateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedirectsUpdateSecurity' from JSON`,
  );
}

/** @internal */
export const RedirectsUpdateRequest$inboundSchema: z.ZodType<
  RedirectsUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  redirectId: z.string(),
  regex: z.string(),
  replacement: z.string(),
  permanent: z.boolean(),
});

/** @internal */
export type RedirectsUpdateRequest$Outbound = {
  redirectId: string;
  regex: string;
  replacement: string;
  permanent: boolean;
};

/** @internal */
export const RedirectsUpdateRequest$outboundSchema: z.ZodType<
  RedirectsUpdateRequest$Outbound,
  z.ZodTypeDef,
  RedirectsUpdateRequest
> = z.object({
  redirectId: z.string(),
  regex: z.string(),
  replacement: z.string(),
  permanent: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedirectsUpdateRequest$ {
  /** @deprecated use `RedirectsUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = RedirectsUpdateRequest$inboundSchema;
  /** @deprecated use `RedirectsUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = RedirectsUpdateRequest$outboundSchema;
  /** @deprecated use `RedirectsUpdateRequest$Outbound` instead. */
  export type Outbound = RedirectsUpdateRequest$Outbound;
}

export function redirectsUpdateRequestToJSON(
  redirectsUpdateRequest: RedirectsUpdateRequest,
): string {
  return JSON.stringify(
    RedirectsUpdateRequest$outboundSchema.parse(redirectsUpdateRequest),
  );
}

export function redirectsUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<RedirectsUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedirectsUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedirectsUpdateRequest' from JSON`,
  );
}

/** @internal */
export const RedirectsUpdateResponseBody$inboundSchema: z.ZodType<
  RedirectsUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  redirectId: z.string(),
  regex: z.string(),
  replacement: z.string(),
  permanent: z.boolean(),
  uniqueConfigKey: z.number(),
  createdAt: z.string(),
  applicationId: z.string(),
});

/** @internal */
export type RedirectsUpdateResponseBody$Outbound = {
  redirectId: string;
  regex: string;
  replacement: string;
  permanent: boolean;
  uniqueConfigKey: number;
  createdAt: string;
  applicationId: string;
};

/** @internal */
export const RedirectsUpdateResponseBody$outboundSchema: z.ZodType<
  RedirectsUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  RedirectsUpdateResponseBody
> = z.object({
  redirectId: z.string(),
  regex: z.string(),
  replacement: z.string(),
  permanent: z.boolean(),
  uniqueConfigKey: z.number(),
  createdAt: z.string(),
  applicationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedirectsUpdateResponseBody$ {
  /** @deprecated use `RedirectsUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = RedirectsUpdateResponseBody$inboundSchema;
  /** @deprecated use `RedirectsUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = RedirectsUpdateResponseBody$outboundSchema;
  /** @deprecated use `RedirectsUpdateResponseBody$Outbound` instead. */
  export type Outbound = RedirectsUpdateResponseBody$Outbound;
}

export function redirectsUpdateResponseBodyToJSON(
  redirectsUpdateResponseBody: RedirectsUpdateResponseBody,
): string {
  return JSON.stringify(
    RedirectsUpdateResponseBody$outboundSchema.parse(
      redirectsUpdateResponseBody,
    ),
  );
}

export function redirectsUpdateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RedirectsUpdateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedirectsUpdateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedirectsUpdateResponseBody' from JSON`,
  );
}

/** @internal */
export const RedirectsUpdateResponse$inboundSchema: z.ZodType<
  RedirectsUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => RedirectsUpdateResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type RedirectsUpdateResponse$Outbound =
  | RedirectsUpdateResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const RedirectsUpdateResponse$outboundSchema: z.ZodType<
  RedirectsUpdateResponse$Outbound,
  z.ZodTypeDef,
  RedirectsUpdateResponse
> = z.union([
  z.lazy(() => RedirectsUpdateResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedirectsUpdateResponse$ {
  /** @deprecated use `RedirectsUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = RedirectsUpdateResponse$inboundSchema;
  /** @deprecated use `RedirectsUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = RedirectsUpdateResponse$outboundSchema;
  /** @deprecated use `RedirectsUpdateResponse$Outbound` instead. */
  export type Outbound = RedirectsUpdateResponse$Outbound;
}

export function redirectsUpdateResponseToJSON(
  redirectsUpdateResponse: RedirectsUpdateResponse,
): string {
  return JSON.stringify(
    RedirectsUpdateResponse$outboundSchema.parse(redirectsUpdateResponse),
  );
}

export function redirectsUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<RedirectsUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedirectsUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedirectsUpdateResponse' from JSON`,
  );
}
