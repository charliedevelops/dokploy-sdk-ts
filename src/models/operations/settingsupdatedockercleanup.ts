/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SettingsUpdateDockerCleanupSecurity = {
  authorization: string;
};

export type SettingsUpdateDockerCleanupRequest = {
  enableDockerCleanup: boolean;
  serverId?: string | undefined;
};

/** @internal */
export const SettingsUpdateDockerCleanupSecurity$inboundSchema: z.ZodType<
  SettingsUpdateDockerCleanupSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type SettingsUpdateDockerCleanupSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const SettingsUpdateDockerCleanupSecurity$outboundSchema: z.ZodType<
  SettingsUpdateDockerCleanupSecurity$Outbound,
  z.ZodTypeDef,
  SettingsUpdateDockerCleanupSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SettingsUpdateDockerCleanupSecurity$ {
  /** @deprecated use `SettingsUpdateDockerCleanupSecurity$inboundSchema` instead. */
  export const inboundSchema =
    SettingsUpdateDockerCleanupSecurity$inboundSchema;
  /** @deprecated use `SettingsUpdateDockerCleanupSecurity$outboundSchema` instead. */
  export const outboundSchema =
    SettingsUpdateDockerCleanupSecurity$outboundSchema;
  /** @deprecated use `SettingsUpdateDockerCleanupSecurity$Outbound` instead. */
  export type Outbound = SettingsUpdateDockerCleanupSecurity$Outbound;
}

export function settingsUpdateDockerCleanupSecurityToJSON(
  settingsUpdateDockerCleanupSecurity: SettingsUpdateDockerCleanupSecurity,
): string {
  return JSON.stringify(
    SettingsUpdateDockerCleanupSecurity$outboundSchema.parse(
      settingsUpdateDockerCleanupSecurity,
    ),
  );
}

export function settingsUpdateDockerCleanupSecurityFromJSON(
  jsonString: string,
): SafeParseResult<SettingsUpdateDockerCleanupSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SettingsUpdateDockerCleanupSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SettingsUpdateDockerCleanupSecurity' from JSON`,
  );
}

/** @internal */
export const SettingsUpdateDockerCleanupRequest$inboundSchema: z.ZodType<
  SettingsUpdateDockerCleanupRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  enableDockerCleanup: z.boolean(),
  serverId: z.string().optional(),
});

/** @internal */
export type SettingsUpdateDockerCleanupRequest$Outbound = {
  enableDockerCleanup: boolean;
  serverId?: string | undefined;
};

/** @internal */
export const SettingsUpdateDockerCleanupRequest$outboundSchema: z.ZodType<
  SettingsUpdateDockerCleanupRequest$Outbound,
  z.ZodTypeDef,
  SettingsUpdateDockerCleanupRequest
> = z.object({
  enableDockerCleanup: z.boolean(),
  serverId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SettingsUpdateDockerCleanupRequest$ {
  /** @deprecated use `SettingsUpdateDockerCleanupRequest$inboundSchema` instead. */
  export const inboundSchema = SettingsUpdateDockerCleanupRequest$inboundSchema;
  /** @deprecated use `SettingsUpdateDockerCleanupRequest$outboundSchema` instead. */
  export const outboundSchema =
    SettingsUpdateDockerCleanupRequest$outboundSchema;
  /** @deprecated use `SettingsUpdateDockerCleanupRequest$Outbound` instead. */
  export type Outbound = SettingsUpdateDockerCleanupRequest$Outbound;
}

export function settingsUpdateDockerCleanupRequestToJSON(
  settingsUpdateDockerCleanupRequest: SettingsUpdateDockerCleanupRequest,
): string {
  return JSON.stringify(
    SettingsUpdateDockerCleanupRequest$outboundSchema.parse(
      settingsUpdateDockerCleanupRequest,
    ),
  );
}

export function settingsUpdateDockerCleanupRequestFromJSON(
  jsonString: string,
): SafeParseResult<SettingsUpdateDockerCleanupRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SettingsUpdateDockerCleanupRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SettingsUpdateDockerCleanupRequest' from JSON`,
  );
}
