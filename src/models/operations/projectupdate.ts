/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ProjectUpdateRequest = {
  createdAt?: string | undefined;
  description?: string | null | undefined;
  env?: string | undefined;
  name?: string | undefined;
  organizationId?: string | undefined;
  projectId: string;
};

/**
 * Successful response
 */
export type ProjectUpdateResponseBody = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

export type ProjectUpdateResponse = ProjectUpdateResponseBody | models.ErrorT;

/** @internal */
export const ProjectUpdateRequest$inboundSchema: z.ZodType<
  ProjectUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  env: z.string().optional(),
  name: z.string().optional(),
  organizationId: z.string().optional(),
  projectId: z.string(),
});

/** @internal */
export type ProjectUpdateRequest$Outbound = {
  createdAt?: string | undefined;
  description?: string | null | undefined;
  env?: string | undefined;
  name?: string | undefined;
  organizationId?: string | undefined;
  projectId: string;
};

/** @internal */
export const ProjectUpdateRequest$outboundSchema: z.ZodType<
  ProjectUpdateRequest$Outbound,
  z.ZodTypeDef,
  ProjectUpdateRequest
> = z.object({
  createdAt: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  env: z.string().optional(),
  name: z.string().optional(),
  organizationId: z.string().optional(),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectUpdateRequest$ {
  /** @deprecated use `ProjectUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = ProjectUpdateRequest$inboundSchema;
  /** @deprecated use `ProjectUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = ProjectUpdateRequest$outboundSchema;
  /** @deprecated use `ProjectUpdateRequest$Outbound` instead. */
  export type Outbound = ProjectUpdateRequest$Outbound;
}

export function projectUpdateRequestToJSON(
  projectUpdateRequest: ProjectUpdateRequest,
): string {
  return JSON.stringify(
    ProjectUpdateRequest$outboundSchema.parse(projectUpdateRequest),
  );
}

export function projectUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<ProjectUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectUpdateRequest' from JSON`,
  );
}

/** @internal */
export const ProjectUpdateResponseBody$inboundSchema: z.ZodType<
  ProjectUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/** @internal */
export type ProjectUpdateResponseBody$Outbound = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

/** @internal */
export const ProjectUpdateResponseBody$outboundSchema: z.ZodType<
  ProjectUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  ProjectUpdateResponseBody
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectUpdateResponseBody$ {
  /** @deprecated use `ProjectUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = ProjectUpdateResponseBody$inboundSchema;
  /** @deprecated use `ProjectUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = ProjectUpdateResponseBody$outboundSchema;
  /** @deprecated use `ProjectUpdateResponseBody$Outbound` instead. */
  export type Outbound = ProjectUpdateResponseBody$Outbound;
}

export function projectUpdateResponseBodyToJSON(
  projectUpdateResponseBody: ProjectUpdateResponseBody,
): string {
  return JSON.stringify(
    ProjectUpdateResponseBody$outboundSchema.parse(projectUpdateResponseBody),
  );
}

export function projectUpdateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ProjectUpdateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectUpdateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectUpdateResponseBody' from JSON`,
  );
}

/** @internal */
export const ProjectUpdateResponse$inboundSchema: z.ZodType<
  ProjectUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ProjectUpdateResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type ProjectUpdateResponse$Outbound =
  | ProjectUpdateResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const ProjectUpdateResponse$outboundSchema: z.ZodType<
  ProjectUpdateResponse$Outbound,
  z.ZodTypeDef,
  ProjectUpdateResponse
> = z.union([
  z.lazy(() => ProjectUpdateResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectUpdateResponse$ {
  /** @deprecated use `ProjectUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = ProjectUpdateResponse$inboundSchema;
  /** @deprecated use `ProjectUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = ProjectUpdateResponse$outboundSchema;
  /** @deprecated use `ProjectUpdateResponse$Outbound` instead. */
  export type Outbound = ProjectUpdateResponse$Outbound;
}

export function projectUpdateResponseToJSON(
  projectUpdateResponse: ProjectUpdateResponse,
): string {
  return JSON.stringify(
    ProjectUpdateResponse$outboundSchema.parse(projectUpdateResponse),
  );
}

export function projectUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<ProjectUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectUpdateResponse' from JSON`,
  );
}
