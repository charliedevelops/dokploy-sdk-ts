/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type MysqlMoveSecurity = {
  authorization: string;
};

export type MysqlMoveRequest = {
  mysqlId: string;
  targetEnvironmentId: string;
};

export const MysqlMoveApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type MysqlMoveApplicationStatus = ClosedEnum<
  typeof MysqlMoveApplicationStatus
>;

export type MysqlMoveHealthCheckSwarm = {
  test?: Array<string> | undefined;
  interval?: number | undefined;
  timeout?: number | undefined;
  startPeriod?: number | undefined;
  retries?: number | undefined;
};

export type MysqlMoveRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type MysqlMoveSpread = {
  spreadDescriptor: string;
};

export type MysqlMovePreference = {
  spread: MysqlMoveSpread;
};

export type MysqlMovePlatform = {
  architecture: string;
  os: string;
};

export type MysqlMovePlacementSwarm = {
  constraints?: Array<string> | undefined;
  preferences?: Array<MysqlMovePreference> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<MysqlMovePlatform> | undefined;
};

export type MysqlMoveUpdateConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type MysqlMoveRollbackConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type MysqlMoveReplicated = {
  replicas?: number | undefined;
};

export type MysqlMoveGlobal = {};

export type MysqlMoveReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type MysqlMoveGlobalJob = {};

export type MysqlMoveModeSwarm = {
  replicated?: MysqlMoveReplicated | undefined;
  global?: MysqlMoveGlobal | undefined;
  replicatedJob?: MysqlMoveReplicatedJob | undefined;
  globalJob?: MysqlMoveGlobalJob | undefined;
};

export type MysqlMoveDriverOpts = {};

export type MysqlMoveNetworkSwarm = {
  target?: string | undefined;
  aliases?: Array<string> | undefined;
  driverOpts?: MysqlMoveDriverOpts | undefined;
};

/**
 * Successful response
 */
export type MysqlMoveResponseBody = {
  mysqlId: string;
  name: string;
  appName: string;
  description: string | null;
  databaseName: string;
  databaseUser: string;
  databasePassword: string;
  databaseRootPassword: string;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  externalPort: number | null;
  applicationStatus: MysqlMoveApplicationStatus;
  healthCheckSwarm: MysqlMoveHealthCheckSwarm | null;
  restartPolicySwarm: MysqlMoveRestartPolicySwarm | null;
  placementSwarm: MysqlMovePlacementSwarm | null;
  updateConfigSwarm: MysqlMoveUpdateConfigSwarm | null;
  rollbackConfigSwarm: MysqlMoveRollbackConfigSwarm | null;
  modeSwarm: MysqlMoveModeSwarm | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<MysqlMoveNetworkSwarm> | null;
  replicas: number;
  createdAt: string;
  environmentId: string;
  serverId: string | null;
};

export type MysqlMoveResponse = MysqlMoveResponseBody | models.ErrorT;

/** @internal */
export const MysqlMoveSecurity$inboundSchema: z.ZodType<
  MysqlMoveSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type MysqlMoveSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const MysqlMoveSecurity$outboundSchema: z.ZodType<
  MysqlMoveSecurity$Outbound,
  z.ZodTypeDef,
  MysqlMoveSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlMoveSecurity$ {
  /** @deprecated use `MysqlMoveSecurity$inboundSchema` instead. */
  export const inboundSchema = MysqlMoveSecurity$inboundSchema;
  /** @deprecated use `MysqlMoveSecurity$outboundSchema` instead. */
  export const outboundSchema = MysqlMoveSecurity$outboundSchema;
  /** @deprecated use `MysqlMoveSecurity$Outbound` instead. */
  export type Outbound = MysqlMoveSecurity$Outbound;
}

export function mysqlMoveSecurityToJSON(
  mysqlMoveSecurity: MysqlMoveSecurity,
): string {
  return JSON.stringify(
    MysqlMoveSecurity$outboundSchema.parse(mysqlMoveSecurity),
  );
}

export function mysqlMoveSecurityFromJSON(
  jsonString: string,
): SafeParseResult<MysqlMoveSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlMoveSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlMoveSecurity' from JSON`,
  );
}

/** @internal */
export const MysqlMoveRequest$inboundSchema: z.ZodType<
  MysqlMoveRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mysqlId: z.string(),
  targetEnvironmentId: z.string(),
});

/** @internal */
export type MysqlMoveRequest$Outbound = {
  mysqlId: string;
  targetEnvironmentId: string;
};

/** @internal */
export const MysqlMoveRequest$outboundSchema: z.ZodType<
  MysqlMoveRequest$Outbound,
  z.ZodTypeDef,
  MysqlMoveRequest
> = z.object({
  mysqlId: z.string(),
  targetEnvironmentId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlMoveRequest$ {
  /** @deprecated use `MysqlMoveRequest$inboundSchema` instead. */
  export const inboundSchema = MysqlMoveRequest$inboundSchema;
  /** @deprecated use `MysqlMoveRequest$outboundSchema` instead. */
  export const outboundSchema = MysqlMoveRequest$outboundSchema;
  /** @deprecated use `MysqlMoveRequest$Outbound` instead. */
  export type Outbound = MysqlMoveRequest$Outbound;
}

export function mysqlMoveRequestToJSON(
  mysqlMoveRequest: MysqlMoveRequest,
): string {
  return JSON.stringify(
    MysqlMoveRequest$outboundSchema.parse(mysqlMoveRequest),
  );
}

export function mysqlMoveRequestFromJSON(
  jsonString: string,
): SafeParseResult<MysqlMoveRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlMoveRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlMoveRequest' from JSON`,
  );
}

/** @internal */
export const MysqlMoveApplicationStatus$inboundSchema: z.ZodNativeEnum<
  typeof MysqlMoveApplicationStatus
> = z.nativeEnum(MysqlMoveApplicationStatus);

/** @internal */
export const MysqlMoveApplicationStatus$outboundSchema: z.ZodNativeEnum<
  typeof MysqlMoveApplicationStatus
> = MysqlMoveApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlMoveApplicationStatus$ {
  /** @deprecated use `MysqlMoveApplicationStatus$inboundSchema` instead. */
  export const inboundSchema = MysqlMoveApplicationStatus$inboundSchema;
  /** @deprecated use `MysqlMoveApplicationStatus$outboundSchema` instead. */
  export const outboundSchema = MysqlMoveApplicationStatus$outboundSchema;
}

/** @internal */
export const MysqlMoveHealthCheckSwarm$inboundSchema: z.ZodType<
  MysqlMoveHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Test: z.array(z.string()).optional(),
  Interval: z.number().optional(),
  Timeout: z.number().optional(),
  StartPeriod: z.number().optional(),
  Retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Test": "test",
    "Interval": "interval",
    "Timeout": "timeout",
    "StartPeriod": "startPeriod",
    "Retries": "retries",
  });
});

/** @internal */
export type MysqlMoveHealthCheckSwarm$Outbound = {
  Test?: Array<string> | undefined;
  Interval?: number | undefined;
  Timeout?: number | undefined;
  StartPeriod?: number | undefined;
  Retries?: number | undefined;
};

/** @internal */
export const MysqlMoveHealthCheckSwarm$outboundSchema: z.ZodType<
  MysqlMoveHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  MysqlMoveHealthCheckSwarm
> = z.object({
  test: z.array(z.string()).optional(),
  interval: z.number().optional(),
  timeout: z.number().optional(),
  startPeriod: z.number().optional(),
  retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    test: "Test",
    interval: "Interval",
    timeout: "Timeout",
    startPeriod: "StartPeriod",
    retries: "Retries",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlMoveHealthCheckSwarm$ {
  /** @deprecated use `MysqlMoveHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlMoveHealthCheckSwarm$inboundSchema;
  /** @deprecated use `MysqlMoveHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlMoveHealthCheckSwarm$outboundSchema;
  /** @deprecated use `MysqlMoveHealthCheckSwarm$Outbound` instead. */
  export type Outbound = MysqlMoveHealthCheckSwarm$Outbound;
}

export function mysqlMoveHealthCheckSwarmToJSON(
  mysqlMoveHealthCheckSwarm: MysqlMoveHealthCheckSwarm,
): string {
  return JSON.stringify(
    MysqlMoveHealthCheckSwarm$outboundSchema.parse(mysqlMoveHealthCheckSwarm),
  );
}

export function mysqlMoveHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlMoveHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlMoveHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlMoveHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlMoveRestartPolicySwarm$inboundSchema: z.ZodType<
  MysqlMoveRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type MysqlMoveRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const MysqlMoveRestartPolicySwarm$outboundSchema: z.ZodType<
  MysqlMoveRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  MysqlMoveRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlMoveRestartPolicySwarm$ {
  /** @deprecated use `MysqlMoveRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlMoveRestartPolicySwarm$inboundSchema;
  /** @deprecated use `MysqlMoveRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlMoveRestartPolicySwarm$outboundSchema;
  /** @deprecated use `MysqlMoveRestartPolicySwarm$Outbound` instead. */
  export type Outbound = MysqlMoveRestartPolicySwarm$Outbound;
}

export function mysqlMoveRestartPolicySwarmToJSON(
  mysqlMoveRestartPolicySwarm: MysqlMoveRestartPolicySwarm,
): string {
  return JSON.stringify(
    MysqlMoveRestartPolicySwarm$outboundSchema.parse(
      mysqlMoveRestartPolicySwarm,
    ),
  );
}

export function mysqlMoveRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlMoveRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlMoveRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlMoveRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const MysqlMoveSpread$inboundSchema: z.ZodType<
  MysqlMoveSpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type MysqlMoveSpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const MysqlMoveSpread$outboundSchema: z.ZodType<
  MysqlMoveSpread$Outbound,
  z.ZodTypeDef,
  MysqlMoveSpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlMoveSpread$ {
  /** @deprecated use `MysqlMoveSpread$inboundSchema` instead. */
  export const inboundSchema = MysqlMoveSpread$inboundSchema;
  /** @deprecated use `MysqlMoveSpread$outboundSchema` instead. */
  export const outboundSchema = MysqlMoveSpread$outboundSchema;
  /** @deprecated use `MysqlMoveSpread$Outbound` instead. */
  export type Outbound = MysqlMoveSpread$Outbound;
}

export function mysqlMoveSpreadToJSON(
  mysqlMoveSpread: MysqlMoveSpread,
): string {
  return JSON.stringify(MysqlMoveSpread$outboundSchema.parse(mysqlMoveSpread));
}

export function mysqlMoveSpreadFromJSON(
  jsonString: string,
): SafeParseResult<MysqlMoveSpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlMoveSpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlMoveSpread' from JSON`,
  );
}

/** @internal */
export const MysqlMovePreference$inboundSchema: z.ZodType<
  MysqlMovePreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => MysqlMoveSpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type MysqlMovePreference$Outbound = {
  Spread: MysqlMoveSpread$Outbound;
};

/** @internal */
export const MysqlMovePreference$outboundSchema: z.ZodType<
  MysqlMovePreference$Outbound,
  z.ZodTypeDef,
  MysqlMovePreference
> = z.object({
  spread: z.lazy(() => MysqlMoveSpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlMovePreference$ {
  /** @deprecated use `MysqlMovePreference$inboundSchema` instead. */
  export const inboundSchema = MysqlMovePreference$inboundSchema;
  /** @deprecated use `MysqlMovePreference$outboundSchema` instead. */
  export const outboundSchema = MysqlMovePreference$outboundSchema;
  /** @deprecated use `MysqlMovePreference$Outbound` instead. */
  export type Outbound = MysqlMovePreference$Outbound;
}

export function mysqlMovePreferenceToJSON(
  mysqlMovePreference: MysqlMovePreference,
): string {
  return JSON.stringify(
    MysqlMovePreference$outboundSchema.parse(mysqlMovePreference),
  );
}

export function mysqlMovePreferenceFromJSON(
  jsonString: string,
): SafeParseResult<MysqlMovePreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlMovePreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlMovePreference' from JSON`,
  );
}

/** @internal */
export const MysqlMovePlatform$inboundSchema: z.ZodType<
  MysqlMovePlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type MysqlMovePlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const MysqlMovePlatform$outboundSchema: z.ZodType<
  MysqlMovePlatform$Outbound,
  z.ZodTypeDef,
  MysqlMovePlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlMovePlatform$ {
  /** @deprecated use `MysqlMovePlatform$inboundSchema` instead. */
  export const inboundSchema = MysqlMovePlatform$inboundSchema;
  /** @deprecated use `MysqlMovePlatform$outboundSchema` instead. */
  export const outboundSchema = MysqlMovePlatform$outboundSchema;
  /** @deprecated use `MysqlMovePlatform$Outbound` instead. */
  export type Outbound = MysqlMovePlatform$Outbound;
}

export function mysqlMovePlatformToJSON(
  mysqlMovePlatform: MysqlMovePlatform,
): string {
  return JSON.stringify(
    MysqlMovePlatform$outboundSchema.parse(mysqlMovePlatform),
  );
}

export function mysqlMovePlatformFromJSON(
  jsonString: string,
): SafeParseResult<MysqlMovePlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlMovePlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlMovePlatform' from JSON`,
  );
}

/** @internal */
export const MysqlMovePlacementSwarm$inboundSchema: z.ZodType<
  MysqlMovePlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  Preferences: z.array(z.lazy(() => MysqlMovePreference$inboundSchema))
    .optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => MysqlMovePlatform$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "Preferences": "preferences",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
  });
});

/** @internal */
export type MysqlMovePlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  Preferences?: Array<MysqlMovePreference$Outbound> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<MysqlMovePlatform$Outbound> | undefined;
};

/** @internal */
export const MysqlMovePlacementSwarm$outboundSchema: z.ZodType<
  MysqlMovePlacementSwarm$Outbound,
  z.ZodTypeDef,
  MysqlMovePlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  preferences: z.array(z.lazy(() => MysqlMovePreference$outboundSchema))
    .optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => MysqlMovePlatform$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    preferences: "Preferences",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlMovePlacementSwarm$ {
  /** @deprecated use `MysqlMovePlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlMovePlacementSwarm$inboundSchema;
  /** @deprecated use `MysqlMovePlacementSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlMovePlacementSwarm$outboundSchema;
  /** @deprecated use `MysqlMovePlacementSwarm$Outbound` instead. */
  export type Outbound = MysqlMovePlacementSwarm$Outbound;
}

export function mysqlMovePlacementSwarmToJSON(
  mysqlMovePlacementSwarm: MysqlMovePlacementSwarm,
): string {
  return JSON.stringify(
    MysqlMovePlacementSwarm$outboundSchema.parse(mysqlMovePlacementSwarm),
  );
}

export function mysqlMovePlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlMovePlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlMovePlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlMovePlacementSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlMoveUpdateConfigSwarm$inboundSchema: z.ZodType<
  MysqlMoveUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type MysqlMoveUpdateConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const MysqlMoveUpdateConfigSwarm$outboundSchema: z.ZodType<
  MysqlMoveUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  MysqlMoveUpdateConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlMoveUpdateConfigSwarm$ {
  /** @deprecated use `MysqlMoveUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlMoveUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `MysqlMoveUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlMoveUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `MysqlMoveUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = MysqlMoveUpdateConfigSwarm$Outbound;
}

export function mysqlMoveUpdateConfigSwarmToJSON(
  mysqlMoveUpdateConfigSwarm: MysqlMoveUpdateConfigSwarm,
): string {
  return JSON.stringify(
    MysqlMoveUpdateConfigSwarm$outboundSchema.parse(mysqlMoveUpdateConfigSwarm),
  );
}

export function mysqlMoveUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlMoveUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlMoveUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlMoveUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlMoveRollbackConfigSwarm$inboundSchema: z.ZodType<
  MysqlMoveRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type MysqlMoveRollbackConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const MysqlMoveRollbackConfigSwarm$outboundSchema: z.ZodType<
  MysqlMoveRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  MysqlMoveRollbackConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlMoveRollbackConfigSwarm$ {
  /** @deprecated use `MysqlMoveRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlMoveRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `MysqlMoveRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlMoveRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `MysqlMoveRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = MysqlMoveRollbackConfigSwarm$Outbound;
}

export function mysqlMoveRollbackConfigSwarmToJSON(
  mysqlMoveRollbackConfigSwarm: MysqlMoveRollbackConfigSwarm,
): string {
  return JSON.stringify(
    MysqlMoveRollbackConfigSwarm$outboundSchema.parse(
      mysqlMoveRollbackConfigSwarm,
    ),
  );
}

export function mysqlMoveRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlMoveRollbackConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlMoveRollbackConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlMoveRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlMoveReplicated$inboundSchema: z.ZodType<
  MysqlMoveReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type MysqlMoveReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const MysqlMoveReplicated$outboundSchema: z.ZodType<
  MysqlMoveReplicated$Outbound,
  z.ZodTypeDef,
  MysqlMoveReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlMoveReplicated$ {
  /** @deprecated use `MysqlMoveReplicated$inboundSchema` instead. */
  export const inboundSchema = MysqlMoveReplicated$inboundSchema;
  /** @deprecated use `MysqlMoveReplicated$outboundSchema` instead. */
  export const outboundSchema = MysqlMoveReplicated$outboundSchema;
  /** @deprecated use `MysqlMoveReplicated$Outbound` instead. */
  export type Outbound = MysqlMoveReplicated$Outbound;
}

export function mysqlMoveReplicatedToJSON(
  mysqlMoveReplicated: MysqlMoveReplicated,
): string {
  return JSON.stringify(
    MysqlMoveReplicated$outboundSchema.parse(mysqlMoveReplicated),
  );
}

export function mysqlMoveReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<MysqlMoveReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlMoveReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlMoveReplicated' from JSON`,
  );
}

/** @internal */
export const MysqlMoveGlobal$inboundSchema: z.ZodType<
  MysqlMoveGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MysqlMoveGlobal$Outbound = {};

/** @internal */
export const MysqlMoveGlobal$outboundSchema: z.ZodType<
  MysqlMoveGlobal$Outbound,
  z.ZodTypeDef,
  MysqlMoveGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlMoveGlobal$ {
  /** @deprecated use `MysqlMoveGlobal$inboundSchema` instead. */
  export const inboundSchema = MysqlMoveGlobal$inboundSchema;
  /** @deprecated use `MysqlMoveGlobal$outboundSchema` instead. */
  export const outboundSchema = MysqlMoveGlobal$outboundSchema;
  /** @deprecated use `MysqlMoveGlobal$Outbound` instead. */
  export type Outbound = MysqlMoveGlobal$Outbound;
}

export function mysqlMoveGlobalToJSON(
  mysqlMoveGlobal: MysqlMoveGlobal,
): string {
  return JSON.stringify(MysqlMoveGlobal$outboundSchema.parse(mysqlMoveGlobal));
}

export function mysqlMoveGlobalFromJSON(
  jsonString: string,
): SafeParseResult<MysqlMoveGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlMoveGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlMoveGlobal' from JSON`,
  );
}

/** @internal */
export const MysqlMoveReplicatedJob$inboundSchema: z.ZodType<
  MysqlMoveReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type MysqlMoveReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const MysqlMoveReplicatedJob$outboundSchema: z.ZodType<
  MysqlMoveReplicatedJob$Outbound,
  z.ZodTypeDef,
  MysqlMoveReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlMoveReplicatedJob$ {
  /** @deprecated use `MysqlMoveReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = MysqlMoveReplicatedJob$inboundSchema;
  /** @deprecated use `MysqlMoveReplicatedJob$outboundSchema` instead. */
  export const outboundSchema = MysqlMoveReplicatedJob$outboundSchema;
  /** @deprecated use `MysqlMoveReplicatedJob$Outbound` instead. */
  export type Outbound = MysqlMoveReplicatedJob$Outbound;
}

export function mysqlMoveReplicatedJobToJSON(
  mysqlMoveReplicatedJob: MysqlMoveReplicatedJob,
): string {
  return JSON.stringify(
    MysqlMoveReplicatedJob$outboundSchema.parse(mysqlMoveReplicatedJob),
  );
}

export function mysqlMoveReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<MysqlMoveReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlMoveReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlMoveReplicatedJob' from JSON`,
  );
}

/** @internal */
export const MysqlMoveGlobalJob$inboundSchema: z.ZodType<
  MysqlMoveGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MysqlMoveGlobalJob$Outbound = {};

/** @internal */
export const MysqlMoveGlobalJob$outboundSchema: z.ZodType<
  MysqlMoveGlobalJob$Outbound,
  z.ZodTypeDef,
  MysqlMoveGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlMoveGlobalJob$ {
  /** @deprecated use `MysqlMoveGlobalJob$inboundSchema` instead. */
  export const inboundSchema = MysqlMoveGlobalJob$inboundSchema;
  /** @deprecated use `MysqlMoveGlobalJob$outboundSchema` instead. */
  export const outboundSchema = MysqlMoveGlobalJob$outboundSchema;
  /** @deprecated use `MysqlMoveGlobalJob$Outbound` instead. */
  export type Outbound = MysqlMoveGlobalJob$Outbound;
}

export function mysqlMoveGlobalJobToJSON(
  mysqlMoveGlobalJob: MysqlMoveGlobalJob,
): string {
  return JSON.stringify(
    MysqlMoveGlobalJob$outboundSchema.parse(mysqlMoveGlobalJob),
  );
}

export function mysqlMoveGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<MysqlMoveGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlMoveGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlMoveGlobalJob' from JSON`,
  );
}

/** @internal */
export const MysqlMoveModeSwarm$inboundSchema: z.ZodType<
  MysqlMoveModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicated: z.lazy(() => MysqlMoveReplicated$inboundSchema).optional(),
  Global: z.lazy(() => MysqlMoveGlobal$inboundSchema).optional(),
  ReplicatedJob: z.lazy(() => MysqlMoveReplicatedJob$inboundSchema).optional(),
  GlobalJob: z.lazy(() => MysqlMoveGlobalJob$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicated": "replicated",
    "Global": "global",
    "ReplicatedJob": "replicatedJob",
    "GlobalJob": "globalJob",
  });
});

/** @internal */
export type MysqlMoveModeSwarm$Outbound = {
  Replicated?: MysqlMoveReplicated$Outbound | undefined;
  Global?: MysqlMoveGlobal$Outbound | undefined;
  ReplicatedJob?: MysqlMoveReplicatedJob$Outbound | undefined;
  GlobalJob?: MysqlMoveGlobalJob$Outbound | undefined;
};

/** @internal */
export const MysqlMoveModeSwarm$outboundSchema: z.ZodType<
  MysqlMoveModeSwarm$Outbound,
  z.ZodTypeDef,
  MysqlMoveModeSwarm
> = z.object({
  replicated: z.lazy(() => MysqlMoveReplicated$outboundSchema).optional(),
  global: z.lazy(() => MysqlMoveGlobal$outboundSchema).optional(),
  replicatedJob: z.lazy(() => MysqlMoveReplicatedJob$outboundSchema).optional(),
  globalJob: z.lazy(() => MysqlMoveGlobalJob$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    replicated: "Replicated",
    global: "Global",
    replicatedJob: "ReplicatedJob",
    globalJob: "GlobalJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlMoveModeSwarm$ {
  /** @deprecated use `MysqlMoveModeSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlMoveModeSwarm$inboundSchema;
  /** @deprecated use `MysqlMoveModeSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlMoveModeSwarm$outboundSchema;
  /** @deprecated use `MysqlMoveModeSwarm$Outbound` instead. */
  export type Outbound = MysqlMoveModeSwarm$Outbound;
}

export function mysqlMoveModeSwarmToJSON(
  mysqlMoveModeSwarm: MysqlMoveModeSwarm,
): string {
  return JSON.stringify(
    MysqlMoveModeSwarm$outboundSchema.parse(mysqlMoveModeSwarm),
  );
}

export function mysqlMoveModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlMoveModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlMoveModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlMoveModeSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlMoveDriverOpts$inboundSchema: z.ZodType<
  MysqlMoveDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MysqlMoveDriverOpts$Outbound = {};

/** @internal */
export const MysqlMoveDriverOpts$outboundSchema: z.ZodType<
  MysqlMoveDriverOpts$Outbound,
  z.ZodTypeDef,
  MysqlMoveDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlMoveDriverOpts$ {
  /** @deprecated use `MysqlMoveDriverOpts$inboundSchema` instead. */
  export const inboundSchema = MysqlMoveDriverOpts$inboundSchema;
  /** @deprecated use `MysqlMoveDriverOpts$outboundSchema` instead. */
  export const outboundSchema = MysqlMoveDriverOpts$outboundSchema;
  /** @deprecated use `MysqlMoveDriverOpts$Outbound` instead. */
  export type Outbound = MysqlMoveDriverOpts$Outbound;
}

export function mysqlMoveDriverOptsToJSON(
  mysqlMoveDriverOpts: MysqlMoveDriverOpts,
): string {
  return JSON.stringify(
    MysqlMoveDriverOpts$outboundSchema.parse(mysqlMoveDriverOpts),
  );
}

export function mysqlMoveDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<MysqlMoveDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlMoveDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlMoveDriverOpts' from JSON`,
  );
}

/** @internal */
export const MysqlMoveNetworkSwarm$inboundSchema: z.ZodType<
  MysqlMoveNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Target: z.string().optional(),
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => MysqlMoveDriverOpts$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Target": "target",
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
  });
});

/** @internal */
export type MysqlMoveNetworkSwarm$Outbound = {
  Target?: string | undefined;
  Aliases?: Array<string> | undefined;
  DriverOpts?: MysqlMoveDriverOpts$Outbound | undefined;
};

/** @internal */
export const MysqlMoveNetworkSwarm$outboundSchema: z.ZodType<
  MysqlMoveNetworkSwarm$Outbound,
  z.ZodTypeDef,
  MysqlMoveNetworkSwarm
> = z.object({
  target: z.string().optional(),
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => MysqlMoveDriverOpts$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    target: "Target",
    aliases: "Aliases",
    driverOpts: "DriverOpts",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlMoveNetworkSwarm$ {
  /** @deprecated use `MysqlMoveNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlMoveNetworkSwarm$inboundSchema;
  /** @deprecated use `MysqlMoveNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlMoveNetworkSwarm$outboundSchema;
  /** @deprecated use `MysqlMoveNetworkSwarm$Outbound` instead. */
  export type Outbound = MysqlMoveNetworkSwarm$Outbound;
}

export function mysqlMoveNetworkSwarmToJSON(
  mysqlMoveNetworkSwarm: MysqlMoveNetworkSwarm,
): string {
  return JSON.stringify(
    MysqlMoveNetworkSwarm$outboundSchema.parse(mysqlMoveNetworkSwarm),
  );
}

export function mysqlMoveNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlMoveNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlMoveNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlMoveNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlMoveResponseBody$inboundSchema: z.ZodType<
  MysqlMoveResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  mysqlId: z.string(),
  name: z.string(),
  appName: z.string(),
  description: z.nullable(z.string()),
  databaseName: z.string(),
  databaseUser: z.string(),
  databasePassword: z.string(),
  databaseRootPassword: z.string(),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  applicationStatus: MysqlMoveApplicationStatus$inboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => MysqlMoveHealthCheckSwarm$inboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MysqlMoveRestartPolicySwarm$inboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => MysqlMovePlacementSwarm$inboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MysqlMoveUpdateConfigSwarm$inboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MysqlMoveRollbackConfigSwarm$inboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => MysqlMoveModeSwarm$inboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MysqlMoveNetworkSwarm$inboundSchema)),
  ),
  replicas: z.number(),
  createdAt: z.string(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
});

/** @internal */
export type MysqlMoveResponseBody$Outbound = {
  mysqlId: string;
  name: string;
  appName: string;
  description: string | null;
  databaseName: string;
  databaseUser: string;
  databasePassword: string;
  databaseRootPassword: string;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  externalPort: number | null;
  applicationStatus: string;
  healthCheckSwarm: MysqlMoveHealthCheckSwarm$Outbound | null;
  restartPolicySwarm: MysqlMoveRestartPolicySwarm$Outbound | null;
  placementSwarm: MysqlMovePlacementSwarm$Outbound | null;
  updateConfigSwarm: MysqlMoveUpdateConfigSwarm$Outbound | null;
  rollbackConfigSwarm: MysqlMoveRollbackConfigSwarm$Outbound | null;
  modeSwarm: MysqlMoveModeSwarm$Outbound | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<MysqlMoveNetworkSwarm$Outbound> | null;
  replicas: number;
  createdAt: string;
  environmentId: string;
  serverId: string | null;
};

/** @internal */
export const MysqlMoveResponseBody$outboundSchema: z.ZodType<
  MysqlMoveResponseBody$Outbound,
  z.ZodTypeDef,
  MysqlMoveResponseBody
> = z.object({
  mysqlId: z.string(),
  name: z.string(),
  appName: z.string(),
  description: z.nullable(z.string()),
  databaseName: z.string(),
  databaseUser: z.string(),
  databasePassword: z.string(),
  databaseRootPassword: z.string(),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  applicationStatus: MysqlMoveApplicationStatus$outboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => MysqlMoveHealthCheckSwarm$outboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MysqlMoveRestartPolicySwarm$outboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => MysqlMovePlacementSwarm$outboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MysqlMoveUpdateConfigSwarm$outboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MysqlMoveRollbackConfigSwarm$outboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => MysqlMoveModeSwarm$outboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MysqlMoveNetworkSwarm$outboundSchema)),
  ),
  replicas: z.number(),
  createdAt: z.string(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlMoveResponseBody$ {
  /** @deprecated use `MysqlMoveResponseBody$inboundSchema` instead. */
  export const inboundSchema = MysqlMoveResponseBody$inboundSchema;
  /** @deprecated use `MysqlMoveResponseBody$outboundSchema` instead. */
  export const outboundSchema = MysqlMoveResponseBody$outboundSchema;
  /** @deprecated use `MysqlMoveResponseBody$Outbound` instead. */
  export type Outbound = MysqlMoveResponseBody$Outbound;
}

export function mysqlMoveResponseBodyToJSON(
  mysqlMoveResponseBody: MysqlMoveResponseBody,
): string {
  return JSON.stringify(
    MysqlMoveResponseBody$outboundSchema.parse(mysqlMoveResponseBody),
  );
}

export function mysqlMoveResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<MysqlMoveResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlMoveResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlMoveResponseBody' from JSON`,
  );
}

/** @internal */
export const MysqlMoveResponse$inboundSchema: z.ZodType<
  MysqlMoveResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => MysqlMoveResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type MysqlMoveResponse$Outbound =
  | MysqlMoveResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const MysqlMoveResponse$outboundSchema: z.ZodType<
  MysqlMoveResponse$Outbound,
  z.ZodTypeDef,
  MysqlMoveResponse
> = z.union([
  z.lazy(() => MysqlMoveResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlMoveResponse$ {
  /** @deprecated use `MysqlMoveResponse$inboundSchema` instead. */
  export const inboundSchema = MysqlMoveResponse$inboundSchema;
  /** @deprecated use `MysqlMoveResponse$outboundSchema` instead. */
  export const outboundSchema = MysqlMoveResponse$outboundSchema;
  /** @deprecated use `MysqlMoveResponse$Outbound` instead. */
  export type Outbound = MysqlMoveResponse$Outbound;
}

export function mysqlMoveResponseToJSON(
  mysqlMoveResponse: MysqlMoveResponse,
): string {
  return JSON.stringify(
    MysqlMoveResponse$outboundSchema.parse(mysqlMoveResponse),
  );
}

export function mysqlMoveResponseFromJSON(
  jsonString: string,
): SafeParseResult<MysqlMoveResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlMoveResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlMoveResponse' from JSON`,
  );
}
