/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type MongoCreateSecurity = {
  authorization: string;
};

export type MongoCreateRequest = {
  appName: string;
  databasePassword: string;
  databaseUser: string;
  description?: string | null | undefined;
  dockerImage?: string | undefined;
  environmentId: string;
  name: string;
  replicaSets?: boolean | null | undefined;
  serverId?: string | null | undefined;
};

export type MongoCreateResponse = models.ErrorT | boolean;

/** @internal */
export const MongoCreateSecurity$inboundSchema: z.ZodType<
  MongoCreateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type MongoCreateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const MongoCreateSecurity$outboundSchema: z.ZodType<
  MongoCreateSecurity$Outbound,
  z.ZodTypeDef,
  MongoCreateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoCreateSecurity$ {
  /** @deprecated use `MongoCreateSecurity$inboundSchema` instead. */
  export const inboundSchema = MongoCreateSecurity$inboundSchema;
  /** @deprecated use `MongoCreateSecurity$outboundSchema` instead. */
  export const outboundSchema = MongoCreateSecurity$outboundSchema;
  /** @deprecated use `MongoCreateSecurity$Outbound` instead. */
  export type Outbound = MongoCreateSecurity$Outbound;
}

export function mongoCreateSecurityToJSON(
  mongoCreateSecurity: MongoCreateSecurity,
): string {
  return JSON.stringify(
    MongoCreateSecurity$outboundSchema.parse(mongoCreateSecurity),
  );
}

export function mongoCreateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<MongoCreateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoCreateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoCreateSecurity' from JSON`,
  );
}

/** @internal */
export const MongoCreateRequest$inboundSchema: z.ZodType<
  MongoCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  databasePassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()).optional(),
  dockerImage: z.string().default("mongo:15"),
  environmentId: z.string(),
  name: z.string(),
  replicaSets: z.nullable(z.boolean().default(false)),
  serverId: z.nullable(z.string()).optional(),
});

/** @internal */
export type MongoCreateRequest$Outbound = {
  appName: string;
  databasePassword: string;
  databaseUser: string;
  description?: string | null | undefined;
  dockerImage: string;
  environmentId: string;
  name: string;
  replicaSets: boolean | null;
  serverId?: string | null | undefined;
};

/** @internal */
export const MongoCreateRequest$outboundSchema: z.ZodType<
  MongoCreateRequest$Outbound,
  z.ZodTypeDef,
  MongoCreateRequest
> = z.object({
  appName: z.string(),
  databasePassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()).optional(),
  dockerImage: z.string().default("mongo:15"),
  environmentId: z.string(),
  name: z.string(),
  replicaSets: z.nullable(z.boolean().default(false)),
  serverId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoCreateRequest$ {
  /** @deprecated use `MongoCreateRequest$inboundSchema` instead. */
  export const inboundSchema = MongoCreateRequest$inboundSchema;
  /** @deprecated use `MongoCreateRequest$outboundSchema` instead. */
  export const outboundSchema = MongoCreateRequest$outboundSchema;
  /** @deprecated use `MongoCreateRequest$Outbound` instead. */
  export type Outbound = MongoCreateRequest$Outbound;
}

export function mongoCreateRequestToJSON(
  mongoCreateRequest: MongoCreateRequest,
): string {
  return JSON.stringify(
    MongoCreateRequest$outboundSchema.parse(mongoCreateRequest),
  );
}

export function mongoCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<MongoCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoCreateRequest' from JSON`,
  );
}

/** @internal */
export const MongoCreateResponse$inboundSchema: z.ZodType<
  MongoCreateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.boolean()]);

/** @internal */
export type MongoCreateResponse$Outbound = models.ErrorT$Outbound | boolean;

/** @internal */
export const MongoCreateResponse$outboundSchema: z.ZodType<
  MongoCreateResponse$Outbound,
  z.ZodTypeDef,
  MongoCreateResponse
> = z.union([models.ErrorT$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoCreateResponse$ {
  /** @deprecated use `MongoCreateResponse$inboundSchema` instead. */
  export const inboundSchema = MongoCreateResponse$inboundSchema;
  /** @deprecated use `MongoCreateResponse$outboundSchema` instead. */
  export const outboundSchema = MongoCreateResponse$outboundSchema;
  /** @deprecated use `MongoCreateResponse$Outbound` instead. */
  export type Outbound = MongoCreateResponse$Outbound;
}

export function mongoCreateResponseToJSON(
  mongoCreateResponse: MongoCreateResponse,
): string {
  return JSON.stringify(
    MongoCreateResponse$outboundSchema.parse(mongoCreateResponse),
  );
}

export function mongoCreateResponseFromJSON(
  jsonString: string,
): SafeParseResult<MongoCreateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoCreateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoCreateResponse' from JSON`,
  );
}
