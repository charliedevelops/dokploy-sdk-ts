/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type MariadbSaveExternalPortRequest = {
  externalPort: number | null;
  mariadbId: string;
};

export const MariadbSaveExternalPortApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type MariadbSaveExternalPortApplicationStatus = ClosedEnum<
  typeof MariadbSaveExternalPortApplicationStatus
>;

export const MariadbSaveExternalPortBackupType = {
  Database: "database",
  Compose: "compose",
} as const;
export type MariadbSaveExternalPortBackupType = ClosedEnum<
  typeof MariadbSaveExternalPortBackupType
>;

export const MariadbSaveExternalPortDatabaseType = {
  Postgres: "postgres",
  Mariadb: "mariadb",
  Mysql: "mysql",
  Mongo: "mongo",
  WebServer: "web-server",
} as const;
export type MariadbSaveExternalPortDatabaseType = ClosedEnum<
  typeof MariadbSaveExternalPortDatabaseType
>;

export const MariadbSaveExternalPortMetadataEnum = {
  Null: "null",
} as const;
export type MariadbSaveExternalPortMetadataEnum = ClosedEnum<
  typeof MariadbSaveExternalPortMetadataEnum
>;

export type MariadbSaveExternalPortMariadb = {
  databasePassword: string;
  databaseUser: string;
};

export type MariadbSaveExternalPortMongo = {
  databasePassword: string;
  databaseUser: string;
};

export type MariadbSaveExternalPortMysql = {
  databaseRootPassword: string;
};

export type MariadbSaveExternalPortPostgres = {
  databaseUser: string;
};

export type MariadbSaveExternalPortMetadata = {
  mariadb?: MariadbSaveExternalPortMariadb | undefined;
  mongo?: MariadbSaveExternalPortMongo | undefined;
  mysql?: MariadbSaveExternalPortMysql | undefined;
  postgres?: MariadbSaveExternalPortPostgres | undefined;
};

export type MariadbSaveExternalPortMetadataUnion =
  | MariadbSaveExternalPortMetadata
  | MariadbSaveExternalPortMetadataEnum;

export type MariadbSaveExternalPortBackup = {
  appName: string;
  backupId: string;
  backupType: MariadbSaveExternalPortBackupType;
  composeId: string | null;
  database: string;
  databaseType: MariadbSaveExternalPortDatabaseType;
  destinationId: string;
  enabled: boolean | null;
  keepLatestCount: number | null;
  mariadbId: string | null;
  metadata?:
    | MariadbSaveExternalPortMetadata
    | MariadbSaveExternalPortMetadataEnum
    | null
    | undefined;
  mongoId: string | null;
  mysqlId: string | null;
  postgresId: string | null;
  prefix: string;
  schedule: string;
  serviceName: string | null;
  userId: string | null;
};

export type MariadbSaveExternalPortProject = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

export type MariadbSaveExternalPortEnvironment = {
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  name: string;
  project: MariadbSaveExternalPortProject;
  projectId: string;
};

export type MariadbSaveExternalPortHealthCheckSwarm = {
  interval?: number | undefined;
  retries?: number | undefined;
  startPeriod?: number | undefined;
  test?: Array<string> | undefined;
  timeout?: number | undefined;
};

export type MariadbSaveExternalPortGlobal = {};

export type MariadbSaveExternalPortGlobalJob = {};

export type MariadbSaveExternalPortReplicated = {
  replicas?: number | undefined;
};

export type MariadbSaveExternalPortReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type MariadbSaveExternalPortModeSwarm = {
  global?: MariadbSaveExternalPortGlobal | undefined;
  globalJob?: MariadbSaveExternalPortGlobalJob | undefined;
  replicated?: MariadbSaveExternalPortReplicated | undefined;
  replicatedJob?: MariadbSaveExternalPortReplicatedJob | undefined;
};

export const MariadbSaveExternalPortServiceType = {
  Application: "application",
  Postgres: "postgres",
  Mysql: "mysql",
  Mariadb: "mariadb",
  Mongo: "mongo",
  Redis: "redis",
  Compose: "compose",
} as const;
export type MariadbSaveExternalPortServiceType = ClosedEnum<
  typeof MariadbSaveExternalPortServiceType
>;

export const MariadbSaveExternalPortType = {
  Bind: "bind",
  Volume: "volume",
  File: "file",
} as const;
export type MariadbSaveExternalPortType = ClosedEnum<
  typeof MariadbSaveExternalPortType
>;

export type MariadbSaveExternalPortMount = {
  applicationId: string | null;
  composeId: string | null;
  content: string | null;
  filePath: string | null;
  hostPath: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mountId: string;
  mountPath: string;
  mysqlId: string | null;
  postgresId: string | null;
  redisId: string | null;
  serviceType: MariadbSaveExternalPortServiceType;
  type: MariadbSaveExternalPortType;
  volumeName: string | null;
};

export type MariadbSaveExternalPortDriverOpts = {};

export type MariadbSaveExternalPortNetworkSwarm = {
  aliases?: Array<string> | undefined;
  driverOpts?: MariadbSaveExternalPortDriverOpts | undefined;
  target?: string | undefined;
};

export type MariadbSaveExternalPortPlatform = {
  architecture: string;
  os: string;
};

export type MariadbSaveExternalPortSpread = {
  spreadDescriptor: string;
};

export type MariadbSaveExternalPortPreference = {
  spread: MariadbSaveExternalPortSpread;
};

export type MariadbSaveExternalPortPlacementSwarm = {
  constraints?: Array<string> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<MariadbSaveExternalPortPlatform> | undefined;
  preferences?: Array<MariadbSaveExternalPortPreference> | undefined;
};

export type MariadbSaveExternalPortRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type MariadbSaveExternalPortRollbackConfigSwarm = {
  delay?: number | undefined;
  failureAction?: string | undefined;
  maxFailureRatio?: number | undefined;
  monitor?: number | undefined;
  order: string;
  parallelism: number;
};

export const MariadbSaveExternalPortMetricsConfigEnum = {
  Null: "null",
} as const;
export type MariadbSaveExternalPortMetricsConfigEnum = ClosedEnum<
  typeof MariadbSaveExternalPortMetricsConfigEnum
>;

export type MariadbSaveExternalPortMetricsConfigUnion1 =
  | string
  | number
  | boolean
  | MariadbSaveExternalPortMetricsConfigEnum;

export type MariadbSaveExternalPortMetricsConfigUnion2 =
  | string
  | number
  | boolean
  | MariadbSaveExternalPortMetricsConfigEnum
  | Array<any>
  | { [k: string]: any };

export const MariadbSaveExternalPortServerStatus = {
  Active: "active",
  Inactive: "inactive",
} as const;
export type MariadbSaveExternalPortServerStatus = ClosedEnum<
  typeof MariadbSaveExternalPortServerStatus
>;

export type MariadbSaveExternalPortServer = {
  appName: string;
  command: string;
  createdAt: string;
  description: string | null;
  enableDockerCleanup: boolean;
  ipAddress: string;
  metricsConfig:
    | string
    | number
    | boolean
    | MariadbSaveExternalPortMetricsConfigEnum
    | Array<any>
    | { [k: string]: any };
  name: string;
  organizationId: string;
  port: number;
  serverId: string;
  serverStatus: MariadbSaveExternalPortServerStatus;
  sshKeyId: string | null;
  username: string;
};

export type MariadbSaveExternalPortUpdateConfigSwarm = {
  delay?: number | undefined;
  failureAction?: string | undefined;
  maxFailureRatio?: number | undefined;
  monitor?: number | undefined;
  order: string;
  parallelism: number;
};

/**
 * Successful response
 */
export type MariadbSaveExternalPortResponseBody = {
  appName: string;
  applicationStatus: MariadbSaveExternalPortApplicationStatus;
  backups: Array<MariadbSaveExternalPortBackup>;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databaseName: string;
  databasePassword: string;
  databaseRootPassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environment: MariadbSaveExternalPortEnvironment;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: MariadbSaveExternalPortHealthCheckSwarm | null;
  labelsSwarm: { [k: string]: string } | null;
  mariadbId: string;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: MariadbSaveExternalPortModeSwarm | null;
  mounts: Array<MariadbSaveExternalPortMount>;
  name: string;
  networkSwarm: Array<MariadbSaveExternalPortNetworkSwarm> | null;
  placementSwarm: MariadbSaveExternalPortPlacementSwarm | null;
  replicas: number;
  restartPolicySwarm: MariadbSaveExternalPortRestartPolicySwarm | null;
  rollbackConfigSwarm: MariadbSaveExternalPortRollbackConfigSwarm | null;
  server: MariadbSaveExternalPortServer | null;
  serverId: string | null;
  updateConfigSwarm: MariadbSaveExternalPortUpdateConfigSwarm | null;
};

export type MariadbSaveExternalPortResponse =
  | MariadbSaveExternalPortResponseBody
  | models.ErrorT;

/** @internal */
export const MariadbSaveExternalPortRequest$inboundSchema: z.ZodType<
  MariadbSaveExternalPortRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  externalPort: z.nullable(z.number()),
  mariadbId: z.string(),
});

/** @internal */
export type MariadbSaveExternalPortRequest$Outbound = {
  externalPort: number | null;
  mariadbId: string;
};

/** @internal */
export const MariadbSaveExternalPortRequest$outboundSchema: z.ZodType<
  MariadbSaveExternalPortRequest$Outbound,
  z.ZodTypeDef,
  MariadbSaveExternalPortRequest
> = z.object({
  externalPort: z.nullable(z.number()),
  mariadbId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortRequest$ {
  /** @deprecated use `MariadbSaveExternalPortRequest$inboundSchema` instead. */
  export const inboundSchema = MariadbSaveExternalPortRequest$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortRequest$outboundSchema` instead. */
  export const outboundSchema = MariadbSaveExternalPortRequest$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortRequest$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortRequest$Outbound;
}

export function mariadbSaveExternalPortRequestToJSON(
  mariadbSaveExternalPortRequest: MariadbSaveExternalPortRequest,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortRequest$outboundSchema.parse(
      mariadbSaveExternalPortRequest,
    ),
  );
}

export function mariadbSaveExternalPortRequestFromJSON(
  jsonString: string,
): SafeParseResult<MariadbSaveExternalPortRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbSaveExternalPortRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbSaveExternalPortRequest' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortApplicationStatus$inboundSchema:
  z.ZodNativeEnum<typeof MariadbSaveExternalPortApplicationStatus> = z
    .nativeEnum(MariadbSaveExternalPortApplicationStatus);

/** @internal */
export const MariadbSaveExternalPortApplicationStatus$outboundSchema:
  z.ZodNativeEnum<typeof MariadbSaveExternalPortApplicationStatus> =
    MariadbSaveExternalPortApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortApplicationStatus$ {
  /** @deprecated use `MariadbSaveExternalPortApplicationStatus$inboundSchema` instead. */
  export const inboundSchema =
    MariadbSaveExternalPortApplicationStatus$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortApplicationStatus$outboundSchema` instead. */
  export const outboundSchema =
    MariadbSaveExternalPortApplicationStatus$outboundSchema;
}

/** @internal */
export const MariadbSaveExternalPortBackupType$inboundSchema: z.ZodNativeEnum<
  typeof MariadbSaveExternalPortBackupType
> = z.nativeEnum(MariadbSaveExternalPortBackupType);

/** @internal */
export const MariadbSaveExternalPortBackupType$outboundSchema: z.ZodNativeEnum<
  typeof MariadbSaveExternalPortBackupType
> = MariadbSaveExternalPortBackupType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortBackupType$ {
  /** @deprecated use `MariadbSaveExternalPortBackupType$inboundSchema` instead. */
  export const inboundSchema = MariadbSaveExternalPortBackupType$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortBackupType$outboundSchema` instead. */
  export const outboundSchema =
    MariadbSaveExternalPortBackupType$outboundSchema;
}

/** @internal */
export const MariadbSaveExternalPortDatabaseType$inboundSchema: z.ZodNativeEnum<
  typeof MariadbSaveExternalPortDatabaseType
> = z.nativeEnum(MariadbSaveExternalPortDatabaseType);

/** @internal */
export const MariadbSaveExternalPortDatabaseType$outboundSchema:
  z.ZodNativeEnum<typeof MariadbSaveExternalPortDatabaseType> =
    MariadbSaveExternalPortDatabaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortDatabaseType$ {
  /** @deprecated use `MariadbSaveExternalPortDatabaseType$inboundSchema` instead. */
  export const inboundSchema =
    MariadbSaveExternalPortDatabaseType$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortDatabaseType$outboundSchema` instead. */
  export const outboundSchema =
    MariadbSaveExternalPortDatabaseType$outboundSchema;
}

/** @internal */
export const MariadbSaveExternalPortMetadataEnum$inboundSchema: z.ZodNativeEnum<
  typeof MariadbSaveExternalPortMetadataEnum
> = z.nativeEnum(MariadbSaveExternalPortMetadataEnum);

/** @internal */
export const MariadbSaveExternalPortMetadataEnum$outboundSchema:
  z.ZodNativeEnum<typeof MariadbSaveExternalPortMetadataEnum> =
    MariadbSaveExternalPortMetadataEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortMetadataEnum$ {
  /** @deprecated use `MariadbSaveExternalPortMetadataEnum$inboundSchema` instead. */
  export const inboundSchema =
    MariadbSaveExternalPortMetadataEnum$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortMetadataEnum$outboundSchema` instead. */
  export const outboundSchema =
    MariadbSaveExternalPortMetadataEnum$outboundSchema;
}

/** @internal */
export const MariadbSaveExternalPortMariadb$inboundSchema: z.ZodType<
  MariadbSaveExternalPortMariadb,
  z.ZodTypeDef,
  unknown
> = z.object({
  databasePassword: z.string(),
  databaseUser: z.string(),
});

/** @internal */
export type MariadbSaveExternalPortMariadb$Outbound = {
  databasePassword: string;
  databaseUser: string;
};

/** @internal */
export const MariadbSaveExternalPortMariadb$outboundSchema: z.ZodType<
  MariadbSaveExternalPortMariadb$Outbound,
  z.ZodTypeDef,
  MariadbSaveExternalPortMariadb
> = z.object({
  databasePassword: z.string(),
  databaseUser: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortMariadb$ {
  /** @deprecated use `MariadbSaveExternalPortMariadb$inboundSchema` instead. */
  export const inboundSchema = MariadbSaveExternalPortMariadb$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortMariadb$outboundSchema` instead. */
  export const outboundSchema = MariadbSaveExternalPortMariadb$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortMariadb$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortMariadb$Outbound;
}

export function mariadbSaveExternalPortMariadbToJSON(
  mariadbSaveExternalPortMariadb: MariadbSaveExternalPortMariadb,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortMariadb$outboundSchema.parse(
      mariadbSaveExternalPortMariadb,
    ),
  );
}

export function mariadbSaveExternalPortMariadbFromJSON(
  jsonString: string,
): SafeParseResult<MariadbSaveExternalPortMariadb, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbSaveExternalPortMariadb$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbSaveExternalPortMariadb' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortMongo$inboundSchema: z.ZodType<
  MariadbSaveExternalPortMongo,
  z.ZodTypeDef,
  unknown
> = z.object({
  databasePassword: z.string(),
  databaseUser: z.string(),
});

/** @internal */
export type MariadbSaveExternalPortMongo$Outbound = {
  databasePassword: string;
  databaseUser: string;
};

/** @internal */
export const MariadbSaveExternalPortMongo$outboundSchema: z.ZodType<
  MariadbSaveExternalPortMongo$Outbound,
  z.ZodTypeDef,
  MariadbSaveExternalPortMongo
> = z.object({
  databasePassword: z.string(),
  databaseUser: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortMongo$ {
  /** @deprecated use `MariadbSaveExternalPortMongo$inboundSchema` instead. */
  export const inboundSchema = MariadbSaveExternalPortMongo$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortMongo$outboundSchema` instead. */
  export const outboundSchema = MariadbSaveExternalPortMongo$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortMongo$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortMongo$Outbound;
}

export function mariadbSaveExternalPortMongoToJSON(
  mariadbSaveExternalPortMongo: MariadbSaveExternalPortMongo,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortMongo$outboundSchema.parse(
      mariadbSaveExternalPortMongo,
    ),
  );
}

export function mariadbSaveExternalPortMongoFromJSON(
  jsonString: string,
): SafeParseResult<MariadbSaveExternalPortMongo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbSaveExternalPortMongo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbSaveExternalPortMongo' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortMysql$inboundSchema: z.ZodType<
  MariadbSaveExternalPortMysql,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseRootPassword: z.string(),
});

/** @internal */
export type MariadbSaveExternalPortMysql$Outbound = {
  databaseRootPassword: string;
};

/** @internal */
export const MariadbSaveExternalPortMysql$outboundSchema: z.ZodType<
  MariadbSaveExternalPortMysql$Outbound,
  z.ZodTypeDef,
  MariadbSaveExternalPortMysql
> = z.object({
  databaseRootPassword: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortMysql$ {
  /** @deprecated use `MariadbSaveExternalPortMysql$inboundSchema` instead. */
  export const inboundSchema = MariadbSaveExternalPortMysql$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortMysql$outboundSchema` instead. */
  export const outboundSchema = MariadbSaveExternalPortMysql$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortMysql$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortMysql$Outbound;
}

export function mariadbSaveExternalPortMysqlToJSON(
  mariadbSaveExternalPortMysql: MariadbSaveExternalPortMysql,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortMysql$outboundSchema.parse(
      mariadbSaveExternalPortMysql,
    ),
  );
}

export function mariadbSaveExternalPortMysqlFromJSON(
  jsonString: string,
): SafeParseResult<MariadbSaveExternalPortMysql, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbSaveExternalPortMysql$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbSaveExternalPortMysql' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortPostgres$inboundSchema: z.ZodType<
  MariadbSaveExternalPortPostgres,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseUser: z.string(),
});

/** @internal */
export type MariadbSaveExternalPortPostgres$Outbound = {
  databaseUser: string;
};

/** @internal */
export const MariadbSaveExternalPortPostgres$outboundSchema: z.ZodType<
  MariadbSaveExternalPortPostgres$Outbound,
  z.ZodTypeDef,
  MariadbSaveExternalPortPostgres
> = z.object({
  databaseUser: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortPostgres$ {
  /** @deprecated use `MariadbSaveExternalPortPostgres$inboundSchema` instead. */
  export const inboundSchema = MariadbSaveExternalPortPostgres$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortPostgres$outboundSchema` instead. */
  export const outboundSchema = MariadbSaveExternalPortPostgres$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortPostgres$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortPostgres$Outbound;
}

export function mariadbSaveExternalPortPostgresToJSON(
  mariadbSaveExternalPortPostgres: MariadbSaveExternalPortPostgres,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortPostgres$outboundSchema.parse(
      mariadbSaveExternalPortPostgres,
    ),
  );
}

export function mariadbSaveExternalPortPostgresFromJSON(
  jsonString: string,
): SafeParseResult<MariadbSaveExternalPortPostgres, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbSaveExternalPortPostgres$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbSaveExternalPortPostgres' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortMetadata$inboundSchema: z.ZodType<
  MariadbSaveExternalPortMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  mariadb: z.lazy(() => MariadbSaveExternalPortMariadb$inboundSchema)
    .optional(),
  mongo: z.lazy(() => MariadbSaveExternalPortMongo$inboundSchema).optional(),
  mysql: z.lazy(() => MariadbSaveExternalPortMysql$inboundSchema).optional(),
  postgres: z.lazy(() => MariadbSaveExternalPortPostgres$inboundSchema)
    .optional(),
});

/** @internal */
export type MariadbSaveExternalPortMetadata$Outbound = {
  mariadb?: MariadbSaveExternalPortMariadb$Outbound | undefined;
  mongo?: MariadbSaveExternalPortMongo$Outbound | undefined;
  mysql?: MariadbSaveExternalPortMysql$Outbound | undefined;
  postgres?: MariadbSaveExternalPortPostgres$Outbound | undefined;
};

/** @internal */
export const MariadbSaveExternalPortMetadata$outboundSchema: z.ZodType<
  MariadbSaveExternalPortMetadata$Outbound,
  z.ZodTypeDef,
  MariadbSaveExternalPortMetadata
> = z.object({
  mariadb: z.lazy(() => MariadbSaveExternalPortMariadb$outboundSchema)
    .optional(),
  mongo: z.lazy(() => MariadbSaveExternalPortMongo$outboundSchema).optional(),
  mysql: z.lazy(() => MariadbSaveExternalPortMysql$outboundSchema).optional(),
  postgres: z.lazy(() => MariadbSaveExternalPortPostgres$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortMetadata$ {
  /** @deprecated use `MariadbSaveExternalPortMetadata$inboundSchema` instead. */
  export const inboundSchema = MariadbSaveExternalPortMetadata$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortMetadata$outboundSchema` instead. */
  export const outboundSchema = MariadbSaveExternalPortMetadata$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortMetadata$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortMetadata$Outbound;
}

export function mariadbSaveExternalPortMetadataToJSON(
  mariadbSaveExternalPortMetadata: MariadbSaveExternalPortMetadata,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortMetadata$outboundSchema.parse(
      mariadbSaveExternalPortMetadata,
    ),
  );
}

export function mariadbSaveExternalPortMetadataFromJSON(
  jsonString: string,
): SafeParseResult<MariadbSaveExternalPortMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbSaveExternalPortMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbSaveExternalPortMetadata' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortMetadataUnion$inboundSchema: z.ZodType<
  MariadbSaveExternalPortMetadataUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => MariadbSaveExternalPortMetadata$inboundSchema),
  MariadbSaveExternalPortMetadataEnum$inboundSchema,
]);

/** @internal */
export type MariadbSaveExternalPortMetadataUnion$Outbound =
  | MariadbSaveExternalPortMetadata$Outbound
  | string;

/** @internal */
export const MariadbSaveExternalPortMetadataUnion$outboundSchema: z.ZodType<
  MariadbSaveExternalPortMetadataUnion$Outbound,
  z.ZodTypeDef,
  MariadbSaveExternalPortMetadataUnion
> = z.union([
  z.lazy(() => MariadbSaveExternalPortMetadata$outboundSchema),
  MariadbSaveExternalPortMetadataEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortMetadataUnion$ {
  /** @deprecated use `MariadbSaveExternalPortMetadataUnion$inboundSchema` instead. */
  export const inboundSchema =
    MariadbSaveExternalPortMetadataUnion$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortMetadataUnion$outboundSchema` instead. */
  export const outboundSchema =
    MariadbSaveExternalPortMetadataUnion$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortMetadataUnion$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortMetadataUnion$Outbound;
}

export function mariadbSaveExternalPortMetadataUnionToJSON(
  mariadbSaveExternalPortMetadataUnion: MariadbSaveExternalPortMetadataUnion,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortMetadataUnion$outboundSchema.parse(
      mariadbSaveExternalPortMetadataUnion,
    ),
  );
}

export function mariadbSaveExternalPortMetadataUnionFromJSON(
  jsonString: string,
): SafeParseResult<MariadbSaveExternalPortMetadataUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MariadbSaveExternalPortMetadataUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbSaveExternalPortMetadataUnion' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortBackup$inboundSchema: z.ZodType<
  MariadbSaveExternalPortBackup,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  backupId: z.string(),
  backupType: MariadbSaveExternalPortBackupType$inboundSchema,
  composeId: z.nullable(z.string()),
  database: z.string(),
  databaseType: MariadbSaveExternalPortDatabaseType$inboundSchema,
  destinationId: z.string(),
  enabled: z.nullable(z.boolean()),
  keepLatestCount: z.nullable(z.number()),
  mariadbId: z.nullable(z.string()),
  metadata: z.nullable(
    z.union([
      z.lazy(() => MariadbSaveExternalPortMetadata$inboundSchema),
      MariadbSaveExternalPortMetadataEnum$inboundSchema,
    ]),
  ).optional(),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  prefix: z.string(),
  schedule: z.string(),
  serviceName: z.nullable(z.string()),
  userId: z.nullable(z.string()),
});

/** @internal */
export type MariadbSaveExternalPortBackup$Outbound = {
  appName: string;
  backupId: string;
  backupType: string;
  composeId: string | null;
  database: string;
  databaseType: string;
  destinationId: string;
  enabled: boolean | null;
  keepLatestCount: number | null;
  mariadbId: string | null;
  metadata?:
    | MariadbSaveExternalPortMetadata$Outbound
    | string
    | null
    | undefined;
  mongoId: string | null;
  mysqlId: string | null;
  postgresId: string | null;
  prefix: string;
  schedule: string;
  serviceName: string | null;
  userId: string | null;
};

/** @internal */
export const MariadbSaveExternalPortBackup$outboundSchema: z.ZodType<
  MariadbSaveExternalPortBackup$Outbound,
  z.ZodTypeDef,
  MariadbSaveExternalPortBackup
> = z.object({
  appName: z.string(),
  backupId: z.string(),
  backupType: MariadbSaveExternalPortBackupType$outboundSchema,
  composeId: z.nullable(z.string()),
  database: z.string(),
  databaseType: MariadbSaveExternalPortDatabaseType$outboundSchema,
  destinationId: z.string(),
  enabled: z.nullable(z.boolean()),
  keepLatestCount: z.nullable(z.number()),
  mariadbId: z.nullable(z.string()),
  metadata: z.nullable(
    z.union([
      z.lazy(() => MariadbSaveExternalPortMetadata$outboundSchema),
      MariadbSaveExternalPortMetadataEnum$outboundSchema,
    ]),
  ).optional(),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  prefix: z.string(),
  schedule: z.string(),
  serviceName: z.nullable(z.string()),
  userId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortBackup$ {
  /** @deprecated use `MariadbSaveExternalPortBackup$inboundSchema` instead. */
  export const inboundSchema = MariadbSaveExternalPortBackup$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortBackup$outboundSchema` instead. */
  export const outboundSchema = MariadbSaveExternalPortBackup$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortBackup$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortBackup$Outbound;
}

export function mariadbSaveExternalPortBackupToJSON(
  mariadbSaveExternalPortBackup: MariadbSaveExternalPortBackup,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortBackup$outboundSchema.parse(
      mariadbSaveExternalPortBackup,
    ),
  );
}

export function mariadbSaveExternalPortBackupFromJSON(
  jsonString: string,
): SafeParseResult<MariadbSaveExternalPortBackup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbSaveExternalPortBackup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbSaveExternalPortBackup' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortProject$inboundSchema: z.ZodType<
  MariadbSaveExternalPortProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/** @internal */
export type MariadbSaveExternalPortProject$Outbound = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

/** @internal */
export const MariadbSaveExternalPortProject$outboundSchema: z.ZodType<
  MariadbSaveExternalPortProject$Outbound,
  z.ZodTypeDef,
  MariadbSaveExternalPortProject
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortProject$ {
  /** @deprecated use `MariadbSaveExternalPortProject$inboundSchema` instead. */
  export const inboundSchema = MariadbSaveExternalPortProject$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortProject$outboundSchema` instead. */
  export const outboundSchema = MariadbSaveExternalPortProject$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortProject$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortProject$Outbound;
}

export function mariadbSaveExternalPortProjectToJSON(
  mariadbSaveExternalPortProject: MariadbSaveExternalPortProject,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortProject$outboundSchema.parse(
      mariadbSaveExternalPortProject,
    ),
  );
}

export function mariadbSaveExternalPortProjectFromJSON(
  jsonString: string,
): SafeParseResult<MariadbSaveExternalPortProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbSaveExternalPortProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbSaveExternalPortProject' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortEnvironment$inboundSchema: z.ZodType<
  MariadbSaveExternalPortEnvironment,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  name: z.string(),
  project: z.lazy(() => MariadbSaveExternalPortProject$inboundSchema),
  projectId: z.string(),
});

/** @internal */
export type MariadbSaveExternalPortEnvironment$Outbound = {
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  name: string;
  project: MariadbSaveExternalPortProject$Outbound;
  projectId: string;
};

/** @internal */
export const MariadbSaveExternalPortEnvironment$outboundSchema: z.ZodType<
  MariadbSaveExternalPortEnvironment$Outbound,
  z.ZodTypeDef,
  MariadbSaveExternalPortEnvironment
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  name: z.string(),
  project: z.lazy(() => MariadbSaveExternalPortProject$outboundSchema),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortEnvironment$ {
  /** @deprecated use `MariadbSaveExternalPortEnvironment$inboundSchema` instead. */
  export const inboundSchema = MariadbSaveExternalPortEnvironment$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortEnvironment$outboundSchema` instead. */
  export const outboundSchema =
    MariadbSaveExternalPortEnvironment$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortEnvironment$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortEnvironment$Outbound;
}

export function mariadbSaveExternalPortEnvironmentToJSON(
  mariadbSaveExternalPortEnvironment: MariadbSaveExternalPortEnvironment,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortEnvironment$outboundSchema.parse(
      mariadbSaveExternalPortEnvironment,
    ),
  );
}

export function mariadbSaveExternalPortEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<MariadbSaveExternalPortEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MariadbSaveExternalPortEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbSaveExternalPortEnvironment' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortHealthCheckSwarm$inboundSchema: z.ZodType<
  MariadbSaveExternalPortHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Interval: z.number().optional(),
  Retries: z.number().optional(),
  StartPeriod: z.number().optional(),
  Test: z.array(z.string()).optional(),
  Timeout: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Interval": "interval",
    "Retries": "retries",
    "StartPeriod": "startPeriod",
    "Test": "test",
    "Timeout": "timeout",
  });
});

/** @internal */
export type MariadbSaveExternalPortHealthCheckSwarm$Outbound = {
  Interval?: number | undefined;
  Retries?: number | undefined;
  StartPeriod?: number | undefined;
  Test?: Array<string> | undefined;
  Timeout?: number | undefined;
};

/** @internal */
export const MariadbSaveExternalPortHealthCheckSwarm$outboundSchema: z.ZodType<
  MariadbSaveExternalPortHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  MariadbSaveExternalPortHealthCheckSwarm
> = z.object({
  interval: z.number().optional(),
  retries: z.number().optional(),
  startPeriod: z.number().optional(),
  test: z.array(z.string()).optional(),
  timeout: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    interval: "Interval",
    retries: "Retries",
    startPeriod: "StartPeriod",
    test: "Test",
    timeout: "Timeout",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortHealthCheckSwarm$ {
  /** @deprecated use `MariadbSaveExternalPortHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema =
    MariadbSaveExternalPortHealthCheckSwarm$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema =
    MariadbSaveExternalPortHealthCheckSwarm$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortHealthCheckSwarm$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortHealthCheckSwarm$Outbound;
}

export function mariadbSaveExternalPortHealthCheckSwarmToJSON(
  mariadbSaveExternalPortHealthCheckSwarm:
    MariadbSaveExternalPortHealthCheckSwarm,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortHealthCheckSwarm$outboundSchema.parse(
      mariadbSaveExternalPortHealthCheckSwarm,
    ),
  );
}

export function mariadbSaveExternalPortHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<
  MariadbSaveExternalPortHealthCheckSwarm,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MariadbSaveExternalPortHealthCheckSwarm$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MariadbSaveExternalPortHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortGlobal$inboundSchema: z.ZodType<
  MariadbSaveExternalPortGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MariadbSaveExternalPortGlobal$Outbound = {};

/** @internal */
export const MariadbSaveExternalPortGlobal$outboundSchema: z.ZodType<
  MariadbSaveExternalPortGlobal$Outbound,
  z.ZodTypeDef,
  MariadbSaveExternalPortGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortGlobal$ {
  /** @deprecated use `MariadbSaveExternalPortGlobal$inboundSchema` instead. */
  export const inboundSchema = MariadbSaveExternalPortGlobal$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortGlobal$outboundSchema` instead. */
  export const outboundSchema = MariadbSaveExternalPortGlobal$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortGlobal$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortGlobal$Outbound;
}

export function mariadbSaveExternalPortGlobalToJSON(
  mariadbSaveExternalPortGlobal: MariadbSaveExternalPortGlobal,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortGlobal$outboundSchema.parse(
      mariadbSaveExternalPortGlobal,
    ),
  );
}

export function mariadbSaveExternalPortGlobalFromJSON(
  jsonString: string,
): SafeParseResult<MariadbSaveExternalPortGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbSaveExternalPortGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbSaveExternalPortGlobal' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortGlobalJob$inboundSchema: z.ZodType<
  MariadbSaveExternalPortGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MariadbSaveExternalPortGlobalJob$Outbound = {};

/** @internal */
export const MariadbSaveExternalPortGlobalJob$outboundSchema: z.ZodType<
  MariadbSaveExternalPortGlobalJob$Outbound,
  z.ZodTypeDef,
  MariadbSaveExternalPortGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortGlobalJob$ {
  /** @deprecated use `MariadbSaveExternalPortGlobalJob$inboundSchema` instead. */
  export const inboundSchema = MariadbSaveExternalPortGlobalJob$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortGlobalJob$outboundSchema` instead. */
  export const outboundSchema = MariadbSaveExternalPortGlobalJob$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortGlobalJob$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortGlobalJob$Outbound;
}

export function mariadbSaveExternalPortGlobalJobToJSON(
  mariadbSaveExternalPortGlobalJob: MariadbSaveExternalPortGlobalJob,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortGlobalJob$outboundSchema.parse(
      mariadbSaveExternalPortGlobalJob,
    ),
  );
}

export function mariadbSaveExternalPortGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<MariadbSaveExternalPortGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbSaveExternalPortGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbSaveExternalPortGlobalJob' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortReplicated$inboundSchema: z.ZodType<
  MariadbSaveExternalPortReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type MariadbSaveExternalPortReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const MariadbSaveExternalPortReplicated$outboundSchema: z.ZodType<
  MariadbSaveExternalPortReplicated$Outbound,
  z.ZodTypeDef,
  MariadbSaveExternalPortReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortReplicated$ {
  /** @deprecated use `MariadbSaveExternalPortReplicated$inboundSchema` instead. */
  export const inboundSchema = MariadbSaveExternalPortReplicated$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortReplicated$outboundSchema` instead. */
  export const outboundSchema =
    MariadbSaveExternalPortReplicated$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortReplicated$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortReplicated$Outbound;
}

export function mariadbSaveExternalPortReplicatedToJSON(
  mariadbSaveExternalPortReplicated: MariadbSaveExternalPortReplicated,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortReplicated$outboundSchema.parse(
      mariadbSaveExternalPortReplicated,
    ),
  );
}

export function mariadbSaveExternalPortReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<MariadbSaveExternalPortReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbSaveExternalPortReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbSaveExternalPortReplicated' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortReplicatedJob$inboundSchema: z.ZodType<
  MariadbSaveExternalPortReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type MariadbSaveExternalPortReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const MariadbSaveExternalPortReplicatedJob$outboundSchema: z.ZodType<
  MariadbSaveExternalPortReplicatedJob$Outbound,
  z.ZodTypeDef,
  MariadbSaveExternalPortReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortReplicatedJob$ {
  /** @deprecated use `MariadbSaveExternalPortReplicatedJob$inboundSchema` instead. */
  export const inboundSchema =
    MariadbSaveExternalPortReplicatedJob$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortReplicatedJob$outboundSchema` instead. */
  export const outboundSchema =
    MariadbSaveExternalPortReplicatedJob$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortReplicatedJob$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortReplicatedJob$Outbound;
}

export function mariadbSaveExternalPortReplicatedJobToJSON(
  mariadbSaveExternalPortReplicatedJob: MariadbSaveExternalPortReplicatedJob,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortReplicatedJob$outboundSchema.parse(
      mariadbSaveExternalPortReplicatedJob,
    ),
  );
}

export function mariadbSaveExternalPortReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<MariadbSaveExternalPortReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MariadbSaveExternalPortReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbSaveExternalPortReplicatedJob' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortModeSwarm$inboundSchema: z.ZodType<
  MariadbSaveExternalPortModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Global: z.lazy(() => MariadbSaveExternalPortGlobal$inboundSchema).optional(),
  GlobalJob: z.lazy(() => MariadbSaveExternalPortGlobalJob$inboundSchema)
    .optional(),
  Replicated: z.lazy(() => MariadbSaveExternalPortReplicated$inboundSchema)
    .optional(),
  ReplicatedJob: z.lazy(() =>
    MariadbSaveExternalPortReplicatedJob$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "Global": "global",
    "GlobalJob": "globalJob",
    "Replicated": "replicated",
    "ReplicatedJob": "replicatedJob",
  });
});

/** @internal */
export type MariadbSaveExternalPortModeSwarm$Outbound = {
  Global?: MariadbSaveExternalPortGlobal$Outbound | undefined;
  GlobalJob?: MariadbSaveExternalPortGlobalJob$Outbound | undefined;
  Replicated?: MariadbSaveExternalPortReplicated$Outbound | undefined;
  ReplicatedJob?: MariadbSaveExternalPortReplicatedJob$Outbound | undefined;
};

/** @internal */
export const MariadbSaveExternalPortModeSwarm$outboundSchema: z.ZodType<
  MariadbSaveExternalPortModeSwarm$Outbound,
  z.ZodTypeDef,
  MariadbSaveExternalPortModeSwarm
> = z.object({
  global: z.lazy(() => MariadbSaveExternalPortGlobal$outboundSchema).optional(),
  globalJob: z.lazy(() => MariadbSaveExternalPortGlobalJob$outboundSchema)
    .optional(),
  replicated: z.lazy(() => MariadbSaveExternalPortReplicated$outboundSchema)
    .optional(),
  replicatedJob: z.lazy(() =>
    MariadbSaveExternalPortReplicatedJob$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    global: "Global",
    globalJob: "GlobalJob",
    replicated: "Replicated",
    replicatedJob: "ReplicatedJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortModeSwarm$ {
  /** @deprecated use `MariadbSaveExternalPortModeSwarm$inboundSchema` instead. */
  export const inboundSchema = MariadbSaveExternalPortModeSwarm$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortModeSwarm$outboundSchema` instead. */
  export const outboundSchema = MariadbSaveExternalPortModeSwarm$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortModeSwarm$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortModeSwarm$Outbound;
}

export function mariadbSaveExternalPortModeSwarmToJSON(
  mariadbSaveExternalPortModeSwarm: MariadbSaveExternalPortModeSwarm,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortModeSwarm$outboundSchema.parse(
      mariadbSaveExternalPortModeSwarm,
    ),
  );
}

export function mariadbSaveExternalPortModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbSaveExternalPortModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbSaveExternalPortModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbSaveExternalPortModeSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortServiceType$inboundSchema: z.ZodNativeEnum<
  typeof MariadbSaveExternalPortServiceType
> = z.nativeEnum(MariadbSaveExternalPortServiceType);

/** @internal */
export const MariadbSaveExternalPortServiceType$outboundSchema: z.ZodNativeEnum<
  typeof MariadbSaveExternalPortServiceType
> = MariadbSaveExternalPortServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortServiceType$ {
  /** @deprecated use `MariadbSaveExternalPortServiceType$inboundSchema` instead. */
  export const inboundSchema = MariadbSaveExternalPortServiceType$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortServiceType$outboundSchema` instead. */
  export const outboundSchema =
    MariadbSaveExternalPortServiceType$outboundSchema;
}

/** @internal */
export const MariadbSaveExternalPortType$inboundSchema: z.ZodNativeEnum<
  typeof MariadbSaveExternalPortType
> = z.nativeEnum(MariadbSaveExternalPortType);

/** @internal */
export const MariadbSaveExternalPortType$outboundSchema: z.ZodNativeEnum<
  typeof MariadbSaveExternalPortType
> = MariadbSaveExternalPortType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortType$ {
  /** @deprecated use `MariadbSaveExternalPortType$inboundSchema` instead. */
  export const inboundSchema = MariadbSaveExternalPortType$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortType$outboundSchema` instead. */
  export const outboundSchema = MariadbSaveExternalPortType$outboundSchema;
}

/** @internal */
export const MariadbSaveExternalPortMount$inboundSchema: z.ZodType<
  MariadbSaveExternalPortMount,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  content: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  hostPath: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mountId: z.string(),
  mountPath: z.string(),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  serviceType: MariadbSaveExternalPortServiceType$inboundSchema,
  type: MariadbSaveExternalPortType$inboundSchema,
  volumeName: z.nullable(z.string()),
});

/** @internal */
export type MariadbSaveExternalPortMount$Outbound = {
  applicationId: string | null;
  composeId: string | null;
  content: string | null;
  filePath: string | null;
  hostPath: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mountId: string;
  mountPath: string;
  mysqlId: string | null;
  postgresId: string | null;
  redisId: string | null;
  serviceType: string;
  type: string;
  volumeName: string | null;
};

/** @internal */
export const MariadbSaveExternalPortMount$outboundSchema: z.ZodType<
  MariadbSaveExternalPortMount$Outbound,
  z.ZodTypeDef,
  MariadbSaveExternalPortMount
> = z.object({
  applicationId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  content: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  hostPath: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mountId: z.string(),
  mountPath: z.string(),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  serviceType: MariadbSaveExternalPortServiceType$outboundSchema,
  type: MariadbSaveExternalPortType$outboundSchema,
  volumeName: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortMount$ {
  /** @deprecated use `MariadbSaveExternalPortMount$inboundSchema` instead. */
  export const inboundSchema = MariadbSaveExternalPortMount$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortMount$outboundSchema` instead. */
  export const outboundSchema = MariadbSaveExternalPortMount$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortMount$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortMount$Outbound;
}

export function mariadbSaveExternalPortMountToJSON(
  mariadbSaveExternalPortMount: MariadbSaveExternalPortMount,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortMount$outboundSchema.parse(
      mariadbSaveExternalPortMount,
    ),
  );
}

export function mariadbSaveExternalPortMountFromJSON(
  jsonString: string,
): SafeParseResult<MariadbSaveExternalPortMount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbSaveExternalPortMount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbSaveExternalPortMount' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortDriverOpts$inboundSchema: z.ZodType<
  MariadbSaveExternalPortDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MariadbSaveExternalPortDriverOpts$Outbound = {};

/** @internal */
export const MariadbSaveExternalPortDriverOpts$outboundSchema: z.ZodType<
  MariadbSaveExternalPortDriverOpts$Outbound,
  z.ZodTypeDef,
  MariadbSaveExternalPortDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortDriverOpts$ {
  /** @deprecated use `MariadbSaveExternalPortDriverOpts$inboundSchema` instead. */
  export const inboundSchema = MariadbSaveExternalPortDriverOpts$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortDriverOpts$outboundSchema` instead. */
  export const outboundSchema =
    MariadbSaveExternalPortDriverOpts$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortDriverOpts$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortDriverOpts$Outbound;
}

export function mariadbSaveExternalPortDriverOptsToJSON(
  mariadbSaveExternalPortDriverOpts: MariadbSaveExternalPortDriverOpts,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortDriverOpts$outboundSchema.parse(
      mariadbSaveExternalPortDriverOpts,
    ),
  );
}

export function mariadbSaveExternalPortDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<MariadbSaveExternalPortDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbSaveExternalPortDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbSaveExternalPortDriverOpts' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortNetworkSwarm$inboundSchema: z.ZodType<
  MariadbSaveExternalPortNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => MariadbSaveExternalPortDriverOpts$inboundSchema)
    .optional(),
  Target: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
    "Target": "target",
  });
});

/** @internal */
export type MariadbSaveExternalPortNetworkSwarm$Outbound = {
  Aliases?: Array<string> | undefined;
  DriverOpts?: MariadbSaveExternalPortDriverOpts$Outbound | undefined;
  Target?: string | undefined;
};

/** @internal */
export const MariadbSaveExternalPortNetworkSwarm$outboundSchema: z.ZodType<
  MariadbSaveExternalPortNetworkSwarm$Outbound,
  z.ZodTypeDef,
  MariadbSaveExternalPortNetworkSwarm
> = z.object({
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => MariadbSaveExternalPortDriverOpts$outboundSchema)
    .optional(),
  target: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    aliases: "Aliases",
    driverOpts: "DriverOpts",
    target: "Target",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortNetworkSwarm$ {
  /** @deprecated use `MariadbSaveExternalPortNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema =
    MariadbSaveExternalPortNetworkSwarm$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema =
    MariadbSaveExternalPortNetworkSwarm$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortNetworkSwarm$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortNetworkSwarm$Outbound;
}

export function mariadbSaveExternalPortNetworkSwarmToJSON(
  mariadbSaveExternalPortNetworkSwarm: MariadbSaveExternalPortNetworkSwarm,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortNetworkSwarm$outboundSchema.parse(
      mariadbSaveExternalPortNetworkSwarm,
    ),
  );
}

export function mariadbSaveExternalPortNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbSaveExternalPortNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MariadbSaveExternalPortNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbSaveExternalPortNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortPlatform$inboundSchema: z.ZodType<
  MariadbSaveExternalPortPlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type MariadbSaveExternalPortPlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const MariadbSaveExternalPortPlatform$outboundSchema: z.ZodType<
  MariadbSaveExternalPortPlatform$Outbound,
  z.ZodTypeDef,
  MariadbSaveExternalPortPlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortPlatform$ {
  /** @deprecated use `MariadbSaveExternalPortPlatform$inboundSchema` instead. */
  export const inboundSchema = MariadbSaveExternalPortPlatform$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortPlatform$outboundSchema` instead. */
  export const outboundSchema = MariadbSaveExternalPortPlatform$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortPlatform$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortPlatform$Outbound;
}

export function mariadbSaveExternalPortPlatformToJSON(
  mariadbSaveExternalPortPlatform: MariadbSaveExternalPortPlatform,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortPlatform$outboundSchema.parse(
      mariadbSaveExternalPortPlatform,
    ),
  );
}

export function mariadbSaveExternalPortPlatformFromJSON(
  jsonString: string,
): SafeParseResult<MariadbSaveExternalPortPlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbSaveExternalPortPlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbSaveExternalPortPlatform' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortSpread$inboundSchema: z.ZodType<
  MariadbSaveExternalPortSpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type MariadbSaveExternalPortSpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const MariadbSaveExternalPortSpread$outboundSchema: z.ZodType<
  MariadbSaveExternalPortSpread$Outbound,
  z.ZodTypeDef,
  MariadbSaveExternalPortSpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortSpread$ {
  /** @deprecated use `MariadbSaveExternalPortSpread$inboundSchema` instead. */
  export const inboundSchema = MariadbSaveExternalPortSpread$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortSpread$outboundSchema` instead. */
  export const outboundSchema = MariadbSaveExternalPortSpread$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortSpread$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortSpread$Outbound;
}

export function mariadbSaveExternalPortSpreadToJSON(
  mariadbSaveExternalPortSpread: MariadbSaveExternalPortSpread,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortSpread$outboundSchema.parse(
      mariadbSaveExternalPortSpread,
    ),
  );
}

export function mariadbSaveExternalPortSpreadFromJSON(
  jsonString: string,
): SafeParseResult<MariadbSaveExternalPortSpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbSaveExternalPortSpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbSaveExternalPortSpread' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortPreference$inboundSchema: z.ZodType<
  MariadbSaveExternalPortPreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => MariadbSaveExternalPortSpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type MariadbSaveExternalPortPreference$Outbound = {
  Spread: MariadbSaveExternalPortSpread$Outbound;
};

/** @internal */
export const MariadbSaveExternalPortPreference$outboundSchema: z.ZodType<
  MariadbSaveExternalPortPreference$Outbound,
  z.ZodTypeDef,
  MariadbSaveExternalPortPreference
> = z.object({
  spread: z.lazy(() => MariadbSaveExternalPortSpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortPreference$ {
  /** @deprecated use `MariadbSaveExternalPortPreference$inboundSchema` instead. */
  export const inboundSchema = MariadbSaveExternalPortPreference$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortPreference$outboundSchema` instead. */
  export const outboundSchema =
    MariadbSaveExternalPortPreference$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortPreference$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortPreference$Outbound;
}

export function mariadbSaveExternalPortPreferenceToJSON(
  mariadbSaveExternalPortPreference: MariadbSaveExternalPortPreference,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortPreference$outboundSchema.parse(
      mariadbSaveExternalPortPreference,
    ),
  );
}

export function mariadbSaveExternalPortPreferenceFromJSON(
  jsonString: string,
): SafeParseResult<MariadbSaveExternalPortPreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbSaveExternalPortPreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbSaveExternalPortPreference' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortPlacementSwarm$inboundSchema: z.ZodType<
  MariadbSaveExternalPortPlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(
    z.lazy(() => MariadbSaveExternalPortPlatform$inboundSchema),
  ).optional(),
  Preferences: z.array(
    z.lazy(() => MariadbSaveExternalPortPreference$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
    "Preferences": "preferences",
  });
});

/** @internal */
export type MariadbSaveExternalPortPlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<MariadbSaveExternalPortPlatform$Outbound> | undefined;
  Preferences?: Array<MariadbSaveExternalPortPreference$Outbound> | undefined;
};

/** @internal */
export const MariadbSaveExternalPortPlacementSwarm$outboundSchema: z.ZodType<
  MariadbSaveExternalPortPlacementSwarm$Outbound,
  z.ZodTypeDef,
  MariadbSaveExternalPortPlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(
    z.lazy(() => MariadbSaveExternalPortPlatform$outboundSchema),
  ).optional(),
  preferences: z.array(
    z.lazy(() => MariadbSaveExternalPortPreference$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
    preferences: "Preferences",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortPlacementSwarm$ {
  /** @deprecated use `MariadbSaveExternalPortPlacementSwarm$inboundSchema` instead. */
  export const inboundSchema =
    MariadbSaveExternalPortPlacementSwarm$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortPlacementSwarm$outboundSchema` instead. */
  export const outboundSchema =
    MariadbSaveExternalPortPlacementSwarm$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortPlacementSwarm$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortPlacementSwarm$Outbound;
}

export function mariadbSaveExternalPortPlacementSwarmToJSON(
  mariadbSaveExternalPortPlacementSwarm: MariadbSaveExternalPortPlacementSwarm,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortPlacementSwarm$outboundSchema.parse(
      mariadbSaveExternalPortPlacementSwarm,
    ),
  );
}

export function mariadbSaveExternalPortPlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbSaveExternalPortPlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MariadbSaveExternalPortPlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbSaveExternalPortPlacementSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortRestartPolicySwarm$inboundSchema: z.ZodType<
  MariadbSaveExternalPortRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type MariadbSaveExternalPortRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const MariadbSaveExternalPortRestartPolicySwarm$outboundSchema:
  z.ZodType<
    MariadbSaveExternalPortRestartPolicySwarm$Outbound,
    z.ZodTypeDef,
    MariadbSaveExternalPortRestartPolicySwarm
  > = z.object({
    condition: z.string().optional(),
    delay: z.number().optional(),
    maxAttempts: z.number().optional(),
    window: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      condition: "Condition",
      delay: "Delay",
      maxAttempts: "MaxAttempts",
      window: "Window",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortRestartPolicySwarm$ {
  /** @deprecated use `MariadbSaveExternalPortRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema =
    MariadbSaveExternalPortRestartPolicySwarm$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema =
    MariadbSaveExternalPortRestartPolicySwarm$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortRestartPolicySwarm$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortRestartPolicySwarm$Outbound;
}

export function mariadbSaveExternalPortRestartPolicySwarmToJSON(
  mariadbSaveExternalPortRestartPolicySwarm:
    MariadbSaveExternalPortRestartPolicySwarm,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortRestartPolicySwarm$outboundSchema.parse(
      mariadbSaveExternalPortRestartPolicySwarm,
    ),
  );
}

export function mariadbSaveExternalPortRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<
  MariadbSaveExternalPortRestartPolicySwarm,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MariadbSaveExternalPortRestartPolicySwarm$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MariadbSaveExternalPortRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortRollbackConfigSwarm$inboundSchema:
  z.ZodType<MariadbSaveExternalPortRollbackConfigSwarm, z.ZodTypeDef, unknown> =
    z.object({
      Delay: z.number().optional(),
      FailureAction: z.string().optional(),
      MaxFailureRatio: z.number().optional(),
      Monitor: z.number().optional(),
      Order: z.string(),
      Parallelism: z.number(),
    }).transform((v) => {
      return remap$(v, {
        "Delay": "delay",
        "FailureAction": "failureAction",
        "MaxFailureRatio": "maxFailureRatio",
        "Monitor": "monitor",
        "Order": "order",
        "Parallelism": "parallelism",
      });
    });

/** @internal */
export type MariadbSaveExternalPortRollbackConfigSwarm$Outbound = {
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  MaxFailureRatio?: number | undefined;
  Monitor?: number | undefined;
  Order: string;
  Parallelism: number;
};

/** @internal */
export const MariadbSaveExternalPortRollbackConfigSwarm$outboundSchema:
  z.ZodType<
    MariadbSaveExternalPortRollbackConfigSwarm$Outbound,
    z.ZodTypeDef,
    MariadbSaveExternalPortRollbackConfigSwarm
  > = z.object({
    delay: z.number().optional(),
    failureAction: z.string().optional(),
    maxFailureRatio: z.number().optional(),
    monitor: z.number().optional(),
    order: z.string(),
    parallelism: z.number(),
  }).transform((v) => {
    return remap$(v, {
      delay: "Delay",
      failureAction: "FailureAction",
      maxFailureRatio: "MaxFailureRatio",
      monitor: "Monitor",
      order: "Order",
      parallelism: "Parallelism",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortRollbackConfigSwarm$ {
  /** @deprecated use `MariadbSaveExternalPortRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema =
    MariadbSaveExternalPortRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema =
    MariadbSaveExternalPortRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortRollbackConfigSwarm$Outbound;
}

export function mariadbSaveExternalPortRollbackConfigSwarmToJSON(
  mariadbSaveExternalPortRollbackConfigSwarm:
    MariadbSaveExternalPortRollbackConfigSwarm,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortRollbackConfigSwarm$outboundSchema.parse(
      mariadbSaveExternalPortRollbackConfigSwarm,
    ),
  );
}

export function mariadbSaveExternalPortRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<
  MariadbSaveExternalPortRollbackConfigSwarm,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MariadbSaveExternalPortRollbackConfigSwarm$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MariadbSaveExternalPortRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortMetricsConfigEnum$inboundSchema:
  z.ZodNativeEnum<typeof MariadbSaveExternalPortMetricsConfigEnum> = z
    .nativeEnum(MariadbSaveExternalPortMetricsConfigEnum);

/** @internal */
export const MariadbSaveExternalPortMetricsConfigEnum$outboundSchema:
  z.ZodNativeEnum<typeof MariadbSaveExternalPortMetricsConfigEnum> =
    MariadbSaveExternalPortMetricsConfigEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortMetricsConfigEnum$ {
  /** @deprecated use `MariadbSaveExternalPortMetricsConfigEnum$inboundSchema` instead. */
  export const inboundSchema =
    MariadbSaveExternalPortMetricsConfigEnum$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortMetricsConfigEnum$outboundSchema` instead. */
  export const outboundSchema =
    MariadbSaveExternalPortMetricsConfigEnum$outboundSchema;
}

/** @internal */
export const MariadbSaveExternalPortMetricsConfigUnion1$inboundSchema:
  z.ZodType<MariadbSaveExternalPortMetricsConfigUnion1, z.ZodTypeDef, unknown> =
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      MariadbSaveExternalPortMetricsConfigEnum$inboundSchema,
    ]);

/** @internal */
export type MariadbSaveExternalPortMetricsConfigUnion1$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const MariadbSaveExternalPortMetricsConfigUnion1$outboundSchema:
  z.ZodType<
    MariadbSaveExternalPortMetricsConfigUnion1$Outbound,
    z.ZodTypeDef,
    MariadbSaveExternalPortMetricsConfigUnion1
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    MariadbSaveExternalPortMetricsConfigEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortMetricsConfigUnion1$ {
  /** @deprecated use `MariadbSaveExternalPortMetricsConfigUnion1$inboundSchema` instead. */
  export const inboundSchema =
    MariadbSaveExternalPortMetricsConfigUnion1$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortMetricsConfigUnion1$outboundSchema` instead. */
  export const outboundSchema =
    MariadbSaveExternalPortMetricsConfigUnion1$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortMetricsConfigUnion1$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortMetricsConfigUnion1$Outbound;
}

export function mariadbSaveExternalPortMetricsConfigUnion1ToJSON(
  mariadbSaveExternalPortMetricsConfigUnion1:
    MariadbSaveExternalPortMetricsConfigUnion1,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortMetricsConfigUnion1$outboundSchema.parse(
      mariadbSaveExternalPortMetricsConfigUnion1,
    ),
  );
}

export function mariadbSaveExternalPortMetricsConfigUnion1FromJSON(
  jsonString: string,
): SafeParseResult<
  MariadbSaveExternalPortMetricsConfigUnion1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MariadbSaveExternalPortMetricsConfigUnion1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MariadbSaveExternalPortMetricsConfigUnion1' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortMetricsConfigUnion2$inboundSchema:
  z.ZodType<MariadbSaveExternalPortMetricsConfigUnion2, z.ZodTypeDef, unknown> =
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        MariadbSaveExternalPortMetricsConfigEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]);

/** @internal */
export type MariadbSaveExternalPortMetricsConfigUnion2$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const MariadbSaveExternalPortMetricsConfigUnion2$outboundSchema:
  z.ZodType<
    MariadbSaveExternalPortMetricsConfigUnion2$Outbound,
    z.ZodTypeDef,
    MariadbSaveExternalPortMetricsConfigUnion2
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      MariadbSaveExternalPortMetricsConfigEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortMetricsConfigUnion2$ {
  /** @deprecated use `MariadbSaveExternalPortMetricsConfigUnion2$inboundSchema` instead. */
  export const inboundSchema =
    MariadbSaveExternalPortMetricsConfigUnion2$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortMetricsConfigUnion2$outboundSchema` instead. */
  export const outboundSchema =
    MariadbSaveExternalPortMetricsConfigUnion2$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortMetricsConfigUnion2$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortMetricsConfigUnion2$Outbound;
}

export function mariadbSaveExternalPortMetricsConfigUnion2ToJSON(
  mariadbSaveExternalPortMetricsConfigUnion2:
    MariadbSaveExternalPortMetricsConfigUnion2,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortMetricsConfigUnion2$outboundSchema.parse(
      mariadbSaveExternalPortMetricsConfigUnion2,
    ),
  );
}

export function mariadbSaveExternalPortMetricsConfigUnion2FromJSON(
  jsonString: string,
): SafeParseResult<
  MariadbSaveExternalPortMetricsConfigUnion2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MariadbSaveExternalPortMetricsConfigUnion2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MariadbSaveExternalPortMetricsConfigUnion2' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortServerStatus$inboundSchema: z.ZodNativeEnum<
  typeof MariadbSaveExternalPortServerStatus
> = z.nativeEnum(MariadbSaveExternalPortServerStatus);

/** @internal */
export const MariadbSaveExternalPortServerStatus$outboundSchema:
  z.ZodNativeEnum<typeof MariadbSaveExternalPortServerStatus> =
    MariadbSaveExternalPortServerStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortServerStatus$ {
  /** @deprecated use `MariadbSaveExternalPortServerStatus$inboundSchema` instead. */
  export const inboundSchema =
    MariadbSaveExternalPortServerStatus$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortServerStatus$outboundSchema` instead. */
  export const outboundSchema =
    MariadbSaveExternalPortServerStatus$outboundSchema;
}

/** @internal */
export const MariadbSaveExternalPortServer$inboundSchema: z.ZodType<
  MariadbSaveExternalPortServer,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  command: z.string(),
  createdAt: z.string(),
  description: z.nullable(z.string()),
  enableDockerCleanup: z.boolean(),
  ipAddress: z.string(),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      MariadbSaveExternalPortMetricsConfigEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
  name: z.string(),
  organizationId: z.string(),
  port: z.number(),
  serverId: z.string(),
  serverStatus: MariadbSaveExternalPortServerStatus$inboundSchema,
  sshKeyId: z.nullable(z.string()),
  username: z.string(),
});

/** @internal */
export type MariadbSaveExternalPortServer$Outbound = {
  appName: string;
  command: string;
  createdAt: string;
  description: string | null;
  enableDockerCleanup: boolean;
  ipAddress: string;
  metricsConfig: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  };
  name: string;
  organizationId: string;
  port: number;
  serverId: string;
  serverStatus: string;
  sshKeyId: string | null;
  username: string;
};

/** @internal */
export const MariadbSaveExternalPortServer$outboundSchema: z.ZodType<
  MariadbSaveExternalPortServer$Outbound,
  z.ZodTypeDef,
  MariadbSaveExternalPortServer
> = z.object({
  appName: z.string(),
  command: z.string(),
  createdAt: z.string(),
  description: z.nullable(z.string()),
  enableDockerCleanup: z.boolean(),
  ipAddress: z.string(),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      MariadbSaveExternalPortMetricsConfigEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
  name: z.string(),
  organizationId: z.string(),
  port: z.number(),
  serverId: z.string(),
  serverStatus: MariadbSaveExternalPortServerStatus$outboundSchema,
  sshKeyId: z.nullable(z.string()),
  username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortServer$ {
  /** @deprecated use `MariadbSaveExternalPortServer$inboundSchema` instead. */
  export const inboundSchema = MariadbSaveExternalPortServer$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortServer$outboundSchema` instead. */
  export const outboundSchema = MariadbSaveExternalPortServer$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortServer$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortServer$Outbound;
}

export function mariadbSaveExternalPortServerToJSON(
  mariadbSaveExternalPortServer: MariadbSaveExternalPortServer,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortServer$outboundSchema.parse(
      mariadbSaveExternalPortServer,
    ),
  );
}

export function mariadbSaveExternalPortServerFromJSON(
  jsonString: string,
): SafeParseResult<MariadbSaveExternalPortServer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbSaveExternalPortServer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbSaveExternalPortServer' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortUpdateConfigSwarm$inboundSchema: z.ZodType<
  MariadbSaveExternalPortUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  MaxFailureRatio: z.number().optional(),
  Monitor: z.number().optional(),
  Order: z.string(),
  Parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    "Delay": "delay",
    "FailureAction": "failureAction",
    "MaxFailureRatio": "maxFailureRatio",
    "Monitor": "monitor",
    "Order": "order",
    "Parallelism": "parallelism",
  });
});

/** @internal */
export type MariadbSaveExternalPortUpdateConfigSwarm$Outbound = {
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  MaxFailureRatio?: number | undefined;
  Monitor?: number | undefined;
  Order: string;
  Parallelism: number;
};

/** @internal */
export const MariadbSaveExternalPortUpdateConfigSwarm$outboundSchema: z.ZodType<
  MariadbSaveExternalPortUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  MariadbSaveExternalPortUpdateConfigSwarm
> = z.object({
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  maxFailureRatio: z.number().optional(),
  monitor: z.number().optional(),
  order: z.string(),
  parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    delay: "Delay",
    failureAction: "FailureAction",
    maxFailureRatio: "MaxFailureRatio",
    monitor: "Monitor",
    order: "Order",
    parallelism: "Parallelism",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortUpdateConfigSwarm$ {
  /** @deprecated use `MariadbSaveExternalPortUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema =
    MariadbSaveExternalPortUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema =
    MariadbSaveExternalPortUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortUpdateConfigSwarm$Outbound;
}

export function mariadbSaveExternalPortUpdateConfigSwarmToJSON(
  mariadbSaveExternalPortUpdateConfigSwarm:
    MariadbSaveExternalPortUpdateConfigSwarm,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortUpdateConfigSwarm$outboundSchema.parse(
      mariadbSaveExternalPortUpdateConfigSwarm,
    ),
  );
}

export function mariadbSaveExternalPortUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<
  MariadbSaveExternalPortUpdateConfigSwarm,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MariadbSaveExternalPortUpdateConfigSwarm$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MariadbSaveExternalPortUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortResponseBody$inboundSchema: z.ZodType<
  MariadbSaveExternalPortResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  applicationStatus: MariadbSaveExternalPortApplicationStatus$inboundSchema,
  backups: z.array(z.lazy(() => MariadbSaveExternalPortBackup$inboundSchema)),
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databaseName: z.string(),
  databasePassword: z.string(),
  databaseRootPassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environment: z.lazy(() => MariadbSaveExternalPortEnvironment$inboundSchema),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.lazy(() => MariadbSaveExternalPortHealthCheckSwarm$inboundSchema),
  ),
  labelsSwarm: z.nullable(z.record(z.string())),
  mariadbId: z.string(),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.lazy(() => MariadbSaveExternalPortModeSwarm$inboundSchema),
  ),
  mounts: z.array(z.lazy(() => MariadbSaveExternalPortMount$inboundSchema)),
  name: z.string(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MariadbSaveExternalPortNetworkSwarm$inboundSchema)),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => MariadbSaveExternalPortPlacementSwarm$inboundSchema),
  ),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MariadbSaveExternalPortRestartPolicySwarm$inboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MariadbSaveExternalPortRollbackConfigSwarm$inboundSchema),
  ),
  server: z.nullable(z.lazy(() => MariadbSaveExternalPortServer$inboundSchema)),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MariadbSaveExternalPortUpdateConfigSwarm$inboundSchema),
  ),
});

/** @internal */
export type MariadbSaveExternalPortResponseBody$Outbound = {
  appName: string;
  applicationStatus: string;
  backups: Array<MariadbSaveExternalPortBackup$Outbound>;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databaseName: string;
  databasePassword: string;
  databaseRootPassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environment: MariadbSaveExternalPortEnvironment$Outbound;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: MariadbSaveExternalPortHealthCheckSwarm$Outbound | null;
  labelsSwarm: { [k: string]: string } | null;
  mariadbId: string;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: MariadbSaveExternalPortModeSwarm$Outbound | null;
  mounts: Array<MariadbSaveExternalPortMount$Outbound>;
  name: string;
  networkSwarm: Array<MariadbSaveExternalPortNetworkSwarm$Outbound> | null;
  placementSwarm: MariadbSaveExternalPortPlacementSwarm$Outbound | null;
  replicas: number;
  restartPolicySwarm: MariadbSaveExternalPortRestartPolicySwarm$Outbound | null;
  rollbackConfigSwarm:
    | MariadbSaveExternalPortRollbackConfigSwarm$Outbound
    | null;
  server: MariadbSaveExternalPortServer$Outbound | null;
  serverId: string | null;
  updateConfigSwarm: MariadbSaveExternalPortUpdateConfigSwarm$Outbound | null;
};

/** @internal */
export const MariadbSaveExternalPortResponseBody$outboundSchema: z.ZodType<
  MariadbSaveExternalPortResponseBody$Outbound,
  z.ZodTypeDef,
  MariadbSaveExternalPortResponseBody
> = z.object({
  appName: z.string(),
  applicationStatus: MariadbSaveExternalPortApplicationStatus$outboundSchema,
  backups: z.array(z.lazy(() => MariadbSaveExternalPortBackup$outboundSchema)),
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databaseName: z.string(),
  databasePassword: z.string(),
  databaseRootPassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environment: z.lazy(() => MariadbSaveExternalPortEnvironment$outboundSchema),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.lazy(() => MariadbSaveExternalPortHealthCheckSwarm$outboundSchema),
  ),
  labelsSwarm: z.nullable(z.record(z.string())),
  mariadbId: z.string(),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.lazy(() => MariadbSaveExternalPortModeSwarm$outboundSchema),
  ),
  mounts: z.array(z.lazy(() => MariadbSaveExternalPortMount$outboundSchema)),
  name: z.string(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MariadbSaveExternalPortNetworkSwarm$outboundSchema)),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => MariadbSaveExternalPortPlacementSwarm$outboundSchema),
  ),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MariadbSaveExternalPortRestartPolicySwarm$outboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MariadbSaveExternalPortRollbackConfigSwarm$outboundSchema),
  ),
  server: z.nullable(
    z.lazy(() => MariadbSaveExternalPortServer$outboundSchema),
  ),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MariadbSaveExternalPortUpdateConfigSwarm$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortResponseBody$ {
  /** @deprecated use `MariadbSaveExternalPortResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    MariadbSaveExternalPortResponseBody$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    MariadbSaveExternalPortResponseBody$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortResponseBody$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortResponseBody$Outbound;
}

export function mariadbSaveExternalPortResponseBodyToJSON(
  mariadbSaveExternalPortResponseBody: MariadbSaveExternalPortResponseBody,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortResponseBody$outboundSchema.parse(
      mariadbSaveExternalPortResponseBody,
    ),
  );
}

export function mariadbSaveExternalPortResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<MariadbSaveExternalPortResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MariadbSaveExternalPortResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbSaveExternalPortResponseBody' from JSON`,
  );
}

/** @internal */
export const MariadbSaveExternalPortResponse$inboundSchema: z.ZodType<
  MariadbSaveExternalPortResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => MariadbSaveExternalPortResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type MariadbSaveExternalPortResponse$Outbound =
  | MariadbSaveExternalPortResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const MariadbSaveExternalPortResponse$outboundSchema: z.ZodType<
  MariadbSaveExternalPortResponse$Outbound,
  z.ZodTypeDef,
  MariadbSaveExternalPortResponse
> = z.union([
  z.lazy(() => MariadbSaveExternalPortResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbSaveExternalPortResponse$ {
  /** @deprecated use `MariadbSaveExternalPortResponse$inboundSchema` instead. */
  export const inboundSchema = MariadbSaveExternalPortResponse$inboundSchema;
  /** @deprecated use `MariadbSaveExternalPortResponse$outboundSchema` instead. */
  export const outboundSchema = MariadbSaveExternalPortResponse$outboundSchema;
  /** @deprecated use `MariadbSaveExternalPortResponse$Outbound` instead. */
  export type Outbound = MariadbSaveExternalPortResponse$Outbound;
}

export function mariadbSaveExternalPortResponseToJSON(
  mariadbSaveExternalPortResponse: MariadbSaveExternalPortResponse,
): string {
  return JSON.stringify(
    MariadbSaveExternalPortResponse$outboundSchema.parse(
      mariadbSaveExternalPortResponse,
    ),
  );
}

export function mariadbSaveExternalPortResponseFromJSON(
  jsonString: string,
): SafeParseResult<MariadbSaveExternalPortResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbSaveExternalPortResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbSaveExternalPortResponse' from JSON`,
  );
}
