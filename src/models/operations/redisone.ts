/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type RedisOneSecurity = {
  authorization: string;
};

export type RedisOneRequest = {
  redisId: string;
};

export const RedisOneApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type RedisOneApplicationStatus = ClosedEnum<
  typeof RedisOneApplicationStatus
>;

export type RedisOneHealthCheckSwarm = {
  test?: Array<string> | undefined;
  interval?: number | undefined;
  timeout?: number | undefined;
  startPeriod?: number | undefined;
  retries?: number | undefined;
};

export type RedisOneRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type RedisOneSpread = {
  spreadDescriptor: string;
};

export type RedisOnePreference = {
  spread: RedisOneSpread;
};

export type RedisOnePlatform = {
  architecture: string;
  os: string;
};

export type RedisOnePlacementSwarm = {
  constraints?: Array<string> | undefined;
  preferences?: Array<RedisOnePreference> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<RedisOnePlatform> | undefined;
};

export type RedisOneUpdateConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type RedisOneRollbackConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type RedisOneReplicated = {
  replicas?: number | undefined;
};

export type RedisOneGlobal = {};

export type RedisOneReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type RedisOneGlobalJob = {};

export type RedisOneModeSwarm = {
  replicated?: RedisOneReplicated | undefined;
  global?: RedisOneGlobal | undefined;
  replicatedJob?: RedisOneReplicatedJob | undefined;
  globalJob?: RedisOneGlobalJob | undefined;
};

export type RedisOneDriverOpts = {};

export type RedisOneNetworkSwarm = {
  target?: string | undefined;
  aliases?: Array<string> | undefined;
  driverOpts?: RedisOneDriverOpts | undefined;
};

export type RedisOneProject = {
  projectId: string;
  name: string;
  description: string | null;
  createdAt: string;
  organizationId: string;
  env: string;
};

export type RedisOneEnvironment = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
  project: RedisOneProject;
};

export const RedisOneType = {
  Bind: "bind",
  Volume: "volume",
  File: "file",
} as const;
export type RedisOneType = ClosedEnum<typeof RedisOneType>;

export const RedisOneServiceType = {
  Application: "application",
  Postgres: "postgres",
  Mysql: "mysql",
  Mariadb: "mariadb",
  Mongo: "mongo",
  Redis: "redis",
  Compose: "compose",
} as const;
export type RedisOneServiceType = ClosedEnum<typeof RedisOneServiceType>;

export type RedisOneMount = {
  mountId: string;
  type: RedisOneType;
  hostPath: string | null;
  volumeName: string | null;
  filePath: string | null;
  content: string | null;
  serviceType: RedisOneServiceType;
  mountPath: string;
  applicationId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mysqlId: string | null;
  redisId: string | null;
  composeId: string | null;
};

export const RedisOneServerStatus = {
  Active: "active",
  Inactive: "inactive",
} as const;
export type RedisOneServerStatus = ClosedEnum<typeof RedisOneServerStatus>;

export const RedisOneMetricsConfigEnum = {
  Null: "null",
} as const;
export type RedisOneMetricsConfigEnum = ClosedEnum<
  typeof RedisOneMetricsConfigEnum
>;

export type RedisOneMetricsConfigUnion1 =
  | string
  | number
  | boolean
  | RedisOneMetricsConfigEnum;

export type RedisOneMetricsConfigUnion2 =
  | string
  | number
  | boolean
  | RedisOneMetricsConfigEnum
  | Array<any>
  | { [k: string]: any };

export type RedisOneServer = {
  serverId: string;
  name: string;
  description: string | null;
  ipAddress: string;
  port: number;
  username: string;
  appName: string;
  enableDockerCleanup: boolean;
  createdAt: string;
  organizationId: string;
  serverStatus: RedisOneServerStatus;
  command: string;
  sshKeyId: string | null;
  metricsConfig:
    | string
    | number
    | boolean
    | RedisOneMetricsConfigEnum
    | Array<any>
    | { [k: string]: any };
};

/**
 * Successful response
 */
export type RedisOneResponseBody = {
  redisId: string;
  name: string;
  appName: string;
  description: string | null;
  databasePassword: string;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  externalPort: number | null;
  createdAt: string;
  applicationStatus: RedisOneApplicationStatus;
  healthCheckSwarm: RedisOneHealthCheckSwarm | null;
  restartPolicySwarm: RedisOneRestartPolicySwarm | null;
  placementSwarm: RedisOnePlacementSwarm | null;
  updateConfigSwarm: RedisOneUpdateConfigSwarm | null;
  rollbackConfigSwarm: RedisOneRollbackConfigSwarm | null;
  modeSwarm: RedisOneModeSwarm | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<RedisOneNetworkSwarm> | null;
  replicas: number;
  environmentId: string;
  serverId: string | null;
  environment: RedisOneEnvironment;
  mounts: Array<RedisOneMount>;
  server: RedisOneServer | null;
};

export type RedisOneResponse = RedisOneResponseBody | models.ErrorT;

/** @internal */
export const RedisOneSecurity$inboundSchema: z.ZodType<
  RedisOneSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type RedisOneSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const RedisOneSecurity$outboundSchema: z.ZodType<
  RedisOneSecurity$Outbound,
  z.ZodTypeDef,
  RedisOneSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOneSecurity$ {
  /** @deprecated use `RedisOneSecurity$inboundSchema` instead. */
  export const inboundSchema = RedisOneSecurity$inboundSchema;
  /** @deprecated use `RedisOneSecurity$outboundSchema` instead. */
  export const outboundSchema = RedisOneSecurity$outboundSchema;
  /** @deprecated use `RedisOneSecurity$Outbound` instead. */
  export type Outbound = RedisOneSecurity$Outbound;
}

export function redisOneSecurityToJSON(
  redisOneSecurity: RedisOneSecurity,
): string {
  return JSON.stringify(
    RedisOneSecurity$outboundSchema.parse(redisOneSecurity),
  );
}

export function redisOneSecurityFromJSON(
  jsonString: string,
): SafeParseResult<RedisOneSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisOneSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisOneSecurity' from JSON`,
  );
}

/** @internal */
export const RedisOneRequest$inboundSchema: z.ZodType<
  RedisOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  redisId: z.string(),
});

/** @internal */
export type RedisOneRequest$Outbound = {
  redisId: string;
};

/** @internal */
export const RedisOneRequest$outboundSchema: z.ZodType<
  RedisOneRequest$Outbound,
  z.ZodTypeDef,
  RedisOneRequest
> = z.object({
  redisId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOneRequest$ {
  /** @deprecated use `RedisOneRequest$inboundSchema` instead. */
  export const inboundSchema = RedisOneRequest$inboundSchema;
  /** @deprecated use `RedisOneRequest$outboundSchema` instead. */
  export const outboundSchema = RedisOneRequest$outboundSchema;
  /** @deprecated use `RedisOneRequest$Outbound` instead. */
  export type Outbound = RedisOneRequest$Outbound;
}

export function redisOneRequestToJSON(
  redisOneRequest: RedisOneRequest,
): string {
  return JSON.stringify(RedisOneRequest$outboundSchema.parse(redisOneRequest));
}

export function redisOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<RedisOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisOneRequest' from JSON`,
  );
}

/** @internal */
export const RedisOneApplicationStatus$inboundSchema: z.ZodNativeEnum<
  typeof RedisOneApplicationStatus
> = z.nativeEnum(RedisOneApplicationStatus);

/** @internal */
export const RedisOneApplicationStatus$outboundSchema: z.ZodNativeEnum<
  typeof RedisOneApplicationStatus
> = RedisOneApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOneApplicationStatus$ {
  /** @deprecated use `RedisOneApplicationStatus$inboundSchema` instead. */
  export const inboundSchema = RedisOneApplicationStatus$inboundSchema;
  /** @deprecated use `RedisOneApplicationStatus$outboundSchema` instead. */
  export const outboundSchema = RedisOneApplicationStatus$outboundSchema;
}

/** @internal */
export const RedisOneHealthCheckSwarm$inboundSchema: z.ZodType<
  RedisOneHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Test: z.array(z.string()).optional(),
  Interval: z.number().optional(),
  Timeout: z.number().optional(),
  StartPeriod: z.number().optional(),
  Retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Test": "test",
    "Interval": "interval",
    "Timeout": "timeout",
    "StartPeriod": "startPeriod",
    "Retries": "retries",
  });
});

/** @internal */
export type RedisOneHealthCheckSwarm$Outbound = {
  Test?: Array<string> | undefined;
  Interval?: number | undefined;
  Timeout?: number | undefined;
  StartPeriod?: number | undefined;
  Retries?: number | undefined;
};

/** @internal */
export const RedisOneHealthCheckSwarm$outboundSchema: z.ZodType<
  RedisOneHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  RedisOneHealthCheckSwarm
> = z.object({
  test: z.array(z.string()).optional(),
  interval: z.number().optional(),
  timeout: z.number().optional(),
  startPeriod: z.number().optional(),
  retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    test: "Test",
    interval: "Interval",
    timeout: "Timeout",
    startPeriod: "StartPeriod",
    retries: "Retries",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOneHealthCheckSwarm$ {
  /** @deprecated use `RedisOneHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisOneHealthCheckSwarm$inboundSchema;
  /** @deprecated use `RedisOneHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisOneHealthCheckSwarm$outboundSchema;
  /** @deprecated use `RedisOneHealthCheckSwarm$Outbound` instead. */
  export type Outbound = RedisOneHealthCheckSwarm$Outbound;
}

export function redisOneHealthCheckSwarmToJSON(
  redisOneHealthCheckSwarm: RedisOneHealthCheckSwarm,
): string {
  return JSON.stringify(
    RedisOneHealthCheckSwarm$outboundSchema.parse(redisOneHealthCheckSwarm),
  );
}

export function redisOneHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisOneHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisOneHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisOneHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const RedisOneRestartPolicySwarm$inboundSchema: z.ZodType<
  RedisOneRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type RedisOneRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const RedisOneRestartPolicySwarm$outboundSchema: z.ZodType<
  RedisOneRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  RedisOneRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOneRestartPolicySwarm$ {
  /** @deprecated use `RedisOneRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema = RedisOneRestartPolicySwarm$inboundSchema;
  /** @deprecated use `RedisOneRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema = RedisOneRestartPolicySwarm$outboundSchema;
  /** @deprecated use `RedisOneRestartPolicySwarm$Outbound` instead. */
  export type Outbound = RedisOneRestartPolicySwarm$Outbound;
}

export function redisOneRestartPolicySwarmToJSON(
  redisOneRestartPolicySwarm: RedisOneRestartPolicySwarm,
): string {
  return JSON.stringify(
    RedisOneRestartPolicySwarm$outboundSchema.parse(redisOneRestartPolicySwarm),
  );
}

export function redisOneRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisOneRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisOneRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisOneRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const RedisOneSpread$inboundSchema: z.ZodType<
  RedisOneSpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type RedisOneSpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const RedisOneSpread$outboundSchema: z.ZodType<
  RedisOneSpread$Outbound,
  z.ZodTypeDef,
  RedisOneSpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOneSpread$ {
  /** @deprecated use `RedisOneSpread$inboundSchema` instead. */
  export const inboundSchema = RedisOneSpread$inboundSchema;
  /** @deprecated use `RedisOneSpread$outboundSchema` instead. */
  export const outboundSchema = RedisOneSpread$outboundSchema;
  /** @deprecated use `RedisOneSpread$Outbound` instead. */
  export type Outbound = RedisOneSpread$Outbound;
}

export function redisOneSpreadToJSON(redisOneSpread: RedisOneSpread): string {
  return JSON.stringify(RedisOneSpread$outboundSchema.parse(redisOneSpread));
}

export function redisOneSpreadFromJSON(
  jsonString: string,
): SafeParseResult<RedisOneSpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisOneSpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisOneSpread' from JSON`,
  );
}

/** @internal */
export const RedisOnePreference$inboundSchema: z.ZodType<
  RedisOnePreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => RedisOneSpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type RedisOnePreference$Outbound = {
  Spread: RedisOneSpread$Outbound;
};

/** @internal */
export const RedisOnePreference$outboundSchema: z.ZodType<
  RedisOnePreference$Outbound,
  z.ZodTypeDef,
  RedisOnePreference
> = z.object({
  spread: z.lazy(() => RedisOneSpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOnePreference$ {
  /** @deprecated use `RedisOnePreference$inboundSchema` instead. */
  export const inboundSchema = RedisOnePreference$inboundSchema;
  /** @deprecated use `RedisOnePreference$outboundSchema` instead. */
  export const outboundSchema = RedisOnePreference$outboundSchema;
  /** @deprecated use `RedisOnePreference$Outbound` instead. */
  export type Outbound = RedisOnePreference$Outbound;
}

export function redisOnePreferenceToJSON(
  redisOnePreference: RedisOnePreference,
): string {
  return JSON.stringify(
    RedisOnePreference$outboundSchema.parse(redisOnePreference),
  );
}

export function redisOnePreferenceFromJSON(
  jsonString: string,
): SafeParseResult<RedisOnePreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisOnePreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisOnePreference' from JSON`,
  );
}

/** @internal */
export const RedisOnePlatform$inboundSchema: z.ZodType<
  RedisOnePlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type RedisOnePlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const RedisOnePlatform$outboundSchema: z.ZodType<
  RedisOnePlatform$Outbound,
  z.ZodTypeDef,
  RedisOnePlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOnePlatform$ {
  /** @deprecated use `RedisOnePlatform$inboundSchema` instead. */
  export const inboundSchema = RedisOnePlatform$inboundSchema;
  /** @deprecated use `RedisOnePlatform$outboundSchema` instead. */
  export const outboundSchema = RedisOnePlatform$outboundSchema;
  /** @deprecated use `RedisOnePlatform$Outbound` instead. */
  export type Outbound = RedisOnePlatform$Outbound;
}

export function redisOnePlatformToJSON(
  redisOnePlatform: RedisOnePlatform,
): string {
  return JSON.stringify(
    RedisOnePlatform$outboundSchema.parse(redisOnePlatform),
  );
}

export function redisOnePlatformFromJSON(
  jsonString: string,
): SafeParseResult<RedisOnePlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisOnePlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisOnePlatform' from JSON`,
  );
}

/** @internal */
export const RedisOnePlacementSwarm$inboundSchema: z.ZodType<
  RedisOnePlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  Preferences: z.array(z.lazy(() => RedisOnePreference$inboundSchema))
    .optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => RedisOnePlatform$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "Preferences": "preferences",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
  });
});

/** @internal */
export type RedisOnePlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  Preferences?: Array<RedisOnePreference$Outbound> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<RedisOnePlatform$Outbound> | undefined;
};

/** @internal */
export const RedisOnePlacementSwarm$outboundSchema: z.ZodType<
  RedisOnePlacementSwarm$Outbound,
  z.ZodTypeDef,
  RedisOnePlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  preferences: z.array(z.lazy(() => RedisOnePreference$outboundSchema))
    .optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => RedisOnePlatform$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    preferences: "Preferences",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOnePlacementSwarm$ {
  /** @deprecated use `RedisOnePlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisOnePlacementSwarm$inboundSchema;
  /** @deprecated use `RedisOnePlacementSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisOnePlacementSwarm$outboundSchema;
  /** @deprecated use `RedisOnePlacementSwarm$Outbound` instead. */
  export type Outbound = RedisOnePlacementSwarm$Outbound;
}

export function redisOnePlacementSwarmToJSON(
  redisOnePlacementSwarm: RedisOnePlacementSwarm,
): string {
  return JSON.stringify(
    RedisOnePlacementSwarm$outboundSchema.parse(redisOnePlacementSwarm),
  );
}

export function redisOnePlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisOnePlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisOnePlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisOnePlacementSwarm' from JSON`,
  );
}

/** @internal */
export const RedisOneUpdateConfigSwarm$inboundSchema: z.ZodType<
  RedisOneUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type RedisOneUpdateConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const RedisOneUpdateConfigSwarm$outboundSchema: z.ZodType<
  RedisOneUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  RedisOneUpdateConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOneUpdateConfigSwarm$ {
  /** @deprecated use `RedisOneUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisOneUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `RedisOneUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisOneUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `RedisOneUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = RedisOneUpdateConfigSwarm$Outbound;
}

export function redisOneUpdateConfigSwarmToJSON(
  redisOneUpdateConfigSwarm: RedisOneUpdateConfigSwarm,
): string {
  return JSON.stringify(
    RedisOneUpdateConfigSwarm$outboundSchema.parse(redisOneUpdateConfigSwarm),
  );
}

export function redisOneUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisOneUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisOneUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisOneUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const RedisOneRollbackConfigSwarm$inboundSchema: z.ZodType<
  RedisOneRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type RedisOneRollbackConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const RedisOneRollbackConfigSwarm$outboundSchema: z.ZodType<
  RedisOneRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  RedisOneRollbackConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOneRollbackConfigSwarm$ {
  /** @deprecated use `RedisOneRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisOneRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `RedisOneRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisOneRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `RedisOneRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = RedisOneRollbackConfigSwarm$Outbound;
}

export function redisOneRollbackConfigSwarmToJSON(
  redisOneRollbackConfigSwarm: RedisOneRollbackConfigSwarm,
): string {
  return JSON.stringify(
    RedisOneRollbackConfigSwarm$outboundSchema.parse(
      redisOneRollbackConfigSwarm,
    ),
  );
}

export function redisOneRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisOneRollbackConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisOneRollbackConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisOneRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const RedisOneReplicated$inboundSchema: z.ZodType<
  RedisOneReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type RedisOneReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const RedisOneReplicated$outboundSchema: z.ZodType<
  RedisOneReplicated$Outbound,
  z.ZodTypeDef,
  RedisOneReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOneReplicated$ {
  /** @deprecated use `RedisOneReplicated$inboundSchema` instead. */
  export const inboundSchema = RedisOneReplicated$inboundSchema;
  /** @deprecated use `RedisOneReplicated$outboundSchema` instead. */
  export const outboundSchema = RedisOneReplicated$outboundSchema;
  /** @deprecated use `RedisOneReplicated$Outbound` instead. */
  export type Outbound = RedisOneReplicated$Outbound;
}

export function redisOneReplicatedToJSON(
  redisOneReplicated: RedisOneReplicated,
): string {
  return JSON.stringify(
    RedisOneReplicated$outboundSchema.parse(redisOneReplicated),
  );
}

export function redisOneReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<RedisOneReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisOneReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisOneReplicated' from JSON`,
  );
}

/** @internal */
export const RedisOneGlobal$inboundSchema: z.ZodType<
  RedisOneGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RedisOneGlobal$Outbound = {};

/** @internal */
export const RedisOneGlobal$outboundSchema: z.ZodType<
  RedisOneGlobal$Outbound,
  z.ZodTypeDef,
  RedisOneGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOneGlobal$ {
  /** @deprecated use `RedisOneGlobal$inboundSchema` instead. */
  export const inboundSchema = RedisOneGlobal$inboundSchema;
  /** @deprecated use `RedisOneGlobal$outboundSchema` instead. */
  export const outboundSchema = RedisOneGlobal$outboundSchema;
  /** @deprecated use `RedisOneGlobal$Outbound` instead. */
  export type Outbound = RedisOneGlobal$Outbound;
}

export function redisOneGlobalToJSON(redisOneGlobal: RedisOneGlobal): string {
  return JSON.stringify(RedisOneGlobal$outboundSchema.parse(redisOneGlobal));
}

export function redisOneGlobalFromJSON(
  jsonString: string,
): SafeParseResult<RedisOneGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisOneGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisOneGlobal' from JSON`,
  );
}

/** @internal */
export const RedisOneReplicatedJob$inboundSchema: z.ZodType<
  RedisOneReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type RedisOneReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const RedisOneReplicatedJob$outboundSchema: z.ZodType<
  RedisOneReplicatedJob$Outbound,
  z.ZodTypeDef,
  RedisOneReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOneReplicatedJob$ {
  /** @deprecated use `RedisOneReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = RedisOneReplicatedJob$inboundSchema;
  /** @deprecated use `RedisOneReplicatedJob$outboundSchema` instead. */
  export const outboundSchema = RedisOneReplicatedJob$outboundSchema;
  /** @deprecated use `RedisOneReplicatedJob$Outbound` instead. */
  export type Outbound = RedisOneReplicatedJob$Outbound;
}

export function redisOneReplicatedJobToJSON(
  redisOneReplicatedJob: RedisOneReplicatedJob,
): string {
  return JSON.stringify(
    RedisOneReplicatedJob$outboundSchema.parse(redisOneReplicatedJob),
  );
}

export function redisOneReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<RedisOneReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisOneReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisOneReplicatedJob' from JSON`,
  );
}

/** @internal */
export const RedisOneGlobalJob$inboundSchema: z.ZodType<
  RedisOneGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RedisOneGlobalJob$Outbound = {};

/** @internal */
export const RedisOneGlobalJob$outboundSchema: z.ZodType<
  RedisOneGlobalJob$Outbound,
  z.ZodTypeDef,
  RedisOneGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOneGlobalJob$ {
  /** @deprecated use `RedisOneGlobalJob$inboundSchema` instead. */
  export const inboundSchema = RedisOneGlobalJob$inboundSchema;
  /** @deprecated use `RedisOneGlobalJob$outboundSchema` instead. */
  export const outboundSchema = RedisOneGlobalJob$outboundSchema;
  /** @deprecated use `RedisOneGlobalJob$Outbound` instead. */
  export type Outbound = RedisOneGlobalJob$Outbound;
}

export function redisOneGlobalJobToJSON(
  redisOneGlobalJob: RedisOneGlobalJob,
): string {
  return JSON.stringify(
    RedisOneGlobalJob$outboundSchema.parse(redisOneGlobalJob),
  );
}

export function redisOneGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<RedisOneGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisOneGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisOneGlobalJob' from JSON`,
  );
}

/** @internal */
export const RedisOneModeSwarm$inboundSchema: z.ZodType<
  RedisOneModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicated: z.lazy(() => RedisOneReplicated$inboundSchema).optional(),
  Global: z.lazy(() => RedisOneGlobal$inboundSchema).optional(),
  ReplicatedJob: z.lazy(() => RedisOneReplicatedJob$inboundSchema).optional(),
  GlobalJob: z.lazy(() => RedisOneGlobalJob$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicated": "replicated",
    "Global": "global",
    "ReplicatedJob": "replicatedJob",
    "GlobalJob": "globalJob",
  });
});

/** @internal */
export type RedisOneModeSwarm$Outbound = {
  Replicated?: RedisOneReplicated$Outbound | undefined;
  Global?: RedisOneGlobal$Outbound | undefined;
  ReplicatedJob?: RedisOneReplicatedJob$Outbound | undefined;
  GlobalJob?: RedisOneGlobalJob$Outbound | undefined;
};

/** @internal */
export const RedisOneModeSwarm$outboundSchema: z.ZodType<
  RedisOneModeSwarm$Outbound,
  z.ZodTypeDef,
  RedisOneModeSwarm
> = z.object({
  replicated: z.lazy(() => RedisOneReplicated$outboundSchema).optional(),
  global: z.lazy(() => RedisOneGlobal$outboundSchema).optional(),
  replicatedJob: z.lazy(() => RedisOneReplicatedJob$outboundSchema).optional(),
  globalJob: z.lazy(() => RedisOneGlobalJob$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    replicated: "Replicated",
    global: "Global",
    replicatedJob: "ReplicatedJob",
    globalJob: "GlobalJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOneModeSwarm$ {
  /** @deprecated use `RedisOneModeSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisOneModeSwarm$inboundSchema;
  /** @deprecated use `RedisOneModeSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisOneModeSwarm$outboundSchema;
  /** @deprecated use `RedisOneModeSwarm$Outbound` instead. */
  export type Outbound = RedisOneModeSwarm$Outbound;
}

export function redisOneModeSwarmToJSON(
  redisOneModeSwarm: RedisOneModeSwarm,
): string {
  return JSON.stringify(
    RedisOneModeSwarm$outboundSchema.parse(redisOneModeSwarm),
  );
}

export function redisOneModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisOneModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisOneModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisOneModeSwarm' from JSON`,
  );
}

/** @internal */
export const RedisOneDriverOpts$inboundSchema: z.ZodType<
  RedisOneDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RedisOneDriverOpts$Outbound = {};

/** @internal */
export const RedisOneDriverOpts$outboundSchema: z.ZodType<
  RedisOneDriverOpts$Outbound,
  z.ZodTypeDef,
  RedisOneDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOneDriverOpts$ {
  /** @deprecated use `RedisOneDriverOpts$inboundSchema` instead. */
  export const inboundSchema = RedisOneDriverOpts$inboundSchema;
  /** @deprecated use `RedisOneDriverOpts$outboundSchema` instead. */
  export const outboundSchema = RedisOneDriverOpts$outboundSchema;
  /** @deprecated use `RedisOneDriverOpts$Outbound` instead. */
  export type Outbound = RedisOneDriverOpts$Outbound;
}

export function redisOneDriverOptsToJSON(
  redisOneDriverOpts: RedisOneDriverOpts,
): string {
  return JSON.stringify(
    RedisOneDriverOpts$outboundSchema.parse(redisOneDriverOpts),
  );
}

export function redisOneDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<RedisOneDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisOneDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisOneDriverOpts' from JSON`,
  );
}

/** @internal */
export const RedisOneNetworkSwarm$inboundSchema: z.ZodType<
  RedisOneNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Target: z.string().optional(),
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => RedisOneDriverOpts$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Target": "target",
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
  });
});

/** @internal */
export type RedisOneNetworkSwarm$Outbound = {
  Target?: string | undefined;
  Aliases?: Array<string> | undefined;
  DriverOpts?: RedisOneDriverOpts$Outbound | undefined;
};

/** @internal */
export const RedisOneNetworkSwarm$outboundSchema: z.ZodType<
  RedisOneNetworkSwarm$Outbound,
  z.ZodTypeDef,
  RedisOneNetworkSwarm
> = z.object({
  target: z.string().optional(),
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => RedisOneDriverOpts$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    target: "Target",
    aliases: "Aliases",
    driverOpts: "DriverOpts",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOneNetworkSwarm$ {
  /** @deprecated use `RedisOneNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisOneNetworkSwarm$inboundSchema;
  /** @deprecated use `RedisOneNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisOneNetworkSwarm$outboundSchema;
  /** @deprecated use `RedisOneNetworkSwarm$Outbound` instead. */
  export type Outbound = RedisOneNetworkSwarm$Outbound;
}

export function redisOneNetworkSwarmToJSON(
  redisOneNetworkSwarm: RedisOneNetworkSwarm,
): string {
  return JSON.stringify(
    RedisOneNetworkSwarm$outboundSchema.parse(redisOneNetworkSwarm),
  );
}

export function redisOneNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisOneNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisOneNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisOneNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const RedisOneProject$inboundSchema: z.ZodType<
  RedisOneProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  organizationId: z.string(),
  env: z.string(),
});

/** @internal */
export type RedisOneProject$Outbound = {
  projectId: string;
  name: string;
  description: string | null;
  createdAt: string;
  organizationId: string;
  env: string;
};

/** @internal */
export const RedisOneProject$outboundSchema: z.ZodType<
  RedisOneProject$Outbound,
  z.ZodTypeDef,
  RedisOneProject
> = z.object({
  projectId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  organizationId: z.string(),
  env: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOneProject$ {
  /** @deprecated use `RedisOneProject$inboundSchema` instead. */
  export const inboundSchema = RedisOneProject$inboundSchema;
  /** @deprecated use `RedisOneProject$outboundSchema` instead. */
  export const outboundSchema = RedisOneProject$outboundSchema;
  /** @deprecated use `RedisOneProject$Outbound` instead. */
  export type Outbound = RedisOneProject$Outbound;
}

export function redisOneProjectToJSON(
  redisOneProject: RedisOneProject,
): string {
  return JSON.stringify(RedisOneProject$outboundSchema.parse(redisOneProject));
}

export function redisOneProjectFromJSON(
  jsonString: string,
): SafeParseResult<RedisOneProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisOneProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisOneProject' from JSON`,
  );
}

/** @internal */
export const RedisOneEnvironment$inboundSchema: z.ZodType<
  RedisOneEnvironment,
  z.ZodTypeDef,
  unknown
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
  project: z.lazy(() => RedisOneProject$inboundSchema),
});

/** @internal */
export type RedisOneEnvironment$Outbound = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
  project: RedisOneProject$Outbound;
};

/** @internal */
export const RedisOneEnvironment$outboundSchema: z.ZodType<
  RedisOneEnvironment$Outbound,
  z.ZodTypeDef,
  RedisOneEnvironment
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
  project: z.lazy(() => RedisOneProject$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOneEnvironment$ {
  /** @deprecated use `RedisOneEnvironment$inboundSchema` instead. */
  export const inboundSchema = RedisOneEnvironment$inboundSchema;
  /** @deprecated use `RedisOneEnvironment$outboundSchema` instead. */
  export const outboundSchema = RedisOneEnvironment$outboundSchema;
  /** @deprecated use `RedisOneEnvironment$Outbound` instead. */
  export type Outbound = RedisOneEnvironment$Outbound;
}

export function redisOneEnvironmentToJSON(
  redisOneEnvironment: RedisOneEnvironment,
): string {
  return JSON.stringify(
    RedisOneEnvironment$outboundSchema.parse(redisOneEnvironment),
  );
}

export function redisOneEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<RedisOneEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisOneEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisOneEnvironment' from JSON`,
  );
}

/** @internal */
export const RedisOneType$inboundSchema: z.ZodNativeEnum<typeof RedisOneType> =
  z.nativeEnum(RedisOneType);

/** @internal */
export const RedisOneType$outboundSchema: z.ZodNativeEnum<typeof RedisOneType> =
  RedisOneType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOneType$ {
  /** @deprecated use `RedisOneType$inboundSchema` instead. */
  export const inboundSchema = RedisOneType$inboundSchema;
  /** @deprecated use `RedisOneType$outboundSchema` instead. */
  export const outboundSchema = RedisOneType$outboundSchema;
}

/** @internal */
export const RedisOneServiceType$inboundSchema: z.ZodNativeEnum<
  typeof RedisOneServiceType
> = z.nativeEnum(RedisOneServiceType);

/** @internal */
export const RedisOneServiceType$outboundSchema: z.ZodNativeEnum<
  typeof RedisOneServiceType
> = RedisOneServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOneServiceType$ {
  /** @deprecated use `RedisOneServiceType$inboundSchema` instead. */
  export const inboundSchema = RedisOneServiceType$inboundSchema;
  /** @deprecated use `RedisOneServiceType$outboundSchema` instead. */
  export const outboundSchema = RedisOneServiceType$outboundSchema;
}

/** @internal */
export const RedisOneMount$inboundSchema: z.ZodType<
  RedisOneMount,
  z.ZodTypeDef,
  unknown
> = z.object({
  mountId: z.string(),
  type: RedisOneType$inboundSchema,
  hostPath: z.nullable(z.string()),
  volumeName: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  content: z.nullable(z.string()),
  serviceType: RedisOneServiceType$inboundSchema,
  mountPath: z.string(),
  applicationId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
});

/** @internal */
export type RedisOneMount$Outbound = {
  mountId: string;
  type: string;
  hostPath: string | null;
  volumeName: string | null;
  filePath: string | null;
  content: string | null;
  serviceType: string;
  mountPath: string;
  applicationId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mysqlId: string | null;
  redisId: string | null;
  composeId: string | null;
};

/** @internal */
export const RedisOneMount$outboundSchema: z.ZodType<
  RedisOneMount$Outbound,
  z.ZodTypeDef,
  RedisOneMount
> = z.object({
  mountId: z.string(),
  type: RedisOneType$outboundSchema,
  hostPath: z.nullable(z.string()),
  volumeName: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  content: z.nullable(z.string()),
  serviceType: RedisOneServiceType$outboundSchema,
  mountPath: z.string(),
  applicationId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOneMount$ {
  /** @deprecated use `RedisOneMount$inboundSchema` instead. */
  export const inboundSchema = RedisOneMount$inboundSchema;
  /** @deprecated use `RedisOneMount$outboundSchema` instead. */
  export const outboundSchema = RedisOneMount$outboundSchema;
  /** @deprecated use `RedisOneMount$Outbound` instead. */
  export type Outbound = RedisOneMount$Outbound;
}

export function redisOneMountToJSON(redisOneMount: RedisOneMount): string {
  return JSON.stringify(RedisOneMount$outboundSchema.parse(redisOneMount));
}

export function redisOneMountFromJSON(
  jsonString: string,
): SafeParseResult<RedisOneMount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisOneMount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisOneMount' from JSON`,
  );
}

/** @internal */
export const RedisOneServerStatus$inboundSchema: z.ZodNativeEnum<
  typeof RedisOneServerStatus
> = z.nativeEnum(RedisOneServerStatus);

/** @internal */
export const RedisOneServerStatus$outboundSchema: z.ZodNativeEnum<
  typeof RedisOneServerStatus
> = RedisOneServerStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOneServerStatus$ {
  /** @deprecated use `RedisOneServerStatus$inboundSchema` instead. */
  export const inboundSchema = RedisOneServerStatus$inboundSchema;
  /** @deprecated use `RedisOneServerStatus$outboundSchema` instead. */
  export const outboundSchema = RedisOneServerStatus$outboundSchema;
}

/** @internal */
export const RedisOneMetricsConfigEnum$inboundSchema: z.ZodNativeEnum<
  typeof RedisOneMetricsConfigEnum
> = z.nativeEnum(RedisOneMetricsConfigEnum);

/** @internal */
export const RedisOneMetricsConfigEnum$outboundSchema: z.ZodNativeEnum<
  typeof RedisOneMetricsConfigEnum
> = RedisOneMetricsConfigEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOneMetricsConfigEnum$ {
  /** @deprecated use `RedisOneMetricsConfigEnum$inboundSchema` instead. */
  export const inboundSchema = RedisOneMetricsConfigEnum$inboundSchema;
  /** @deprecated use `RedisOneMetricsConfigEnum$outboundSchema` instead. */
  export const outboundSchema = RedisOneMetricsConfigEnum$outboundSchema;
}

/** @internal */
export const RedisOneMetricsConfigUnion1$inboundSchema: z.ZodType<
  RedisOneMetricsConfigUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  RedisOneMetricsConfigEnum$inboundSchema,
]);

/** @internal */
export type RedisOneMetricsConfigUnion1$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const RedisOneMetricsConfigUnion1$outboundSchema: z.ZodType<
  RedisOneMetricsConfigUnion1$Outbound,
  z.ZodTypeDef,
  RedisOneMetricsConfigUnion1
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  RedisOneMetricsConfigEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOneMetricsConfigUnion1$ {
  /** @deprecated use `RedisOneMetricsConfigUnion1$inboundSchema` instead. */
  export const inboundSchema = RedisOneMetricsConfigUnion1$inboundSchema;
  /** @deprecated use `RedisOneMetricsConfigUnion1$outboundSchema` instead. */
  export const outboundSchema = RedisOneMetricsConfigUnion1$outboundSchema;
  /** @deprecated use `RedisOneMetricsConfigUnion1$Outbound` instead. */
  export type Outbound = RedisOneMetricsConfigUnion1$Outbound;
}

export function redisOneMetricsConfigUnion1ToJSON(
  redisOneMetricsConfigUnion1: RedisOneMetricsConfigUnion1,
): string {
  return JSON.stringify(
    RedisOneMetricsConfigUnion1$outboundSchema.parse(
      redisOneMetricsConfigUnion1,
    ),
  );
}

export function redisOneMetricsConfigUnion1FromJSON(
  jsonString: string,
): SafeParseResult<RedisOneMetricsConfigUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisOneMetricsConfigUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisOneMetricsConfigUnion1' from JSON`,
  );
}

/** @internal */
export const RedisOneMetricsConfigUnion2$inboundSchema: z.ZodType<
  RedisOneMetricsConfigUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    RedisOneMetricsConfigEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type RedisOneMetricsConfigUnion2$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const RedisOneMetricsConfigUnion2$outboundSchema: z.ZodType<
  RedisOneMetricsConfigUnion2$Outbound,
  z.ZodTypeDef,
  RedisOneMetricsConfigUnion2
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    RedisOneMetricsConfigEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOneMetricsConfigUnion2$ {
  /** @deprecated use `RedisOneMetricsConfigUnion2$inboundSchema` instead. */
  export const inboundSchema = RedisOneMetricsConfigUnion2$inboundSchema;
  /** @deprecated use `RedisOneMetricsConfigUnion2$outboundSchema` instead. */
  export const outboundSchema = RedisOneMetricsConfigUnion2$outboundSchema;
  /** @deprecated use `RedisOneMetricsConfigUnion2$Outbound` instead. */
  export type Outbound = RedisOneMetricsConfigUnion2$Outbound;
}

export function redisOneMetricsConfigUnion2ToJSON(
  redisOneMetricsConfigUnion2: RedisOneMetricsConfigUnion2,
): string {
  return JSON.stringify(
    RedisOneMetricsConfigUnion2$outboundSchema.parse(
      redisOneMetricsConfigUnion2,
    ),
  );
}

export function redisOneMetricsConfigUnion2FromJSON(
  jsonString: string,
): SafeParseResult<RedisOneMetricsConfigUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisOneMetricsConfigUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisOneMetricsConfigUnion2' from JSON`,
  );
}

/** @internal */
export const RedisOneServer$inboundSchema: z.ZodType<
  RedisOneServer,
  z.ZodTypeDef,
  unknown
> = z.object({
  serverId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  ipAddress: z.string(),
  port: z.number(),
  username: z.string(),
  appName: z.string(),
  enableDockerCleanup: z.boolean(),
  createdAt: z.string(),
  organizationId: z.string(),
  serverStatus: RedisOneServerStatus$inboundSchema,
  command: z.string(),
  sshKeyId: z.nullable(z.string()),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      RedisOneMetricsConfigEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
});

/** @internal */
export type RedisOneServer$Outbound = {
  serverId: string;
  name: string;
  description: string | null;
  ipAddress: string;
  port: number;
  username: string;
  appName: string;
  enableDockerCleanup: boolean;
  createdAt: string;
  organizationId: string;
  serverStatus: string;
  command: string;
  sshKeyId: string | null;
  metricsConfig: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  };
};

/** @internal */
export const RedisOneServer$outboundSchema: z.ZodType<
  RedisOneServer$Outbound,
  z.ZodTypeDef,
  RedisOneServer
> = z.object({
  serverId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  ipAddress: z.string(),
  port: z.number(),
  username: z.string(),
  appName: z.string(),
  enableDockerCleanup: z.boolean(),
  createdAt: z.string(),
  organizationId: z.string(),
  serverStatus: RedisOneServerStatus$outboundSchema,
  command: z.string(),
  sshKeyId: z.nullable(z.string()),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      RedisOneMetricsConfigEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOneServer$ {
  /** @deprecated use `RedisOneServer$inboundSchema` instead. */
  export const inboundSchema = RedisOneServer$inboundSchema;
  /** @deprecated use `RedisOneServer$outboundSchema` instead. */
  export const outboundSchema = RedisOneServer$outboundSchema;
  /** @deprecated use `RedisOneServer$Outbound` instead. */
  export type Outbound = RedisOneServer$Outbound;
}

export function redisOneServerToJSON(redisOneServer: RedisOneServer): string {
  return JSON.stringify(RedisOneServer$outboundSchema.parse(redisOneServer));
}

export function redisOneServerFromJSON(
  jsonString: string,
): SafeParseResult<RedisOneServer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisOneServer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisOneServer' from JSON`,
  );
}

/** @internal */
export const RedisOneResponseBody$inboundSchema: z.ZodType<
  RedisOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  redisId: z.string(),
  name: z.string(),
  appName: z.string(),
  description: z.nullable(z.string()),
  databasePassword: z.string(),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  createdAt: z.string(),
  applicationStatus: RedisOneApplicationStatus$inboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => RedisOneHealthCheckSwarm$inboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => RedisOneRestartPolicySwarm$inboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => RedisOnePlacementSwarm$inboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => RedisOneUpdateConfigSwarm$inboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => RedisOneRollbackConfigSwarm$inboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => RedisOneModeSwarm$inboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => RedisOneNetworkSwarm$inboundSchema)),
  ),
  replicas: z.number(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
  environment: z.lazy(() => RedisOneEnvironment$inboundSchema),
  mounts: z.array(z.lazy(() => RedisOneMount$inboundSchema)),
  server: z.nullable(z.lazy(() => RedisOneServer$inboundSchema)),
});

/** @internal */
export type RedisOneResponseBody$Outbound = {
  redisId: string;
  name: string;
  appName: string;
  description: string | null;
  databasePassword: string;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  externalPort: number | null;
  createdAt: string;
  applicationStatus: string;
  healthCheckSwarm: RedisOneHealthCheckSwarm$Outbound | null;
  restartPolicySwarm: RedisOneRestartPolicySwarm$Outbound | null;
  placementSwarm: RedisOnePlacementSwarm$Outbound | null;
  updateConfigSwarm: RedisOneUpdateConfigSwarm$Outbound | null;
  rollbackConfigSwarm: RedisOneRollbackConfigSwarm$Outbound | null;
  modeSwarm: RedisOneModeSwarm$Outbound | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<RedisOneNetworkSwarm$Outbound> | null;
  replicas: number;
  environmentId: string;
  serverId: string | null;
  environment: RedisOneEnvironment$Outbound;
  mounts: Array<RedisOneMount$Outbound>;
  server: RedisOneServer$Outbound | null;
};

/** @internal */
export const RedisOneResponseBody$outboundSchema: z.ZodType<
  RedisOneResponseBody$Outbound,
  z.ZodTypeDef,
  RedisOneResponseBody
> = z.object({
  redisId: z.string(),
  name: z.string(),
  appName: z.string(),
  description: z.nullable(z.string()),
  databasePassword: z.string(),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  createdAt: z.string(),
  applicationStatus: RedisOneApplicationStatus$outboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => RedisOneHealthCheckSwarm$outboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => RedisOneRestartPolicySwarm$outboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => RedisOnePlacementSwarm$outboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => RedisOneUpdateConfigSwarm$outboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => RedisOneRollbackConfigSwarm$outboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => RedisOneModeSwarm$outboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => RedisOneNetworkSwarm$outboundSchema)),
  ),
  replicas: z.number(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
  environment: z.lazy(() => RedisOneEnvironment$outboundSchema),
  mounts: z.array(z.lazy(() => RedisOneMount$outboundSchema)),
  server: z.nullable(z.lazy(() => RedisOneServer$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOneResponseBody$ {
  /** @deprecated use `RedisOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = RedisOneResponseBody$inboundSchema;
  /** @deprecated use `RedisOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = RedisOneResponseBody$outboundSchema;
  /** @deprecated use `RedisOneResponseBody$Outbound` instead. */
  export type Outbound = RedisOneResponseBody$Outbound;
}

export function redisOneResponseBodyToJSON(
  redisOneResponseBody: RedisOneResponseBody,
): string {
  return JSON.stringify(
    RedisOneResponseBody$outboundSchema.parse(redisOneResponseBody),
  );
}

export function redisOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RedisOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisOneResponseBody' from JSON`,
  );
}

/** @internal */
export const RedisOneResponse$inboundSchema: z.ZodType<
  RedisOneResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => RedisOneResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type RedisOneResponse$Outbound =
  | RedisOneResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const RedisOneResponse$outboundSchema: z.ZodType<
  RedisOneResponse$Outbound,
  z.ZodTypeDef,
  RedisOneResponse
> = z.union([
  z.lazy(() => RedisOneResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisOneResponse$ {
  /** @deprecated use `RedisOneResponse$inboundSchema` instead. */
  export const inboundSchema = RedisOneResponse$inboundSchema;
  /** @deprecated use `RedisOneResponse$outboundSchema` instead. */
  export const outboundSchema = RedisOneResponse$outboundSchema;
  /** @deprecated use `RedisOneResponse$Outbound` instead. */
  export type Outbound = RedisOneResponse$Outbound;
}

export function redisOneResponseToJSON(
  redisOneResponse: RedisOneResponse,
): string {
  return JSON.stringify(
    RedisOneResponse$outboundSchema.parse(redisOneResponse),
  );
}

export function redisOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<RedisOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisOneResponse' from JSON`,
  );
}
