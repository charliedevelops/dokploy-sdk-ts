/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ApplicationSaveBuildTypeSecurity = {
  authorization: string;
};

export const ApplicationSaveBuildTypeBuildType = {
  Dockerfile: "dockerfile",
  HerokuBuildpacks: "heroku_buildpacks",
  PaketoBuildpacks: "paketo_buildpacks",
  Nixpacks: "nixpacks",
  Static: "static",
  Railpack: "railpack",
} as const;
export type ApplicationSaveBuildTypeBuildType = ClosedEnum<
  typeof ApplicationSaveBuildTypeBuildType
>;

export type ApplicationSaveBuildTypeRequest = {
  applicationId: string;
  buildType: ApplicationSaveBuildTypeBuildType;
  dockerfile?: string | null | undefined;
  dockerContextPath: string | null;
  dockerBuildStage: string | null;
  herokuVersion?: string | null | undefined;
  railpackVersion?: string | null | undefined;
  publishDirectory?: string | null | undefined;
  isStaticSpa?: boolean | null | undefined;
};

export type ApplicationSaveBuildTypeResponse = models.ErrorT | boolean;

/** @internal */
export const ApplicationSaveBuildTypeSecurity$inboundSchema: z.ZodType<
  ApplicationSaveBuildTypeSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type ApplicationSaveBuildTypeSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const ApplicationSaveBuildTypeSecurity$outboundSchema: z.ZodType<
  ApplicationSaveBuildTypeSecurity$Outbound,
  z.ZodTypeDef,
  ApplicationSaveBuildTypeSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationSaveBuildTypeSecurity$ {
  /** @deprecated use `ApplicationSaveBuildTypeSecurity$inboundSchema` instead. */
  export const inboundSchema = ApplicationSaveBuildTypeSecurity$inboundSchema;
  /** @deprecated use `ApplicationSaveBuildTypeSecurity$outboundSchema` instead. */
  export const outboundSchema = ApplicationSaveBuildTypeSecurity$outboundSchema;
  /** @deprecated use `ApplicationSaveBuildTypeSecurity$Outbound` instead. */
  export type Outbound = ApplicationSaveBuildTypeSecurity$Outbound;
}

export function applicationSaveBuildTypeSecurityToJSON(
  applicationSaveBuildTypeSecurity: ApplicationSaveBuildTypeSecurity,
): string {
  return JSON.stringify(
    ApplicationSaveBuildTypeSecurity$outboundSchema.parse(
      applicationSaveBuildTypeSecurity,
    ),
  );
}

export function applicationSaveBuildTypeSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationSaveBuildTypeSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationSaveBuildTypeSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationSaveBuildTypeSecurity' from JSON`,
  );
}

/** @internal */
export const ApplicationSaveBuildTypeBuildType$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationSaveBuildTypeBuildType
> = z.nativeEnum(ApplicationSaveBuildTypeBuildType);

/** @internal */
export const ApplicationSaveBuildTypeBuildType$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationSaveBuildTypeBuildType
> = ApplicationSaveBuildTypeBuildType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationSaveBuildTypeBuildType$ {
  /** @deprecated use `ApplicationSaveBuildTypeBuildType$inboundSchema` instead. */
  export const inboundSchema = ApplicationSaveBuildTypeBuildType$inboundSchema;
  /** @deprecated use `ApplicationSaveBuildTypeBuildType$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationSaveBuildTypeBuildType$outboundSchema;
}

/** @internal */
export const ApplicationSaveBuildTypeRequest$inboundSchema: z.ZodType<
  ApplicationSaveBuildTypeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string(),
  buildType: ApplicationSaveBuildTypeBuildType$inboundSchema,
  dockerfile: z.nullable(z.string()).optional(),
  dockerContextPath: z.nullable(z.string()),
  dockerBuildStage: z.nullable(z.string()),
  herokuVersion: z.nullable(z.string()).optional(),
  railpackVersion: z.nullable(z.string()).optional(),
  publishDirectory: z.nullable(z.string()).optional(),
  isStaticSpa: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ApplicationSaveBuildTypeRequest$Outbound = {
  applicationId: string;
  buildType: string;
  dockerfile?: string | null | undefined;
  dockerContextPath: string | null;
  dockerBuildStage: string | null;
  herokuVersion?: string | null | undefined;
  railpackVersion?: string | null | undefined;
  publishDirectory?: string | null | undefined;
  isStaticSpa?: boolean | null | undefined;
};

/** @internal */
export const ApplicationSaveBuildTypeRequest$outboundSchema: z.ZodType<
  ApplicationSaveBuildTypeRequest$Outbound,
  z.ZodTypeDef,
  ApplicationSaveBuildTypeRequest
> = z.object({
  applicationId: z.string(),
  buildType: ApplicationSaveBuildTypeBuildType$outboundSchema,
  dockerfile: z.nullable(z.string()).optional(),
  dockerContextPath: z.nullable(z.string()),
  dockerBuildStage: z.nullable(z.string()),
  herokuVersion: z.nullable(z.string()).optional(),
  railpackVersion: z.nullable(z.string()).optional(),
  publishDirectory: z.nullable(z.string()).optional(),
  isStaticSpa: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationSaveBuildTypeRequest$ {
  /** @deprecated use `ApplicationSaveBuildTypeRequest$inboundSchema` instead. */
  export const inboundSchema = ApplicationSaveBuildTypeRequest$inboundSchema;
  /** @deprecated use `ApplicationSaveBuildTypeRequest$outboundSchema` instead. */
  export const outboundSchema = ApplicationSaveBuildTypeRequest$outboundSchema;
  /** @deprecated use `ApplicationSaveBuildTypeRequest$Outbound` instead. */
  export type Outbound = ApplicationSaveBuildTypeRequest$Outbound;
}

export function applicationSaveBuildTypeRequestToJSON(
  applicationSaveBuildTypeRequest: ApplicationSaveBuildTypeRequest,
): string {
  return JSON.stringify(
    ApplicationSaveBuildTypeRequest$outboundSchema.parse(
      applicationSaveBuildTypeRequest,
    ),
  );
}

export function applicationSaveBuildTypeRequestFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationSaveBuildTypeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationSaveBuildTypeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationSaveBuildTypeRequest' from JSON`,
  );
}

/** @internal */
export const ApplicationSaveBuildTypeResponse$inboundSchema: z.ZodType<
  ApplicationSaveBuildTypeResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.boolean()]);

/** @internal */
export type ApplicationSaveBuildTypeResponse$Outbound =
  | models.ErrorT$Outbound
  | boolean;

/** @internal */
export const ApplicationSaveBuildTypeResponse$outboundSchema: z.ZodType<
  ApplicationSaveBuildTypeResponse$Outbound,
  z.ZodTypeDef,
  ApplicationSaveBuildTypeResponse
> = z.union([models.ErrorT$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationSaveBuildTypeResponse$ {
  /** @deprecated use `ApplicationSaveBuildTypeResponse$inboundSchema` instead. */
  export const inboundSchema = ApplicationSaveBuildTypeResponse$inboundSchema;
  /** @deprecated use `ApplicationSaveBuildTypeResponse$outboundSchema` instead. */
  export const outboundSchema = ApplicationSaveBuildTypeResponse$outboundSchema;
  /** @deprecated use `ApplicationSaveBuildTypeResponse$Outbound` instead. */
  export type Outbound = ApplicationSaveBuildTypeResponse$Outbound;
}

export function applicationSaveBuildTypeResponseToJSON(
  applicationSaveBuildTypeResponse: ApplicationSaveBuildTypeResponse,
): string {
  return JSON.stringify(
    ApplicationSaveBuildTypeResponse$outboundSchema.parse(
      applicationSaveBuildTypeResponse,
    ),
  );
}

export function applicationSaveBuildTypeResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationSaveBuildTypeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationSaveBuildTypeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationSaveBuildTypeResponse' from JSON`,
  );
}
