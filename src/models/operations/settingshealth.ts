/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SettingsHealthSecurity = {
  authorization: string;
};

/** @internal */
export const SettingsHealthSecurity$inboundSchema: z.ZodType<
  SettingsHealthSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type SettingsHealthSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const SettingsHealthSecurity$outboundSchema: z.ZodType<
  SettingsHealthSecurity$Outbound,
  z.ZodTypeDef,
  SettingsHealthSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SettingsHealthSecurity$ {
  /** @deprecated use `SettingsHealthSecurity$inboundSchema` instead. */
  export const inboundSchema = SettingsHealthSecurity$inboundSchema;
  /** @deprecated use `SettingsHealthSecurity$outboundSchema` instead. */
  export const outboundSchema = SettingsHealthSecurity$outboundSchema;
  /** @deprecated use `SettingsHealthSecurity$Outbound` instead. */
  export type Outbound = SettingsHealthSecurity$Outbound;
}

export function settingsHealthSecurityToJSON(
  settingsHealthSecurity: SettingsHealthSecurity,
): string {
  return JSON.stringify(
    SettingsHealthSecurity$outboundSchema.parse(settingsHealthSecurity),
  );
}

export function settingsHealthSecurityFromJSON(
  jsonString: string,
): SafeParseResult<SettingsHealthSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SettingsHealthSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SettingsHealthSecurity' from JSON`,
  );
}
