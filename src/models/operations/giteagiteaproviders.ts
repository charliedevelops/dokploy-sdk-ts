/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GiteaGiteaProvidersSecurity = {
  authorization: string;
};

export const GiteaGiteaProvidersProviderType = {
  Github: "github",
  Gitlab: "gitlab",
  Bitbucket: "bitbucket",
  Gitea: "gitea",
} as const;
export type GiteaGiteaProvidersProviderType = ClosedEnum<
  typeof GiteaGiteaProvidersProviderType
>;

export type GiteaGiteaProvidersGitProvider = {
  createdAt: string;
  gitProviderId: string;
  name: string;
  organizationId: string;
  providerType: GiteaGiteaProvidersProviderType;
  userId: string;
};

export type GiteaGiteaProvidersResponseBody = {
  gitProvider: GiteaGiteaProvidersGitProvider;
  giteaId: string;
};

export type GiteaGiteaProvidersResponse =
  | models.ErrorT
  | Array<GiteaGiteaProvidersResponseBody>;

/** @internal */
export const GiteaGiteaProvidersSecurity$inboundSchema: z.ZodType<
  GiteaGiteaProvidersSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type GiteaGiteaProvidersSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const GiteaGiteaProvidersSecurity$outboundSchema: z.ZodType<
  GiteaGiteaProvidersSecurity$Outbound,
  z.ZodTypeDef,
  GiteaGiteaProvidersSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiteaGiteaProvidersSecurity$ {
  /** @deprecated use `GiteaGiteaProvidersSecurity$inboundSchema` instead. */
  export const inboundSchema = GiteaGiteaProvidersSecurity$inboundSchema;
  /** @deprecated use `GiteaGiteaProvidersSecurity$outboundSchema` instead. */
  export const outboundSchema = GiteaGiteaProvidersSecurity$outboundSchema;
  /** @deprecated use `GiteaGiteaProvidersSecurity$Outbound` instead. */
  export type Outbound = GiteaGiteaProvidersSecurity$Outbound;
}

export function giteaGiteaProvidersSecurityToJSON(
  giteaGiteaProvidersSecurity: GiteaGiteaProvidersSecurity,
): string {
  return JSON.stringify(
    GiteaGiteaProvidersSecurity$outboundSchema.parse(
      giteaGiteaProvidersSecurity,
    ),
  );
}

export function giteaGiteaProvidersSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GiteaGiteaProvidersSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiteaGiteaProvidersSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiteaGiteaProvidersSecurity' from JSON`,
  );
}

/** @internal */
export const GiteaGiteaProvidersProviderType$inboundSchema: z.ZodNativeEnum<
  typeof GiteaGiteaProvidersProviderType
> = z.nativeEnum(GiteaGiteaProvidersProviderType);

/** @internal */
export const GiteaGiteaProvidersProviderType$outboundSchema: z.ZodNativeEnum<
  typeof GiteaGiteaProvidersProviderType
> = GiteaGiteaProvidersProviderType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiteaGiteaProvidersProviderType$ {
  /** @deprecated use `GiteaGiteaProvidersProviderType$inboundSchema` instead. */
  export const inboundSchema = GiteaGiteaProvidersProviderType$inboundSchema;
  /** @deprecated use `GiteaGiteaProvidersProviderType$outboundSchema` instead. */
  export const outboundSchema = GiteaGiteaProvidersProviderType$outboundSchema;
}

/** @internal */
export const GiteaGiteaProvidersGitProvider$inboundSchema: z.ZodType<
  GiteaGiteaProvidersGitProvider,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  gitProviderId: z.string(),
  name: z.string(),
  organizationId: z.string(),
  providerType: GiteaGiteaProvidersProviderType$inboundSchema,
  userId: z.string(),
});

/** @internal */
export type GiteaGiteaProvidersGitProvider$Outbound = {
  createdAt: string;
  gitProviderId: string;
  name: string;
  organizationId: string;
  providerType: string;
  userId: string;
};

/** @internal */
export const GiteaGiteaProvidersGitProvider$outboundSchema: z.ZodType<
  GiteaGiteaProvidersGitProvider$Outbound,
  z.ZodTypeDef,
  GiteaGiteaProvidersGitProvider
> = z.object({
  createdAt: z.string(),
  gitProviderId: z.string(),
  name: z.string(),
  organizationId: z.string(),
  providerType: GiteaGiteaProvidersProviderType$outboundSchema,
  userId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiteaGiteaProvidersGitProvider$ {
  /** @deprecated use `GiteaGiteaProvidersGitProvider$inboundSchema` instead. */
  export const inboundSchema = GiteaGiteaProvidersGitProvider$inboundSchema;
  /** @deprecated use `GiteaGiteaProvidersGitProvider$outboundSchema` instead. */
  export const outboundSchema = GiteaGiteaProvidersGitProvider$outboundSchema;
  /** @deprecated use `GiteaGiteaProvidersGitProvider$Outbound` instead. */
  export type Outbound = GiteaGiteaProvidersGitProvider$Outbound;
}

export function giteaGiteaProvidersGitProviderToJSON(
  giteaGiteaProvidersGitProvider: GiteaGiteaProvidersGitProvider,
): string {
  return JSON.stringify(
    GiteaGiteaProvidersGitProvider$outboundSchema.parse(
      giteaGiteaProvidersGitProvider,
    ),
  );
}

export function giteaGiteaProvidersGitProviderFromJSON(
  jsonString: string,
): SafeParseResult<GiteaGiteaProvidersGitProvider, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiteaGiteaProvidersGitProvider$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiteaGiteaProvidersGitProvider' from JSON`,
  );
}

/** @internal */
export const GiteaGiteaProvidersResponseBody$inboundSchema: z.ZodType<
  GiteaGiteaProvidersResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  gitProvider: z.lazy(() => GiteaGiteaProvidersGitProvider$inboundSchema),
  giteaId: z.string(),
});

/** @internal */
export type GiteaGiteaProvidersResponseBody$Outbound = {
  gitProvider: GiteaGiteaProvidersGitProvider$Outbound;
  giteaId: string;
};

/** @internal */
export const GiteaGiteaProvidersResponseBody$outboundSchema: z.ZodType<
  GiteaGiteaProvidersResponseBody$Outbound,
  z.ZodTypeDef,
  GiteaGiteaProvidersResponseBody
> = z.object({
  gitProvider: z.lazy(() => GiteaGiteaProvidersGitProvider$outboundSchema),
  giteaId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiteaGiteaProvidersResponseBody$ {
  /** @deprecated use `GiteaGiteaProvidersResponseBody$inboundSchema` instead. */
  export const inboundSchema = GiteaGiteaProvidersResponseBody$inboundSchema;
  /** @deprecated use `GiteaGiteaProvidersResponseBody$outboundSchema` instead. */
  export const outboundSchema = GiteaGiteaProvidersResponseBody$outboundSchema;
  /** @deprecated use `GiteaGiteaProvidersResponseBody$Outbound` instead. */
  export type Outbound = GiteaGiteaProvidersResponseBody$Outbound;
}

export function giteaGiteaProvidersResponseBodyToJSON(
  giteaGiteaProvidersResponseBody: GiteaGiteaProvidersResponseBody,
): string {
  return JSON.stringify(
    GiteaGiteaProvidersResponseBody$outboundSchema.parse(
      giteaGiteaProvidersResponseBody,
    ),
  );
}

export function giteaGiteaProvidersResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GiteaGiteaProvidersResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiteaGiteaProvidersResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiteaGiteaProvidersResponseBody' from JSON`,
  );
}

/** @internal */
export const GiteaGiteaProvidersResponse$inboundSchema: z.ZodType<
  GiteaGiteaProvidersResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ErrorT$inboundSchema,
  z.array(z.lazy(() => GiteaGiteaProvidersResponseBody$inboundSchema)),
]);

/** @internal */
export type GiteaGiteaProvidersResponse$Outbound =
  | models.ErrorT$Outbound
  | Array<GiteaGiteaProvidersResponseBody$Outbound>;

/** @internal */
export const GiteaGiteaProvidersResponse$outboundSchema: z.ZodType<
  GiteaGiteaProvidersResponse$Outbound,
  z.ZodTypeDef,
  GiteaGiteaProvidersResponse
> = z.union([
  models.ErrorT$outboundSchema,
  z.array(z.lazy(() => GiteaGiteaProvidersResponseBody$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiteaGiteaProvidersResponse$ {
  /** @deprecated use `GiteaGiteaProvidersResponse$inboundSchema` instead. */
  export const inboundSchema = GiteaGiteaProvidersResponse$inboundSchema;
  /** @deprecated use `GiteaGiteaProvidersResponse$outboundSchema` instead. */
  export const outboundSchema = GiteaGiteaProvidersResponse$outboundSchema;
  /** @deprecated use `GiteaGiteaProvidersResponse$Outbound` instead. */
  export type Outbound = GiteaGiteaProvidersResponse$Outbound;
}

export function giteaGiteaProvidersResponseToJSON(
  giteaGiteaProvidersResponse: GiteaGiteaProvidersResponse,
): string {
  return JSON.stringify(
    GiteaGiteaProvidersResponse$outboundSchema.parse(
      giteaGiteaProvidersResponse,
    ),
  );
}

export function giteaGiteaProvidersResponseFromJSON(
  jsonString: string,
): SafeParseResult<GiteaGiteaProvidersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiteaGiteaProvidersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiteaGiteaProvidersResponse' from JSON`,
  );
}
