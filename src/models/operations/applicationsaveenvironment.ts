/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ApplicationSaveEnvironmentRequest = {
  applicationId: string;
  buildArgs?: string | null | undefined;
  env?: string | null | undefined;
};

export type ApplicationSaveEnvironmentResponse = models.ErrorT | boolean;

/** @internal */
export const ApplicationSaveEnvironmentRequest$inboundSchema: z.ZodType<
  ApplicationSaveEnvironmentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string(),
  buildArgs: z.nullable(z.string()).optional(),
  env: z.nullable(z.string()).optional(),
});

/** @internal */
export type ApplicationSaveEnvironmentRequest$Outbound = {
  applicationId: string;
  buildArgs?: string | null | undefined;
  env?: string | null | undefined;
};

/** @internal */
export const ApplicationSaveEnvironmentRequest$outboundSchema: z.ZodType<
  ApplicationSaveEnvironmentRequest$Outbound,
  z.ZodTypeDef,
  ApplicationSaveEnvironmentRequest
> = z.object({
  applicationId: z.string(),
  buildArgs: z.nullable(z.string()).optional(),
  env: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationSaveEnvironmentRequest$ {
  /** @deprecated use `ApplicationSaveEnvironmentRequest$inboundSchema` instead. */
  export const inboundSchema = ApplicationSaveEnvironmentRequest$inboundSchema;
  /** @deprecated use `ApplicationSaveEnvironmentRequest$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationSaveEnvironmentRequest$outboundSchema;
  /** @deprecated use `ApplicationSaveEnvironmentRequest$Outbound` instead. */
  export type Outbound = ApplicationSaveEnvironmentRequest$Outbound;
}

export function applicationSaveEnvironmentRequestToJSON(
  applicationSaveEnvironmentRequest: ApplicationSaveEnvironmentRequest,
): string {
  return JSON.stringify(
    ApplicationSaveEnvironmentRequest$outboundSchema.parse(
      applicationSaveEnvironmentRequest,
    ),
  );
}

export function applicationSaveEnvironmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationSaveEnvironmentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationSaveEnvironmentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationSaveEnvironmentRequest' from JSON`,
  );
}

/** @internal */
export const ApplicationSaveEnvironmentResponse$inboundSchema: z.ZodType<
  ApplicationSaveEnvironmentResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.boolean()]);

/** @internal */
export type ApplicationSaveEnvironmentResponse$Outbound =
  | models.ErrorT$Outbound
  | boolean;

/** @internal */
export const ApplicationSaveEnvironmentResponse$outboundSchema: z.ZodType<
  ApplicationSaveEnvironmentResponse$Outbound,
  z.ZodTypeDef,
  ApplicationSaveEnvironmentResponse
> = z.union([models.ErrorT$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationSaveEnvironmentResponse$ {
  /** @deprecated use `ApplicationSaveEnvironmentResponse$inboundSchema` instead. */
  export const inboundSchema = ApplicationSaveEnvironmentResponse$inboundSchema;
  /** @deprecated use `ApplicationSaveEnvironmentResponse$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationSaveEnvironmentResponse$outboundSchema;
  /** @deprecated use `ApplicationSaveEnvironmentResponse$Outbound` instead. */
  export type Outbound = ApplicationSaveEnvironmentResponse$Outbound;
}

export function applicationSaveEnvironmentResponseToJSON(
  applicationSaveEnvironmentResponse: ApplicationSaveEnvironmentResponse,
): string {
  return JSON.stringify(
    ApplicationSaveEnvironmentResponse$outboundSchema.parse(
      applicationSaveEnvironmentResponse,
    ),
  );
}

export function applicationSaveEnvironmentResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationSaveEnvironmentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationSaveEnvironmentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationSaveEnvironmentResponse' from JSON`,
  );
}
