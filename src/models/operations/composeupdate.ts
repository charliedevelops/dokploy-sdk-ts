/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ComposeUpdateComposeStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type ComposeUpdateComposeStatus = ClosedEnum<
  typeof ComposeUpdateComposeStatus
>;

export const ComposeUpdateComposeType = {
  DockerCompose: "docker-compose",
  Stack: "stack",
} as const;
export type ComposeUpdateComposeType = ClosedEnum<
  typeof ComposeUpdateComposeType
>;

export const ComposeUpdateSourceType = {
  Git: "git",
  Github: "github",
  Gitlab: "gitlab",
  Bitbucket: "bitbucket",
  Gitea: "gitea",
  Raw: "raw",
} as const;
export type ComposeUpdateSourceType = ClosedEnum<
  typeof ComposeUpdateSourceType
>;

export const ComposeUpdateTriggerType = {
  Push: "push",
  Tag: "tag",
} as const;
export type ComposeUpdateTriggerType = ClosedEnum<
  typeof ComposeUpdateTriggerType
>;

export type ComposeUpdateRequest = {
  appName?: string | undefined;
  autoDeploy?: boolean | null | undefined;
  bitbucketBranch?: string | null | undefined;
  bitbucketId?: string | null | undefined;
  bitbucketOwner?: string | null | undefined;
  bitbucketRepository?: string | null | undefined;
  branch?: string | null | undefined;
  command?: string | undefined;
  composeFile?: string | undefined;
  composeId: string;
  composePath?: string | undefined;
  composeStatus?: ComposeUpdateComposeStatus | undefined;
  composeType?: ComposeUpdateComposeType | undefined;
  createdAt?: string | undefined;
  customGitBranch?: string | null | undefined;
  customGitSSHKeyId?: string | null | undefined;
  customGitUrl?: string | null | undefined;
  description?: string | null | undefined;
  enableSubmodules?: boolean | undefined;
  env?: string | null | undefined;
  environmentId?: string | undefined;
  giteaBranch?: string | null | undefined;
  giteaId?: string | null | undefined;
  giteaOwner?: string | null | undefined;
  giteaRepository?: string | null | undefined;
  githubId?: string | null | undefined;
  gitlabBranch?: string | null | undefined;
  gitlabId?: string | null | undefined;
  gitlabOwner?: string | null | undefined;
  gitlabPathNamespace?: string | null | undefined;
  gitlabProjectId?: number | null | undefined;
  gitlabRepository?: string | null | undefined;
  isolatedDeployment?: boolean | undefined;
  isolatedDeploymentsVolume?: boolean | undefined;
  name?: string | undefined;
  owner?: string | null | undefined;
  randomize?: boolean | undefined;
  refreshToken?: string | null | undefined;
  repository?: string | null | undefined;
  sourceType?: ComposeUpdateSourceType | undefined;
  suffix?: string | undefined;
  triggerType?: ComposeUpdateTriggerType | null | undefined;
  watchPaths?: Array<string> | null | undefined;
};

/** @internal */
export const ComposeUpdateComposeStatus$inboundSchema: z.ZodNativeEnum<
  typeof ComposeUpdateComposeStatus
> = z.nativeEnum(ComposeUpdateComposeStatus);

/** @internal */
export const ComposeUpdateComposeStatus$outboundSchema: z.ZodNativeEnum<
  typeof ComposeUpdateComposeStatus
> = ComposeUpdateComposeStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComposeUpdateComposeStatus$ {
  /** @deprecated use `ComposeUpdateComposeStatus$inboundSchema` instead. */
  export const inboundSchema = ComposeUpdateComposeStatus$inboundSchema;
  /** @deprecated use `ComposeUpdateComposeStatus$outboundSchema` instead. */
  export const outboundSchema = ComposeUpdateComposeStatus$outboundSchema;
}

/** @internal */
export const ComposeUpdateComposeType$inboundSchema: z.ZodNativeEnum<
  typeof ComposeUpdateComposeType
> = z.nativeEnum(ComposeUpdateComposeType);

/** @internal */
export const ComposeUpdateComposeType$outboundSchema: z.ZodNativeEnum<
  typeof ComposeUpdateComposeType
> = ComposeUpdateComposeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComposeUpdateComposeType$ {
  /** @deprecated use `ComposeUpdateComposeType$inboundSchema` instead. */
  export const inboundSchema = ComposeUpdateComposeType$inboundSchema;
  /** @deprecated use `ComposeUpdateComposeType$outboundSchema` instead. */
  export const outboundSchema = ComposeUpdateComposeType$outboundSchema;
}

/** @internal */
export const ComposeUpdateSourceType$inboundSchema: z.ZodNativeEnum<
  typeof ComposeUpdateSourceType
> = z.nativeEnum(ComposeUpdateSourceType);

/** @internal */
export const ComposeUpdateSourceType$outboundSchema: z.ZodNativeEnum<
  typeof ComposeUpdateSourceType
> = ComposeUpdateSourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComposeUpdateSourceType$ {
  /** @deprecated use `ComposeUpdateSourceType$inboundSchema` instead. */
  export const inboundSchema = ComposeUpdateSourceType$inboundSchema;
  /** @deprecated use `ComposeUpdateSourceType$outboundSchema` instead. */
  export const outboundSchema = ComposeUpdateSourceType$outboundSchema;
}

/** @internal */
export const ComposeUpdateTriggerType$inboundSchema: z.ZodNativeEnum<
  typeof ComposeUpdateTriggerType
> = z.nativeEnum(ComposeUpdateTriggerType);

/** @internal */
export const ComposeUpdateTriggerType$outboundSchema: z.ZodNativeEnum<
  typeof ComposeUpdateTriggerType
> = ComposeUpdateTriggerType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComposeUpdateTriggerType$ {
  /** @deprecated use `ComposeUpdateTriggerType$inboundSchema` instead. */
  export const inboundSchema = ComposeUpdateTriggerType$inboundSchema;
  /** @deprecated use `ComposeUpdateTriggerType$outboundSchema` instead. */
  export const outboundSchema = ComposeUpdateTriggerType$outboundSchema;
}

/** @internal */
export const ComposeUpdateRequest$inboundSchema: z.ZodType<
  ComposeUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string().optional(),
  autoDeploy: z.nullable(z.boolean()).optional(),
  bitbucketBranch: z.nullable(z.string()).optional(),
  bitbucketId: z.nullable(z.string()).optional(),
  bitbucketOwner: z.nullable(z.string()).optional(),
  bitbucketRepository: z.nullable(z.string()).optional(),
  branch: z.nullable(z.string()).optional(),
  command: z.string().optional(),
  composeFile: z.string().optional(),
  composeId: z.string(),
  composePath: z.string().optional(),
  composeStatus: ComposeUpdateComposeStatus$inboundSchema.optional(),
  composeType: ComposeUpdateComposeType$inboundSchema.optional(),
  createdAt: z.string().optional(),
  customGitBranch: z.nullable(z.string()).optional(),
  customGitSSHKeyId: z.nullable(z.string()).optional(),
  customGitUrl: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  enableSubmodules: z.boolean().optional(),
  env: z.nullable(z.string()).optional(),
  environmentId: z.string().optional(),
  giteaBranch: z.nullable(z.string()).optional(),
  giteaId: z.nullable(z.string()).optional(),
  giteaOwner: z.nullable(z.string()).optional(),
  giteaRepository: z.nullable(z.string()).optional(),
  githubId: z.nullable(z.string()).optional(),
  gitlabBranch: z.nullable(z.string()).optional(),
  gitlabId: z.nullable(z.string()).optional(),
  gitlabOwner: z.nullable(z.string()).optional(),
  gitlabPathNamespace: z.nullable(z.string()).optional(),
  gitlabProjectId: z.nullable(z.number()).optional(),
  gitlabRepository: z.nullable(z.string()).optional(),
  isolatedDeployment: z.boolean().optional(),
  isolatedDeploymentsVolume: z.boolean().optional(),
  name: z.string().optional(),
  owner: z.nullable(z.string()).optional(),
  randomize: z.boolean().optional(),
  refreshToken: z.nullable(z.string()).optional(),
  repository: z.nullable(z.string()).optional(),
  sourceType: ComposeUpdateSourceType$inboundSchema.optional(),
  suffix: z.string().optional(),
  triggerType: z.nullable(ComposeUpdateTriggerType$inboundSchema).optional(),
  watchPaths: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type ComposeUpdateRequest$Outbound = {
  appName?: string | undefined;
  autoDeploy?: boolean | null | undefined;
  bitbucketBranch?: string | null | undefined;
  bitbucketId?: string | null | undefined;
  bitbucketOwner?: string | null | undefined;
  bitbucketRepository?: string | null | undefined;
  branch?: string | null | undefined;
  command?: string | undefined;
  composeFile?: string | undefined;
  composeId: string;
  composePath?: string | undefined;
  composeStatus?: string | undefined;
  composeType?: string | undefined;
  createdAt?: string | undefined;
  customGitBranch?: string | null | undefined;
  customGitSSHKeyId?: string | null | undefined;
  customGitUrl?: string | null | undefined;
  description?: string | null | undefined;
  enableSubmodules?: boolean | undefined;
  env?: string | null | undefined;
  environmentId?: string | undefined;
  giteaBranch?: string | null | undefined;
  giteaId?: string | null | undefined;
  giteaOwner?: string | null | undefined;
  giteaRepository?: string | null | undefined;
  githubId?: string | null | undefined;
  gitlabBranch?: string | null | undefined;
  gitlabId?: string | null | undefined;
  gitlabOwner?: string | null | undefined;
  gitlabPathNamespace?: string | null | undefined;
  gitlabProjectId?: number | null | undefined;
  gitlabRepository?: string | null | undefined;
  isolatedDeployment?: boolean | undefined;
  isolatedDeploymentsVolume?: boolean | undefined;
  name?: string | undefined;
  owner?: string | null | undefined;
  randomize?: boolean | undefined;
  refreshToken?: string | null | undefined;
  repository?: string | null | undefined;
  sourceType?: string | undefined;
  suffix?: string | undefined;
  triggerType?: string | null | undefined;
  watchPaths?: Array<string> | null | undefined;
};

/** @internal */
export const ComposeUpdateRequest$outboundSchema: z.ZodType<
  ComposeUpdateRequest$Outbound,
  z.ZodTypeDef,
  ComposeUpdateRequest
> = z.object({
  appName: z.string().optional(),
  autoDeploy: z.nullable(z.boolean()).optional(),
  bitbucketBranch: z.nullable(z.string()).optional(),
  bitbucketId: z.nullable(z.string()).optional(),
  bitbucketOwner: z.nullable(z.string()).optional(),
  bitbucketRepository: z.nullable(z.string()).optional(),
  branch: z.nullable(z.string()).optional(),
  command: z.string().optional(),
  composeFile: z.string().optional(),
  composeId: z.string(),
  composePath: z.string().optional(),
  composeStatus: ComposeUpdateComposeStatus$outboundSchema.optional(),
  composeType: ComposeUpdateComposeType$outboundSchema.optional(),
  createdAt: z.string().optional(),
  customGitBranch: z.nullable(z.string()).optional(),
  customGitSSHKeyId: z.nullable(z.string()).optional(),
  customGitUrl: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  enableSubmodules: z.boolean().optional(),
  env: z.nullable(z.string()).optional(),
  environmentId: z.string().optional(),
  giteaBranch: z.nullable(z.string()).optional(),
  giteaId: z.nullable(z.string()).optional(),
  giteaOwner: z.nullable(z.string()).optional(),
  giteaRepository: z.nullable(z.string()).optional(),
  githubId: z.nullable(z.string()).optional(),
  gitlabBranch: z.nullable(z.string()).optional(),
  gitlabId: z.nullable(z.string()).optional(),
  gitlabOwner: z.nullable(z.string()).optional(),
  gitlabPathNamespace: z.nullable(z.string()).optional(),
  gitlabProjectId: z.nullable(z.number()).optional(),
  gitlabRepository: z.nullable(z.string()).optional(),
  isolatedDeployment: z.boolean().optional(),
  isolatedDeploymentsVolume: z.boolean().optional(),
  name: z.string().optional(),
  owner: z.nullable(z.string()).optional(),
  randomize: z.boolean().optional(),
  refreshToken: z.nullable(z.string()).optional(),
  repository: z.nullable(z.string()).optional(),
  sourceType: ComposeUpdateSourceType$outboundSchema.optional(),
  suffix: z.string().optional(),
  triggerType: z.nullable(ComposeUpdateTriggerType$outboundSchema).optional(),
  watchPaths: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComposeUpdateRequest$ {
  /** @deprecated use `ComposeUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = ComposeUpdateRequest$inboundSchema;
  /** @deprecated use `ComposeUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = ComposeUpdateRequest$outboundSchema;
  /** @deprecated use `ComposeUpdateRequest$Outbound` instead. */
  export type Outbound = ComposeUpdateRequest$Outbound;
}

export function composeUpdateRequestToJSON(
  composeUpdateRequest: ComposeUpdateRequest,
): string {
  return JSON.stringify(
    ComposeUpdateRequest$outboundSchema.parse(composeUpdateRequest),
  );
}

export function composeUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<ComposeUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComposeUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComposeUpdateRequest' from JSON`,
  );
}
