/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PortDeleteSecurity = {
  authorization: string;
};

export type PortDeleteRequest = {
  portId: string;
};

export const PortDeleteProtocol = {
  Tcp: "tcp",
  Udp: "udp",
} as const;
export type PortDeleteProtocol = ClosedEnum<typeof PortDeleteProtocol>;

export const PortDeletePublishMode = {
  Ingress: "ingress",
  Host: "host",
} as const;
export type PortDeletePublishMode = ClosedEnum<typeof PortDeletePublishMode>;

/**
 * Successful response
 */
export type PortDeleteResponseBody = {
  applicationId: string;
  portId: string;
  protocol: PortDeleteProtocol;
  publishMode: PortDeletePublishMode;
  publishedPort: number;
  targetPort: number;
};

export type PortDeleteResponse = PortDeleteResponseBody | models.ErrorT;

/** @internal */
export const PortDeleteSecurity$inboundSchema: z.ZodType<
  PortDeleteSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type PortDeleteSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const PortDeleteSecurity$outboundSchema: z.ZodType<
  PortDeleteSecurity$Outbound,
  z.ZodTypeDef,
  PortDeleteSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortDeleteSecurity$ {
  /** @deprecated use `PortDeleteSecurity$inboundSchema` instead. */
  export const inboundSchema = PortDeleteSecurity$inboundSchema;
  /** @deprecated use `PortDeleteSecurity$outboundSchema` instead. */
  export const outboundSchema = PortDeleteSecurity$outboundSchema;
  /** @deprecated use `PortDeleteSecurity$Outbound` instead. */
  export type Outbound = PortDeleteSecurity$Outbound;
}

export function portDeleteSecurityToJSON(
  portDeleteSecurity: PortDeleteSecurity,
): string {
  return JSON.stringify(
    PortDeleteSecurity$outboundSchema.parse(portDeleteSecurity),
  );
}

export function portDeleteSecurityFromJSON(
  jsonString: string,
): SafeParseResult<PortDeleteSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PortDeleteSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PortDeleteSecurity' from JSON`,
  );
}

/** @internal */
export const PortDeleteRequest$inboundSchema: z.ZodType<
  PortDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  portId: z.string(),
});

/** @internal */
export type PortDeleteRequest$Outbound = {
  portId: string;
};

/** @internal */
export const PortDeleteRequest$outboundSchema: z.ZodType<
  PortDeleteRequest$Outbound,
  z.ZodTypeDef,
  PortDeleteRequest
> = z.object({
  portId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortDeleteRequest$ {
  /** @deprecated use `PortDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = PortDeleteRequest$inboundSchema;
  /** @deprecated use `PortDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = PortDeleteRequest$outboundSchema;
  /** @deprecated use `PortDeleteRequest$Outbound` instead. */
  export type Outbound = PortDeleteRequest$Outbound;
}

export function portDeleteRequestToJSON(
  portDeleteRequest: PortDeleteRequest,
): string {
  return JSON.stringify(
    PortDeleteRequest$outboundSchema.parse(portDeleteRequest),
  );
}

export function portDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<PortDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PortDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PortDeleteRequest' from JSON`,
  );
}

/** @internal */
export const PortDeleteProtocol$inboundSchema: z.ZodNativeEnum<
  typeof PortDeleteProtocol
> = z.nativeEnum(PortDeleteProtocol);

/** @internal */
export const PortDeleteProtocol$outboundSchema: z.ZodNativeEnum<
  typeof PortDeleteProtocol
> = PortDeleteProtocol$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortDeleteProtocol$ {
  /** @deprecated use `PortDeleteProtocol$inboundSchema` instead. */
  export const inboundSchema = PortDeleteProtocol$inboundSchema;
  /** @deprecated use `PortDeleteProtocol$outboundSchema` instead. */
  export const outboundSchema = PortDeleteProtocol$outboundSchema;
}

/** @internal */
export const PortDeletePublishMode$inboundSchema: z.ZodNativeEnum<
  typeof PortDeletePublishMode
> = z.nativeEnum(PortDeletePublishMode);

/** @internal */
export const PortDeletePublishMode$outboundSchema: z.ZodNativeEnum<
  typeof PortDeletePublishMode
> = PortDeletePublishMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortDeletePublishMode$ {
  /** @deprecated use `PortDeletePublishMode$inboundSchema` instead. */
  export const inboundSchema = PortDeletePublishMode$inboundSchema;
  /** @deprecated use `PortDeletePublishMode$outboundSchema` instead. */
  export const outboundSchema = PortDeletePublishMode$outboundSchema;
}

/** @internal */
export const PortDeleteResponseBody$inboundSchema: z.ZodType<
  PortDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string(),
  portId: z.string(),
  protocol: PortDeleteProtocol$inboundSchema,
  publishMode: PortDeletePublishMode$inboundSchema,
  publishedPort: z.number(),
  targetPort: z.number(),
});

/** @internal */
export type PortDeleteResponseBody$Outbound = {
  applicationId: string;
  portId: string;
  protocol: string;
  publishMode: string;
  publishedPort: number;
  targetPort: number;
};

/** @internal */
export const PortDeleteResponseBody$outboundSchema: z.ZodType<
  PortDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  PortDeleteResponseBody
> = z.object({
  applicationId: z.string(),
  portId: z.string(),
  protocol: PortDeleteProtocol$outboundSchema,
  publishMode: PortDeletePublishMode$outboundSchema,
  publishedPort: z.number(),
  targetPort: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortDeleteResponseBody$ {
  /** @deprecated use `PortDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema = PortDeleteResponseBody$inboundSchema;
  /** @deprecated use `PortDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema = PortDeleteResponseBody$outboundSchema;
  /** @deprecated use `PortDeleteResponseBody$Outbound` instead. */
  export type Outbound = PortDeleteResponseBody$Outbound;
}

export function portDeleteResponseBodyToJSON(
  portDeleteResponseBody: PortDeleteResponseBody,
): string {
  return JSON.stringify(
    PortDeleteResponseBody$outboundSchema.parse(portDeleteResponseBody),
  );
}

export function portDeleteResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PortDeleteResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PortDeleteResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PortDeleteResponseBody' from JSON`,
  );
}

/** @internal */
export const PortDeleteResponse$inboundSchema: z.ZodType<
  PortDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PortDeleteResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type PortDeleteResponse$Outbound =
  | PortDeleteResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const PortDeleteResponse$outboundSchema: z.ZodType<
  PortDeleteResponse$Outbound,
  z.ZodTypeDef,
  PortDeleteResponse
> = z.union([
  z.lazy(() => PortDeleteResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortDeleteResponse$ {
  /** @deprecated use `PortDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = PortDeleteResponse$inboundSchema;
  /** @deprecated use `PortDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = PortDeleteResponse$outboundSchema;
  /** @deprecated use `PortDeleteResponse$Outbound` instead. */
  export type Outbound = PortDeleteResponse$Outbound;
}

export function portDeleteResponseToJSON(
  portDeleteResponse: PortDeleteResponse,
): string {
  return JSON.stringify(
    PortDeleteResponse$outboundSchema.parse(portDeleteResponse),
  );
}

export function portDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<PortDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PortDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PortDeleteResponse' from JSON`,
  );
}
