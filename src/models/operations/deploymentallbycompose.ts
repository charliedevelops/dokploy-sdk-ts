/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type DeploymentAllByComposeSecurity = {
  authorization: string;
};

export type DeploymentAllByComposeRequest = {
  composeId: string;
};

export const DeploymentAllByComposeStatus = {
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type DeploymentAllByComposeStatus = ClosedEnum<
  typeof DeploymentAllByComposeStatus
>;

export type DeploymentAllByComposeResponseBody = {
  deploymentId: string;
  title: string;
  description: string | null;
  status: DeploymentAllByComposeStatus | null;
  logPath: string;
  pid: string | null;
  applicationId: string | null;
  composeId: string | null;
  serverId: string | null;
  isPreviewDeployment: boolean | null;
  previewDeploymentId: string | null;
  createdAt: string;
  startedAt: string | null;
  finishedAt: string | null;
  errorMessage: string | null;
  scheduleId: string | null;
  backupId: string | null;
  rollbackId: string | null;
  volumeBackupId: string | null;
};

export type DeploymentAllByComposeResponse =
  | models.ErrorT
  | Array<DeploymentAllByComposeResponseBody>;

/** @internal */
export const DeploymentAllByComposeSecurity$inboundSchema: z.ZodType<
  DeploymentAllByComposeSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type DeploymentAllByComposeSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const DeploymentAllByComposeSecurity$outboundSchema: z.ZodType<
  DeploymentAllByComposeSecurity$Outbound,
  z.ZodTypeDef,
  DeploymentAllByComposeSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentAllByComposeSecurity$ {
  /** @deprecated use `DeploymentAllByComposeSecurity$inboundSchema` instead. */
  export const inboundSchema = DeploymentAllByComposeSecurity$inboundSchema;
  /** @deprecated use `DeploymentAllByComposeSecurity$outboundSchema` instead. */
  export const outboundSchema = DeploymentAllByComposeSecurity$outboundSchema;
  /** @deprecated use `DeploymentAllByComposeSecurity$Outbound` instead. */
  export type Outbound = DeploymentAllByComposeSecurity$Outbound;
}

export function deploymentAllByComposeSecurityToJSON(
  deploymentAllByComposeSecurity: DeploymentAllByComposeSecurity,
): string {
  return JSON.stringify(
    DeploymentAllByComposeSecurity$outboundSchema.parse(
      deploymentAllByComposeSecurity,
    ),
  );
}

export function deploymentAllByComposeSecurityFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentAllByComposeSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentAllByComposeSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentAllByComposeSecurity' from JSON`,
  );
}

/** @internal */
export const DeploymentAllByComposeRequest$inboundSchema: z.ZodType<
  DeploymentAllByComposeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  composeId: z.string(),
});

/** @internal */
export type DeploymentAllByComposeRequest$Outbound = {
  composeId: string;
};

/** @internal */
export const DeploymentAllByComposeRequest$outboundSchema: z.ZodType<
  DeploymentAllByComposeRequest$Outbound,
  z.ZodTypeDef,
  DeploymentAllByComposeRequest
> = z.object({
  composeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentAllByComposeRequest$ {
  /** @deprecated use `DeploymentAllByComposeRequest$inboundSchema` instead. */
  export const inboundSchema = DeploymentAllByComposeRequest$inboundSchema;
  /** @deprecated use `DeploymentAllByComposeRequest$outboundSchema` instead. */
  export const outboundSchema = DeploymentAllByComposeRequest$outboundSchema;
  /** @deprecated use `DeploymentAllByComposeRequest$Outbound` instead. */
  export type Outbound = DeploymentAllByComposeRequest$Outbound;
}

export function deploymentAllByComposeRequestToJSON(
  deploymentAllByComposeRequest: DeploymentAllByComposeRequest,
): string {
  return JSON.stringify(
    DeploymentAllByComposeRequest$outboundSchema.parse(
      deploymentAllByComposeRequest,
    ),
  );
}

export function deploymentAllByComposeRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentAllByComposeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentAllByComposeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentAllByComposeRequest' from JSON`,
  );
}

/** @internal */
export const DeploymentAllByComposeStatus$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentAllByComposeStatus
> = z.nativeEnum(DeploymentAllByComposeStatus);

/** @internal */
export const DeploymentAllByComposeStatus$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentAllByComposeStatus
> = DeploymentAllByComposeStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentAllByComposeStatus$ {
  /** @deprecated use `DeploymentAllByComposeStatus$inboundSchema` instead. */
  export const inboundSchema = DeploymentAllByComposeStatus$inboundSchema;
  /** @deprecated use `DeploymentAllByComposeStatus$outboundSchema` instead. */
  export const outboundSchema = DeploymentAllByComposeStatus$outboundSchema;
}

/** @internal */
export const DeploymentAllByComposeResponseBody$inboundSchema: z.ZodType<
  DeploymentAllByComposeResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  deploymentId: z.string(),
  title: z.string(),
  description: z.nullable(z.string()),
  status: z.nullable(DeploymentAllByComposeStatus$inboundSchema),
  logPath: z.string(),
  pid: z.nullable(z.string()),
  applicationId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  serverId: z.nullable(z.string()),
  isPreviewDeployment: z.nullable(z.boolean()),
  previewDeploymentId: z.nullable(z.string()),
  createdAt: z.string(),
  startedAt: z.nullable(z.string()),
  finishedAt: z.nullable(z.string()),
  errorMessage: z.nullable(z.string()),
  scheduleId: z.nullable(z.string()),
  backupId: z.nullable(z.string()),
  rollbackId: z.nullable(z.string()),
  volumeBackupId: z.nullable(z.string()),
});

/** @internal */
export type DeploymentAllByComposeResponseBody$Outbound = {
  deploymentId: string;
  title: string;
  description: string | null;
  status: string | null;
  logPath: string;
  pid: string | null;
  applicationId: string | null;
  composeId: string | null;
  serverId: string | null;
  isPreviewDeployment: boolean | null;
  previewDeploymentId: string | null;
  createdAt: string;
  startedAt: string | null;
  finishedAt: string | null;
  errorMessage: string | null;
  scheduleId: string | null;
  backupId: string | null;
  rollbackId: string | null;
  volumeBackupId: string | null;
};

/** @internal */
export const DeploymentAllByComposeResponseBody$outboundSchema: z.ZodType<
  DeploymentAllByComposeResponseBody$Outbound,
  z.ZodTypeDef,
  DeploymentAllByComposeResponseBody
> = z.object({
  deploymentId: z.string(),
  title: z.string(),
  description: z.nullable(z.string()),
  status: z.nullable(DeploymentAllByComposeStatus$outboundSchema),
  logPath: z.string(),
  pid: z.nullable(z.string()),
  applicationId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  serverId: z.nullable(z.string()),
  isPreviewDeployment: z.nullable(z.boolean()),
  previewDeploymentId: z.nullable(z.string()),
  createdAt: z.string(),
  startedAt: z.nullable(z.string()),
  finishedAt: z.nullable(z.string()),
  errorMessage: z.nullable(z.string()),
  scheduleId: z.nullable(z.string()),
  backupId: z.nullable(z.string()),
  rollbackId: z.nullable(z.string()),
  volumeBackupId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentAllByComposeResponseBody$ {
  /** @deprecated use `DeploymentAllByComposeResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeploymentAllByComposeResponseBody$inboundSchema;
  /** @deprecated use `DeploymentAllByComposeResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    DeploymentAllByComposeResponseBody$outboundSchema;
  /** @deprecated use `DeploymentAllByComposeResponseBody$Outbound` instead. */
  export type Outbound = DeploymentAllByComposeResponseBody$Outbound;
}

export function deploymentAllByComposeResponseBodyToJSON(
  deploymentAllByComposeResponseBody: DeploymentAllByComposeResponseBody,
): string {
  return JSON.stringify(
    DeploymentAllByComposeResponseBody$outboundSchema.parse(
      deploymentAllByComposeResponseBody,
    ),
  );
}

export function deploymentAllByComposeResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentAllByComposeResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeploymentAllByComposeResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentAllByComposeResponseBody' from JSON`,
  );
}

/** @internal */
export const DeploymentAllByComposeResponse$inboundSchema: z.ZodType<
  DeploymentAllByComposeResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ErrorT$inboundSchema,
  z.array(z.lazy(() => DeploymentAllByComposeResponseBody$inboundSchema)),
]);

/** @internal */
export type DeploymentAllByComposeResponse$Outbound =
  | models.ErrorT$Outbound
  | Array<DeploymentAllByComposeResponseBody$Outbound>;

/** @internal */
export const DeploymentAllByComposeResponse$outboundSchema: z.ZodType<
  DeploymentAllByComposeResponse$Outbound,
  z.ZodTypeDef,
  DeploymentAllByComposeResponse
> = z.union([
  models.ErrorT$outboundSchema,
  z.array(z.lazy(() => DeploymentAllByComposeResponseBody$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentAllByComposeResponse$ {
  /** @deprecated use `DeploymentAllByComposeResponse$inboundSchema` instead. */
  export const inboundSchema = DeploymentAllByComposeResponse$inboundSchema;
  /** @deprecated use `DeploymentAllByComposeResponse$outboundSchema` instead. */
  export const outboundSchema = DeploymentAllByComposeResponse$outboundSchema;
  /** @deprecated use `DeploymentAllByComposeResponse$Outbound` instead. */
  export type Outbound = DeploymentAllByComposeResponse$Outbound;
}

export function deploymentAllByComposeResponseToJSON(
  deploymentAllByComposeResponse: DeploymentAllByComposeResponse,
): string {
  return JSON.stringify(
    DeploymentAllByComposeResponse$outboundSchema.parse(
      deploymentAllByComposeResponse,
    ),
  );
}

export function deploymentAllByComposeResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentAllByComposeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentAllByComposeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentAllByComposeResponse' from JSON`,
  );
}
