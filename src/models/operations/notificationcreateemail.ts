/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NotificationCreateEmailSecurity = {
  authorization: string;
};

export type NotificationCreateEmailRequest = {
  appBuildError: boolean;
  databaseBackup: boolean;
  dokployRestart: boolean;
  name: string;
  appDeploy: boolean;
  dockerCleanup: boolean;
  serverThreshold: boolean;
  smtpServer: string;
  smtpPort: number;
  username: string;
  password: string;
  fromAddress: string;
  toAddresses: Array<string>;
};

/** @internal */
export const NotificationCreateEmailSecurity$inboundSchema: z.ZodType<
  NotificationCreateEmailSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type NotificationCreateEmailSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const NotificationCreateEmailSecurity$outboundSchema: z.ZodType<
  NotificationCreateEmailSecurity$Outbound,
  z.ZodTypeDef,
  NotificationCreateEmailSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationCreateEmailSecurity$ {
  /** @deprecated use `NotificationCreateEmailSecurity$inboundSchema` instead. */
  export const inboundSchema = NotificationCreateEmailSecurity$inboundSchema;
  /** @deprecated use `NotificationCreateEmailSecurity$outboundSchema` instead. */
  export const outboundSchema = NotificationCreateEmailSecurity$outboundSchema;
  /** @deprecated use `NotificationCreateEmailSecurity$Outbound` instead. */
  export type Outbound = NotificationCreateEmailSecurity$Outbound;
}

export function notificationCreateEmailSecurityToJSON(
  notificationCreateEmailSecurity: NotificationCreateEmailSecurity,
): string {
  return JSON.stringify(
    NotificationCreateEmailSecurity$outboundSchema.parse(
      notificationCreateEmailSecurity,
    ),
  );
}

export function notificationCreateEmailSecurityFromJSON(
  jsonString: string,
): SafeParseResult<NotificationCreateEmailSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationCreateEmailSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationCreateEmailSecurity' from JSON`,
  );
}

/** @internal */
export const NotificationCreateEmailRequest$inboundSchema: z.ZodType<
  NotificationCreateEmailRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appBuildError: z.boolean(),
  databaseBackup: z.boolean(),
  dokployRestart: z.boolean(),
  name: z.string(),
  appDeploy: z.boolean(),
  dockerCleanup: z.boolean(),
  serverThreshold: z.boolean(),
  smtpServer: z.string(),
  smtpPort: z.number(),
  username: z.string(),
  password: z.string(),
  fromAddress: z.string(),
  toAddresses: z.array(z.string()),
});

/** @internal */
export type NotificationCreateEmailRequest$Outbound = {
  appBuildError: boolean;
  databaseBackup: boolean;
  dokployRestart: boolean;
  name: string;
  appDeploy: boolean;
  dockerCleanup: boolean;
  serverThreshold: boolean;
  smtpServer: string;
  smtpPort: number;
  username: string;
  password: string;
  fromAddress: string;
  toAddresses: Array<string>;
};

/** @internal */
export const NotificationCreateEmailRequest$outboundSchema: z.ZodType<
  NotificationCreateEmailRequest$Outbound,
  z.ZodTypeDef,
  NotificationCreateEmailRequest
> = z.object({
  appBuildError: z.boolean(),
  databaseBackup: z.boolean(),
  dokployRestart: z.boolean(),
  name: z.string(),
  appDeploy: z.boolean(),
  dockerCleanup: z.boolean(),
  serverThreshold: z.boolean(),
  smtpServer: z.string(),
  smtpPort: z.number(),
  username: z.string(),
  password: z.string(),
  fromAddress: z.string(),
  toAddresses: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationCreateEmailRequest$ {
  /** @deprecated use `NotificationCreateEmailRequest$inboundSchema` instead. */
  export const inboundSchema = NotificationCreateEmailRequest$inboundSchema;
  /** @deprecated use `NotificationCreateEmailRequest$outboundSchema` instead. */
  export const outboundSchema = NotificationCreateEmailRequest$outboundSchema;
  /** @deprecated use `NotificationCreateEmailRequest$Outbound` instead. */
  export type Outbound = NotificationCreateEmailRequest$Outbound;
}

export function notificationCreateEmailRequestToJSON(
  notificationCreateEmailRequest: NotificationCreateEmailRequest,
): string {
  return JSON.stringify(
    NotificationCreateEmailRequest$outboundSchema.parse(
      notificationCreateEmailRequest,
    ),
  );
}

export function notificationCreateEmailRequestFromJSON(
  jsonString: string,
): SafeParseResult<NotificationCreateEmailRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationCreateEmailRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationCreateEmailRequest' from JSON`,
  );
}
