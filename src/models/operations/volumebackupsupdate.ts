/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type VolumeBackupsUpdateSecurity = {
  authorization: string;
};

export const VolumeBackupsUpdateServiceType = {
  Application: "application",
  Postgres: "postgres",
  Mysql: "mysql",
  Mariadb: "mariadb",
  Mongo: "mongo",
  Redis: "redis",
  Compose: "compose",
} as const;
export type VolumeBackupsUpdateServiceType = ClosedEnum<
  typeof VolumeBackupsUpdateServiceType
>;

export type VolumeBackupsUpdateRequest = {
  appName?: string | undefined;
  applicationId?: string | null | undefined;
  composeId?: string | null | undefined;
  createdAt?: string | undefined;
  cronExpression: string;
  destinationId: string;
  enabled?: boolean | null | undefined;
  keepLatestCount?: number | null | undefined;
  mariadbId?: string | null | undefined;
  mongoId?: string | null | undefined;
  mysqlId?: string | null | undefined;
  name: string;
  postgresId?: string | null | undefined;
  prefix: string;
  redisId?: string | null | undefined;
  serviceName?: string | null | undefined;
  serviceType?: VolumeBackupsUpdateServiceType | undefined;
  turnOff?: boolean | undefined;
  volumeBackupId: string;
  volumeName: string;
};

/** @internal */
export const VolumeBackupsUpdateSecurity$inboundSchema: z.ZodType<
  VolumeBackupsUpdateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type VolumeBackupsUpdateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const VolumeBackupsUpdateSecurity$outboundSchema: z.ZodType<
  VolumeBackupsUpdateSecurity$Outbound,
  z.ZodTypeDef,
  VolumeBackupsUpdateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VolumeBackupsUpdateSecurity$ {
  /** @deprecated use `VolumeBackupsUpdateSecurity$inboundSchema` instead. */
  export const inboundSchema = VolumeBackupsUpdateSecurity$inboundSchema;
  /** @deprecated use `VolumeBackupsUpdateSecurity$outboundSchema` instead. */
  export const outboundSchema = VolumeBackupsUpdateSecurity$outboundSchema;
  /** @deprecated use `VolumeBackupsUpdateSecurity$Outbound` instead. */
  export type Outbound = VolumeBackupsUpdateSecurity$Outbound;
}

export function volumeBackupsUpdateSecurityToJSON(
  volumeBackupsUpdateSecurity: VolumeBackupsUpdateSecurity,
): string {
  return JSON.stringify(
    VolumeBackupsUpdateSecurity$outboundSchema.parse(
      volumeBackupsUpdateSecurity,
    ),
  );
}

export function volumeBackupsUpdateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<VolumeBackupsUpdateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VolumeBackupsUpdateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VolumeBackupsUpdateSecurity' from JSON`,
  );
}

/** @internal */
export const VolumeBackupsUpdateServiceType$inboundSchema: z.ZodNativeEnum<
  typeof VolumeBackupsUpdateServiceType
> = z.nativeEnum(VolumeBackupsUpdateServiceType);

/** @internal */
export const VolumeBackupsUpdateServiceType$outboundSchema: z.ZodNativeEnum<
  typeof VolumeBackupsUpdateServiceType
> = VolumeBackupsUpdateServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VolumeBackupsUpdateServiceType$ {
  /** @deprecated use `VolumeBackupsUpdateServiceType$inboundSchema` instead. */
  export const inboundSchema = VolumeBackupsUpdateServiceType$inboundSchema;
  /** @deprecated use `VolumeBackupsUpdateServiceType$outboundSchema` instead. */
  export const outboundSchema = VolumeBackupsUpdateServiceType$outboundSchema;
}

/** @internal */
export const VolumeBackupsUpdateRequest$inboundSchema: z.ZodType<
  VolumeBackupsUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string().optional(),
  applicationId: z.nullable(z.string()).optional(),
  composeId: z.nullable(z.string()).optional(),
  createdAt: z.string().optional(),
  cronExpression: z.string(),
  destinationId: z.string(),
  enabled: z.nullable(z.boolean()).optional(),
  keepLatestCount: z.nullable(z.number()).optional(),
  mariadbId: z.nullable(z.string()).optional(),
  mongoId: z.nullable(z.string()).optional(),
  mysqlId: z.nullable(z.string()).optional(),
  name: z.string(),
  postgresId: z.nullable(z.string()).optional(),
  prefix: z.string(),
  redisId: z.nullable(z.string()).optional(),
  serviceName: z.nullable(z.string()).optional(),
  serviceType: VolumeBackupsUpdateServiceType$inboundSchema.optional(),
  turnOff: z.boolean().optional(),
  volumeBackupId: z.string(),
  volumeName: z.string(),
});

/** @internal */
export type VolumeBackupsUpdateRequest$Outbound = {
  appName?: string | undefined;
  applicationId?: string | null | undefined;
  composeId?: string | null | undefined;
  createdAt?: string | undefined;
  cronExpression: string;
  destinationId: string;
  enabled?: boolean | null | undefined;
  keepLatestCount?: number | null | undefined;
  mariadbId?: string | null | undefined;
  mongoId?: string | null | undefined;
  mysqlId?: string | null | undefined;
  name: string;
  postgresId?: string | null | undefined;
  prefix: string;
  redisId?: string | null | undefined;
  serviceName?: string | null | undefined;
  serviceType?: string | undefined;
  turnOff?: boolean | undefined;
  volumeBackupId: string;
  volumeName: string;
};

/** @internal */
export const VolumeBackupsUpdateRequest$outboundSchema: z.ZodType<
  VolumeBackupsUpdateRequest$Outbound,
  z.ZodTypeDef,
  VolumeBackupsUpdateRequest
> = z.object({
  appName: z.string().optional(),
  applicationId: z.nullable(z.string()).optional(),
  composeId: z.nullable(z.string()).optional(),
  createdAt: z.string().optional(),
  cronExpression: z.string(),
  destinationId: z.string(),
  enabled: z.nullable(z.boolean()).optional(),
  keepLatestCount: z.nullable(z.number()).optional(),
  mariadbId: z.nullable(z.string()).optional(),
  mongoId: z.nullable(z.string()).optional(),
  mysqlId: z.nullable(z.string()).optional(),
  name: z.string(),
  postgresId: z.nullable(z.string()).optional(),
  prefix: z.string(),
  redisId: z.nullable(z.string()).optional(),
  serviceName: z.nullable(z.string()).optional(),
  serviceType: VolumeBackupsUpdateServiceType$outboundSchema.optional(),
  turnOff: z.boolean().optional(),
  volumeBackupId: z.string(),
  volumeName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VolumeBackupsUpdateRequest$ {
  /** @deprecated use `VolumeBackupsUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = VolumeBackupsUpdateRequest$inboundSchema;
  /** @deprecated use `VolumeBackupsUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = VolumeBackupsUpdateRequest$outboundSchema;
  /** @deprecated use `VolumeBackupsUpdateRequest$Outbound` instead. */
  export type Outbound = VolumeBackupsUpdateRequest$Outbound;
}

export function volumeBackupsUpdateRequestToJSON(
  volumeBackupsUpdateRequest: VolumeBackupsUpdateRequest,
): string {
  return JSON.stringify(
    VolumeBackupsUpdateRequest$outboundSchema.parse(volumeBackupsUpdateRequest),
  );
}

export function volumeBackupsUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<VolumeBackupsUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VolumeBackupsUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VolumeBackupsUpdateRequest' from JSON`,
  );
}
