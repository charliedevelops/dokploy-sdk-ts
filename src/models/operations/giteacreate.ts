/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GiteaCreateSecurity = {
  authorization: string;
};

export type GiteaCreateRequest = {
  accessToken?: string | undefined;
  clientId?: string | undefined;
  clientSecret?: string | undefined;
  expiresAt?: number | undefined;
  gitProviderId?: string | undefined;
  giteaId?: string | undefined;
  giteaUrl: string;
  giteaUsername?: string | undefined;
  lastAuthenticatedAt?: number | undefined;
  name: string;
  organizationName?: string | undefined;
  redirectUri?: string | undefined;
  refreshToken?: string | undefined;
  scopes?: string | undefined;
};

/**
 * Successful response
 */
export type GiteaCreateResponseBody = {
  clientId: string;
  giteaId: string;
  giteaUrl: string;
};

export type GiteaCreateResponse = GiteaCreateResponseBody | models.ErrorT;

/** @internal */
export const GiteaCreateSecurity$inboundSchema: z.ZodType<
  GiteaCreateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type GiteaCreateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const GiteaCreateSecurity$outboundSchema: z.ZodType<
  GiteaCreateSecurity$Outbound,
  z.ZodTypeDef,
  GiteaCreateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiteaCreateSecurity$ {
  /** @deprecated use `GiteaCreateSecurity$inboundSchema` instead. */
  export const inboundSchema = GiteaCreateSecurity$inboundSchema;
  /** @deprecated use `GiteaCreateSecurity$outboundSchema` instead. */
  export const outboundSchema = GiteaCreateSecurity$outboundSchema;
  /** @deprecated use `GiteaCreateSecurity$Outbound` instead. */
  export type Outbound = GiteaCreateSecurity$Outbound;
}

export function giteaCreateSecurityToJSON(
  giteaCreateSecurity: GiteaCreateSecurity,
): string {
  return JSON.stringify(
    GiteaCreateSecurity$outboundSchema.parse(giteaCreateSecurity),
  );
}

export function giteaCreateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GiteaCreateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiteaCreateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiteaCreateSecurity' from JSON`,
  );
}

/** @internal */
export const GiteaCreateRequest$inboundSchema: z.ZodType<
  GiteaCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.string().optional(),
  clientId: z.string().optional(),
  clientSecret: z.string().optional(),
  expiresAt: z.number().optional(),
  gitProviderId: z.string().optional(),
  giteaId: z.string().optional(),
  giteaUrl: z.string(),
  giteaUsername: z.string().optional(),
  lastAuthenticatedAt: z.number().optional(),
  name: z.string(),
  organizationName: z.string().optional(),
  redirectUri: z.string().optional(),
  refreshToken: z.string().optional(),
  scopes: z.string().optional(),
});

/** @internal */
export type GiteaCreateRequest$Outbound = {
  accessToken?: string | undefined;
  clientId?: string | undefined;
  clientSecret?: string | undefined;
  expiresAt?: number | undefined;
  gitProviderId?: string | undefined;
  giteaId?: string | undefined;
  giteaUrl: string;
  giteaUsername?: string | undefined;
  lastAuthenticatedAt?: number | undefined;
  name: string;
  organizationName?: string | undefined;
  redirectUri?: string | undefined;
  refreshToken?: string | undefined;
  scopes?: string | undefined;
};

/** @internal */
export const GiteaCreateRequest$outboundSchema: z.ZodType<
  GiteaCreateRequest$Outbound,
  z.ZodTypeDef,
  GiteaCreateRequest
> = z.object({
  accessToken: z.string().optional(),
  clientId: z.string().optional(),
  clientSecret: z.string().optional(),
  expiresAt: z.number().optional(),
  gitProviderId: z.string().optional(),
  giteaId: z.string().optional(),
  giteaUrl: z.string(),
  giteaUsername: z.string().optional(),
  lastAuthenticatedAt: z.number().optional(),
  name: z.string(),
  organizationName: z.string().optional(),
  redirectUri: z.string().optional(),
  refreshToken: z.string().optional(),
  scopes: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiteaCreateRequest$ {
  /** @deprecated use `GiteaCreateRequest$inboundSchema` instead. */
  export const inboundSchema = GiteaCreateRequest$inboundSchema;
  /** @deprecated use `GiteaCreateRequest$outboundSchema` instead. */
  export const outboundSchema = GiteaCreateRequest$outboundSchema;
  /** @deprecated use `GiteaCreateRequest$Outbound` instead. */
  export type Outbound = GiteaCreateRequest$Outbound;
}

export function giteaCreateRequestToJSON(
  giteaCreateRequest: GiteaCreateRequest,
): string {
  return JSON.stringify(
    GiteaCreateRequest$outboundSchema.parse(giteaCreateRequest),
  );
}

export function giteaCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<GiteaCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiteaCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiteaCreateRequest' from JSON`,
  );
}

/** @internal */
export const GiteaCreateResponseBody$inboundSchema: z.ZodType<
  GiteaCreateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientId: z.string(),
  giteaId: z.string(),
  giteaUrl: z.string(),
});

/** @internal */
export type GiteaCreateResponseBody$Outbound = {
  clientId: string;
  giteaId: string;
  giteaUrl: string;
};

/** @internal */
export const GiteaCreateResponseBody$outboundSchema: z.ZodType<
  GiteaCreateResponseBody$Outbound,
  z.ZodTypeDef,
  GiteaCreateResponseBody
> = z.object({
  clientId: z.string(),
  giteaId: z.string(),
  giteaUrl: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiteaCreateResponseBody$ {
  /** @deprecated use `GiteaCreateResponseBody$inboundSchema` instead. */
  export const inboundSchema = GiteaCreateResponseBody$inboundSchema;
  /** @deprecated use `GiteaCreateResponseBody$outboundSchema` instead. */
  export const outboundSchema = GiteaCreateResponseBody$outboundSchema;
  /** @deprecated use `GiteaCreateResponseBody$Outbound` instead. */
  export type Outbound = GiteaCreateResponseBody$Outbound;
}

export function giteaCreateResponseBodyToJSON(
  giteaCreateResponseBody: GiteaCreateResponseBody,
): string {
  return JSON.stringify(
    GiteaCreateResponseBody$outboundSchema.parse(giteaCreateResponseBody),
  );
}

export function giteaCreateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GiteaCreateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiteaCreateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiteaCreateResponseBody' from JSON`,
  );
}

/** @internal */
export const GiteaCreateResponse$inboundSchema: z.ZodType<
  GiteaCreateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GiteaCreateResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type GiteaCreateResponse$Outbound =
  | GiteaCreateResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const GiteaCreateResponse$outboundSchema: z.ZodType<
  GiteaCreateResponse$Outbound,
  z.ZodTypeDef,
  GiteaCreateResponse
> = z.union([
  z.lazy(() => GiteaCreateResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiteaCreateResponse$ {
  /** @deprecated use `GiteaCreateResponse$inboundSchema` instead. */
  export const inboundSchema = GiteaCreateResponse$inboundSchema;
  /** @deprecated use `GiteaCreateResponse$outboundSchema` instead. */
  export const outboundSchema = GiteaCreateResponse$outboundSchema;
  /** @deprecated use `GiteaCreateResponse$Outbound` instead. */
  export type Outbound = GiteaCreateResponse$Outbound;
}

export function giteaCreateResponseToJSON(
  giteaCreateResponse: GiteaCreateResponse,
): string {
  return JSON.stringify(
    GiteaCreateResponse$outboundSchema.parse(giteaCreateResponse),
  );
}

export function giteaCreateResponseFromJSON(
  jsonString: string,
): SafeParseResult<GiteaCreateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiteaCreateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiteaCreateResponse' from JSON`,
  );
}
