/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ClusterGetNodesSecurity = {
  authorization: string;
};

export type ClusterGetNodesRequest = {
  serverId?: string | undefined;
};

/** @internal */
export const ClusterGetNodesSecurity$inboundSchema: z.ZodType<
  ClusterGetNodesSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type ClusterGetNodesSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const ClusterGetNodesSecurity$outboundSchema: z.ZodType<
  ClusterGetNodesSecurity$Outbound,
  z.ZodTypeDef,
  ClusterGetNodesSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClusterGetNodesSecurity$ {
  /** @deprecated use `ClusterGetNodesSecurity$inboundSchema` instead. */
  export const inboundSchema = ClusterGetNodesSecurity$inboundSchema;
  /** @deprecated use `ClusterGetNodesSecurity$outboundSchema` instead. */
  export const outboundSchema = ClusterGetNodesSecurity$outboundSchema;
  /** @deprecated use `ClusterGetNodesSecurity$Outbound` instead. */
  export type Outbound = ClusterGetNodesSecurity$Outbound;
}

export function clusterGetNodesSecurityToJSON(
  clusterGetNodesSecurity: ClusterGetNodesSecurity,
): string {
  return JSON.stringify(
    ClusterGetNodesSecurity$outboundSchema.parse(clusterGetNodesSecurity),
  );
}

export function clusterGetNodesSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ClusterGetNodesSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClusterGetNodesSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClusterGetNodesSecurity' from JSON`,
  );
}

/** @internal */
export const ClusterGetNodesRequest$inboundSchema: z.ZodType<
  ClusterGetNodesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serverId: z.string().optional(),
});

/** @internal */
export type ClusterGetNodesRequest$Outbound = {
  serverId?: string | undefined;
};

/** @internal */
export const ClusterGetNodesRequest$outboundSchema: z.ZodType<
  ClusterGetNodesRequest$Outbound,
  z.ZodTypeDef,
  ClusterGetNodesRequest
> = z.object({
  serverId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClusterGetNodesRequest$ {
  /** @deprecated use `ClusterGetNodesRequest$inboundSchema` instead. */
  export const inboundSchema = ClusterGetNodesRequest$inboundSchema;
  /** @deprecated use `ClusterGetNodesRequest$outboundSchema` instead. */
  export const outboundSchema = ClusterGetNodesRequest$outboundSchema;
  /** @deprecated use `ClusterGetNodesRequest$Outbound` instead. */
  export type Outbound = ClusterGetNodesRequest$Outbound;
}

export function clusterGetNodesRequestToJSON(
  clusterGetNodesRequest: ClusterGetNodesRequest,
): string {
  return JSON.stringify(
    ClusterGetNodesRequest$outboundSchema.parse(clusterGetNodesRequest),
  );
}

export function clusterGetNodesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClusterGetNodesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClusterGetNodesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClusterGetNodesRequest' from JSON`,
  );
}
