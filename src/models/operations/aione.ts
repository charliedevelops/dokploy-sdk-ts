/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AiOneRequest = {
  aiId: string;
};

/** @internal */
export const AiOneRequest$inboundSchema: z.ZodType<
  AiOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  aiId: z.string(),
});

/** @internal */
export type AiOneRequest$Outbound = {
  aiId: string;
};

/** @internal */
export const AiOneRequest$outboundSchema: z.ZodType<
  AiOneRequest$Outbound,
  z.ZodTypeDef,
  AiOneRequest
> = z.object({
  aiId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AiOneRequest$ {
  /** @deprecated use `AiOneRequest$inboundSchema` instead. */
  export const inboundSchema = AiOneRequest$inboundSchema;
  /** @deprecated use `AiOneRequest$outboundSchema` instead. */
  export const outboundSchema = AiOneRequest$outboundSchema;
  /** @deprecated use `AiOneRequest$Outbound` instead. */
  export type Outbound = AiOneRequest$Outbound;
}

export function aiOneRequestToJSON(aiOneRequest: AiOneRequest): string {
  return JSON.stringify(AiOneRequest$outboundSchema.parse(aiOneRequest));
}

export function aiOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<AiOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AiOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AiOneRequest' from JSON`,
  );
}
