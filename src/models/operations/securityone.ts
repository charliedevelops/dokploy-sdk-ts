/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type SecurityOneRequest = {
  securityId: string;
};

/**
 * Successful response
 */
export type SecurityOneResponseBody = {
  applicationId: string;
  createdAt: string;
  password: string;
  securityId: string;
  username: string;
};

export type SecurityOneResponse = SecurityOneResponseBody | models.ErrorT;

/** @internal */
export const SecurityOneRequest$inboundSchema: z.ZodType<
  SecurityOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  securityId: z.string(),
});

/** @internal */
export type SecurityOneRequest$Outbound = {
  securityId: string;
};

/** @internal */
export const SecurityOneRequest$outboundSchema: z.ZodType<
  SecurityOneRequest$Outbound,
  z.ZodTypeDef,
  SecurityOneRequest
> = z.object({
  securityId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SecurityOneRequest$ {
  /** @deprecated use `SecurityOneRequest$inboundSchema` instead. */
  export const inboundSchema = SecurityOneRequest$inboundSchema;
  /** @deprecated use `SecurityOneRequest$outboundSchema` instead. */
  export const outboundSchema = SecurityOneRequest$outboundSchema;
  /** @deprecated use `SecurityOneRequest$Outbound` instead. */
  export type Outbound = SecurityOneRequest$Outbound;
}

export function securityOneRequestToJSON(
  securityOneRequest: SecurityOneRequest,
): string {
  return JSON.stringify(
    SecurityOneRequest$outboundSchema.parse(securityOneRequest),
  );
}

export function securityOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<SecurityOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SecurityOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SecurityOneRequest' from JSON`,
  );
}

/** @internal */
export const SecurityOneResponseBody$inboundSchema: z.ZodType<
  SecurityOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string(),
  createdAt: z.string(),
  password: z.string(),
  securityId: z.string(),
  username: z.string(),
});

/** @internal */
export type SecurityOneResponseBody$Outbound = {
  applicationId: string;
  createdAt: string;
  password: string;
  securityId: string;
  username: string;
};

/** @internal */
export const SecurityOneResponseBody$outboundSchema: z.ZodType<
  SecurityOneResponseBody$Outbound,
  z.ZodTypeDef,
  SecurityOneResponseBody
> = z.object({
  applicationId: z.string(),
  createdAt: z.string(),
  password: z.string(),
  securityId: z.string(),
  username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SecurityOneResponseBody$ {
  /** @deprecated use `SecurityOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = SecurityOneResponseBody$inboundSchema;
  /** @deprecated use `SecurityOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = SecurityOneResponseBody$outboundSchema;
  /** @deprecated use `SecurityOneResponseBody$Outbound` instead. */
  export type Outbound = SecurityOneResponseBody$Outbound;
}

export function securityOneResponseBodyToJSON(
  securityOneResponseBody: SecurityOneResponseBody,
): string {
  return JSON.stringify(
    SecurityOneResponseBody$outboundSchema.parse(securityOneResponseBody),
  );
}

export function securityOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<SecurityOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SecurityOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SecurityOneResponseBody' from JSON`,
  );
}

/** @internal */
export const SecurityOneResponse$inboundSchema: z.ZodType<
  SecurityOneResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => SecurityOneResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type SecurityOneResponse$Outbound =
  | SecurityOneResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const SecurityOneResponse$outboundSchema: z.ZodType<
  SecurityOneResponse$Outbound,
  z.ZodTypeDef,
  SecurityOneResponse
> = z.union([
  z.lazy(() => SecurityOneResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SecurityOneResponse$ {
  /** @deprecated use `SecurityOneResponse$inboundSchema` instead. */
  export const inboundSchema = SecurityOneResponse$inboundSchema;
  /** @deprecated use `SecurityOneResponse$outboundSchema` instead. */
  export const outboundSchema = SecurityOneResponse$outboundSchema;
  /** @deprecated use `SecurityOneResponse$Outbound` instead. */
  export type Outbound = SecurityOneResponse$Outbound;
}

export function securityOneResponseToJSON(
  securityOneResponse: SecurityOneResponse,
): string {
  return JSON.stringify(
    SecurityOneResponse$outboundSchema.parse(securityOneResponse),
  );
}

export function securityOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<SecurityOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SecurityOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SecurityOneResponse' from JSON`,
  );
}
