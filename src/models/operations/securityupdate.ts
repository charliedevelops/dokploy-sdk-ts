/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type SecurityUpdateSecurity = {
  authorization: string;
};

export type SecurityUpdateRequest = {
  password: string;
  securityId: string;
  username: string;
};

/**
 * Successful response
 */
export type SecurityUpdateResponseBody = {
  applicationId: string;
  createdAt: string;
  password: string;
  securityId: string;
  username: string;
};

export type SecurityUpdateResponse = SecurityUpdateResponseBody | models.ErrorT;

/** @internal */
export const SecurityUpdateSecurity$inboundSchema: z.ZodType<
  SecurityUpdateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type SecurityUpdateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const SecurityUpdateSecurity$outboundSchema: z.ZodType<
  SecurityUpdateSecurity$Outbound,
  z.ZodTypeDef,
  SecurityUpdateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SecurityUpdateSecurity$ {
  /** @deprecated use `SecurityUpdateSecurity$inboundSchema` instead. */
  export const inboundSchema = SecurityUpdateSecurity$inboundSchema;
  /** @deprecated use `SecurityUpdateSecurity$outboundSchema` instead. */
  export const outboundSchema = SecurityUpdateSecurity$outboundSchema;
  /** @deprecated use `SecurityUpdateSecurity$Outbound` instead. */
  export type Outbound = SecurityUpdateSecurity$Outbound;
}

export function securityUpdateSecurityToJSON(
  securityUpdateSecurity: SecurityUpdateSecurity,
): string {
  return JSON.stringify(
    SecurityUpdateSecurity$outboundSchema.parse(securityUpdateSecurity),
  );
}

export function securityUpdateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<SecurityUpdateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SecurityUpdateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SecurityUpdateSecurity' from JSON`,
  );
}

/** @internal */
export const SecurityUpdateRequest$inboundSchema: z.ZodType<
  SecurityUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  password: z.string(),
  securityId: z.string(),
  username: z.string(),
});

/** @internal */
export type SecurityUpdateRequest$Outbound = {
  password: string;
  securityId: string;
  username: string;
};

/** @internal */
export const SecurityUpdateRequest$outboundSchema: z.ZodType<
  SecurityUpdateRequest$Outbound,
  z.ZodTypeDef,
  SecurityUpdateRequest
> = z.object({
  password: z.string(),
  securityId: z.string(),
  username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SecurityUpdateRequest$ {
  /** @deprecated use `SecurityUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = SecurityUpdateRequest$inboundSchema;
  /** @deprecated use `SecurityUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = SecurityUpdateRequest$outboundSchema;
  /** @deprecated use `SecurityUpdateRequest$Outbound` instead. */
  export type Outbound = SecurityUpdateRequest$Outbound;
}

export function securityUpdateRequestToJSON(
  securityUpdateRequest: SecurityUpdateRequest,
): string {
  return JSON.stringify(
    SecurityUpdateRequest$outboundSchema.parse(securityUpdateRequest),
  );
}

export function securityUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<SecurityUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SecurityUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SecurityUpdateRequest' from JSON`,
  );
}

/** @internal */
export const SecurityUpdateResponseBody$inboundSchema: z.ZodType<
  SecurityUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string(),
  createdAt: z.string(),
  password: z.string(),
  securityId: z.string(),
  username: z.string(),
});

/** @internal */
export type SecurityUpdateResponseBody$Outbound = {
  applicationId: string;
  createdAt: string;
  password: string;
  securityId: string;
  username: string;
};

/** @internal */
export const SecurityUpdateResponseBody$outboundSchema: z.ZodType<
  SecurityUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  SecurityUpdateResponseBody
> = z.object({
  applicationId: z.string(),
  createdAt: z.string(),
  password: z.string(),
  securityId: z.string(),
  username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SecurityUpdateResponseBody$ {
  /** @deprecated use `SecurityUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = SecurityUpdateResponseBody$inboundSchema;
  /** @deprecated use `SecurityUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = SecurityUpdateResponseBody$outboundSchema;
  /** @deprecated use `SecurityUpdateResponseBody$Outbound` instead. */
  export type Outbound = SecurityUpdateResponseBody$Outbound;
}

export function securityUpdateResponseBodyToJSON(
  securityUpdateResponseBody: SecurityUpdateResponseBody,
): string {
  return JSON.stringify(
    SecurityUpdateResponseBody$outboundSchema.parse(securityUpdateResponseBody),
  );
}

export function securityUpdateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<SecurityUpdateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SecurityUpdateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SecurityUpdateResponseBody' from JSON`,
  );
}

/** @internal */
export const SecurityUpdateResponse$inboundSchema: z.ZodType<
  SecurityUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => SecurityUpdateResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type SecurityUpdateResponse$Outbound =
  | SecurityUpdateResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const SecurityUpdateResponse$outboundSchema: z.ZodType<
  SecurityUpdateResponse$Outbound,
  z.ZodTypeDef,
  SecurityUpdateResponse
> = z.union([
  z.lazy(() => SecurityUpdateResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SecurityUpdateResponse$ {
  /** @deprecated use `SecurityUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = SecurityUpdateResponse$inboundSchema;
  /** @deprecated use `SecurityUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = SecurityUpdateResponse$outboundSchema;
  /** @deprecated use `SecurityUpdateResponse$Outbound` instead. */
  export type Outbound = SecurityUpdateResponse$Outbound;
}

export function securityUpdateResponseToJSON(
  securityUpdateResponse: SecurityUpdateResponse,
): string {
  return JSON.stringify(
    SecurityUpdateResponse$outboundSchema.parse(securityUpdateResponse),
  );
}

export function securityUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<SecurityUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SecurityUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SecurityUpdateResponse' from JSON`,
  );
}
