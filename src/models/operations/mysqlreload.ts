/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type MysqlReloadSecurity = {
  authorization: string;
};

export type MysqlReloadRequest = {
  appName: string;
  mysqlId: string;
};

export type MysqlReloadResponse = models.ErrorT | boolean;

/** @internal */
export const MysqlReloadSecurity$inboundSchema: z.ZodType<
  MysqlReloadSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type MysqlReloadSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const MysqlReloadSecurity$outboundSchema: z.ZodType<
  MysqlReloadSecurity$Outbound,
  z.ZodTypeDef,
  MysqlReloadSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlReloadSecurity$ {
  /** @deprecated use `MysqlReloadSecurity$inboundSchema` instead. */
  export const inboundSchema = MysqlReloadSecurity$inboundSchema;
  /** @deprecated use `MysqlReloadSecurity$outboundSchema` instead. */
  export const outboundSchema = MysqlReloadSecurity$outboundSchema;
  /** @deprecated use `MysqlReloadSecurity$Outbound` instead. */
  export type Outbound = MysqlReloadSecurity$Outbound;
}

export function mysqlReloadSecurityToJSON(
  mysqlReloadSecurity: MysqlReloadSecurity,
): string {
  return JSON.stringify(
    MysqlReloadSecurity$outboundSchema.parse(mysqlReloadSecurity),
  );
}

export function mysqlReloadSecurityFromJSON(
  jsonString: string,
): SafeParseResult<MysqlReloadSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlReloadSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlReloadSecurity' from JSON`,
  );
}

/** @internal */
export const MysqlReloadRequest$inboundSchema: z.ZodType<
  MysqlReloadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  mysqlId: z.string(),
});

/** @internal */
export type MysqlReloadRequest$Outbound = {
  appName: string;
  mysqlId: string;
};

/** @internal */
export const MysqlReloadRequest$outboundSchema: z.ZodType<
  MysqlReloadRequest$Outbound,
  z.ZodTypeDef,
  MysqlReloadRequest
> = z.object({
  appName: z.string(),
  mysqlId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlReloadRequest$ {
  /** @deprecated use `MysqlReloadRequest$inboundSchema` instead. */
  export const inboundSchema = MysqlReloadRequest$inboundSchema;
  /** @deprecated use `MysqlReloadRequest$outboundSchema` instead. */
  export const outboundSchema = MysqlReloadRequest$outboundSchema;
  /** @deprecated use `MysqlReloadRequest$Outbound` instead. */
  export type Outbound = MysqlReloadRequest$Outbound;
}

export function mysqlReloadRequestToJSON(
  mysqlReloadRequest: MysqlReloadRequest,
): string {
  return JSON.stringify(
    MysqlReloadRequest$outboundSchema.parse(mysqlReloadRequest),
  );
}

export function mysqlReloadRequestFromJSON(
  jsonString: string,
): SafeParseResult<MysqlReloadRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlReloadRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlReloadRequest' from JSON`,
  );
}

/** @internal */
export const MysqlReloadResponse$inboundSchema: z.ZodType<
  MysqlReloadResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.boolean()]);

/** @internal */
export type MysqlReloadResponse$Outbound = models.ErrorT$Outbound | boolean;

/** @internal */
export const MysqlReloadResponse$outboundSchema: z.ZodType<
  MysqlReloadResponse$Outbound,
  z.ZodTypeDef,
  MysqlReloadResponse
> = z.union([models.ErrorT$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlReloadResponse$ {
  /** @deprecated use `MysqlReloadResponse$inboundSchema` instead. */
  export const inboundSchema = MysqlReloadResponse$inboundSchema;
  /** @deprecated use `MysqlReloadResponse$outboundSchema` instead. */
  export const outboundSchema = MysqlReloadResponse$outboundSchema;
  /** @deprecated use `MysqlReloadResponse$Outbound` instead. */
  export type Outbound = MysqlReloadResponse$Outbound;
}

export function mysqlReloadResponseToJSON(
  mysqlReloadResponse: MysqlReloadResponse,
): string {
  return JSON.stringify(
    MysqlReloadResponse$outboundSchema.parse(mysqlReloadResponse),
  );
}

export function mysqlReloadResponseFromJSON(
  jsonString: string,
): SafeParseResult<MysqlReloadResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlReloadResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlReloadResponse' from JSON`,
  );
}
