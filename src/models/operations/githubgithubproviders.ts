/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GithubGithubProvidersSecurity = {
  authorization: string;
};

export const GithubGithubProvidersProviderType = {
  Github: "github",
  Gitlab: "gitlab",
  Bitbucket: "bitbucket",
  Gitea: "gitea",
} as const;
export type GithubGithubProvidersProviderType = ClosedEnum<
  typeof GithubGithubProvidersProviderType
>;

export type GithubGithubProvidersGitProvider = {
  gitProviderId: string;
  name: string;
  providerType: GithubGithubProvidersProviderType;
  createdAt: string;
  organizationId: string;
  userId: string;
};

export type GithubGithubProvidersResponseBody = {
  githubId: string;
  gitProvider: GithubGithubProvidersGitProvider;
};

export type GithubGithubProvidersResponse =
  | models.ErrorT
  | Array<GithubGithubProvidersResponseBody>;

/** @internal */
export const GithubGithubProvidersSecurity$inboundSchema: z.ZodType<
  GithubGithubProvidersSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type GithubGithubProvidersSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const GithubGithubProvidersSecurity$outboundSchema: z.ZodType<
  GithubGithubProvidersSecurity$Outbound,
  z.ZodTypeDef,
  GithubGithubProvidersSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GithubGithubProvidersSecurity$ {
  /** @deprecated use `GithubGithubProvidersSecurity$inboundSchema` instead. */
  export const inboundSchema = GithubGithubProvidersSecurity$inboundSchema;
  /** @deprecated use `GithubGithubProvidersSecurity$outboundSchema` instead. */
  export const outboundSchema = GithubGithubProvidersSecurity$outboundSchema;
  /** @deprecated use `GithubGithubProvidersSecurity$Outbound` instead. */
  export type Outbound = GithubGithubProvidersSecurity$Outbound;
}

export function githubGithubProvidersSecurityToJSON(
  githubGithubProvidersSecurity: GithubGithubProvidersSecurity,
): string {
  return JSON.stringify(
    GithubGithubProvidersSecurity$outboundSchema.parse(
      githubGithubProvidersSecurity,
    ),
  );
}

export function githubGithubProvidersSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GithubGithubProvidersSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GithubGithubProvidersSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GithubGithubProvidersSecurity' from JSON`,
  );
}

/** @internal */
export const GithubGithubProvidersProviderType$inboundSchema: z.ZodNativeEnum<
  typeof GithubGithubProvidersProviderType
> = z.nativeEnum(GithubGithubProvidersProviderType);

/** @internal */
export const GithubGithubProvidersProviderType$outboundSchema: z.ZodNativeEnum<
  typeof GithubGithubProvidersProviderType
> = GithubGithubProvidersProviderType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GithubGithubProvidersProviderType$ {
  /** @deprecated use `GithubGithubProvidersProviderType$inboundSchema` instead. */
  export const inboundSchema = GithubGithubProvidersProviderType$inboundSchema;
  /** @deprecated use `GithubGithubProvidersProviderType$outboundSchema` instead. */
  export const outboundSchema =
    GithubGithubProvidersProviderType$outboundSchema;
}

/** @internal */
export const GithubGithubProvidersGitProvider$inboundSchema: z.ZodType<
  GithubGithubProvidersGitProvider,
  z.ZodTypeDef,
  unknown
> = z.object({
  gitProviderId: z.string(),
  name: z.string(),
  providerType: GithubGithubProvidersProviderType$inboundSchema,
  createdAt: z.string(),
  organizationId: z.string(),
  userId: z.string(),
});

/** @internal */
export type GithubGithubProvidersGitProvider$Outbound = {
  gitProviderId: string;
  name: string;
  providerType: string;
  createdAt: string;
  organizationId: string;
  userId: string;
};

/** @internal */
export const GithubGithubProvidersGitProvider$outboundSchema: z.ZodType<
  GithubGithubProvidersGitProvider$Outbound,
  z.ZodTypeDef,
  GithubGithubProvidersGitProvider
> = z.object({
  gitProviderId: z.string(),
  name: z.string(),
  providerType: GithubGithubProvidersProviderType$outboundSchema,
  createdAt: z.string(),
  organizationId: z.string(),
  userId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GithubGithubProvidersGitProvider$ {
  /** @deprecated use `GithubGithubProvidersGitProvider$inboundSchema` instead. */
  export const inboundSchema = GithubGithubProvidersGitProvider$inboundSchema;
  /** @deprecated use `GithubGithubProvidersGitProvider$outboundSchema` instead. */
  export const outboundSchema = GithubGithubProvidersGitProvider$outboundSchema;
  /** @deprecated use `GithubGithubProvidersGitProvider$Outbound` instead. */
  export type Outbound = GithubGithubProvidersGitProvider$Outbound;
}

export function githubGithubProvidersGitProviderToJSON(
  githubGithubProvidersGitProvider: GithubGithubProvidersGitProvider,
): string {
  return JSON.stringify(
    GithubGithubProvidersGitProvider$outboundSchema.parse(
      githubGithubProvidersGitProvider,
    ),
  );
}

export function githubGithubProvidersGitProviderFromJSON(
  jsonString: string,
): SafeParseResult<GithubGithubProvidersGitProvider, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GithubGithubProvidersGitProvider$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GithubGithubProvidersGitProvider' from JSON`,
  );
}

/** @internal */
export const GithubGithubProvidersResponseBody$inboundSchema: z.ZodType<
  GithubGithubProvidersResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  githubId: z.string(),
  gitProvider: z.lazy(() => GithubGithubProvidersGitProvider$inboundSchema),
});

/** @internal */
export type GithubGithubProvidersResponseBody$Outbound = {
  githubId: string;
  gitProvider: GithubGithubProvidersGitProvider$Outbound;
};

/** @internal */
export const GithubGithubProvidersResponseBody$outboundSchema: z.ZodType<
  GithubGithubProvidersResponseBody$Outbound,
  z.ZodTypeDef,
  GithubGithubProvidersResponseBody
> = z.object({
  githubId: z.string(),
  gitProvider: z.lazy(() => GithubGithubProvidersGitProvider$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GithubGithubProvidersResponseBody$ {
  /** @deprecated use `GithubGithubProvidersResponseBody$inboundSchema` instead. */
  export const inboundSchema = GithubGithubProvidersResponseBody$inboundSchema;
  /** @deprecated use `GithubGithubProvidersResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GithubGithubProvidersResponseBody$outboundSchema;
  /** @deprecated use `GithubGithubProvidersResponseBody$Outbound` instead. */
  export type Outbound = GithubGithubProvidersResponseBody$Outbound;
}

export function githubGithubProvidersResponseBodyToJSON(
  githubGithubProvidersResponseBody: GithubGithubProvidersResponseBody,
): string {
  return JSON.stringify(
    GithubGithubProvidersResponseBody$outboundSchema.parse(
      githubGithubProvidersResponseBody,
    ),
  );
}

export function githubGithubProvidersResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GithubGithubProvidersResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GithubGithubProvidersResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GithubGithubProvidersResponseBody' from JSON`,
  );
}

/** @internal */
export const GithubGithubProvidersResponse$inboundSchema: z.ZodType<
  GithubGithubProvidersResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ErrorT$inboundSchema,
  z.array(z.lazy(() => GithubGithubProvidersResponseBody$inboundSchema)),
]);

/** @internal */
export type GithubGithubProvidersResponse$Outbound =
  | models.ErrorT$Outbound
  | Array<GithubGithubProvidersResponseBody$Outbound>;

/** @internal */
export const GithubGithubProvidersResponse$outboundSchema: z.ZodType<
  GithubGithubProvidersResponse$Outbound,
  z.ZodTypeDef,
  GithubGithubProvidersResponse
> = z.union([
  models.ErrorT$outboundSchema,
  z.array(z.lazy(() => GithubGithubProvidersResponseBody$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GithubGithubProvidersResponse$ {
  /** @deprecated use `GithubGithubProvidersResponse$inboundSchema` instead. */
  export const inboundSchema = GithubGithubProvidersResponse$inboundSchema;
  /** @deprecated use `GithubGithubProvidersResponse$outboundSchema` instead. */
  export const outboundSchema = GithubGithubProvidersResponse$outboundSchema;
  /** @deprecated use `GithubGithubProvidersResponse$Outbound` instead. */
  export type Outbound = GithubGithubProvidersResponse$Outbound;
}

export function githubGithubProvidersResponseToJSON(
  githubGithubProvidersResponse: GithubGithubProvidersResponse,
): string {
  return JSON.stringify(
    GithubGithubProvidersResponse$outboundSchema.parse(
      githubGithubProvidersResponse,
    ),
  );
}

export function githubGithubProvidersResponseFromJSON(
  jsonString: string,
): SafeParseResult<GithubGithubProvidersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GithubGithubProvidersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GithubGithubProvidersResponse' from JSON`,
  );
}
