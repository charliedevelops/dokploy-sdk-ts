/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CertificatesRemoveSecurity = {
  authorization: string;
};

export type CertificatesRemoveRequest = {
  certificateId: string;
};

/**
 * Successful response
 */
export type CertificatesRemoveResponseBody = {
  autoRenew: boolean | null;
  certificateData: string;
  certificateId: string;
  certificatePath: string;
  name: string;
  organizationId: string;
  privateKey: string;
  serverId: string | null;
};

export type CertificatesRemoveResponse =
  | CertificatesRemoveResponseBody
  | models.ErrorT;

/** @internal */
export const CertificatesRemoveSecurity$inboundSchema: z.ZodType<
  CertificatesRemoveSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type CertificatesRemoveSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const CertificatesRemoveSecurity$outboundSchema: z.ZodType<
  CertificatesRemoveSecurity$Outbound,
  z.ZodTypeDef,
  CertificatesRemoveSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CertificatesRemoveSecurity$ {
  /** @deprecated use `CertificatesRemoveSecurity$inboundSchema` instead. */
  export const inboundSchema = CertificatesRemoveSecurity$inboundSchema;
  /** @deprecated use `CertificatesRemoveSecurity$outboundSchema` instead. */
  export const outboundSchema = CertificatesRemoveSecurity$outboundSchema;
  /** @deprecated use `CertificatesRemoveSecurity$Outbound` instead. */
  export type Outbound = CertificatesRemoveSecurity$Outbound;
}

export function certificatesRemoveSecurityToJSON(
  certificatesRemoveSecurity: CertificatesRemoveSecurity,
): string {
  return JSON.stringify(
    CertificatesRemoveSecurity$outboundSchema.parse(certificatesRemoveSecurity),
  );
}

export function certificatesRemoveSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CertificatesRemoveSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CertificatesRemoveSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CertificatesRemoveSecurity' from JSON`,
  );
}

/** @internal */
export const CertificatesRemoveRequest$inboundSchema: z.ZodType<
  CertificatesRemoveRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  certificateId: z.string(),
});

/** @internal */
export type CertificatesRemoveRequest$Outbound = {
  certificateId: string;
};

/** @internal */
export const CertificatesRemoveRequest$outboundSchema: z.ZodType<
  CertificatesRemoveRequest$Outbound,
  z.ZodTypeDef,
  CertificatesRemoveRequest
> = z.object({
  certificateId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CertificatesRemoveRequest$ {
  /** @deprecated use `CertificatesRemoveRequest$inboundSchema` instead. */
  export const inboundSchema = CertificatesRemoveRequest$inboundSchema;
  /** @deprecated use `CertificatesRemoveRequest$outboundSchema` instead. */
  export const outboundSchema = CertificatesRemoveRequest$outboundSchema;
  /** @deprecated use `CertificatesRemoveRequest$Outbound` instead. */
  export type Outbound = CertificatesRemoveRequest$Outbound;
}

export function certificatesRemoveRequestToJSON(
  certificatesRemoveRequest: CertificatesRemoveRequest,
): string {
  return JSON.stringify(
    CertificatesRemoveRequest$outboundSchema.parse(certificatesRemoveRequest),
  );
}

export function certificatesRemoveRequestFromJSON(
  jsonString: string,
): SafeParseResult<CertificatesRemoveRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CertificatesRemoveRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CertificatesRemoveRequest' from JSON`,
  );
}

/** @internal */
export const CertificatesRemoveResponseBody$inboundSchema: z.ZodType<
  CertificatesRemoveResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  autoRenew: z.nullable(z.boolean()),
  certificateData: z.string(),
  certificateId: z.string(),
  certificatePath: z.string(),
  name: z.string(),
  organizationId: z.string(),
  privateKey: z.string(),
  serverId: z.nullable(z.string()),
});

/** @internal */
export type CertificatesRemoveResponseBody$Outbound = {
  autoRenew: boolean | null;
  certificateData: string;
  certificateId: string;
  certificatePath: string;
  name: string;
  organizationId: string;
  privateKey: string;
  serverId: string | null;
};

/** @internal */
export const CertificatesRemoveResponseBody$outboundSchema: z.ZodType<
  CertificatesRemoveResponseBody$Outbound,
  z.ZodTypeDef,
  CertificatesRemoveResponseBody
> = z.object({
  autoRenew: z.nullable(z.boolean()),
  certificateData: z.string(),
  certificateId: z.string(),
  certificatePath: z.string(),
  name: z.string(),
  organizationId: z.string(),
  privateKey: z.string(),
  serverId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CertificatesRemoveResponseBody$ {
  /** @deprecated use `CertificatesRemoveResponseBody$inboundSchema` instead. */
  export const inboundSchema = CertificatesRemoveResponseBody$inboundSchema;
  /** @deprecated use `CertificatesRemoveResponseBody$outboundSchema` instead. */
  export const outboundSchema = CertificatesRemoveResponseBody$outboundSchema;
  /** @deprecated use `CertificatesRemoveResponseBody$Outbound` instead. */
  export type Outbound = CertificatesRemoveResponseBody$Outbound;
}

export function certificatesRemoveResponseBodyToJSON(
  certificatesRemoveResponseBody: CertificatesRemoveResponseBody,
): string {
  return JSON.stringify(
    CertificatesRemoveResponseBody$outboundSchema.parse(
      certificatesRemoveResponseBody,
    ),
  );
}

export function certificatesRemoveResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CertificatesRemoveResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CertificatesRemoveResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CertificatesRemoveResponseBody' from JSON`,
  );
}

/** @internal */
export const CertificatesRemoveResponse$inboundSchema: z.ZodType<
  CertificatesRemoveResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CertificatesRemoveResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type CertificatesRemoveResponse$Outbound =
  | CertificatesRemoveResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const CertificatesRemoveResponse$outboundSchema: z.ZodType<
  CertificatesRemoveResponse$Outbound,
  z.ZodTypeDef,
  CertificatesRemoveResponse
> = z.union([
  z.lazy(() => CertificatesRemoveResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CertificatesRemoveResponse$ {
  /** @deprecated use `CertificatesRemoveResponse$inboundSchema` instead. */
  export const inboundSchema = CertificatesRemoveResponse$inboundSchema;
  /** @deprecated use `CertificatesRemoveResponse$outboundSchema` instead. */
  export const outboundSchema = CertificatesRemoveResponse$outboundSchema;
  /** @deprecated use `CertificatesRemoveResponse$Outbound` instead. */
  export type Outbound = CertificatesRemoveResponse$Outbound;
}

export function certificatesRemoveResponseToJSON(
  certificatesRemoveResponse: CertificatesRemoveResponse,
): string {
  return JSON.stringify(
    CertificatesRemoveResponse$outboundSchema.parse(certificatesRemoveResponse),
  );
}

export function certificatesRemoveResponseFromJSON(
  jsonString: string,
): SafeParseResult<CertificatesRemoveResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CertificatesRemoveResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CertificatesRemoveResponse' from JSON`,
  );
}
