/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SettingsReloadServerSecurity = {
  authorization: string;
};

/** @internal */
export const SettingsReloadServerSecurity$inboundSchema: z.ZodType<
  SettingsReloadServerSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type SettingsReloadServerSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const SettingsReloadServerSecurity$outboundSchema: z.ZodType<
  SettingsReloadServerSecurity$Outbound,
  z.ZodTypeDef,
  SettingsReloadServerSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SettingsReloadServerSecurity$ {
  /** @deprecated use `SettingsReloadServerSecurity$inboundSchema` instead. */
  export const inboundSchema = SettingsReloadServerSecurity$inboundSchema;
  /** @deprecated use `SettingsReloadServerSecurity$outboundSchema` instead. */
  export const outboundSchema = SettingsReloadServerSecurity$outboundSchema;
  /** @deprecated use `SettingsReloadServerSecurity$Outbound` instead. */
  export type Outbound = SettingsReloadServerSecurity$Outbound;
}

export function settingsReloadServerSecurityToJSON(
  settingsReloadServerSecurity: SettingsReloadServerSecurity,
): string {
  return JSON.stringify(
    SettingsReloadServerSecurity$outboundSchema.parse(
      settingsReloadServerSecurity,
    ),
  );
}

export function settingsReloadServerSecurityFromJSON(
  jsonString: string,
): SafeParseResult<SettingsReloadServerSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SettingsReloadServerSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SettingsReloadServerSecurity' from JSON`,
  );
}
