/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type RedirectsDeleteSecurity = {
  authorization: string;
};

export type RedirectsDeleteRequest = {
  redirectId: string;
};

/**
 * Successful response
 */
export type RedirectsDeleteResponseBody = {
  applicationId: string;
  createdAt: string;
  permanent: boolean;
  redirectId: string;
  regex: string;
  replacement: string;
  uniqueConfigKey: number;
};

export type RedirectsDeleteResponse =
  | RedirectsDeleteResponseBody
  | models.ErrorT;

/** @internal */
export const RedirectsDeleteSecurity$inboundSchema: z.ZodType<
  RedirectsDeleteSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type RedirectsDeleteSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const RedirectsDeleteSecurity$outboundSchema: z.ZodType<
  RedirectsDeleteSecurity$Outbound,
  z.ZodTypeDef,
  RedirectsDeleteSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedirectsDeleteSecurity$ {
  /** @deprecated use `RedirectsDeleteSecurity$inboundSchema` instead. */
  export const inboundSchema = RedirectsDeleteSecurity$inboundSchema;
  /** @deprecated use `RedirectsDeleteSecurity$outboundSchema` instead. */
  export const outboundSchema = RedirectsDeleteSecurity$outboundSchema;
  /** @deprecated use `RedirectsDeleteSecurity$Outbound` instead. */
  export type Outbound = RedirectsDeleteSecurity$Outbound;
}

export function redirectsDeleteSecurityToJSON(
  redirectsDeleteSecurity: RedirectsDeleteSecurity,
): string {
  return JSON.stringify(
    RedirectsDeleteSecurity$outboundSchema.parse(redirectsDeleteSecurity),
  );
}

export function redirectsDeleteSecurityFromJSON(
  jsonString: string,
): SafeParseResult<RedirectsDeleteSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedirectsDeleteSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedirectsDeleteSecurity' from JSON`,
  );
}

/** @internal */
export const RedirectsDeleteRequest$inboundSchema: z.ZodType<
  RedirectsDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  redirectId: z.string(),
});

/** @internal */
export type RedirectsDeleteRequest$Outbound = {
  redirectId: string;
};

/** @internal */
export const RedirectsDeleteRequest$outboundSchema: z.ZodType<
  RedirectsDeleteRequest$Outbound,
  z.ZodTypeDef,
  RedirectsDeleteRequest
> = z.object({
  redirectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedirectsDeleteRequest$ {
  /** @deprecated use `RedirectsDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = RedirectsDeleteRequest$inboundSchema;
  /** @deprecated use `RedirectsDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = RedirectsDeleteRequest$outboundSchema;
  /** @deprecated use `RedirectsDeleteRequest$Outbound` instead. */
  export type Outbound = RedirectsDeleteRequest$Outbound;
}

export function redirectsDeleteRequestToJSON(
  redirectsDeleteRequest: RedirectsDeleteRequest,
): string {
  return JSON.stringify(
    RedirectsDeleteRequest$outboundSchema.parse(redirectsDeleteRequest),
  );
}

export function redirectsDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<RedirectsDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedirectsDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedirectsDeleteRequest' from JSON`,
  );
}

/** @internal */
export const RedirectsDeleteResponseBody$inboundSchema: z.ZodType<
  RedirectsDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string(),
  createdAt: z.string(),
  permanent: z.boolean(),
  redirectId: z.string(),
  regex: z.string(),
  replacement: z.string(),
  uniqueConfigKey: z.number(),
});

/** @internal */
export type RedirectsDeleteResponseBody$Outbound = {
  applicationId: string;
  createdAt: string;
  permanent: boolean;
  redirectId: string;
  regex: string;
  replacement: string;
  uniqueConfigKey: number;
};

/** @internal */
export const RedirectsDeleteResponseBody$outboundSchema: z.ZodType<
  RedirectsDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  RedirectsDeleteResponseBody
> = z.object({
  applicationId: z.string(),
  createdAt: z.string(),
  permanent: z.boolean(),
  redirectId: z.string(),
  regex: z.string(),
  replacement: z.string(),
  uniqueConfigKey: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedirectsDeleteResponseBody$ {
  /** @deprecated use `RedirectsDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema = RedirectsDeleteResponseBody$inboundSchema;
  /** @deprecated use `RedirectsDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema = RedirectsDeleteResponseBody$outboundSchema;
  /** @deprecated use `RedirectsDeleteResponseBody$Outbound` instead. */
  export type Outbound = RedirectsDeleteResponseBody$Outbound;
}

export function redirectsDeleteResponseBodyToJSON(
  redirectsDeleteResponseBody: RedirectsDeleteResponseBody,
): string {
  return JSON.stringify(
    RedirectsDeleteResponseBody$outboundSchema.parse(
      redirectsDeleteResponseBody,
    ),
  );
}

export function redirectsDeleteResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RedirectsDeleteResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedirectsDeleteResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedirectsDeleteResponseBody' from JSON`,
  );
}

/** @internal */
export const RedirectsDeleteResponse$inboundSchema: z.ZodType<
  RedirectsDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => RedirectsDeleteResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type RedirectsDeleteResponse$Outbound =
  | RedirectsDeleteResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const RedirectsDeleteResponse$outboundSchema: z.ZodType<
  RedirectsDeleteResponse$Outbound,
  z.ZodTypeDef,
  RedirectsDeleteResponse
> = z.union([
  z.lazy(() => RedirectsDeleteResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedirectsDeleteResponse$ {
  /** @deprecated use `RedirectsDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = RedirectsDeleteResponse$inboundSchema;
  /** @deprecated use `RedirectsDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = RedirectsDeleteResponse$outboundSchema;
  /** @deprecated use `RedirectsDeleteResponse$Outbound` instead. */
  export type Outbound = RedirectsDeleteResponse$Outbound;
}

export function redirectsDeleteResponseToJSON(
  redirectsDeleteResponse: RedirectsDeleteResponse,
): string {
  return JSON.stringify(
    RedirectsDeleteResponse$outboundSchema.parse(redirectsDeleteResponse),
  );
}

export function redirectsDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<RedirectsDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedirectsDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedirectsDeleteResponse' from JSON`,
  );
}
