/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ProjectAllSecurity = {
  authorization: string;
};

export type ProjectAllEnvironment = {
  applications?: Array<any> | undefined;
  compose?: Array<any> | undefined;
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  mariadb?: Array<any> | undefined;
  mongo?: Array<any> | undefined;
  mysql?: Array<any> | undefined;
  name: string;
  postgres?: Array<any> | undefined;
  projectId: string;
  redis?: Array<any> | undefined;
};

export type ProjectAllResponseBody = {
  createdAt: string;
  description: string | null;
  env: string;
  environments: Array<ProjectAllEnvironment>;
  name: string;
  organizationId: string;
  projectId: string;
};

export type ProjectAllResponse = models.ErrorT | Array<ProjectAllResponseBody>;

/** @internal */
export const ProjectAllSecurity$inboundSchema: z.ZodType<
  ProjectAllSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type ProjectAllSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const ProjectAllSecurity$outboundSchema: z.ZodType<
  ProjectAllSecurity$Outbound,
  z.ZodTypeDef,
  ProjectAllSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectAllSecurity$ {
  /** @deprecated use `ProjectAllSecurity$inboundSchema` instead. */
  export const inboundSchema = ProjectAllSecurity$inboundSchema;
  /** @deprecated use `ProjectAllSecurity$outboundSchema` instead. */
  export const outboundSchema = ProjectAllSecurity$outboundSchema;
  /** @deprecated use `ProjectAllSecurity$Outbound` instead. */
  export type Outbound = ProjectAllSecurity$Outbound;
}

export function projectAllSecurityToJSON(
  projectAllSecurity: ProjectAllSecurity,
): string {
  return JSON.stringify(
    ProjectAllSecurity$outboundSchema.parse(projectAllSecurity),
  );
}

export function projectAllSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ProjectAllSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectAllSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectAllSecurity' from JSON`,
  );
}

/** @internal */
export const ProjectAllEnvironment$inboundSchema: z.ZodType<
  ProjectAllEnvironment,
  z.ZodTypeDef,
  unknown
> = z.object({
  applications: z.array(z.any()).optional(),
  compose: z.array(z.any()).optional(),
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  mariadb: z.array(z.any()).optional(),
  mongo: z.array(z.any()).optional(),
  mysql: z.array(z.any()).optional(),
  name: z.string(),
  postgres: z.array(z.any()).optional(),
  projectId: z.string(),
  redis: z.array(z.any()).optional(),
});

/** @internal */
export type ProjectAllEnvironment$Outbound = {
  applications?: Array<any> | undefined;
  compose?: Array<any> | undefined;
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  mariadb?: Array<any> | undefined;
  mongo?: Array<any> | undefined;
  mysql?: Array<any> | undefined;
  name: string;
  postgres?: Array<any> | undefined;
  projectId: string;
  redis?: Array<any> | undefined;
};

/** @internal */
export const ProjectAllEnvironment$outboundSchema: z.ZodType<
  ProjectAllEnvironment$Outbound,
  z.ZodTypeDef,
  ProjectAllEnvironment
> = z.object({
  applications: z.array(z.any()).optional(),
  compose: z.array(z.any()).optional(),
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  mariadb: z.array(z.any()).optional(),
  mongo: z.array(z.any()).optional(),
  mysql: z.array(z.any()).optional(),
  name: z.string(),
  postgres: z.array(z.any()).optional(),
  projectId: z.string(),
  redis: z.array(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectAllEnvironment$ {
  /** @deprecated use `ProjectAllEnvironment$inboundSchema` instead. */
  export const inboundSchema = ProjectAllEnvironment$inboundSchema;
  /** @deprecated use `ProjectAllEnvironment$outboundSchema` instead. */
  export const outboundSchema = ProjectAllEnvironment$outboundSchema;
  /** @deprecated use `ProjectAllEnvironment$Outbound` instead. */
  export type Outbound = ProjectAllEnvironment$Outbound;
}

export function projectAllEnvironmentToJSON(
  projectAllEnvironment: ProjectAllEnvironment,
): string {
  return JSON.stringify(
    ProjectAllEnvironment$outboundSchema.parse(projectAllEnvironment),
  );
}

export function projectAllEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<ProjectAllEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectAllEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectAllEnvironment' from JSON`,
  );
}

/** @internal */
export const ProjectAllResponseBody$inboundSchema: z.ZodType<
  ProjectAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environments: z.array(z.lazy(() => ProjectAllEnvironment$inboundSchema)),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/** @internal */
export type ProjectAllResponseBody$Outbound = {
  createdAt: string;
  description: string | null;
  env: string;
  environments: Array<ProjectAllEnvironment$Outbound>;
  name: string;
  organizationId: string;
  projectId: string;
};

/** @internal */
export const ProjectAllResponseBody$outboundSchema: z.ZodType<
  ProjectAllResponseBody$Outbound,
  z.ZodTypeDef,
  ProjectAllResponseBody
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environments: z.array(z.lazy(() => ProjectAllEnvironment$outboundSchema)),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectAllResponseBody$ {
  /** @deprecated use `ProjectAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = ProjectAllResponseBody$inboundSchema;
  /** @deprecated use `ProjectAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = ProjectAllResponseBody$outboundSchema;
  /** @deprecated use `ProjectAllResponseBody$Outbound` instead. */
  export type Outbound = ProjectAllResponseBody$Outbound;
}

export function projectAllResponseBodyToJSON(
  projectAllResponseBody: ProjectAllResponseBody,
): string {
  return JSON.stringify(
    ProjectAllResponseBody$outboundSchema.parse(projectAllResponseBody),
  );
}

export function projectAllResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ProjectAllResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectAllResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectAllResponseBody' from JSON`,
  );
}

/** @internal */
export const ProjectAllResponse$inboundSchema: z.ZodType<
  ProjectAllResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ErrorT$inboundSchema,
  z.array(z.lazy(() => ProjectAllResponseBody$inboundSchema)),
]);

/** @internal */
export type ProjectAllResponse$Outbound =
  | models.ErrorT$Outbound
  | Array<ProjectAllResponseBody$Outbound>;

/** @internal */
export const ProjectAllResponse$outboundSchema: z.ZodType<
  ProjectAllResponse$Outbound,
  z.ZodTypeDef,
  ProjectAllResponse
> = z.union([
  models.ErrorT$outboundSchema,
  z.array(z.lazy(() => ProjectAllResponseBody$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectAllResponse$ {
  /** @deprecated use `ProjectAllResponse$inboundSchema` instead. */
  export const inboundSchema = ProjectAllResponse$inboundSchema;
  /** @deprecated use `ProjectAllResponse$outboundSchema` instead. */
  export const outboundSchema = ProjectAllResponse$outboundSchema;
  /** @deprecated use `ProjectAllResponse$Outbound` instead. */
  export type Outbound = ProjectAllResponse$Outbound;
}

export function projectAllResponseToJSON(
  projectAllResponse: ProjectAllResponse,
): string {
  return JSON.stringify(
    ProjectAllResponse$outboundSchema.parse(projectAllResponse),
  );
}

export function projectAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<ProjectAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectAllResponse' from JSON`,
  );
}
