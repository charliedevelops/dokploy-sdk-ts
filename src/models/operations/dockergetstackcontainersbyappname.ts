/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DockerGetStackContainersByAppNameRequest = {
  appName: string;
  serverId?: string | undefined;
};

/** @internal */
export const DockerGetStackContainersByAppNameRequest$inboundSchema: z.ZodType<
  DockerGetStackContainersByAppNameRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  serverId: z.string().optional(),
});

/** @internal */
export type DockerGetStackContainersByAppNameRequest$Outbound = {
  appName: string;
  serverId?: string | undefined;
};

/** @internal */
export const DockerGetStackContainersByAppNameRequest$outboundSchema: z.ZodType<
  DockerGetStackContainersByAppNameRequest$Outbound,
  z.ZodTypeDef,
  DockerGetStackContainersByAppNameRequest
> = z.object({
  appName: z.string(),
  serverId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DockerGetStackContainersByAppNameRequest$ {
  /** @deprecated use `DockerGetStackContainersByAppNameRequest$inboundSchema` instead. */
  export const inboundSchema =
    DockerGetStackContainersByAppNameRequest$inboundSchema;
  /** @deprecated use `DockerGetStackContainersByAppNameRequest$outboundSchema` instead. */
  export const outboundSchema =
    DockerGetStackContainersByAppNameRequest$outboundSchema;
  /** @deprecated use `DockerGetStackContainersByAppNameRequest$Outbound` instead. */
  export type Outbound = DockerGetStackContainersByAppNameRequest$Outbound;
}

export function dockerGetStackContainersByAppNameRequestToJSON(
  dockerGetStackContainersByAppNameRequest:
    DockerGetStackContainersByAppNameRequest,
): string {
  return JSON.stringify(
    DockerGetStackContainersByAppNameRequest$outboundSchema.parse(
      dockerGetStackContainersByAppNameRequest,
    ),
  );
}

export function dockerGetStackContainersByAppNameRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DockerGetStackContainersByAppNameRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DockerGetStackContainersByAppNameRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DockerGetStackContainersByAppNameRequest' from JSON`,
  );
}
