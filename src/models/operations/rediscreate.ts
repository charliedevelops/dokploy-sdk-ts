/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type RedisCreateSecurity = {
  authorization: string;
};

export type RedisCreateRequest = {
  name: string;
  appName: string;
  databasePassword: string;
  dockerImage?: string | undefined;
  environmentId: string;
  description?: string | null | undefined;
  serverId?: string | null | undefined;
};

export const RedisCreateApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type RedisCreateApplicationStatus = ClosedEnum<
  typeof RedisCreateApplicationStatus
>;

export type RedisCreateHealthCheckSwarm = {
  test?: Array<string> | undefined;
  interval?: number | undefined;
  timeout?: number | undefined;
  startPeriod?: number | undefined;
  retries?: number | undefined;
};

export type RedisCreateRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type RedisCreateSpread = {
  spreadDescriptor: string;
};

export type RedisCreatePreference = {
  spread: RedisCreateSpread;
};

export type RedisCreatePlatform = {
  architecture: string;
  os: string;
};

export type RedisCreatePlacementSwarm = {
  constraints?: Array<string> | undefined;
  preferences?: Array<RedisCreatePreference> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<RedisCreatePlatform> | undefined;
};

export type RedisCreateUpdateConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type RedisCreateRollbackConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type RedisCreateReplicated = {
  replicas?: number | undefined;
};

export type RedisCreateGlobal = {};

export type RedisCreateReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type RedisCreateGlobalJob = {};

export type RedisCreateModeSwarm = {
  replicated?: RedisCreateReplicated | undefined;
  global?: RedisCreateGlobal | undefined;
  replicatedJob?: RedisCreateReplicatedJob | undefined;
  globalJob?: RedisCreateGlobalJob | undefined;
};

export type RedisCreateDriverOpts = {};

export type RedisCreateNetworkSwarm = {
  target?: string | undefined;
  aliases?: Array<string> | undefined;
  driverOpts?: RedisCreateDriverOpts | undefined;
};

/**
 * Successful response
 */
export type RedisCreateResponseBody = {
  redisId: string;
  name: string;
  appName: string;
  description: string | null;
  databasePassword: string;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  externalPort: number | null;
  createdAt: string;
  applicationStatus: RedisCreateApplicationStatus;
  healthCheckSwarm: RedisCreateHealthCheckSwarm | null;
  restartPolicySwarm: RedisCreateRestartPolicySwarm | null;
  placementSwarm: RedisCreatePlacementSwarm | null;
  updateConfigSwarm: RedisCreateUpdateConfigSwarm | null;
  rollbackConfigSwarm: RedisCreateRollbackConfigSwarm | null;
  modeSwarm: RedisCreateModeSwarm | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<RedisCreateNetworkSwarm> | null;
  replicas: number;
  environmentId: string;
  serverId: string | null;
};

export type RedisCreateResponse = RedisCreateResponseBody | models.ErrorT;

/** @internal */
export const RedisCreateSecurity$inboundSchema: z.ZodType<
  RedisCreateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type RedisCreateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const RedisCreateSecurity$outboundSchema: z.ZodType<
  RedisCreateSecurity$Outbound,
  z.ZodTypeDef,
  RedisCreateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisCreateSecurity$ {
  /** @deprecated use `RedisCreateSecurity$inboundSchema` instead. */
  export const inboundSchema = RedisCreateSecurity$inboundSchema;
  /** @deprecated use `RedisCreateSecurity$outboundSchema` instead. */
  export const outboundSchema = RedisCreateSecurity$outboundSchema;
  /** @deprecated use `RedisCreateSecurity$Outbound` instead. */
  export type Outbound = RedisCreateSecurity$Outbound;
}

export function redisCreateSecurityToJSON(
  redisCreateSecurity: RedisCreateSecurity,
): string {
  return JSON.stringify(
    RedisCreateSecurity$outboundSchema.parse(redisCreateSecurity),
  );
}

export function redisCreateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<RedisCreateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisCreateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisCreateSecurity' from JSON`,
  );
}

/** @internal */
export const RedisCreateRequest$inboundSchema: z.ZodType<
  RedisCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  appName: z.string(),
  databasePassword: z.string(),
  dockerImage: z.string().default("redis:8"),
  environmentId: z.string(),
  description: z.nullable(z.string()).optional(),
  serverId: z.nullable(z.string()).optional(),
});

/** @internal */
export type RedisCreateRequest$Outbound = {
  name: string;
  appName: string;
  databasePassword: string;
  dockerImage: string;
  environmentId: string;
  description?: string | null | undefined;
  serverId?: string | null | undefined;
};

/** @internal */
export const RedisCreateRequest$outboundSchema: z.ZodType<
  RedisCreateRequest$Outbound,
  z.ZodTypeDef,
  RedisCreateRequest
> = z.object({
  name: z.string(),
  appName: z.string(),
  databasePassword: z.string(),
  dockerImage: z.string().default("redis:8"),
  environmentId: z.string(),
  description: z.nullable(z.string()).optional(),
  serverId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisCreateRequest$ {
  /** @deprecated use `RedisCreateRequest$inboundSchema` instead. */
  export const inboundSchema = RedisCreateRequest$inboundSchema;
  /** @deprecated use `RedisCreateRequest$outboundSchema` instead. */
  export const outboundSchema = RedisCreateRequest$outboundSchema;
  /** @deprecated use `RedisCreateRequest$Outbound` instead. */
  export type Outbound = RedisCreateRequest$Outbound;
}

export function redisCreateRequestToJSON(
  redisCreateRequest: RedisCreateRequest,
): string {
  return JSON.stringify(
    RedisCreateRequest$outboundSchema.parse(redisCreateRequest),
  );
}

export function redisCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<RedisCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisCreateRequest' from JSON`,
  );
}

/** @internal */
export const RedisCreateApplicationStatus$inboundSchema: z.ZodNativeEnum<
  typeof RedisCreateApplicationStatus
> = z.nativeEnum(RedisCreateApplicationStatus);

/** @internal */
export const RedisCreateApplicationStatus$outboundSchema: z.ZodNativeEnum<
  typeof RedisCreateApplicationStatus
> = RedisCreateApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisCreateApplicationStatus$ {
  /** @deprecated use `RedisCreateApplicationStatus$inboundSchema` instead. */
  export const inboundSchema = RedisCreateApplicationStatus$inboundSchema;
  /** @deprecated use `RedisCreateApplicationStatus$outboundSchema` instead. */
  export const outboundSchema = RedisCreateApplicationStatus$outboundSchema;
}

/** @internal */
export const RedisCreateHealthCheckSwarm$inboundSchema: z.ZodType<
  RedisCreateHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Test: z.array(z.string()).optional(),
  Interval: z.number().optional(),
  Timeout: z.number().optional(),
  StartPeriod: z.number().optional(),
  Retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Test": "test",
    "Interval": "interval",
    "Timeout": "timeout",
    "StartPeriod": "startPeriod",
    "Retries": "retries",
  });
});

/** @internal */
export type RedisCreateHealthCheckSwarm$Outbound = {
  Test?: Array<string> | undefined;
  Interval?: number | undefined;
  Timeout?: number | undefined;
  StartPeriod?: number | undefined;
  Retries?: number | undefined;
};

/** @internal */
export const RedisCreateHealthCheckSwarm$outboundSchema: z.ZodType<
  RedisCreateHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  RedisCreateHealthCheckSwarm
> = z.object({
  test: z.array(z.string()).optional(),
  interval: z.number().optional(),
  timeout: z.number().optional(),
  startPeriod: z.number().optional(),
  retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    test: "Test",
    interval: "Interval",
    timeout: "Timeout",
    startPeriod: "StartPeriod",
    retries: "Retries",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisCreateHealthCheckSwarm$ {
  /** @deprecated use `RedisCreateHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisCreateHealthCheckSwarm$inboundSchema;
  /** @deprecated use `RedisCreateHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisCreateHealthCheckSwarm$outboundSchema;
  /** @deprecated use `RedisCreateHealthCheckSwarm$Outbound` instead. */
  export type Outbound = RedisCreateHealthCheckSwarm$Outbound;
}

export function redisCreateHealthCheckSwarmToJSON(
  redisCreateHealthCheckSwarm: RedisCreateHealthCheckSwarm,
): string {
  return JSON.stringify(
    RedisCreateHealthCheckSwarm$outboundSchema.parse(
      redisCreateHealthCheckSwarm,
    ),
  );
}

export function redisCreateHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisCreateHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisCreateHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisCreateHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const RedisCreateRestartPolicySwarm$inboundSchema: z.ZodType<
  RedisCreateRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type RedisCreateRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const RedisCreateRestartPolicySwarm$outboundSchema: z.ZodType<
  RedisCreateRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  RedisCreateRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisCreateRestartPolicySwarm$ {
  /** @deprecated use `RedisCreateRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema = RedisCreateRestartPolicySwarm$inboundSchema;
  /** @deprecated use `RedisCreateRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema = RedisCreateRestartPolicySwarm$outboundSchema;
  /** @deprecated use `RedisCreateRestartPolicySwarm$Outbound` instead. */
  export type Outbound = RedisCreateRestartPolicySwarm$Outbound;
}

export function redisCreateRestartPolicySwarmToJSON(
  redisCreateRestartPolicySwarm: RedisCreateRestartPolicySwarm,
): string {
  return JSON.stringify(
    RedisCreateRestartPolicySwarm$outboundSchema.parse(
      redisCreateRestartPolicySwarm,
    ),
  );
}

export function redisCreateRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisCreateRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisCreateRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisCreateRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const RedisCreateSpread$inboundSchema: z.ZodType<
  RedisCreateSpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type RedisCreateSpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const RedisCreateSpread$outboundSchema: z.ZodType<
  RedisCreateSpread$Outbound,
  z.ZodTypeDef,
  RedisCreateSpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisCreateSpread$ {
  /** @deprecated use `RedisCreateSpread$inboundSchema` instead. */
  export const inboundSchema = RedisCreateSpread$inboundSchema;
  /** @deprecated use `RedisCreateSpread$outboundSchema` instead. */
  export const outboundSchema = RedisCreateSpread$outboundSchema;
  /** @deprecated use `RedisCreateSpread$Outbound` instead. */
  export type Outbound = RedisCreateSpread$Outbound;
}

export function redisCreateSpreadToJSON(
  redisCreateSpread: RedisCreateSpread,
): string {
  return JSON.stringify(
    RedisCreateSpread$outboundSchema.parse(redisCreateSpread),
  );
}

export function redisCreateSpreadFromJSON(
  jsonString: string,
): SafeParseResult<RedisCreateSpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisCreateSpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisCreateSpread' from JSON`,
  );
}

/** @internal */
export const RedisCreatePreference$inboundSchema: z.ZodType<
  RedisCreatePreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => RedisCreateSpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type RedisCreatePreference$Outbound = {
  Spread: RedisCreateSpread$Outbound;
};

/** @internal */
export const RedisCreatePreference$outboundSchema: z.ZodType<
  RedisCreatePreference$Outbound,
  z.ZodTypeDef,
  RedisCreatePreference
> = z.object({
  spread: z.lazy(() => RedisCreateSpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisCreatePreference$ {
  /** @deprecated use `RedisCreatePreference$inboundSchema` instead. */
  export const inboundSchema = RedisCreatePreference$inboundSchema;
  /** @deprecated use `RedisCreatePreference$outboundSchema` instead. */
  export const outboundSchema = RedisCreatePreference$outboundSchema;
  /** @deprecated use `RedisCreatePreference$Outbound` instead. */
  export type Outbound = RedisCreatePreference$Outbound;
}

export function redisCreatePreferenceToJSON(
  redisCreatePreference: RedisCreatePreference,
): string {
  return JSON.stringify(
    RedisCreatePreference$outboundSchema.parse(redisCreatePreference),
  );
}

export function redisCreatePreferenceFromJSON(
  jsonString: string,
): SafeParseResult<RedisCreatePreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisCreatePreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisCreatePreference' from JSON`,
  );
}

/** @internal */
export const RedisCreatePlatform$inboundSchema: z.ZodType<
  RedisCreatePlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type RedisCreatePlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const RedisCreatePlatform$outboundSchema: z.ZodType<
  RedisCreatePlatform$Outbound,
  z.ZodTypeDef,
  RedisCreatePlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisCreatePlatform$ {
  /** @deprecated use `RedisCreatePlatform$inboundSchema` instead. */
  export const inboundSchema = RedisCreatePlatform$inboundSchema;
  /** @deprecated use `RedisCreatePlatform$outboundSchema` instead. */
  export const outboundSchema = RedisCreatePlatform$outboundSchema;
  /** @deprecated use `RedisCreatePlatform$Outbound` instead. */
  export type Outbound = RedisCreatePlatform$Outbound;
}

export function redisCreatePlatformToJSON(
  redisCreatePlatform: RedisCreatePlatform,
): string {
  return JSON.stringify(
    RedisCreatePlatform$outboundSchema.parse(redisCreatePlatform),
  );
}

export function redisCreatePlatformFromJSON(
  jsonString: string,
): SafeParseResult<RedisCreatePlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisCreatePlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisCreatePlatform' from JSON`,
  );
}

/** @internal */
export const RedisCreatePlacementSwarm$inboundSchema: z.ZodType<
  RedisCreatePlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  Preferences: z.array(z.lazy(() => RedisCreatePreference$inboundSchema))
    .optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => RedisCreatePlatform$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "Preferences": "preferences",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
  });
});

/** @internal */
export type RedisCreatePlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  Preferences?: Array<RedisCreatePreference$Outbound> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<RedisCreatePlatform$Outbound> | undefined;
};

/** @internal */
export const RedisCreatePlacementSwarm$outboundSchema: z.ZodType<
  RedisCreatePlacementSwarm$Outbound,
  z.ZodTypeDef,
  RedisCreatePlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  preferences: z.array(z.lazy(() => RedisCreatePreference$outboundSchema))
    .optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => RedisCreatePlatform$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    preferences: "Preferences",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisCreatePlacementSwarm$ {
  /** @deprecated use `RedisCreatePlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisCreatePlacementSwarm$inboundSchema;
  /** @deprecated use `RedisCreatePlacementSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisCreatePlacementSwarm$outboundSchema;
  /** @deprecated use `RedisCreatePlacementSwarm$Outbound` instead. */
  export type Outbound = RedisCreatePlacementSwarm$Outbound;
}

export function redisCreatePlacementSwarmToJSON(
  redisCreatePlacementSwarm: RedisCreatePlacementSwarm,
): string {
  return JSON.stringify(
    RedisCreatePlacementSwarm$outboundSchema.parse(redisCreatePlacementSwarm),
  );
}

export function redisCreatePlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisCreatePlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisCreatePlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisCreatePlacementSwarm' from JSON`,
  );
}

/** @internal */
export const RedisCreateUpdateConfigSwarm$inboundSchema: z.ZodType<
  RedisCreateUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type RedisCreateUpdateConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const RedisCreateUpdateConfigSwarm$outboundSchema: z.ZodType<
  RedisCreateUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  RedisCreateUpdateConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisCreateUpdateConfigSwarm$ {
  /** @deprecated use `RedisCreateUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisCreateUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `RedisCreateUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisCreateUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `RedisCreateUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = RedisCreateUpdateConfigSwarm$Outbound;
}

export function redisCreateUpdateConfigSwarmToJSON(
  redisCreateUpdateConfigSwarm: RedisCreateUpdateConfigSwarm,
): string {
  return JSON.stringify(
    RedisCreateUpdateConfigSwarm$outboundSchema.parse(
      redisCreateUpdateConfigSwarm,
    ),
  );
}

export function redisCreateUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisCreateUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisCreateUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisCreateUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const RedisCreateRollbackConfigSwarm$inboundSchema: z.ZodType<
  RedisCreateRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type RedisCreateRollbackConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const RedisCreateRollbackConfigSwarm$outboundSchema: z.ZodType<
  RedisCreateRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  RedisCreateRollbackConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisCreateRollbackConfigSwarm$ {
  /** @deprecated use `RedisCreateRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisCreateRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `RedisCreateRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisCreateRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `RedisCreateRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = RedisCreateRollbackConfigSwarm$Outbound;
}

export function redisCreateRollbackConfigSwarmToJSON(
  redisCreateRollbackConfigSwarm: RedisCreateRollbackConfigSwarm,
): string {
  return JSON.stringify(
    RedisCreateRollbackConfigSwarm$outboundSchema.parse(
      redisCreateRollbackConfigSwarm,
    ),
  );
}

export function redisCreateRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisCreateRollbackConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisCreateRollbackConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisCreateRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const RedisCreateReplicated$inboundSchema: z.ZodType<
  RedisCreateReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type RedisCreateReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const RedisCreateReplicated$outboundSchema: z.ZodType<
  RedisCreateReplicated$Outbound,
  z.ZodTypeDef,
  RedisCreateReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisCreateReplicated$ {
  /** @deprecated use `RedisCreateReplicated$inboundSchema` instead. */
  export const inboundSchema = RedisCreateReplicated$inboundSchema;
  /** @deprecated use `RedisCreateReplicated$outboundSchema` instead. */
  export const outboundSchema = RedisCreateReplicated$outboundSchema;
  /** @deprecated use `RedisCreateReplicated$Outbound` instead. */
  export type Outbound = RedisCreateReplicated$Outbound;
}

export function redisCreateReplicatedToJSON(
  redisCreateReplicated: RedisCreateReplicated,
): string {
  return JSON.stringify(
    RedisCreateReplicated$outboundSchema.parse(redisCreateReplicated),
  );
}

export function redisCreateReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<RedisCreateReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisCreateReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisCreateReplicated' from JSON`,
  );
}

/** @internal */
export const RedisCreateGlobal$inboundSchema: z.ZodType<
  RedisCreateGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RedisCreateGlobal$Outbound = {};

/** @internal */
export const RedisCreateGlobal$outboundSchema: z.ZodType<
  RedisCreateGlobal$Outbound,
  z.ZodTypeDef,
  RedisCreateGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisCreateGlobal$ {
  /** @deprecated use `RedisCreateGlobal$inboundSchema` instead. */
  export const inboundSchema = RedisCreateGlobal$inboundSchema;
  /** @deprecated use `RedisCreateGlobal$outboundSchema` instead. */
  export const outboundSchema = RedisCreateGlobal$outboundSchema;
  /** @deprecated use `RedisCreateGlobal$Outbound` instead. */
  export type Outbound = RedisCreateGlobal$Outbound;
}

export function redisCreateGlobalToJSON(
  redisCreateGlobal: RedisCreateGlobal,
): string {
  return JSON.stringify(
    RedisCreateGlobal$outboundSchema.parse(redisCreateGlobal),
  );
}

export function redisCreateGlobalFromJSON(
  jsonString: string,
): SafeParseResult<RedisCreateGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisCreateGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisCreateGlobal' from JSON`,
  );
}

/** @internal */
export const RedisCreateReplicatedJob$inboundSchema: z.ZodType<
  RedisCreateReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type RedisCreateReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const RedisCreateReplicatedJob$outboundSchema: z.ZodType<
  RedisCreateReplicatedJob$Outbound,
  z.ZodTypeDef,
  RedisCreateReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisCreateReplicatedJob$ {
  /** @deprecated use `RedisCreateReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = RedisCreateReplicatedJob$inboundSchema;
  /** @deprecated use `RedisCreateReplicatedJob$outboundSchema` instead. */
  export const outboundSchema = RedisCreateReplicatedJob$outboundSchema;
  /** @deprecated use `RedisCreateReplicatedJob$Outbound` instead. */
  export type Outbound = RedisCreateReplicatedJob$Outbound;
}

export function redisCreateReplicatedJobToJSON(
  redisCreateReplicatedJob: RedisCreateReplicatedJob,
): string {
  return JSON.stringify(
    RedisCreateReplicatedJob$outboundSchema.parse(redisCreateReplicatedJob),
  );
}

export function redisCreateReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<RedisCreateReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisCreateReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisCreateReplicatedJob' from JSON`,
  );
}

/** @internal */
export const RedisCreateGlobalJob$inboundSchema: z.ZodType<
  RedisCreateGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RedisCreateGlobalJob$Outbound = {};

/** @internal */
export const RedisCreateGlobalJob$outboundSchema: z.ZodType<
  RedisCreateGlobalJob$Outbound,
  z.ZodTypeDef,
  RedisCreateGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisCreateGlobalJob$ {
  /** @deprecated use `RedisCreateGlobalJob$inboundSchema` instead. */
  export const inboundSchema = RedisCreateGlobalJob$inboundSchema;
  /** @deprecated use `RedisCreateGlobalJob$outboundSchema` instead. */
  export const outboundSchema = RedisCreateGlobalJob$outboundSchema;
  /** @deprecated use `RedisCreateGlobalJob$Outbound` instead. */
  export type Outbound = RedisCreateGlobalJob$Outbound;
}

export function redisCreateGlobalJobToJSON(
  redisCreateGlobalJob: RedisCreateGlobalJob,
): string {
  return JSON.stringify(
    RedisCreateGlobalJob$outboundSchema.parse(redisCreateGlobalJob),
  );
}

export function redisCreateGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<RedisCreateGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisCreateGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisCreateGlobalJob' from JSON`,
  );
}

/** @internal */
export const RedisCreateModeSwarm$inboundSchema: z.ZodType<
  RedisCreateModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicated: z.lazy(() => RedisCreateReplicated$inboundSchema).optional(),
  Global: z.lazy(() => RedisCreateGlobal$inboundSchema).optional(),
  ReplicatedJob: z.lazy(() => RedisCreateReplicatedJob$inboundSchema)
    .optional(),
  GlobalJob: z.lazy(() => RedisCreateGlobalJob$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicated": "replicated",
    "Global": "global",
    "ReplicatedJob": "replicatedJob",
    "GlobalJob": "globalJob",
  });
});

/** @internal */
export type RedisCreateModeSwarm$Outbound = {
  Replicated?: RedisCreateReplicated$Outbound | undefined;
  Global?: RedisCreateGlobal$Outbound | undefined;
  ReplicatedJob?: RedisCreateReplicatedJob$Outbound | undefined;
  GlobalJob?: RedisCreateGlobalJob$Outbound | undefined;
};

/** @internal */
export const RedisCreateModeSwarm$outboundSchema: z.ZodType<
  RedisCreateModeSwarm$Outbound,
  z.ZodTypeDef,
  RedisCreateModeSwarm
> = z.object({
  replicated: z.lazy(() => RedisCreateReplicated$outboundSchema).optional(),
  global: z.lazy(() => RedisCreateGlobal$outboundSchema).optional(),
  replicatedJob: z.lazy(() => RedisCreateReplicatedJob$outboundSchema)
    .optional(),
  globalJob: z.lazy(() => RedisCreateGlobalJob$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    replicated: "Replicated",
    global: "Global",
    replicatedJob: "ReplicatedJob",
    globalJob: "GlobalJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisCreateModeSwarm$ {
  /** @deprecated use `RedisCreateModeSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisCreateModeSwarm$inboundSchema;
  /** @deprecated use `RedisCreateModeSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisCreateModeSwarm$outboundSchema;
  /** @deprecated use `RedisCreateModeSwarm$Outbound` instead. */
  export type Outbound = RedisCreateModeSwarm$Outbound;
}

export function redisCreateModeSwarmToJSON(
  redisCreateModeSwarm: RedisCreateModeSwarm,
): string {
  return JSON.stringify(
    RedisCreateModeSwarm$outboundSchema.parse(redisCreateModeSwarm),
  );
}

export function redisCreateModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisCreateModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisCreateModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisCreateModeSwarm' from JSON`,
  );
}

/** @internal */
export const RedisCreateDriverOpts$inboundSchema: z.ZodType<
  RedisCreateDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RedisCreateDriverOpts$Outbound = {};

/** @internal */
export const RedisCreateDriverOpts$outboundSchema: z.ZodType<
  RedisCreateDriverOpts$Outbound,
  z.ZodTypeDef,
  RedisCreateDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisCreateDriverOpts$ {
  /** @deprecated use `RedisCreateDriverOpts$inboundSchema` instead. */
  export const inboundSchema = RedisCreateDriverOpts$inboundSchema;
  /** @deprecated use `RedisCreateDriverOpts$outboundSchema` instead. */
  export const outboundSchema = RedisCreateDriverOpts$outboundSchema;
  /** @deprecated use `RedisCreateDriverOpts$Outbound` instead. */
  export type Outbound = RedisCreateDriverOpts$Outbound;
}

export function redisCreateDriverOptsToJSON(
  redisCreateDriverOpts: RedisCreateDriverOpts,
): string {
  return JSON.stringify(
    RedisCreateDriverOpts$outboundSchema.parse(redisCreateDriverOpts),
  );
}

export function redisCreateDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<RedisCreateDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisCreateDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisCreateDriverOpts' from JSON`,
  );
}

/** @internal */
export const RedisCreateNetworkSwarm$inboundSchema: z.ZodType<
  RedisCreateNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Target: z.string().optional(),
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => RedisCreateDriverOpts$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Target": "target",
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
  });
});

/** @internal */
export type RedisCreateNetworkSwarm$Outbound = {
  Target?: string | undefined;
  Aliases?: Array<string> | undefined;
  DriverOpts?: RedisCreateDriverOpts$Outbound | undefined;
};

/** @internal */
export const RedisCreateNetworkSwarm$outboundSchema: z.ZodType<
  RedisCreateNetworkSwarm$Outbound,
  z.ZodTypeDef,
  RedisCreateNetworkSwarm
> = z.object({
  target: z.string().optional(),
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => RedisCreateDriverOpts$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    target: "Target",
    aliases: "Aliases",
    driverOpts: "DriverOpts",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisCreateNetworkSwarm$ {
  /** @deprecated use `RedisCreateNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisCreateNetworkSwarm$inboundSchema;
  /** @deprecated use `RedisCreateNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisCreateNetworkSwarm$outboundSchema;
  /** @deprecated use `RedisCreateNetworkSwarm$Outbound` instead. */
  export type Outbound = RedisCreateNetworkSwarm$Outbound;
}

export function redisCreateNetworkSwarmToJSON(
  redisCreateNetworkSwarm: RedisCreateNetworkSwarm,
): string {
  return JSON.stringify(
    RedisCreateNetworkSwarm$outboundSchema.parse(redisCreateNetworkSwarm),
  );
}

export function redisCreateNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisCreateNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisCreateNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisCreateNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const RedisCreateResponseBody$inboundSchema: z.ZodType<
  RedisCreateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  redisId: z.string(),
  name: z.string(),
  appName: z.string(),
  description: z.nullable(z.string()),
  databasePassword: z.string(),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  createdAt: z.string(),
  applicationStatus: RedisCreateApplicationStatus$inboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => RedisCreateHealthCheckSwarm$inboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => RedisCreateRestartPolicySwarm$inboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => RedisCreatePlacementSwarm$inboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => RedisCreateUpdateConfigSwarm$inboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => RedisCreateRollbackConfigSwarm$inboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => RedisCreateModeSwarm$inboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => RedisCreateNetworkSwarm$inboundSchema)),
  ),
  replicas: z.number(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
});

/** @internal */
export type RedisCreateResponseBody$Outbound = {
  redisId: string;
  name: string;
  appName: string;
  description: string | null;
  databasePassword: string;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  externalPort: number | null;
  createdAt: string;
  applicationStatus: string;
  healthCheckSwarm: RedisCreateHealthCheckSwarm$Outbound | null;
  restartPolicySwarm: RedisCreateRestartPolicySwarm$Outbound | null;
  placementSwarm: RedisCreatePlacementSwarm$Outbound | null;
  updateConfigSwarm: RedisCreateUpdateConfigSwarm$Outbound | null;
  rollbackConfigSwarm: RedisCreateRollbackConfigSwarm$Outbound | null;
  modeSwarm: RedisCreateModeSwarm$Outbound | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<RedisCreateNetworkSwarm$Outbound> | null;
  replicas: number;
  environmentId: string;
  serverId: string | null;
};

/** @internal */
export const RedisCreateResponseBody$outboundSchema: z.ZodType<
  RedisCreateResponseBody$Outbound,
  z.ZodTypeDef,
  RedisCreateResponseBody
> = z.object({
  redisId: z.string(),
  name: z.string(),
  appName: z.string(),
  description: z.nullable(z.string()),
  databasePassword: z.string(),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  createdAt: z.string(),
  applicationStatus: RedisCreateApplicationStatus$outboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => RedisCreateHealthCheckSwarm$outboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => RedisCreateRestartPolicySwarm$outboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => RedisCreatePlacementSwarm$outboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => RedisCreateUpdateConfigSwarm$outboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => RedisCreateRollbackConfigSwarm$outboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => RedisCreateModeSwarm$outboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => RedisCreateNetworkSwarm$outboundSchema)),
  ),
  replicas: z.number(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisCreateResponseBody$ {
  /** @deprecated use `RedisCreateResponseBody$inboundSchema` instead. */
  export const inboundSchema = RedisCreateResponseBody$inboundSchema;
  /** @deprecated use `RedisCreateResponseBody$outboundSchema` instead. */
  export const outboundSchema = RedisCreateResponseBody$outboundSchema;
  /** @deprecated use `RedisCreateResponseBody$Outbound` instead. */
  export type Outbound = RedisCreateResponseBody$Outbound;
}

export function redisCreateResponseBodyToJSON(
  redisCreateResponseBody: RedisCreateResponseBody,
): string {
  return JSON.stringify(
    RedisCreateResponseBody$outboundSchema.parse(redisCreateResponseBody),
  );
}

export function redisCreateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RedisCreateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisCreateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisCreateResponseBody' from JSON`,
  );
}

/** @internal */
export const RedisCreateResponse$inboundSchema: z.ZodType<
  RedisCreateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => RedisCreateResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type RedisCreateResponse$Outbound =
  | RedisCreateResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const RedisCreateResponse$outboundSchema: z.ZodType<
  RedisCreateResponse$Outbound,
  z.ZodTypeDef,
  RedisCreateResponse
> = z.union([
  z.lazy(() => RedisCreateResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisCreateResponse$ {
  /** @deprecated use `RedisCreateResponse$inboundSchema` instead. */
  export const inboundSchema = RedisCreateResponse$inboundSchema;
  /** @deprecated use `RedisCreateResponse$outboundSchema` instead. */
  export const outboundSchema = RedisCreateResponse$outboundSchema;
  /** @deprecated use `RedisCreateResponse$Outbound` instead. */
  export type Outbound = RedisCreateResponse$Outbound;
}

export function redisCreateResponseToJSON(
  redisCreateResponse: RedisCreateResponse,
): string {
  return JSON.stringify(
    RedisCreateResponse$outboundSchema.parse(redisCreateResponse),
  );
}

export function redisCreateResponseFromJSON(
  jsonString: string,
): SafeParseResult<RedisCreateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisCreateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisCreateResponse' from JSON`,
  );
}
