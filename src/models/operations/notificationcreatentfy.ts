/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NotificationCreateNtfySecurity = {
  authorization: string;
};

export type NotificationCreateNtfyRequest = {
  accessToken: string;
  appBuildError: boolean;
  appDeploy: boolean;
  databaseBackup: boolean;
  dockerCleanup: boolean;
  dokployRestart: boolean;
  name: string;
  priority: number;
  serverUrl: string;
  topic: string;
};

/** @internal */
export const NotificationCreateNtfySecurity$inboundSchema: z.ZodType<
  NotificationCreateNtfySecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type NotificationCreateNtfySecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const NotificationCreateNtfySecurity$outboundSchema: z.ZodType<
  NotificationCreateNtfySecurity$Outbound,
  z.ZodTypeDef,
  NotificationCreateNtfySecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationCreateNtfySecurity$ {
  /** @deprecated use `NotificationCreateNtfySecurity$inboundSchema` instead. */
  export const inboundSchema = NotificationCreateNtfySecurity$inboundSchema;
  /** @deprecated use `NotificationCreateNtfySecurity$outboundSchema` instead. */
  export const outboundSchema = NotificationCreateNtfySecurity$outboundSchema;
  /** @deprecated use `NotificationCreateNtfySecurity$Outbound` instead. */
  export type Outbound = NotificationCreateNtfySecurity$Outbound;
}

export function notificationCreateNtfySecurityToJSON(
  notificationCreateNtfySecurity: NotificationCreateNtfySecurity,
): string {
  return JSON.stringify(
    NotificationCreateNtfySecurity$outboundSchema.parse(
      notificationCreateNtfySecurity,
    ),
  );
}

export function notificationCreateNtfySecurityFromJSON(
  jsonString: string,
): SafeParseResult<NotificationCreateNtfySecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationCreateNtfySecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationCreateNtfySecurity' from JSON`,
  );
}

/** @internal */
export const NotificationCreateNtfyRequest$inboundSchema: z.ZodType<
  NotificationCreateNtfyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.string(),
  appBuildError: z.boolean(),
  appDeploy: z.boolean(),
  databaseBackup: z.boolean(),
  dockerCleanup: z.boolean(),
  dokployRestart: z.boolean(),
  name: z.string(),
  priority: z.number(),
  serverUrl: z.string(),
  topic: z.string(),
});

/** @internal */
export type NotificationCreateNtfyRequest$Outbound = {
  accessToken: string;
  appBuildError: boolean;
  appDeploy: boolean;
  databaseBackup: boolean;
  dockerCleanup: boolean;
  dokployRestart: boolean;
  name: string;
  priority: number;
  serverUrl: string;
  topic: string;
};

/** @internal */
export const NotificationCreateNtfyRequest$outboundSchema: z.ZodType<
  NotificationCreateNtfyRequest$Outbound,
  z.ZodTypeDef,
  NotificationCreateNtfyRequest
> = z.object({
  accessToken: z.string(),
  appBuildError: z.boolean(),
  appDeploy: z.boolean(),
  databaseBackup: z.boolean(),
  dockerCleanup: z.boolean(),
  dokployRestart: z.boolean(),
  name: z.string(),
  priority: z.number(),
  serverUrl: z.string(),
  topic: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationCreateNtfyRequest$ {
  /** @deprecated use `NotificationCreateNtfyRequest$inboundSchema` instead. */
  export const inboundSchema = NotificationCreateNtfyRequest$inboundSchema;
  /** @deprecated use `NotificationCreateNtfyRequest$outboundSchema` instead. */
  export const outboundSchema = NotificationCreateNtfyRequest$outboundSchema;
  /** @deprecated use `NotificationCreateNtfyRequest$Outbound` instead. */
  export type Outbound = NotificationCreateNtfyRequest$Outbound;
}

export function notificationCreateNtfyRequestToJSON(
  notificationCreateNtfyRequest: NotificationCreateNtfyRequest,
): string {
  return JSON.stringify(
    NotificationCreateNtfyRequest$outboundSchema.parse(
      notificationCreateNtfyRequest,
    ),
  );
}

export function notificationCreateNtfyRequestFromJSON(
  jsonString: string,
): SafeParseResult<NotificationCreateNtfyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationCreateNtfyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationCreateNtfyRequest' from JSON`,
  );
}
