/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PostgresUpdateSecurity = {
  authorization: string;
};

export const PostgresUpdateApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type PostgresUpdateApplicationStatus = ClosedEnum<
  typeof PostgresUpdateApplicationStatus
>;

export type PostgresUpdateHealthCheckSwarm = {
  interval?: number | undefined;
  retries?: number | undefined;
  startPeriod?: number | undefined;
  test?: Array<string> | undefined;
  timeout?: number | undefined;
};

export type PostgresUpdateGlobal = {};

export type PostgresUpdateGlobalJob = {};

export type PostgresUpdateReplicated = {
  replicas?: number | undefined;
};

export type PostgresUpdateReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type PostgresUpdateModeSwarm = {
  global?: PostgresUpdateGlobal | undefined;
  globalJob?: PostgresUpdateGlobalJob | undefined;
  replicated?: PostgresUpdateReplicated | undefined;
  replicatedJob?: PostgresUpdateReplicatedJob | undefined;
};

export type PostgresUpdateDriverOpts = {};

export type PostgresUpdateNetworkSwarm = {
  aliases?: Array<string> | undefined;
  driverOpts?: PostgresUpdateDriverOpts | undefined;
  target?: string | undefined;
};

export type PostgresUpdatePlatform = {
  architecture: string;
  os: string;
};

export type PostgresUpdateSpread = {
  spreadDescriptor: string;
};

export type PostgresUpdatePreference = {
  spread: PostgresUpdateSpread;
};

export type PostgresUpdatePlacementSwarm = {
  constraints?: Array<string> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<PostgresUpdatePlatform> | undefined;
  preferences?: Array<PostgresUpdatePreference> | undefined;
};

export type PostgresUpdateRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type PostgresUpdateRollbackConfigSwarm = {
  delay?: number | undefined;
  failureAction?: string | undefined;
  maxFailureRatio?: number | undefined;
  monitor?: number | undefined;
  order: string;
  parallelism: number;
};

export type PostgresUpdateUpdateConfigSwarm = {
  delay?: number | undefined;
  failureAction?: string | undefined;
  maxFailureRatio?: number | undefined;
  monitor?: number | undefined;
  order: string;
  parallelism: number;
};

export type PostgresUpdateRequest = {
  appName?: string | undefined;
  applicationStatus?: PostgresUpdateApplicationStatus | undefined;
  command?: string | null | undefined;
  cpuLimit?: string | null | undefined;
  cpuReservation?: string | null | undefined;
  createdAt?: string | undefined;
  databaseName?: string | undefined;
  databasePassword?: string | undefined;
  databaseUser?: string | undefined;
  description?: string | null | undefined;
  dockerImage?: string | undefined;
  env?: string | null | undefined;
  environmentId?: string | undefined;
  externalPort?: number | null | undefined;
  healthCheckSwarm?: PostgresUpdateHealthCheckSwarm | null | undefined;
  labelsSwarm?: { [k: string]: string } | null | undefined;
  memoryLimit?: string | null | undefined;
  memoryReservation?: string | null | undefined;
  modeSwarm?: PostgresUpdateModeSwarm | null | undefined;
  name?: string | undefined;
  networkSwarm?: Array<PostgresUpdateNetworkSwarm> | null | undefined;
  placementSwarm?: PostgresUpdatePlacementSwarm | null | undefined;
  postgresId: string;
  replicas?: number | undefined;
  restartPolicySwarm?: PostgresUpdateRestartPolicySwarm | null | undefined;
  rollbackConfigSwarm?: PostgresUpdateRollbackConfigSwarm | null | undefined;
  updateConfigSwarm?: PostgresUpdateUpdateConfigSwarm | null | undefined;
};

export type PostgresUpdateResponse = models.ErrorT | boolean;

/** @internal */
export const PostgresUpdateSecurity$inboundSchema: z.ZodType<
  PostgresUpdateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type PostgresUpdateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const PostgresUpdateSecurity$outboundSchema: z.ZodType<
  PostgresUpdateSecurity$Outbound,
  z.ZodTypeDef,
  PostgresUpdateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresUpdateSecurity$ {
  /** @deprecated use `PostgresUpdateSecurity$inboundSchema` instead. */
  export const inboundSchema = PostgresUpdateSecurity$inboundSchema;
  /** @deprecated use `PostgresUpdateSecurity$outboundSchema` instead. */
  export const outboundSchema = PostgresUpdateSecurity$outboundSchema;
  /** @deprecated use `PostgresUpdateSecurity$Outbound` instead. */
  export type Outbound = PostgresUpdateSecurity$Outbound;
}

export function postgresUpdateSecurityToJSON(
  postgresUpdateSecurity: PostgresUpdateSecurity,
): string {
  return JSON.stringify(
    PostgresUpdateSecurity$outboundSchema.parse(postgresUpdateSecurity),
  );
}

export function postgresUpdateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<PostgresUpdateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresUpdateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresUpdateSecurity' from JSON`,
  );
}

/** @internal */
export const PostgresUpdateApplicationStatus$inboundSchema: z.ZodNativeEnum<
  typeof PostgresUpdateApplicationStatus
> = z.nativeEnum(PostgresUpdateApplicationStatus);

/** @internal */
export const PostgresUpdateApplicationStatus$outboundSchema: z.ZodNativeEnum<
  typeof PostgresUpdateApplicationStatus
> = PostgresUpdateApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresUpdateApplicationStatus$ {
  /** @deprecated use `PostgresUpdateApplicationStatus$inboundSchema` instead. */
  export const inboundSchema = PostgresUpdateApplicationStatus$inboundSchema;
  /** @deprecated use `PostgresUpdateApplicationStatus$outboundSchema` instead. */
  export const outboundSchema = PostgresUpdateApplicationStatus$outboundSchema;
}

/** @internal */
export const PostgresUpdateHealthCheckSwarm$inboundSchema: z.ZodType<
  PostgresUpdateHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Interval: z.number().optional(),
  Retries: z.number().optional(),
  StartPeriod: z.number().optional(),
  Test: z.array(z.string()).optional(),
  Timeout: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Interval": "interval",
    "Retries": "retries",
    "StartPeriod": "startPeriod",
    "Test": "test",
    "Timeout": "timeout",
  });
});

/** @internal */
export type PostgresUpdateHealthCheckSwarm$Outbound = {
  Interval?: number | undefined;
  Retries?: number | undefined;
  StartPeriod?: number | undefined;
  Test?: Array<string> | undefined;
  Timeout?: number | undefined;
};

/** @internal */
export const PostgresUpdateHealthCheckSwarm$outboundSchema: z.ZodType<
  PostgresUpdateHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  PostgresUpdateHealthCheckSwarm
> = z.object({
  interval: z.number().optional(),
  retries: z.number().optional(),
  startPeriod: z.number().optional(),
  test: z.array(z.string()).optional(),
  timeout: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    interval: "Interval",
    retries: "Retries",
    startPeriod: "StartPeriod",
    test: "Test",
    timeout: "Timeout",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresUpdateHealthCheckSwarm$ {
  /** @deprecated use `PostgresUpdateHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresUpdateHealthCheckSwarm$inboundSchema;
  /** @deprecated use `PostgresUpdateHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema = PostgresUpdateHealthCheckSwarm$outboundSchema;
  /** @deprecated use `PostgresUpdateHealthCheckSwarm$Outbound` instead. */
  export type Outbound = PostgresUpdateHealthCheckSwarm$Outbound;
}

export function postgresUpdateHealthCheckSwarmToJSON(
  postgresUpdateHealthCheckSwarm: PostgresUpdateHealthCheckSwarm,
): string {
  return JSON.stringify(
    PostgresUpdateHealthCheckSwarm$outboundSchema.parse(
      postgresUpdateHealthCheckSwarm,
    ),
  );
}

export function postgresUpdateHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresUpdateHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresUpdateHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresUpdateHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresUpdateGlobal$inboundSchema: z.ZodType<
  PostgresUpdateGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostgresUpdateGlobal$Outbound = {};

/** @internal */
export const PostgresUpdateGlobal$outboundSchema: z.ZodType<
  PostgresUpdateGlobal$Outbound,
  z.ZodTypeDef,
  PostgresUpdateGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresUpdateGlobal$ {
  /** @deprecated use `PostgresUpdateGlobal$inboundSchema` instead. */
  export const inboundSchema = PostgresUpdateGlobal$inboundSchema;
  /** @deprecated use `PostgresUpdateGlobal$outboundSchema` instead. */
  export const outboundSchema = PostgresUpdateGlobal$outboundSchema;
  /** @deprecated use `PostgresUpdateGlobal$Outbound` instead. */
  export type Outbound = PostgresUpdateGlobal$Outbound;
}

export function postgresUpdateGlobalToJSON(
  postgresUpdateGlobal: PostgresUpdateGlobal,
): string {
  return JSON.stringify(
    PostgresUpdateGlobal$outboundSchema.parse(postgresUpdateGlobal),
  );
}

export function postgresUpdateGlobalFromJSON(
  jsonString: string,
): SafeParseResult<PostgresUpdateGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresUpdateGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresUpdateGlobal' from JSON`,
  );
}

/** @internal */
export const PostgresUpdateGlobalJob$inboundSchema: z.ZodType<
  PostgresUpdateGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostgresUpdateGlobalJob$Outbound = {};

/** @internal */
export const PostgresUpdateGlobalJob$outboundSchema: z.ZodType<
  PostgresUpdateGlobalJob$Outbound,
  z.ZodTypeDef,
  PostgresUpdateGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresUpdateGlobalJob$ {
  /** @deprecated use `PostgresUpdateGlobalJob$inboundSchema` instead. */
  export const inboundSchema = PostgresUpdateGlobalJob$inboundSchema;
  /** @deprecated use `PostgresUpdateGlobalJob$outboundSchema` instead. */
  export const outboundSchema = PostgresUpdateGlobalJob$outboundSchema;
  /** @deprecated use `PostgresUpdateGlobalJob$Outbound` instead. */
  export type Outbound = PostgresUpdateGlobalJob$Outbound;
}

export function postgresUpdateGlobalJobToJSON(
  postgresUpdateGlobalJob: PostgresUpdateGlobalJob,
): string {
  return JSON.stringify(
    PostgresUpdateGlobalJob$outboundSchema.parse(postgresUpdateGlobalJob),
  );
}

export function postgresUpdateGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<PostgresUpdateGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresUpdateGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresUpdateGlobalJob' from JSON`,
  );
}

/** @internal */
export const PostgresUpdateReplicated$inboundSchema: z.ZodType<
  PostgresUpdateReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type PostgresUpdateReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const PostgresUpdateReplicated$outboundSchema: z.ZodType<
  PostgresUpdateReplicated$Outbound,
  z.ZodTypeDef,
  PostgresUpdateReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresUpdateReplicated$ {
  /** @deprecated use `PostgresUpdateReplicated$inboundSchema` instead. */
  export const inboundSchema = PostgresUpdateReplicated$inboundSchema;
  /** @deprecated use `PostgresUpdateReplicated$outboundSchema` instead. */
  export const outboundSchema = PostgresUpdateReplicated$outboundSchema;
  /** @deprecated use `PostgresUpdateReplicated$Outbound` instead. */
  export type Outbound = PostgresUpdateReplicated$Outbound;
}

export function postgresUpdateReplicatedToJSON(
  postgresUpdateReplicated: PostgresUpdateReplicated,
): string {
  return JSON.stringify(
    PostgresUpdateReplicated$outboundSchema.parse(postgresUpdateReplicated),
  );
}

export function postgresUpdateReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<PostgresUpdateReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresUpdateReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresUpdateReplicated' from JSON`,
  );
}

/** @internal */
export const PostgresUpdateReplicatedJob$inboundSchema: z.ZodType<
  PostgresUpdateReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type PostgresUpdateReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const PostgresUpdateReplicatedJob$outboundSchema: z.ZodType<
  PostgresUpdateReplicatedJob$Outbound,
  z.ZodTypeDef,
  PostgresUpdateReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresUpdateReplicatedJob$ {
  /** @deprecated use `PostgresUpdateReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = PostgresUpdateReplicatedJob$inboundSchema;
  /** @deprecated use `PostgresUpdateReplicatedJob$outboundSchema` instead. */
  export const outboundSchema = PostgresUpdateReplicatedJob$outboundSchema;
  /** @deprecated use `PostgresUpdateReplicatedJob$Outbound` instead. */
  export type Outbound = PostgresUpdateReplicatedJob$Outbound;
}

export function postgresUpdateReplicatedJobToJSON(
  postgresUpdateReplicatedJob: PostgresUpdateReplicatedJob,
): string {
  return JSON.stringify(
    PostgresUpdateReplicatedJob$outboundSchema.parse(
      postgresUpdateReplicatedJob,
    ),
  );
}

export function postgresUpdateReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<PostgresUpdateReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresUpdateReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresUpdateReplicatedJob' from JSON`,
  );
}

/** @internal */
export const PostgresUpdateModeSwarm$inboundSchema: z.ZodType<
  PostgresUpdateModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Global: z.lazy(() => PostgresUpdateGlobal$inboundSchema).optional(),
  GlobalJob: z.lazy(() => PostgresUpdateGlobalJob$inboundSchema).optional(),
  Replicated: z.lazy(() => PostgresUpdateReplicated$inboundSchema).optional(),
  ReplicatedJob: z.lazy(() => PostgresUpdateReplicatedJob$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Global": "global",
    "GlobalJob": "globalJob",
    "Replicated": "replicated",
    "ReplicatedJob": "replicatedJob",
  });
});

/** @internal */
export type PostgresUpdateModeSwarm$Outbound = {
  Global?: PostgresUpdateGlobal$Outbound | undefined;
  GlobalJob?: PostgresUpdateGlobalJob$Outbound | undefined;
  Replicated?: PostgresUpdateReplicated$Outbound | undefined;
  ReplicatedJob?: PostgresUpdateReplicatedJob$Outbound | undefined;
};

/** @internal */
export const PostgresUpdateModeSwarm$outboundSchema: z.ZodType<
  PostgresUpdateModeSwarm$Outbound,
  z.ZodTypeDef,
  PostgresUpdateModeSwarm
> = z.object({
  global: z.lazy(() => PostgresUpdateGlobal$outboundSchema).optional(),
  globalJob: z.lazy(() => PostgresUpdateGlobalJob$outboundSchema).optional(),
  replicated: z.lazy(() => PostgresUpdateReplicated$outboundSchema).optional(),
  replicatedJob: z.lazy(() => PostgresUpdateReplicatedJob$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    global: "Global",
    globalJob: "GlobalJob",
    replicated: "Replicated",
    replicatedJob: "ReplicatedJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresUpdateModeSwarm$ {
  /** @deprecated use `PostgresUpdateModeSwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresUpdateModeSwarm$inboundSchema;
  /** @deprecated use `PostgresUpdateModeSwarm$outboundSchema` instead. */
  export const outboundSchema = PostgresUpdateModeSwarm$outboundSchema;
  /** @deprecated use `PostgresUpdateModeSwarm$Outbound` instead. */
  export type Outbound = PostgresUpdateModeSwarm$Outbound;
}

export function postgresUpdateModeSwarmToJSON(
  postgresUpdateModeSwarm: PostgresUpdateModeSwarm,
): string {
  return JSON.stringify(
    PostgresUpdateModeSwarm$outboundSchema.parse(postgresUpdateModeSwarm),
  );
}

export function postgresUpdateModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresUpdateModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresUpdateModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresUpdateModeSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresUpdateDriverOpts$inboundSchema: z.ZodType<
  PostgresUpdateDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostgresUpdateDriverOpts$Outbound = {};

/** @internal */
export const PostgresUpdateDriverOpts$outboundSchema: z.ZodType<
  PostgresUpdateDriverOpts$Outbound,
  z.ZodTypeDef,
  PostgresUpdateDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresUpdateDriverOpts$ {
  /** @deprecated use `PostgresUpdateDriverOpts$inboundSchema` instead. */
  export const inboundSchema = PostgresUpdateDriverOpts$inboundSchema;
  /** @deprecated use `PostgresUpdateDriverOpts$outboundSchema` instead. */
  export const outboundSchema = PostgresUpdateDriverOpts$outboundSchema;
  /** @deprecated use `PostgresUpdateDriverOpts$Outbound` instead. */
  export type Outbound = PostgresUpdateDriverOpts$Outbound;
}

export function postgresUpdateDriverOptsToJSON(
  postgresUpdateDriverOpts: PostgresUpdateDriverOpts,
): string {
  return JSON.stringify(
    PostgresUpdateDriverOpts$outboundSchema.parse(postgresUpdateDriverOpts),
  );
}

export function postgresUpdateDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<PostgresUpdateDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresUpdateDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresUpdateDriverOpts' from JSON`,
  );
}

/** @internal */
export const PostgresUpdateNetworkSwarm$inboundSchema: z.ZodType<
  PostgresUpdateNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => PostgresUpdateDriverOpts$inboundSchema).optional(),
  Target: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
    "Target": "target",
  });
});

/** @internal */
export type PostgresUpdateNetworkSwarm$Outbound = {
  Aliases?: Array<string> | undefined;
  DriverOpts?: PostgresUpdateDriverOpts$Outbound | undefined;
  Target?: string | undefined;
};

/** @internal */
export const PostgresUpdateNetworkSwarm$outboundSchema: z.ZodType<
  PostgresUpdateNetworkSwarm$Outbound,
  z.ZodTypeDef,
  PostgresUpdateNetworkSwarm
> = z.object({
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => PostgresUpdateDriverOpts$outboundSchema).optional(),
  target: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    aliases: "Aliases",
    driverOpts: "DriverOpts",
    target: "Target",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresUpdateNetworkSwarm$ {
  /** @deprecated use `PostgresUpdateNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresUpdateNetworkSwarm$inboundSchema;
  /** @deprecated use `PostgresUpdateNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = PostgresUpdateNetworkSwarm$outboundSchema;
  /** @deprecated use `PostgresUpdateNetworkSwarm$Outbound` instead. */
  export type Outbound = PostgresUpdateNetworkSwarm$Outbound;
}

export function postgresUpdateNetworkSwarmToJSON(
  postgresUpdateNetworkSwarm: PostgresUpdateNetworkSwarm,
): string {
  return JSON.stringify(
    PostgresUpdateNetworkSwarm$outboundSchema.parse(postgresUpdateNetworkSwarm),
  );
}

export function postgresUpdateNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresUpdateNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresUpdateNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresUpdateNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresUpdatePlatform$inboundSchema: z.ZodType<
  PostgresUpdatePlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type PostgresUpdatePlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const PostgresUpdatePlatform$outboundSchema: z.ZodType<
  PostgresUpdatePlatform$Outbound,
  z.ZodTypeDef,
  PostgresUpdatePlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresUpdatePlatform$ {
  /** @deprecated use `PostgresUpdatePlatform$inboundSchema` instead. */
  export const inboundSchema = PostgresUpdatePlatform$inboundSchema;
  /** @deprecated use `PostgresUpdatePlatform$outboundSchema` instead. */
  export const outboundSchema = PostgresUpdatePlatform$outboundSchema;
  /** @deprecated use `PostgresUpdatePlatform$Outbound` instead. */
  export type Outbound = PostgresUpdatePlatform$Outbound;
}

export function postgresUpdatePlatformToJSON(
  postgresUpdatePlatform: PostgresUpdatePlatform,
): string {
  return JSON.stringify(
    PostgresUpdatePlatform$outboundSchema.parse(postgresUpdatePlatform),
  );
}

export function postgresUpdatePlatformFromJSON(
  jsonString: string,
): SafeParseResult<PostgresUpdatePlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresUpdatePlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresUpdatePlatform' from JSON`,
  );
}

/** @internal */
export const PostgresUpdateSpread$inboundSchema: z.ZodType<
  PostgresUpdateSpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type PostgresUpdateSpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const PostgresUpdateSpread$outboundSchema: z.ZodType<
  PostgresUpdateSpread$Outbound,
  z.ZodTypeDef,
  PostgresUpdateSpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresUpdateSpread$ {
  /** @deprecated use `PostgresUpdateSpread$inboundSchema` instead. */
  export const inboundSchema = PostgresUpdateSpread$inboundSchema;
  /** @deprecated use `PostgresUpdateSpread$outboundSchema` instead. */
  export const outboundSchema = PostgresUpdateSpread$outboundSchema;
  /** @deprecated use `PostgresUpdateSpread$Outbound` instead. */
  export type Outbound = PostgresUpdateSpread$Outbound;
}

export function postgresUpdateSpreadToJSON(
  postgresUpdateSpread: PostgresUpdateSpread,
): string {
  return JSON.stringify(
    PostgresUpdateSpread$outboundSchema.parse(postgresUpdateSpread),
  );
}

export function postgresUpdateSpreadFromJSON(
  jsonString: string,
): SafeParseResult<PostgresUpdateSpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresUpdateSpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresUpdateSpread' from JSON`,
  );
}

/** @internal */
export const PostgresUpdatePreference$inboundSchema: z.ZodType<
  PostgresUpdatePreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => PostgresUpdateSpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type PostgresUpdatePreference$Outbound = {
  Spread: PostgresUpdateSpread$Outbound;
};

/** @internal */
export const PostgresUpdatePreference$outboundSchema: z.ZodType<
  PostgresUpdatePreference$Outbound,
  z.ZodTypeDef,
  PostgresUpdatePreference
> = z.object({
  spread: z.lazy(() => PostgresUpdateSpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresUpdatePreference$ {
  /** @deprecated use `PostgresUpdatePreference$inboundSchema` instead. */
  export const inboundSchema = PostgresUpdatePreference$inboundSchema;
  /** @deprecated use `PostgresUpdatePreference$outboundSchema` instead. */
  export const outboundSchema = PostgresUpdatePreference$outboundSchema;
  /** @deprecated use `PostgresUpdatePreference$Outbound` instead. */
  export type Outbound = PostgresUpdatePreference$Outbound;
}

export function postgresUpdatePreferenceToJSON(
  postgresUpdatePreference: PostgresUpdatePreference,
): string {
  return JSON.stringify(
    PostgresUpdatePreference$outboundSchema.parse(postgresUpdatePreference),
  );
}

export function postgresUpdatePreferenceFromJSON(
  jsonString: string,
): SafeParseResult<PostgresUpdatePreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresUpdatePreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresUpdatePreference' from JSON`,
  );
}

/** @internal */
export const PostgresUpdatePlacementSwarm$inboundSchema: z.ZodType<
  PostgresUpdatePlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => PostgresUpdatePlatform$inboundSchema))
    .optional(),
  Preferences: z.array(z.lazy(() => PostgresUpdatePreference$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
    "Preferences": "preferences",
  });
});

/** @internal */
export type PostgresUpdatePlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<PostgresUpdatePlatform$Outbound> | undefined;
  Preferences?: Array<PostgresUpdatePreference$Outbound> | undefined;
};

/** @internal */
export const PostgresUpdatePlacementSwarm$outboundSchema: z.ZodType<
  PostgresUpdatePlacementSwarm$Outbound,
  z.ZodTypeDef,
  PostgresUpdatePlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => PostgresUpdatePlatform$outboundSchema))
    .optional(),
  preferences: z.array(z.lazy(() => PostgresUpdatePreference$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
    preferences: "Preferences",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresUpdatePlacementSwarm$ {
  /** @deprecated use `PostgresUpdatePlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresUpdatePlacementSwarm$inboundSchema;
  /** @deprecated use `PostgresUpdatePlacementSwarm$outboundSchema` instead. */
  export const outboundSchema = PostgresUpdatePlacementSwarm$outboundSchema;
  /** @deprecated use `PostgresUpdatePlacementSwarm$Outbound` instead. */
  export type Outbound = PostgresUpdatePlacementSwarm$Outbound;
}

export function postgresUpdatePlacementSwarmToJSON(
  postgresUpdatePlacementSwarm: PostgresUpdatePlacementSwarm,
): string {
  return JSON.stringify(
    PostgresUpdatePlacementSwarm$outboundSchema.parse(
      postgresUpdatePlacementSwarm,
    ),
  );
}

export function postgresUpdatePlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresUpdatePlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresUpdatePlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresUpdatePlacementSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresUpdateRestartPolicySwarm$inboundSchema: z.ZodType<
  PostgresUpdateRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type PostgresUpdateRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const PostgresUpdateRestartPolicySwarm$outboundSchema: z.ZodType<
  PostgresUpdateRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  PostgresUpdateRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresUpdateRestartPolicySwarm$ {
  /** @deprecated use `PostgresUpdateRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresUpdateRestartPolicySwarm$inboundSchema;
  /** @deprecated use `PostgresUpdateRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema = PostgresUpdateRestartPolicySwarm$outboundSchema;
  /** @deprecated use `PostgresUpdateRestartPolicySwarm$Outbound` instead. */
  export type Outbound = PostgresUpdateRestartPolicySwarm$Outbound;
}

export function postgresUpdateRestartPolicySwarmToJSON(
  postgresUpdateRestartPolicySwarm: PostgresUpdateRestartPolicySwarm,
): string {
  return JSON.stringify(
    PostgresUpdateRestartPolicySwarm$outboundSchema.parse(
      postgresUpdateRestartPolicySwarm,
    ),
  );
}

export function postgresUpdateRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresUpdateRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresUpdateRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresUpdateRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const PostgresUpdateRollbackConfigSwarm$inboundSchema: z.ZodType<
  PostgresUpdateRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  MaxFailureRatio: z.number().optional(),
  Monitor: z.number().optional(),
  Order: z.string(),
  Parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    "Delay": "delay",
    "FailureAction": "failureAction",
    "MaxFailureRatio": "maxFailureRatio",
    "Monitor": "monitor",
    "Order": "order",
    "Parallelism": "parallelism",
  });
});

/** @internal */
export type PostgresUpdateRollbackConfigSwarm$Outbound = {
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  MaxFailureRatio?: number | undefined;
  Monitor?: number | undefined;
  Order: string;
  Parallelism: number;
};

/** @internal */
export const PostgresUpdateRollbackConfigSwarm$outboundSchema: z.ZodType<
  PostgresUpdateRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  PostgresUpdateRollbackConfigSwarm
> = z.object({
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  maxFailureRatio: z.number().optional(),
  monitor: z.number().optional(),
  order: z.string(),
  parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    delay: "Delay",
    failureAction: "FailureAction",
    maxFailureRatio: "MaxFailureRatio",
    monitor: "Monitor",
    order: "Order",
    parallelism: "Parallelism",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresUpdateRollbackConfigSwarm$ {
  /** @deprecated use `PostgresUpdateRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresUpdateRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `PostgresUpdateRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema =
    PostgresUpdateRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `PostgresUpdateRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = PostgresUpdateRollbackConfigSwarm$Outbound;
}

export function postgresUpdateRollbackConfigSwarmToJSON(
  postgresUpdateRollbackConfigSwarm: PostgresUpdateRollbackConfigSwarm,
): string {
  return JSON.stringify(
    PostgresUpdateRollbackConfigSwarm$outboundSchema.parse(
      postgresUpdateRollbackConfigSwarm,
    ),
  );
}

export function postgresUpdateRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresUpdateRollbackConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresUpdateRollbackConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresUpdateRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresUpdateUpdateConfigSwarm$inboundSchema: z.ZodType<
  PostgresUpdateUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  MaxFailureRatio: z.number().optional(),
  Monitor: z.number().optional(),
  Order: z.string(),
  Parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    "Delay": "delay",
    "FailureAction": "failureAction",
    "MaxFailureRatio": "maxFailureRatio",
    "Monitor": "monitor",
    "Order": "order",
    "Parallelism": "parallelism",
  });
});

/** @internal */
export type PostgresUpdateUpdateConfigSwarm$Outbound = {
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  MaxFailureRatio?: number | undefined;
  Monitor?: number | undefined;
  Order: string;
  Parallelism: number;
};

/** @internal */
export const PostgresUpdateUpdateConfigSwarm$outboundSchema: z.ZodType<
  PostgresUpdateUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  PostgresUpdateUpdateConfigSwarm
> = z.object({
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  maxFailureRatio: z.number().optional(),
  monitor: z.number().optional(),
  order: z.string(),
  parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    delay: "Delay",
    failureAction: "FailureAction",
    maxFailureRatio: "MaxFailureRatio",
    monitor: "Monitor",
    order: "Order",
    parallelism: "Parallelism",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresUpdateUpdateConfigSwarm$ {
  /** @deprecated use `PostgresUpdateUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresUpdateUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `PostgresUpdateUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = PostgresUpdateUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `PostgresUpdateUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = PostgresUpdateUpdateConfigSwarm$Outbound;
}

export function postgresUpdateUpdateConfigSwarmToJSON(
  postgresUpdateUpdateConfigSwarm: PostgresUpdateUpdateConfigSwarm,
): string {
  return JSON.stringify(
    PostgresUpdateUpdateConfigSwarm$outboundSchema.parse(
      postgresUpdateUpdateConfigSwarm,
    ),
  );
}

export function postgresUpdateUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresUpdateUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresUpdateUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresUpdateUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresUpdateRequest$inboundSchema: z.ZodType<
  PostgresUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string().optional(),
  applicationStatus: PostgresUpdateApplicationStatus$inboundSchema.optional(),
  command: z.nullable(z.string()).optional(),
  cpuLimit: z.nullable(z.string()).optional(),
  cpuReservation: z.nullable(z.string()).optional(),
  createdAt: z.string().optional(),
  databaseName: z.string().optional(),
  databasePassword: z.string().optional(),
  databaseUser: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  dockerImage: z.string().default("postgres:15"),
  env: z.nullable(z.string()).optional(),
  environmentId: z.string().optional(),
  externalPort: z.nullable(z.number()).optional(),
  healthCheckSwarm: z.nullable(
    z.lazy(() => PostgresUpdateHealthCheckSwarm$inboundSchema),
  ).optional(),
  labelsSwarm: z.nullable(z.record(z.string())).optional(),
  memoryLimit: z.nullable(z.string()).optional(),
  memoryReservation: z.nullable(z.string()).optional(),
  modeSwarm: z.nullable(z.lazy(() => PostgresUpdateModeSwarm$inboundSchema))
    .optional(),
  name: z.string().optional(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => PostgresUpdateNetworkSwarm$inboundSchema)),
  ).optional(),
  placementSwarm: z.nullable(
    z.lazy(() => PostgresUpdatePlacementSwarm$inboundSchema),
  ).optional(),
  postgresId: z.string(),
  replicas: z.number().optional(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => PostgresUpdateRestartPolicySwarm$inboundSchema),
  ).optional(),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => PostgresUpdateRollbackConfigSwarm$inboundSchema),
  ).optional(),
  updateConfigSwarm: z.nullable(
    z.lazy(() => PostgresUpdateUpdateConfigSwarm$inboundSchema),
  ).optional(),
});

/** @internal */
export type PostgresUpdateRequest$Outbound = {
  appName?: string | undefined;
  applicationStatus?: string | undefined;
  command?: string | null | undefined;
  cpuLimit?: string | null | undefined;
  cpuReservation?: string | null | undefined;
  createdAt?: string | undefined;
  databaseName?: string | undefined;
  databasePassword?: string | undefined;
  databaseUser?: string | undefined;
  description?: string | null | undefined;
  dockerImage: string;
  env?: string | null | undefined;
  environmentId?: string | undefined;
  externalPort?: number | null | undefined;
  healthCheckSwarm?: PostgresUpdateHealthCheckSwarm$Outbound | null | undefined;
  labelsSwarm?: { [k: string]: string } | null | undefined;
  memoryLimit?: string | null | undefined;
  memoryReservation?: string | null | undefined;
  modeSwarm?: PostgresUpdateModeSwarm$Outbound | null | undefined;
  name?: string | undefined;
  networkSwarm?: Array<PostgresUpdateNetworkSwarm$Outbound> | null | undefined;
  placementSwarm?: PostgresUpdatePlacementSwarm$Outbound | null | undefined;
  postgresId: string;
  replicas?: number | undefined;
  restartPolicySwarm?:
    | PostgresUpdateRestartPolicySwarm$Outbound
    | null
    | undefined;
  rollbackConfigSwarm?:
    | PostgresUpdateRollbackConfigSwarm$Outbound
    | null
    | undefined;
  updateConfigSwarm?:
    | PostgresUpdateUpdateConfigSwarm$Outbound
    | null
    | undefined;
};

/** @internal */
export const PostgresUpdateRequest$outboundSchema: z.ZodType<
  PostgresUpdateRequest$Outbound,
  z.ZodTypeDef,
  PostgresUpdateRequest
> = z.object({
  appName: z.string().optional(),
  applicationStatus: PostgresUpdateApplicationStatus$outboundSchema.optional(),
  command: z.nullable(z.string()).optional(),
  cpuLimit: z.nullable(z.string()).optional(),
  cpuReservation: z.nullable(z.string()).optional(),
  createdAt: z.string().optional(),
  databaseName: z.string().optional(),
  databasePassword: z.string().optional(),
  databaseUser: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  dockerImage: z.string().default("postgres:15"),
  env: z.nullable(z.string()).optional(),
  environmentId: z.string().optional(),
  externalPort: z.nullable(z.number()).optional(),
  healthCheckSwarm: z.nullable(
    z.lazy(() => PostgresUpdateHealthCheckSwarm$outboundSchema),
  ).optional(),
  labelsSwarm: z.nullable(z.record(z.string())).optional(),
  memoryLimit: z.nullable(z.string()).optional(),
  memoryReservation: z.nullable(z.string()).optional(),
  modeSwarm: z.nullable(z.lazy(() => PostgresUpdateModeSwarm$outboundSchema))
    .optional(),
  name: z.string().optional(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => PostgresUpdateNetworkSwarm$outboundSchema)),
  ).optional(),
  placementSwarm: z.nullable(
    z.lazy(() => PostgresUpdatePlacementSwarm$outboundSchema),
  ).optional(),
  postgresId: z.string(),
  replicas: z.number().optional(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => PostgresUpdateRestartPolicySwarm$outboundSchema),
  ).optional(),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => PostgresUpdateRollbackConfigSwarm$outboundSchema),
  ).optional(),
  updateConfigSwarm: z.nullable(
    z.lazy(() => PostgresUpdateUpdateConfigSwarm$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresUpdateRequest$ {
  /** @deprecated use `PostgresUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = PostgresUpdateRequest$inboundSchema;
  /** @deprecated use `PostgresUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = PostgresUpdateRequest$outboundSchema;
  /** @deprecated use `PostgresUpdateRequest$Outbound` instead. */
  export type Outbound = PostgresUpdateRequest$Outbound;
}

export function postgresUpdateRequestToJSON(
  postgresUpdateRequest: PostgresUpdateRequest,
): string {
  return JSON.stringify(
    PostgresUpdateRequest$outboundSchema.parse(postgresUpdateRequest),
  );
}

export function postgresUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostgresUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresUpdateRequest' from JSON`,
  );
}

/** @internal */
export const PostgresUpdateResponse$inboundSchema: z.ZodType<
  PostgresUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.boolean()]);

/** @internal */
export type PostgresUpdateResponse$Outbound = models.ErrorT$Outbound | boolean;

/** @internal */
export const PostgresUpdateResponse$outboundSchema: z.ZodType<
  PostgresUpdateResponse$Outbound,
  z.ZodTypeDef,
  PostgresUpdateResponse
> = z.union([models.ErrorT$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresUpdateResponse$ {
  /** @deprecated use `PostgresUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = PostgresUpdateResponse$inboundSchema;
  /** @deprecated use `PostgresUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = PostgresUpdateResponse$outboundSchema;
  /** @deprecated use `PostgresUpdateResponse$Outbound` instead. */
  export type Outbound = PostgresUpdateResponse$Outbound;
}

export function postgresUpdateResponseToJSON(
  postgresUpdateResponse: PostgresUpdateResponse,
): string {
  return JSON.stringify(
    PostgresUpdateResponse$outboundSchema.parse(postgresUpdateResponse),
  );
}

export function postgresUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostgresUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresUpdateResponse' from JSON`,
  );
}
