/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GiteaGetGiteaUrlRequest = {
  giteaId: string;
};

export type GiteaGetGiteaUrlResponse = models.ErrorT | string;

/** @internal */
export const GiteaGetGiteaUrlRequest$inboundSchema: z.ZodType<
  GiteaGetGiteaUrlRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  giteaId: z.string(),
});

/** @internal */
export type GiteaGetGiteaUrlRequest$Outbound = {
  giteaId: string;
};

/** @internal */
export const GiteaGetGiteaUrlRequest$outboundSchema: z.ZodType<
  GiteaGetGiteaUrlRequest$Outbound,
  z.ZodTypeDef,
  GiteaGetGiteaUrlRequest
> = z.object({
  giteaId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiteaGetGiteaUrlRequest$ {
  /** @deprecated use `GiteaGetGiteaUrlRequest$inboundSchema` instead. */
  export const inboundSchema = GiteaGetGiteaUrlRequest$inboundSchema;
  /** @deprecated use `GiteaGetGiteaUrlRequest$outboundSchema` instead. */
  export const outboundSchema = GiteaGetGiteaUrlRequest$outboundSchema;
  /** @deprecated use `GiteaGetGiteaUrlRequest$Outbound` instead. */
  export type Outbound = GiteaGetGiteaUrlRequest$Outbound;
}

export function giteaGetGiteaUrlRequestToJSON(
  giteaGetGiteaUrlRequest: GiteaGetGiteaUrlRequest,
): string {
  return JSON.stringify(
    GiteaGetGiteaUrlRequest$outboundSchema.parse(giteaGetGiteaUrlRequest),
  );
}

export function giteaGetGiteaUrlRequestFromJSON(
  jsonString: string,
): SafeParseResult<GiteaGetGiteaUrlRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiteaGetGiteaUrlRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiteaGetGiteaUrlRequest' from JSON`,
  );
}

/** @internal */
export const GiteaGetGiteaUrlResponse$inboundSchema: z.ZodType<
  GiteaGetGiteaUrlResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.string()]);

/** @internal */
export type GiteaGetGiteaUrlResponse$Outbound = models.ErrorT$Outbound | string;

/** @internal */
export const GiteaGetGiteaUrlResponse$outboundSchema: z.ZodType<
  GiteaGetGiteaUrlResponse$Outbound,
  z.ZodTypeDef,
  GiteaGetGiteaUrlResponse
> = z.union([models.ErrorT$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiteaGetGiteaUrlResponse$ {
  /** @deprecated use `GiteaGetGiteaUrlResponse$inboundSchema` instead. */
  export const inboundSchema = GiteaGetGiteaUrlResponse$inboundSchema;
  /** @deprecated use `GiteaGetGiteaUrlResponse$outboundSchema` instead. */
  export const outboundSchema = GiteaGetGiteaUrlResponse$outboundSchema;
  /** @deprecated use `GiteaGetGiteaUrlResponse$Outbound` instead. */
  export type Outbound = GiteaGetGiteaUrlResponse$Outbound;
}

export function giteaGetGiteaUrlResponseToJSON(
  giteaGetGiteaUrlResponse: GiteaGetGiteaUrlResponse,
): string {
  return JSON.stringify(
    GiteaGetGiteaUrlResponse$outboundSchema.parse(giteaGetGiteaUrlResponse),
  );
}

export function giteaGetGiteaUrlResponseFromJSON(
  jsonString: string,
): SafeParseResult<GiteaGetGiteaUrlResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiteaGetGiteaUrlResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiteaGetGiteaUrlResponse' from JSON`,
  );
}
