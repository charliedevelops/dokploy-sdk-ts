/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SwarmGetNodesSecurity = {
  authorization: string;
};

export type SwarmGetNodesRequest = {
  serverId?: string | undefined;
};

/** @internal */
export const SwarmGetNodesSecurity$inboundSchema: z.ZodType<
  SwarmGetNodesSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type SwarmGetNodesSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const SwarmGetNodesSecurity$outboundSchema: z.ZodType<
  SwarmGetNodesSecurity$Outbound,
  z.ZodTypeDef,
  SwarmGetNodesSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SwarmGetNodesSecurity$ {
  /** @deprecated use `SwarmGetNodesSecurity$inboundSchema` instead. */
  export const inboundSchema = SwarmGetNodesSecurity$inboundSchema;
  /** @deprecated use `SwarmGetNodesSecurity$outboundSchema` instead. */
  export const outboundSchema = SwarmGetNodesSecurity$outboundSchema;
  /** @deprecated use `SwarmGetNodesSecurity$Outbound` instead. */
  export type Outbound = SwarmGetNodesSecurity$Outbound;
}

export function swarmGetNodesSecurityToJSON(
  swarmGetNodesSecurity: SwarmGetNodesSecurity,
): string {
  return JSON.stringify(
    SwarmGetNodesSecurity$outboundSchema.parse(swarmGetNodesSecurity),
  );
}

export function swarmGetNodesSecurityFromJSON(
  jsonString: string,
): SafeParseResult<SwarmGetNodesSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SwarmGetNodesSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SwarmGetNodesSecurity' from JSON`,
  );
}

/** @internal */
export const SwarmGetNodesRequest$inboundSchema: z.ZodType<
  SwarmGetNodesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serverId: z.string().optional(),
});

/** @internal */
export type SwarmGetNodesRequest$Outbound = {
  serverId?: string | undefined;
};

/** @internal */
export const SwarmGetNodesRequest$outboundSchema: z.ZodType<
  SwarmGetNodesRequest$Outbound,
  z.ZodTypeDef,
  SwarmGetNodesRequest
> = z.object({
  serverId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SwarmGetNodesRequest$ {
  /** @deprecated use `SwarmGetNodesRequest$inboundSchema` instead. */
  export const inboundSchema = SwarmGetNodesRequest$inboundSchema;
  /** @deprecated use `SwarmGetNodesRequest$outboundSchema` instead. */
  export const outboundSchema = SwarmGetNodesRequest$outboundSchema;
  /** @deprecated use `SwarmGetNodesRequest$Outbound` instead. */
  export type Outbound = SwarmGetNodesRequest$Outbound;
}

export function swarmGetNodesRequestToJSON(
  swarmGetNodesRequest: SwarmGetNodesRequest,
): string {
  return JSON.stringify(
    SwarmGetNodesRequest$outboundSchema.parse(swarmGetNodesRequest),
  );
}

export function swarmGetNodesRequestFromJSON(
  jsonString: string,
): SafeParseResult<SwarmGetNodesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SwarmGetNodesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SwarmGetNodesRequest' from JSON`,
  );
}
