/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PostgresStopSecurity = {
  authorization: string;
};

export type PostgresStopRequest = {
  postgresId: string;
};

export const PostgresStopApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type PostgresStopApplicationStatus = ClosedEnum<
  typeof PostgresStopApplicationStatus
>;

export type PostgresStopHealthCheckSwarm = {
  test?: Array<string> | undefined;
  interval?: number | undefined;
  timeout?: number | undefined;
  startPeriod?: number | undefined;
  retries?: number | undefined;
};

export type PostgresStopRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type PostgresStopSpread = {
  spreadDescriptor: string;
};

export type PostgresStopPreference = {
  spread: PostgresStopSpread;
};

export type PostgresStopPlatform = {
  architecture: string;
  os: string;
};

export type PostgresStopPlacementSwarm = {
  constraints?: Array<string> | undefined;
  preferences?: Array<PostgresStopPreference> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<PostgresStopPlatform> | undefined;
};

export type PostgresStopUpdateConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type PostgresStopRollbackConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type PostgresStopReplicated = {
  replicas?: number | undefined;
};

export type PostgresStopGlobal = {};

export type PostgresStopReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type PostgresStopGlobalJob = {};

export type PostgresStopModeSwarm = {
  replicated?: PostgresStopReplicated | undefined;
  global?: PostgresStopGlobal | undefined;
  replicatedJob?: PostgresStopReplicatedJob | undefined;
  globalJob?: PostgresStopGlobalJob | undefined;
};

export type PostgresStopDriverOpts = {};

export type PostgresStopNetworkSwarm = {
  target?: string | undefined;
  aliases?: Array<string> | undefined;
  driverOpts?: PostgresStopDriverOpts | undefined;
};

export type PostgresStopProject = {
  projectId: string;
  name: string;
  description: string | null;
  createdAt: string;
  organizationId: string;
  env: string;
};

export type PostgresStopEnvironment = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
  project: PostgresStopProject;
};

export const PostgresStopType = {
  Bind: "bind",
  Volume: "volume",
  File: "file",
} as const;
export type PostgresStopType = ClosedEnum<typeof PostgresStopType>;

export const PostgresStopServiceType = {
  Application: "application",
  Postgres: "postgres",
  Mysql: "mysql",
  Mariadb: "mariadb",
  Mongo: "mongo",
  Redis: "redis",
  Compose: "compose",
} as const;
export type PostgresStopServiceType = ClosedEnum<
  typeof PostgresStopServiceType
>;

export type PostgresStopMount = {
  mountId: string;
  type: PostgresStopType;
  hostPath: string | null;
  volumeName: string | null;
  filePath: string | null;
  content: string | null;
  serviceType: PostgresStopServiceType;
  mountPath: string;
  applicationId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mysqlId: string | null;
  redisId: string | null;
  composeId: string | null;
};

export const PostgresStopServerStatus = {
  Active: "active",
  Inactive: "inactive",
} as const;
export type PostgresStopServerStatus = ClosedEnum<
  typeof PostgresStopServerStatus
>;

export const PostgresStopMetricsConfigEnum = {
  Null: "null",
} as const;
export type PostgresStopMetricsConfigEnum = ClosedEnum<
  typeof PostgresStopMetricsConfigEnum
>;

export type PostgresStopMetricsConfigUnion1 =
  | string
  | number
  | boolean
  | PostgresStopMetricsConfigEnum;

export type PostgresStopMetricsConfigUnion2 =
  | string
  | number
  | boolean
  | PostgresStopMetricsConfigEnum
  | Array<any>
  | { [k: string]: any };

export type PostgresStopServer = {
  serverId: string;
  name: string;
  description: string | null;
  ipAddress: string;
  port: number;
  username: string;
  appName: string;
  enableDockerCleanup: boolean;
  createdAt: string;
  organizationId: string;
  serverStatus: PostgresStopServerStatus;
  command: string;
  sshKeyId: string | null;
  metricsConfig:
    | string
    | number
    | boolean
    | PostgresStopMetricsConfigEnum
    | Array<any>
    | { [k: string]: any };
};

export const PostgresStopBackupType = {
  Database: "database",
  Compose: "compose",
} as const;
export type PostgresStopBackupType = ClosedEnum<typeof PostgresStopBackupType>;

export const PostgresStopDatabaseType = {
  Postgres: "postgres",
  Mariadb: "mariadb",
  Mysql: "mysql",
  Mongo: "mongo",
  WebServer: "web-server",
} as const;
export type PostgresStopDatabaseType = ClosedEnum<
  typeof PostgresStopDatabaseType
>;

export const PostgresStopMetadataEnum = {
  Null: "null",
} as const;
export type PostgresStopMetadataEnum = ClosedEnum<
  typeof PostgresStopMetadataEnum
>;

export type PostgresStopPostgres = {
  databaseUser: string;
};

export type PostgresStopMariadb = {
  databaseUser: string;
  databasePassword: string;
};

export type PostgresStopMongo = {
  databaseUser: string;
  databasePassword: string;
};

export type PostgresStopMysql = {
  databaseRootPassword: string;
};

export type PostgresStopMetadata = {
  postgres?: PostgresStopPostgres | undefined;
  mariadb?: PostgresStopMariadb | undefined;
  mongo?: PostgresStopMongo | undefined;
  mysql?: PostgresStopMysql | undefined;
};

export type PostgresStopMetadataUnion =
  | PostgresStopMetadata
  | PostgresStopMetadataEnum;

export type PostgresStopBackup = {
  backupId: string;
  appName: string;
  schedule: string;
  enabled: boolean | null;
  database: string;
  prefix: string;
  serviceName: string | null;
  destinationId: string;
  keepLatestCount: number | null;
  backupType: PostgresStopBackupType;
  databaseType: PostgresStopDatabaseType;
  composeId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mysqlId: string | null;
  mongoId: string | null;
  userId: string | null;
  metadata?: PostgresStopMetadata | PostgresStopMetadataEnum | null | undefined;
};

/**
 * Successful response
 */
export type PostgresStopResponseBody = {
  postgresId: string;
  name: string;
  appName: string;
  databaseName: string;
  databaseUser: string;
  databasePassword: string;
  description: string | null;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  externalPort: number | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  applicationStatus: PostgresStopApplicationStatus;
  healthCheckSwarm: PostgresStopHealthCheckSwarm | null;
  restartPolicySwarm: PostgresStopRestartPolicySwarm | null;
  placementSwarm: PostgresStopPlacementSwarm | null;
  updateConfigSwarm: PostgresStopUpdateConfigSwarm | null;
  rollbackConfigSwarm: PostgresStopRollbackConfigSwarm | null;
  modeSwarm: PostgresStopModeSwarm | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<PostgresStopNetworkSwarm> | null;
  replicas: number;
  createdAt: string;
  environmentId: string;
  serverId: string | null;
  environment: PostgresStopEnvironment;
  mounts: Array<PostgresStopMount>;
  server: PostgresStopServer | null;
  backups: Array<PostgresStopBackup>;
};

export type PostgresStopResponse = PostgresStopResponseBody | models.ErrorT;

/** @internal */
export const PostgresStopSecurity$inboundSchema: z.ZodType<
  PostgresStopSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type PostgresStopSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const PostgresStopSecurity$outboundSchema: z.ZodType<
  PostgresStopSecurity$Outbound,
  z.ZodTypeDef,
  PostgresStopSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopSecurity$ {
  /** @deprecated use `PostgresStopSecurity$inboundSchema` instead. */
  export const inboundSchema = PostgresStopSecurity$inboundSchema;
  /** @deprecated use `PostgresStopSecurity$outboundSchema` instead. */
  export const outboundSchema = PostgresStopSecurity$outboundSchema;
  /** @deprecated use `PostgresStopSecurity$Outbound` instead. */
  export type Outbound = PostgresStopSecurity$Outbound;
}

export function postgresStopSecurityToJSON(
  postgresStopSecurity: PostgresStopSecurity,
): string {
  return JSON.stringify(
    PostgresStopSecurity$outboundSchema.parse(postgresStopSecurity),
  );
}

export function postgresStopSecurityFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopSecurity' from JSON`,
  );
}

/** @internal */
export const PostgresStopRequest$inboundSchema: z.ZodType<
  PostgresStopRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  postgresId: z.string(),
});

/** @internal */
export type PostgresStopRequest$Outbound = {
  postgresId: string;
};

/** @internal */
export const PostgresStopRequest$outboundSchema: z.ZodType<
  PostgresStopRequest$Outbound,
  z.ZodTypeDef,
  PostgresStopRequest
> = z.object({
  postgresId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopRequest$ {
  /** @deprecated use `PostgresStopRequest$inboundSchema` instead. */
  export const inboundSchema = PostgresStopRequest$inboundSchema;
  /** @deprecated use `PostgresStopRequest$outboundSchema` instead. */
  export const outboundSchema = PostgresStopRequest$outboundSchema;
  /** @deprecated use `PostgresStopRequest$Outbound` instead. */
  export type Outbound = PostgresStopRequest$Outbound;
}

export function postgresStopRequestToJSON(
  postgresStopRequest: PostgresStopRequest,
): string {
  return JSON.stringify(
    PostgresStopRequest$outboundSchema.parse(postgresStopRequest),
  );
}

export function postgresStopRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopRequest' from JSON`,
  );
}

/** @internal */
export const PostgresStopApplicationStatus$inboundSchema: z.ZodNativeEnum<
  typeof PostgresStopApplicationStatus
> = z.nativeEnum(PostgresStopApplicationStatus);

/** @internal */
export const PostgresStopApplicationStatus$outboundSchema: z.ZodNativeEnum<
  typeof PostgresStopApplicationStatus
> = PostgresStopApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopApplicationStatus$ {
  /** @deprecated use `PostgresStopApplicationStatus$inboundSchema` instead. */
  export const inboundSchema = PostgresStopApplicationStatus$inboundSchema;
  /** @deprecated use `PostgresStopApplicationStatus$outboundSchema` instead. */
  export const outboundSchema = PostgresStopApplicationStatus$outboundSchema;
}

/** @internal */
export const PostgresStopHealthCheckSwarm$inboundSchema: z.ZodType<
  PostgresStopHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Test: z.array(z.string()).optional(),
  Interval: z.number().optional(),
  Timeout: z.number().optional(),
  StartPeriod: z.number().optional(),
  Retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Test": "test",
    "Interval": "interval",
    "Timeout": "timeout",
    "StartPeriod": "startPeriod",
    "Retries": "retries",
  });
});

/** @internal */
export type PostgresStopHealthCheckSwarm$Outbound = {
  Test?: Array<string> | undefined;
  Interval?: number | undefined;
  Timeout?: number | undefined;
  StartPeriod?: number | undefined;
  Retries?: number | undefined;
};

/** @internal */
export const PostgresStopHealthCheckSwarm$outboundSchema: z.ZodType<
  PostgresStopHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  PostgresStopHealthCheckSwarm
> = z.object({
  test: z.array(z.string()).optional(),
  interval: z.number().optional(),
  timeout: z.number().optional(),
  startPeriod: z.number().optional(),
  retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    test: "Test",
    interval: "Interval",
    timeout: "Timeout",
    startPeriod: "StartPeriod",
    retries: "Retries",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopHealthCheckSwarm$ {
  /** @deprecated use `PostgresStopHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresStopHealthCheckSwarm$inboundSchema;
  /** @deprecated use `PostgresStopHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema = PostgresStopHealthCheckSwarm$outboundSchema;
  /** @deprecated use `PostgresStopHealthCheckSwarm$Outbound` instead. */
  export type Outbound = PostgresStopHealthCheckSwarm$Outbound;
}

export function postgresStopHealthCheckSwarmToJSON(
  postgresStopHealthCheckSwarm: PostgresStopHealthCheckSwarm,
): string {
  return JSON.stringify(
    PostgresStopHealthCheckSwarm$outboundSchema.parse(
      postgresStopHealthCheckSwarm,
    ),
  );
}

export function postgresStopHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresStopRestartPolicySwarm$inboundSchema: z.ZodType<
  PostgresStopRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type PostgresStopRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const PostgresStopRestartPolicySwarm$outboundSchema: z.ZodType<
  PostgresStopRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  PostgresStopRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopRestartPolicySwarm$ {
  /** @deprecated use `PostgresStopRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresStopRestartPolicySwarm$inboundSchema;
  /** @deprecated use `PostgresStopRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema = PostgresStopRestartPolicySwarm$outboundSchema;
  /** @deprecated use `PostgresStopRestartPolicySwarm$Outbound` instead. */
  export type Outbound = PostgresStopRestartPolicySwarm$Outbound;
}

export function postgresStopRestartPolicySwarmToJSON(
  postgresStopRestartPolicySwarm: PostgresStopRestartPolicySwarm,
): string {
  return JSON.stringify(
    PostgresStopRestartPolicySwarm$outboundSchema.parse(
      postgresStopRestartPolicySwarm,
    ),
  );
}

export function postgresStopRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const PostgresStopSpread$inboundSchema: z.ZodType<
  PostgresStopSpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type PostgresStopSpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const PostgresStopSpread$outboundSchema: z.ZodType<
  PostgresStopSpread$Outbound,
  z.ZodTypeDef,
  PostgresStopSpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopSpread$ {
  /** @deprecated use `PostgresStopSpread$inboundSchema` instead. */
  export const inboundSchema = PostgresStopSpread$inboundSchema;
  /** @deprecated use `PostgresStopSpread$outboundSchema` instead. */
  export const outboundSchema = PostgresStopSpread$outboundSchema;
  /** @deprecated use `PostgresStopSpread$Outbound` instead. */
  export type Outbound = PostgresStopSpread$Outbound;
}

export function postgresStopSpreadToJSON(
  postgresStopSpread: PostgresStopSpread,
): string {
  return JSON.stringify(
    PostgresStopSpread$outboundSchema.parse(postgresStopSpread),
  );
}

export function postgresStopSpreadFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopSpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopSpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopSpread' from JSON`,
  );
}

/** @internal */
export const PostgresStopPreference$inboundSchema: z.ZodType<
  PostgresStopPreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => PostgresStopSpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type PostgresStopPreference$Outbound = {
  Spread: PostgresStopSpread$Outbound;
};

/** @internal */
export const PostgresStopPreference$outboundSchema: z.ZodType<
  PostgresStopPreference$Outbound,
  z.ZodTypeDef,
  PostgresStopPreference
> = z.object({
  spread: z.lazy(() => PostgresStopSpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopPreference$ {
  /** @deprecated use `PostgresStopPreference$inboundSchema` instead. */
  export const inboundSchema = PostgresStopPreference$inboundSchema;
  /** @deprecated use `PostgresStopPreference$outboundSchema` instead. */
  export const outboundSchema = PostgresStopPreference$outboundSchema;
  /** @deprecated use `PostgresStopPreference$Outbound` instead. */
  export type Outbound = PostgresStopPreference$Outbound;
}

export function postgresStopPreferenceToJSON(
  postgresStopPreference: PostgresStopPreference,
): string {
  return JSON.stringify(
    PostgresStopPreference$outboundSchema.parse(postgresStopPreference),
  );
}

export function postgresStopPreferenceFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopPreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopPreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopPreference' from JSON`,
  );
}

/** @internal */
export const PostgresStopPlatform$inboundSchema: z.ZodType<
  PostgresStopPlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type PostgresStopPlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const PostgresStopPlatform$outboundSchema: z.ZodType<
  PostgresStopPlatform$Outbound,
  z.ZodTypeDef,
  PostgresStopPlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopPlatform$ {
  /** @deprecated use `PostgresStopPlatform$inboundSchema` instead. */
  export const inboundSchema = PostgresStopPlatform$inboundSchema;
  /** @deprecated use `PostgresStopPlatform$outboundSchema` instead. */
  export const outboundSchema = PostgresStopPlatform$outboundSchema;
  /** @deprecated use `PostgresStopPlatform$Outbound` instead. */
  export type Outbound = PostgresStopPlatform$Outbound;
}

export function postgresStopPlatformToJSON(
  postgresStopPlatform: PostgresStopPlatform,
): string {
  return JSON.stringify(
    PostgresStopPlatform$outboundSchema.parse(postgresStopPlatform),
  );
}

export function postgresStopPlatformFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopPlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopPlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopPlatform' from JSON`,
  );
}

/** @internal */
export const PostgresStopPlacementSwarm$inboundSchema: z.ZodType<
  PostgresStopPlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  Preferences: z.array(z.lazy(() => PostgresStopPreference$inboundSchema))
    .optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => PostgresStopPlatform$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "Preferences": "preferences",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
  });
});

/** @internal */
export type PostgresStopPlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  Preferences?: Array<PostgresStopPreference$Outbound> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<PostgresStopPlatform$Outbound> | undefined;
};

/** @internal */
export const PostgresStopPlacementSwarm$outboundSchema: z.ZodType<
  PostgresStopPlacementSwarm$Outbound,
  z.ZodTypeDef,
  PostgresStopPlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  preferences: z.array(z.lazy(() => PostgresStopPreference$outboundSchema))
    .optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => PostgresStopPlatform$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    preferences: "Preferences",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopPlacementSwarm$ {
  /** @deprecated use `PostgresStopPlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresStopPlacementSwarm$inboundSchema;
  /** @deprecated use `PostgresStopPlacementSwarm$outboundSchema` instead. */
  export const outboundSchema = PostgresStopPlacementSwarm$outboundSchema;
  /** @deprecated use `PostgresStopPlacementSwarm$Outbound` instead. */
  export type Outbound = PostgresStopPlacementSwarm$Outbound;
}

export function postgresStopPlacementSwarmToJSON(
  postgresStopPlacementSwarm: PostgresStopPlacementSwarm,
): string {
  return JSON.stringify(
    PostgresStopPlacementSwarm$outboundSchema.parse(postgresStopPlacementSwarm),
  );
}

export function postgresStopPlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopPlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopPlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopPlacementSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresStopUpdateConfigSwarm$inboundSchema: z.ZodType<
  PostgresStopUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type PostgresStopUpdateConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const PostgresStopUpdateConfigSwarm$outboundSchema: z.ZodType<
  PostgresStopUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  PostgresStopUpdateConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopUpdateConfigSwarm$ {
  /** @deprecated use `PostgresStopUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresStopUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `PostgresStopUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = PostgresStopUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `PostgresStopUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = PostgresStopUpdateConfigSwarm$Outbound;
}

export function postgresStopUpdateConfigSwarmToJSON(
  postgresStopUpdateConfigSwarm: PostgresStopUpdateConfigSwarm,
): string {
  return JSON.stringify(
    PostgresStopUpdateConfigSwarm$outboundSchema.parse(
      postgresStopUpdateConfigSwarm,
    ),
  );
}

export function postgresStopUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresStopRollbackConfigSwarm$inboundSchema: z.ZodType<
  PostgresStopRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type PostgresStopRollbackConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const PostgresStopRollbackConfigSwarm$outboundSchema: z.ZodType<
  PostgresStopRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  PostgresStopRollbackConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopRollbackConfigSwarm$ {
  /** @deprecated use `PostgresStopRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresStopRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `PostgresStopRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = PostgresStopRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `PostgresStopRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = PostgresStopRollbackConfigSwarm$Outbound;
}

export function postgresStopRollbackConfigSwarmToJSON(
  postgresStopRollbackConfigSwarm: PostgresStopRollbackConfigSwarm,
): string {
  return JSON.stringify(
    PostgresStopRollbackConfigSwarm$outboundSchema.parse(
      postgresStopRollbackConfigSwarm,
    ),
  );
}

export function postgresStopRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopRollbackConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopRollbackConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresStopReplicated$inboundSchema: z.ZodType<
  PostgresStopReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type PostgresStopReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const PostgresStopReplicated$outboundSchema: z.ZodType<
  PostgresStopReplicated$Outbound,
  z.ZodTypeDef,
  PostgresStopReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopReplicated$ {
  /** @deprecated use `PostgresStopReplicated$inboundSchema` instead. */
  export const inboundSchema = PostgresStopReplicated$inboundSchema;
  /** @deprecated use `PostgresStopReplicated$outboundSchema` instead. */
  export const outboundSchema = PostgresStopReplicated$outboundSchema;
  /** @deprecated use `PostgresStopReplicated$Outbound` instead. */
  export type Outbound = PostgresStopReplicated$Outbound;
}

export function postgresStopReplicatedToJSON(
  postgresStopReplicated: PostgresStopReplicated,
): string {
  return JSON.stringify(
    PostgresStopReplicated$outboundSchema.parse(postgresStopReplicated),
  );
}

export function postgresStopReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopReplicated' from JSON`,
  );
}

/** @internal */
export const PostgresStopGlobal$inboundSchema: z.ZodType<
  PostgresStopGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostgresStopGlobal$Outbound = {};

/** @internal */
export const PostgresStopGlobal$outboundSchema: z.ZodType<
  PostgresStopGlobal$Outbound,
  z.ZodTypeDef,
  PostgresStopGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopGlobal$ {
  /** @deprecated use `PostgresStopGlobal$inboundSchema` instead. */
  export const inboundSchema = PostgresStopGlobal$inboundSchema;
  /** @deprecated use `PostgresStopGlobal$outboundSchema` instead. */
  export const outboundSchema = PostgresStopGlobal$outboundSchema;
  /** @deprecated use `PostgresStopGlobal$Outbound` instead. */
  export type Outbound = PostgresStopGlobal$Outbound;
}

export function postgresStopGlobalToJSON(
  postgresStopGlobal: PostgresStopGlobal,
): string {
  return JSON.stringify(
    PostgresStopGlobal$outboundSchema.parse(postgresStopGlobal),
  );
}

export function postgresStopGlobalFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopGlobal' from JSON`,
  );
}

/** @internal */
export const PostgresStopReplicatedJob$inboundSchema: z.ZodType<
  PostgresStopReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type PostgresStopReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const PostgresStopReplicatedJob$outboundSchema: z.ZodType<
  PostgresStopReplicatedJob$Outbound,
  z.ZodTypeDef,
  PostgresStopReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopReplicatedJob$ {
  /** @deprecated use `PostgresStopReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = PostgresStopReplicatedJob$inboundSchema;
  /** @deprecated use `PostgresStopReplicatedJob$outboundSchema` instead. */
  export const outboundSchema = PostgresStopReplicatedJob$outboundSchema;
  /** @deprecated use `PostgresStopReplicatedJob$Outbound` instead. */
  export type Outbound = PostgresStopReplicatedJob$Outbound;
}

export function postgresStopReplicatedJobToJSON(
  postgresStopReplicatedJob: PostgresStopReplicatedJob,
): string {
  return JSON.stringify(
    PostgresStopReplicatedJob$outboundSchema.parse(postgresStopReplicatedJob),
  );
}

export function postgresStopReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopReplicatedJob' from JSON`,
  );
}

/** @internal */
export const PostgresStopGlobalJob$inboundSchema: z.ZodType<
  PostgresStopGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostgresStopGlobalJob$Outbound = {};

/** @internal */
export const PostgresStopGlobalJob$outboundSchema: z.ZodType<
  PostgresStopGlobalJob$Outbound,
  z.ZodTypeDef,
  PostgresStopGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopGlobalJob$ {
  /** @deprecated use `PostgresStopGlobalJob$inboundSchema` instead. */
  export const inboundSchema = PostgresStopGlobalJob$inboundSchema;
  /** @deprecated use `PostgresStopGlobalJob$outboundSchema` instead. */
  export const outboundSchema = PostgresStopGlobalJob$outboundSchema;
  /** @deprecated use `PostgresStopGlobalJob$Outbound` instead. */
  export type Outbound = PostgresStopGlobalJob$Outbound;
}

export function postgresStopGlobalJobToJSON(
  postgresStopGlobalJob: PostgresStopGlobalJob,
): string {
  return JSON.stringify(
    PostgresStopGlobalJob$outboundSchema.parse(postgresStopGlobalJob),
  );
}

export function postgresStopGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopGlobalJob' from JSON`,
  );
}

/** @internal */
export const PostgresStopModeSwarm$inboundSchema: z.ZodType<
  PostgresStopModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicated: z.lazy(() => PostgresStopReplicated$inboundSchema).optional(),
  Global: z.lazy(() => PostgresStopGlobal$inboundSchema).optional(),
  ReplicatedJob: z.lazy(() => PostgresStopReplicatedJob$inboundSchema)
    .optional(),
  GlobalJob: z.lazy(() => PostgresStopGlobalJob$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicated": "replicated",
    "Global": "global",
    "ReplicatedJob": "replicatedJob",
    "GlobalJob": "globalJob",
  });
});

/** @internal */
export type PostgresStopModeSwarm$Outbound = {
  Replicated?: PostgresStopReplicated$Outbound | undefined;
  Global?: PostgresStopGlobal$Outbound | undefined;
  ReplicatedJob?: PostgresStopReplicatedJob$Outbound | undefined;
  GlobalJob?: PostgresStopGlobalJob$Outbound | undefined;
};

/** @internal */
export const PostgresStopModeSwarm$outboundSchema: z.ZodType<
  PostgresStopModeSwarm$Outbound,
  z.ZodTypeDef,
  PostgresStopModeSwarm
> = z.object({
  replicated: z.lazy(() => PostgresStopReplicated$outboundSchema).optional(),
  global: z.lazy(() => PostgresStopGlobal$outboundSchema).optional(),
  replicatedJob: z.lazy(() => PostgresStopReplicatedJob$outboundSchema)
    .optional(),
  globalJob: z.lazy(() => PostgresStopGlobalJob$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    replicated: "Replicated",
    global: "Global",
    replicatedJob: "ReplicatedJob",
    globalJob: "GlobalJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopModeSwarm$ {
  /** @deprecated use `PostgresStopModeSwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresStopModeSwarm$inboundSchema;
  /** @deprecated use `PostgresStopModeSwarm$outboundSchema` instead. */
  export const outboundSchema = PostgresStopModeSwarm$outboundSchema;
  /** @deprecated use `PostgresStopModeSwarm$Outbound` instead. */
  export type Outbound = PostgresStopModeSwarm$Outbound;
}

export function postgresStopModeSwarmToJSON(
  postgresStopModeSwarm: PostgresStopModeSwarm,
): string {
  return JSON.stringify(
    PostgresStopModeSwarm$outboundSchema.parse(postgresStopModeSwarm),
  );
}

export function postgresStopModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopModeSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresStopDriverOpts$inboundSchema: z.ZodType<
  PostgresStopDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostgresStopDriverOpts$Outbound = {};

/** @internal */
export const PostgresStopDriverOpts$outboundSchema: z.ZodType<
  PostgresStopDriverOpts$Outbound,
  z.ZodTypeDef,
  PostgresStopDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopDriverOpts$ {
  /** @deprecated use `PostgresStopDriverOpts$inboundSchema` instead. */
  export const inboundSchema = PostgresStopDriverOpts$inboundSchema;
  /** @deprecated use `PostgresStopDriverOpts$outboundSchema` instead. */
  export const outboundSchema = PostgresStopDriverOpts$outboundSchema;
  /** @deprecated use `PostgresStopDriverOpts$Outbound` instead. */
  export type Outbound = PostgresStopDriverOpts$Outbound;
}

export function postgresStopDriverOptsToJSON(
  postgresStopDriverOpts: PostgresStopDriverOpts,
): string {
  return JSON.stringify(
    PostgresStopDriverOpts$outboundSchema.parse(postgresStopDriverOpts),
  );
}

export function postgresStopDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopDriverOpts' from JSON`,
  );
}

/** @internal */
export const PostgresStopNetworkSwarm$inboundSchema: z.ZodType<
  PostgresStopNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Target: z.string().optional(),
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => PostgresStopDriverOpts$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Target": "target",
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
  });
});

/** @internal */
export type PostgresStopNetworkSwarm$Outbound = {
  Target?: string | undefined;
  Aliases?: Array<string> | undefined;
  DriverOpts?: PostgresStopDriverOpts$Outbound | undefined;
};

/** @internal */
export const PostgresStopNetworkSwarm$outboundSchema: z.ZodType<
  PostgresStopNetworkSwarm$Outbound,
  z.ZodTypeDef,
  PostgresStopNetworkSwarm
> = z.object({
  target: z.string().optional(),
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => PostgresStopDriverOpts$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    target: "Target",
    aliases: "Aliases",
    driverOpts: "DriverOpts",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopNetworkSwarm$ {
  /** @deprecated use `PostgresStopNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresStopNetworkSwarm$inboundSchema;
  /** @deprecated use `PostgresStopNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = PostgresStopNetworkSwarm$outboundSchema;
  /** @deprecated use `PostgresStopNetworkSwarm$Outbound` instead. */
  export type Outbound = PostgresStopNetworkSwarm$Outbound;
}

export function postgresStopNetworkSwarmToJSON(
  postgresStopNetworkSwarm: PostgresStopNetworkSwarm,
): string {
  return JSON.stringify(
    PostgresStopNetworkSwarm$outboundSchema.parse(postgresStopNetworkSwarm),
  );
}

export function postgresStopNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresStopProject$inboundSchema: z.ZodType<
  PostgresStopProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  organizationId: z.string(),
  env: z.string(),
});

/** @internal */
export type PostgresStopProject$Outbound = {
  projectId: string;
  name: string;
  description: string | null;
  createdAt: string;
  organizationId: string;
  env: string;
};

/** @internal */
export const PostgresStopProject$outboundSchema: z.ZodType<
  PostgresStopProject$Outbound,
  z.ZodTypeDef,
  PostgresStopProject
> = z.object({
  projectId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  organizationId: z.string(),
  env: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopProject$ {
  /** @deprecated use `PostgresStopProject$inboundSchema` instead. */
  export const inboundSchema = PostgresStopProject$inboundSchema;
  /** @deprecated use `PostgresStopProject$outboundSchema` instead. */
  export const outboundSchema = PostgresStopProject$outboundSchema;
  /** @deprecated use `PostgresStopProject$Outbound` instead. */
  export type Outbound = PostgresStopProject$Outbound;
}

export function postgresStopProjectToJSON(
  postgresStopProject: PostgresStopProject,
): string {
  return JSON.stringify(
    PostgresStopProject$outboundSchema.parse(postgresStopProject),
  );
}

export function postgresStopProjectFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopProject' from JSON`,
  );
}

/** @internal */
export const PostgresStopEnvironment$inboundSchema: z.ZodType<
  PostgresStopEnvironment,
  z.ZodTypeDef,
  unknown
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
  project: z.lazy(() => PostgresStopProject$inboundSchema),
});

/** @internal */
export type PostgresStopEnvironment$Outbound = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
  project: PostgresStopProject$Outbound;
};

/** @internal */
export const PostgresStopEnvironment$outboundSchema: z.ZodType<
  PostgresStopEnvironment$Outbound,
  z.ZodTypeDef,
  PostgresStopEnvironment
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
  project: z.lazy(() => PostgresStopProject$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopEnvironment$ {
  /** @deprecated use `PostgresStopEnvironment$inboundSchema` instead. */
  export const inboundSchema = PostgresStopEnvironment$inboundSchema;
  /** @deprecated use `PostgresStopEnvironment$outboundSchema` instead. */
  export const outboundSchema = PostgresStopEnvironment$outboundSchema;
  /** @deprecated use `PostgresStopEnvironment$Outbound` instead. */
  export type Outbound = PostgresStopEnvironment$Outbound;
}

export function postgresStopEnvironmentToJSON(
  postgresStopEnvironment: PostgresStopEnvironment,
): string {
  return JSON.stringify(
    PostgresStopEnvironment$outboundSchema.parse(postgresStopEnvironment),
  );
}

export function postgresStopEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopEnvironment' from JSON`,
  );
}

/** @internal */
export const PostgresStopType$inboundSchema: z.ZodNativeEnum<
  typeof PostgresStopType
> = z.nativeEnum(PostgresStopType);

/** @internal */
export const PostgresStopType$outboundSchema: z.ZodNativeEnum<
  typeof PostgresStopType
> = PostgresStopType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopType$ {
  /** @deprecated use `PostgresStopType$inboundSchema` instead. */
  export const inboundSchema = PostgresStopType$inboundSchema;
  /** @deprecated use `PostgresStopType$outboundSchema` instead. */
  export const outboundSchema = PostgresStopType$outboundSchema;
}

/** @internal */
export const PostgresStopServiceType$inboundSchema: z.ZodNativeEnum<
  typeof PostgresStopServiceType
> = z.nativeEnum(PostgresStopServiceType);

/** @internal */
export const PostgresStopServiceType$outboundSchema: z.ZodNativeEnum<
  typeof PostgresStopServiceType
> = PostgresStopServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopServiceType$ {
  /** @deprecated use `PostgresStopServiceType$inboundSchema` instead. */
  export const inboundSchema = PostgresStopServiceType$inboundSchema;
  /** @deprecated use `PostgresStopServiceType$outboundSchema` instead. */
  export const outboundSchema = PostgresStopServiceType$outboundSchema;
}

/** @internal */
export const PostgresStopMount$inboundSchema: z.ZodType<
  PostgresStopMount,
  z.ZodTypeDef,
  unknown
> = z.object({
  mountId: z.string(),
  type: PostgresStopType$inboundSchema,
  hostPath: z.nullable(z.string()),
  volumeName: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  content: z.nullable(z.string()),
  serviceType: PostgresStopServiceType$inboundSchema,
  mountPath: z.string(),
  applicationId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
});

/** @internal */
export type PostgresStopMount$Outbound = {
  mountId: string;
  type: string;
  hostPath: string | null;
  volumeName: string | null;
  filePath: string | null;
  content: string | null;
  serviceType: string;
  mountPath: string;
  applicationId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mysqlId: string | null;
  redisId: string | null;
  composeId: string | null;
};

/** @internal */
export const PostgresStopMount$outboundSchema: z.ZodType<
  PostgresStopMount$Outbound,
  z.ZodTypeDef,
  PostgresStopMount
> = z.object({
  mountId: z.string(),
  type: PostgresStopType$outboundSchema,
  hostPath: z.nullable(z.string()),
  volumeName: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  content: z.nullable(z.string()),
  serviceType: PostgresStopServiceType$outboundSchema,
  mountPath: z.string(),
  applicationId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopMount$ {
  /** @deprecated use `PostgresStopMount$inboundSchema` instead. */
  export const inboundSchema = PostgresStopMount$inboundSchema;
  /** @deprecated use `PostgresStopMount$outboundSchema` instead. */
  export const outboundSchema = PostgresStopMount$outboundSchema;
  /** @deprecated use `PostgresStopMount$Outbound` instead. */
  export type Outbound = PostgresStopMount$Outbound;
}

export function postgresStopMountToJSON(
  postgresStopMount: PostgresStopMount,
): string {
  return JSON.stringify(
    PostgresStopMount$outboundSchema.parse(postgresStopMount),
  );
}

export function postgresStopMountFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopMount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopMount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopMount' from JSON`,
  );
}

/** @internal */
export const PostgresStopServerStatus$inboundSchema: z.ZodNativeEnum<
  typeof PostgresStopServerStatus
> = z.nativeEnum(PostgresStopServerStatus);

/** @internal */
export const PostgresStopServerStatus$outboundSchema: z.ZodNativeEnum<
  typeof PostgresStopServerStatus
> = PostgresStopServerStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopServerStatus$ {
  /** @deprecated use `PostgresStopServerStatus$inboundSchema` instead. */
  export const inboundSchema = PostgresStopServerStatus$inboundSchema;
  /** @deprecated use `PostgresStopServerStatus$outboundSchema` instead. */
  export const outboundSchema = PostgresStopServerStatus$outboundSchema;
}

/** @internal */
export const PostgresStopMetricsConfigEnum$inboundSchema: z.ZodNativeEnum<
  typeof PostgresStopMetricsConfigEnum
> = z.nativeEnum(PostgresStopMetricsConfigEnum);

/** @internal */
export const PostgresStopMetricsConfigEnum$outboundSchema: z.ZodNativeEnum<
  typeof PostgresStopMetricsConfigEnum
> = PostgresStopMetricsConfigEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopMetricsConfigEnum$ {
  /** @deprecated use `PostgresStopMetricsConfigEnum$inboundSchema` instead. */
  export const inboundSchema = PostgresStopMetricsConfigEnum$inboundSchema;
  /** @deprecated use `PostgresStopMetricsConfigEnum$outboundSchema` instead. */
  export const outboundSchema = PostgresStopMetricsConfigEnum$outboundSchema;
}

/** @internal */
export const PostgresStopMetricsConfigUnion1$inboundSchema: z.ZodType<
  PostgresStopMetricsConfigUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  PostgresStopMetricsConfigEnum$inboundSchema,
]);

/** @internal */
export type PostgresStopMetricsConfigUnion1$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const PostgresStopMetricsConfigUnion1$outboundSchema: z.ZodType<
  PostgresStopMetricsConfigUnion1$Outbound,
  z.ZodTypeDef,
  PostgresStopMetricsConfigUnion1
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  PostgresStopMetricsConfigEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopMetricsConfigUnion1$ {
  /** @deprecated use `PostgresStopMetricsConfigUnion1$inboundSchema` instead. */
  export const inboundSchema = PostgresStopMetricsConfigUnion1$inboundSchema;
  /** @deprecated use `PostgresStopMetricsConfigUnion1$outboundSchema` instead. */
  export const outboundSchema = PostgresStopMetricsConfigUnion1$outboundSchema;
  /** @deprecated use `PostgresStopMetricsConfigUnion1$Outbound` instead. */
  export type Outbound = PostgresStopMetricsConfigUnion1$Outbound;
}

export function postgresStopMetricsConfigUnion1ToJSON(
  postgresStopMetricsConfigUnion1: PostgresStopMetricsConfigUnion1,
): string {
  return JSON.stringify(
    PostgresStopMetricsConfigUnion1$outboundSchema.parse(
      postgresStopMetricsConfigUnion1,
    ),
  );
}

export function postgresStopMetricsConfigUnion1FromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopMetricsConfigUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopMetricsConfigUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopMetricsConfigUnion1' from JSON`,
  );
}

/** @internal */
export const PostgresStopMetricsConfigUnion2$inboundSchema: z.ZodType<
  PostgresStopMetricsConfigUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    PostgresStopMetricsConfigEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type PostgresStopMetricsConfigUnion2$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const PostgresStopMetricsConfigUnion2$outboundSchema: z.ZodType<
  PostgresStopMetricsConfigUnion2$Outbound,
  z.ZodTypeDef,
  PostgresStopMetricsConfigUnion2
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    PostgresStopMetricsConfigEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopMetricsConfigUnion2$ {
  /** @deprecated use `PostgresStopMetricsConfigUnion2$inboundSchema` instead. */
  export const inboundSchema = PostgresStopMetricsConfigUnion2$inboundSchema;
  /** @deprecated use `PostgresStopMetricsConfigUnion2$outboundSchema` instead. */
  export const outboundSchema = PostgresStopMetricsConfigUnion2$outboundSchema;
  /** @deprecated use `PostgresStopMetricsConfigUnion2$Outbound` instead. */
  export type Outbound = PostgresStopMetricsConfigUnion2$Outbound;
}

export function postgresStopMetricsConfigUnion2ToJSON(
  postgresStopMetricsConfigUnion2: PostgresStopMetricsConfigUnion2,
): string {
  return JSON.stringify(
    PostgresStopMetricsConfigUnion2$outboundSchema.parse(
      postgresStopMetricsConfigUnion2,
    ),
  );
}

export function postgresStopMetricsConfigUnion2FromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopMetricsConfigUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopMetricsConfigUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopMetricsConfigUnion2' from JSON`,
  );
}

/** @internal */
export const PostgresStopServer$inboundSchema: z.ZodType<
  PostgresStopServer,
  z.ZodTypeDef,
  unknown
> = z.object({
  serverId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  ipAddress: z.string(),
  port: z.number(),
  username: z.string(),
  appName: z.string(),
  enableDockerCleanup: z.boolean(),
  createdAt: z.string(),
  organizationId: z.string(),
  serverStatus: PostgresStopServerStatus$inboundSchema,
  command: z.string(),
  sshKeyId: z.nullable(z.string()),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      PostgresStopMetricsConfigEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
});

/** @internal */
export type PostgresStopServer$Outbound = {
  serverId: string;
  name: string;
  description: string | null;
  ipAddress: string;
  port: number;
  username: string;
  appName: string;
  enableDockerCleanup: boolean;
  createdAt: string;
  organizationId: string;
  serverStatus: string;
  command: string;
  sshKeyId: string | null;
  metricsConfig: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  };
};

/** @internal */
export const PostgresStopServer$outboundSchema: z.ZodType<
  PostgresStopServer$Outbound,
  z.ZodTypeDef,
  PostgresStopServer
> = z.object({
  serverId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  ipAddress: z.string(),
  port: z.number(),
  username: z.string(),
  appName: z.string(),
  enableDockerCleanup: z.boolean(),
  createdAt: z.string(),
  organizationId: z.string(),
  serverStatus: PostgresStopServerStatus$outboundSchema,
  command: z.string(),
  sshKeyId: z.nullable(z.string()),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      PostgresStopMetricsConfigEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopServer$ {
  /** @deprecated use `PostgresStopServer$inboundSchema` instead. */
  export const inboundSchema = PostgresStopServer$inboundSchema;
  /** @deprecated use `PostgresStopServer$outboundSchema` instead. */
  export const outboundSchema = PostgresStopServer$outboundSchema;
  /** @deprecated use `PostgresStopServer$Outbound` instead. */
  export type Outbound = PostgresStopServer$Outbound;
}

export function postgresStopServerToJSON(
  postgresStopServer: PostgresStopServer,
): string {
  return JSON.stringify(
    PostgresStopServer$outboundSchema.parse(postgresStopServer),
  );
}

export function postgresStopServerFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopServer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopServer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopServer' from JSON`,
  );
}

/** @internal */
export const PostgresStopBackupType$inboundSchema: z.ZodNativeEnum<
  typeof PostgresStopBackupType
> = z.nativeEnum(PostgresStopBackupType);

/** @internal */
export const PostgresStopBackupType$outboundSchema: z.ZodNativeEnum<
  typeof PostgresStopBackupType
> = PostgresStopBackupType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopBackupType$ {
  /** @deprecated use `PostgresStopBackupType$inboundSchema` instead. */
  export const inboundSchema = PostgresStopBackupType$inboundSchema;
  /** @deprecated use `PostgresStopBackupType$outboundSchema` instead. */
  export const outboundSchema = PostgresStopBackupType$outboundSchema;
}

/** @internal */
export const PostgresStopDatabaseType$inboundSchema: z.ZodNativeEnum<
  typeof PostgresStopDatabaseType
> = z.nativeEnum(PostgresStopDatabaseType);

/** @internal */
export const PostgresStopDatabaseType$outboundSchema: z.ZodNativeEnum<
  typeof PostgresStopDatabaseType
> = PostgresStopDatabaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopDatabaseType$ {
  /** @deprecated use `PostgresStopDatabaseType$inboundSchema` instead. */
  export const inboundSchema = PostgresStopDatabaseType$inboundSchema;
  /** @deprecated use `PostgresStopDatabaseType$outboundSchema` instead. */
  export const outboundSchema = PostgresStopDatabaseType$outboundSchema;
}

/** @internal */
export const PostgresStopMetadataEnum$inboundSchema: z.ZodNativeEnum<
  typeof PostgresStopMetadataEnum
> = z.nativeEnum(PostgresStopMetadataEnum);

/** @internal */
export const PostgresStopMetadataEnum$outboundSchema: z.ZodNativeEnum<
  typeof PostgresStopMetadataEnum
> = PostgresStopMetadataEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopMetadataEnum$ {
  /** @deprecated use `PostgresStopMetadataEnum$inboundSchema` instead. */
  export const inboundSchema = PostgresStopMetadataEnum$inboundSchema;
  /** @deprecated use `PostgresStopMetadataEnum$outboundSchema` instead. */
  export const outboundSchema = PostgresStopMetadataEnum$outboundSchema;
}

/** @internal */
export const PostgresStopPostgres$inboundSchema: z.ZodType<
  PostgresStopPostgres,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseUser: z.string(),
});

/** @internal */
export type PostgresStopPostgres$Outbound = {
  databaseUser: string;
};

/** @internal */
export const PostgresStopPostgres$outboundSchema: z.ZodType<
  PostgresStopPostgres$Outbound,
  z.ZodTypeDef,
  PostgresStopPostgres
> = z.object({
  databaseUser: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopPostgres$ {
  /** @deprecated use `PostgresStopPostgres$inboundSchema` instead. */
  export const inboundSchema = PostgresStopPostgres$inboundSchema;
  /** @deprecated use `PostgresStopPostgres$outboundSchema` instead. */
  export const outboundSchema = PostgresStopPostgres$outboundSchema;
  /** @deprecated use `PostgresStopPostgres$Outbound` instead. */
  export type Outbound = PostgresStopPostgres$Outbound;
}

export function postgresStopPostgresToJSON(
  postgresStopPostgres: PostgresStopPostgres,
): string {
  return JSON.stringify(
    PostgresStopPostgres$outboundSchema.parse(postgresStopPostgres),
  );
}

export function postgresStopPostgresFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopPostgres, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopPostgres$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopPostgres' from JSON`,
  );
}

/** @internal */
export const PostgresStopMariadb$inboundSchema: z.ZodType<
  PostgresStopMariadb,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseUser: z.string(),
  databasePassword: z.string(),
});

/** @internal */
export type PostgresStopMariadb$Outbound = {
  databaseUser: string;
  databasePassword: string;
};

/** @internal */
export const PostgresStopMariadb$outboundSchema: z.ZodType<
  PostgresStopMariadb$Outbound,
  z.ZodTypeDef,
  PostgresStopMariadb
> = z.object({
  databaseUser: z.string(),
  databasePassword: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopMariadb$ {
  /** @deprecated use `PostgresStopMariadb$inboundSchema` instead. */
  export const inboundSchema = PostgresStopMariadb$inboundSchema;
  /** @deprecated use `PostgresStopMariadb$outboundSchema` instead. */
  export const outboundSchema = PostgresStopMariadb$outboundSchema;
  /** @deprecated use `PostgresStopMariadb$Outbound` instead. */
  export type Outbound = PostgresStopMariadb$Outbound;
}

export function postgresStopMariadbToJSON(
  postgresStopMariadb: PostgresStopMariadb,
): string {
  return JSON.stringify(
    PostgresStopMariadb$outboundSchema.parse(postgresStopMariadb),
  );
}

export function postgresStopMariadbFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopMariadb, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopMariadb$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopMariadb' from JSON`,
  );
}

/** @internal */
export const PostgresStopMongo$inboundSchema: z.ZodType<
  PostgresStopMongo,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseUser: z.string(),
  databasePassword: z.string(),
});

/** @internal */
export type PostgresStopMongo$Outbound = {
  databaseUser: string;
  databasePassword: string;
};

/** @internal */
export const PostgresStopMongo$outboundSchema: z.ZodType<
  PostgresStopMongo$Outbound,
  z.ZodTypeDef,
  PostgresStopMongo
> = z.object({
  databaseUser: z.string(),
  databasePassword: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopMongo$ {
  /** @deprecated use `PostgresStopMongo$inboundSchema` instead. */
  export const inboundSchema = PostgresStopMongo$inboundSchema;
  /** @deprecated use `PostgresStopMongo$outboundSchema` instead. */
  export const outboundSchema = PostgresStopMongo$outboundSchema;
  /** @deprecated use `PostgresStopMongo$Outbound` instead. */
  export type Outbound = PostgresStopMongo$Outbound;
}

export function postgresStopMongoToJSON(
  postgresStopMongo: PostgresStopMongo,
): string {
  return JSON.stringify(
    PostgresStopMongo$outboundSchema.parse(postgresStopMongo),
  );
}

export function postgresStopMongoFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopMongo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopMongo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopMongo' from JSON`,
  );
}

/** @internal */
export const PostgresStopMysql$inboundSchema: z.ZodType<
  PostgresStopMysql,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseRootPassword: z.string(),
});

/** @internal */
export type PostgresStopMysql$Outbound = {
  databaseRootPassword: string;
};

/** @internal */
export const PostgresStopMysql$outboundSchema: z.ZodType<
  PostgresStopMysql$Outbound,
  z.ZodTypeDef,
  PostgresStopMysql
> = z.object({
  databaseRootPassword: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopMysql$ {
  /** @deprecated use `PostgresStopMysql$inboundSchema` instead. */
  export const inboundSchema = PostgresStopMysql$inboundSchema;
  /** @deprecated use `PostgresStopMysql$outboundSchema` instead. */
  export const outboundSchema = PostgresStopMysql$outboundSchema;
  /** @deprecated use `PostgresStopMysql$Outbound` instead. */
  export type Outbound = PostgresStopMysql$Outbound;
}

export function postgresStopMysqlToJSON(
  postgresStopMysql: PostgresStopMysql,
): string {
  return JSON.stringify(
    PostgresStopMysql$outboundSchema.parse(postgresStopMysql),
  );
}

export function postgresStopMysqlFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopMysql, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopMysql$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopMysql' from JSON`,
  );
}

/** @internal */
export const PostgresStopMetadata$inboundSchema: z.ZodType<
  PostgresStopMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  postgres: z.lazy(() => PostgresStopPostgres$inboundSchema).optional(),
  mariadb: z.lazy(() => PostgresStopMariadb$inboundSchema).optional(),
  mongo: z.lazy(() => PostgresStopMongo$inboundSchema).optional(),
  mysql: z.lazy(() => PostgresStopMysql$inboundSchema).optional(),
});

/** @internal */
export type PostgresStopMetadata$Outbound = {
  postgres?: PostgresStopPostgres$Outbound | undefined;
  mariadb?: PostgresStopMariadb$Outbound | undefined;
  mongo?: PostgresStopMongo$Outbound | undefined;
  mysql?: PostgresStopMysql$Outbound | undefined;
};

/** @internal */
export const PostgresStopMetadata$outboundSchema: z.ZodType<
  PostgresStopMetadata$Outbound,
  z.ZodTypeDef,
  PostgresStopMetadata
> = z.object({
  postgres: z.lazy(() => PostgresStopPostgres$outboundSchema).optional(),
  mariadb: z.lazy(() => PostgresStopMariadb$outboundSchema).optional(),
  mongo: z.lazy(() => PostgresStopMongo$outboundSchema).optional(),
  mysql: z.lazy(() => PostgresStopMysql$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopMetadata$ {
  /** @deprecated use `PostgresStopMetadata$inboundSchema` instead. */
  export const inboundSchema = PostgresStopMetadata$inboundSchema;
  /** @deprecated use `PostgresStopMetadata$outboundSchema` instead. */
  export const outboundSchema = PostgresStopMetadata$outboundSchema;
  /** @deprecated use `PostgresStopMetadata$Outbound` instead. */
  export type Outbound = PostgresStopMetadata$Outbound;
}

export function postgresStopMetadataToJSON(
  postgresStopMetadata: PostgresStopMetadata,
): string {
  return JSON.stringify(
    PostgresStopMetadata$outboundSchema.parse(postgresStopMetadata),
  );
}

export function postgresStopMetadataFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopMetadata' from JSON`,
  );
}

/** @internal */
export const PostgresStopMetadataUnion$inboundSchema: z.ZodType<
  PostgresStopMetadataUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PostgresStopMetadata$inboundSchema),
  PostgresStopMetadataEnum$inboundSchema,
]);

/** @internal */
export type PostgresStopMetadataUnion$Outbound =
  | PostgresStopMetadata$Outbound
  | string;

/** @internal */
export const PostgresStopMetadataUnion$outboundSchema: z.ZodType<
  PostgresStopMetadataUnion$Outbound,
  z.ZodTypeDef,
  PostgresStopMetadataUnion
> = z.union([
  z.lazy(() => PostgresStopMetadata$outboundSchema),
  PostgresStopMetadataEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopMetadataUnion$ {
  /** @deprecated use `PostgresStopMetadataUnion$inboundSchema` instead. */
  export const inboundSchema = PostgresStopMetadataUnion$inboundSchema;
  /** @deprecated use `PostgresStopMetadataUnion$outboundSchema` instead. */
  export const outboundSchema = PostgresStopMetadataUnion$outboundSchema;
  /** @deprecated use `PostgresStopMetadataUnion$Outbound` instead. */
  export type Outbound = PostgresStopMetadataUnion$Outbound;
}

export function postgresStopMetadataUnionToJSON(
  postgresStopMetadataUnion: PostgresStopMetadataUnion,
): string {
  return JSON.stringify(
    PostgresStopMetadataUnion$outboundSchema.parse(postgresStopMetadataUnion),
  );
}

export function postgresStopMetadataUnionFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopMetadataUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopMetadataUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopMetadataUnion' from JSON`,
  );
}

/** @internal */
export const PostgresStopBackup$inboundSchema: z.ZodType<
  PostgresStopBackup,
  z.ZodTypeDef,
  unknown
> = z.object({
  backupId: z.string(),
  appName: z.string(),
  schedule: z.string(),
  enabled: z.nullable(z.boolean()),
  database: z.string(),
  prefix: z.string(),
  serviceName: z.nullable(z.string()),
  destinationId: z.string(),
  keepLatestCount: z.nullable(z.number()),
  backupType: PostgresStopBackupType$inboundSchema,
  databaseType: PostgresStopDatabaseType$inboundSchema,
  composeId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  userId: z.nullable(z.string()),
  metadata: z.nullable(
    z.union([
      z.lazy(() => PostgresStopMetadata$inboundSchema),
      PostgresStopMetadataEnum$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type PostgresStopBackup$Outbound = {
  backupId: string;
  appName: string;
  schedule: string;
  enabled: boolean | null;
  database: string;
  prefix: string;
  serviceName: string | null;
  destinationId: string;
  keepLatestCount: number | null;
  backupType: string;
  databaseType: string;
  composeId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mysqlId: string | null;
  mongoId: string | null;
  userId: string | null;
  metadata?: PostgresStopMetadata$Outbound | string | null | undefined;
};

/** @internal */
export const PostgresStopBackup$outboundSchema: z.ZodType<
  PostgresStopBackup$Outbound,
  z.ZodTypeDef,
  PostgresStopBackup
> = z.object({
  backupId: z.string(),
  appName: z.string(),
  schedule: z.string(),
  enabled: z.nullable(z.boolean()),
  database: z.string(),
  prefix: z.string(),
  serviceName: z.nullable(z.string()),
  destinationId: z.string(),
  keepLatestCount: z.nullable(z.number()),
  backupType: PostgresStopBackupType$outboundSchema,
  databaseType: PostgresStopDatabaseType$outboundSchema,
  composeId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  userId: z.nullable(z.string()),
  metadata: z.nullable(
    z.union([
      z.lazy(() => PostgresStopMetadata$outboundSchema),
      PostgresStopMetadataEnum$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopBackup$ {
  /** @deprecated use `PostgresStopBackup$inboundSchema` instead. */
  export const inboundSchema = PostgresStopBackup$inboundSchema;
  /** @deprecated use `PostgresStopBackup$outboundSchema` instead. */
  export const outboundSchema = PostgresStopBackup$outboundSchema;
  /** @deprecated use `PostgresStopBackup$Outbound` instead. */
  export type Outbound = PostgresStopBackup$Outbound;
}

export function postgresStopBackupToJSON(
  postgresStopBackup: PostgresStopBackup,
): string {
  return JSON.stringify(
    PostgresStopBackup$outboundSchema.parse(postgresStopBackup),
  );
}

export function postgresStopBackupFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopBackup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopBackup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopBackup' from JSON`,
  );
}

/** @internal */
export const PostgresStopResponseBody$inboundSchema: z.ZodType<
  PostgresStopResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  postgresId: z.string(),
  name: z.string(),
  appName: z.string(),
  databaseName: z.string(),
  databaseUser: z.string(),
  databasePassword: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  applicationStatus: PostgresStopApplicationStatus$inboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => PostgresStopHealthCheckSwarm$inboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => PostgresStopRestartPolicySwarm$inboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => PostgresStopPlacementSwarm$inboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => PostgresStopUpdateConfigSwarm$inboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => PostgresStopRollbackConfigSwarm$inboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => PostgresStopModeSwarm$inboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => PostgresStopNetworkSwarm$inboundSchema)),
  ),
  replicas: z.number(),
  createdAt: z.string(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
  environment: z.lazy(() => PostgresStopEnvironment$inboundSchema),
  mounts: z.array(z.lazy(() => PostgresStopMount$inboundSchema)),
  server: z.nullable(z.lazy(() => PostgresStopServer$inboundSchema)),
  backups: z.array(z.lazy(() => PostgresStopBackup$inboundSchema)),
});

/** @internal */
export type PostgresStopResponseBody$Outbound = {
  postgresId: string;
  name: string;
  appName: string;
  databaseName: string;
  databaseUser: string;
  databasePassword: string;
  description: string | null;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  externalPort: number | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  applicationStatus: string;
  healthCheckSwarm: PostgresStopHealthCheckSwarm$Outbound | null;
  restartPolicySwarm: PostgresStopRestartPolicySwarm$Outbound | null;
  placementSwarm: PostgresStopPlacementSwarm$Outbound | null;
  updateConfigSwarm: PostgresStopUpdateConfigSwarm$Outbound | null;
  rollbackConfigSwarm: PostgresStopRollbackConfigSwarm$Outbound | null;
  modeSwarm: PostgresStopModeSwarm$Outbound | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<PostgresStopNetworkSwarm$Outbound> | null;
  replicas: number;
  createdAt: string;
  environmentId: string;
  serverId: string | null;
  environment: PostgresStopEnvironment$Outbound;
  mounts: Array<PostgresStopMount$Outbound>;
  server: PostgresStopServer$Outbound | null;
  backups: Array<PostgresStopBackup$Outbound>;
};

/** @internal */
export const PostgresStopResponseBody$outboundSchema: z.ZodType<
  PostgresStopResponseBody$Outbound,
  z.ZodTypeDef,
  PostgresStopResponseBody
> = z.object({
  postgresId: z.string(),
  name: z.string(),
  appName: z.string(),
  databaseName: z.string(),
  databaseUser: z.string(),
  databasePassword: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  applicationStatus: PostgresStopApplicationStatus$outboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => PostgresStopHealthCheckSwarm$outboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => PostgresStopRestartPolicySwarm$outboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => PostgresStopPlacementSwarm$outboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => PostgresStopUpdateConfigSwarm$outboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => PostgresStopRollbackConfigSwarm$outboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => PostgresStopModeSwarm$outboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => PostgresStopNetworkSwarm$outboundSchema)),
  ),
  replicas: z.number(),
  createdAt: z.string(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
  environment: z.lazy(() => PostgresStopEnvironment$outboundSchema),
  mounts: z.array(z.lazy(() => PostgresStopMount$outboundSchema)),
  server: z.nullable(z.lazy(() => PostgresStopServer$outboundSchema)),
  backups: z.array(z.lazy(() => PostgresStopBackup$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopResponseBody$ {
  /** @deprecated use `PostgresStopResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostgresStopResponseBody$inboundSchema;
  /** @deprecated use `PostgresStopResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostgresStopResponseBody$outboundSchema;
  /** @deprecated use `PostgresStopResponseBody$Outbound` instead. */
  export type Outbound = PostgresStopResponseBody$Outbound;
}

export function postgresStopResponseBodyToJSON(
  postgresStopResponseBody: PostgresStopResponseBody,
): string {
  return JSON.stringify(
    PostgresStopResponseBody$outboundSchema.parse(postgresStopResponseBody),
  );
}

export function postgresStopResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopResponseBody' from JSON`,
  );
}

/** @internal */
export const PostgresStopResponse$inboundSchema: z.ZodType<
  PostgresStopResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PostgresStopResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type PostgresStopResponse$Outbound =
  | PostgresStopResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const PostgresStopResponse$outboundSchema: z.ZodType<
  PostgresStopResponse$Outbound,
  z.ZodTypeDef,
  PostgresStopResponse
> = z.union([
  z.lazy(() => PostgresStopResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresStopResponse$ {
  /** @deprecated use `PostgresStopResponse$inboundSchema` instead. */
  export const inboundSchema = PostgresStopResponse$inboundSchema;
  /** @deprecated use `PostgresStopResponse$outboundSchema` instead. */
  export const outboundSchema = PostgresStopResponse$outboundSchema;
  /** @deprecated use `PostgresStopResponse$Outbound` instead. */
  export type Outbound = PostgresStopResponse$Outbound;
}

export function postgresStopResponseToJSON(
  postgresStopResponse: PostgresStopResponse,
): string {
  return JSON.stringify(
    PostgresStopResponse$outboundSchema.parse(postgresStopResponse),
  );
}

export function postgresStopResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostgresStopResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresStopResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresStopResponse' from JSON`,
  );
}
