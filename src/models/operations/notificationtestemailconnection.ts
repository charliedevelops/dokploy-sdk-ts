/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NotificationTestEmailConnectionSecurity = {
  authorization: string;
};

export type NotificationTestEmailConnectionRequest = {
  fromAddress: string;
  password: string;
  smtpPort: number;
  smtpServer: string;
  toAddresses: Array<string>;
  username: string;
};

/** @internal */
export const NotificationTestEmailConnectionSecurity$inboundSchema: z.ZodType<
  NotificationTestEmailConnectionSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type NotificationTestEmailConnectionSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const NotificationTestEmailConnectionSecurity$outboundSchema: z.ZodType<
  NotificationTestEmailConnectionSecurity$Outbound,
  z.ZodTypeDef,
  NotificationTestEmailConnectionSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationTestEmailConnectionSecurity$ {
  /** @deprecated use `NotificationTestEmailConnectionSecurity$inboundSchema` instead. */
  export const inboundSchema =
    NotificationTestEmailConnectionSecurity$inboundSchema;
  /** @deprecated use `NotificationTestEmailConnectionSecurity$outboundSchema` instead. */
  export const outboundSchema =
    NotificationTestEmailConnectionSecurity$outboundSchema;
  /** @deprecated use `NotificationTestEmailConnectionSecurity$Outbound` instead. */
  export type Outbound = NotificationTestEmailConnectionSecurity$Outbound;
}

export function notificationTestEmailConnectionSecurityToJSON(
  notificationTestEmailConnectionSecurity:
    NotificationTestEmailConnectionSecurity,
): string {
  return JSON.stringify(
    NotificationTestEmailConnectionSecurity$outboundSchema.parse(
      notificationTestEmailConnectionSecurity,
    ),
  );
}

export function notificationTestEmailConnectionSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  NotificationTestEmailConnectionSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NotificationTestEmailConnectionSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'NotificationTestEmailConnectionSecurity' from JSON`,
  );
}

/** @internal */
export const NotificationTestEmailConnectionRequest$inboundSchema: z.ZodType<
  NotificationTestEmailConnectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fromAddress: z.string(),
  password: z.string(),
  smtpPort: z.number(),
  smtpServer: z.string(),
  toAddresses: z.array(z.string()),
  username: z.string(),
});

/** @internal */
export type NotificationTestEmailConnectionRequest$Outbound = {
  fromAddress: string;
  password: string;
  smtpPort: number;
  smtpServer: string;
  toAddresses: Array<string>;
  username: string;
};

/** @internal */
export const NotificationTestEmailConnectionRequest$outboundSchema: z.ZodType<
  NotificationTestEmailConnectionRequest$Outbound,
  z.ZodTypeDef,
  NotificationTestEmailConnectionRequest
> = z.object({
  fromAddress: z.string(),
  password: z.string(),
  smtpPort: z.number(),
  smtpServer: z.string(),
  toAddresses: z.array(z.string()),
  username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationTestEmailConnectionRequest$ {
  /** @deprecated use `NotificationTestEmailConnectionRequest$inboundSchema` instead. */
  export const inboundSchema =
    NotificationTestEmailConnectionRequest$inboundSchema;
  /** @deprecated use `NotificationTestEmailConnectionRequest$outboundSchema` instead. */
  export const outboundSchema =
    NotificationTestEmailConnectionRequest$outboundSchema;
  /** @deprecated use `NotificationTestEmailConnectionRequest$Outbound` instead. */
  export type Outbound = NotificationTestEmailConnectionRequest$Outbound;
}

export function notificationTestEmailConnectionRequestToJSON(
  notificationTestEmailConnectionRequest:
    NotificationTestEmailConnectionRequest,
): string {
  return JSON.stringify(
    NotificationTestEmailConnectionRequest$outboundSchema.parse(
      notificationTestEmailConnectionRequest,
    ),
  );
}

export function notificationTestEmailConnectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<NotificationTestEmailConnectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      NotificationTestEmailConnectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationTestEmailConnectionRequest' from JSON`,
  );
}
