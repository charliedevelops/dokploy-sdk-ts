/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComposeOneRequest = {
  composeId: string;
};

/** @internal */
export const ComposeOneRequest$inboundSchema: z.ZodType<
  ComposeOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  composeId: z.string(),
});

/** @internal */
export type ComposeOneRequest$Outbound = {
  composeId: string;
};

/** @internal */
export const ComposeOneRequest$outboundSchema: z.ZodType<
  ComposeOneRequest$Outbound,
  z.ZodTypeDef,
  ComposeOneRequest
> = z.object({
  composeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComposeOneRequest$ {
  /** @deprecated use `ComposeOneRequest$inboundSchema` instead. */
  export const inboundSchema = ComposeOneRequest$inboundSchema;
  /** @deprecated use `ComposeOneRequest$outboundSchema` instead. */
  export const outboundSchema = ComposeOneRequest$outboundSchema;
  /** @deprecated use `ComposeOneRequest$Outbound` instead. */
  export type Outbound = ComposeOneRequest$Outbound;
}

export function composeOneRequestToJSON(
  composeOneRequest: ComposeOneRequest,
): string {
  return JSON.stringify(
    ComposeOneRequest$outboundSchema.parse(composeOneRequest),
  );
}

export function composeOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<ComposeOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComposeOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComposeOneRequest' from JSON`,
  );
}
