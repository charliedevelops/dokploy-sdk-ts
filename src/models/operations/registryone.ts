/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RegistryOneRequest = {
  registryId: string;
};

/** @internal */
export const RegistryOneRequest$inboundSchema: z.ZodType<
  RegistryOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  registryId: z.string(),
});

/** @internal */
export type RegistryOneRequest$Outbound = {
  registryId: string;
};

/** @internal */
export const RegistryOneRequest$outboundSchema: z.ZodType<
  RegistryOneRequest$Outbound,
  z.ZodTypeDef,
  RegistryOneRequest
> = z.object({
  registryId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegistryOneRequest$ {
  /** @deprecated use `RegistryOneRequest$inboundSchema` instead. */
  export const inboundSchema = RegistryOneRequest$inboundSchema;
  /** @deprecated use `RegistryOneRequest$outboundSchema` instead. */
  export const outboundSchema = RegistryOneRequest$outboundSchema;
  /** @deprecated use `RegistryOneRequest$Outbound` instead. */
  export type Outbound = RegistryOneRequest$Outbound;
}

export function registryOneRequestToJSON(
  registryOneRequest: RegistryOneRequest,
): string {
  return JSON.stringify(
    RegistryOneRequest$outboundSchema.parse(registryOneRequest),
  );
}

export function registryOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<RegistryOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RegistryOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RegistryOneRequest' from JSON`,
  );
}
