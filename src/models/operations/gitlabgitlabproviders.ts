/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GitlabGitlabProvidersSecurity = {
  authorization: string;
};

export const GitlabGitlabProvidersProviderType = {
  Github: "github",
  Gitlab: "gitlab",
  Bitbucket: "bitbucket",
  Gitea: "gitea",
} as const;
export type GitlabGitlabProvidersProviderType = ClosedEnum<
  typeof GitlabGitlabProvidersProviderType
>;

export type GitlabGitlabProvidersGitProvider = {
  createdAt: string;
  gitProviderId: string;
  name: string;
  organizationId: string;
  providerType: GitlabGitlabProvidersProviderType;
  userId: string;
};

export type GitlabGitlabProvidersResponseBody = {
  gitProvider: GitlabGitlabProvidersGitProvider;
  gitlabId: string;
  gitlabUrl: string;
};

export type GitlabGitlabProvidersResponse =
  | models.ErrorT
  | Array<GitlabGitlabProvidersResponseBody>;

/** @internal */
export const GitlabGitlabProvidersSecurity$inboundSchema: z.ZodType<
  GitlabGitlabProvidersSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type GitlabGitlabProvidersSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const GitlabGitlabProvidersSecurity$outboundSchema: z.ZodType<
  GitlabGitlabProvidersSecurity$Outbound,
  z.ZodTypeDef,
  GitlabGitlabProvidersSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitlabGitlabProvidersSecurity$ {
  /** @deprecated use `GitlabGitlabProvidersSecurity$inboundSchema` instead. */
  export const inboundSchema = GitlabGitlabProvidersSecurity$inboundSchema;
  /** @deprecated use `GitlabGitlabProvidersSecurity$outboundSchema` instead. */
  export const outboundSchema = GitlabGitlabProvidersSecurity$outboundSchema;
  /** @deprecated use `GitlabGitlabProvidersSecurity$Outbound` instead. */
  export type Outbound = GitlabGitlabProvidersSecurity$Outbound;
}

export function gitlabGitlabProvidersSecurityToJSON(
  gitlabGitlabProvidersSecurity: GitlabGitlabProvidersSecurity,
): string {
  return JSON.stringify(
    GitlabGitlabProvidersSecurity$outboundSchema.parse(
      gitlabGitlabProvidersSecurity,
    ),
  );
}

export function gitlabGitlabProvidersSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GitlabGitlabProvidersSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitlabGitlabProvidersSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitlabGitlabProvidersSecurity' from JSON`,
  );
}

/** @internal */
export const GitlabGitlabProvidersProviderType$inboundSchema: z.ZodNativeEnum<
  typeof GitlabGitlabProvidersProviderType
> = z.nativeEnum(GitlabGitlabProvidersProviderType);

/** @internal */
export const GitlabGitlabProvidersProviderType$outboundSchema: z.ZodNativeEnum<
  typeof GitlabGitlabProvidersProviderType
> = GitlabGitlabProvidersProviderType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitlabGitlabProvidersProviderType$ {
  /** @deprecated use `GitlabGitlabProvidersProviderType$inboundSchema` instead. */
  export const inboundSchema = GitlabGitlabProvidersProviderType$inboundSchema;
  /** @deprecated use `GitlabGitlabProvidersProviderType$outboundSchema` instead. */
  export const outboundSchema =
    GitlabGitlabProvidersProviderType$outboundSchema;
}

/** @internal */
export const GitlabGitlabProvidersGitProvider$inboundSchema: z.ZodType<
  GitlabGitlabProvidersGitProvider,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  gitProviderId: z.string(),
  name: z.string(),
  organizationId: z.string(),
  providerType: GitlabGitlabProvidersProviderType$inboundSchema,
  userId: z.string(),
});

/** @internal */
export type GitlabGitlabProvidersGitProvider$Outbound = {
  createdAt: string;
  gitProviderId: string;
  name: string;
  organizationId: string;
  providerType: string;
  userId: string;
};

/** @internal */
export const GitlabGitlabProvidersGitProvider$outboundSchema: z.ZodType<
  GitlabGitlabProvidersGitProvider$Outbound,
  z.ZodTypeDef,
  GitlabGitlabProvidersGitProvider
> = z.object({
  createdAt: z.string(),
  gitProviderId: z.string(),
  name: z.string(),
  organizationId: z.string(),
  providerType: GitlabGitlabProvidersProviderType$outboundSchema,
  userId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitlabGitlabProvidersGitProvider$ {
  /** @deprecated use `GitlabGitlabProvidersGitProvider$inboundSchema` instead. */
  export const inboundSchema = GitlabGitlabProvidersGitProvider$inboundSchema;
  /** @deprecated use `GitlabGitlabProvidersGitProvider$outboundSchema` instead. */
  export const outboundSchema = GitlabGitlabProvidersGitProvider$outboundSchema;
  /** @deprecated use `GitlabGitlabProvidersGitProvider$Outbound` instead. */
  export type Outbound = GitlabGitlabProvidersGitProvider$Outbound;
}

export function gitlabGitlabProvidersGitProviderToJSON(
  gitlabGitlabProvidersGitProvider: GitlabGitlabProvidersGitProvider,
): string {
  return JSON.stringify(
    GitlabGitlabProvidersGitProvider$outboundSchema.parse(
      gitlabGitlabProvidersGitProvider,
    ),
  );
}

export function gitlabGitlabProvidersGitProviderFromJSON(
  jsonString: string,
): SafeParseResult<GitlabGitlabProvidersGitProvider, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitlabGitlabProvidersGitProvider$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitlabGitlabProvidersGitProvider' from JSON`,
  );
}

/** @internal */
export const GitlabGitlabProvidersResponseBody$inboundSchema: z.ZodType<
  GitlabGitlabProvidersResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  gitProvider: z.lazy(() => GitlabGitlabProvidersGitProvider$inboundSchema),
  gitlabId: z.string(),
  gitlabUrl: z.string(),
});

/** @internal */
export type GitlabGitlabProvidersResponseBody$Outbound = {
  gitProvider: GitlabGitlabProvidersGitProvider$Outbound;
  gitlabId: string;
  gitlabUrl: string;
};

/** @internal */
export const GitlabGitlabProvidersResponseBody$outboundSchema: z.ZodType<
  GitlabGitlabProvidersResponseBody$Outbound,
  z.ZodTypeDef,
  GitlabGitlabProvidersResponseBody
> = z.object({
  gitProvider: z.lazy(() => GitlabGitlabProvidersGitProvider$outboundSchema),
  gitlabId: z.string(),
  gitlabUrl: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitlabGitlabProvidersResponseBody$ {
  /** @deprecated use `GitlabGitlabProvidersResponseBody$inboundSchema` instead. */
  export const inboundSchema = GitlabGitlabProvidersResponseBody$inboundSchema;
  /** @deprecated use `GitlabGitlabProvidersResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GitlabGitlabProvidersResponseBody$outboundSchema;
  /** @deprecated use `GitlabGitlabProvidersResponseBody$Outbound` instead. */
  export type Outbound = GitlabGitlabProvidersResponseBody$Outbound;
}

export function gitlabGitlabProvidersResponseBodyToJSON(
  gitlabGitlabProvidersResponseBody: GitlabGitlabProvidersResponseBody,
): string {
  return JSON.stringify(
    GitlabGitlabProvidersResponseBody$outboundSchema.parse(
      gitlabGitlabProvidersResponseBody,
    ),
  );
}

export function gitlabGitlabProvidersResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GitlabGitlabProvidersResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitlabGitlabProvidersResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitlabGitlabProvidersResponseBody' from JSON`,
  );
}

/** @internal */
export const GitlabGitlabProvidersResponse$inboundSchema: z.ZodType<
  GitlabGitlabProvidersResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ErrorT$inboundSchema,
  z.array(z.lazy(() => GitlabGitlabProvidersResponseBody$inboundSchema)),
]);

/** @internal */
export type GitlabGitlabProvidersResponse$Outbound =
  | models.ErrorT$Outbound
  | Array<GitlabGitlabProvidersResponseBody$Outbound>;

/** @internal */
export const GitlabGitlabProvidersResponse$outboundSchema: z.ZodType<
  GitlabGitlabProvidersResponse$Outbound,
  z.ZodTypeDef,
  GitlabGitlabProvidersResponse
> = z.union([
  models.ErrorT$outboundSchema,
  z.array(z.lazy(() => GitlabGitlabProvidersResponseBody$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitlabGitlabProvidersResponse$ {
  /** @deprecated use `GitlabGitlabProvidersResponse$inboundSchema` instead. */
  export const inboundSchema = GitlabGitlabProvidersResponse$inboundSchema;
  /** @deprecated use `GitlabGitlabProvidersResponse$outboundSchema` instead. */
  export const outboundSchema = GitlabGitlabProvidersResponse$outboundSchema;
  /** @deprecated use `GitlabGitlabProvidersResponse$Outbound` instead. */
  export type Outbound = GitlabGitlabProvidersResponse$Outbound;
}

export function gitlabGitlabProvidersResponseToJSON(
  gitlabGitlabProvidersResponse: GitlabGitlabProvidersResponse,
): string {
  return JSON.stringify(
    GitlabGitlabProvidersResponse$outboundSchema.parse(
      gitlabGitlabProvidersResponse,
    ),
  );
}

export function gitlabGitlabProvidersResponseFromJSON(
  jsonString: string,
): SafeParseResult<GitlabGitlabProvidersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitlabGitlabProvidersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitlabGitlabProvidersResponse' from JSON`,
  );
}
