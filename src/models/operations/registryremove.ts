/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RegistryRemoveRequest = {
  registryId: string;
};

/** @internal */
export const RegistryRemoveRequest$inboundSchema: z.ZodType<
  RegistryRemoveRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  registryId: z.string(),
});

/** @internal */
export type RegistryRemoveRequest$Outbound = {
  registryId: string;
};

/** @internal */
export const RegistryRemoveRequest$outboundSchema: z.ZodType<
  RegistryRemoveRequest$Outbound,
  z.ZodTypeDef,
  RegistryRemoveRequest
> = z.object({
  registryId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegistryRemoveRequest$ {
  /** @deprecated use `RegistryRemoveRequest$inboundSchema` instead. */
  export const inboundSchema = RegistryRemoveRequest$inboundSchema;
  /** @deprecated use `RegistryRemoveRequest$outboundSchema` instead. */
  export const outboundSchema = RegistryRemoveRequest$outboundSchema;
  /** @deprecated use `RegistryRemoveRequest$Outbound` instead. */
  export type Outbound = RegistryRemoveRequest$Outbound;
}

export function registryRemoveRequestToJSON(
  registryRemoveRequest: RegistryRemoveRequest,
): string {
  return JSON.stringify(
    RegistryRemoveRequest$outboundSchema.parse(registryRemoveRequest),
  );
}

export function registryRemoveRequestFromJSON(
  jsonString: string,
): SafeParseResult<RegistryRemoveRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RegistryRemoveRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RegistryRemoveRequest' from JSON`,
  );
}
