/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GiteaUpdateRequest = {
  accessToken?: string | undefined;
  clientId?: string | undefined;
  clientSecret?: string | undefined;
  expiresAt?: number | undefined;
  gitProviderId: string;
  giteaId: string;
  giteaUrl: string;
  giteaUsername?: string | undefined;
  lastAuthenticatedAt?: number | undefined;
  name: string;
  organizationName?: string | undefined;
  redirectUri?: string | undefined;
  refreshToken?: string | undefined;
  scopes?: string | undefined;
};

/**
 * Successful response
 */
export type GiteaUpdateResponseBody = {
  success: boolean;
};

export type GiteaUpdateResponse = models.ErrorT | GiteaUpdateResponseBody;

/** @internal */
export const GiteaUpdateRequest$inboundSchema: z.ZodType<
  GiteaUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.string().optional(),
  clientId: z.string().optional(),
  clientSecret: z.string().optional(),
  expiresAt: z.number().optional(),
  gitProviderId: z.string(),
  giteaId: z.string(),
  giteaUrl: z.string(),
  giteaUsername: z.string().optional(),
  lastAuthenticatedAt: z.number().optional(),
  name: z.string(),
  organizationName: z.string().optional(),
  redirectUri: z.string().optional(),
  refreshToken: z.string().optional(),
  scopes: z.string().optional(),
});

/** @internal */
export type GiteaUpdateRequest$Outbound = {
  accessToken?: string | undefined;
  clientId?: string | undefined;
  clientSecret?: string | undefined;
  expiresAt?: number | undefined;
  gitProviderId: string;
  giteaId: string;
  giteaUrl: string;
  giteaUsername?: string | undefined;
  lastAuthenticatedAt?: number | undefined;
  name: string;
  organizationName?: string | undefined;
  redirectUri?: string | undefined;
  refreshToken?: string | undefined;
  scopes?: string | undefined;
};

/** @internal */
export const GiteaUpdateRequest$outboundSchema: z.ZodType<
  GiteaUpdateRequest$Outbound,
  z.ZodTypeDef,
  GiteaUpdateRequest
> = z.object({
  accessToken: z.string().optional(),
  clientId: z.string().optional(),
  clientSecret: z.string().optional(),
  expiresAt: z.number().optional(),
  gitProviderId: z.string(),
  giteaId: z.string(),
  giteaUrl: z.string(),
  giteaUsername: z.string().optional(),
  lastAuthenticatedAt: z.number().optional(),
  name: z.string(),
  organizationName: z.string().optional(),
  redirectUri: z.string().optional(),
  refreshToken: z.string().optional(),
  scopes: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiteaUpdateRequest$ {
  /** @deprecated use `GiteaUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = GiteaUpdateRequest$inboundSchema;
  /** @deprecated use `GiteaUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = GiteaUpdateRequest$outboundSchema;
  /** @deprecated use `GiteaUpdateRequest$Outbound` instead. */
  export type Outbound = GiteaUpdateRequest$Outbound;
}

export function giteaUpdateRequestToJSON(
  giteaUpdateRequest: GiteaUpdateRequest,
): string {
  return JSON.stringify(
    GiteaUpdateRequest$outboundSchema.parse(giteaUpdateRequest),
  );
}

export function giteaUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<GiteaUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiteaUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiteaUpdateRequest' from JSON`,
  );
}

/** @internal */
export const GiteaUpdateResponseBody$inboundSchema: z.ZodType<
  GiteaUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
});

/** @internal */
export type GiteaUpdateResponseBody$Outbound = {
  success: boolean;
};

/** @internal */
export const GiteaUpdateResponseBody$outboundSchema: z.ZodType<
  GiteaUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  GiteaUpdateResponseBody
> = z.object({
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiteaUpdateResponseBody$ {
  /** @deprecated use `GiteaUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = GiteaUpdateResponseBody$inboundSchema;
  /** @deprecated use `GiteaUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = GiteaUpdateResponseBody$outboundSchema;
  /** @deprecated use `GiteaUpdateResponseBody$Outbound` instead. */
  export type Outbound = GiteaUpdateResponseBody$Outbound;
}

export function giteaUpdateResponseBodyToJSON(
  giteaUpdateResponseBody: GiteaUpdateResponseBody,
): string {
  return JSON.stringify(
    GiteaUpdateResponseBody$outboundSchema.parse(giteaUpdateResponseBody),
  );
}

export function giteaUpdateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GiteaUpdateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiteaUpdateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiteaUpdateResponseBody' from JSON`,
  );
}

/** @internal */
export const GiteaUpdateResponse$inboundSchema: z.ZodType<
  GiteaUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ErrorT$inboundSchema,
  z.lazy(() => GiteaUpdateResponseBody$inboundSchema),
]);

/** @internal */
export type GiteaUpdateResponse$Outbound =
  | models.ErrorT$Outbound
  | GiteaUpdateResponseBody$Outbound;

/** @internal */
export const GiteaUpdateResponse$outboundSchema: z.ZodType<
  GiteaUpdateResponse$Outbound,
  z.ZodTypeDef,
  GiteaUpdateResponse
> = z.union([
  models.ErrorT$outboundSchema,
  z.lazy(() => GiteaUpdateResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiteaUpdateResponse$ {
  /** @deprecated use `GiteaUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = GiteaUpdateResponse$inboundSchema;
  /** @deprecated use `GiteaUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = GiteaUpdateResponse$outboundSchema;
  /** @deprecated use `GiteaUpdateResponse$Outbound` instead. */
  export type Outbound = GiteaUpdateResponse$Outbound;
}

export function giteaUpdateResponseToJSON(
  giteaUpdateResponse: GiteaUpdateResponse,
): string {
  return JSON.stringify(
    GiteaUpdateResponse$outboundSchema.parse(giteaUpdateResponse),
  );
}

export function giteaUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<GiteaUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiteaUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiteaUpdateResponse' from JSON`,
  );
}
