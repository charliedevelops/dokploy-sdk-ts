/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BitbucketGetBitbucketBranchesSecurity = {
  authorization: string;
};

export type BitbucketGetBitbucketBranchesRequest = {
  owner: string;
  repo: string;
  bitbucketId?: string | undefined;
};

/** @internal */
export const BitbucketGetBitbucketBranchesSecurity$inboundSchema: z.ZodType<
  BitbucketGetBitbucketBranchesSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type BitbucketGetBitbucketBranchesSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const BitbucketGetBitbucketBranchesSecurity$outboundSchema: z.ZodType<
  BitbucketGetBitbucketBranchesSecurity$Outbound,
  z.ZodTypeDef,
  BitbucketGetBitbucketBranchesSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BitbucketGetBitbucketBranchesSecurity$ {
  /** @deprecated use `BitbucketGetBitbucketBranchesSecurity$inboundSchema` instead. */
  export const inboundSchema =
    BitbucketGetBitbucketBranchesSecurity$inboundSchema;
  /** @deprecated use `BitbucketGetBitbucketBranchesSecurity$outboundSchema` instead. */
  export const outboundSchema =
    BitbucketGetBitbucketBranchesSecurity$outboundSchema;
  /** @deprecated use `BitbucketGetBitbucketBranchesSecurity$Outbound` instead. */
  export type Outbound = BitbucketGetBitbucketBranchesSecurity$Outbound;
}

export function bitbucketGetBitbucketBranchesSecurityToJSON(
  bitbucketGetBitbucketBranchesSecurity: BitbucketGetBitbucketBranchesSecurity,
): string {
  return JSON.stringify(
    BitbucketGetBitbucketBranchesSecurity$outboundSchema.parse(
      bitbucketGetBitbucketBranchesSecurity,
    ),
  );
}

export function bitbucketGetBitbucketBranchesSecurityFromJSON(
  jsonString: string,
): SafeParseResult<BitbucketGetBitbucketBranchesSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BitbucketGetBitbucketBranchesSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BitbucketGetBitbucketBranchesSecurity' from JSON`,
  );
}

/** @internal */
export const BitbucketGetBitbucketBranchesRequest$inboundSchema: z.ZodType<
  BitbucketGetBitbucketBranchesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  owner: z.string(),
  repo: z.string(),
  bitbucketId: z.string().optional(),
});

/** @internal */
export type BitbucketGetBitbucketBranchesRequest$Outbound = {
  owner: string;
  repo: string;
  bitbucketId?: string | undefined;
};

/** @internal */
export const BitbucketGetBitbucketBranchesRequest$outboundSchema: z.ZodType<
  BitbucketGetBitbucketBranchesRequest$Outbound,
  z.ZodTypeDef,
  BitbucketGetBitbucketBranchesRequest
> = z.object({
  owner: z.string(),
  repo: z.string(),
  bitbucketId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BitbucketGetBitbucketBranchesRequest$ {
  /** @deprecated use `BitbucketGetBitbucketBranchesRequest$inboundSchema` instead. */
  export const inboundSchema =
    BitbucketGetBitbucketBranchesRequest$inboundSchema;
  /** @deprecated use `BitbucketGetBitbucketBranchesRequest$outboundSchema` instead. */
  export const outboundSchema =
    BitbucketGetBitbucketBranchesRequest$outboundSchema;
  /** @deprecated use `BitbucketGetBitbucketBranchesRequest$Outbound` instead. */
  export type Outbound = BitbucketGetBitbucketBranchesRequest$Outbound;
}

export function bitbucketGetBitbucketBranchesRequestToJSON(
  bitbucketGetBitbucketBranchesRequest: BitbucketGetBitbucketBranchesRequest,
): string {
  return JSON.stringify(
    BitbucketGetBitbucketBranchesRequest$outboundSchema.parse(
      bitbucketGetBitbucketBranchesRequest,
    ),
  );
}

export function bitbucketGetBitbucketBranchesRequestFromJSON(
  jsonString: string,
): SafeParseResult<BitbucketGetBitbucketBranchesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BitbucketGetBitbucketBranchesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BitbucketGetBitbucketBranchesRequest' from JSON`,
  );
}
