/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DockerGetContainersByAppLabelSecurity = {
  authorization: string;
};

export const DockerGetContainersByAppLabelType = {
  Standalone: "standalone",
  Swarm: "swarm",
} as const;
export type DockerGetContainersByAppLabelType = ClosedEnum<
  typeof DockerGetContainersByAppLabelType
>;

export type DockerGetContainersByAppLabelRequest = {
  appName: string;
  serverId?: string | undefined;
  type: DockerGetContainersByAppLabelType;
};

/** @internal */
export const DockerGetContainersByAppLabelSecurity$inboundSchema: z.ZodType<
  DockerGetContainersByAppLabelSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type DockerGetContainersByAppLabelSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const DockerGetContainersByAppLabelSecurity$outboundSchema: z.ZodType<
  DockerGetContainersByAppLabelSecurity$Outbound,
  z.ZodTypeDef,
  DockerGetContainersByAppLabelSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DockerGetContainersByAppLabelSecurity$ {
  /** @deprecated use `DockerGetContainersByAppLabelSecurity$inboundSchema` instead. */
  export const inboundSchema =
    DockerGetContainersByAppLabelSecurity$inboundSchema;
  /** @deprecated use `DockerGetContainersByAppLabelSecurity$outboundSchema` instead. */
  export const outboundSchema =
    DockerGetContainersByAppLabelSecurity$outboundSchema;
  /** @deprecated use `DockerGetContainersByAppLabelSecurity$Outbound` instead. */
  export type Outbound = DockerGetContainersByAppLabelSecurity$Outbound;
}

export function dockerGetContainersByAppLabelSecurityToJSON(
  dockerGetContainersByAppLabelSecurity: DockerGetContainersByAppLabelSecurity,
): string {
  return JSON.stringify(
    DockerGetContainersByAppLabelSecurity$outboundSchema.parse(
      dockerGetContainersByAppLabelSecurity,
    ),
  );
}

export function dockerGetContainersByAppLabelSecurityFromJSON(
  jsonString: string,
): SafeParseResult<DockerGetContainersByAppLabelSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DockerGetContainersByAppLabelSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DockerGetContainersByAppLabelSecurity' from JSON`,
  );
}

/** @internal */
export const DockerGetContainersByAppLabelType$inboundSchema: z.ZodNativeEnum<
  typeof DockerGetContainersByAppLabelType
> = z.nativeEnum(DockerGetContainersByAppLabelType);

/** @internal */
export const DockerGetContainersByAppLabelType$outboundSchema: z.ZodNativeEnum<
  typeof DockerGetContainersByAppLabelType
> = DockerGetContainersByAppLabelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DockerGetContainersByAppLabelType$ {
  /** @deprecated use `DockerGetContainersByAppLabelType$inboundSchema` instead. */
  export const inboundSchema = DockerGetContainersByAppLabelType$inboundSchema;
  /** @deprecated use `DockerGetContainersByAppLabelType$outboundSchema` instead. */
  export const outboundSchema =
    DockerGetContainersByAppLabelType$outboundSchema;
}

/** @internal */
export const DockerGetContainersByAppLabelRequest$inboundSchema: z.ZodType<
  DockerGetContainersByAppLabelRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  serverId: z.string().optional(),
  type: DockerGetContainersByAppLabelType$inboundSchema,
});

/** @internal */
export type DockerGetContainersByAppLabelRequest$Outbound = {
  appName: string;
  serverId?: string | undefined;
  type: string;
};

/** @internal */
export const DockerGetContainersByAppLabelRequest$outboundSchema: z.ZodType<
  DockerGetContainersByAppLabelRequest$Outbound,
  z.ZodTypeDef,
  DockerGetContainersByAppLabelRequest
> = z.object({
  appName: z.string(),
  serverId: z.string().optional(),
  type: DockerGetContainersByAppLabelType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DockerGetContainersByAppLabelRequest$ {
  /** @deprecated use `DockerGetContainersByAppLabelRequest$inboundSchema` instead. */
  export const inboundSchema =
    DockerGetContainersByAppLabelRequest$inboundSchema;
  /** @deprecated use `DockerGetContainersByAppLabelRequest$outboundSchema` instead. */
  export const outboundSchema =
    DockerGetContainersByAppLabelRequest$outboundSchema;
  /** @deprecated use `DockerGetContainersByAppLabelRequest$Outbound` instead. */
  export type Outbound = DockerGetContainersByAppLabelRequest$Outbound;
}

export function dockerGetContainersByAppLabelRequestToJSON(
  dockerGetContainersByAppLabelRequest: DockerGetContainersByAppLabelRequest,
): string {
  return JSON.stringify(
    DockerGetContainersByAppLabelRequest$outboundSchema.parse(
      dockerGetContainersByAppLabelRequest,
    ),
  );
}

export function dockerGetContainersByAppLabelRequestFromJSON(
  jsonString: string,
): SafeParseResult<DockerGetContainersByAppLabelRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DockerGetContainersByAppLabelRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DockerGetContainersByAppLabelRequest' from JSON`,
  );
}
