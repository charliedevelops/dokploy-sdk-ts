/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComposeGetConvertedComposeRequest = {
  composeId: string;
};

/** @internal */
export const ComposeGetConvertedComposeRequest$inboundSchema: z.ZodType<
  ComposeGetConvertedComposeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  composeId: z.string(),
});

/** @internal */
export type ComposeGetConvertedComposeRequest$Outbound = {
  composeId: string;
};

/** @internal */
export const ComposeGetConvertedComposeRequest$outboundSchema: z.ZodType<
  ComposeGetConvertedComposeRequest$Outbound,
  z.ZodTypeDef,
  ComposeGetConvertedComposeRequest
> = z.object({
  composeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComposeGetConvertedComposeRequest$ {
  /** @deprecated use `ComposeGetConvertedComposeRequest$inboundSchema` instead. */
  export const inboundSchema = ComposeGetConvertedComposeRequest$inboundSchema;
  /** @deprecated use `ComposeGetConvertedComposeRequest$outboundSchema` instead. */
  export const outboundSchema =
    ComposeGetConvertedComposeRequest$outboundSchema;
  /** @deprecated use `ComposeGetConvertedComposeRequest$Outbound` instead. */
  export type Outbound = ComposeGetConvertedComposeRequest$Outbound;
}

export function composeGetConvertedComposeRequestToJSON(
  composeGetConvertedComposeRequest: ComposeGetConvertedComposeRequest,
): string {
  return JSON.stringify(
    ComposeGetConvertedComposeRequest$outboundSchema.parse(
      composeGetConvertedComposeRequest,
    ),
  );
}

export function composeGetConvertedComposeRequestFromJSON(
  jsonString: string,
): SafeParseResult<ComposeGetConvertedComposeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComposeGetConvertedComposeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComposeGetConvertedComposeRequest' from JSON`,
  );
}
