/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type DomainByComposeIdSecurity = {
  authorization: string;
};

export type DomainByComposeIdRequest = {
  composeId: string;
};

export const DomainByComposeIdCertificateType = {
  Letsencrypt: "letsencrypt",
  None: "none",
  Custom: "custom",
} as const;
export type DomainByComposeIdCertificateType = ClosedEnum<
  typeof DomainByComposeIdCertificateType
>;

export const DomainByComposeIdDomainType = {
  Compose: "compose",
  Application: "application",
  Preview: "preview",
} as const;
export type DomainByComposeIdDomainType = ClosedEnum<
  typeof DomainByComposeIdDomainType
>;

export type DomainByComposeIdResponseBody = {
  applicationId: string | null;
  certificateType: DomainByComposeIdCertificateType;
  composeId: string | null;
  createdAt: string;
  customCertResolver: string | null;
  domainId: string;
  domainType: DomainByComposeIdDomainType | null;
  host: string;
  https: boolean;
  internalPath: string | null;
  path: string | null;
  port: number | null;
  previewDeploymentId: string | null;
  serviceName: string | null;
  stripPath: boolean;
  uniqueConfigKey: number;
};

export type DomainByComposeIdResponse =
  | models.ErrorT
  | Array<DomainByComposeIdResponseBody>;

/** @internal */
export const DomainByComposeIdSecurity$inboundSchema: z.ZodType<
  DomainByComposeIdSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type DomainByComposeIdSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const DomainByComposeIdSecurity$outboundSchema: z.ZodType<
  DomainByComposeIdSecurity$Outbound,
  z.ZodTypeDef,
  DomainByComposeIdSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainByComposeIdSecurity$ {
  /** @deprecated use `DomainByComposeIdSecurity$inboundSchema` instead. */
  export const inboundSchema = DomainByComposeIdSecurity$inboundSchema;
  /** @deprecated use `DomainByComposeIdSecurity$outboundSchema` instead. */
  export const outboundSchema = DomainByComposeIdSecurity$outboundSchema;
  /** @deprecated use `DomainByComposeIdSecurity$Outbound` instead. */
  export type Outbound = DomainByComposeIdSecurity$Outbound;
}

export function domainByComposeIdSecurityToJSON(
  domainByComposeIdSecurity: DomainByComposeIdSecurity,
): string {
  return JSON.stringify(
    DomainByComposeIdSecurity$outboundSchema.parse(domainByComposeIdSecurity),
  );
}

export function domainByComposeIdSecurityFromJSON(
  jsonString: string,
): SafeParseResult<DomainByComposeIdSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DomainByComposeIdSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DomainByComposeIdSecurity' from JSON`,
  );
}

/** @internal */
export const DomainByComposeIdRequest$inboundSchema: z.ZodType<
  DomainByComposeIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  composeId: z.string(),
});

/** @internal */
export type DomainByComposeIdRequest$Outbound = {
  composeId: string;
};

/** @internal */
export const DomainByComposeIdRequest$outboundSchema: z.ZodType<
  DomainByComposeIdRequest$Outbound,
  z.ZodTypeDef,
  DomainByComposeIdRequest
> = z.object({
  composeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainByComposeIdRequest$ {
  /** @deprecated use `DomainByComposeIdRequest$inboundSchema` instead. */
  export const inboundSchema = DomainByComposeIdRequest$inboundSchema;
  /** @deprecated use `DomainByComposeIdRequest$outboundSchema` instead. */
  export const outboundSchema = DomainByComposeIdRequest$outboundSchema;
  /** @deprecated use `DomainByComposeIdRequest$Outbound` instead. */
  export type Outbound = DomainByComposeIdRequest$Outbound;
}

export function domainByComposeIdRequestToJSON(
  domainByComposeIdRequest: DomainByComposeIdRequest,
): string {
  return JSON.stringify(
    DomainByComposeIdRequest$outboundSchema.parse(domainByComposeIdRequest),
  );
}

export function domainByComposeIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DomainByComposeIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DomainByComposeIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DomainByComposeIdRequest' from JSON`,
  );
}

/** @internal */
export const DomainByComposeIdCertificateType$inboundSchema: z.ZodNativeEnum<
  typeof DomainByComposeIdCertificateType
> = z.nativeEnum(DomainByComposeIdCertificateType);

/** @internal */
export const DomainByComposeIdCertificateType$outboundSchema: z.ZodNativeEnum<
  typeof DomainByComposeIdCertificateType
> = DomainByComposeIdCertificateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainByComposeIdCertificateType$ {
  /** @deprecated use `DomainByComposeIdCertificateType$inboundSchema` instead. */
  export const inboundSchema = DomainByComposeIdCertificateType$inboundSchema;
  /** @deprecated use `DomainByComposeIdCertificateType$outboundSchema` instead. */
  export const outboundSchema = DomainByComposeIdCertificateType$outboundSchema;
}

/** @internal */
export const DomainByComposeIdDomainType$inboundSchema: z.ZodNativeEnum<
  typeof DomainByComposeIdDomainType
> = z.nativeEnum(DomainByComposeIdDomainType);

/** @internal */
export const DomainByComposeIdDomainType$outboundSchema: z.ZodNativeEnum<
  typeof DomainByComposeIdDomainType
> = DomainByComposeIdDomainType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainByComposeIdDomainType$ {
  /** @deprecated use `DomainByComposeIdDomainType$inboundSchema` instead. */
  export const inboundSchema = DomainByComposeIdDomainType$inboundSchema;
  /** @deprecated use `DomainByComposeIdDomainType$outboundSchema` instead. */
  export const outboundSchema = DomainByComposeIdDomainType$outboundSchema;
}

/** @internal */
export const DomainByComposeIdResponseBody$inboundSchema: z.ZodType<
  DomainByComposeIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.nullable(z.string()),
  certificateType: DomainByComposeIdCertificateType$inboundSchema,
  composeId: z.nullable(z.string()),
  createdAt: z.string(),
  customCertResolver: z.nullable(z.string()),
  domainId: z.string(),
  domainType: z.nullable(DomainByComposeIdDomainType$inboundSchema),
  host: z.string(),
  https: z.boolean(),
  internalPath: z.nullable(z.string()),
  path: z.nullable(z.string()),
  port: z.nullable(z.number()),
  previewDeploymentId: z.nullable(z.string()),
  serviceName: z.nullable(z.string()),
  stripPath: z.boolean(),
  uniqueConfigKey: z.number(),
});

/** @internal */
export type DomainByComposeIdResponseBody$Outbound = {
  applicationId: string | null;
  certificateType: string;
  composeId: string | null;
  createdAt: string;
  customCertResolver: string | null;
  domainId: string;
  domainType: string | null;
  host: string;
  https: boolean;
  internalPath: string | null;
  path: string | null;
  port: number | null;
  previewDeploymentId: string | null;
  serviceName: string | null;
  stripPath: boolean;
  uniqueConfigKey: number;
};

/** @internal */
export const DomainByComposeIdResponseBody$outboundSchema: z.ZodType<
  DomainByComposeIdResponseBody$Outbound,
  z.ZodTypeDef,
  DomainByComposeIdResponseBody
> = z.object({
  applicationId: z.nullable(z.string()),
  certificateType: DomainByComposeIdCertificateType$outboundSchema,
  composeId: z.nullable(z.string()),
  createdAt: z.string(),
  customCertResolver: z.nullable(z.string()),
  domainId: z.string(),
  domainType: z.nullable(DomainByComposeIdDomainType$outboundSchema),
  host: z.string(),
  https: z.boolean(),
  internalPath: z.nullable(z.string()),
  path: z.nullable(z.string()),
  port: z.nullable(z.number()),
  previewDeploymentId: z.nullable(z.string()),
  serviceName: z.nullable(z.string()),
  stripPath: z.boolean(),
  uniqueConfigKey: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainByComposeIdResponseBody$ {
  /** @deprecated use `DomainByComposeIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = DomainByComposeIdResponseBody$inboundSchema;
  /** @deprecated use `DomainByComposeIdResponseBody$outboundSchema` instead. */
  export const outboundSchema = DomainByComposeIdResponseBody$outboundSchema;
  /** @deprecated use `DomainByComposeIdResponseBody$Outbound` instead. */
  export type Outbound = DomainByComposeIdResponseBody$Outbound;
}

export function domainByComposeIdResponseBodyToJSON(
  domainByComposeIdResponseBody: DomainByComposeIdResponseBody,
): string {
  return JSON.stringify(
    DomainByComposeIdResponseBody$outboundSchema.parse(
      domainByComposeIdResponseBody,
    ),
  );
}

export function domainByComposeIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DomainByComposeIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DomainByComposeIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DomainByComposeIdResponseBody' from JSON`,
  );
}

/** @internal */
export const DomainByComposeIdResponse$inboundSchema: z.ZodType<
  DomainByComposeIdResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ErrorT$inboundSchema,
  z.array(z.lazy(() => DomainByComposeIdResponseBody$inboundSchema)),
]);

/** @internal */
export type DomainByComposeIdResponse$Outbound =
  | models.ErrorT$Outbound
  | Array<DomainByComposeIdResponseBody$Outbound>;

/** @internal */
export const DomainByComposeIdResponse$outboundSchema: z.ZodType<
  DomainByComposeIdResponse$Outbound,
  z.ZodTypeDef,
  DomainByComposeIdResponse
> = z.union([
  models.ErrorT$outboundSchema,
  z.array(z.lazy(() => DomainByComposeIdResponseBody$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainByComposeIdResponse$ {
  /** @deprecated use `DomainByComposeIdResponse$inboundSchema` instead. */
  export const inboundSchema = DomainByComposeIdResponse$inboundSchema;
  /** @deprecated use `DomainByComposeIdResponse$outboundSchema` instead. */
  export const outboundSchema = DomainByComposeIdResponse$outboundSchema;
  /** @deprecated use `DomainByComposeIdResponse$Outbound` instead. */
  export type Outbound = DomainByComposeIdResponse$Outbound;
}

export function domainByComposeIdResponseToJSON(
  domainByComposeIdResponse: DomainByComposeIdResponse,
): string {
  return JSON.stringify(
    DomainByComposeIdResponse$outboundSchema.parse(domainByComposeIdResponse),
  );
}

export function domainByComposeIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<DomainByComposeIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DomainByComposeIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DomainByComposeIdResponse' from JSON`,
  );
}
