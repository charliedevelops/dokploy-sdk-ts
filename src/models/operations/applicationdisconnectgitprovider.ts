/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ApplicationDisconnectGitProviderSecurity = {
  authorization: string;
};

export type ApplicationDisconnectGitProviderRequest = {
  applicationId: string;
};

export type ApplicationDisconnectGitProviderResponse = models.ErrorT | boolean;

/** @internal */
export const ApplicationDisconnectGitProviderSecurity$inboundSchema: z.ZodType<
  ApplicationDisconnectGitProviderSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type ApplicationDisconnectGitProviderSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const ApplicationDisconnectGitProviderSecurity$outboundSchema: z.ZodType<
  ApplicationDisconnectGitProviderSecurity$Outbound,
  z.ZodTypeDef,
  ApplicationDisconnectGitProviderSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDisconnectGitProviderSecurity$ {
  /** @deprecated use `ApplicationDisconnectGitProviderSecurity$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationDisconnectGitProviderSecurity$inboundSchema;
  /** @deprecated use `ApplicationDisconnectGitProviderSecurity$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationDisconnectGitProviderSecurity$outboundSchema;
  /** @deprecated use `ApplicationDisconnectGitProviderSecurity$Outbound` instead. */
  export type Outbound = ApplicationDisconnectGitProviderSecurity$Outbound;
}

export function applicationDisconnectGitProviderSecurityToJSON(
  applicationDisconnectGitProviderSecurity:
    ApplicationDisconnectGitProviderSecurity,
): string {
  return JSON.stringify(
    ApplicationDisconnectGitProviderSecurity$outboundSchema.parse(
      applicationDisconnectGitProviderSecurity,
    ),
  );
}

export function applicationDisconnectGitProviderSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  ApplicationDisconnectGitProviderSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationDisconnectGitProviderSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApplicationDisconnectGitProviderSecurity' from JSON`,
  );
}

/** @internal */
export const ApplicationDisconnectGitProviderRequest$inboundSchema: z.ZodType<
  ApplicationDisconnectGitProviderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string(),
});

/** @internal */
export type ApplicationDisconnectGitProviderRequest$Outbound = {
  applicationId: string;
};

/** @internal */
export const ApplicationDisconnectGitProviderRequest$outboundSchema: z.ZodType<
  ApplicationDisconnectGitProviderRequest$Outbound,
  z.ZodTypeDef,
  ApplicationDisconnectGitProviderRequest
> = z.object({
  applicationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDisconnectGitProviderRequest$ {
  /** @deprecated use `ApplicationDisconnectGitProviderRequest$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationDisconnectGitProviderRequest$inboundSchema;
  /** @deprecated use `ApplicationDisconnectGitProviderRequest$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationDisconnectGitProviderRequest$outboundSchema;
  /** @deprecated use `ApplicationDisconnectGitProviderRequest$Outbound` instead. */
  export type Outbound = ApplicationDisconnectGitProviderRequest$Outbound;
}

export function applicationDisconnectGitProviderRequestToJSON(
  applicationDisconnectGitProviderRequest:
    ApplicationDisconnectGitProviderRequest,
): string {
  return JSON.stringify(
    ApplicationDisconnectGitProviderRequest$outboundSchema.parse(
      applicationDisconnectGitProviderRequest,
    ),
  );
}

export function applicationDisconnectGitProviderRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ApplicationDisconnectGitProviderRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationDisconnectGitProviderRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApplicationDisconnectGitProviderRequest' from JSON`,
  );
}

/** @internal */
export const ApplicationDisconnectGitProviderResponse$inboundSchema: z.ZodType<
  ApplicationDisconnectGitProviderResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.boolean()]);

/** @internal */
export type ApplicationDisconnectGitProviderResponse$Outbound =
  | models.ErrorT$Outbound
  | boolean;

/** @internal */
export const ApplicationDisconnectGitProviderResponse$outboundSchema: z.ZodType<
  ApplicationDisconnectGitProviderResponse$Outbound,
  z.ZodTypeDef,
  ApplicationDisconnectGitProviderResponse
> = z.union([models.ErrorT$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDisconnectGitProviderResponse$ {
  /** @deprecated use `ApplicationDisconnectGitProviderResponse$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationDisconnectGitProviderResponse$inboundSchema;
  /** @deprecated use `ApplicationDisconnectGitProviderResponse$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationDisconnectGitProviderResponse$outboundSchema;
  /** @deprecated use `ApplicationDisconnectGitProviderResponse$Outbound` instead. */
  export type Outbound = ApplicationDisconnectGitProviderResponse$Outbound;
}

export function applicationDisconnectGitProviderResponseToJSON(
  applicationDisconnectGitProviderResponse:
    ApplicationDisconnectGitProviderResponse,
): string {
  return JSON.stringify(
    ApplicationDisconnectGitProviderResponse$outboundSchema.parse(
      applicationDisconnectGitProviderResponse,
    ),
  );
}

export function applicationDisconnectGitProviderResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ApplicationDisconnectGitProviderResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationDisconnectGitProviderResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApplicationDisconnectGitProviderResponse' from JSON`,
  );
}
