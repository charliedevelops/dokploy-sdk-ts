/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const SettingsAssignDomainServerCertificateType = {
  Letsencrypt: "letsencrypt",
  None: "none",
  Custom: "custom",
} as const;
export type SettingsAssignDomainServerCertificateType = ClosedEnum<
  typeof SettingsAssignDomainServerCertificateType
>;

export type SettingsAssignDomainServerRequest = {
  certificateType: SettingsAssignDomainServerCertificateType;
  host: string | null;
  https?: boolean | undefined;
  letsEncryptEmail?: string | null | undefined;
};

/** @internal */
export const SettingsAssignDomainServerCertificateType$inboundSchema:
  z.ZodNativeEnum<typeof SettingsAssignDomainServerCertificateType> = z
    .nativeEnum(SettingsAssignDomainServerCertificateType);

/** @internal */
export const SettingsAssignDomainServerCertificateType$outboundSchema:
  z.ZodNativeEnum<typeof SettingsAssignDomainServerCertificateType> =
    SettingsAssignDomainServerCertificateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SettingsAssignDomainServerCertificateType$ {
  /** @deprecated use `SettingsAssignDomainServerCertificateType$inboundSchema` instead. */
  export const inboundSchema =
    SettingsAssignDomainServerCertificateType$inboundSchema;
  /** @deprecated use `SettingsAssignDomainServerCertificateType$outboundSchema` instead. */
  export const outboundSchema =
    SettingsAssignDomainServerCertificateType$outboundSchema;
}

/** @internal */
export const SettingsAssignDomainServerRequest$inboundSchema: z.ZodType<
  SettingsAssignDomainServerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  certificateType: SettingsAssignDomainServerCertificateType$inboundSchema,
  host: z.nullable(z.string()),
  https: z.boolean().optional(),
  letsEncryptEmail: z.nullable(z.string()).optional(),
});

/** @internal */
export type SettingsAssignDomainServerRequest$Outbound = {
  certificateType: string;
  host: string | null;
  https?: boolean | undefined;
  letsEncryptEmail?: string | null | undefined;
};

/** @internal */
export const SettingsAssignDomainServerRequest$outboundSchema: z.ZodType<
  SettingsAssignDomainServerRequest$Outbound,
  z.ZodTypeDef,
  SettingsAssignDomainServerRequest
> = z.object({
  certificateType: SettingsAssignDomainServerCertificateType$outboundSchema,
  host: z.nullable(z.string()),
  https: z.boolean().optional(),
  letsEncryptEmail: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SettingsAssignDomainServerRequest$ {
  /** @deprecated use `SettingsAssignDomainServerRequest$inboundSchema` instead. */
  export const inboundSchema = SettingsAssignDomainServerRequest$inboundSchema;
  /** @deprecated use `SettingsAssignDomainServerRequest$outboundSchema` instead. */
  export const outboundSchema =
    SettingsAssignDomainServerRequest$outboundSchema;
  /** @deprecated use `SettingsAssignDomainServerRequest$Outbound` instead. */
  export type Outbound = SettingsAssignDomainServerRequest$Outbound;
}

export function settingsAssignDomainServerRequestToJSON(
  settingsAssignDomainServerRequest: SettingsAssignDomainServerRequest,
): string {
  return JSON.stringify(
    SettingsAssignDomainServerRequest$outboundSchema.parse(
      settingsAssignDomainServerRequest,
    ),
  );
}

export function settingsAssignDomainServerRequestFromJSON(
  jsonString: string,
): SafeParseResult<SettingsAssignDomainServerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SettingsAssignDomainServerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SettingsAssignDomainServerRequest' from JSON`,
  );
}
