/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type DomainUpdateSecurity = {
  authorization: string;
};

export const DomainUpdateCertificateTypeRequest = {
  Letsencrypt: "letsencrypt",
  None: "none",
  Custom: "custom",
} as const;
export type DomainUpdateCertificateTypeRequest = ClosedEnum<
  typeof DomainUpdateCertificateTypeRequest
>;

export const DomainUpdateDomainTypeRequest = {
  Compose: "compose",
  Application: "application",
  Preview: "preview",
} as const;
export type DomainUpdateDomainTypeRequest = ClosedEnum<
  typeof DomainUpdateDomainTypeRequest
>;

export type DomainUpdateRequest = {
  host: string;
  path?: string | null | undefined;
  port?: number | null | undefined;
  https?: boolean | undefined;
  certificateType?: DomainUpdateCertificateTypeRequest | undefined;
  customCertResolver?: string | null | undefined;
  serviceName?: string | null | undefined;
  domainType?: DomainUpdateDomainTypeRequest | null | undefined;
  internalPath?: string | null | undefined;
  stripPath?: boolean | undefined;
  domainId: string;
};

export const DomainUpdateDomainTypeResponse = {
  Compose: "compose",
  Application: "application",
  Preview: "preview",
} as const;
export type DomainUpdateDomainTypeResponse = ClosedEnum<
  typeof DomainUpdateDomainTypeResponse
>;

export const DomainUpdateCertificateTypeResponse = {
  Letsencrypt: "letsencrypt",
  None: "none",
  Custom: "custom",
} as const;
export type DomainUpdateCertificateTypeResponse = ClosedEnum<
  typeof DomainUpdateCertificateTypeResponse
>;

/**
 * Successful response
 */
export type DomainUpdateResponseBody = {
  domainId: string;
  host: string;
  https: boolean;
  port: number | null;
  path: string | null;
  serviceName: string | null;
  domainType: DomainUpdateDomainTypeResponse | null;
  uniqueConfigKey: number;
  createdAt: string;
  composeId: string | null;
  customCertResolver: string | null;
  applicationId: string | null;
  previewDeploymentId: string | null;
  certificateType: DomainUpdateCertificateTypeResponse;
  internalPath: string | null;
  stripPath: boolean;
};

export type DomainUpdateResponse = DomainUpdateResponseBody | models.ErrorT;

/** @internal */
export const DomainUpdateSecurity$inboundSchema: z.ZodType<
  DomainUpdateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type DomainUpdateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const DomainUpdateSecurity$outboundSchema: z.ZodType<
  DomainUpdateSecurity$Outbound,
  z.ZodTypeDef,
  DomainUpdateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainUpdateSecurity$ {
  /** @deprecated use `DomainUpdateSecurity$inboundSchema` instead. */
  export const inboundSchema = DomainUpdateSecurity$inboundSchema;
  /** @deprecated use `DomainUpdateSecurity$outboundSchema` instead. */
  export const outboundSchema = DomainUpdateSecurity$outboundSchema;
  /** @deprecated use `DomainUpdateSecurity$Outbound` instead. */
  export type Outbound = DomainUpdateSecurity$Outbound;
}

export function domainUpdateSecurityToJSON(
  domainUpdateSecurity: DomainUpdateSecurity,
): string {
  return JSON.stringify(
    DomainUpdateSecurity$outboundSchema.parse(domainUpdateSecurity),
  );
}

export function domainUpdateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<DomainUpdateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DomainUpdateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DomainUpdateSecurity' from JSON`,
  );
}

/** @internal */
export const DomainUpdateCertificateTypeRequest$inboundSchema: z.ZodNativeEnum<
  typeof DomainUpdateCertificateTypeRequest
> = z.nativeEnum(DomainUpdateCertificateTypeRequest);

/** @internal */
export const DomainUpdateCertificateTypeRequest$outboundSchema: z.ZodNativeEnum<
  typeof DomainUpdateCertificateTypeRequest
> = DomainUpdateCertificateTypeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainUpdateCertificateTypeRequest$ {
  /** @deprecated use `DomainUpdateCertificateTypeRequest$inboundSchema` instead. */
  export const inboundSchema = DomainUpdateCertificateTypeRequest$inboundSchema;
  /** @deprecated use `DomainUpdateCertificateTypeRequest$outboundSchema` instead. */
  export const outboundSchema =
    DomainUpdateCertificateTypeRequest$outboundSchema;
}

/** @internal */
export const DomainUpdateDomainTypeRequest$inboundSchema: z.ZodNativeEnum<
  typeof DomainUpdateDomainTypeRequest
> = z.nativeEnum(DomainUpdateDomainTypeRequest);

/** @internal */
export const DomainUpdateDomainTypeRequest$outboundSchema: z.ZodNativeEnum<
  typeof DomainUpdateDomainTypeRequest
> = DomainUpdateDomainTypeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainUpdateDomainTypeRequest$ {
  /** @deprecated use `DomainUpdateDomainTypeRequest$inboundSchema` instead. */
  export const inboundSchema = DomainUpdateDomainTypeRequest$inboundSchema;
  /** @deprecated use `DomainUpdateDomainTypeRequest$outboundSchema` instead. */
  export const outboundSchema = DomainUpdateDomainTypeRequest$outboundSchema;
}

/** @internal */
export const DomainUpdateRequest$inboundSchema: z.ZodType<
  DomainUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  host: z.string(),
  path: z.nullable(z.string()).optional(),
  port: z.nullable(z.number()).optional(),
  https: z.boolean().optional(),
  certificateType: DomainUpdateCertificateTypeRequest$inboundSchema.optional(),
  customCertResolver: z.nullable(z.string()).optional(),
  serviceName: z.nullable(z.string()).optional(),
  domainType: z.nullable(DomainUpdateDomainTypeRequest$inboundSchema)
    .optional(),
  internalPath: z.nullable(z.string()).optional(),
  stripPath: z.boolean().optional(),
  domainId: z.string(),
});

/** @internal */
export type DomainUpdateRequest$Outbound = {
  host: string;
  path?: string | null | undefined;
  port?: number | null | undefined;
  https?: boolean | undefined;
  certificateType?: string | undefined;
  customCertResolver?: string | null | undefined;
  serviceName?: string | null | undefined;
  domainType?: string | null | undefined;
  internalPath?: string | null | undefined;
  stripPath?: boolean | undefined;
  domainId: string;
};

/** @internal */
export const DomainUpdateRequest$outboundSchema: z.ZodType<
  DomainUpdateRequest$Outbound,
  z.ZodTypeDef,
  DomainUpdateRequest
> = z.object({
  host: z.string(),
  path: z.nullable(z.string()).optional(),
  port: z.nullable(z.number()).optional(),
  https: z.boolean().optional(),
  certificateType: DomainUpdateCertificateTypeRequest$outboundSchema.optional(),
  customCertResolver: z.nullable(z.string()).optional(),
  serviceName: z.nullable(z.string()).optional(),
  domainType: z.nullable(DomainUpdateDomainTypeRequest$outboundSchema)
    .optional(),
  internalPath: z.nullable(z.string()).optional(),
  stripPath: z.boolean().optional(),
  domainId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainUpdateRequest$ {
  /** @deprecated use `DomainUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = DomainUpdateRequest$inboundSchema;
  /** @deprecated use `DomainUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = DomainUpdateRequest$outboundSchema;
  /** @deprecated use `DomainUpdateRequest$Outbound` instead. */
  export type Outbound = DomainUpdateRequest$Outbound;
}

export function domainUpdateRequestToJSON(
  domainUpdateRequest: DomainUpdateRequest,
): string {
  return JSON.stringify(
    DomainUpdateRequest$outboundSchema.parse(domainUpdateRequest),
  );
}

export function domainUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<DomainUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DomainUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DomainUpdateRequest' from JSON`,
  );
}

/** @internal */
export const DomainUpdateDomainTypeResponse$inboundSchema: z.ZodNativeEnum<
  typeof DomainUpdateDomainTypeResponse
> = z.nativeEnum(DomainUpdateDomainTypeResponse);

/** @internal */
export const DomainUpdateDomainTypeResponse$outboundSchema: z.ZodNativeEnum<
  typeof DomainUpdateDomainTypeResponse
> = DomainUpdateDomainTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainUpdateDomainTypeResponse$ {
  /** @deprecated use `DomainUpdateDomainTypeResponse$inboundSchema` instead. */
  export const inboundSchema = DomainUpdateDomainTypeResponse$inboundSchema;
  /** @deprecated use `DomainUpdateDomainTypeResponse$outboundSchema` instead. */
  export const outboundSchema = DomainUpdateDomainTypeResponse$outboundSchema;
}

/** @internal */
export const DomainUpdateCertificateTypeResponse$inboundSchema: z.ZodNativeEnum<
  typeof DomainUpdateCertificateTypeResponse
> = z.nativeEnum(DomainUpdateCertificateTypeResponse);

/** @internal */
export const DomainUpdateCertificateTypeResponse$outboundSchema:
  z.ZodNativeEnum<typeof DomainUpdateCertificateTypeResponse> =
    DomainUpdateCertificateTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainUpdateCertificateTypeResponse$ {
  /** @deprecated use `DomainUpdateCertificateTypeResponse$inboundSchema` instead. */
  export const inboundSchema =
    DomainUpdateCertificateTypeResponse$inboundSchema;
  /** @deprecated use `DomainUpdateCertificateTypeResponse$outboundSchema` instead. */
  export const outboundSchema =
    DomainUpdateCertificateTypeResponse$outboundSchema;
}

/** @internal */
export const DomainUpdateResponseBody$inboundSchema: z.ZodType<
  DomainUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  domainId: z.string(),
  host: z.string(),
  https: z.boolean(),
  port: z.nullable(z.number()),
  path: z.nullable(z.string()),
  serviceName: z.nullable(z.string()),
  domainType: z.nullable(DomainUpdateDomainTypeResponse$inboundSchema),
  uniqueConfigKey: z.number(),
  createdAt: z.string(),
  composeId: z.nullable(z.string()),
  customCertResolver: z.nullable(z.string()),
  applicationId: z.nullable(z.string()),
  previewDeploymentId: z.nullable(z.string()),
  certificateType: DomainUpdateCertificateTypeResponse$inboundSchema,
  internalPath: z.nullable(z.string()),
  stripPath: z.boolean(),
});

/** @internal */
export type DomainUpdateResponseBody$Outbound = {
  domainId: string;
  host: string;
  https: boolean;
  port: number | null;
  path: string | null;
  serviceName: string | null;
  domainType: string | null;
  uniqueConfigKey: number;
  createdAt: string;
  composeId: string | null;
  customCertResolver: string | null;
  applicationId: string | null;
  previewDeploymentId: string | null;
  certificateType: string;
  internalPath: string | null;
  stripPath: boolean;
};

/** @internal */
export const DomainUpdateResponseBody$outboundSchema: z.ZodType<
  DomainUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  DomainUpdateResponseBody
> = z.object({
  domainId: z.string(),
  host: z.string(),
  https: z.boolean(),
  port: z.nullable(z.number()),
  path: z.nullable(z.string()),
  serviceName: z.nullable(z.string()),
  domainType: z.nullable(DomainUpdateDomainTypeResponse$outboundSchema),
  uniqueConfigKey: z.number(),
  createdAt: z.string(),
  composeId: z.nullable(z.string()),
  customCertResolver: z.nullable(z.string()),
  applicationId: z.nullable(z.string()),
  previewDeploymentId: z.nullable(z.string()),
  certificateType: DomainUpdateCertificateTypeResponse$outboundSchema,
  internalPath: z.nullable(z.string()),
  stripPath: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainUpdateResponseBody$ {
  /** @deprecated use `DomainUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = DomainUpdateResponseBody$inboundSchema;
  /** @deprecated use `DomainUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = DomainUpdateResponseBody$outboundSchema;
  /** @deprecated use `DomainUpdateResponseBody$Outbound` instead. */
  export type Outbound = DomainUpdateResponseBody$Outbound;
}

export function domainUpdateResponseBodyToJSON(
  domainUpdateResponseBody: DomainUpdateResponseBody,
): string {
  return JSON.stringify(
    DomainUpdateResponseBody$outboundSchema.parse(domainUpdateResponseBody),
  );
}

export function domainUpdateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DomainUpdateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DomainUpdateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DomainUpdateResponseBody' from JSON`,
  );
}

/** @internal */
export const DomainUpdateResponse$inboundSchema: z.ZodType<
  DomainUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DomainUpdateResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type DomainUpdateResponse$Outbound =
  | DomainUpdateResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const DomainUpdateResponse$outboundSchema: z.ZodType<
  DomainUpdateResponse$Outbound,
  z.ZodTypeDef,
  DomainUpdateResponse
> = z.union([
  z.lazy(() => DomainUpdateResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainUpdateResponse$ {
  /** @deprecated use `DomainUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = DomainUpdateResponse$inboundSchema;
  /** @deprecated use `DomainUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = DomainUpdateResponse$outboundSchema;
  /** @deprecated use `DomainUpdateResponse$Outbound` instead. */
  export type Outbound = DomainUpdateResponse$Outbound;
}

export function domainUpdateResponseToJSON(
  domainUpdateResponse: DomainUpdateResponse,
): string {
  return JSON.stringify(
    DomainUpdateResponse$outboundSchema.parse(domainUpdateResponse),
  );
}

export function domainUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<DomainUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DomainUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DomainUpdateResponse' from JSON`,
  );
}
