/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export const PostgresChangeStatusApplicationStatusRequest = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type PostgresChangeStatusApplicationStatusRequest = ClosedEnum<
  typeof PostgresChangeStatusApplicationStatusRequest
>;

export type PostgresChangeStatusRequest = {
  applicationStatus: PostgresChangeStatusApplicationStatusRequest;
  postgresId: string;
};

export const PostgresChangeStatusApplicationStatusResponse = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type PostgresChangeStatusApplicationStatusResponse = ClosedEnum<
  typeof PostgresChangeStatusApplicationStatusResponse
>;

export const PostgresChangeStatusBackupType = {
  Database: "database",
  Compose: "compose",
} as const;
export type PostgresChangeStatusBackupType = ClosedEnum<
  typeof PostgresChangeStatusBackupType
>;

export const PostgresChangeStatusDatabaseType = {
  Postgres: "postgres",
  Mariadb: "mariadb",
  Mysql: "mysql",
  Mongo: "mongo",
  WebServer: "web-server",
} as const;
export type PostgresChangeStatusDatabaseType = ClosedEnum<
  typeof PostgresChangeStatusDatabaseType
>;

export const PostgresChangeStatusMetadataEnum = {
  Null: "null",
} as const;
export type PostgresChangeStatusMetadataEnum = ClosedEnum<
  typeof PostgresChangeStatusMetadataEnum
>;

export type PostgresChangeStatusMariadb = {
  databasePassword: string;
  databaseUser: string;
};

export type PostgresChangeStatusMongo = {
  databasePassword: string;
  databaseUser: string;
};

export type PostgresChangeStatusMysql = {
  databaseRootPassword: string;
};

export type PostgresChangeStatusPostgres = {
  databaseUser: string;
};

export type PostgresChangeStatusMetadata = {
  mariadb?: PostgresChangeStatusMariadb | undefined;
  mongo?: PostgresChangeStatusMongo | undefined;
  mysql?: PostgresChangeStatusMysql | undefined;
  postgres?: PostgresChangeStatusPostgres | undefined;
};

export type PostgresChangeStatusMetadataUnion =
  | PostgresChangeStatusMetadata
  | PostgresChangeStatusMetadataEnum;

export type PostgresChangeStatusBackup = {
  appName: string;
  backupId: string;
  backupType: PostgresChangeStatusBackupType;
  composeId: string | null;
  database: string;
  databaseType: PostgresChangeStatusDatabaseType;
  destinationId: string;
  enabled: boolean | null;
  keepLatestCount: number | null;
  mariadbId: string | null;
  metadata?:
    | PostgresChangeStatusMetadata
    | PostgresChangeStatusMetadataEnum
    | null
    | undefined;
  mongoId: string | null;
  mysqlId: string | null;
  postgresId: string | null;
  prefix: string;
  schedule: string;
  serviceName: string | null;
  userId: string | null;
};

export type PostgresChangeStatusProject = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

export type PostgresChangeStatusEnvironment = {
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  name: string;
  project: PostgresChangeStatusProject;
  projectId: string;
};

export type PostgresChangeStatusHealthCheckSwarm = {
  interval?: number | undefined;
  retries?: number | undefined;
  startPeriod?: number | undefined;
  test?: Array<string> | undefined;
  timeout?: number | undefined;
};

export type PostgresChangeStatusGlobal = {};

export type PostgresChangeStatusGlobalJob = {};

export type PostgresChangeStatusReplicated = {
  replicas?: number | undefined;
};

export type PostgresChangeStatusReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type PostgresChangeStatusModeSwarm = {
  global?: PostgresChangeStatusGlobal | undefined;
  globalJob?: PostgresChangeStatusGlobalJob | undefined;
  replicated?: PostgresChangeStatusReplicated | undefined;
  replicatedJob?: PostgresChangeStatusReplicatedJob | undefined;
};

export const PostgresChangeStatusServiceType = {
  Application: "application",
  Postgres: "postgres",
  Mysql: "mysql",
  Mariadb: "mariadb",
  Mongo: "mongo",
  Redis: "redis",
  Compose: "compose",
} as const;
export type PostgresChangeStatusServiceType = ClosedEnum<
  typeof PostgresChangeStatusServiceType
>;

export const PostgresChangeStatusType = {
  Bind: "bind",
  Volume: "volume",
  File: "file",
} as const;
export type PostgresChangeStatusType = ClosedEnum<
  typeof PostgresChangeStatusType
>;

export type PostgresChangeStatusMount = {
  applicationId: string | null;
  composeId: string | null;
  content: string | null;
  filePath: string | null;
  hostPath: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mountId: string;
  mountPath: string;
  mysqlId: string | null;
  postgresId: string | null;
  redisId: string | null;
  serviceType: PostgresChangeStatusServiceType;
  type: PostgresChangeStatusType;
  volumeName: string | null;
};

export type PostgresChangeStatusDriverOpts = {};

export type PostgresChangeStatusNetworkSwarm = {
  aliases?: Array<string> | undefined;
  driverOpts?: PostgresChangeStatusDriverOpts | undefined;
  target?: string | undefined;
};

export type PostgresChangeStatusPlatform = {
  architecture: string;
  os: string;
};

export type PostgresChangeStatusSpread = {
  spreadDescriptor: string;
};

export type PostgresChangeStatusPreference = {
  spread: PostgresChangeStatusSpread;
};

export type PostgresChangeStatusPlacementSwarm = {
  constraints?: Array<string> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<PostgresChangeStatusPlatform> | undefined;
  preferences?: Array<PostgresChangeStatusPreference> | undefined;
};

export type PostgresChangeStatusRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type PostgresChangeStatusRollbackConfigSwarm = {
  delay?: number | undefined;
  failureAction?: string | undefined;
  maxFailureRatio?: number | undefined;
  monitor?: number | undefined;
  order: string;
  parallelism: number;
};

export const PostgresChangeStatusMetricsConfigEnum = {
  Null: "null",
} as const;
export type PostgresChangeStatusMetricsConfigEnum = ClosedEnum<
  typeof PostgresChangeStatusMetricsConfigEnum
>;

export type PostgresChangeStatusMetricsConfigUnion1 =
  | string
  | number
  | boolean
  | PostgresChangeStatusMetricsConfigEnum;

export type PostgresChangeStatusMetricsConfigUnion2 =
  | string
  | number
  | boolean
  | PostgresChangeStatusMetricsConfigEnum
  | Array<any>
  | { [k: string]: any };

export const PostgresChangeStatusServerStatus = {
  Active: "active",
  Inactive: "inactive",
} as const;
export type PostgresChangeStatusServerStatus = ClosedEnum<
  typeof PostgresChangeStatusServerStatus
>;

export type PostgresChangeStatusServer = {
  appName: string;
  command: string;
  createdAt: string;
  description: string | null;
  enableDockerCleanup: boolean;
  ipAddress: string;
  metricsConfig:
    | string
    | number
    | boolean
    | PostgresChangeStatusMetricsConfigEnum
    | Array<any>
    | { [k: string]: any };
  name: string;
  organizationId: string;
  port: number;
  serverId: string;
  serverStatus: PostgresChangeStatusServerStatus;
  sshKeyId: string | null;
  username: string;
};

export type PostgresChangeStatusUpdateConfigSwarm = {
  delay?: number | undefined;
  failureAction?: string | undefined;
  maxFailureRatio?: number | undefined;
  monitor?: number | undefined;
  order: string;
  parallelism: number;
};

/**
 * Successful response
 */
export type PostgresChangeStatusResponseBody = {
  appName: string;
  applicationStatus: PostgresChangeStatusApplicationStatusResponse;
  backups: Array<PostgresChangeStatusBackup>;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databaseName: string;
  databasePassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environment: PostgresChangeStatusEnvironment;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: PostgresChangeStatusHealthCheckSwarm | null;
  labelsSwarm: { [k: string]: string } | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: PostgresChangeStatusModeSwarm | null;
  mounts: Array<PostgresChangeStatusMount>;
  name: string;
  networkSwarm: Array<PostgresChangeStatusNetworkSwarm> | null;
  placementSwarm: PostgresChangeStatusPlacementSwarm | null;
  postgresId: string;
  replicas: number;
  restartPolicySwarm: PostgresChangeStatusRestartPolicySwarm | null;
  rollbackConfigSwarm: PostgresChangeStatusRollbackConfigSwarm | null;
  server: PostgresChangeStatusServer | null;
  serverId: string | null;
  updateConfigSwarm: PostgresChangeStatusUpdateConfigSwarm | null;
};

export type PostgresChangeStatusResponse =
  | PostgresChangeStatusResponseBody
  | models.ErrorT;

/** @internal */
export const PostgresChangeStatusApplicationStatusRequest$inboundSchema:
  z.ZodNativeEnum<typeof PostgresChangeStatusApplicationStatusRequest> = z
    .nativeEnum(PostgresChangeStatusApplicationStatusRequest);

/** @internal */
export const PostgresChangeStatusApplicationStatusRequest$outboundSchema:
  z.ZodNativeEnum<typeof PostgresChangeStatusApplicationStatusRequest> =
    PostgresChangeStatusApplicationStatusRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusApplicationStatusRequest$ {
  /** @deprecated use `PostgresChangeStatusApplicationStatusRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostgresChangeStatusApplicationStatusRequest$inboundSchema;
  /** @deprecated use `PostgresChangeStatusApplicationStatusRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostgresChangeStatusApplicationStatusRequest$outboundSchema;
}

/** @internal */
export const PostgresChangeStatusRequest$inboundSchema: z.ZodType<
  PostgresChangeStatusRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationStatus: PostgresChangeStatusApplicationStatusRequest$inboundSchema,
  postgresId: z.string(),
});

/** @internal */
export type PostgresChangeStatusRequest$Outbound = {
  applicationStatus: string;
  postgresId: string;
};

/** @internal */
export const PostgresChangeStatusRequest$outboundSchema: z.ZodType<
  PostgresChangeStatusRequest$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusRequest
> = z.object({
  applicationStatus:
    PostgresChangeStatusApplicationStatusRequest$outboundSchema,
  postgresId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusRequest$ {
  /** @deprecated use `PostgresChangeStatusRequest$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusRequest$inboundSchema;
  /** @deprecated use `PostgresChangeStatusRequest$outboundSchema` instead. */
  export const outboundSchema = PostgresChangeStatusRequest$outboundSchema;
  /** @deprecated use `PostgresChangeStatusRequest$Outbound` instead. */
  export type Outbound = PostgresChangeStatusRequest$Outbound;
}

export function postgresChangeStatusRequestToJSON(
  postgresChangeStatusRequest: PostgresChangeStatusRequest,
): string {
  return JSON.stringify(
    PostgresChangeStatusRequest$outboundSchema.parse(
      postgresChangeStatusRequest,
    ),
  );
}

export function postgresChangeStatusRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostgresChangeStatusRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresChangeStatusRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresChangeStatusRequest' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusApplicationStatusResponse$inboundSchema:
  z.ZodNativeEnum<typeof PostgresChangeStatusApplicationStatusResponse> = z
    .nativeEnum(PostgresChangeStatusApplicationStatusResponse);

/** @internal */
export const PostgresChangeStatusApplicationStatusResponse$outboundSchema:
  z.ZodNativeEnum<typeof PostgresChangeStatusApplicationStatusResponse> =
    PostgresChangeStatusApplicationStatusResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusApplicationStatusResponse$ {
  /** @deprecated use `PostgresChangeStatusApplicationStatusResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostgresChangeStatusApplicationStatusResponse$inboundSchema;
  /** @deprecated use `PostgresChangeStatusApplicationStatusResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostgresChangeStatusApplicationStatusResponse$outboundSchema;
}

/** @internal */
export const PostgresChangeStatusBackupType$inboundSchema: z.ZodNativeEnum<
  typeof PostgresChangeStatusBackupType
> = z.nativeEnum(PostgresChangeStatusBackupType);

/** @internal */
export const PostgresChangeStatusBackupType$outboundSchema: z.ZodNativeEnum<
  typeof PostgresChangeStatusBackupType
> = PostgresChangeStatusBackupType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusBackupType$ {
  /** @deprecated use `PostgresChangeStatusBackupType$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusBackupType$inboundSchema;
  /** @deprecated use `PostgresChangeStatusBackupType$outboundSchema` instead. */
  export const outboundSchema = PostgresChangeStatusBackupType$outboundSchema;
}

/** @internal */
export const PostgresChangeStatusDatabaseType$inboundSchema: z.ZodNativeEnum<
  typeof PostgresChangeStatusDatabaseType
> = z.nativeEnum(PostgresChangeStatusDatabaseType);

/** @internal */
export const PostgresChangeStatusDatabaseType$outboundSchema: z.ZodNativeEnum<
  typeof PostgresChangeStatusDatabaseType
> = PostgresChangeStatusDatabaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusDatabaseType$ {
  /** @deprecated use `PostgresChangeStatusDatabaseType$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusDatabaseType$inboundSchema;
  /** @deprecated use `PostgresChangeStatusDatabaseType$outboundSchema` instead. */
  export const outboundSchema = PostgresChangeStatusDatabaseType$outboundSchema;
}

/** @internal */
export const PostgresChangeStatusMetadataEnum$inboundSchema: z.ZodNativeEnum<
  typeof PostgresChangeStatusMetadataEnum
> = z.nativeEnum(PostgresChangeStatusMetadataEnum);

/** @internal */
export const PostgresChangeStatusMetadataEnum$outboundSchema: z.ZodNativeEnum<
  typeof PostgresChangeStatusMetadataEnum
> = PostgresChangeStatusMetadataEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusMetadataEnum$ {
  /** @deprecated use `PostgresChangeStatusMetadataEnum$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusMetadataEnum$inboundSchema;
  /** @deprecated use `PostgresChangeStatusMetadataEnum$outboundSchema` instead. */
  export const outboundSchema = PostgresChangeStatusMetadataEnum$outboundSchema;
}

/** @internal */
export const PostgresChangeStatusMariadb$inboundSchema: z.ZodType<
  PostgresChangeStatusMariadb,
  z.ZodTypeDef,
  unknown
> = z.object({
  databasePassword: z.string(),
  databaseUser: z.string(),
});

/** @internal */
export type PostgresChangeStatusMariadb$Outbound = {
  databasePassword: string;
  databaseUser: string;
};

/** @internal */
export const PostgresChangeStatusMariadb$outboundSchema: z.ZodType<
  PostgresChangeStatusMariadb$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusMariadb
> = z.object({
  databasePassword: z.string(),
  databaseUser: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusMariadb$ {
  /** @deprecated use `PostgresChangeStatusMariadb$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusMariadb$inboundSchema;
  /** @deprecated use `PostgresChangeStatusMariadb$outboundSchema` instead. */
  export const outboundSchema = PostgresChangeStatusMariadb$outboundSchema;
  /** @deprecated use `PostgresChangeStatusMariadb$Outbound` instead. */
  export type Outbound = PostgresChangeStatusMariadb$Outbound;
}

export function postgresChangeStatusMariadbToJSON(
  postgresChangeStatusMariadb: PostgresChangeStatusMariadb,
): string {
  return JSON.stringify(
    PostgresChangeStatusMariadb$outboundSchema.parse(
      postgresChangeStatusMariadb,
    ),
  );
}

export function postgresChangeStatusMariadbFromJSON(
  jsonString: string,
): SafeParseResult<PostgresChangeStatusMariadb, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresChangeStatusMariadb$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresChangeStatusMariadb' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusMongo$inboundSchema: z.ZodType<
  PostgresChangeStatusMongo,
  z.ZodTypeDef,
  unknown
> = z.object({
  databasePassword: z.string(),
  databaseUser: z.string(),
});

/** @internal */
export type PostgresChangeStatusMongo$Outbound = {
  databasePassword: string;
  databaseUser: string;
};

/** @internal */
export const PostgresChangeStatusMongo$outboundSchema: z.ZodType<
  PostgresChangeStatusMongo$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusMongo
> = z.object({
  databasePassword: z.string(),
  databaseUser: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusMongo$ {
  /** @deprecated use `PostgresChangeStatusMongo$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusMongo$inboundSchema;
  /** @deprecated use `PostgresChangeStatusMongo$outboundSchema` instead. */
  export const outboundSchema = PostgresChangeStatusMongo$outboundSchema;
  /** @deprecated use `PostgresChangeStatusMongo$Outbound` instead. */
  export type Outbound = PostgresChangeStatusMongo$Outbound;
}

export function postgresChangeStatusMongoToJSON(
  postgresChangeStatusMongo: PostgresChangeStatusMongo,
): string {
  return JSON.stringify(
    PostgresChangeStatusMongo$outboundSchema.parse(postgresChangeStatusMongo),
  );
}

export function postgresChangeStatusMongoFromJSON(
  jsonString: string,
): SafeParseResult<PostgresChangeStatusMongo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresChangeStatusMongo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresChangeStatusMongo' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusMysql$inboundSchema: z.ZodType<
  PostgresChangeStatusMysql,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseRootPassword: z.string(),
});

/** @internal */
export type PostgresChangeStatusMysql$Outbound = {
  databaseRootPassword: string;
};

/** @internal */
export const PostgresChangeStatusMysql$outboundSchema: z.ZodType<
  PostgresChangeStatusMysql$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusMysql
> = z.object({
  databaseRootPassword: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusMysql$ {
  /** @deprecated use `PostgresChangeStatusMysql$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusMysql$inboundSchema;
  /** @deprecated use `PostgresChangeStatusMysql$outboundSchema` instead. */
  export const outboundSchema = PostgresChangeStatusMysql$outboundSchema;
  /** @deprecated use `PostgresChangeStatusMysql$Outbound` instead. */
  export type Outbound = PostgresChangeStatusMysql$Outbound;
}

export function postgresChangeStatusMysqlToJSON(
  postgresChangeStatusMysql: PostgresChangeStatusMysql,
): string {
  return JSON.stringify(
    PostgresChangeStatusMysql$outboundSchema.parse(postgresChangeStatusMysql),
  );
}

export function postgresChangeStatusMysqlFromJSON(
  jsonString: string,
): SafeParseResult<PostgresChangeStatusMysql, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresChangeStatusMysql$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresChangeStatusMysql' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusPostgres$inboundSchema: z.ZodType<
  PostgresChangeStatusPostgres,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseUser: z.string(),
});

/** @internal */
export type PostgresChangeStatusPostgres$Outbound = {
  databaseUser: string;
};

/** @internal */
export const PostgresChangeStatusPostgres$outboundSchema: z.ZodType<
  PostgresChangeStatusPostgres$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusPostgres
> = z.object({
  databaseUser: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusPostgres$ {
  /** @deprecated use `PostgresChangeStatusPostgres$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusPostgres$inboundSchema;
  /** @deprecated use `PostgresChangeStatusPostgres$outboundSchema` instead. */
  export const outboundSchema = PostgresChangeStatusPostgres$outboundSchema;
  /** @deprecated use `PostgresChangeStatusPostgres$Outbound` instead. */
  export type Outbound = PostgresChangeStatusPostgres$Outbound;
}

export function postgresChangeStatusPostgresToJSON(
  postgresChangeStatusPostgres: PostgresChangeStatusPostgres,
): string {
  return JSON.stringify(
    PostgresChangeStatusPostgres$outboundSchema.parse(
      postgresChangeStatusPostgres,
    ),
  );
}

export function postgresChangeStatusPostgresFromJSON(
  jsonString: string,
): SafeParseResult<PostgresChangeStatusPostgres, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresChangeStatusPostgres$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresChangeStatusPostgres' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusMetadata$inboundSchema: z.ZodType<
  PostgresChangeStatusMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  mariadb: z.lazy(() => PostgresChangeStatusMariadb$inboundSchema).optional(),
  mongo: z.lazy(() => PostgresChangeStatusMongo$inboundSchema).optional(),
  mysql: z.lazy(() => PostgresChangeStatusMysql$inboundSchema).optional(),
  postgres: z.lazy(() => PostgresChangeStatusPostgres$inboundSchema).optional(),
});

/** @internal */
export type PostgresChangeStatusMetadata$Outbound = {
  mariadb?: PostgresChangeStatusMariadb$Outbound | undefined;
  mongo?: PostgresChangeStatusMongo$Outbound | undefined;
  mysql?: PostgresChangeStatusMysql$Outbound | undefined;
  postgres?: PostgresChangeStatusPostgres$Outbound | undefined;
};

/** @internal */
export const PostgresChangeStatusMetadata$outboundSchema: z.ZodType<
  PostgresChangeStatusMetadata$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusMetadata
> = z.object({
  mariadb: z.lazy(() => PostgresChangeStatusMariadb$outboundSchema).optional(),
  mongo: z.lazy(() => PostgresChangeStatusMongo$outboundSchema).optional(),
  mysql: z.lazy(() => PostgresChangeStatusMysql$outboundSchema).optional(),
  postgres: z.lazy(() => PostgresChangeStatusPostgres$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusMetadata$ {
  /** @deprecated use `PostgresChangeStatusMetadata$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusMetadata$inboundSchema;
  /** @deprecated use `PostgresChangeStatusMetadata$outboundSchema` instead. */
  export const outboundSchema = PostgresChangeStatusMetadata$outboundSchema;
  /** @deprecated use `PostgresChangeStatusMetadata$Outbound` instead. */
  export type Outbound = PostgresChangeStatusMetadata$Outbound;
}

export function postgresChangeStatusMetadataToJSON(
  postgresChangeStatusMetadata: PostgresChangeStatusMetadata,
): string {
  return JSON.stringify(
    PostgresChangeStatusMetadata$outboundSchema.parse(
      postgresChangeStatusMetadata,
    ),
  );
}

export function postgresChangeStatusMetadataFromJSON(
  jsonString: string,
): SafeParseResult<PostgresChangeStatusMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresChangeStatusMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresChangeStatusMetadata' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusMetadataUnion$inboundSchema: z.ZodType<
  PostgresChangeStatusMetadataUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PostgresChangeStatusMetadata$inboundSchema),
  PostgresChangeStatusMetadataEnum$inboundSchema,
]);

/** @internal */
export type PostgresChangeStatusMetadataUnion$Outbound =
  | PostgresChangeStatusMetadata$Outbound
  | string;

/** @internal */
export const PostgresChangeStatusMetadataUnion$outboundSchema: z.ZodType<
  PostgresChangeStatusMetadataUnion$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusMetadataUnion
> = z.union([
  z.lazy(() => PostgresChangeStatusMetadata$outboundSchema),
  PostgresChangeStatusMetadataEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusMetadataUnion$ {
  /** @deprecated use `PostgresChangeStatusMetadataUnion$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusMetadataUnion$inboundSchema;
  /** @deprecated use `PostgresChangeStatusMetadataUnion$outboundSchema` instead. */
  export const outboundSchema =
    PostgresChangeStatusMetadataUnion$outboundSchema;
  /** @deprecated use `PostgresChangeStatusMetadataUnion$Outbound` instead. */
  export type Outbound = PostgresChangeStatusMetadataUnion$Outbound;
}

export function postgresChangeStatusMetadataUnionToJSON(
  postgresChangeStatusMetadataUnion: PostgresChangeStatusMetadataUnion,
): string {
  return JSON.stringify(
    PostgresChangeStatusMetadataUnion$outboundSchema.parse(
      postgresChangeStatusMetadataUnion,
    ),
  );
}

export function postgresChangeStatusMetadataUnionFromJSON(
  jsonString: string,
): SafeParseResult<PostgresChangeStatusMetadataUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresChangeStatusMetadataUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresChangeStatusMetadataUnion' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusBackup$inboundSchema: z.ZodType<
  PostgresChangeStatusBackup,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  backupId: z.string(),
  backupType: PostgresChangeStatusBackupType$inboundSchema,
  composeId: z.nullable(z.string()),
  database: z.string(),
  databaseType: PostgresChangeStatusDatabaseType$inboundSchema,
  destinationId: z.string(),
  enabled: z.nullable(z.boolean()),
  keepLatestCount: z.nullable(z.number()),
  mariadbId: z.nullable(z.string()),
  metadata: z.nullable(
    z.union([
      z.lazy(() => PostgresChangeStatusMetadata$inboundSchema),
      PostgresChangeStatusMetadataEnum$inboundSchema,
    ]),
  ).optional(),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  prefix: z.string(),
  schedule: z.string(),
  serviceName: z.nullable(z.string()),
  userId: z.nullable(z.string()),
});

/** @internal */
export type PostgresChangeStatusBackup$Outbound = {
  appName: string;
  backupId: string;
  backupType: string;
  composeId: string | null;
  database: string;
  databaseType: string;
  destinationId: string;
  enabled: boolean | null;
  keepLatestCount: number | null;
  mariadbId: string | null;
  metadata?: PostgresChangeStatusMetadata$Outbound | string | null | undefined;
  mongoId: string | null;
  mysqlId: string | null;
  postgresId: string | null;
  prefix: string;
  schedule: string;
  serviceName: string | null;
  userId: string | null;
};

/** @internal */
export const PostgresChangeStatusBackup$outboundSchema: z.ZodType<
  PostgresChangeStatusBackup$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusBackup
> = z.object({
  appName: z.string(),
  backupId: z.string(),
  backupType: PostgresChangeStatusBackupType$outboundSchema,
  composeId: z.nullable(z.string()),
  database: z.string(),
  databaseType: PostgresChangeStatusDatabaseType$outboundSchema,
  destinationId: z.string(),
  enabled: z.nullable(z.boolean()),
  keepLatestCount: z.nullable(z.number()),
  mariadbId: z.nullable(z.string()),
  metadata: z.nullable(
    z.union([
      z.lazy(() => PostgresChangeStatusMetadata$outboundSchema),
      PostgresChangeStatusMetadataEnum$outboundSchema,
    ]),
  ).optional(),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  prefix: z.string(),
  schedule: z.string(),
  serviceName: z.nullable(z.string()),
  userId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusBackup$ {
  /** @deprecated use `PostgresChangeStatusBackup$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusBackup$inboundSchema;
  /** @deprecated use `PostgresChangeStatusBackup$outboundSchema` instead. */
  export const outboundSchema = PostgresChangeStatusBackup$outboundSchema;
  /** @deprecated use `PostgresChangeStatusBackup$Outbound` instead. */
  export type Outbound = PostgresChangeStatusBackup$Outbound;
}

export function postgresChangeStatusBackupToJSON(
  postgresChangeStatusBackup: PostgresChangeStatusBackup,
): string {
  return JSON.stringify(
    PostgresChangeStatusBackup$outboundSchema.parse(postgresChangeStatusBackup),
  );
}

export function postgresChangeStatusBackupFromJSON(
  jsonString: string,
): SafeParseResult<PostgresChangeStatusBackup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresChangeStatusBackup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresChangeStatusBackup' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusProject$inboundSchema: z.ZodType<
  PostgresChangeStatusProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/** @internal */
export type PostgresChangeStatusProject$Outbound = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

/** @internal */
export const PostgresChangeStatusProject$outboundSchema: z.ZodType<
  PostgresChangeStatusProject$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusProject
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusProject$ {
  /** @deprecated use `PostgresChangeStatusProject$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusProject$inboundSchema;
  /** @deprecated use `PostgresChangeStatusProject$outboundSchema` instead. */
  export const outboundSchema = PostgresChangeStatusProject$outboundSchema;
  /** @deprecated use `PostgresChangeStatusProject$Outbound` instead. */
  export type Outbound = PostgresChangeStatusProject$Outbound;
}

export function postgresChangeStatusProjectToJSON(
  postgresChangeStatusProject: PostgresChangeStatusProject,
): string {
  return JSON.stringify(
    PostgresChangeStatusProject$outboundSchema.parse(
      postgresChangeStatusProject,
    ),
  );
}

export function postgresChangeStatusProjectFromJSON(
  jsonString: string,
): SafeParseResult<PostgresChangeStatusProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresChangeStatusProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresChangeStatusProject' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusEnvironment$inboundSchema: z.ZodType<
  PostgresChangeStatusEnvironment,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  name: z.string(),
  project: z.lazy(() => PostgresChangeStatusProject$inboundSchema),
  projectId: z.string(),
});

/** @internal */
export type PostgresChangeStatusEnvironment$Outbound = {
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  name: string;
  project: PostgresChangeStatusProject$Outbound;
  projectId: string;
};

/** @internal */
export const PostgresChangeStatusEnvironment$outboundSchema: z.ZodType<
  PostgresChangeStatusEnvironment$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusEnvironment
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  name: z.string(),
  project: z.lazy(() => PostgresChangeStatusProject$outboundSchema),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusEnvironment$ {
  /** @deprecated use `PostgresChangeStatusEnvironment$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusEnvironment$inboundSchema;
  /** @deprecated use `PostgresChangeStatusEnvironment$outboundSchema` instead. */
  export const outboundSchema = PostgresChangeStatusEnvironment$outboundSchema;
  /** @deprecated use `PostgresChangeStatusEnvironment$Outbound` instead. */
  export type Outbound = PostgresChangeStatusEnvironment$Outbound;
}

export function postgresChangeStatusEnvironmentToJSON(
  postgresChangeStatusEnvironment: PostgresChangeStatusEnvironment,
): string {
  return JSON.stringify(
    PostgresChangeStatusEnvironment$outboundSchema.parse(
      postgresChangeStatusEnvironment,
    ),
  );
}

export function postgresChangeStatusEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<PostgresChangeStatusEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresChangeStatusEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresChangeStatusEnvironment' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusHealthCheckSwarm$inboundSchema: z.ZodType<
  PostgresChangeStatusHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Interval: z.number().optional(),
  Retries: z.number().optional(),
  StartPeriod: z.number().optional(),
  Test: z.array(z.string()).optional(),
  Timeout: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Interval": "interval",
    "Retries": "retries",
    "StartPeriod": "startPeriod",
    "Test": "test",
    "Timeout": "timeout",
  });
});

/** @internal */
export type PostgresChangeStatusHealthCheckSwarm$Outbound = {
  Interval?: number | undefined;
  Retries?: number | undefined;
  StartPeriod?: number | undefined;
  Test?: Array<string> | undefined;
  Timeout?: number | undefined;
};

/** @internal */
export const PostgresChangeStatusHealthCheckSwarm$outboundSchema: z.ZodType<
  PostgresChangeStatusHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusHealthCheckSwarm
> = z.object({
  interval: z.number().optional(),
  retries: z.number().optional(),
  startPeriod: z.number().optional(),
  test: z.array(z.string()).optional(),
  timeout: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    interval: "Interval",
    retries: "Retries",
    startPeriod: "StartPeriod",
    test: "Test",
    timeout: "Timeout",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusHealthCheckSwarm$ {
  /** @deprecated use `PostgresChangeStatusHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema =
    PostgresChangeStatusHealthCheckSwarm$inboundSchema;
  /** @deprecated use `PostgresChangeStatusHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema =
    PostgresChangeStatusHealthCheckSwarm$outboundSchema;
  /** @deprecated use `PostgresChangeStatusHealthCheckSwarm$Outbound` instead. */
  export type Outbound = PostgresChangeStatusHealthCheckSwarm$Outbound;
}

export function postgresChangeStatusHealthCheckSwarmToJSON(
  postgresChangeStatusHealthCheckSwarm: PostgresChangeStatusHealthCheckSwarm,
): string {
  return JSON.stringify(
    PostgresChangeStatusHealthCheckSwarm$outboundSchema.parse(
      postgresChangeStatusHealthCheckSwarm,
    ),
  );
}

export function postgresChangeStatusHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresChangeStatusHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostgresChangeStatusHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresChangeStatusHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusGlobal$inboundSchema: z.ZodType<
  PostgresChangeStatusGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostgresChangeStatusGlobal$Outbound = {};

/** @internal */
export const PostgresChangeStatusGlobal$outboundSchema: z.ZodType<
  PostgresChangeStatusGlobal$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusGlobal$ {
  /** @deprecated use `PostgresChangeStatusGlobal$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusGlobal$inboundSchema;
  /** @deprecated use `PostgresChangeStatusGlobal$outboundSchema` instead. */
  export const outboundSchema = PostgresChangeStatusGlobal$outboundSchema;
  /** @deprecated use `PostgresChangeStatusGlobal$Outbound` instead. */
  export type Outbound = PostgresChangeStatusGlobal$Outbound;
}

export function postgresChangeStatusGlobalToJSON(
  postgresChangeStatusGlobal: PostgresChangeStatusGlobal,
): string {
  return JSON.stringify(
    PostgresChangeStatusGlobal$outboundSchema.parse(postgresChangeStatusGlobal),
  );
}

export function postgresChangeStatusGlobalFromJSON(
  jsonString: string,
): SafeParseResult<PostgresChangeStatusGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresChangeStatusGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresChangeStatusGlobal' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusGlobalJob$inboundSchema: z.ZodType<
  PostgresChangeStatusGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostgresChangeStatusGlobalJob$Outbound = {};

/** @internal */
export const PostgresChangeStatusGlobalJob$outboundSchema: z.ZodType<
  PostgresChangeStatusGlobalJob$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusGlobalJob$ {
  /** @deprecated use `PostgresChangeStatusGlobalJob$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusGlobalJob$inboundSchema;
  /** @deprecated use `PostgresChangeStatusGlobalJob$outboundSchema` instead. */
  export const outboundSchema = PostgresChangeStatusGlobalJob$outboundSchema;
  /** @deprecated use `PostgresChangeStatusGlobalJob$Outbound` instead. */
  export type Outbound = PostgresChangeStatusGlobalJob$Outbound;
}

export function postgresChangeStatusGlobalJobToJSON(
  postgresChangeStatusGlobalJob: PostgresChangeStatusGlobalJob,
): string {
  return JSON.stringify(
    PostgresChangeStatusGlobalJob$outboundSchema.parse(
      postgresChangeStatusGlobalJob,
    ),
  );
}

export function postgresChangeStatusGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<PostgresChangeStatusGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresChangeStatusGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresChangeStatusGlobalJob' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusReplicated$inboundSchema: z.ZodType<
  PostgresChangeStatusReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type PostgresChangeStatusReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const PostgresChangeStatusReplicated$outboundSchema: z.ZodType<
  PostgresChangeStatusReplicated$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusReplicated$ {
  /** @deprecated use `PostgresChangeStatusReplicated$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusReplicated$inboundSchema;
  /** @deprecated use `PostgresChangeStatusReplicated$outboundSchema` instead. */
  export const outboundSchema = PostgresChangeStatusReplicated$outboundSchema;
  /** @deprecated use `PostgresChangeStatusReplicated$Outbound` instead. */
  export type Outbound = PostgresChangeStatusReplicated$Outbound;
}

export function postgresChangeStatusReplicatedToJSON(
  postgresChangeStatusReplicated: PostgresChangeStatusReplicated,
): string {
  return JSON.stringify(
    PostgresChangeStatusReplicated$outboundSchema.parse(
      postgresChangeStatusReplicated,
    ),
  );
}

export function postgresChangeStatusReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<PostgresChangeStatusReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresChangeStatusReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresChangeStatusReplicated' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusReplicatedJob$inboundSchema: z.ZodType<
  PostgresChangeStatusReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type PostgresChangeStatusReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const PostgresChangeStatusReplicatedJob$outboundSchema: z.ZodType<
  PostgresChangeStatusReplicatedJob$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusReplicatedJob$ {
  /** @deprecated use `PostgresChangeStatusReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusReplicatedJob$inboundSchema;
  /** @deprecated use `PostgresChangeStatusReplicatedJob$outboundSchema` instead. */
  export const outboundSchema =
    PostgresChangeStatusReplicatedJob$outboundSchema;
  /** @deprecated use `PostgresChangeStatusReplicatedJob$Outbound` instead. */
  export type Outbound = PostgresChangeStatusReplicatedJob$Outbound;
}

export function postgresChangeStatusReplicatedJobToJSON(
  postgresChangeStatusReplicatedJob: PostgresChangeStatusReplicatedJob,
): string {
  return JSON.stringify(
    PostgresChangeStatusReplicatedJob$outboundSchema.parse(
      postgresChangeStatusReplicatedJob,
    ),
  );
}

export function postgresChangeStatusReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<PostgresChangeStatusReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresChangeStatusReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresChangeStatusReplicatedJob' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusModeSwarm$inboundSchema: z.ZodType<
  PostgresChangeStatusModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Global: z.lazy(() => PostgresChangeStatusGlobal$inboundSchema).optional(),
  GlobalJob: z.lazy(() => PostgresChangeStatusGlobalJob$inboundSchema)
    .optional(),
  Replicated: z.lazy(() => PostgresChangeStatusReplicated$inboundSchema)
    .optional(),
  ReplicatedJob: z.lazy(() => PostgresChangeStatusReplicatedJob$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Global": "global",
    "GlobalJob": "globalJob",
    "Replicated": "replicated",
    "ReplicatedJob": "replicatedJob",
  });
});

/** @internal */
export type PostgresChangeStatusModeSwarm$Outbound = {
  Global?: PostgresChangeStatusGlobal$Outbound | undefined;
  GlobalJob?: PostgresChangeStatusGlobalJob$Outbound | undefined;
  Replicated?: PostgresChangeStatusReplicated$Outbound | undefined;
  ReplicatedJob?: PostgresChangeStatusReplicatedJob$Outbound | undefined;
};

/** @internal */
export const PostgresChangeStatusModeSwarm$outboundSchema: z.ZodType<
  PostgresChangeStatusModeSwarm$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusModeSwarm
> = z.object({
  global: z.lazy(() => PostgresChangeStatusGlobal$outboundSchema).optional(),
  globalJob: z.lazy(() => PostgresChangeStatusGlobalJob$outboundSchema)
    .optional(),
  replicated: z.lazy(() => PostgresChangeStatusReplicated$outboundSchema)
    .optional(),
  replicatedJob: z.lazy(() => PostgresChangeStatusReplicatedJob$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    global: "Global",
    globalJob: "GlobalJob",
    replicated: "Replicated",
    replicatedJob: "ReplicatedJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusModeSwarm$ {
  /** @deprecated use `PostgresChangeStatusModeSwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusModeSwarm$inboundSchema;
  /** @deprecated use `PostgresChangeStatusModeSwarm$outboundSchema` instead. */
  export const outboundSchema = PostgresChangeStatusModeSwarm$outboundSchema;
  /** @deprecated use `PostgresChangeStatusModeSwarm$Outbound` instead. */
  export type Outbound = PostgresChangeStatusModeSwarm$Outbound;
}

export function postgresChangeStatusModeSwarmToJSON(
  postgresChangeStatusModeSwarm: PostgresChangeStatusModeSwarm,
): string {
  return JSON.stringify(
    PostgresChangeStatusModeSwarm$outboundSchema.parse(
      postgresChangeStatusModeSwarm,
    ),
  );
}

export function postgresChangeStatusModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresChangeStatusModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresChangeStatusModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresChangeStatusModeSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusServiceType$inboundSchema: z.ZodNativeEnum<
  typeof PostgresChangeStatusServiceType
> = z.nativeEnum(PostgresChangeStatusServiceType);

/** @internal */
export const PostgresChangeStatusServiceType$outboundSchema: z.ZodNativeEnum<
  typeof PostgresChangeStatusServiceType
> = PostgresChangeStatusServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusServiceType$ {
  /** @deprecated use `PostgresChangeStatusServiceType$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusServiceType$inboundSchema;
  /** @deprecated use `PostgresChangeStatusServiceType$outboundSchema` instead. */
  export const outboundSchema = PostgresChangeStatusServiceType$outboundSchema;
}

/** @internal */
export const PostgresChangeStatusType$inboundSchema: z.ZodNativeEnum<
  typeof PostgresChangeStatusType
> = z.nativeEnum(PostgresChangeStatusType);

/** @internal */
export const PostgresChangeStatusType$outboundSchema: z.ZodNativeEnum<
  typeof PostgresChangeStatusType
> = PostgresChangeStatusType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusType$ {
  /** @deprecated use `PostgresChangeStatusType$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusType$inboundSchema;
  /** @deprecated use `PostgresChangeStatusType$outboundSchema` instead. */
  export const outboundSchema = PostgresChangeStatusType$outboundSchema;
}

/** @internal */
export const PostgresChangeStatusMount$inboundSchema: z.ZodType<
  PostgresChangeStatusMount,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  content: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  hostPath: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mountId: z.string(),
  mountPath: z.string(),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  serviceType: PostgresChangeStatusServiceType$inboundSchema,
  type: PostgresChangeStatusType$inboundSchema,
  volumeName: z.nullable(z.string()),
});

/** @internal */
export type PostgresChangeStatusMount$Outbound = {
  applicationId: string | null;
  composeId: string | null;
  content: string | null;
  filePath: string | null;
  hostPath: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mountId: string;
  mountPath: string;
  mysqlId: string | null;
  postgresId: string | null;
  redisId: string | null;
  serviceType: string;
  type: string;
  volumeName: string | null;
};

/** @internal */
export const PostgresChangeStatusMount$outboundSchema: z.ZodType<
  PostgresChangeStatusMount$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusMount
> = z.object({
  applicationId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  content: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  hostPath: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mountId: z.string(),
  mountPath: z.string(),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  serviceType: PostgresChangeStatusServiceType$outboundSchema,
  type: PostgresChangeStatusType$outboundSchema,
  volumeName: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusMount$ {
  /** @deprecated use `PostgresChangeStatusMount$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusMount$inboundSchema;
  /** @deprecated use `PostgresChangeStatusMount$outboundSchema` instead. */
  export const outboundSchema = PostgresChangeStatusMount$outboundSchema;
  /** @deprecated use `PostgresChangeStatusMount$Outbound` instead. */
  export type Outbound = PostgresChangeStatusMount$Outbound;
}

export function postgresChangeStatusMountToJSON(
  postgresChangeStatusMount: PostgresChangeStatusMount,
): string {
  return JSON.stringify(
    PostgresChangeStatusMount$outboundSchema.parse(postgresChangeStatusMount),
  );
}

export function postgresChangeStatusMountFromJSON(
  jsonString: string,
): SafeParseResult<PostgresChangeStatusMount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresChangeStatusMount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresChangeStatusMount' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusDriverOpts$inboundSchema: z.ZodType<
  PostgresChangeStatusDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostgresChangeStatusDriverOpts$Outbound = {};

/** @internal */
export const PostgresChangeStatusDriverOpts$outboundSchema: z.ZodType<
  PostgresChangeStatusDriverOpts$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusDriverOpts$ {
  /** @deprecated use `PostgresChangeStatusDriverOpts$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusDriverOpts$inboundSchema;
  /** @deprecated use `PostgresChangeStatusDriverOpts$outboundSchema` instead. */
  export const outboundSchema = PostgresChangeStatusDriverOpts$outboundSchema;
  /** @deprecated use `PostgresChangeStatusDriverOpts$Outbound` instead. */
  export type Outbound = PostgresChangeStatusDriverOpts$Outbound;
}

export function postgresChangeStatusDriverOptsToJSON(
  postgresChangeStatusDriverOpts: PostgresChangeStatusDriverOpts,
): string {
  return JSON.stringify(
    PostgresChangeStatusDriverOpts$outboundSchema.parse(
      postgresChangeStatusDriverOpts,
    ),
  );
}

export function postgresChangeStatusDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<PostgresChangeStatusDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresChangeStatusDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresChangeStatusDriverOpts' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusNetworkSwarm$inboundSchema: z.ZodType<
  PostgresChangeStatusNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => PostgresChangeStatusDriverOpts$inboundSchema)
    .optional(),
  Target: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
    "Target": "target",
  });
});

/** @internal */
export type PostgresChangeStatusNetworkSwarm$Outbound = {
  Aliases?: Array<string> | undefined;
  DriverOpts?: PostgresChangeStatusDriverOpts$Outbound | undefined;
  Target?: string | undefined;
};

/** @internal */
export const PostgresChangeStatusNetworkSwarm$outboundSchema: z.ZodType<
  PostgresChangeStatusNetworkSwarm$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusNetworkSwarm
> = z.object({
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => PostgresChangeStatusDriverOpts$outboundSchema)
    .optional(),
  target: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    aliases: "Aliases",
    driverOpts: "DriverOpts",
    target: "Target",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusNetworkSwarm$ {
  /** @deprecated use `PostgresChangeStatusNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusNetworkSwarm$inboundSchema;
  /** @deprecated use `PostgresChangeStatusNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = PostgresChangeStatusNetworkSwarm$outboundSchema;
  /** @deprecated use `PostgresChangeStatusNetworkSwarm$Outbound` instead. */
  export type Outbound = PostgresChangeStatusNetworkSwarm$Outbound;
}

export function postgresChangeStatusNetworkSwarmToJSON(
  postgresChangeStatusNetworkSwarm: PostgresChangeStatusNetworkSwarm,
): string {
  return JSON.stringify(
    PostgresChangeStatusNetworkSwarm$outboundSchema.parse(
      postgresChangeStatusNetworkSwarm,
    ),
  );
}

export function postgresChangeStatusNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresChangeStatusNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresChangeStatusNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresChangeStatusNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusPlatform$inboundSchema: z.ZodType<
  PostgresChangeStatusPlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type PostgresChangeStatusPlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const PostgresChangeStatusPlatform$outboundSchema: z.ZodType<
  PostgresChangeStatusPlatform$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusPlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusPlatform$ {
  /** @deprecated use `PostgresChangeStatusPlatform$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusPlatform$inboundSchema;
  /** @deprecated use `PostgresChangeStatusPlatform$outboundSchema` instead. */
  export const outboundSchema = PostgresChangeStatusPlatform$outboundSchema;
  /** @deprecated use `PostgresChangeStatusPlatform$Outbound` instead. */
  export type Outbound = PostgresChangeStatusPlatform$Outbound;
}

export function postgresChangeStatusPlatformToJSON(
  postgresChangeStatusPlatform: PostgresChangeStatusPlatform,
): string {
  return JSON.stringify(
    PostgresChangeStatusPlatform$outboundSchema.parse(
      postgresChangeStatusPlatform,
    ),
  );
}

export function postgresChangeStatusPlatformFromJSON(
  jsonString: string,
): SafeParseResult<PostgresChangeStatusPlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresChangeStatusPlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresChangeStatusPlatform' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusSpread$inboundSchema: z.ZodType<
  PostgresChangeStatusSpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type PostgresChangeStatusSpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const PostgresChangeStatusSpread$outboundSchema: z.ZodType<
  PostgresChangeStatusSpread$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusSpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusSpread$ {
  /** @deprecated use `PostgresChangeStatusSpread$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusSpread$inboundSchema;
  /** @deprecated use `PostgresChangeStatusSpread$outboundSchema` instead. */
  export const outboundSchema = PostgresChangeStatusSpread$outboundSchema;
  /** @deprecated use `PostgresChangeStatusSpread$Outbound` instead. */
  export type Outbound = PostgresChangeStatusSpread$Outbound;
}

export function postgresChangeStatusSpreadToJSON(
  postgresChangeStatusSpread: PostgresChangeStatusSpread,
): string {
  return JSON.stringify(
    PostgresChangeStatusSpread$outboundSchema.parse(postgresChangeStatusSpread),
  );
}

export function postgresChangeStatusSpreadFromJSON(
  jsonString: string,
): SafeParseResult<PostgresChangeStatusSpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresChangeStatusSpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresChangeStatusSpread' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusPreference$inboundSchema: z.ZodType<
  PostgresChangeStatusPreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => PostgresChangeStatusSpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type PostgresChangeStatusPreference$Outbound = {
  Spread: PostgresChangeStatusSpread$Outbound;
};

/** @internal */
export const PostgresChangeStatusPreference$outboundSchema: z.ZodType<
  PostgresChangeStatusPreference$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusPreference
> = z.object({
  spread: z.lazy(() => PostgresChangeStatusSpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusPreference$ {
  /** @deprecated use `PostgresChangeStatusPreference$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusPreference$inboundSchema;
  /** @deprecated use `PostgresChangeStatusPreference$outboundSchema` instead. */
  export const outboundSchema = PostgresChangeStatusPreference$outboundSchema;
  /** @deprecated use `PostgresChangeStatusPreference$Outbound` instead. */
  export type Outbound = PostgresChangeStatusPreference$Outbound;
}

export function postgresChangeStatusPreferenceToJSON(
  postgresChangeStatusPreference: PostgresChangeStatusPreference,
): string {
  return JSON.stringify(
    PostgresChangeStatusPreference$outboundSchema.parse(
      postgresChangeStatusPreference,
    ),
  );
}

export function postgresChangeStatusPreferenceFromJSON(
  jsonString: string,
): SafeParseResult<PostgresChangeStatusPreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresChangeStatusPreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresChangeStatusPreference' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusPlacementSwarm$inboundSchema: z.ZodType<
  PostgresChangeStatusPlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => PostgresChangeStatusPlatform$inboundSchema))
    .optional(),
  Preferences: z.array(
    z.lazy(() => PostgresChangeStatusPreference$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
    "Preferences": "preferences",
  });
});

/** @internal */
export type PostgresChangeStatusPlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<PostgresChangeStatusPlatform$Outbound> | undefined;
  Preferences?: Array<PostgresChangeStatusPreference$Outbound> | undefined;
};

/** @internal */
export const PostgresChangeStatusPlacementSwarm$outboundSchema: z.ZodType<
  PostgresChangeStatusPlacementSwarm$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusPlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => PostgresChangeStatusPlatform$outboundSchema))
    .optional(),
  preferences: z.array(
    z.lazy(() => PostgresChangeStatusPreference$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
    preferences: "Preferences",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusPlacementSwarm$ {
  /** @deprecated use `PostgresChangeStatusPlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusPlacementSwarm$inboundSchema;
  /** @deprecated use `PostgresChangeStatusPlacementSwarm$outboundSchema` instead. */
  export const outboundSchema =
    PostgresChangeStatusPlacementSwarm$outboundSchema;
  /** @deprecated use `PostgresChangeStatusPlacementSwarm$Outbound` instead. */
  export type Outbound = PostgresChangeStatusPlacementSwarm$Outbound;
}

export function postgresChangeStatusPlacementSwarmToJSON(
  postgresChangeStatusPlacementSwarm: PostgresChangeStatusPlacementSwarm,
): string {
  return JSON.stringify(
    PostgresChangeStatusPlacementSwarm$outboundSchema.parse(
      postgresChangeStatusPlacementSwarm,
    ),
  );
}

export function postgresChangeStatusPlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresChangeStatusPlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostgresChangeStatusPlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresChangeStatusPlacementSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusRestartPolicySwarm$inboundSchema: z.ZodType<
  PostgresChangeStatusRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type PostgresChangeStatusRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const PostgresChangeStatusRestartPolicySwarm$outboundSchema: z.ZodType<
  PostgresChangeStatusRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusRestartPolicySwarm$ {
  /** @deprecated use `PostgresChangeStatusRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema =
    PostgresChangeStatusRestartPolicySwarm$inboundSchema;
  /** @deprecated use `PostgresChangeStatusRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema =
    PostgresChangeStatusRestartPolicySwarm$outboundSchema;
  /** @deprecated use `PostgresChangeStatusRestartPolicySwarm$Outbound` instead. */
  export type Outbound = PostgresChangeStatusRestartPolicySwarm$Outbound;
}

export function postgresChangeStatusRestartPolicySwarmToJSON(
  postgresChangeStatusRestartPolicySwarm:
    PostgresChangeStatusRestartPolicySwarm,
): string {
  return JSON.stringify(
    PostgresChangeStatusRestartPolicySwarm$outboundSchema.parse(
      postgresChangeStatusRestartPolicySwarm,
    ),
  );
}

export function postgresChangeStatusRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresChangeStatusRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostgresChangeStatusRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresChangeStatusRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusRollbackConfigSwarm$inboundSchema: z.ZodType<
  PostgresChangeStatusRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  MaxFailureRatio: z.number().optional(),
  Monitor: z.number().optional(),
  Order: z.string(),
  Parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    "Delay": "delay",
    "FailureAction": "failureAction",
    "MaxFailureRatio": "maxFailureRatio",
    "Monitor": "monitor",
    "Order": "order",
    "Parallelism": "parallelism",
  });
});

/** @internal */
export type PostgresChangeStatusRollbackConfigSwarm$Outbound = {
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  MaxFailureRatio?: number | undefined;
  Monitor?: number | undefined;
  Order: string;
  Parallelism: number;
};

/** @internal */
export const PostgresChangeStatusRollbackConfigSwarm$outboundSchema: z.ZodType<
  PostgresChangeStatusRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusRollbackConfigSwarm
> = z.object({
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  maxFailureRatio: z.number().optional(),
  monitor: z.number().optional(),
  order: z.string(),
  parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    delay: "Delay",
    failureAction: "FailureAction",
    maxFailureRatio: "MaxFailureRatio",
    monitor: "Monitor",
    order: "Order",
    parallelism: "Parallelism",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusRollbackConfigSwarm$ {
  /** @deprecated use `PostgresChangeStatusRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema =
    PostgresChangeStatusRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `PostgresChangeStatusRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema =
    PostgresChangeStatusRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `PostgresChangeStatusRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = PostgresChangeStatusRollbackConfigSwarm$Outbound;
}

export function postgresChangeStatusRollbackConfigSwarmToJSON(
  postgresChangeStatusRollbackConfigSwarm:
    PostgresChangeStatusRollbackConfigSwarm,
): string {
  return JSON.stringify(
    PostgresChangeStatusRollbackConfigSwarm$outboundSchema.parse(
      postgresChangeStatusRollbackConfigSwarm,
    ),
  );
}

export function postgresChangeStatusRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<
  PostgresChangeStatusRollbackConfigSwarm,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostgresChangeStatusRollbackConfigSwarm$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostgresChangeStatusRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusMetricsConfigEnum$inboundSchema:
  z.ZodNativeEnum<typeof PostgresChangeStatusMetricsConfigEnum> = z.nativeEnum(
    PostgresChangeStatusMetricsConfigEnum,
  );

/** @internal */
export const PostgresChangeStatusMetricsConfigEnum$outboundSchema:
  z.ZodNativeEnum<typeof PostgresChangeStatusMetricsConfigEnum> =
    PostgresChangeStatusMetricsConfigEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusMetricsConfigEnum$ {
  /** @deprecated use `PostgresChangeStatusMetricsConfigEnum$inboundSchema` instead. */
  export const inboundSchema =
    PostgresChangeStatusMetricsConfigEnum$inboundSchema;
  /** @deprecated use `PostgresChangeStatusMetricsConfigEnum$outboundSchema` instead. */
  export const outboundSchema =
    PostgresChangeStatusMetricsConfigEnum$outboundSchema;
}

/** @internal */
export const PostgresChangeStatusMetricsConfigUnion1$inboundSchema: z.ZodType<
  PostgresChangeStatusMetricsConfigUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  PostgresChangeStatusMetricsConfigEnum$inboundSchema,
]);

/** @internal */
export type PostgresChangeStatusMetricsConfigUnion1$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const PostgresChangeStatusMetricsConfigUnion1$outboundSchema: z.ZodType<
  PostgresChangeStatusMetricsConfigUnion1$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusMetricsConfigUnion1
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  PostgresChangeStatusMetricsConfigEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusMetricsConfigUnion1$ {
  /** @deprecated use `PostgresChangeStatusMetricsConfigUnion1$inboundSchema` instead. */
  export const inboundSchema =
    PostgresChangeStatusMetricsConfigUnion1$inboundSchema;
  /** @deprecated use `PostgresChangeStatusMetricsConfigUnion1$outboundSchema` instead. */
  export const outboundSchema =
    PostgresChangeStatusMetricsConfigUnion1$outboundSchema;
  /** @deprecated use `PostgresChangeStatusMetricsConfigUnion1$Outbound` instead. */
  export type Outbound = PostgresChangeStatusMetricsConfigUnion1$Outbound;
}

export function postgresChangeStatusMetricsConfigUnion1ToJSON(
  postgresChangeStatusMetricsConfigUnion1:
    PostgresChangeStatusMetricsConfigUnion1,
): string {
  return JSON.stringify(
    PostgresChangeStatusMetricsConfigUnion1$outboundSchema.parse(
      postgresChangeStatusMetricsConfigUnion1,
    ),
  );
}

export function postgresChangeStatusMetricsConfigUnion1FromJSON(
  jsonString: string,
): SafeParseResult<
  PostgresChangeStatusMetricsConfigUnion1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostgresChangeStatusMetricsConfigUnion1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostgresChangeStatusMetricsConfigUnion1' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusMetricsConfigUnion2$inboundSchema: z.ZodType<
  PostgresChangeStatusMetricsConfigUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    PostgresChangeStatusMetricsConfigEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type PostgresChangeStatusMetricsConfigUnion2$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const PostgresChangeStatusMetricsConfigUnion2$outboundSchema: z.ZodType<
  PostgresChangeStatusMetricsConfigUnion2$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusMetricsConfigUnion2
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    PostgresChangeStatusMetricsConfigEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusMetricsConfigUnion2$ {
  /** @deprecated use `PostgresChangeStatusMetricsConfigUnion2$inboundSchema` instead. */
  export const inboundSchema =
    PostgresChangeStatusMetricsConfigUnion2$inboundSchema;
  /** @deprecated use `PostgresChangeStatusMetricsConfigUnion2$outboundSchema` instead. */
  export const outboundSchema =
    PostgresChangeStatusMetricsConfigUnion2$outboundSchema;
  /** @deprecated use `PostgresChangeStatusMetricsConfigUnion2$Outbound` instead. */
  export type Outbound = PostgresChangeStatusMetricsConfigUnion2$Outbound;
}

export function postgresChangeStatusMetricsConfigUnion2ToJSON(
  postgresChangeStatusMetricsConfigUnion2:
    PostgresChangeStatusMetricsConfigUnion2,
): string {
  return JSON.stringify(
    PostgresChangeStatusMetricsConfigUnion2$outboundSchema.parse(
      postgresChangeStatusMetricsConfigUnion2,
    ),
  );
}

export function postgresChangeStatusMetricsConfigUnion2FromJSON(
  jsonString: string,
): SafeParseResult<
  PostgresChangeStatusMetricsConfigUnion2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostgresChangeStatusMetricsConfigUnion2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostgresChangeStatusMetricsConfigUnion2' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusServerStatus$inboundSchema: z.ZodNativeEnum<
  typeof PostgresChangeStatusServerStatus
> = z.nativeEnum(PostgresChangeStatusServerStatus);

/** @internal */
export const PostgresChangeStatusServerStatus$outboundSchema: z.ZodNativeEnum<
  typeof PostgresChangeStatusServerStatus
> = PostgresChangeStatusServerStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusServerStatus$ {
  /** @deprecated use `PostgresChangeStatusServerStatus$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusServerStatus$inboundSchema;
  /** @deprecated use `PostgresChangeStatusServerStatus$outboundSchema` instead. */
  export const outboundSchema = PostgresChangeStatusServerStatus$outboundSchema;
}

/** @internal */
export const PostgresChangeStatusServer$inboundSchema: z.ZodType<
  PostgresChangeStatusServer,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  command: z.string(),
  createdAt: z.string(),
  description: z.nullable(z.string()),
  enableDockerCleanup: z.boolean(),
  ipAddress: z.string(),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      PostgresChangeStatusMetricsConfigEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
  name: z.string(),
  organizationId: z.string(),
  port: z.number(),
  serverId: z.string(),
  serverStatus: PostgresChangeStatusServerStatus$inboundSchema,
  sshKeyId: z.nullable(z.string()),
  username: z.string(),
});

/** @internal */
export type PostgresChangeStatusServer$Outbound = {
  appName: string;
  command: string;
  createdAt: string;
  description: string | null;
  enableDockerCleanup: boolean;
  ipAddress: string;
  metricsConfig: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  };
  name: string;
  organizationId: string;
  port: number;
  serverId: string;
  serverStatus: string;
  sshKeyId: string | null;
  username: string;
};

/** @internal */
export const PostgresChangeStatusServer$outboundSchema: z.ZodType<
  PostgresChangeStatusServer$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusServer
> = z.object({
  appName: z.string(),
  command: z.string(),
  createdAt: z.string(),
  description: z.nullable(z.string()),
  enableDockerCleanup: z.boolean(),
  ipAddress: z.string(),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      PostgresChangeStatusMetricsConfigEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
  name: z.string(),
  organizationId: z.string(),
  port: z.number(),
  serverId: z.string(),
  serverStatus: PostgresChangeStatusServerStatus$outboundSchema,
  sshKeyId: z.nullable(z.string()),
  username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusServer$ {
  /** @deprecated use `PostgresChangeStatusServer$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusServer$inboundSchema;
  /** @deprecated use `PostgresChangeStatusServer$outboundSchema` instead. */
  export const outboundSchema = PostgresChangeStatusServer$outboundSchema;
  /** @deprecated use `PostgresChangeStatusServer$Outbound` instead. */
  export type Outbound = PostgresChangeStatusServer$Outbound;
}

export function postgresChangeStatusServerToJSON(
  postgresChangeStatusServer: PostgresChangeStatusServer,
): string {
  return JSON.stringify(
    PostgresChangeStatusServer$outboundSchema.parse(postgresChangeStatusServer),
  );
}

export function postgresChangeStatusServerFromJSON(
  jsonString: string,
): SafeParseResult<PostgresChangeStatusServer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresChangeStatusServer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresChangeStatusServer' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusUpdateConfigSwarm$inboundSchema: z.ZodType<
  PostgresChangeStatusUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  MaxFailureRatio: z.number().optional(),
  Monitor: z.number().optional(),
  Order: z.string(),
  Parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    "Delay": "delay",
    "FailureAction": "failureAction",
    "MaxFailureRatio": "maxFailureRatio",
    "Monitor": "monitor",
    "Order": "order",
    "Parallelism": "parallelism",
  });
});

/** @internal */
export type PostgresChangeStatusUpdateConfigSwarm$Outbound = {
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  MaxFailureRatio?: number | undefined;
  Monitor?: number | undefined;
  Order: string;
  Parallelism: number;
};

/** @internal */
export const PostgresChangeStatusUpdateConfigSwarm$outboundSchema: z.ZodType<
  PostgresChangeStatusUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusUpdateConfigSwarm
> = z.object({
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  maxFailureRatio: z.number().optional(),
  monitor: z.number().optional(),
  order: z.string(),
  parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    delay: "Delay",
    failureAction: "FailureAction",
    maxFailureRatio: "MaxFailureRatio",
    monitor: "Monitor",
    order: "Order",
    parallelism: "Parallelism",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusUpdateConfigSwarm$ {
  /** @deprecated use `PostgresChangeStatusUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema =
    PostgresChangeStatusUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `PostgresChangeStatusUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema =
    PostgresChangeStatusUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `PostgresChangeStatusUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = PostgresChangeStatusUpdateConfigSwarm$Outbound;
}

export function postgresChangeStatusUpdateConfigSwarmToJSON(
  postgresChangeStatusUpdateConfigSwarm: PostgresChangeStatusUpdateConfigSwarm,
): string {
  return JSON.stringify(
    PostgresChangeStatusUpdateConfigSwarm$outboundSchema.parse(
      postgresChangeStatusUpdateConfigSwarm,
    ),
  );
}

export function postgresChangeStatusUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<PostgresChangeStatusUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostgresChangeStatusUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresChangeStatusUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusResponseBody$inboundSchema: z.ZodType<
  PostgresChangeStatusResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  applicationStatus:
    PostgresChangeStatusApplicationStatusResponse$inboundSchema,
  backups: z.array(z.lazy(() => PostgresChangeStatusBackup$inboundSchema)),
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databaseName: z.string(),
  databasePassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environment: z.lazy(() => PostgresChangeStatusEnvironment$inboundSchema),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.lazy(() => PostgresChangeStatusHealthCheckSwarm$inboundSchema),
  ),
  labelsSwarm: z.nullable(z.record(z.string())),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.lazy(() => PostgresChangeStatusModeSwarm$inboundSchema),
  ),
  mounts: z.array(z.lazy(() => PostgresChangeStatusMount$inboundSchema)),
  name: z.string(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => PostgresChangeStatusNetworkSwarm$inboundSchema)),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => PostgresChangeStatusPlacementSwarm$inboundSchema),
  ),
  postgresId: z.string(),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => PostgresChangeStatusRestartPolicySwarm$inboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => PostgresChangeStatusRollbackConfigSwarm$inboundSchema),
  ),
  server: z.nullable(z.lazy(() => PostgresChangeStatusServer$inboundSchema)),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.lazy(() => PostgresChangeStatusUpdateConfigSwarm$inboundSchema),
  ),
});

/** @internal */
export type PostgresChangeStatusResponseBody$Outbound = {
  appName: string;
  applicationStatus: string;
  backups: Array<PostgresChangeStatusBackup$Outbound>;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databaseName: string;
  databasePassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environment: PostgresChangeStatusEnvironment$Outbound;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: PostgresChangeStatusHealthCheckSwarm$Outbound | null;
  labelsSwarm: { [k: string]: string } | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: PostgresChangeStatusModeSwarm$Outbound | null;
  mounts: Array<PostgresChangeStatusMount$Outbound>;
  name: string;
  networkSwarm: Array<PostgresChangeStatusNetworkSwarm$Outbound> | null;
  placementSwarm: PostgresChangeStatusPlacementSwarm$Outbound | null;
  postgresId: string;
  replicas: number;
  restartPolicySwarm: PostgresChangeStatusRestartPolicySwarm$Outbound | null;
  rollbackConfigSwarm: PostgresChangeStatusRollbackConfigSwarm$Outbound | null;
  server: PostgresChangeStatusServer$Outbound | null;
  serverId: string | null;
  updateConfigSwarm: PostgresChangeStatusUpdateConfigSwarm$Outbound | null;
};

/** @internal */
export const PostgresChangeStatusResponseBody$outboundSchema: z.ZodType<
  PostgresChangeStatusResponseBody$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusResponseBody
> = z.object({
  appName: z.string(),
  applicationStatus:
    PostgresChangeStatusApplicationStatusResponse$outboundSchema,
  backups: z.array(z.lazy(() => PostgresChangeStatusBackup$outboundSchema)),
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databaseName: z.string(),
  databasePassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environment: z.lazy(() => PostgresChangeStatusEnvironment$outboundSchema),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.lazy(() => PostgresChangeStatusHealthCheckSwarm$outboundSchema),
  ),
  labelsSwarm: z.nullable(z.record(z.string())),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.lazy(() => PostgresChangeStatusModeSwarm$outboundSchema),
  ),
  mounts: z.array(z.lazy(() => PostgresChangeStatusMount$outboundSchema)),
  name: z.string(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => PostgresChangeStatusNetworkSwarm$outboundSchema)),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => PostgresChangeStatusPlacementSwarm$outboundSchema),
  ),
  postgresId: z.string(),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => PostgresChangeStatusRestartPolicySwarm$outboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => PostgresChangeStatusRollbackConfigSwarm$outboundSchema),
  ),
  server: z.nullable(z.lazy(() => PostgresChangeStatusServer$outboundSchema)),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.lazy(() => PostgresChangeStatusUpdateConfigSwarm$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusResponseBody$ {
  /** @deprecated use `PostgresChangeStatusResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusResponseBody$inboundSchema;
  /** @deprecated use `PostgresChangeStatusResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostgresChangeStatusResponseBody$outboundSchema;
  /** @deprecated use `PostgresChangeStatusResponseBody$Outbound` instead. */
  export type Outbound = PostgresChangeStatusResponseBody$Outbound;
}

export function postgresChangeStatusResponseBodyToJSON(
  postgresChangeStatusResponseBody: PostgresChangeStatusResponseBody,
): string {
  return JSON.stringify(
    PostgresChangeStatusResponseBody$outboundSchema.parse(
      postgresChangeStatusResponseBody,
    ),
  );
}

export function postgresChangeStatusResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostgresChangeStatusResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresChangeStatusResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresChangeStatusResponseBody' from JSON`,
  );
}

/** @internal */
export const PostgresChangeStatusResponse$inboundSchema: z.ZodType<
  PostgresChangeStatusResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PostgresChangeStatusResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type PostgresChangeStatusResponse$Outbound =
  | PostgresChangeStatusResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const PostgresChangeStatusResponse$outboundSchema: z.ZodType<
  PostgresChangeStatusResponse$Outbound,
  z.ZodTypeDef,
  PostgresChangeStatusResponse
> = z.union([
  z.lazy(() => PostgresChangeStatusResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresChangeStatusResponse$ {
  /** @deprecated use `PostgresChangeStatusResponse$inboundSchema` instead. */
  export const inboundSchema = PostgresChangeStatusResponse$inboundSchema;
  /** @deprecated use `PostgresChangeStatusResponse$outboundSchema` instead. */
  export const outboundSchema = PostgresChangeStatusResponse$outboundSchema;
  /** @deprecated use `PostgresChangeStatusResponse$Outbound` instead. */
  export type Outbound = PostgresChangeStatusResponse$Outbound;
}

export function postgresChangeStatusResponseToJSON(
  postgresChangeStatusResponse: PostgresChangeStatusResponse,
): string {
  return JSON.stringify(
    PostgresChangeStatusResponse$outboundSchema.parse(
      postgresChangeStatusResponse,
    ),
  );
}

export function postgresChangeStatusResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostgresChangeStatusResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresChangeStatusResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresChangeStatusResponse' from JSON`,
  );
}
