/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ServerValidateSecurity = {
  authorization: string;
};

export type ServerValidateRequest = {
  serverId: string;
};

/** @internal */
export const ServerValidateSecurity$inboundSchema: z.ZodType<
  ServerValidateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type ServerValidateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const ServerValidateSecurity$outboundSchema: z.ZodType<
  ServerValidateSecurity$Outbound,
  z.ZodTypeDef,
  ServerValidateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServerValidateSecurity$ {
  /** @deprecated use `ServerValidateSecurity$inboundSchema` instead. */
  export const inboundSchema = ServerValidateSecurity$inboundSchema;
  /** @deprecated use `ServerValidateSecurity$outboundSchema` instead. */
  export const outboundSchema = ServerValidateSecurity$outboundSchema;
  /** @deprecated use `ServerValidateSecurity$Outbound` instead. */
  export type Outbound = ServerValidateSecurity$Outbound;
}

export function serverValidateSecurityToJSON(
  serverValidateSecurity: ServerValidateSecurity,
): string {
  return JSON.stringify(
    ServerValidateSecurity$outboundSchema.parse(serverValidateSecurity),
  );
}

export function serverValidateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ServerValidateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServerValidateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServerValidateSecurity' from JSON`,
  );
}

/** @internal */
export const ServerValidateRequest$inboundSchema: z.ZodType<
  ServerValidateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serverId: z.string(),
});

/** @internal */
export type ServerValidateRequest$Outbound = {
  serverId: string;
};

/** @internal */
export const ServerValidateRequest$outboundSchema: z.ZodType<
  ServerValidateRequest$Outbound,
  z.ZodTypeDef,
  ServerValidateRequest
> = z.object({
  serverId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServerValidateRequest$ {
  /** @deprecated use `ServerValidateRequest$inboundSchema` instead. */
  export const inboundSchema = ServerValidateRequest$inboundSchema;
  /** @deprecated use `ServerValidateRequest$outboundSchema` instead. */
  export const outboundSchema = ServerValidateRequest$outboundSchema;
  /** @deprecated use `ServerValidateRequest$Outbound` instead. */
  export type Outbound = ServerValidateRequest$Outbound;
}

export function serverValidateRequestToJSON(
  serverValidateRequest: ServerValidateRequest,
): string {
  return JSON.stringify(
    ServerValidateRequest$outboundSchema.parse(serverValidateRequest),
  );
}

export function serverValidateRequestFromJSON(
  jsonString: string,
): SafeParseResult<ServerValidateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServerValidateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServerValidateRequest' from JSON`,
  );
}
