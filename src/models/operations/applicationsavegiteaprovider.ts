/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ApplicationSaveGiteaProviderSecurity = {
  authorization: string;
};

export type ApplicationSaveGiteaProviderRequest = {
  applicationId: string;
  enableSubmodules: boolean;
  giteaBranch: string | null;
  giteaBuildPath: string | null;
  giteaId: string | null;
  giteaOwner: string | null;
  giteaRepository: string | null;
  watchPaths?: Array<string> | null | undefined;
};

export type ApplicationSaveGiteaProviderResponse = models.ErrorT | boolean;

/** @internal */
export const ApplicationSaveGiteaProviderSecurity$inboundSchema: z.ZodType<
  ApplicationSaveGiteaProviderSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type ApplicationSaveGiteaProviderSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const ApplicationSaveGiteaProviderSecurity$outboundSchema: z.ZodType<
  ApplicationSaveGiteaProviderSecurity$Outbound,
  z.ZodTypeDef,
  ApplicationSaveGiteaProviderSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationSaveGiteaProviderSecurity$ {
  /** @deprecated use `ApplicationSaveGiteaProviderSecurity$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationSaveGiteaProviderSecurity$inboundSchema;
  /** @deprecated use `ApplicationSaveGiteaProviderSecurity$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationSaveGiteaProviderSecurity$outboundSchema;
  /** @deprecated use `ApplicationSaveGiteaProviderSecurity$Outbound` instead. */
  export type Outbound = ApplicationSaveGiteaProviderSecurity$Outbound;
}

export function applicationSaveGiteaProviderSecurityToJSON(
  applicationSaveGiteaProviderSecurity: ApplicationSaveGiteaProviderSecurity,
): string {
  return JSON.stringify(
    ApplicationSaveGiteaProviderSecurity$outboundSchema.parse(
      applicationSaveGiteaProviderSecurity,
    ),
  );
}

export function applicationSaveGiteaProviderSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationSaveGiteaProviderSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationSaveGiteaProviderSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationSaveGiteaProviderSecurity' from JSON`,
  );
}

/** @internal */
export const ApplicationSaveGiteaProviderRequest$inboundSchema: z.ZodType<
  ApplicationSaveGiteaProviderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string(),
  enableSubmodules: z.boolean(),
  giteaBranch: z.nullable(z.string()),
  giteaBuildPath: z.nullable(z.string()),
  giteaId: z.nullable(z.string()),
  giteaOwner: z.nullable(z.string()),
  giteaRepository: z.nullable(z.string()),
  watchPaths: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type ApplicationSaveGiteaProviderRequest$Outbound = {
  applicationId: string;
  enableSubmodules: boolean;
  giteaBranch: string | null;
  giteaBuildPath: string | null;
  giteaId: string | null;
  giteaOwner: string | null;
  giteaRepository: string | null;
  watchPaths?: Array<string> | null | undefined;
};

/** @internal */
export const ApplicationSaveGiteaProviderRequest$outboundSchema: z.ZodType<
  ApplicationSaveGiteaProviderRequest$Outbound,
  z.ZodTypeDef,
  ApplicationSaveGiteaProviderRequest
> = z.object({
  applicationId: z.string(),
  enableSubmodules: z.boolean(),
  giteaBranch: z.nullable(z.string()),
  giteaBuildPath: z.nullable(z.string()),
  giteaId: z.nullable(z.string()),
  giteaOwner: z.nullable(z.string()),
  giteaRepository: z.nullable(z.string()),
  watchPaths: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationSaveGiteaProviderRequest$ {
  /** @deprecated use `ApplicationSaveGiteaProviderRequest$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationSaveGiteaProviderRequest$inboundSchema;
  /** @deprecated use `ApplicationSaveGiteaProviderRequest$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationSaveGiteaProviderRequest$outboundSchema;
  /** @deprecated use `ApplicationSaveGiteaProviderRequest$Outbound` instead. */
  export type Outbound = ApplicationSaveGiteaProviderRequest$Outbound;
}

export function applicationSaveGiteaProviderRequestToJSON(
  applicationSaveGiteaProviderRequest: ApplicationSaveGiteaProviderRequest,
): string {
  return JSON.stringify(
    ApplicationSaveGiteaProviderRequest$outboundSchema.parse(
      applicationSaveGiteaProviderRequest,
    ),
  );
}

export function applicationSaveGiteaProviderRequestFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationSaveGiteaProviderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationSaveGiteaProviderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationSaveGiteaProviderRequest' from JSON`,
  );
}

/** @internal */
export const ApplicationSaveGiteaProviderResponse$inboundSchema: z.ZodType<
  ApplicationSaveGiteaProviderResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.boolean()]);

/** @internal */
export type ApplicationSaveGiteaProviderResponse$Outbound =
  | models.ErrorT$Outbound
  | boolean;

/** @internal */
export const ApplicationSaveGiteaProviderResponse$outboundSchema: z.ZodType<
  ApplicationSaveGiteaProviderResponse$Outbound,
  z.ZodTypeDef,
  ApplicationSaveGiteaProviderResponse
> = z.union([models.ErrorT$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationSaveGiteaProviderResponse$ {
  /** @deprecated use `ApplicationSaveGiteaProviderResponse$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationSaveGiteaProviderResponse$inboundSchema;
  /** @deprecated use `ApplicationSaveGiteaProviderResponse$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationSaveGiteaProviderResponse$outboundSchema;
  /** @deprecated use `ApplicationSaveGiteaProviderResponse$Outbound` instead. */
  export type Outbound = ApplicationSaveGiteaProviderResponse$Outbound;
}

export function applicationSaveGiteaProviderResponseToJSON(
  applicationSaveGiteaProviderResponse: ApplicationSaveGiteaProviderResponse,
): string {
  return JSON.stringify(
    ApplicationSaveGiteaProviderResponse$outboundSchema.parse(
      applicationSaveGiteaProviderResponse,
    ),
  );
}

export function applicationSaveGiteaProviderResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationSaveGiteaProviderResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationSaveGiteaProviderResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationSaveGiteaProviderResponse' from JSON`,
  );
}
