/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComposeDisconnectGitProviderSecurity = {
  authorization: string;
};

export type ComposeDisconnectGitProviderRequest = {
  composeId: string;
};

/** @internal */
export const ComposeDisconnectGitProviderSecurity$inboundSchema: z.ZodType<
  ComposeDisconnectGitProviderSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type ComposeDisconnectGitProviderSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const ComposeDisconnectGitProviderSecurity$outboundSchema: z.ZodType<
  ComposeDisconnectGitProviderSecurity$Outbound,
  z.ZodTypeDef,
  ComposeDisconnectGitProviderSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComposeDisconnectGitProviderSecurity$ {
  /** @deprecated use `ComposeDisconnectGitProviderSecurity$inboundSchema` instead. */
  export const inboundSchema =
    ComposeDisconnectGitProviderSecurity$inboundSchema;
  /** @deprecated use `ComposeDisconnectGitProviderSecurity$outboundSchema` instead. */
  export const outboundSchema =
    ComposeDisconnectGitProviderSecurity$outboundSchema;
  /** @deprecated use `ComposeDisconnectGitProviderSecurity$Outbound` instead. */
  export type Outbound = ComposeDisconnectGitProviderSecurity$Outbound;
}

export function composeDisconnectGitProviderSecurityToJSON(
  composeDisconnectGitProviderSecurity: ComposeDisconnectGitProviderSecurity,
): string {
  return JSON.stringify(
    ComposeDisconnectGitProviderSecurity$outboundSchema.parse(
      composeDisconnectGitProviderSecurity,
    ),
  );
}

export function composeDisconnectGitProviderSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ComposeDisconnectGitProviderSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ComposeDisconnectGitProviderSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComposeDisconnectGitProviderSecurity' from JSON`,
  );
}

/** @internal */
export const ComposeDisconnectGitProviderRequest$inboundSchema: z.ZodType<
  ComposeDisconnectGitProviderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  composeId: z.string(),
});

/** @internal */
export type ComposeDisconnectGitProviderRequest$Outbound = {
  composeId: string;
};

/** @internal */
export const ComposeDisconnectGitProviderRequest$outboundSchema: z.ZodType<
  ComposeDisconnectGitProviderRequest$Outbound,
  z.ZodTypeDef,
  ComposeDisconnectGitProviderRequest
> = z.object({
  composeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComposeDisconnectGitProviderRequest$ {
  /** @deprecated use `ComposeDisconnectGitProviderRequest$inboundSchema` instead. */
  export const inboundSchema =
    ComposeDisconnectGitProviderRequest$inboundSchema;
  /** @deprecated use `ComposeDisconnectGitProviderRequest$outboundSchema` instead. */
  export const outboundSchema =
    ComposeDisconnectGitProviderRequest$outboundSchema;
  /** @deprecated use `ComposeDisconnectGitProviderRequest$Outbound` instead. */
  export type Outbound = ComposeDisconnectGitProviderRequest$Outbound;
}

export function composeDisconnectGitProviderRequestToJSON(
  composeDisconnectGitProviderRequest: ComposeDisconnectGitProviderRequest,
): string {
  return JSON.stringify(
    ComposeDisconnectGitProviderRequest$outboundSchema.parse(
      composeDisconnectGitProviderRequest,
    ),
  );
}

export function composeDisconnectGitProviderRequestFromJSON(
  jsonString: string,
): SafeParseResult<ComposeDisconnectGitProviderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ComposeDisconnectGitProviderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComposeDisconnectGitProviderRequest' from JSON`,
  );
}
