/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ScheduleListSecurity = {
  authorization: string;
};

export const ScheduleListScheduleType = {
  Application: "application",
  Compose: "compose",
  Server: "server",
  DokployServer: "dokploy-server",
} as const;
export type ScheduleListScheduleType = ClosedEnum<
  typeof ScheduleListScheduleType
>;

export type ScheduleListRequest = {
  id: string;
  scheduleType: ScheduleListScheduleType;
};

/** @internal */
export const ScheduleListSecurity$inboundSchema: z.ZodType<
  ScheduleListSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type ScheduleListSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const ScheduleListSecurity$outboundSchema: z.ZodType<
  ScheduleListSecurity$Outbound,
  z.ZodTypeDef,
  ScheduleListSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScheduleListSecurity$ {
  /** @deprecated use `ScheduleListSecurity$inboundSchema` instead. */
  export const inboundSchema = ScheduleListSecurity$inboundSchema;
  /** @deprecated use `ScheduleListSecurity$outboundSchema` instead. */
  export const outboundSchema = ScheduleListSecurity$outboundSchema;
  /** @deprecated use `ScheduleListSecurity$Outbound` instead. */
  export type Outbound = ScheduleListSecurity$Outbound;
}

export function scheduleListSecurityToJSON(
  scheduleListSecurity: ScheduleListSecurity,
): string {
  return JSON.stringify(
    ScheduleListSecurity$outboundSchema.parse(scheduleListSecurity),
  );
}

export function scheduleListSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ScheduleListSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScheduleListSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScheduleListSecurity' from JSON`,
  );
}

/** @internal */
export const ScheduleListScheduleType$inboundSchema: z.ZodNativeEnum<
  typeof ScheduleListScheduleType
> = z.nativeEnum(ScheduleListScheduleType);

/** @internal */
export const ScheduleListScheduleType$outboundSchema: z.ZodNativeEnum<
  typeof ScheduleListScheduleType
> = ScheduleListScheduleType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScheduleListScheduleType$ {
  /** @deprecated use `ScheduleListScheduleType$inboundSchema` instead. */
  export const inboundSchema = ScheduleListScheduleType$inboundSchema;
  /** @deprecated use `ScheduleListScheduleType$outboundSchema` instead. */
  export const outboundSchema = ScheduleListScheduleType$outboundSchema;
}

/** @internal */
export const ScheduleListRequest$inboundSchema: z.ZodType<
  ScheduleListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  scheduleType: ScheduleListScheduleType$inboundSchema,
});

/** @internal */
export type ScheduleListRequest$Outbound = {
  id: string;
  scheduleType: string;
};

/** @internal */
export const ScheduleListRequest$outboundSchema: z.ZodType<
  ScheduleListRequest$Outbound,
  z.ZodTypeDef,
  ScheduleListRequest
> = z.object({
  id: z.string(),
  scheduleType: ScheduleListScheduleType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScheduleListRequest$ {
  /** @deprecated use `ScheduleListRequest$inboundSchema` instead. */
  export const inboundSchema = ScheduleListRequest$inboundSchema;
  /** @deprecated use `ScheduleListRequest$outboundSchema` instead. */
  export const outboundSchema = ScheduleListRequest$outboundSchema;
  /** @deprecated use `ScheduleListRequest$Outbound` instead. */
  export type Outbound = ScheduleListRequest$Outbound;
}

export function scheduleListRequestToJSON(
  scheduleListRequest: ScheduleListRequest,
): string {
  return JSON.stringify(
    ScheduleListRequest$outboundSchema.parse(scheduleListRequest),
  );
}

export function scheduleListRequestFromJSON(
  jsonString: string,
): SafeParseResult<ScheduleListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScheduleListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScheduleListRequest' from JSON`,
  );
}
