/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BackupUpdateSecurity = {
  authorization: string;
};

export const BackupUpdateDatabaseType = {
  Postgres: "postgres",
  Mariadb: "mariadb",
  Mysql: "mysql",
  Mongo: "mongo",
  WebServer: "web-server",
} as const;
export type BackupUpdateDatabaseType = ClosedEnum<
  typeof BackupUpdateDatabaseType
>;

export type BackupUpdateRequest = {
  backupId: string;
  database: string;
  databaseType: BackupUpdateDatabaseType;
  destinationId: string;
  enabled?: boolean | null | undefined;
  keepLatestCount?: number | null | undefined;
  metadata?: any | null | undefined;
  prefix: string;
  schedule: string;
  serviceName: string | null;
};

/** @internal */
export const BackupUpdateSecurity$inboundSchema: z.ZodType<
  BackupUpdateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type BackupUpdateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const BackupUpdateSecurity$outboundSchema: z.ZodType<
  BackupUpdateSecurity$Outbound,
  z.ZodTypeDef,
  BackupUpdateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackupUpdateSecurity$ {
  /** @deprecated use `BackupUpdateSecurity$inboundSchema` instead. */
  export const inboundSchema = BackupUpdateSecurity$inboundSchema;
  /** @deprecated use `BackupUpdateSecurity$outboundSchema` instead. */
  export const outboundSchema = BackupUpdateSecurity$outboundSchema;
  /** @deprecated use `BackupUpdateSecurity$Outbound` instead. */
  export type Outbound = BackupUpdateSecurity$Outbound;
}

export function backupUpdateSecurityToJSON(
  backupUpdateSecurity: BackupUpdateSecurity,
): string {
  return JSON.stringify(
    BackupUpdateSecurity$outboundSchema.parse(backupUpdateSecurity),
  );
}

export function backupUpdateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<BackupUpdateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BackupUpdateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackupUpdateSecurity' from JSON`,
  );
}

/** @internal */
export const BackupUpdateDatabaseType$inboundSchema: z.ZodNativeEnum<
  typeof BackupUpdateDatabaseType
> = z.nativeEnum(BackupUpdateDatabaseType);

/** @internal */
export const BackupUpdateDatabaseType$outboundSchema: z.ZodNativeEnum<
  typeof BackupUpdateDatabaseType
> = BackupUpdateDatabaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackupUpdateDatabaseType$ {
  /** @deprecated use `BackupUpdateDatabaseType$inboundSchema` instead. */
  export const inboundSchema = BackupUpdateDatabaseType$inboundSchema;
  /** @deprecated use `BackupUpdateDatabaseType$outboundSchema` instead. */
  export const outboundSchema = BackupUpdateDatabaseType$outboundSchema;
}

/** @internal */
export const BackupUpdateRequest$inboundSchema: z.ZodType<
  BackupUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  backupId: z.string(),
  database: z.string(),
  databaseType: BackupUpdateDatabaseType$inboundSchema,
  destinationId: z.string(),
  enabled: z.nullable(z.boolean()).optional(),
  keepLatestCount: z.nullable(z.number()).optional(),
  metadata: z.nullable(z.any()).optional(),
  prefix: z.string(),
  schedule: z.string(),
  serviceName: z.nullable(z.string()),
});

/** @internal */
export type BackupUpdateRequest$Outbound = {
  backupId: string;
  database: string;
  databaseType: string;
  destinationId: string;
  enabled?: boolean | null | undefined;
  keepLatestCount?: number | null | undefined;
  metadata?: any | null | undefined;
  prefix: string;
  schedule: string;
  serviceName: string | null;
};

/** @internal */
export const BackupUpdateRequest$outboundSchema: z.ZodType<
  BackupUpdateRequest$Outbound,
  z.ZodTypeDef,
  BackupUpdateRequest
> = z.object({
  backupId: z.string(),
  database: z.string(),
  databaseType: BackupUpdateDatabaseType$outboundSchema,
  destinationId: z.string(),
  enabled: z.nullable(z.boolean()).optional(),
  keepLatestCount: z.nullable(z.number()).optional(),
  metadata: z.nullable(z.any()).optional(),
  prefix: z.string(),
  schedule: z.string(),
  serviceName: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackupUpdateRequest$ {
  /** @deprecated use `BackupUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = BackupUpdateRequest$inboundSchema;
  /** @deprecated use `BackupUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = BackupUpdateRequest$outboundSchema;
  /** @deprecated use `BackupUpdateRequest$Outbound` instead. */
  export type Outbound = BackupUpdateRequest$Outbound;
}

export function backupUpdateRequestToJSON(
  backupUpdateRequest: BackupUpdateRequest,
): string {
  return JSON.stringify(
    BackupUpdateRequest$outboundSchema.parse(backupUpdateRequest),
  );
}

export function backupUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<BackupUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BackupUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackupUpdateRequest' from JSON`,
  );
}
