/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BackupManualBackupMongoSecurity = {
  authorization: string;
};

export type BackupManualBackupMongoRequest = {
  backupId: string;
};

/** @internal */
export const BackupManualBackupMongoSecurity$inboundSchema: z.ZodType<
  BackupManualBackupMongoSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type BackupManualBackupMongoSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const BackupManualBackupMongoSecurity$outboundSchema: z.ZodType<
  BackupManualBackupMongoSecurity$Outbound,
  z.ZodTypeDef,
  BackupManualBackupMongoSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackupManualBackupMongoSecurity$ {
  /** @deprecated use `BackupManualBackupMongoSecurity$inboundSchema` instead. */
  export const inboundSchema = BackupManualBackupMongoSecurity$inboundSchema;
  /** @deprecated use `BackupManualBackupMongoSecurity$outboundSchema` instead. */
  export const outboundSchema = BackupManualBackupMongoSecurity$outboundSchema;
  /** @deprecated use `BackupManualBackupMongoSecurity$Outbound` instead. */
  export type Outbound = BackupManualBackupMongoSecurity$Outbound;
}

export function backupManualBackupMongoSecurityToJSON(
  backupManualBackupMongoSecurity: BackupManualBackupMongoSecurity,
): string {
  return JSON.stringify(
    BackupManualBackupMongoSecurity$outboundSchema.parse(
      backupManualBackupMongoSecurity,
    ),
  );
}

export function backupManualBackupMongoSecurityFromJSON(
  jsonString: string,
): SafeParseResult<BackupManualBackupMongoSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BackupManualBackupMongoSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackupManualBackupMongoSecurity' from JSON`,
  );
}

/** @internal */
export const BackupManualBackupMongoRequest$inboundSchema: z.ZodType<
  BackupManualBackupMongoRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  backupId: z.string(),
});

/** @internal */
export type BackupManualBackupMongoRequest$Outbound = {
  backupId: string;
};

/** @internal */
export const BackupManualBackupMongoRequest$outboundSchema: z.ZodType<
  BackupManualBackupMongoRequest$Outbound,
  z.ZodTypeDef,
  BackupManualBackupMongoRequest
> = z.object({
  backupId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackupManualBackupMongoRequest$ {
  /** @deprecated use `BackupManualBackupMongoRequest$inboundSchema` instead. */
  export const inboundSchema = BackupManualBackupMongoRequest$inboundSchema;
  /** @deprecated use `BackupManualBackupMongoRequest$outboundSchema` instead. */
  export const outboundSchema = BackupManualBackupMongoRequest$outboundSchema;
  /** @deprecated use `BackupManualBackupMongoRequest$Outbound` instead. */
  export type Outbound = BackupManualBackupMongoRequest$Outbound;
}

export function backupManualBackupMongoRequestToJSON(
  backupManualBackupMongoRequest: BackupManualBackupMongoRequest,
): string {
  return JSON.stringify(
    BackupManualBackupMongoRequest$outboundSchema.parse(
      backupManualBackupMongoRequest,
    ),
  );
}

export function backupManualBackupMongoRequestFromJSON(
  jsonString: string,
): SafeParseResult<BackupManualBackupMongoRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BackupManualBackupMongoRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackupManualBackupMongoRequest' from JSON`,
  );
}
