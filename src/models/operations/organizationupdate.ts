/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type OrganizationUpdateSecurity = {
  authorization: string;
};

export type OrganizationUpdateRequest = {
  logo?: string | undefined;
  name: string;
  organizationId: string;
};

/**
 * Successful response
 */
export type OrganizationUpdateResponseBody = {
  createdAt: Date;
  id: string;
  logo: string | null;
  metadata: string | null;
  name: string;
  ownerId: string;
  slug: string | null;
};

export type OrganizationUpdateResponse =
  | OrganizationUpdateResponseBody
  | models.ErrorT;

/** @internal */
export const OrganizationUpdateSecurity$inboundSchema: z.ZodType<
  OrganizationUpdateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type OrganizationUpdateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const OrganizationUpdateSecurity$outboundSchema: z.ZodType<
  OrganizationUpdateSecurity$Outbound,
  z.ZodTypeDef,
  OrganizationUpdateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationUpdateSecurity$ {
  /** @deprecated use `OrganizationUpdateSecurity$inboundSchema` instead. */
  export const inboundSchema = OrganizationUpdateSecurity$inboundSchema;
  /** @deprecated use `OrganizationUpdateSecurity$outboundSchema` instead. */
  export const outboundSchema = OrganizationUpdateSecurity$outboundSchema;
  /** @deprecated use `OrganizationUpdateSecurity$Outbound` instead. */
  export type Outbound = OrganizationUpdateSecurity$Outbound;
}

export function organizationUpdateSecurityToJSON(
  organizationUpdateSecurity: OrganizationUpdateSecurity,
): string {
  return JSON.stringify(
    OrganizationUpdateSecurity$outboundSchema.parse(organizationUpdateSecurity),
  );
}

export function organizationUpdateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationUpdateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationUpdateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationUpdateSecurity' from JSON`,
  );
}

/** @internal */
export const OrganizationUpdateRequest$inboundSchema: z.ZodType<
  OrganizationUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  logo: z.string().optional(),
  name: z.string(),
  organizationId: z.string(),
});

/** @internal */
export type OrganizationUpdateRequest$Outbound = {
  logo?: string | undefined;
  name: string;
  organizationId: string;
};

/** @internal */
export const OrganizationUpdateRequest$outboundSchema: z.ZodType<
  OrganizationUpdateRequest$Outbound,
  z.ZodTypeDef,
  OrganizationUpdateRequest
> = z.object({
  logo: z.string().optional(),
  name: z.string(),
  organizationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationUpdateRequest$ {
  /** @deprecated use `OrganizationUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = OrganizationUpdateRequest$inboundSchema;
  /** @deprecated use `OrganizationUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = OrganizationUpdateRequest$outboundSchema;
  /** @deprecated use `OrganizationUpdateRequest$Outbound` instead. */
  export type Outbound = OrganizationUpdateRequest$Outbound;
}

export function organizationUpdateRequestToJSON(
  organizationUpdateRequest: OrganizationUpdateRequest,
): string {
  return JSON.stringify(
    OrganizationUpdateRequest$outboundSchema.parse(organizationUpdateRequest),
  );
}

export function organizationUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationUpdateRequest' from JSON`,
  );
}

/** @internal */
export const OrganizationUpdateResponseBody$inboundSchema: z.ZodType<
  OrganizationUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  id: z.string(),
  logo: z.nullable(z.string()),
  metadata: z.nullable(z.string()),
  name: z.string(),
  ownerId: z.string(),
  slug: z.nullable(z.string()),
});

/** @internal */
export type OrganizationUpdateResponseBody$Outbound = {
  createdAt: string;
  id: string;
  logo: string | null;
  metadata: string | null;
  name: string;
  ownerId: string;
  slug: string | null;
};

/** @internal */
export const OrganizationUpdateResponseBody$outboundSchema: z.ZodType<
  OrganizationUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  OrganizationUpdateResponseBody
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  id: z.string(),
  logo: z.nullable(z.string()),
  metadata: z.nullable(z.string()),
  name: z.string(),
  ownerId: z.string(),
  slug: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationUpdateResponseBody$ {
  /** @deprecated use `OrganizationUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = OrganizationUpdateResponseBody$inboundSchema;
  /** @deprecated use `OrganizationUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = OrganizationUpdateResponseBody$outboundSchema;
  /** @deprecated use `OrganizationUpdateResponseBody$Outbound` instead. */
  export type Outbound = OrganizationUpdateResponseBody$Outbound;
}

export function organizationUpdateResponseBodyToJSON(
  organizationUpdateResponseBody: OrganizationUpdateResponseBody,
): string {
  return JSON.stringify(
    OrganizationUpdateResponseBody$outboundSchema.parse(
      organizationUpdateResponseBody,
    ),
  );
}

export function organizationUpdateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationUpdateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationUpdateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationUpdateResponseBody' from JSON`,
  );
}

/** @internal */
export const OrganizationUpdateResponse$inboundSchema: z.ZodType<
  OrganizationUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => OrganizationUpdateResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type OrganizationUpdateResponse$Outbound =
  | OrganizationUpdateResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const OrganizationUpdateResponse$outboundSchema: z.ZodType<
  OrganizationUpdateResponse$Outbound,
  z.ZodTypeDef,
  OrganizationUpdateResponse
> = z.union([
  z.lazy(() => OrganizationUpdateResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationUpdateResponse$ {
  /** @deprecated use `OrganizationUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = OrganizationUpdateResponse$inboundSchema;
  /** @deprecated use `OrganizationUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = OrganizationUpdateResponse$outboundSchema;
  /** @deprecated use `OrganizationUpdateResponse$Outbound` instead. */
  export type Outbound = OrganizationUpdateResponse$Outbound;
}

export function organizationUpdateResponseToJSON(
  organizationUpdateResponse: OrganizationUpdateResponse,
): string {
  return JSON.stringify(
    OrganizationUpdateResponse$outboundSchema.parse(organizationUpdateResponse),
  );
}

export function organizationUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationUpdateResponse' from JSON`,
  );
}
