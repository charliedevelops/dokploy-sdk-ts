/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export const MysqlUpdateApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type MysqlUpdateApplicationStatus = ClosedEnum<
  typeof MysqlUpdateApplicationStatus
>;

export type MysqlUpdateHealthCheckSwarm = {
  interval?: number | undefined;
  retries?: number | undefined;
  startPeriod?: number | undefined;
  test?: Array<string> | undefined;
  timeout?: number | undefined;
};

export type MysqlUpdateGlobal = {};

export type MysqlUpdateGlobalJob = {};

export type MysqlUpdateReplicated = {
  replicas?: number | undefined;
};

export type MysqlUpdateReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type MysqlUpdateModeSwarm = {
  global?: MysqlUpdateGlobal | undefined;
  globalJob?: MysqlUpdateGlobalJob | undefined;
  replicated?: MysqlUpdateReplicated | undefined;
  replicatedJob?: MysqlUpdateReplicatedJob | undefined;
};

export type MysqlUpdateDriverOpts = {};

export type MysqlUpdateNetworkSwarm = {
  aliases?: Array<string> | undefined;
  driverOpts?: MysqlUpdateDriverOpts | undefined;
  target?: string | undefined;
};

export type MysqlUpdatePlatform = {
  architecture: string;
  os: string;
};

export type MysqlUpdateSpread = {
  spreadDescriptor: string;
};

export type MysqlUpdatePreference = {
  spread: MysqlUpdateSpread;
};

export type MysqlUpdatePlacementSwarm = {
  constraints?: Array<string> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<MysqlUpdatePlatform> | undefined;
  preferences?: Array<MysqlUpdatePreference> | undefined;
};

export type MysqlUpdateRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type MysqlUpdateRollbackConfigSwarm = {
  delay?: number | undefined;
  failureAction?: string | undefined;
  maxFailureRatio?: number | undefined;
  monitor?: number | undefined;
  order: string;
  parallelism: number;
};

export type MysqlUpdateUpdateConfigSwarm = {
  delay?: number | undefined;
  failureAction?: string | undefined;
  maxFailureRatio?: number | undefined;
  monitor?: number | undefined;
  order: string;
  parallelism: number;
};

export type MysqlUpdateRequest = {
  appName?: string | undefined;
  applicationStatus?: MysqlUpdateApplicationStatus | undefined;
  command?: string | null | undefined;
  cpuLimit?: string | null | undefined;
  cpuReservation?: string | null | undefined;
  createdAt?: string | undefined;
  databaseName?: string | undefined;
  databasePassword?: string | undefined;
  databaseRootPassword?: string | undefined;
  databaseUser?: string | undefined;
  description?: string | null | undefined;
  dockerImage?: string | undefined;
  env?: string | null | undefined;
  environmentId?: string | undefined;
  externalPort?: number | null | undefined;
  healthCheckSwarm?: MysqlUpdateHealthCheckSwarm | null | undefined;
  labelsSwarm?: { [k: string]: string } | null | undefined;
  memoryLimit?: string | null | undefined;
  memoryReservation?: string | null | undefined;
  modeSwarm?: MysqlUpdateModeSwarm | null | undefined;
  mysqlId: string;
  name?: string | undefined;
  networkSwarm?: Array<MysqlUpdateNetworkSwarm> | null | undefined;
  placementSwarm?: MysqlUpdatePlacementSwarm | null | undefined;
  replicas?: number | undefined;
  restartPolicySwarm?: MysqlUpdateRestartPolicySwarm | null | undefined;
  rollbackConfigSwarm?: MysqlUpdateRollbackConfigSwarm | null | undefined;
  updateConfigSwarm?: MysqlUpdateUpdateConfigSwarm | null | undefined;
};

export type MysqlUpdateResponse = models.ErrorT | boolean;

/** @internal */
export const MysqlUpdateApplicationStatus$inboundSchema: z.ZodNativeEnum<
  typeof MysqlUpdateApplicationStatus
> = z.nativeEnum(MysqlUpdateApplicationStatus);

/** @internal */
export const MysqlUpdateApplicationStatus$outboundSchema: z.ZodNativeEnum<
  typeof MysqlUpdateApplicationStatus
> = MysqlUpdateApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlUpdateApplicationStatus$ {
  /** @deprecated use `MysqlUpdateApplicationStatus$inboundSchema` instead. */
  export const inboundSchema = MysqlUpdateApplicationStatus$inboundSchema;
  /** @deprecated use `MysqlUpdateApplicationStatus$outboundSchema` instead. */
  export const outboundSchema = MysqlUpdateApplicationStatus$outboundSchema;
}

/** @internal */
export const MysqlUpdateHealthCheckSwarm$inboundSchema: z.ZodType<
  MysqlUpdateHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Interval: z.number().optional(),
  Retries: z.number().optional(),
  StartPeriod: z.number().optional(),
  Test: z.array(z.string()).optional(),
  Timeout: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Interval": "interval",
    "Retries": "retries",
    "StartPeriod": "startPeriod",
    "Test": "test",
    "Timeout": "timeout",
  });
});

/** @internal */
export type MysqlUpdateHealthCheckSwarm$Outbound = {
  Interval?: number | undefined;
  Retries?: number | undefined;
  StartPeriod?: number | undefined;
  Test?: Array<string> | undefined;
  Timeout?: number | undefined;
};

/** @internal */
export const MysqlUpdateHealthCheckSwarm$outboundSchema: z.ZodType<
  MysqlUpdateHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  MysqlUpdateHealthCheckSwarm
> = z.object({
  interval: z.number().optional(),
  retries: z.number().optional(),
  startPeriod: z.number().optional(),
  test: z.array(z.string()).optional(),
  timeout: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    interval: "Interval",
    retries: "Retries",
    startPeriod: "StartPeriod",
    test: "Test",
    timeout: "Timeout",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlUpdateHealthCheckSwarm$ {
  /** @deprecated use `MysqlUpdateHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlUpdateHealthCheckSwarm$inboundSchema;
  /** @deprecated use `MysqlUpdateHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlUpdateHealthCheckSwarm$outboundSchema;
  /** @deprecated use `MysqlUpdateHealthCheckSwarm$Outbound` instead. */
  export type Outbound = MysqlUpdateHealthCheckSwarm$Outbound;
}

export function mysqlUpdateHealthCheckSwarmToJSON(
  mysqlUpdateHealthCheckSwarm: MysqlUpdateHealthCheckSwarm,
): string {
  return JSON.stringify(
    MysqlUpdateHealthCheckSwarm$outboundSchema.parse(
      mysqlUpdateHealthCheckSwarm,
    ),
  );
}

export function mysqlUpdateHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlUpdateHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlUpdateHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlUpdateHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlUpdateGlobal$inboundSchema: z.ZodType<
  MysqlUpdateGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MysqlUpdateGlobal$Outbound = {};

/** @internal */
export const MysqlUpdateGlobal$outboundSchema: z.ZodType<
  MysqlUpdateGlobal$Outbound,
  z.ZodTypeDef,
  MysqlUpdateGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlUpdateGlobal$ {
  /** @deprecated use `MysqlUpdateGlobal$inboundSchema` instead. */
  export const inboundSchema = MysqlUpdateGlobal$inboundSchema;
  /** @deprecated use `MysqlUpdateGlobal$outboundSchema` instead. */
  export const outboundSchema = MysqlUpdateGlobal$outboundSchema;
  /** @deprecated use `MysqlUpdateGlobal$Outbound` instead. */
  export type Outbound = MysqlUpdateGlobal$Outbound;
}

export function mysqlUpdateGlobalToJSON(
  mysqlUpdateGlobal: MysqlUpdateGlobal,
): string {
  return JSON.stringify(
    MysqlUpdateGlobal$outboundSchema.parse(mysqlUpdateGlobal),
  );
}

export function mysqlUpdateGlobalFromJSON(
  jsonString: string,
): SafeParseResult<MysqlUpdateGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlUpdateGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlUpdateGlobal' from JSON`,
  );
}

/** @internal */
export const MysqlUpdateGlobalJob$inboundSchema: z.ZodType<
  MysqlUpdateGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MysqlUpdateGlobalJob$Outbound = {};

/** @internal */
export const MysqlUpdateGlobalJob$outboundSchema: z.ZodType<
  MysqlUpdateGlobalJob$Outbound,
  z.ZodTypeDef,
  MysqlUpdateGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlUpdateGlobalJob$ {
  /** @deprecated use `MysqlUpdateGlobalJob$inboundSchema` instead. */
  export const inboundSchema = MysqlUpdateGlobalJob$inboundSchema;
  /** @deprecated use `MysqlUpdateGlobalJob$outboundSchema` instead. */
  export const outboundSchema = MysqlUpdateGlobalJob$outboundSchema;
  /** @deprecated use `MysqlUpdateGlobalJob$Outbound` instead. */
  export type Outbound = MysqlUpdateGlobalJob$Outbound;
}

export function mysqlUpdateGlobalJobToJSON(
  mysqlUpdateGlobalJob: MysqlUpdateGlobalJob,
): string {
  return JSON.stringify(
    MysqlUpdateGlobalJob$outboundSchema.parse(mysqlUpdateGlobalJob),
  );
}

export function mysqlUpdateGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<MysqlUpdateGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlUpdateGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlUpdateGlobalJob' from JSON`,
  );
}

/** @internal */
export const MysqlUpdateReplicated$inboundSchema: z.ZodType<
  MysqlUpdateReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type MysqlUpdateReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const MysqlUpdateReplicated$outboundSchema: z.ZodType<
  MysqlUpdateReplicated$Outbound,
  z.ZodTypeDef,
  MysqlUpdateReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlUpdateReplicated$ {
  /** @deprecated use `MysqlUpdateReplicated$inboundSchema` instead. */
  export const inboundSchema = MysqlUpdateReplicated$inboundSchema;
  /** @deprecated use `MysqlUpdateReplicated$outboundSchema` instead. */
  export const outboundSchema = MysqlUpdateReplicated$outboundSchema;
  /** @deprecated use `MysqlUpdateReplicated$Outbound` instead. */
  export type Outbound = MysqlUpdateReplicated$Outbound;
}

export function mysqlUpdateReplicatedToJSON(
  mysqlUpdateReplicated: MysqlUpdateReplicated,
): string {
  return JSON.stringify(
    MysqlUpdateReplicated$outboundSchema.parse(mysqlUpdateReplicated),
  );
}

export function mysqlUpdateReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<MysqlUpdateReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlUpdateReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlUpdateReplicated' from JSON`,
  );
}

/** @internal */
export const MysqlUpdateReplicatedJob$inboundSchema: z.ZodType<
  MysqlUpdateReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type MysqlUpdateReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const MysqlUpdateReplicatedJob$outboundSchema: z.ZodType<
  MysqlUpdateReplicatedJob$Outbound,
  z.ZodTypeDef,
  MysqlUpdateReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlUpdateReplicatedJob$ {
  /** @deprecated use `MysqlUpdateReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = MysqlUpdateReplicatedJob$inboundSchema;
  /** @deprecated use `MysqlUpdateReplicatedJob$outboundSchema` instead. */
  export const outboundSchema = MysqlUpdateReplicatedJob$outboundSchema;
  /** @deprecated use `MysqlUpdateReplicatedJob$Outbound` instead. */
  export type Outbound = MysqlUpdateReplicatedJob$Outbound;
}

export function mysqlUpdateReplicatedJobToJSON(
  mysqlUpdateReplicatedJob: MysqlUpdateReplicatedJob,
): string {
  return JSON.stringify(
    MysqlUpdateReplicatedJob$outboundSchema.parse(mysqlUpdateReplicatedJob),
  );
}

export function mysqlUpdateReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<MysqlUpdateReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlUpdateReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlUpdateReplicatedJob' from JSON`,
  );
}

/** @internal */
export const MysqlUpdateModeSwarm$inboundSchema: z.ZodType<
  MysqlUpdateModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Global: z.lazy(() => MysqlUpdateGlobal$inboundSchema).optional(),
  GlobalJob: z.lazy(() => MysqlUpdateGlobalJob$inboundSchema).optional(),
  Replicated: z.lazy(() => MysqlUpdateReplicated$inboundSchema).optional(),
  ReplicatedJob: z.lazy(() => MysqlUpdateReplicatedJob$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Global": "global",
    "GlobalJob": "globalJob",
    "Replicated": "replicated",
    "ReplicatedJob": "replicatedJob",
  });
});

/** @internal */
export type MysqlUpdateModeSwarm$Outbound = {
  Global?: MysqlUpdateGlobal$Outbound | undefined;
  GlobalJob?: MysqlUpdateGlobalJob$Outbound | undefined;
  Replicated?: MysqlUpdateReplicated$Outbound | undefined;
  ReplicatedJob?: MysqlUpdateReplicatedJob$Outbound | undefined;
};

/** @internal */
export const MysqlUpdateModeSwarm$outboundSchema: z.ZodType<
  MysqlUpdateModeSwarm$Outbound,
  z.ZodTypeDef,
  MysqlUpdateModeSwarm
> = z.object({
  global: z.lazy(() => MysqlUpdateGlobal$outboundSchema).optional(),
  globalJob: z.lazy(() => MysqlUpdateGlobalJob$outboundSchema).optional(),
  replicated: z.lazy(() => MysqlUpdateReplicated$outboundSchema).optional(),
  replicatedJob: z.lazy(() => MysqlUpdateReplicatedJob$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    global: "Global",
    globalJob: "GlobalJob",
    replicated: "Replicated",
    replicatedJob: "ReplicatedJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlUpdateModeSwarm$ {
  /** @deprecated use `MysqlUpdateModeSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlUpdateModeSwarm$inboundSchema;
  /** @deprecated use `MysqlUpdateModeSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlUpdateModeSwarm$outboundSchema;
  /** @deprecated use `MysqlUpdateModeSwarm$Outbound` instead. */
  export type Outbound = MysqlUpdateModeSwarm$Outbound;
}

export function mysqlUpdateModeSwarmToJSON(
  mysqlUpdateModeSwarm: MysqlUpdateModeSwarm,
): string {
  return JSON.stringify(
    MysqlUpdateModeSwarm$outboundSchema.parse(mysqlUpdateModeSwarm),
  );
}

export function mysqlUpdateModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlUpdateModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlUpdateModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlUpdateModeSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlUpdateDriverOpts$inboundSchema: z.ZodType<
  MysqlUpdateDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MysqlUpdateDriverOpts$Outbound = {};

/** @internal */
export const MysqlUpdateDriverOpts$outboundSchema: z.ZodType<
  MysqlUpdateDriverOpts$Outbound,
  z.ZodTypeDef,
  MysqlUpdateDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlUpdateDriverOpts$ {
  /** @deprecated use `MysqlUpdateDriverOpts$inboundSchema` instead. */
  export const inboundSchema = MysqlUpdateDriverOpts$inboundSchema;
  /** @deprecated use `MysqlUpdateDriverOpts$outboundSchema` instead. */
  export const outboundSchema = MysqlUpdateDriverOpts$outboundSchema;
  /** @deprecated use `MysqlUpdateDriverOpts$Outbound` instead. */
  export type Outbound = MysqlUpdateDriverOpts$Outbound;
}

export function mysqlUpdateDriverOptsToJSON(
  mysqlUpdateDriverOpts: MysqlUpdateDriverOpts,
): string {
  return JSON.stringify(
    MysqlUpdateDriverOpts$outboundSchema.parse(mysqlUpdateDriverOpts),
  );
}

export function mysqlUpdateDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<MysqlUpdateDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlUpdateDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlUpdateDriverOpts' from JSON`,
  );
}

/** @internal */
export const MysqlUpdateNetworkSwarm$inboundSchema: z.ZodType<
  MysqlUpdateNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => MysqlUpdateDriverOpts$inboundSchema).optional(),
  Target: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
    "Target": "target",
  });
});

/** @internal */
export type MysqlUpdateNetworkSwarm$Outbound = {
  Aliases?: Array<string> | undefined;
  DriverOpts?: MysqlUpdateDriverOpts$Outbound | undefined;
  Target?: string | undefined;
};

/** @internal */
export const MysqlUpdateNetworkSwarm$outboundSchema: z.ZodType<
  MysqlUpdateNetworkSwarm$Outbound,
  z.ZodTypeDef,
  MysqlUpdateNetworkSwarm
> = z.object({
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => MysqlUpdateDriverOpts$outboundSchema).optional(),
  target: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    aliases: "Aliases",
    driverOpts: "DriverOpts",
    target: "Target",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlUpdateNetworkSwarm$ {
  /** @deprecated use `MysqlUpdateNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlUpdateNetworkSwarm$inboundSchema;
  /** @deprecated use `MysqlUpdateNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlUpdateNetworkSwarm$outboundSchema;
  /** @deprecated use `MysqlUpdateNetworkSwarm$Outbound` instead. */
  export type Outbound = MysqlUpdateNetworkSwarm$Outbound;
}

export function mysqlUpdateNetworkSwarmToJSON(
  mysqlUpdateNetworkSwarm: MysqlUpdateNetworkSwarm,
): string {
  return JSON.stringify(
    MysqlUpdateNetworkSwarm$outboundSchema.parse(mysqlUpdateNetworkSwarm),
  );
}

export function mysqlUpdateNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlUpdateNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlUpdateNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlUpdateNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlUpdatePlatform$inboundSchema: z.ZodType<
  MysqlUpdatePlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type MysqlUpdatePlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const MysqlUpdatePlatform$outboundSchema: z.ZodType<
  MysqlUpdatePlatform$Outbound,
  z.ZodTypeDef,
  MysqlUpdatePlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlUpdatePlatform$ {
  /** @deprecated use `MysqlUpdatePlatform$inboundSchema` instead. */
  export const inboundSchema = MysqlUpdatePlatform$inboundSchema;
  /** @deprecated use `MysqlUpdatePlatform$outboundSchema` instead. */
  export const outboundSchema = MysqlUpdatePlatform$outboundSchema;
  /** @deprecated use `MysqlUpdatePlatform$Outbound` instead. */
  export type Outbound = MysqlUpdatePlatform$Outbound;
}

export function mysqlUpdatePlatformToJSON(
  mysqlUpdatePlatform: MysqlUpdatePlatform,
): string {
  return JSON.stringify(
    MysqlUpdatePlatform$outboundSchema.parse(mysqlUpdatePlatform),
  );
}

export function mysqlUpdatePlatformFromJSON(
  jsonString: string,
): SafeParseResult<MysqlUpdatePlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlUpdatePlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlUpdatePlatform' from JSON`,
  );
}

/** @internal */
export const MysqlUpdateSpread$inboundSchema: z.ZodType<
  MysqlUpdateSpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type MysqlUpdateSpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const MysqlUpdateSpread$outboundSchema: z.ZodType<
  MysqlUpdateSpread$Outbound,
  z.ZodTypeDef,
  MysqlUpdateSpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlUpdateSpread$ {
  /** @deprecated use `MysqlUpdateSpread$inboundSchema` instead. */
  export const inboundSchema = MysqlUpdateSpread$inboundSchema;
  /** @deprecated use `MysqlUpdateSpread$outboundSchema` instead. */
  export const outboundSchema = MysqlUpdateSpread$outboundSchema;
  /** @deprecated use `MysqlUpdateSpread$Outbound` instead. */
  export type Outbound = MysqlUpdateSpread$Outbound;
}

export function mysqlUpdateSpreadToJSON(
  mysqlUpdateSpread: MysqlUpdateSpread,
): string {
  return JSON.stringify(
    MysqlUpdateSpread$outboundSchema.parse(mysqlUpdateSpread),
  );
}

export function mysqlUpdateSpreadFromJSON(
  jsonString: string,
): SafeParseResult<MysqlUpdateSpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlUpdateSpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlUpdateSpread' from JSON`,
  );
}

/** @internal */
export const MysqlUpdatePreference$inboundSchema: z.ZodType<
  MysqlUpdatePreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => MysqlUpdateSpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type MysqlUpdatePreference$Outbound = {
  Spread: MysqlUpdateSpread$Outbound;
};

/** @internal */
export const MysqlUpdatePreference$outboundSchema: z.ZodType<
  MysqlUpdatePreference$Outbound,
  z.ZodTypeDef,
  MysqlUpdatePreference
> = z.object({
  spread: z.lazy(() => MysqlUpdateSpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlUpdatePreference$ {
  /** @deprecated use `MysqlUpdatePreference$inboundSchema` instead. */
  export const inboundSchema = MysqlUpdatePreference$inboundSchema;
  /** @deprecated use `MysqlUpdatePreference$outboundSchema` instead. */
  export const outboundSchema = MysqlUpdatePreference$outboundSchema;
  /** @deprecated use `MysqlUpdatePreference$Outbound` instead. */
  export type Outbound = MysqlUpdatePreference$Outbound;
}

export function mysqlUpdatePreferenceToJSON(
  mysqlUpdatePreference: MysqlUpdatePreference,
): string {
  return JSON.stringify(
    MysqlUpdatePreference$outboundSchema.parse(mysqlUpdatePreference),
  );
}

export function mysqlUpdatePreferenceFromJSON(
  jsonString: string,
): SafeParseResult<MysqlUpdatePreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlUpdatePreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlUpdatePreference' from JSON`,
  );
}

/** @internal */
export const MysqlUpdatePlacementSwarm$inboundSchema: z.ZodType<
  MysqlUpdatePlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => MysqlUpdatePlatform$inboundSchema))
    .optional(),
  Preferences: z.array(z.lazy(() => MysqlUpdatePreference$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
    "Preferences": "preferences",
  });
});

/** @internal */
export type MysqlUpdatePlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<MysqlUpdatePlatform$Outbound> | undefined;
  Preferences?: Array<MysqlUpdatePreference$Outbound> | undefined;
};

/** @internal */
export const MysqlUpdatePlacementSwarm$outboundSchema: z.ZodType<
  MysqlUpdatePlacementSwarm$Outbound,
  z.ZodTypeDef,
  MysqlUpdatePlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => MysqlUpdatePlatform$outboundSchema))
    .optional(),
  preferences: z.array(z.lazy(() => MysqlUpdatePreference$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
    preferences: "Preferences",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlUpdatePlacementSwarm$ {
  /** @deprecated use `MysqlUpdatePlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlUpdatePlacementSwarm$inboundSchema;
  /** @deprecated use `MysqlUpdatePlacementSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlUpdatePlacementSwarm$outboundSchema;
  /** @deprecated use `MysqlUpdatePlacementSwarm$Outbound` instead. */
  export type Outbound = MysqlUpdatePlacementSwarm$Outbound;
}

export function mysqlUpdatePlacementSwarmToJSON(
  mysqlUpdatePlacementSwarm: MysqlUpdatePlacementSwarm,
): string {
  return JSON.stringify(
    MysqlUpdatePlacementSwarm$outboundSchema.parse(mysqlUpdatePlacementSwarm),
  );
}

export function mysqlUpdatePlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlUpdatePlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlUpdatePlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlUpdatePlacementSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlUpdateRestartPolicySwarm$inboundSchema: z.ZodType<
  MysqlUpdateRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type MysqlUpdateRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const MysqlUpdateRestartPolicySwarm$outboundSchema: z.ZodType<
  MysqlUpdateRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  MysqlUpdateRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlUpdateRestartPolicySwarm$ {
  /** @deprecated use `MysqlUpdateRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlUpdateRestartPolicySwarm$inboundSchema;
  /** @deprecated use `MysqlUpdateRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlUpdateRestartPolicySwarm$outboundSchema;
  /** @deprecated use `MysqlUpdateRestartPolicySwarm$Outbound` instead. */
  export type Outbound = MysqlUpdateRestartPolicySwarm$Outbound;
}

export function mysqlUpdateRestartPolicySwarmToJSON(
  mysqlUpdateRestartPolicySwarm: MysqlUpdateRestartPolicySwarm,
): string {
  return JSON.stringify(
    MysqlUpdateRestartPolicySwarm$outboundSchema.parse(
      mysqlUpdateRestartPolicySwarm,
    ),
  );
}

export function mysqlUpdateRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlUpdateRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlUpdateRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlUpdateRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const MysqlUpdateRollbackConfigSwarm$inboundSchema: z.ZodType<
  MysqlUpdateRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  MaxFailureRatio: z.number().optional(),
  Monitor: z.number().optional(),
  Order: z.string(),
  Parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    "Delay": "delay",
    "FailureAction": "failureAction",
    "MaxFailureRatio": "maxFailureRatio",
    "Monitor": "monitor",
    "Order": "order",
    "Parallelism": "parallelism",
  });
});

/** @internal */
export type MysqlUpdateRollbackConfigSwarm$Outbound = {
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  MaxFailureRatio?: number | undefined;
  Monitor?: number | undefined;
  Order: string;
  Parallelism: number;
};

/** @internal */
export const MysqlUpdateRollbackConfigSwarm$outboundSchema: z.ZodType<
  MysqlUpdateRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  MysqlUpdateRollbackConfigSwarm
> = z.object({
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  maxFailureRatio: z.number().optional(),
  monitor: z.number().optional(),
  order: z.string(),
  parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    delay: "Delay",
    failureAction: "FailureAction",
    maxFailureRatio: "MaxFailureRatio",
    monitor: "Monitor",
    order: "Order",
    parallelism: "Parallelism",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlUpdateRollbackConfigSwarm$ {
  /** @deprecated use `MysqlUpdateRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlUpdateRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `MysqlUpdateRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlUpdateRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `MysqlUpdateRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = MysqlUpdateRollbackConfigSwarm$Outbound;
}

export function mysqlUpdateRollbackConfigSwarmToJSON(
  mysqlUpdateRollbackConfigSwarm: MysqlUpdateRollbackConfigSwarm,
): string {
  return JSON.stringify(
    MysqlUpdateRollbackConfigSwarm$outboundSchema.parse(
      mysqlUpdateRollbackConfigSwarm,
    ),
  );
}

export function mysqlUpdateRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlUpdateRollbackConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlUpdateRollbackConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlUpdateRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlUpdateUpdateConfigSwarm$inboundSchema: z.ZodType<
  MysqlUpdateUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  MaxFailureRatio: z.number().optional(),
  Monitor: z.number().optional(),
  Order: z.string(),
  Parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    "Delay": "delay",
    "FailureAction": "failureAction",
    "MaxFailureRatio": "maxFailureRatio",
    "Monitor": "monitor",
    "Order": "order",
    "Parallelism": "parallelism",
  });
});

/** @internal */
export type MysqlUpdateUpdateConfigSwarm$Outbound = {
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  MaxFailureRatio?: number | undefined;
  Monitor?: number | undefined;
  Order: string;
  Parallelism: number;
};

/** @internal */
export const MysqlUpdateUpdateConfigSwarm$outboundSchema: z.ZodType<
  MysqlUpdateUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  MysqlUpdateUpdateConfigSwarm
> = z.object({
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  maxFailureRatio: z.number().optional(),
  monitor: z.number().optional(),
  order: z.string(),
  parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    delay: "Delay",
    failureAction: "FailureAction",
    maxFailureRatio: "MaxFailureRatio",
    monitor: "Monitor",
    order: "Order",
    parallelism: "Parallelism",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlUpdateUpdateConfigSwarm$ {
  /** @deprecated use `MysqlUpdateUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlUpdateUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `MysqlUpdateUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlUpdateUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `MysqlUpdateUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = MysqlUpdateUpdateConfigSwarm$Outbound;
}

export function mysqlUpdateUpdateConfigSwarmToJSON(
  mysqlUpdateUpdateConfigSwarm: MysqlUpdateUpdateConfigSwarm,
): string {
  return JSON.stringify(
    MysqlUpdateUpdateConfigSwarm$outboundSchema.parse(
      mysqlUpdateUpdateConfigSwarm,
    ),
  );
}

export function mysqlUpdateUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlUpdateUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlUpdateUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlUpdateUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlUpdateRequest$inboundSchema: z.ZodType<
  MysqlUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string().optional(),
  applicationStatus: MysqlUpdateApplicationStatus$inboundSchema.optional(),
  command: z.nullable(z.string()).optional(),
  cpuLimit: z.nullable(z.string()).optional(),
  cpuReservation: z.nullable(z.string()).optional(),
  createdAt: z.string().optional(),
  databaseName: z.string().optional(),
  databasePassword: z.string().optional(),
  databaseRootPassword: z.string().optional(),
  databaseUser: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  dockerImage: z.string().default("mysql:8"),
  env: z.nullable(z.string()).optional(),
  environmentId: z.string().optional(),
  externalPort: z.nullable(z.number()).optional(),
  healthCheckSwarm: z.nullable(
    z.lazy(() => MysqlUpdateHealthCheckSwarm$inboundSchema),
  ).optional(),
  labelsSwarm: z.nullable(z.record(z.string())).optional(),
  memoryLimit: z.nullable(z.string()).optional(),
  memoryReservation: z.nullable(z.string()).optional(),
  modeSwarm: z.nullable(z.lazy(() => MysqlUpdateModeSwarm$inboundSchema))
    .optional(),
  mysqlId: z.string(),
  name: z.string().optional(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MysqlUpdateNetworkSwarm$inboundSchema)),
  ).optional(),
  placementSwarm: z.nullable(
    z.lazy(() => MysqlUpdatePlacementSwarm$inboundSchema),
  ).optional(),
  replicas: z.number().optional(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MysqlUpdateRestartPolicySwarm$inboundSchema),
  ).optional(),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MysqlUpdateRollbackConfigSwarm$inboundSchema),
  ).optional(),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MysqlUpdateUpdateConfigSwarm$inboundSchema),
  ).optional(),
});

/** @internal */
export type MysqlUpdateRequest$Outbound = {
  appName?: string | undefined;
  applicationStatus?: string | undefined;
  command?: string | null | undefined;
  cpuLimit?: string | null | undefined;
  cpuReservation?: string | null | undefined;
  createdAt?: string | undefined;
  databaseName?: string | undefined;
  databasePassword?: string | undefined;
  databaseRootPassword?: string | undefined;
  databaseUser?: string | undefined;
  description?: string | null | undefined;
  dockerImage: string;
  env?: string | null | undefined;
  environmentId?: string | undefined;
  externalPort?: number | null | undefined;
  healthCheckSwarm?: MysqlUpdateHealthCheckSwarm$Outbound | null | undefined;
  labelsSwarm?: { [k: string]: string } | null | undefined;
  memoryLimit?: string | null | undefined;
  memoryReservation?: string | null | undefined;
  modeSwarm?: MysqlUpdateModeSwarm$Outbound | null | undefined;
  mysqlId: string;
  name?: string | undefined;
  networkSwarm?: Array<MysqlUpdateNetworkSwarm$Outbound> | null | undefined;
  placementSwarm?: MysqlUpdatePlacementSwarm$Outbound | null | undefined;
  replicas?: number | undefined;
  restartPolicySwarm?:
    | MysqlUpdateRestartPolicySwarm$Outbound
    | null
    | undefined;
  rollbackConfigSwarm?:
    | MysqlUpdateRollbackConfigSwarm$Outbound
    | null
    | undefined;
  updateConfigSwarm?: MysqlUpdateUpdateConfigSwarm$Outbound | null | undefined;
};

/** @internal */
export const MysqlUpdateRequest$outboundSchema: z.ZodType<
  MysqlUpdateRequest$Outbound,
  z.ZodTypeDef,
  MysqlUpdateRequest
> = z.object({
  appName: z.string().optional(),
  applicationStatus: MysqlUpdateApplicationStatus$outboundSchema.optional(),
  command: z.nullable(z.string()).optional(),
  cpuLimit: z.nullable(z.string()).optional(),
  cpuReservation: z.nullable(z.string()).optional(),
  createdAt: z.string().optional(),
  databaseName: z.string().optional(),
  databasePassword: z.string().optional(),
  databaseRootPassword: z.string().optional(),
  databaseUser: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  dockerImage: z.string().default("mysql:8"),
  env: z.nullable(z.string()).optional(),
  environmentId: z.string().optional(),
  externalPort: z.nullable(z.number()).optional(),
  healthCheckSwarm: z.nullable(
    z.lazy(() => MysqlUpdateHealthCheckSwarm$outboundSchema),
  ).optional(),
  labelsSwarm: z.nullable(z.record(z.string())).optional(),
  memoryLimit: z.nullable(z.string()).optional(),
  memoryReservation: z.nullable(z.string()).optional(),
  modeSwarm: z.nullable(z.lazy(() => MysqlUpdateModeSwarm$outboundSchema))
    .optional(),
  mysqlId: z.string(),
  name: z.string().optional(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MysqlUpdateNetworkSwarm$outboundSchema)),
  ).optional(),
  placementSwarm: z.nullable(
    z.lazy(() => MysqlUpdatePlacementSwarm$outboundSchema),
  ).optional(),
  replicas: z.number().optional(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MysqlUpdateRestartPolicySwarm$outboundSchema),
  ).optional(),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MysqlUpdateRollbackConfigSwarm$outboundSchema),
  ).optional(),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MysqlUpdateUpdateConfigSwarm$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlUpdateRequest$ {
  /** @deprecated use `MysqlUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = MysqlUpdateRequest$inboundSchema;
  /** @deprecated use `MysqlUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = MysqlUpdateRequest$outboundSchema;
  /** @deprecated use `MysqlUpdateRequest$Outbound` instead. */
  export type Outbound = MysqlUpdateRequest$Outbound;
}

export function mysqlUpdateRequestToJSON(
  mysqlUpdateRequest: MysqlUpdateRequest,
): string {
  return JSON.stringify(
    MysqlUpdateRequest$outboundSchema.parse(mysqlUpdateRequest),
  );
}

export function mysqlUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<MysqlUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlUpdateRequest' from JSON`,
  );
}

/** @internal */
export const MysqlUpdateResponse$inboundSchema: z.ZodType<
  MysqlUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.boolean()]);

/** @internal */
export type MysqlUpdateResponse$Outbound = models.ErrorT$Outbound | boolean;

/** @internal */
export const MysqlUpdateResponse$outboundSchema: z.ZodType<
  MysqlUpdateResponse$Outbound,
  z.ZodTypeDef,
  MysqlUpdateResponse
> = z.union([models.ErrorT$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlUpdateResponse$ {
  /** @deprecated use `MysqlUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = MysqlUpdateResponse$inboundSchema;
  /** @deprecated use `MysqlUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = MysqlUpdateResponse$outboundSchema;
  /** @deprecated use `MysqlUpdateResponse$Outbound` instead. */
  export type Outbound = MysqlUpdateResponse$Outbound;
}

export function mysqlUpdateResponseToJSON(
  mysqlUpdateResponse: MysqlUpdateResponse,
): string {
  return JSON.stringify(
    MysqlUpdateResponse$outboundSchema.parse(mysqlUpdateResponse),
  );
}

export function mysqlUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<MysqlUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlUpdateResponse' from JSON`,
  );
}
