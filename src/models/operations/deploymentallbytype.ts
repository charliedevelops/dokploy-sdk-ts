/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export const DeploymentAllByTypeType = {
  Application: "application",
  Compose: "compose",
  Server: "server",
  Schedule: "schedule",
  PreviewDeployment: "previewDeployment",
  Backup: "backup",
  VolumeBackup: "volumeBackup",
} as const;
export type DeploymentAllByTypeType = ClosedEnum<
  typeof DeploymentAllByTypeType
>;

export type DeploymentAllByTypeRequest = {
  id: string;
  type: DeploymentAllByTypeType;
};

export const DeploymentAllByTypeStatus = {
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type DeploymentAllByTypeStatus = ClosedEnum<
  typeof DeploymentAllByTypeStatus
>;

export type DeploymentAllByTypeResponseBody = {
  applicationId: string | null;
  backupId: string | null;
  composeId: string | null;
  createdAt: string;
  deploymentId: string;
  description: string | null;
  errorMessage: string | null;
  finishedAt: string | null;
  isPreviewDeployment: boolean | null;
  logPath: string;
  pid: string | null;
  previewDeploymentId: string | null;
  rollbackId: string | null;
  scheduleId: string | null;
  serverId: string | null;
  startedAt: string | null;
  status: DeploymentAllByTypeStatus | null;
  title: string;
  volumeBackupId: string | null;
};

export type DeploymentAllByTypeResponse =
  | models.ErrorT
  | Array<DeploymentAllByTypeResponseBody>;

/** @internal */
export const DeploymentAllByTypeType$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentAllByTypeType
> = z.nativeEnum(DeploymentAllByTypeType);

/** @internal */
export const DeploymentAllByTypeType$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentAllByTypeType
> = DeploymentAllByTypeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentAllByTypeType$ {
  /** @deprecated use `DeploymentAllByTypeType$inboundSchema` instead. */
  export const inboundSchema = DeploymentAllByTypeType$inboundSchema;
  /** @deprecated use `DeploymentAllByTypeType$outboundSchema` instead. */
  export const outboundSchema = DeploymentAllByTypeType$outboundSchema;
}

/** @internal */
export const DeploymentAllByTypeRequest$inboundSchema: z.ZodType<
  DeploymentAllByTypeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: DeploymentAllByTypeType$inboundSchema,
});

/** @internal */
export type DeploymentAllByTypeRequest$Outbound = {
  id: string;
  type: string;
};

/** @internal */
export const DeploymentAllByTypeRequest$outboundSchema: z.ZodType<
  DeploymentAllByTypeRequest$Outbound,
  z.ZodTypeDef,
  DeploymentAllByTypeRequest
> = z.object({
  id: z.string(),
  type: DeploymentAllByTypeType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentAllByTypeRequest$ {
  /** @deprecated use `DeploymentAllByTypeRequest$inboundSchema` instead. */
  export const inboundSchema = DeploymentAllByTypeRequest$inboundSchema;
  /** @deprecated use `DeploymentAllByTypeRequest$outboundSchema` instead. */
  export const outboundSchema = DeploymentAllByTypeRequest$outboundSchema;
  /** @deprecated use `DeploymentAllByTypeRequest$Outbound` instead. */
  export type Outbound = DeploymentAllByTypeRequest$Outbound;
}

export function deploymentAllByTypeRequestToJSON(
  deploymentAllByTypeRequest: DeploymentAllByTypeRequest,
): string {
  return JSON.stringify(
    DeploymentAllByTypeRequest$outboundSchema.parse(deploymentAllByTypeRequest),
  );
}

export function deploymentAllByTypeRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentAllByTypeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentAllByTypeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentAllByTypeRequest' from JSON`,
  );
}

/** @internal */
export const DeploymentAllByTypeStatus$inboundSchema: z.ZodNativeEnum<
  typeof DeploymentAllByTypeStatus
> = z.nativeEnum(DeploymentAllByTypeStatus);

/** @internal */
export const DeploymentAllByTypeStatus$outboundSchema: z.ZodNativeEnum<
  typeof DeploymentAllByTypeStatus
> = DeploymentAllByTypeStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentAllByTypeStatus$ {
  /** @deprecated use `DeploymentAllByTypeStatus$inboundSchema` instead. */
  export const inboundSchema = DeploymentAllByTypeStatus$inboundSchema;
  /** @deprecated use `DeploymentAllByTypeStatus$outboundSchema` instead. */
  export const outboundSchema = DeploymentAllByTypeStatus$outboundSchema;
}

/** @internal */
export const DeploymentAllByTypeResponseBody$inboundSchema: z.ZodType<
  DeploymentAllByTypeResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.nullable(z.string()),
  backupId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  createdAt: z.string(),
  deploymentId: z.string(),
  description: z.nullable(z.string()),
  errorMessage: z.nullable(z.string()),
  finishedAt: z.nullable(z.string()),
  isPreviewDeployment: z.nullable(z.boolean()),
  logPath: z.string(),
  pid: z.nullable(z.string()),
  previewDeploymentId: z.nullable(z.string()),
  rollbackId: z.nullable(z.string()),
  scheduleId: z.nullable(z.string()),
  serverId: z.nullable(z.string()),
  startedAt: z.nullable(z.string()),
  status: z.nullable(DeploymentAllByTypeStatus$inboundSchema),
  title: z.string(),
  volumeBackupId: z.nullable(z.string()),
});

/** @internal */
export type DeploymentAllByTypeResponseBody$Outbound = {
  applicationId: string | null;
  backupId: string | null;
  composeId: string | null;
  createdAt: string;
  deploymentId: string;
  description: string | null;
  errorMessage: string | null;
  finishedAt: string | null;
  isPreviewDeployment: boolean | null;
  logPath: string;
  pid: string | null;
  previewDeploymentId: string | null;
  rollbackId: string | null;
  scheduleId: string | null;
  serverId: string | null;
  startedAt: string | null;
  status: string | null;
  title: string;
  volumeBackupId: string | null;
};

/** @internal */
export const DeploymentAllByTypeResponseBody$outboundSchema: z.ZodType<
  DeploymentAllByTypeResponseBody$Outbound,
  z.ZodTypeDef,
  DeploymentAllByTypeResponseBody
> = z.object({
  applicationId: z.nullable(z.string()),
  backupId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  createdAt: z.string(),
  deploymentId: z.string(),
  description: z.nullable(z.string()),
  errorMessage: z.nullable(z.string()),
  finishedAt: z.nullable(z.string()),
  isPreviewDeployment: z.nullable(z.boolean()),
  logPath: z.string(),
  pid: z.nullable(z.string()),
  previewDeploymentId: z.nullable(z.string()),
  rollbackId: z.nullable(z.string()),
  scheduleId: z.nullable(z.string()),
  serverId: z.nullable(z.string()),
  startedAt: z.nullable(z.string()),
  status: z.nullable(DeploymentAllByTypeStatus$outboundSchema),
  title: z.string(),
  volumeBackupId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentAllByTypeResponseBody$ {
  /** @deprecated use `DeploymentAllByTypeResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeploymentAllByTypeResponseBody$inboundSchema;
  /** @deprecated use `DeploymentAllByTypeResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeploymentAllByTypeResponseBody$outboundSchema;
  /** @deprecated use `DeploymentAllByTypeResponseBody$Outbound` instead. */
  export type Outbound = DeploymentAllByTypeResponseBody$Outbound;
}

export function deploymentAllByTypeResponseBodyToJSON(
  deploymentAllByTypeResponseBody: DeploymentAllByTypeResponseBody,
): string {
  return JSON.stringify(
    DeploymentAllByTypeResponseBody$outboundSchema.parse(
      deploymentAllByTypeResponseBody,
    ),
  );
}

export function deploymentAllByTypeResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentAllByTypeResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentAllByTypeResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentAllByTypeResponseBody' from JSON`,
  );
}

/** @internal */
export const DeploymentAllByTypeResponse$inboundSchema: z.ZodType<
  DeploymentAllByTypeResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ErrorT$inboundSchema,
  z.array(z.lazy(() => DeploymentAllByTypeResponseBody$inboundSchema)),
]);

/** @internal */
export type DeploymentAllByTypeResponse$Outbound =
  | models.ErrorT$Outbound
  | Array<DeploymentAllByTypeResponseBody$Outbound>;

/** @internal */
export const DeploymentAllByTypeResponse$outboundSchema: z.ZodType<
  DeploymentAllByTypeResponse$Outbound,
  z.ZodTypeDef,
  DeploymentAllByTypeResponse
> = z.union([
  models.ErrorT$outboundSchema,
  z.array(z.lazy(() => DeploymentAllByTypeResponseBody$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentAllByTypeResponse$ {
  /** @deprecated use `DeploymentAllByTypeResponse$inboundSchema` instead. */
  export const inboundSchema = DeploymentAllByTypeResponse$inboundSchema;
  /** @deprecated use `DeploymentAllByTypeResponse$outboundSchema` instead. */
  export const outboundSchema = DeploymentAllByTypeResponse$outboundSchema;
  /** @deprecated use `DeploymentAllByTypeResponse$Outbound` instead. */
  export type Outbound = DeploymentAllByTypeResponse$Outbound;
}

export function deploymentAllByTypeResponseToJSON(
  deploymentAllByTypeResponse: DeploymentAllByTypeResponse,
): string {
  return JSON.stringify(
    DeploymentAllByTypeResponse$outboundSchema.parse(
      deploymentAllByTypeResponse,
    ),
  );
}

export function deploymentAllByTypeResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentAllByTypeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentAllByTypeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentAllByTypeResponse' from JSON`,
  );
}
