/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AdminSetupMonitoringSecurity = {
  authorization: string;
};

export type AdminSetupMonitoringThresholds = {
  cpu: number;
  memory: number;
};

export type AdminSetupMonitoringServer = {
  refreshRate: number;
  port: number;
  token: string;
  urlCallback: string;
  retentionDays: number;
  cronJob: string;
  thresholds: AdminSetupMonitoringThresholds;
};

export type AdminSetupMonitoringServices = {
  include?: Array<string> | undefined;
  exclude?: Array<string> | undefined;
};

export type AdminSetupMonitoringContainers = {
  refreshRate: number;
  services: AdminSetupMonitoringServices;
};

export type AdminSetupMonitoringMetricsConfig = {
  server: AdminSetupMonitoringServer;
  containers: AdminSetupMonitoringContainers;
};

export type AdminSetupMonitoringRequest = {
  metricsConfig: AdminSetupMonitoringMetricsConfig;
};

/** @internal */
export const AdminSetupMonitoringSecurity$inboundSchema: z.ZodType<
  AdminSetupMonitoringSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type AdminSetupMonitoringSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const AdminSetupMonitoringSecurity$outboundSchema: z.ZodType<
  AdminSetupMonitoringSecurity$Outbound,
  z.ZodTypeDef,
  AdminSetupMonitoringSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AdminSetupMonitoringSecurity$ {
  /** @deprecated use `AdminSetupMonitoringSecurity$inboundSchema` instead. */
  export const inboundSchema = AdminSetupMonitoringSecurity$inboundSchema;
  /** @deprecated use `AdminSetupMonitoringSecurity$outboundSchema` instead. */
  export const outboundSchema = AdminSetupMonitoringSecurity$outboundSchema;
  /** @deprecated use `AdminSetupMonitoringSecurity$Outbound` instead. */
  export type Outbound = AdminSetupMonitoringSecurity$Outbound;
}

export function adminSetupMonitoringSecurityToJSON(
  adminSetupMonitoringSecurity: AdminSetupMonitoringSecurity,
): string {
  return JSON.stringify(
    AdminSetupMonitoringSecurity$outboundSchema.parse(
      adminSetupMonitoringSecurity,
    ),
  );
}

export function adminSetupMonitoringSecurityFromJSON(
  jsonString: string,
): SafeParseResult<AdminSetupMonitoringSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AdminSetupMonitoringSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AdminSetupMonitoringSecurity' from JSON`,
  );
}

/** @internal */
export const AdminSetupMonitoringThresholds$inboundSchema: z.ZodType<
  AdminSetupMonitoringThresholds,
  z.ZodTypeDef,
  unknown
> = z.object({
  cpu: z.number(),
  memory: z.number(),
});

/** @internal */
export type AdminSetupMonitoringThresholds$Outbound = {
  cpu: number;
  memory: number;
};

/** @internal */
export const AdminSetupMonitoringThresholds$outboundSchema: z.ZodType<
  AdminSetupMonitoringThresholds$Outbound,
  z.ZodTypeDef,
  AdminSetupMonitoringThresholds
> = z.object({
  cpu: z.number(),
  memory: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AdminSetupMonitoringThresholds$ {
  /** @deprecated use `AdminSetupMonitoringThresholds$inboundSchema` instead. */
  export const inboundSchema = AdminSetupMonitoringThresholds$inboundSchema;
  /** @deprecated use `AdminSetupMonitoringThresholds$outboundSchema` instead. */
  export const outboundSchema = AdminSetupMonitoringThresholds$outboundSchema;
  /** @deprecated use `AdminSetupMonitoringThresholds$Outbound` instead. */
  export type Outbound = AdminSetupMonitoringThresholds$Outbound;
}

export function adminSetupMonitoringThresholdsToJSON(
  adminSetupMonitoringThresholds: AdminSetupMonitoringThresholds,
): string {
  return JSON.stringify(
    AdminSetupMonitoringThresholds$outboundSchema.parse(
      adminSetupMonitoringThresholds,
    ),
  );
}

export function adminSetupMonitoringThresholdsFromJSON(
  jsonString: string,
): SafeParseResult<AdminSetupMonitoringThresholds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AdminSetupMonitoringThresholds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AdminSetupMonitoringThresholds' from JSON`,
  );
}

/** @internal */
export const AdminSetupMonitoringServer$inboundSchema: z.ZodType<
  AdminSetupMonitoringServer,
  z.ZodTypeDef,
  unknown
> = z.object({
  refreshRate: z.number(),
  port: z.number(),
  token: z.string(),
  urlCallback: z.string(),
  retentionDays: z.number(),
  cronJob: z.string(),
  thresholds: z.lazy(() => AdminSetupMonitoringThresholds$inboundSchema),
});

/** @internal */
export type AdminSetupMonitoringServer$Outbound = {
  refreshRate: number;
  port: number;
  token: string;
  urlCallback: string;
  retentionDays: number;
  cronJob: string;
  thresholds: AdminSetupMonitoringThresholds$Outbound;
};

/** @internal */
export const AdminSetupMonitoringServer$outboundSchema: z.ZodType<
  AdminSetupMonitoringServer$Outbound,
  z.ZodTypeDef,
  AdminSetupMonitoringServer
> = z.object({
  refreshRate: z.number(),
  port: z.number(),
  token: z.string(),
  urlCallback: z.string(),
  retentionDays: z.number(),
  cronJob: z.string(),
  thresholds: z.lazy(() => AdminSetupMonitoringThresholds$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AdminSetupMonitoringServer$ {
  /** @deprecated use `AdminSetupMonitoringServer$inboundSchema` instead. */
  export const inboundSchema = AdminSetupMonitoringServer$inboundSchema;
  /** @deprecated use `AdminSetupMonitoringServer$outboundSchema` instead. */
  export const outboundSchema = AdminSetupMonitoringServer$outboundSchema;
  /** @deprecated use `AdminSetupMonitoringServer$Outbound` instead. */
  export type Outbound = AdminSetupMonitoringServer$Outbound;
}

export function adminSetupMonitoringServerToJSON(
  adminSetupMonitoringServer: AdminSetupMonitoringServer,
): string {
  return JSON.stringify(
    AdminSetupMonitoringServer$outboundSchema.parse(adminSetupMonitoringServer),
  );
}

export function adminSetupMonitoringServerFromJSON(
  jsonString: string,
): SafeParseResult<AdminSetupMonitoringServer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AdminSetupMonitoringServer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AdminSetupMonitoringServer' from JSON`,
  );
}

/** @internal */
export const AdminSetupMonitoringServices$inboundSchema: z.ZodType<
  AdminSetupMonitoringServices,
  z.ZodTypeDef,
  unknown
> = z.object({
  include: z.array(z.string()).optional(),
  exclude: z.array(z.string()).optional(),
});

/** @internal */
export type AdminSetupMonitoringServices$Outbound = {
  include?: Array<string> | undefined;
  exclude?: Array<string> | undefined;
};

/** @internal */
export const AdminSetupMonitoringServices$outboundSchema: z.ZodType<
  AdminSetupMonitoringServices$Outbound,
  z.ZodTypeDef,
  AdminSetupMonitoringServices
> = z.object({
  include: z.array(z.string()).optional(),
  exclude: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AdminSetupMonitoringServices$ {
  /** @deprecated use `AdminSetupMonitoringServices$inboundSchema` instead. */
  export const inboundSchema = AdminSetupMonitoringServices$inboundSchema;
  /** @deprecated use `AdminSetupMonitoringServices$outboundSchema` instead. */
  export const outboundSchema = AdminSetupMonitoringServices$outboundSchema;
  /** @deprecated use `AdminSetupMonitoringServices$Outbound` instead. */
  export type Outbound = AdminSetupMonitoringServices$Outbound;
}

export function adminSetupMonitoringServicesToJSON(
  adminSetupMonitoringServices: AdminSetupMonitoringServices,
): string {
  return JSON.stringify(
    AdminSetupMonitoringServices$outboundSchema.parse(
      adminSetupMonitoringServices,
    ),
  );
}

export function adminSetupMonitoringServicesFromJSON(
  jsonString: string,
): SafeParseResult<AdminSetupMonitoringServices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AdminSetupMonitoringServices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AdminSetupMonitoringServices' from JSON`,
  );
}

/** @internal */
export const AdminSetupMonitoringContainers$inboundSchema: z.ZodType<
  AdminSetupMonitoringContainers,
  z.ZodTypeDef,
  unknown
> = z.object({
  refreshRate: z.number(),
  services: z.lazy(() => AdminSetupMonitoringServices$inboundSchema),
});

/** @internal */
export type AdminSetupMonitoringContainers$Outbound = {
  refreshRate: number;
  services: AdminSetupMonitoringServices$Outbound;
};

/** @internal */
export const AdminSetupMonitoringContainers$outboundSchema: z.ZodType<
  AdminSetupMonitoringContainers$Outbound,
  z.ZodTypeDef,
  AdminSetupMonitoringContainers
> = z.object({
  refreshRate: z.number(),
  services: z.lazy(() => AdminSetupMonitoringServices$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AdminSetupMonitoringContainers$ {
  /** @deprecated use `AdminSetupMonitoringContainers$inboundSchema` instead. */
  export const inboundSchema = AdminSetupMonitoringContainers$inboundSchema;
  /** @deprecated use `AdminSetupMonitoringContainers$outboundSchema` instead. */
  export const outboundSchema = AdminSetupMonitoringContainers$outboundSchema;
  /** @deprecated use `AdminSetupMonitoringContainers$Outbound` instead. */
  export type Outbound = AdminSetupMonitoringContainers$Outbound;
}

export function adminSetupMonitoringContainersToJSON(
  adminSetupMonitoringContainers: AdminSetupMonitoringContainers,
): string {
  return JSON.stringify(
    AdminSetupMonitoringContainers$outboundSchema.parse(
      adminSetupMonitoringContainers,
    ),
  );
}

export function adminSetupMonitoringContainersFromJSON(
  jsonString: string,
): SafeParseResult<AdminSetupMonitoringContainers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AdminSetupMonitoringContainers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AdminSetupMonitoringContainers' from JSON`,
  );
}

/** @internal */
export const AdminSetupMonitoringMetricsConfig$inboundSchema: z.ZodType<
  AdminSetupMonitoringMetricsConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  server: z.lazy(() => AdminSetupMonitoringServer$inboundSchema),
  containers: z.lazy(() => AdminSetupMonitoringContainers$inboundSchema),
});

/** @internal */
export type AdminSetupMonitoringMetricsConfig$Outbound = {
  server: AdminSetupMonitoringServer$Outbound;
  containers: AdminSetupMonitoringContainers$Outbound;
};

/** @internal */
export const AdminSetupMonitoringMetricsConfig$outboundSchema: z.ZodType<
  AdminSetupMonitoringMetricsConfig$Outbound,
  z.ZodTypeDef,
  AdminSetupMonitoringMetricsConfig
> = z.object({
  server: z.lazy(() => AdminSetupMonitoringServer$outboundSchema),
  containers: z.lazy(() => AdminSetupMonitoringContainers$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AdminSetupMonitoringMetricsConfig$ {
  /** @deprecated use `AdminSetupMonitoringMetricsConfig$inboundSchema` instead. */
  export const inboundSchema = AdminSetupMonitoringMetricsConfig$inboundSchema;
  /** @deprecated use `AdminSetupMonitoringMetricsConfig$outboundSchema` instead. */
  export const outboundSchema =
    AdminSetupMonitoringMetricsConfig$outboundSchema;
  /** @deprecated use `AdminSetupMonitoringMetricsConfig$Outbound` instead. */
  export type Outbound = AdminSetupMonitoringMetricsConfig$Outbound;
}

export function adminSetupMonitoringMetricsConfigToJSON(
  adminSetupMonitoringMetricsConfig: AdminSetupMonitoringMetricsConfig,
): string {
  return JSON.stringify(
    AdminSetupMonitoringMetricsConfig$outboundSchema.parse(
      adminSetupMonitoringMetricsConfig,
    ),
  );
}

export function adminSetupMonitoringMetricsConfigFromJSON(
  jsonString: string,
): SafeParseResult<AdminSetupMonitoringMetricsConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AdminSetupMonitoringMetricsConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AdminSetupMonitoringMetricsConfig' from JSON`,
  );
}

/** @internal */
export const AdminSetupMonitoringRequest$inboundSchema: z.ZodType<
  AdminSetupMonitoringRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  metricsConfig: z.lazy(() => AdminSetupMonitoringMetricsConfig$inboundSchema),
});

/** @internal */
export type AdminSetupMonitoringRequest$Outbound = {
  metricsConfig: AdminSetupMonitoringMetricsConfig$Outbound;
};

/** @internal */
export const AdminSetupMonitoringRequest$outboundSchema: z.ZodType<
  AdminSetupMonitoringRequest$Outbound,
  z.ZodTypeDef,
  AdminSetupMonitoringRequest
> = z.object({
  metricsConfig: z.lazy(() => AdminSetupMonitoringMetricsConfig$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AdminSetupMonitoringRequest$ {
  /** @deprecated use `AdminSetupMonitoringRequest$inboundSchema` instead. */
  export const inboundSchema = AdminSetupMonitoringRequest$inboundSchema;
  /** @deprecated use `AdminSetupMonitoringRequest$outboundSchema` instead. */
  export const outboundSchema = AdminSetupMonitoringRequest$outboundSchema;
  /** @deprecated use `AdminSetupMonitoringRequest$Outbound` instead. */
  export type Outbound = AdminSetupMonitoringRequest$Outbound;
}

export function adminSetupMonitoringRequestToJSON(
  adminSetupMonitoringRequest: AdminSetupMonitoringRequest,
): string {
  return JSON.stringify(
    AdminSetupMonitoringRequest$outboundSchema.parse(
      adminSetupMonitoringRequest,
    ),
  );
}

export function adminSetupMonitoringRequestFromJSON(
  jsonString: string,
): SafeParseResult<AdminSetupMonitoringRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AdminSetupMonitoringRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AdminSetupMonitoringRequest' from JSON`,
  );
}
