/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type MongoMoveSecurity = {
  authorization: string;
};

export type MongoMoveRequest = {
  mongoId: string;
  targetEnvironmentId: string;
};

export const MongoMoveApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type MongoMoveApplicationStatus = ClosedEnum<
  typeof MongoMoveApplicationStatus
>;

export type MongoMoveHealthCheckSwarm = {
  test?: Array<string> | undefined;
  interval?: number | undefined;
  timeout?: number | undefined;
  startPeriod?: number | undefined;
  retries?: number | undefined;
};

export type MongoMoveRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type MongoMoveSpread = {
  spreadDescriptor: string;
};

export type MongoMovePreference = {
  spread: MongoMoveSpread;
};

export type MongoMovePlatform = {
  architecture: string;
  os: string;
};

export type MongoMovePlacementSwarm = {
  constraints?: Array<string> | undefined;
  preferences?: Array<MongoMovePreference> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<MongoMovePlatform> | undefined;
};

export type MongoMoveUpdateConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type MongoMoveRollbackConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type MongoMoveReplicated = {
  replicas?: number | undefined;
};

export type MongoMoveGlobal = {};

export type MongoMoveReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type MongoMoveGlobalJob = {};

export type MongoMoveModeSwarm = {
  replicated?: MongoMoveReplicated | undefined;
  global?: MongoMoveGlobal | undefined;
  replicatedJob?: MongoMoveReplicatedJob | undefined;
  globalJob?: MongoMoveGlobalJob | undefined;
};

export type MongoMoveDriverOpts = {};

export type MongoMoveNetworkSwarm = {
  target?: string | undefined;
  aliases?: Array<string> | undefined;
  driverOpts?: MongoMoveDriverOpts | undefined;
};

/**
 * Successful response
 */
export type MongoMoveResponseBody = {
  mongoId: string;
  name: string;
  appName: string;
  description: string | null;
  databaseUser: string;
  databasePassword: string;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  externalPort: number | null;
  applicationStatus: MongoMoveApplicationStatus;
  healthCheckSwarm: MongoMoveHealthCheckSwarm | null;
  restartPolicySwarm: MongoMoveRestartPolicySwarm | null;
  placementSwarm: MongoMovePlacementSwarm | null;
  updateConfigSwarm: MongoMoveUpdateConfigSwarm | null;
  rollbackConfigSwarm: MongoMoveRollbackConfigSwarm | null;
  modeSwarm: MongoMoveModeSwarm | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<MongoMoveNetworkSwarm> | null;
  replicas: number;
  createdAt: string;
  environmentId: string;
  serverId: string | null;
  replicaSets: boolean | null;
};

export type MongoMoveResponse = MongoMoveResponseBody | models.ErrorT;

/** @internal */
export const MongoMoveSecurity$inboundSchema: z.ZodType<
  MongoMoveSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type MongoMoveSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const MongoMoveSecurity$outboundSchema: z.ZodType<
  MongoMoveSecurity$Outbound,
  z.ZodTypeDef,
  MongoMoveSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoMoveSecurity$ {
  /** @deprecated use `MongoMoveSecurity$inboundSchema` instead. */
  export const inboundSchema = MongoMoveSecurity$inboundSchema;
  /** @deprecated use `MongoMoveSecurity$outboundSchema` instead. */
  export const outboundSchema = MongoMoveSecurity$outboundSchema;
  /** @deprecated use `MongoMoveSecurity$Outbound` instead. */
  export type Outbound = MongoMoveSecurity$Outbound;
}

export function mongoMoveSecurityToJSON(
  mongoMoveSecurity: MongoMoveSecurity,
): string {
  return JSON.stringify(
    MongoMoveSecurity$outboundSchema.parse(mongoMoveSecurity),
  );
}

export function mongoMoveSecurityFromJSON(
  jsonString: string,
): SafeParseResult<MongoMoveSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoMoveSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoMoveSecurity' from JSON`,
  );
}

/** @internal */
export const MongoMoveRequest$inboundSchema: z.ZodType<
  MongoMoveRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mongoId: z.string(),
  targetEnvironmentId: z.string(),
});

/** @internal */
export type MongoMoveRequest$Outbound = {
  mongoId: string;
  targetEnvironmentId: string;
};

/** @internal */
export const MongoMoveRequest$outboundSchema: z.ZodType<
  MongoMoveRequest$Outbound,
  z.ZodTypeDef,
  MongoMoveRequest
> = z.object({
  mongoId: z.string(),
  targetEnvironmentId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoMoveRequest$ {
  /** @deprecated use `MongoMoveRequest$inboundSchema` instead. */
  export const inboundSchema = MongoMoveRequest$inboundSchema;
  /** @deprecated use `MongoMoveRequest$outboundSchema` instead. */
  export const outboundSchema = MongoMoveRequest$outboundSchema;
  /** @deprecated use `MongoMoveRequest$Outbound` instead. */
  export type Outbound = MongoMoveRequest$Outbound;
}

export function mongoMoveRequestToJSON(
  mongoMoveRequest: MongoMoveRequest,
): string {
  return JSON.stringify(
    MongoMoveRequest$outboundSchema.parse(mongoMoveRequest),
  );
}

export function mongoMoveRequestFromJSON(
  jsonString: string,
): SafeParseResult<MongoMoveRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoMoveRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoMoveRequest' from JSON`,
  );
}

/** @internal */
export const MongoMoveApplicationStatus$inboundSchema: z.ZodNativeEnum<
  typeof MongoMoveApplicationStatus
> = z.nativeEnum(MongoMoveApplicationStatus);

/** @internal */
export const MongoMoveApplicationStatus$outboundSchema: z.ZodNativeEnum<
  typeof MongoMoveApplicationStatus
> = MongoMoveApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoMoveApplicationStatus$ {
  /** @deprecated use `MongoMoveApplicationStatus$inboundSchema` instead. */
  export const inboundSchema = MongoMoveApplicationStatus$inboundSchema;
  /** @deprecated use `MongoMoveApplicationStatus$outboundSchema` instead. */
  export const outboundSchema = MongoMoveApplicationStatus$outboundSchema;
}

/** @internal */
export const MongoMoveHealthCheckSwarm$inboundSchema: z.ZodType<
  MongoMoveHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Test: z.array(z.string()).optional(),
  Interval: z.number().optional(),
  Timeout: z.number().optional(),
  StartPeriod: z.number().optional(),
  Retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Test": "test",
    "Interval": "interval",
    "Timeout": "timeout",
    "StartPeriod": "startPeriod",
    "Retries": "retries",
  });
});

/** @internal */
export type MongoMoveHealthCheckSwarm$Outbound = {
  Test?: Array<string> | undefined;
  Interval?: number | undefined;
  Timeout?: number | undefined;
  StartPeriod?: number | undefined;
  Retries?: number | undefined;
};

/** @internal */
export const MongoMoveHealthCheckSwarm$outboundSchema: z.ZodType<
  MongoMoveHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  MongoMoveHealthCheckSwarm
> = z.object({
  test: z.array(z.string()).optional(),
  interval: z.number().optional(),
  timeout: z.number().optional(),
  startPeriod: z.number().optional(),
  retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    test: "Test",
    interval: "Interval",
    timeout: "Timeout",
    startPeriod: "StartPeriod",
    retries: "Retries",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoMoveHealthCheckSwarm$ {
  /** @deprecated use `MongoMoveHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoMoveHealthCheckSwarm$inboundSchema;
  /** @deprecated use `MongoMoveHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoMoveHealthCheckSwarm$outboundSchema;
  /** @deprecated use `MongoMoveHealthCheckSwarm$Outbound` instead. */
  export type Outbound = MongoMoveHealthCheckSwarm$Outbound;
}

export function mongoMoveHealthCheckSwarmToJSON(
  mongoMoveHealthCheckSwarm: MongoMoveHealthCheckSwarm,
): string {
  return JSON.stringify(
    MongoMoveHealthCheckSwarm$outboundSchema.parse(mongoMoveHealthCheckSwarm),
  );
}

export function mongoMoveHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoMoveHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoMoveHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoMoveHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const MongoMoveRestartPolicySwarm$inboundSchema: z.ZodType<
  MongoMoveRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type MongoMoveRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const MongoMoveRestartPolicySwarm$outboundSchema: z.ZodType<
  MongoMoveRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  MongoMoveRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoMoveRestartPolicySwarm$ {
  /** @deprecated use `MongoMoveRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema = MongoMoveRestartPolicySwarm$inboundSchema;
  /** @deprecated use `MongoMoveRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema = MongoMoveRestartPolicySwarm$outboundSchema;
  /** @deprecated use `MongoMoveRestartPolicySwarm$Outbound` instead. */
  export type Outbound = MongoMoveRestartPolicySwarm$Outbound;
}

export function mongoMoveRestartPolicySwarmToJSON(
  mongoMoveRestartPolicySwarm: MongoMoveRestartPolicySwarm,
): string {
  return JSON.stringify(
    MongoMoveRestartPolicySwarm$outboundSchema.parse(
      mongoMoveRestartPolicySwarm,
    ),
  );
}

export function mongoMoveRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoMoveRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoMoveRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoMoveRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const MongoMoveSpread$inboundSchema: z.ZodType<
  MongoMoveSpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type MongoMoveSpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const MongoMoveSpread$outboundSchema: z.ZodType<
  MongoMoveSpread$Outbound,
  z.ZodTypeDef,
  MongoMoveSpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoMoveSpread$ {
  /** @deprecated use `MongoMoveSpread$inboundSchema` instead. */
  export const inboundSchema = MongoMoveSpread$inboundSchema;
  /** @deprecated use `MongoMoveSpread$outboundSchema` instead. */
  export const outboundSchema = MongoMoveSpread$outboundSchema;
  /** @deprecated use `MongoMoveSpread$Outbound` instead. */
  export type Outbound = MongoMoveSpread$Outbound;
}

export function mongoMoveSpreadToJSON(
  mongoMoveSpread: MongoMoveSpread,
): string {
  return JSON.stringify(MongoMoveSpread$outboundSchema.parse(mongoMoveSpread));
}

export function mongoMoveSpreadFromJSON(
  jsonString: string,
): SafeParseResult<MongoMoveSpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoMoveSpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoMoveSpread' from JSON`,
  );
}

/** @internal */
export const MongoMovePreference$inboundSchema: z.ZodType<
  MongoMovePreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => MongoMoveSpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type MongoMovePreference$Outbound = {
  Spread: MongoMoveSpread$Outbound;
};

/** @internal */
export const MongoMovePreference$outboundSchema: z.ZodType<
  MongoMovePreference$Outbound,
  z.ZodTypeDef,
  MongoMovePreference
> = z.object({
  spread: z.lazy(() => MongoMoveSpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoMovePreference$ {
  /** @deprecated use `MongoMovePreference$inboundSchema` instead. */
  export const inboundSchema = MongoMovePreference$inboundSchema;
  /** @deprecated use `MongoMovePreference$outboundSchema` instead. */
  export const outboundSchema = MongoMovePreference$outboundSchema;
  /** @deprecated use `MongoMovePreference$Outbound` instead. */
  export type Outbound = MongoMovePreference$Outbound;
}

export function mongoMovePreferenceToJSON(
  mongoMovePreference: MongoMovePreference,
): string {
  return JSON.stringify(
    MongoMovePreference$outboundSchema.parse(mongoMovePreference),
  );
}

export function mongoMovePreferenceFromJSON(
  jsonString: string,
): SafeParseResult<MongoMovePreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoMovePreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoMovePreference' from JSON`,
  );
}

/** @internal */
export const MongoMovePlatform$inboundSchema: z.ZodType<
  MongoMovePlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type MongoMovePlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const MongoMovePlatform$outboundSchema: z.ZodType<
  MongoMovePlatform$Outbound,
  z.ZodTypeDef,
  MongoMovePlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoMovePlatform$ {
  /** @deprecated use `MongoMovePlatform$inboundSchema` instead. */
  export const inboundSchema = MongoMovePlatform$inboundSchema;
  /** @deprecated use `MongoMovePlatform$outboundSchema` instead. */
  export const outboundSchema = MongoMovePlatform$outboundSchema;
  /** @deprecated use `MongoMovePlatform$Outbound` instead. */
  export type Outbound = MongoMovePlatform$Outbound;
}

export function mongoMovePlatformToJSON(
  mongoMovePlatform: MongoMovePlatform,
): string {
  return JSON.stringify(
    MongoMovePlatform$outboundSchema.parse(mongoMovePlatform),
  );
}

export function mongoMovePlatformFromJSON(
  jsonString: string,
): SafeParseResult<MongoMovePlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoMovePlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoMovePlatform' from JSON`,
  );
}

/** @internal */
export const MongoMovePlacementSwarm$inboundSchema: z.ZodType<
  MongoMovePlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  Preferences: z.array(z.lazy(() => MongoMovePreference$inboundSchema))
    .optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => MongoMovePlatform$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "Preferences": "preferences",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
  });
});

/** @internal */
export type MongoMovePlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  Preferences?: Array<MongoMovePreference$Outbound> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<MongoMovePlatform$Outbound> | undefined;
};

/** @internal */
export const MongoMovePlacementSwarm$outboundSchema: z.ZodType<
  MongoMovePlacementSwarm$Outbound,
  z.ZodTypeDef,
  MongoMovePlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  preferences: z.array(z.lazy(() => MongoMovePreference$outboundSchema))
    .optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => MongoMovePlatform$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    preferences: "Preferences",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoMovePlacementSwarm$ {
  /** @deprecated use `MongoMovePlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoMovePlacementSwarm$inboundSchema;
  /** @deprecated use `MongoMovePlacementSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoMovePlacementSwarm$outboundSchema;
  /** @deprecated use `MongoMovePlacementSwarm$Outbound` instead. */
  export type Outbound = MongoMovePlacementSwarm$Outbound;
}

export function mongoMovePlacementSwarmToJSON(
  mongoMovePlacementSwarm: MongoMovePlacementSwarm,
): string {
  return JSON.stringify(
    MongoMovePlacementSwarm$outboundSchema.parse(mongoMovePlacementSwarm),
  );
}

export function mongoMovePlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoMovePlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoMovePlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoMovePlacementSwarm' from JSON`,
  );
}

/** @internal */
export const MongoMoveUpdateConfigSwarm$inboundSchema: z.ZodType<
  MongoMoveUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type MongoMoveUpdateConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const MongoMoveUpdateConfigSwarm$outboundSchema: z.ZodType<
  MongoMoveUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  MongoMoveUpdateConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoMoveUpdateConfigSwarm$ {
  /** @deprecated use `MongoMoveUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoMoveUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `MongoMoveUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoMoveUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `MongoMoveUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = MongoMoveUpdateConfigSwarm$Outbound;
}

export function mongoMoveUpdateConfigSwarmToJSON(
  mongoMoveUpdateConfigSwarm: MongoMoveUpdateConfigSwarm,
): string {
  return JSON.stringify(
    MongoMoveUpdateConfigSwarm$outboundSchema.parse(mongoMoveUpdateConfigSwarm),
  );
}

export function mongoMoveUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoMoveUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoMoveUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoMoveUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MongoMoveRollbackConfigSwarm$inboundSchema: z.ZodType<
  MongoMoveRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type MongoMoveRollbackConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const MongoMoveRollbackConfigSwarm$outboundSchema: z.ZodType<
  MongoMoveRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  MongoMoveRollbackConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoMoveRollbackConfigSwarm$ {
  /** @deprecated use `MongoMoveRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoMoveRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `MongoMoveRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoMoveRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `MongoMoveRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = MongoMoveRollbackConfigSwarm$Outbound;
}

export function mongoMoveRollbackConfigSwarmToJSON(
  mongoMoveRollbackConfigSwarm: MongoMoveRollbackConfigSwarm,
): string {
  return JSON.stringify(
    MongoMoveRollbackConfigSwarm$outboundSchema.parse(
      mongoMoveRollbackConfigSwarm,
    ),
  );
}

export function mongoMoveRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoMoveRollbackConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoMoveRollbackConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoMoveRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MongoMoveReplicated$inboundSchema: z.ZodType<
  MongoMoveReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type MongoMoveReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const MongoMoveReplicated$outboundSchema: z.ZodType<
  MongoMoveReplicated$Outbound,
  z.ZodTypeDef,
  MongoMoveReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoMoveReplicated$ {
  /** @deprecated use `MongoMoveReplicated$inboundSchema` instead. */
  export const inboundSchema = MongoMoveReplicated$inboundSchema;
  /** @deprecated use `MongoMoveReplicated$outboundSchema` instead. */
  export const outboundSchema = MongoMoveReplicated$outboundSchema;
  /** @deprecated use `MongoMoveReplicated$Outbound` instead. */
  export type Outbound = MongoMoveReplicated$Outbound;
}

export function mongoMoveReplicatedToJSON(
  mongoMoveReplicated: MongoMoveReplicated,
): string {
  return JSON.stringify(
    MongoMoveReplicated$outboundSchema.parse(mongoMoveReplicated),
  );
}

export function mongoMoveReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<MongoMoveReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoMoveReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoMoveReplicated' from JSON`,
  );
}

/** @internal */
export const MongoMoveGlobal$inboundSchema: z.ZodType<
  MongoMoveGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MongoMoveGlobal$Outbound = {};

/** @internal */
export const MongoMoveGlobal$outboundSchema: z.ZodType<
  MongoMoveGlobal$Outbound,
  z.ZodTypeDef,
  MongoMoveGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoMoveGlobal$ {
  /** @deprecated use `MongoMoveGlobal$inboundSchema` instead. */
  export const inboundSchema = MongoMoveGlobal$inboundSchema;
  /** @deprecated use `MongoMoveGlobal$outboundSchema` instead. */
  export const outboundSchema = MongoMoveGlobal$outboundSchema;
  /** @deprecated use `MongoMoveGlobal$Outbound` instead. */
  export type Outbound = MongoMoveGlobal$Outbound;
}

export function mongoMoveGlobalToJSON(
  mongoMoveGlobal: MongoMoveGlobal,
): string {
  return JSON.stringify(MongoMoveGlobal$outboundSchema.parse(mongoMoveGlobal));
}

export function mongoMoveGlobalFromJSON(
  jsonString: string,
): SafeParseResult<MongoMoveGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoMoveGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoMoveGlobal' from JSON`,
  );
}

/** @internal */
export const MongoMoveReplicatedJob$inboundSchema: z.ZodType<
  MongoMoveReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type MongoMoveReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const MongoMoveReplicatedJob$outboundSchema: z.ZodType<
  MongoMoveReplicatedJob$Outbound,
  z.ZodTypeDef,
  MongoMoveReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoMoveReplicatedJob$ {
  /** @deprecated use `MongoMoveReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = MongoMoveReplicatedJob$inboundSchema;
  /** @deprecated use `MongoMoveReplicatedJob$outboundSchema` instead. */
  export const outboundSchema = MongoMoveReplicatedJob$outboundSchema;
  /** @deprecated use `MongoMoveReplicatedJob$Outbound` instead. */
  export type Outbound = MongoMoveReplicatedJob$Outbound;
}

export function mongoMoveReplicatedJobToJSON(
  mongoMoveReplicatedJob: MongoMoveReplicatedJob,
): string {
  return JSON.stringify(
    MongoMoveReplicatedJob$outboundSchema.parse(mongoMoveReplicatedJob),
  );
}

export function mongoMoveReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<MongoMoveReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoMoveReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoMoveReplicatedJob' from JSON`,
  );
}

/** @internal */
export const MongoMoveGlobalJob$inboundSchema: z.ZodType<
  MongoMoveGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MongoMoveGlobalJob$Outbound = {};

/** @internal */
export const MongoMoveGlobalJob$outboundSchema: z.ZodType<
  MongoMoveGlobalJob$Outbound,
  z.ZodTypeDef,
  MongoMoveGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoMoveGlobalJob$ {
  /** @deprecated use `MongoMoveGlobalJob$inboundSchema` instead. */
  export const inboundSchema = MongoMoveGlobalJob$inboundSchema;
  /** @deprecated use `MongoMoveGlobalJob$outboundSchema` instead. */
  export const outboundSchema = MongoMoveGlobalJob$outboundSchema;
  /** @deprecated use `MongoMoveGlobalJob$Outbound` instead. */
  export type Outbound = MongoMoveGlobalJob$Outbound;
}

export function mongoMoveGlobalJobToJSON(
  mongoMoveGlobalJob: MongoMoveGlobalJob,
): string {
  return JSON.stringify(
    MongoMoveGlobalJob$outboundSchema.parse(mongoMoveGlobalJob),
  );
}

export function mongoMoveGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<MongoMoveGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoMoveGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoMoveGlobalJob' from JSON`,
  );
}

/** @internal */
export const MongoMoveModeSwarm$inboundSchema: z.ZodType<
  MongoMoveModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicated: z.lazy(() => MongoMoveReplicated$inboundSchema).optional(),
  Global: z.lazy(() => MongoMoveGlobal$inboundSchema).optional(),
  ReplicatedJob: z.lazy(() => MongoMoveReplicatedJob$inboundSchema).optional(),
  GlobalJob: z.lazy(() => MongoMoveGlobalJob$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicated": "replicated",
    "Global": "global",
    "ReplicatedJob": "replicatedJob",
    "GlobalJob": "globalJob",
  });
});

/** @internal */
export type MongoMoveModeSwarm$Outbound = {
  Replicated?: MongoMoveReplicated$Outbound | undefined;
  Global?: MongoMoveGlobal$Outbound | undefined;
  ReplicatedJob?: MongoMoveReplicatedJob$Outbound | undefined;
  GlobalJob?: MongoMoveGlobalJob$Outbound | undefined;
};

/** @internal */
export const MongoMoveModeSwarm$outboundSchema: z.ZodType<
  MongoMoveModeSwarm$Outbound,
  z.ZodTypeDef,
  MongoMoveModeSwarm
> = z.object({
  replicated: z.lazy(() => MongoMoveReplicated$outboundSchema).optional(),
  global: z.lazy(() => MongoMoveGlobal$outboundSchema).optional(),
  replicatedJob: z.lazy(() => MongoMoveReplicatedJob$outboundSchema).optional(),
  globalJob: z.lazy(() => MongoMoveGlobalJob$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    replicated: "Replicated",
    global: "Global",
    replicatedJob: "ReplicatedJob",
    globalJob: "GlobalJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoMoveModeSwarm$ {
  /** @deprecated use `MongoMoveModeSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoMoveModeSwarm$inboundSchema;
  /** @deprecated use `MongoMoveModeSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoMoveModeSwarm$outboundSchema;
  /** @deprecated use `MongoMoveModeSwarm$Outbound` instead. */
  export type Outbound = MongoMoveModeSwarm$Outbound;
}

export function mongoMoveModeSwarmToJSON(
  mongoMoveModeSwarm: MongoMoveModeSwarm,
): string {
  return JSON.stringify(
    MongoMoveModeSwarm$outboundSchema.parse(mongoMoveModeSwarm),
  );
}

export function mongoMoveModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoMoveModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoMoveModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoMoveModeSwarm' from JSON`,
  );
}

/** @internal */
export const MongoMoveDriverOpts$inboundSchema: z.ZodType<
  MongoMoveDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MongoMoveDriverOpts$Outbound = {};

/** @internal */
export const MongoMoveDriverOpts$outboundSchema: z.ZodType<
  MongoMoveDriverOpts$Outbound,
  z.ZodTypeDef,
  MongoMoveDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoMoveDriverOpts$ {
  /** @deprecated use `MongoMoveDriverOpts$inboundSchema` instead. */
  export const inboundSchema = MongoMoveDriverOpts$inboundSchema;
  /** @deprecated use `MongoMoveDriverOpts$outboundSchema` instead. */
  export const outboundSchema = MongoMoveDriverOpts$outboundSchema;
  /** @deprecated use `MongoMoveDriverOpts$Outbound` instead. */
  export type Outbound = MongoMoveDriverOpts$Outbound;
}

export function mongoMoveDriverOptsToJSON(
  mongoMoveDriverOpts: MongoMoveDriverOpts,
): string {
  return JSON.stringify(
    MongoMoveDriverOpts$outboundSchema.parse(mongoMoveDriverOpts),
  );
}

export function mongoMoveDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<MongoMoveDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoMoveDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoMoveDriverOpts' from JSON`,
  );
}

/** @internal */
export const MongoMoveNetworkSwarm$inboundSchema: z.ZodType<
  MongoMoveNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Target: z.string().optional(),
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => MongoMoveDriverOpts$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Target": "target",
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
  });
});

/** @internal */
export type MongoMoveNetworkSwarm$Outbound = {
  Target?: string | undefined;
  Aliases?: Array<string> | undefined;
  DriverOpts?: MongoMoveDriverOpts$Outbound | undefined;
};

/** @internal */
export const MongoMoveNetworkSwarm$outboundSchema: z.ZodType<
  MongoMoveNetworkSwarm$Outbound,
  z.ZodTypeDef,
  MongoMoveNetworkSwarm
> = z.object({
  target: z.string().optional(),
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => MongoMoveDriverOpts$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    target: "Target",
    aliases: "Aliases",
    driverOpts: "DriverOpts",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoMoveNetworkSwarm$ {
  /** @deprecated use `MongoMoveNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoMoveNetworkSwarm$inboundSchema;
  /** @deprecated use `MongoMoveNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoMoveNetworkSwarm$outboundSchema;
  /** @deprecated use `MongoMoveNetworkSwarm$Outbound` instead. */
  export type Outbound = MongoMoveNetworkSwarm$Outbound;
}

export function mongoMoveNetworkSwarmToJSON(
  mongoMoveNetworkSwarm: MongoMoveNetworkSwarm,
): string {
  return JSON.stringify(
    MongoMoveNetworkSwarm$outboundSchema.parse(mongoMoveNetworkSwarm),
  );
}

export function mongoMoveNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoMoveNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoMoveNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoMoveNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const MongoMoveResponseBody$inboundSchema: z.ZodType<
  MongoMoveResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  mongoId: z.string(),
  name: z.string(),
  appName: z.string(),
  description: z.nullable(z.string()),
  databaseUser: z.string(),
  databasePassword: z.string(),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  applicationStatus: MongoMoveApplicationStatus$inboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => MongoMoveHealthCheckSwarm$inboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MongoMoveRestartPolicySwarm$inboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => MongoMovePlacementSwarm$inboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MongoMoveUpdateConfigSwarm$inboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MongoMoveRollbackConfigSwarm$inboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => MongoMoveModeSwarm$inboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MongoMoveNetworkSwarm$inboundSchema)),
  ),
  replicas: z.number(),
  createdAt: z.string(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
  replicaSets: z.nullable(z.boolean()),
});

/** @internal */
export type MongoMoveResponseBody$Outbound = {
  mongoId: string;
  name: string;
  appName: string;
  description: string | null;
  databaseUser: string;
  databasePassword: string;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  externalPort: number | null;
  applicationStatus: string;
  healthCheckSwarm: MongoMoveHealthCheckSwarm$Outbound | null;
  restartPolicySwarm: MongoMoveRestartPolicySwarm$Outbound | null;
  placementSwarm: MongoMovePlacementSwarm$Outbound | null;
  updateConfigSwarm: MongoMoveUpdateConfigSwarm$Outbound | null;
  rollbackConfigSwarm: MongoMoveRollbackConfigSwarm$Outbound | null;
  modeSwarm: MongoMoveModeSwarm$Outbound | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<MongoMoveNetworkSwarm$Outbound> | null;
  replicas: number;
  createdAt: string;
  environmentId: string;
  serverId: string | null;
  replicaSets: boolean | null;
};

/** @internal */
export const MongoMoveResponseBody$outboundSchema: z.ZodType<
  MongoMoveResponseBody$Outbound,
  z.ZodTypeDef,
  MongoMoveResponseBody
> = z.object({
  mongoId: z.string(),
  name: z.string(),
  appName: z.string(),
  description: z.nullable(z.string()),
  databaseUser: z.string(),
  databasePassword: z.string(),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  applicationStatus: MongoMoveApplicationStatus$outboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => MongoMoveHealthCheckSwarm$outboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MongoMoveRestartPolicySwarm$outboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => MongoMovePlacementSwarm$outboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MongoMoveUpdateConfigSwarm$outboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MongoMoveRollbackConfigSwarm$outboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => MongoMoveModeSwarm$outboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MongoMoveNetworkSwarm$outboundSchema)),
  ),
  replicas: z.number(),
  createdAt: z.string(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
  replicaSets: z.nullable(z.boolean()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoMoveResponseBody$ {
  /** @deprecated use `MongoMoveResponseBody$inboundSchema` instead. */
  export const inboundSchema = MongoMoveResponseBody$inboundSchema;
  /** @deprecated use `MongoMoveResponseBody$outboundSchema` instead. */
  export const outboundSchema = MongoMoveResponseBody$outboundSchema;
  /** @deprecated use `MongoMoveResponseBody$Outbound` instead. */
  export type Outbound = MongoMoveResponseBody$Outbound;
}

export function mongoMoveResponseBodyToJSON(
  mongoMoveResponseBody: MongoMoveResponseBody,
): string {
  return JSON.stringify(
    MongoMoveResponseBody$outboundSchema.parse(mongoMoveResponseBody),
  );
}

export function mongoMoveResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<MongoMoveResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoMoveResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoMoveResponseBody' from JSON`,
  );
}

/** @internal */
export const MongoMoveResponse$inboundSchema: z.ZodType<
  MongoMoveResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => MongoMoveResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type MongoMoveResponse$Outbound =
  | MongoMoveResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const MongoMoveResponse$outboundSchema: z.ZodType<
  MongoMoveResponse$Outbound,
  z.ZodTypeDef,
  MongoMoveResponse
> = z.union([
  z.lazy(() => MongoMoveResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoMoveResponse$ {
  /** @deprecated use `MongoMoveResponse$inboundSchema` instead. */
  export const inboundSchema = MongoMoveResponse$inboundSchema;
  /** @deprecated use `MongoMoveResponse$outboundSchema` instead. */
  export const outboundSchema = MongoMoveResponse$outboundSchema;
  /** @deprecated use `MongoMoveResponse$Outbound` instead. */
  export type Outbound = MongoMoveResponse$Outbound;
}

export function mongoMoveResponseToJSON(
  mongoMoveResponse: MongoMoveResponse,
): string {
  return JSON.stringify(
    MongoMoveResponse$outboundSchema.parse(mongoMoveResponse),
  );
}

export function mongoMoveResponseFromJSON(
  jsonString: string,
): SafeParseResult<MongoMoveResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoMoveResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoMoveResponse' from JSON`,
  );
}
