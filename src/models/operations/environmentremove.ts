/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type EnvironmentRemoveSecurity = {
  authorization: string;
};

export type EnvironmentRemoveRequest = {
  environmentId: string;
};

/**
 * Successful response
 */
export type EnvironmentRemoveResponseBody = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
};

export type EnvironmentRemoveResponse =
  | EnvironmentRemoveResponseBody
  | models.ErrorT;

/** @internal */
export const EnvironmentRemoveSecurity$inboundSchema: z.ZodType<
  EnvironmentRemoveSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type EnvironmentRemoveSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const EnvironmentRemoveSecurity$outboundSchema: z.ZodType<
  EnvironmentRemoveSecurity$Outbound,
  z.ZodTypeDef,
  EnvironmentRemoveSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentRemoveSecurity$ {
  /** @deprecated use `EnvironmentRemoveSecurity$inboundSchema` instead. */
  export const inboundSchema = EnvironmentRemoveSecurity$inboundSchema;
  /** @deprecated use `EnvironmentRemoveSecurity$outboundSchema` instead. */
  export const outboundSchema = EnvironmentRemoveSecurity$outboundSchema;
  /** @deprecated use `EnvironmentRemoveSecurity$Outbound` instead. */
  export type Outbound = EnvironmentRemoveSecurity$Outbound;
}

export function environmentRemoveSecurityToJSON(
  environmentRemoveSecurity: EnvironmentRemoveSecurity,
): string {
  return JSON.stringify(
    EnvironmentRemoveSecurity$outboundSchema.parse(environmentRemoveSecurity),
  );
}

export function environmentRemoveSecurityFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentRemoveSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentRemoveSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentRemoveSecurity' from JSON`,
  );
}

/** @internal */
export const EnvironmentRemoveRequest$inboundSchema: z.ZodType<
  EnvironmentRemoveRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  environmentId: z.string(),
});

/** @internal */
export type EnvironmentRemoveRequest$Outbound = {
  environmentId: string;
};

/** @internal */
export const EnvironmentRemoveRequest$outboundSchema: z.ZodType<
  EnvironmentRemoveRequest$Outbound,
  z.ZodTypeDef,
  EnvironmentRemoveRequest
> = z.object({
  environmentId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentRemoveRequest$ {
  /** @deprecated use `EnvironmentRemoveRequest$inboundSchema` instead. */
  export const inboundSchema = EnvironmentRemoveRequest$inboundSchema;
  /** @deprecated use `EnvironmentRemoveRequest$outboundSchema` instead. */
  export const outboundSchema = EnvironmentRemoveRequest$outboundSchema;
  /** @deprecated use `EnvironmentRemoveRequest$Outbound` instead. */
  export type Outbound = EnvironmentRemoveRequest$Outbound;
}

export function environmentRemoveRequestToJSON(
  environmentRemoveRequest: EnvironmentRemoveRequest,
): string {
  return JSON.stringify(
    EnvironmentRemoveRequest$outboundSchema.parse(environmentRemoveRequest),
  );
}

export function environmentRemoveRequestFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentRemoveRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentRemoveRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentRemoveRequest' from JSON`,
  );
}

/** @internal */
export const EnvironmentRemoveResponseBody$inboundSchema: z.ZodType<
  EnvironmentRemoveResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
});

/** @internal */
export type EnvironmentRemoveResponseBody$Outbound = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
};

/** @internal */
export const EnvironmentRemoveResponseBody$outboundSchema: z.ZodType<
  EnvironmentRemoveResponseBody$Outbound,
  z.ZodTypeDef,
  EnvironmentRemoveResponseBody
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentRemoveResponseBody$ {
  /** @deprecated use `EnvironmentRemoveResponseBody$inboundSchema` instead. */
  export const inboundSchema = EnvironmentRemoveResponseBody$inboundSchema;
  /** @deprecated use `EnvironmentRemoveResponseBody$outboundSchema` instead. */
  export const outboundSchema = EnvironmentRemoveResponseBody$outboundSchema;
  /** @deprecated use `EnvironmentRemoveResponseBody$Outbound` instead. */
  export type Outbound = EnvironmentRemoveResponseBody$Outbound;
}

export function environmentRemoveResponseBodyToJSON(
  environmentRemoveResponseBody: EnvironmentRemoveResponseBody,
): string {
  return JSON.stringify(
    EnvironmentRemoveResponseBody$outboundSchema.parse(
      environmentRemoveResponseBody,
    ),
  );
}

export function environmentRemoveResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentRemoveResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentRemoveResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentRemoveResponseBody' from JSON`,
  );
}

/** @internal */
export const EnvironmentRemoveResponse$inboundSchema: z.ZodType<
  EnvironmentRemoveResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => EnvironmentRemoveResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type EnvironmentRemoveResponse$Outbound =
  | EnvironmentRemoveResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const EnvironmentRemoveResponse$outboundSchema: z.ZodType<
  EnvironmentRemoveResponse$Outbound,
  z.ZodTypeDef,
  EnvironmentRemoveResponse
> = z.union([
  z.lazy(() => EnvironmentRemoveResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentRemoveResponse$ {
  /** @deprecated use `EnvironmentRemoveResponse$inboundSchema` instead. */
  export const inboundSchema = EnvironmentRemoveResponse$inboundSchema;
  /** @deprecated use `EnvironmentRemoveResponse$outboundSchema` instead. */
  export const outboundSchema = EnvironmentRemoveResponse$outboundSchema;
  /** @deprecated use `EnvironmentRemoveResponse$Outbound` instead. */
  export type Outbound = EnvironmentRemoveResponse$Outbound;
}

export function environmentRemoveResponseToJSON(
  environmentRemoveResponse: EnvironmentRemoveResponse,
): string {
  return JSON.stringify(
    EnvironmentRemoveResponse$outboundSchema.parse(environmentRemoveResponse),
  );
}

export function environmentRemoveResponseFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentRemoveResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentRemoveResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentRemoveResponse' from JSON`,
  );
}
