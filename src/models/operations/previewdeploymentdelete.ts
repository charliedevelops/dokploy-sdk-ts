/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PreviewDeploymentDeleteSecurity = {
  authorization: string;
};

export type PreviewDeploymentDeleteRequest = {
  previewDeploymentId: string;
};

export type PreviewDeploymentDeleteResponse = models.ErrorT | boolean;

/** @internal */
export const PreviewDeploymentDeleteSecurity$inboundSchema: z.ZodType<
  PreviewDeploymentDeleteSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type PreviewDeploymentDeleteSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const PreviewDeploymentDeleteSecurity$outboundSchema: z.ZodType<
  PreviewDeploymentDeleteSecurity$Outbound,
  z.ZodTypeDef,
  PreviewDeploymentDeleteSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewDeploymentDeleteSecurity$ {
  /** @deprecated use `PreviewDeploymentDeleteSecurity$inboundSchema` instead. */
  export const inboundSchema = PreviewDeploymentDeleteSecurity$inboundSchema;
  /** @deprecated use `PreviewDeploymentDeleteSecurity$outboundSchema` instead. */
  export const outboundSchema = PreviewDeploymentDeleteSecurity$outboundSchema;
  /** @deprecated use `PreviewDeploymentDeleteSecurity$Outbound` instead. */
  export type Outbound = PreviewDeploymentDeleteSecurity$Outbound;
}

export function previewDeploymentDeleteSecurityToJSON(
  previewDeploymentDeleteSecurity: PreviewDeploymentDeleteSecurity,
): string {
  return JSON.stringify(
    PreviewDeploymentDeleteSecurity$outboundSchema.parse(
      previewDeploymentDeleteSecurity,
    ),
  );
}

export function previewDeploymentDeleteSecurityFromJSON(
  jsonString: string,
): SafeParseResult<PreviewDeploymentDeleteSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewDeploymentDeleteSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewDeploymentDeleteSecurity' from JSON`,
  );
}

/** @internal */
export const PreviewDeploymentDeleteRequest$inboundSchema: z.ZodType<
  PreviewDeploymentDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  previewDeploymentId: z.string(),
});

/** @internal */
export type PreviewDeploymentDeleteRequest$Outbound = {
  previewDeploymentId: string;
};

/** @internal */
export const PreviewDeploymentDeleteRequest$outboundSchema: z.ZodType<
  PreviewDeploymentDeleteRequest$Outbound,
  z.ZodTypeDef,
  PreviewDeploymentDeleteRequest
> = z.object({
  previewDeploymentId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewDeploymentDeleteRequest$ {
  /** @deprecated use `PreviewDeploymentDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = PreviewDeploymentDeleteRequest$inboundSchema;
  /** @deprecated use `PreviewDeploymentDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = PreviewDeploymentDeleteRequest$outboundSchema;
  /** @deprecated use `PreviewDeploymentDeleteRequest$Outbound` instead. */
  export type Outbound = PreviewDeploymentDeleteRequest$Outbound;
}

export function previewDeploymentDeleteRequestToJSON(
  previewDeploymentDeleteRequest: PreviewDeploymentDeleteRequest,
): string {
  return JSON.stringify(
    PreviewDeploymentDeleteRequest$outboundSchema.parse(
      previewDeploymentDeleteRequest,
    ),
  );
}

export function previewDeploymentDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<PreviewDeploymentDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewDeploymentDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewDeploymentDeleteRequest' from JSON`,
  );
}

/** @internal */
export const PreviewDeploymentDeleteResponse$inboundSchema: z.ZodType<
  PreviewDeploymentDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.boolean()]);

/** @internal */
export type PreviewDeploymentDeleteResponse$Outbound =
  | models.ErrorT$Outbound
  | boolean;

/** @internal */
export const PreviewDeploymentDeleteResponse$outboundSchema: z.ZodType<
  PreviewDeploymentDeleteResponse$Outbound,
  z.ZodTypeDef,
  PreviewDeploymentDeleteResponse
> = z.union([models.ErrorT$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewDeploymentDeleteResponse$ {
  /** @deprecated use `PreviewDeploymentDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = PreviewDeploymentDeleteResponse$inboundSchema;
  /** @deprecated use `PreviewDeploymentDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = PreviewDeploymentDeleteResponse$outboundSchema;
  /** @deprecated use `PreviewDeploymentDeleteResponse$Outbound` instead. */
  export type Outbound = PreviewDeploymentDeleteResponse$Outbound;
}

export function previewDeploymentDeleteResponseToJSON(
  previewDeploymentDeleteResponse: PreviewDeploymentDeleteResponse,
): string {
  return JSON.stringify(
    PreviewDeploymentDeleteResponse$outboundSchema.parse(
      previewDeploymentDeleteResponse,
    ),
  );
}

export function previewDeploymentDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<PreviewDeploymentDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewDeploymentDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewDeploymentDeleteResponse' from JSON`,
  );
}
