/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type DomainDeleteSecurity = {
  authorization: string;
};

export type DomainDeleteRequest = {
  domainId: string;
};

export const DomainDeleteDomainType = {
  Compose: "compose",
  Application: "application",
  Preview: "preview",
} as const;
export type DomainDeleteDomainType = ClosedEnum<typeof DomainDeleteDomainType>;

export const DomainDeleteCertificateType = {
  Letsencrypt: "letsencrypt",
  None: "none",
  Custom: "custom",
} as const;
export type DomainDeleteCertificateType = ClosedEnum<
  typeof DomainDeleteCertificateType
>;

/**
 * Successful response
 */
export type DomainDeleteResponseBody = {
  domainId: string;
  host: string;
  https: boolean;
  port: number | null;
  path: string | null;
  serviceName: string | null;
  domainType: DomainDeleteDomainType | null;
  uniqueConfigKey: number;
  createdAt: string;
  composeId: string | null;
  customCertResolver: string | null;
  applicationId: string | null;
  previewDeploymentId: string | null;
  certificateType: DomainDeleteCertificateType;
  internalPath: string | null;
  stripPath: boolean;
};

export type DomainDeleteResponse = DomainDeleteResponseBody | models.ErrorT;

/** @internal */
export const DomainDeleteSecurity$inboundSchema: z.ZodType<
  DomainDeleteSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type DomainDeleteSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const DomainDeleteSecurity$outboundSchema: z.ZodType<
  DomainDeleteSecurity$Outbound,
  z.ZodTypeDef,
  DomainDeleteSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainDeleteSecurity$ {
  /** @deprecated use `DomainDeleteSecurity$inboundSchema` instead. */
  export const inboundSchema = DomainDeleteSecurity$inboundSchema;
  /** @deprecated use `DomainDeleteSecurity$outboundSchema` instead. */
  export const outboundSchema = DomainDeleteSecurity$outboundSchema;
  /** @deprecated use `DomainDeleteSecurity$Outbound` instead. */
  export type Outbound = DomainDeleteSecurity$Outbound;
}

export function domainDeleteSecurityToJSON(
  domainDeleteSecurity: DomainDeleteSecurity,
): string {
  return JSON.stringify(
    DomainDeleteSecurity$outboundSchema.parse(domainDeleteSecurity),
  );
}

export function domainDeleteSecurityFromJSON(
  jsonString: string,
): SafeParseResult<DomainDeleteSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DomainDeleteSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DomainDeleteSecurity' from JSON`,
  );
}

/** @internal */
export const DomainDeleteRequest$inboundSchema: z.ZodType<
  DomainDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  domainId: z.string(),
});

/** @internal */
export type DomainDeleteRequest$Outbound = {
  domainId: string;
};

/** @internal */
export const DomainDeleteRequest$outboundSchema: z.ZodType<
  DomainDeleteRequest$Outbound,
  z.ZodTypeDef,
  DomainDeleteRequest
> = z.object({
  domainId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainDeleteRequest$ {
  /** @deprecated use `DomainDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = DomainDeleteRequest$inboundSchema;
  /** @deprecated use `DomainDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = DomainDeleteRequest$outboundSchema;
  /** @deprecated use `DomainDeleteRequest$Outbound` instead. */
  export type Outbound = DomainDeleteRequest$Outbound;
}

export function domainDeleteRequestToJSON(
  domainDeleteRequest: DomainDeleteRequest,
): string {
  return JSON.stringify(
    DomainDeleteRequest$outboundSchema.parse(domainDeleteRequest),
  );
}

export function domainDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<DomainDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DomainDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DomainDeleteRequest' from JSON`,
  );
}

/** @internal */
export const DomainDeleteDomainType$inboundSchema: z.ZodNativeEnum<
  typeof DomainDeleteDomainType
> = z.nativeEnum(DomainDeleteDomainType);

/** @internal */
export const DomainDeleteDomainType$outboundSchema: z.ZodNativeEnum<
  typeof DomainDeleteDomainType
> = DomainDeleteDomainType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainDeleteDomainType$ {
  /** @deprecated use `DomainDeleteDomainType$inboundSchema` instead. */
  export const inboundSchema = DomainDeleteDomainType$inboundSchema;
  /** @deprecated use `DomainDeleteDomainType$outboundSchema` instead. */
  export const outboundSchema = DomainDeleteDomainType$outboundSchema;
}

/** @internal */
export const DomainDeleteCertificateType$inboundSchema: z.ZodNativeEnum<
  typeof DomainDeleteCertificateType
> = z.nativeEnum(DomainDeleteCertificateType);

/** @internal */
export const DomainDeleteCertificateType$outboundSchema: z.ZodNativeEnum<
  typeof DomainDeleteCertificateType
> = DomainDeleteCertificateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainDeleteCertificateType$ {
  /** @deprecated use `DomainDeleteCertificateType$inboundSchema` instead. */
  export const inboundSchema = DomainDeleteCertificateType$inboundSchema;
  /** @deprecated use `DomainDeleteCertificateType$outboundSchema` instead. */
  export const outboundSchema = DomainDeleteCertificateType$outboundSchema;
}

/** @internal */
export const DomainDeleteResponseBody$inboundSchema: z.ZodType<
  DomainDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  domainId: z.string(),
  host: z.string(),
  https: z.boolean(),
  port: z.nullable(z.number()),
  path: z.nullable(z.string()),
  serviceName: z.nullable(z.string()),
  domainType: z.nullable(DomainDeleteDomainType$inboundSchema),
  uniqueConfigKey: z.number(),
  createdAt: z.string(),
  composeId: z.nullable(z.string()),
  customCertResolver: z.nullable(z.string()),
  applicationId: z.nullable(z.string()),
  previewDeploymentId: z.nullable(z.string()),
  certificateType: DomainDeleteCertificateType$inboundSchema,
  internalPath: z.nullable(z.string()),
  stripPath: z.boolean(),
});

/** @internal */
export type DomainDeleteResponseBody$Outbound = {
  domainId: string;
  host: string;
  https: boolean;
  port: number | null;
  path: string | null;
  serviceName: string | null;
  domainType: string | null;
  uniqueConfigKey: number;
  createdAt: string;
  composeId: string | null;
  customCertResolver: string | null;
  applicationId: string | null;
  previewDeploymentId: string | null;
  certificateType: string;
  internalPath: string | null;
  stripPath: boolean;
};

/** @internal */
export const DomainDeleteResponseBody$outboundSchema: z.ZodType<
  DomainDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  DomainDeleteResponseBody
> = z.object({
  domainId: z.string(),
  host: z.string(),
  https: z.boolean(),
  port: z.nullable(z.number()),
  path: z.nullable(z.string()),
  serviceName: z.nullable(z.string()),
  domainType: z.nullable(DomainDeleteDomainType$outboundSchema),
  uniqueConfigKey: z.number(),
  createdAt: z.string(),
  composeId: z.nullable(z.string()),
  customCertResolver: z.nullable(z.string()),
  applicationId: z.nullable(z.string()),
  previewDeploymentId: z.nullable(z.string()),
  certificateType: DomainDeleteCertificateType$outboundSchema,
  internalPath: z.nullable(z.string()),
  stripPath: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainDeleteResponseBody$ {
  /** @deprecated use `DomainDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema = DomainDeleteResponseBody$inboundSchema;
  /** @deprecated use `DomainDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema = DomainDeleteResponseBody$outboundSchema;
  /** @deprecated use `DomainDeleteResponseBody$Outbound` instead. */
  export type Outbound = DomainDeleteResponseBody$Outbound;
}

export function domainDeleteResponseBodyToJSON(
  domainDeleteResponseBody: DomainDeleteResponseBody,
): string {
  return JSON.stringify(
    DomainDeleteResponseBody$outboundSchema.parse(domainDeleteResponseBody),
  );
}

export function domainDeleteResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DomainDeleteResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DomainDeleteResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DomainDeleteResponseBody' from JSON`,
  );
}

/** @internal */
export const DomainDeleteResponse$inboundSchema: z.ZodType<
  DomainDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DomainDeleteResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type DomainDeleteResponse$Outbound =
  | DomainDeleteResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const DomainDeleteResponse$outboundSchema: z.ZodType<
  DomainDeleteResponse$Outbound,
  z.ZodTypeDef,
  DomainDeleteResponse
> = z.union([
  z.lazy(() => DomainDeleteResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainDeleteResponse$ {
  /** @deprecated use `DomainDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = DomainDeleteResponse$inboundSchema;
  /** @deprecated use `DomainDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = DomainDeleteResponse$outboundSchema;
  /** @deprecated use `DomainDeleteResponse$Outbound` instead. */
  export type Outbound = DomainDeleteResponse$Outbound;
}

export function domainDeleteResponseToJSON(
  domainDeleteResponse: DomainDeleteResponse,
): string {
  return JSON.stringify(
    DomainDeleteResponse$outboundSchema.parse(domainDeleteResponse),
  );
}

export function domainDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<DomainDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DomainDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DomainDeleteResponse' from JSON`,
  );
}
