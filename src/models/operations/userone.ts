/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UserOneSecurity = {
  authorization: string;
};

export type UserOneRequest = {
  userId: string;
};

/** @internal */
export const UserOneSecurity$inboundSchema: z.ZodType<
  UserOneSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type UserOneSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const UserOneSecurity$outboundSchema: z.ZodType<
  UserOneSecurity$Outbound,
  z.ZodTypeDef,
  UserOneSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserOneSecurity$ {
  /** @deprecated use `UserOneSecurity$inboundSchema` instead. */
  export const inboundSchema = UserOneSecurity$inboundSchema;
  /** @deprecated use `UserOneSecurity$outboundSchema` instead. */
  export const outboundSchema = UserOneSecurity$outboundSchema;
  /** @deprecated use `UserOneSecurity$Outbound` instead. */
  export type Outbound = UserOneSecurity$Outbound;
}

export function userOneSecurityToJSON(
  userOneSecurity: UserOneSecurity,
): string {
  return JSON.stringify(UserOneSecurity$outboundSchema.parse(userOneSecurity));
}

export function userOneSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UserOneSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserOneSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserOneSecurity' from JSON`,
  );
}

/** @internal */
export const UserOneRequest$inboundSchema: z.ZodType<
  UserOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  userId: z.string(),
});

/** @internal */
export type UserOneRequest$Outbound = {
  userId: string;
};

/** @internal */
export const UserOneRequest$outboundSchema: z.ZodType<
  UserOneRequest$Outbound,
  z.ZodTypeDef,
  UserOneRequest
> = z.object({
  userId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserOneRequest$ {
  /** @deprecated use `UserOneRequest$inboundSchema` instead. */
  export const inboundSchema = UserOneRequest$inboundSchema;
  /** @deprecated use `UserOneRequest$outboundSchema` instead. */
  export const outboundSchema = UserOneRequest$outboundSchema;
  /** @deprecated use `UserOneRequest$Outbound` instead. */
  export type Outbound = UserOneRequest$Outbound;
}

export function userOneRequestToJSON(userOneRequest: UserOneRequest): string {
  return JSON.stringify(UserOneRequest$outboundSchema.parse(userOneRequest));
}

export function userOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<UserOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserOneRequest' from JSON`,
  );
}
