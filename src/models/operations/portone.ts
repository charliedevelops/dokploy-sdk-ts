/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PortOneSecurity = {
  authorization: string;
};

export type PortOneRequest = {
  portId: string;
};

export const PortOnePublishMode = {
  Ingress: "ingress",
  Host: "host",
} as const;
export type PortOnePublishMode = ClosedEnum<typeof PortOnePublishMode>;

export const PortOneProtocol = {
  Tcp: "tcp",
  Udp: "udp",
} as const;
export type PortOneProtocol = ClosedEnum<typeof PortOneProtocol>;

/**
 * Successful response
 */
export type PortOneResponseBody = {
  portId: string;
  publishedPort: number;
  publishMode: PortOnePublishMode;
  targetPort: number;
  protocol: PortOneProtocol;
  applicationId: string;
};

export type PortOneResponse = PortOneResponseBody | models.ErrorT;

/** @internal */
export const PortOneSecurity$inboundSchema: z.ZodType<
  PortOneSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type PortOneSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const PortOneSecurity$outboundSchema: z.ZodType<
  PortOneSecurity$Outbound,
  z.ZodTypeDef,
  PortOneSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortOneSecurity$ {
  /** @deprecated use `PortOneSecurity$inboundSchema` instead. */
  export const inboundSchema = PortOneSecurity$inboundSchema;
  /** @deprecated use `PortOneSecurity$outboundSchema` instead. */
  export const outboundSchema = PortOneSecurity$outboundSchema;
  /** @deprecated use `PortOneSecurity$Outbound` instead. */
  export type Outbound = PortOneSecurity$Outbound;
}

export function portOneSecurityToJSON(
  portOneSecurity: PortOneSecurity,
): string {
  return JSON.stringify(PortOneSecurity$outboundSchema.parse(portOneSecurity));
}

export function portOneSecurityFromJSON(
  jsonString: string,
): SafeParseResult<PortOneSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PortOneSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PortOneSecurity' from JSON`,
  );
}

/** @internal */
export const PortOneRequest$inboundSchema: z.ZodType<
  PortOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  portId: z.string(),
});

/** @internal */
export type PortOneRequest$Outbound = {
  portId: string;
};

/** @internal */
export const PortOneRequest$outboundSchema: z.ZodType<
  PortOneRequest$Outbound,
  z.ZodTypeDef,
  PortOneRequest
> = z.object({
  portId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortOneRequest$ {
  /** @deprecated use `PortOneRequest$inboundSchema` instead. */
  export const inboundSchema = PortOneRequest$inboundSchema;
  /** @deprecated use `PortOneRequest$outboundSchema` instead. */
  export const outboundSchema = PortOneRequest$outboundSchema;
  /** @deprecated use `PortOneRequest$Outbound` instead. */
  export type Outbound = PortOneRequest$Outbound;
}

export function portOneRequestToJSON(portOneRequest: PortOneRequest): string {
  return JSON.stringify(PortOneRequest$outboundSchema.parse(portOneRequest));
}

export function portOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<PortOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PortOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PortOneRequest' from JSON`,
  );
}

/** @internal */
export const PortOnePublishMode$inboundSchema: z.ZodNativeEnum<
  typeof PortOnePublishMode
> = z.nativeEnum(PortOnePublishMode);

/** @internal */
export const PortOnePublishMode$outboundSchema: z.ZodNativeEnum<
  typeof PortOnePublishMode
> = PortOnePublishMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortOnePublishMode$ {
  /** @deprecated use `PortOnePublishMode$inboundSchema` instead. */
  export const inboundSchema = PortOnePublishMode$inboundSchema;
  /** @deprecated use `PortOnePublishMode$outboundSchema` instead. */
  export const outboundSchema = PortOnePublishMode$outboundSchema;
}

/** @internal */
export const PortOneProtocol$inboundSchema: z.ZodNativeEnum<
  typeof PortOneProtocol
> = z.nativeEnum(PortOneProtocol);

/** @internal */
export const PortOneProtocol$outboundSchema: z.ZodNativeEnum<
  typeof PortOneProtocol
> = PortOneProtocol$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortOneProtocol$ {
  /** @deprecated use `PortOneProtocol$inboundSchema` instead. */
  export const inboundSchema = PortOneProtocol$inboundSchema;
  /** @deprecated use `PortOneProtocol$outboundSchema` instead. */
  export const outboundSchema = PortOneProtocol$outboundSchema;
}

/** @internal */
export const PortOneResponseBody$inboundSchema: z.ZodType<
  PortOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  portId: z.string(),
  publishedPort: z.number(),
  publishMode: PortOnePublishMode$inboundSchema,
  targetPort: z.number(),
  protocol: PortOneProtocol$inboundSchema,
  applicationId: z.string(),
});

/** @internal */
export type PortOneResponseBody$Outbound = {
  portId: string;
  publishedPort: number;
  publishMode: string;
  targetPort: number;
  protocol: string;
  applicationId: string;
};

/** @internal */
export const PortOneResponseBody$outboundSchema: z.ZodType<
  PortOneResponseBody$Outbound,
  z.ZodTypeDef,
  PortOneResponseBody
> = z.object({
  portId: z.string(),
  publishedPort: z.number(),
  publishMode: PortOnePublishMode$outboundSchema,
  targetPort: z.number(),
  protocol: PortOneProtocol$outboundSchema,
  applicationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortOneResponseBody$ {
  /** @deprecated use `PortOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = PortOneResponseBody$inboundSchema;
  /** @deprecated use `PortOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = PortOneResponseBody$outboundSchema;
  /** @deprecated use `PortOneResponseBody$Outbound` instead. */
  export type Outbound = PortOneResponseBody$Outbound;
}

export function portOneResponseBodyToJSON(
  portOneResponseBody: PortOneResponseBody,
): string {
  return JSON.stringify(
    PortOneResponseBody$outboundSchema.parse(portOneResponseBody),
  );
}

export function portOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PortOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PortOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PortOneResponseBody' from JSON`,
  );
}

/** @internal */
export const PortOneResponse$inboundSchema: z.ZodType<
  PortOneResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PortOneResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type PortOneResponse$Outbound =
  | PortOneResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const PortOneResponse$outboundSchema: z.ZodType<
  PortOneResponse$Outbound,
  z.ZodTypeDef,
  PortOneResponse
> = z.union([
  z.lazy(() => PortOneResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortOneResponse$ {
  /** @deprecated use `PortOneResponse$inboundSchema` instead. */
  export const inboundSchema = PortOneResponse$inboundSchema;
  /** @deprecated use `PortOneResponse$outboundSchema` instead. */
  export const outboundSchema = PortOneResponse$outboundSchema;
  /** @deprecated use `PortOneResponse$Outbound` instead. */
  export type Outbound = PortOneResponse$Outbound;
}

export function portOneResponseToJSON(
  portOneResponse: PortOneResponse,
): string {
  return JSON.stringify(PortOneResponse$outboundSchema.parse(portOneResponse));
}

export function portOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<PortOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PortOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PortOneResponse' from JSON`,
  );
}
