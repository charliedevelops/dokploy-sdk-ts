/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type OrganizationDeleteSecurity = {
  authorization: string;
};

export type OrganizationDeleteRequest = {
  organizationId: string;
};

/**
 * Successful response
 */
export type OrganizationDeleteResponseBody = {
  createdAt: Date;
  id: string;
  logo: string | null;
  metadata: string | null;
  name: string;
  ownerId: string;
  slug: string | null;
};

export type OrganizationDeleteResponse =
  | OrganizationDeleteResponseBody
  | models.ErrorT;

/** @internal */
export const OrganizationDeleteSecurity$inboundSchema: z.ZodType<
  OrganizationDeleteSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type OrganizationDeleteSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const OrganizationDeleteSecurity$outboundSchema: z.ZodType<
  OrganizationDeleteSecurity$Outbound,
  z.ZodTypeDef,
  OrganizationDeleteSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationDeleteSecurity$ {
  /** @deprecated use `OrganizationDeleteSecurity$inboundSchema` instead. */
  export const inboundSchema = OrganizationDeleteSecurity$inboundSchema;
  /** @deprecated use `OrganizationDeleteSecurity$outboundSchema` instead. */
  export const outboundSchema = OrganizationDeleteSecurity$outboundSchema;
  /** @deprecated use `OrganizationDeleteSecurity$Outbound` instead. */
  export type Outbound = OrganizationDeleteSecurity$Outbound;
}

export function organizationDeleteSecurityToJSON(
  organizationDeleteSecurity: OrganizationDeleteSecurity,
): string {
  return JSON.stringify(
    OrganizationDeleteSecurity$outboundSchema.parse(organizationDeleteSecurity),
  );
}

export function organizationDeleteSecurityFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationDeleteSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationDeleteSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationDeleteSecurity' from JSON`,
  );
}

/** @internal */
export const OrganizationDeleteRequest$inboundSchema: z.ZodType<
  OrganizationDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organizationId: z.string(),
});

/** @internal */
export type OrganizationDeleteRequest$Outbound = {
  organizationId: string;
};

/** @internal */
export const OrganizationDeleteRequest$outboundSchema: z.ZodType<
  OrganizationDeleteRequest$Outbound,
  z.ZodTypeDef,
  OrganizationDeleteRequest
> = z.object({
  organizationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationDeleteRequest$ {
  /** @deprecated use `OrganizationDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = OrganizationDeleteRequest$inboundSchema;
  /** @deprecated use `OrganizationDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = OrganizationDeleteRequest$outboundSchema;
  /** @deprecated use `OrganizationDeleteRequest$Outbound` instead. */
  export type Outbound = OrganizationDeleteRequest$Outbound;
}

export function organizationDeleteRequestToJSON(
  organizationDeleteRequest: OrganizationDeleteRequest,
): string {
  return JSON.stringify(
    OrganizationDeleteRequest$outboundSchema.parse(organizationDeleteRequest),
  );
}

export function organizationDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationDeleteRequest' from JSON`,
  );
}

/** @internal */
export const OrganizationDeleteResponseBody$inboundSchema: z.ZodType<
  OrganizationDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  id: z.string(),
  logo: z.nullable(z.string()),
  metadata: z.nullable(z.string()),
  name: z.string(),
  ownerId: z.string(),
  slug: z.nullable(z.string()),
});

/** @internal */
export type OrganizationDeleteResponseBody$Outbound = {
  createdAt: string;
  id: string;
  logo: string | null;
  metadata: string | null;
  name: string;
  ownerId: string;
  slug: string | null;
};

/** @internal */
export const OrganizationDeleteResponseBody$outboundSchema: z.ZodType<
  OrganizationDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  OrganizationDeleteResponseBody
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  id: z.string(),
  logo: z.nullable(z.string()),
  metadata: z.nullable(z.string()),
  name: z.string(),
  ownerId: z.string(),
  slug: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationDeleteResponseBody$ {
  /** @deprecated use `OrganizationDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema = OrganizationDeleteResponseBody$inboundSchema;
  /** @deprecated use `OrganizationDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema = OrganizationDeleteResponseBody$outboundSchema;
  /** @deprecated use `OrganizationDeleteResponseBody$Outbound` instead. */
  export type Outbound = OrganizationDeleteResponseBody$Outbound;
}

export function organizationDeleteResponseBodyToJSON(
  organizationDeleteResponseBody: OrganizationDeleteResponseBody,
): string {
  return JSON.stringify(
    OrganizationDeleteResponseBody$outboundSchema.parse(
      organizationDeleteResponseBody,
    ),
  );
}

export function organizationDeleteResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationDeleteResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationDeleteResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationDeleteResponseBody' from JSON`,
  );
}

/** @internal */
export const OrganizationDeleteResponse$inboundSchema: z.ZodType<
  OrganizationDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => OrganizationDeleteResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type OrganizationDeleteResponse$Outbound =
  | OrganizationDeleteResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const OrganizationDeleteResponse$outboundSchema: z.ZodType<
  OrganizationDeleteResponse$Outbound,
  z.ZodTypeDef,
  OrganizationDeleteResponse
> = z.union([
  z.lazy(() => OrganizationDeleteResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationDeleteResponse$ {
  /** @deprecated use `OrganizationDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = OrganizationDeleteResponse$inboundSchema;
  /** @deprecated use `OrganizationDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = OrganizationDeleteResponse$outboundSchema;
  /** @deprecated use `OrganizationDeleteResponse$Outbound` instead. */
  export type Outbound = OrganizationDeleteResponse$Outbound;
}

export function organizationDeleteResponseToJSON(
  organizationDeleteResponse: OrganizationDeleteResponse,
): string {
  return JSON.stringify(
    OrganizationDeleteResponse$outboundSchema.parse(organizationDeleteResponse),
  );
}

export function organizationDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationDeleteResponse' from JSON`,
  );
}
