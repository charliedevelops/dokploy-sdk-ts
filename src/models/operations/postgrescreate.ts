/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PostgresCreateRequest = {
  appName: string;
  databaseName: string;
  databasePassword: string;
  databaseUser: string;
  description?: string | null | undefined;
  dockerImage?: string | undefined;
  environmentId: string;
  name: string;
  serverId?: string | null | undefined;
};

export type PostgresCreateResponse = models.ErrorT | boolean;

/** @internal */
export const PostgresCreateRequest$inboundSchema: z.ZodType<
  PostgresCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  databaseName: z.string(),
  databasePassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()).optional(),
  dockerImage: z.string().default("postgres:15"),
  environmentId: z.string(),
  name: z.string(),
  serverId: z.nullable(z.string()).optional(),
});

/** @internal */
export type PostgresCreateRequest$Outbound = {
  appName: string;
  databaseName: string;
  databasePassword: string;
  databaseUser: string;
  description?: string | null | undefined;
  dockerImage: string;
  environmentId: string;
  name: string;
  serverId?: string | null | undefined;
};

/** @internal */
export const PostgresCreateRequest$outboundSchema: z.ZodType<
  PostgresCreateRequest$Outbound,
  z.ZodTypeDef,
  PostgresCreateRequest
> = z.object({
  appName: z.string(),
  databaseName: z.string(),
  databasePassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()).optional(),
  dockerImage: z.string().default("postgres:15"),
  environmentId: z.string(),
  name: z.string(),
  serverId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresCreateRequest$ {
  /** @deprecated use `PostgresCreateRequest$inboundSchema` instead. */
  export const inboundSchema = PostgresCreateRequest$inboundSchema;
  /** @deprecated use `PostgresCreateRequest$outboundSchema` instead. */
  export const outboundSchema = PostgresCreateRequest$outboundSchema;
  /** @deprecated use `PostgresCreateRequest$Outbound` instead. */
  export type Outbound = PostgresCreateRequest$Outbound;
}

export function postgresCreateRequestToJSON(
  postgresCreateRequest: PostgresCreateRequest,
): string {
  return JSON.stringify(
    PostgresCreateRequest$outboundSchema.parse(postgresCreateRequest),
  );
}

export function postgresCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostgresCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresCreateRequest' from JSON`,
  );
}

/** @internal */
export const PostgresCreateResponse$inboundSchema: z.ZodType<
  PostgresCreateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.boolean()]);

/** @internal */
export type PostgresCreateResponse$Outbound = models.ErrorT$Outbound | boolean;

/** @internal */
export const PostgresCreateResponse$outboundSchema: z.ZodType<
  PostgresCreateResponse$Outbound,
  z.ZodTypeDef,
  PostgresCreateResponse
> = z.union([models.ErrorT$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresCreateResponse$ {
  /** @deprecated use `PostgresCreateResponse$inboundSchema` instead. */
  export const inboundSchema = PostgresCreateResponse$inboundSchema;
  /** @deprecated use `PostgresCreateResponse$outboundSchema` instead. */
  export const outboundSchema = PostgresCreateResponse$outboundSchema;
  /** @deprecated use `PostgresCreateResponse$Outbound` instead. */
  export type Outbound = PostgresCreateResponse$Outbound;
}

export function postgresCreateResponseToJSON(
  postgresCreateResponse: PostgresCreateResponse,
): string {
  return JSON.stringify(
    PostgresCreateResponse$outboundSchema.parse(postgresCreateResponse),
  );
}

export function postgresCreateResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostgresCreateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresCreateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresCreateResponse' from JSON`,
  );
}
