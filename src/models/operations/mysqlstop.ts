/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type MysqlStopSecurity = {
  authorization: string;
};

export type MysqlStopRequest = {
  mysqlId: string;
};

export const MysqlStopApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type MysqlStopApplicationStatus = ClosedEnum<
  typeof MysqlStopApplicationStatus
>;

export type MysqlStopHealthCheckSwarm = {
  test?: Array<string> | undefined;
  interval?: number | undefined;
  timeout?: number | undefined;
  startPeriod?: number | undefined;
  retries?: number | undefined;
};

export type MysqlStopRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type MysqlStopSpread = {
  spreadDescriptor: string;
};

export type MysqlStopPreference = {
  spread: MysqlStopSpread;
};

export type MysqlStopPlatform = {
  architecture: string;
  os: string;
};

export type MysqlStopPlacementSwarm = {
  constraints?: Array<string> | undefined;
  preferences?: Array<MysqlStopPreference> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<MysqlStopPlatform> | undefined;
};

export type MysqlStopUpdateConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type MysqlStopRollbackConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type MysqlStopReplicated = {
  replicas?: number | undefined;
};

export type MysqlStopGlobal = {};

export type MysqlStopReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type MysqlStopGlobalJob = {};

export type MysqlStopModeSwarm = {
  replicated?: MysqlStopReplicated | undefined;
  global?: MysqlStopGlobal | undefined;
  replicatedJob?: MysqlStopReplicatedJob | undefined;
  globalJob?: MysqlStopGlobalJob | undefined;
};

export type MysqlStopDriverOpts = {};

export type MysqlStopNetworkSwarm = {
  target?: string | undefined;
  aliases?: Array<string> | undefined;
  driverOpts?: MysqlStopDriverOpts | undefined;
};

export type MysqlStopProject = {
  projectId: string;
  name: string;
  description: string | null;
  createdAt: string;
  organizationId: string;
  env: string;
};

export type MysqlStopEnvironment = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
  project: MysqlStopProject;
};

export const MysqlStopType = {
  Bind: "bind",
  Volume: "volume",
  File: "file",
} as const;
export type MysqlStopType = ClosedEnum<typeof MysqlStopType>;

export const MysqlStopServiceType = {
  Application: "application",
  Postgres: "postgres",
  Mysql: "mysql",
  Mariadb: "mariadb",
  Mongo: "mongo",
  Redis: "redis",
  Compose: "compose",
} as const;
export type MysqlStopServiceType = ClosedEnum<typeof MysqlStopServiceType>;

export type MysqlStopMount = {
  mountId: string;
  type: MysqlStopType;
  hostPath: string | null;
  volumeName: string | null;
  filePath: string | null;
  content: string | null;
  serviceType: MysqlStopServiceType;
  mountPath: string;
  applicationId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mysqlId: string | null;
  redisId: string | null;
  composeId: string | null;
};

export const MysqlStopServerStatus = {
  Active: "active",
  Inactive: "inactive",
} as const;
export type MysqlStopServerStatus = ClosedEnum<typeof MysqlStopServerStatus>;

export const MysqlStopMetricsConfigEnum = {
  Null: "null",
} as const;
export type MysqlStopMetricsConfigEnum = ClosedEnum<
  typeof MysqlStopMetricsConfigEnum
>;

export type MysqlStopMetricsConfigUnion1 =
  | string
  | number
  | boolean
  | MysqlStopMetricsConfigEnum;

export type MysqlStopMetricsConfigUnion2 =
  | string
  | number
  | boolean
  | MysqlStopMetricsConfigEnum
  | Array<any>
  | { [k: string]: any };

export type MysqlStopServer = {
  serverId: string;
  name: string;
  description: string | null;
  ipAddress: string;
  port: number;
  username: string;
  appName: string;
  enableDockerCleanup: boolean;
  createdAt: string;
  organizationId: string;
  serverStatus: MysqlStopServerStatus;
  command: string;
  sshKeyId: string | null;
  metricsConfig:
    | string
    | number
    | boolean
    | MysqlStopMetricsConfigEnum
    | Array<any>
    | { [k: string]: any };
};

export const MysqlStopBackupType = {
  Database: "database",
  Compose: "compose",
} as const;
export type MysqlStopBackupType = ClosedEnum<typeof MysqlStopBackupType>;

export const MysqlStopDatabaseType = {
  Postgres: "postgres",
  Mariadb: "mariadb",
  Mysql: "mysql",
  Mongo: "mongo",
  WebServer: "web-server",
} as const;
export type MysqlStopDatabaseType = ClosedEnum<typeof MysqlStopDatabaseType>;

export const MysqlStopMetadataEnum = {
  Null: "null",
} as const;
export type MysqlStopMetadataEnum = ClosedEnum<typeof MysqlStopMetadataEnum>;

export type MysqlStopPostgres = {
  databaseUser: string;
};

export type MysqlStopMariadb = {
  databaseUser: string;
  databasePassword: string;
};

export type MysqlStopMongo = {
  databaseUser: string;
  databasePassword: string;
};

export type MysqlStopMysql = {
  databaseRootPassword: string;
};

export type MysqlStopMetadata = {
  postgres?: MysqlStopPostgres | undefined;
  mariadb?: MysqlStopMariadb | undefined;
  mongo?: MysqlStopMongo | undefined;
  mysql?: MysqlStopMysql | undefined;
};

export type MysqlStopMetadataUnion = MysqlStopMetadata | MysqlStopMetadataEnum;

export type MysqlStopBackup = {
  backupId: string;
  appName: string;
  schedule: string;
  enabled: boolean | null;
  database: string;
  prefix: string;
  serviceName: string | null;
  destinationId: string;
  keepLatestCount: number | null;
  backupType: MysqlStopBackupType;
  databaseType: MysqlStopDatabaseType;
  composeId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mysqlId: string | null;
  mongoId: string | null;
  userId: string | null;
  metadata?: MysqlStopMetadata | MysqlStopMetadataEnum | null | undefined;
};

/**
 * Successful response
 */
export type MysqlStopResponseBody = {
  mysqlId: string;
  name: string;
  appName: string;
  description: string | null;
  databaseName: string;
  databaseUser: string;
  databasePassword: string;
  databaseRootPassword: string;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  externalPort: number | null;
  applicationStatus: MysqlStopApplicationStatus;
  healthCheckSwarm: MysqlStopHealthCheckSwarm | null;
  restartPolicySwarm: MysqlStopRestartPolicySwarm | null;
  placementSwarm: MysqlStopPlacementSwarm | null;
  updateConfigSwarm: MysqlStopUpdateConfigSwarm | null;
  rollbackConfigSwarm: MysqlStopRollbackConfigSwarm | null;
  modeSwarm: MysqlStopModeSwarm | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<MysqlStopNetworkSwarm> | null;
  replicas: number;
  createdAt: string;
  environmentId: string;
  serverId: string | null;
  environment: MysqlStopEnvironment;
  mounts: Array<MysqlStopMount>;
  server: MysqlStopServer | null;
  backups: Array<MysqlStopBackup>;
};

export type MysqlStopResponse = MysqlStopResponseBody | models.ErrorT;

/** @internal */
export const MysqlStopSecurity$inboundSchema: z.ZodType<
  MysqlStopSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type MysqlStopSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const MysqlStopSecurity$outboundSchema: z.ZodType<
  MysqlStopSecurity$Outbound,
  z.ZodTypeDef,
  MysqlStopSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopSecurity$ {
  /** @deprecated use `MysqlStopSecurity$inboundSchema` instead. */
  export const inboundSchema = MysqlStopSecurity$inboundSchema;
  /** @deprecated use `MysqlStopSecurity$outboundSchema` instead. */
  export const outboundSchema = MysqlStopSecurity$outboundSchema;
  /** @deprecated use `MysqlStopSecurity$Outbound` instead. */
  export type Outbound = MysqlStopSecurity$Outbound;
}

export function mysqlStopSecurityToJSON(
  mysqlStopSecurity: MysqlStopSecurity,
): string {
  return JSON.stringify(
    MysqlStopSecurity$outboundSchema.parse(mysqlStopSecurity),
  );
}

export function mysqlStopSecurityFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopSecurity' from JSON`,
  );
}

/** @internal */
export const MysqlStopRequest$inboundSchema: z.ZodType<
  MysqlStopRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mysqlId: z.string(),
});

/** @internal */
export type MysqlStopRequest$Outbound = {
  mysqlId: string;
};

/** @internal */
export const MysqlStopRequest$outboundSchema: z.ZodType<
  MysqlStopRequest$Outbound,
  z.ZodTypeDef,
  MysqlStopRequest
> = z.object({
  mysqlId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopRequest$ {
  /** @deprecated use `MysqlStopRequest$inboundSchema` instead. */
  export const inboundSchema = MysqlStopRequest$inboundSchema;
  /** @deprecated use `MysqlStopRequest$outboundSchema` instead. */
  export const outboundSchema = MysqlStopRequest$outboundSchema;
  /** @deprecated use `MysqlStopRequest$Outbound` instead. */
  export type Outbound = MysqlStopRequest$Outbound;
}

export function mysqlStopRequestToJSON(
  mysqlStopRequest: MysqlStopRequest,
): string {
  return JSON.stringify(
    MysqlStopRequest$outboundSchema.parse(mysqlStopRequest),
  );
}

export function mysqlStopRequestFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopRequest' from JSON`,
  );
}

/** @internal */
export const MysqlStopApplicationStatus$inboundSchema: z.ZodNativeEnum<
  typeof MysqlStopApplicationStatus
> = z.nativeEnum(MysqlStopApplicationStatus);

/** @internal */
export const MysqlStopApplicationStatus$outboundSchema: z.ZodNativeEnum<
  typeof MysqlStopApplicationStatus
> = MysqlStopApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopApplicationStatus$ {
  /** @deprecated use `MysqlStopApplicationStatus$inboundSchema` instead. */
  export const inboundSchema = MysqlStopApplicationStatus$inboundSchema;
  /** @deprecated use `MysqlStopApplicationStatus$outboundSchema` instead. */
  export const outboundSchema = MysqlStopApplicationStatus$outboundSchema;
}

/** @internal */
export const MysqlStopHealthCheckSwarm$inboundSchema: z.ZodType<
  MysqlStopHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Test: z.array(z.string()).optional(),
  Interval: z.number().optional(),
  Timeout: z.number().optional(),
  StartPeriod: z.number().optional(),
  Retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Test": "test",
    "Interval": "interval",
    "Timeout": "timeout",
    "StartPeriod": "startPeriod",
    "Retries": "retries",
  });
});

/** @internal */
export type MysqlStopHealthCheckSwarm$Outbound = {
  Test?: Array<string> | undefined;
  Interval?: number | undefined;
  Timeout?: number | undefined;
  StartPeriod?: number | undefined;
  Retries?: number | undefined;
};

/** @internal */
export const MysqlStopHealthCheckSwarm$outboundSchema: z.ZodType<
  MysqlStopHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  MysqlStopHealthCheckSwarm
> = z.object({
  test: z.array(z.string()).optional(),
  interval: z.number().optional(),
  timeout: z.number().optional(),
  startPeriod: z.number().optional(),
  retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    test: "Test",
    interval: "Interval",
    timeout: "Timeout",
    startPeriod: "StartPeriod",
    retries: "Retries",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopHealthCheckSwarm$ {
  /** @deprecated use `MysqlStopHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlStopHealthCheckSwarm$inboundSchema;
  /** @deprecated use `MysqlStopHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlStopHealthCheckSwarm$outboundSchema;
  /** @deprecated use `MysqlStopHealthCheckSwarm$Outbound` instead. */
  export type Outbound = MysqlStopHealthCheckSwarm$Outbound;
}

export function mysqlStopHealthCheckSwarmToJSON(
  mysqlStopHealthCheckSwarm: MysqlStopHealthCheckSwarm,
): string {
  return JSON.stringify(
    MysqlStopHealthCheckSwarm$outboundSchema.parse(mysqlStopHealthCheckSwarm),
  );
}

export function mysqlStopHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlStopRestartPolicySwarm$inboundSchema: z.ZodType<
  MysqlStopRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type MysqlStopRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const MysqlStopRestartPolicySwarm$outboundSchema: z.ZodType<
  MysqlStopRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  MysqlStopRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopRestartPolicySwarm$ {
  /** @deprecated use `MysqlStopRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlStopRestartPolicySwarm$inboundSchema;
  /** @deprecated use `MysqlStopRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlStopRestartPolicySwarm$outboundSchema;
  /** @deprecated use `MysqlStopRestartPolicySwarm$Outbound` instead. */
  export type Outbound = MysqlStopRestartPolicySwarm$Outbound;
}

export function mysqlStopRestartPolicySwarmToJSON(
  mysqlStopRestartPolicySwarm: MysqlStopRestartPolicySwarm,
): string {
  return JSON.stringify(
    MysqlStopRestartPolicySwarm$outboundSchema.parse(
      mysqlStopRestartPolicySwarm,
    ),
  );
}

export function mysqlStopRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const MysqlStopSpread$inboundSchema: z.ZodType<
  MysqlStopSpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type MysqlStopSpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const MysqlStopSpread$outboundSchema: z.ZodType<
  MysqlStopSpread$Outbound,
  z.ZodTypeDef,
  MysqlStopSpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopSpread$ {
  /** @deprecated use `MysqlStopSpread$inboundSchema` instead. */
  export const inboundSchema = MysqlStopSpread$inboundSchema;
  /** @deprecated use `MysqlStopSpread$outboundSchema` instead. */
  export const outboundSchema = MysqlStopSpread$outboundSchema;
  /** @deprecated use `MysqlStopSpread$Outbound` instead. */
  export type Outbound = MysqlStopSpread$Outbound;
}

export function mysqlStopSpreadToJSON(
  mysqlStopSpread: MysqlStopSpread,
): string {
  return JSON.stringify(MysqlStopSpread$outboundSchema.parse(mysqlStopSpread));
}

export function mysqlStopSpreadFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopSpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopSpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopSpread' from JSON`,
  );
}

/** @internal */
export const MysqlStopPreference$inboundSchema: z.ZodType<
  MysqlStopPreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => MysqlStopSpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type MysqlStopPreference$Outbound = {
  Spread: MysqlStopSpread$Outbound;
};

/** @internal */
export const MysqlStopPreference$outboundSchema: z.ZodType<
  MysqlStopPreference$Outbound,
  z.ZodTypeDef,
  MysqlStopPreference
> = z.object({
  spread: z.lazy(() => MysqlStopSpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopPreference$ {
  /** @deprecated use `MysqlStopPreference$inboundSchema` instead. */
  export const inboundSchema = MysqlStopPreference$inboundSchema;
  /** @deprecated use `MysqlStopPreference$outboundSchema` instead. */
  export const outboundSchema = MysqlStopPreference$outboundSchema;
  /** @deprecated use `MysqlStopPreference$Outbound` instead. */
  export type Outbound = MysqlStopPreference$Outbound;
}

export function mysqlStopPreferenceToJSON(
  mysqlStopPreference: MysqlStopPreference,
): string {
  return JSON.stringify(
    MysqlStopPreference$outboundSchema.parse(mysqlStopPreference),
  );
}

export function mysqlStopPreferenceFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopPreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopPreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopPreference' from JSON`,
  );
}

/** @internal */
export const MysqlStopPlatform$inboundSchema: z.ZodType<
  MysqlStopPlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type MysqlStopPlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const MysqlStopPlatform$outboundSchema: z.ZodType<
  MysqlStopPlatform$Outbound,
  z.ZodTypeDef,
  MysqlStopPlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopPlatform$ {
  /** @deprecated use `MysqlStopPlatform$inboundSchema` instead. */
  export const inboundSchema = MysqlStopPlatform$inboundSchema;
  /** @deprecated use `MysqlStopPlatform$outboundSchema` instead. */
  export const outboundSchema = MysqlStopPlatform$outboundSchema;
  /** @deprecated use `MysqlStopPlatform$Outbound` instead. */
  export type Outbound = MysqlStopPlatform$Outbound;
}

export function mysqlStopPlatformToJSON(
  mysqlStopPlatform: MysqlStopPlatform,
): string {
  return JSON.stringify(
    MysqlStopPlatform$outboundSchema.parse(mysqlStopPlatform),
  );
}

export function mysqlStopPlatformFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopPlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopPlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopPlatform' from JSON`,
  );
}

/** @internal */
export const MysqlStopPlacementSwarm$inboundSchema: z.ZodType<
  MysqlStopPlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  Preferences: z.array(z.lazy(() => MysqlStopPreference$inboundSchema))
    .optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => MysqlStopPlatform$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "Preferences": "preferences",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
  });
});

/** @internal */
export type MysqlStopPlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  Preferences?: Array<MysqlStopPreference$Outbound> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<MysqlStopPlatform$Outbound> | undefined;
};

/** @internal */
export const MysqlStopPlacementSwarm$outboundSchema: z.ZodType<
  MysqlStopPlacementSwarm$Outbound,
  z.ZodTypeDef,
  MysqlStopPlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  preferences: z.array(z.lazy(() => MysqlStopPreference$outboundSchema))
    .optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => MysqlStopPlatform$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    preferences: "Preferences",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopPlacementSwarm$ {
  /** @deprecated use `MysqlStopPlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlStopPlacementSwarm$inboundSchema;
  /** @deprecated use `MysqlStopPlacementSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlStopPlacementSwarm$outboundSchema;
  /** @deprecated use `MysqlStopPlacementSwarm$Outbound` instead. */
  export type Outbound = MysqlStopPlacementSwarm$Outbound;
}

export function mysqlStopPlacementSwarmToJSON(
  mysqlStopPlacementSwarm: MysqlStopPlacementSwarm,
): string {
  return JSON.stringify(
    MysqlStopPlacementSwarm$outboundSchema.parse(mysqlStopPlacementSwarm),
  );
}

export function mysqlStopPlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopPlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopPlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopPlacementSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlStopUpdateConfigSwarm$inboundSchema: z.ZodType<
  MysqlStopUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type MysqlStopUpdateConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const MysqlStopUpdateConfigSwarm$outboundSchema: z.ZodType<
  MysqlStopUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  MysqlStopUpdateConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopUpdateConfigSwarm$ {
  /** @deprecated use `MysqlStopUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlStopUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `MysqlStopUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlStopUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `MysqlStopUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = MysqlStopUpdateConfigSwarm$Outbound;
}

export function mysqlStopUpdateConfigSwarmToJSON(
  mysqlStopUpdateConfigSwarm: MysqlStopUpdateConfigSwarm,
): string {
  return JSON.stringify(
    MysqlStopUpdateConfigSwarm$outboundSchema.parse(mysqlStopUpdateConfigSwarm),
  );
}

export function mysqlStopUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlStopRollbackConfigSwarm$inboundSchema: z.ZodType<
  MysqlStopRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type MysqlStopRollbackConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const MysqlStopRollbackConfigSwarm$outboundSchema: z.ZodType<
  MysqlStopRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  MysqlStopRollbackConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopRollbackConfigSwarm$ {
  /** @deprecated use `MysqlStopRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlStopRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `MysqlStopRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlStopRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `MysqlStopRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = MysqlStopRollbackConfigSwarm$Outbound;
}

export function mysqlStopRollbackConfigSwarmToJSON(
  mysqlStopRollbackConfigSwarm: MysqlStopRollbackConfigSwarm,
): string {
  return JSON.stringify(
    MysqlStopRollbackConfigSwarm$outboundSchema.parse(
      mysqlStopRollbackConfigSwarm,
    ),
  );
}

export function mysqlStopRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopRollbackConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopRollbackConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlStopReplicated$inboundSchema: z.ZodType<
  MysqlStopReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type MysqlStopReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const MysqlStopReplicated$outboundSchema: z.ZodType<
  MysqlStopReplicated$Outbound,
  z.ZodTypeDef,
  MysqlStopReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopReplicated$ {
  /** @deprecated use `MysqlStopReplicated$inboundSchema` instead. */
  export const inboundSchema = MysqlStopReplicated$inboundSchema;
  /** @deprecated use `MysqlStopReplicated$outboundSchema` instead. */
  export const outboundSchema = MysqlStopReplicated$outboundSchema;
  /** @deprecated use `MysqlStopReplicated$Outbound` instead. */
  export type Outbound = MysqlStopReplicated$Outbound;
}

export function mysqlStopReplicatedToJSON(
  mysqlStopReplicated: MysqlStopReplicated,
): string {
  return JSON.stringify(
    MysqlStopReplicated$outboundSchema.parse(mysqlStopReplicated),
  );
}

export function mysqlStopReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopReplicated' from JSON`,
  );
}

/** @internal */
export const MysqlStopGlobal$inboundSchema: z.ZodType<
  MysqlStopGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MysqlStopGlobal$Outbound = {};

/** @internal */
export const MysqlStopGlobal$outboundSchema: z.ZodType<
  MysqlStopGlobal$Outbound,
  z.ZodTypeDef,
  MysqlStopGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopGlobal$ {
  /** @deprecated use `MysqlStopGlobal$inboundSchema` instead. */
  export const inboundSchema = MysqlStopGlobal$inboundSchema;
  /** @deprecated use `MysqlStopGlobal$outboundSchema` instead. */
  export const outboundSchema = MysqlStopGlobal$outboundSchema;
  /** @deprecated use `MysqlStopGlobal$Outbound` instead. */
  export type Outbound = MysqlStopGlobal$Outbound;
}

export function mysqlStopGlobalToJSON(
  mysqlStopGlobal: MysqlStopGlobal,
): string {
  return JSON.stringify(MysqlStopGlobal$outboundSchema.parse(mysqlStopGlobal));
}

export function mysqlStopGlobalFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopGlobal' from JSON`,
  );
}

/** @internal */
export const MysqlStopReplicatedJob$inboundSchema: z.ZodType<
  MysqlStopReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type MysqlStopReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const MysqlStopReplicatedJob$outboundSchema: z.ZodType<
  MysqlStopReplicatedJob$Outbound,
  z.ZodTypeDef,
  MysqlStopReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopReplicatedJob$ {
  /** @deprecated use `MysqlStopReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = MysqlStopReplicatedJob$inboundSchema;
  /** @deprecated use `MysqlStopReplicatedJob$outboundSchema` instead. */
  export const outboundSchema = MysqlStopReplicatedJob$outboundSchema;
  /** @deprecated use `MysqlStopReplicatedJob$Outbound` instead. */
  export type Outbound = MysqlStopReplicatedJob$Outbound;
}

export function mysqlStopReplicatedJobToJSON(
  mysqlStopReplicatedJob: MysqlStopReplicatedJob,
): string {
  return JSON.stringify(
    MysqlStopReplicatedJob$outboundSchema.parse(mysqlStopReplicatedJob),
  );
}

export function mysqlStopReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopReplicatedJob' from JSON`,
  );
}

/** @internal */
export const MysqlStopGlobalJob$inboundSchema: z.ZodType<
  MysqlStopGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MysqlStopGlobalJob$Outbound = {};

/** @internal */
export const MysqlStopGlobalJob$outboundSchema: z.ZodType<
  MysqlStopGlobalJob$Outbound,
  z.ZodTypeDef,
  MysqlStopGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopGlobalJob$ {
  /** @deprecated use `MysqlStopGlobalJob$inboundSchema` instead. */
  export const inboundSchema = MysqlStopGlobalJob$inboundSchema;
  /** @deprecated use `MysqlStopGlobalJob$outboundSchema` instead. */
  export const outboundSchema = MysqlStopGlobalJob$outboundSchema;
  /** @deprecated use `MysqlStopGlobalJob$Outbound` instead. */
  export type Outbound = MysqlStopGlobalJob$Outbound;
}

export function mysqlStopGlobalJobToJSON(
  mysqlStopGlobalJob: MysqlStopGlobalJob,
): string {
  return JSON.stringify(
    MysqlStopGlobalJob$outboundSchema.parse(mysqlStopGlobalJob),
  );
}

export function mysqlStopGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopGlobalJob' from JSON`,
  );
}

/** @internal */
export const MysqlStopModeSwarm$inboundSchema: z.ZodType<
  MysqlStopModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicated: z.lazy(() => MysqlStopReplicated$inboundSchema).optional(),
  Global: z.lazy(() => MysqlStopGlobal$inboundSchema).optional(),
  ReplicatedJob: z.lazy(() => MysqlStopReplicatedJob$inboundSchema).optional(),
  GlobalJob: z.lazy(() => MysqlStopGlobalJob$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicated": "replicated",
    "Global": "global",
    "ReplicatedJob": "replicatedJob",
    "GlobalJob": "globalJob",
  });
});

/** @internal */
export type MysqlStopModeSwarm$Outbound = {
  Replicated?: MysqlStopReplicated$Outbound | undefined;
  Global?: MysqlStopGlobal$Outbound | undefined;
  ReplicatedJob?: MysqlStopReplicatedJob$Outbound | undefined;
  GlobalJob?: MysqlStopGlobalJob$Outbound | undefined;
};

/** @internal */
export const MysqlStopModeSwarm$outboundSchema: z.ZodType<
  MysqlStopModeSwarm$Outbound,
  z.ZodTypeDef,
  MysqlStopModeSwarm
> = z.object({
  replicated: z.lazy(() => MysqlStopReplicated$outboundSchema).optional(),
  global: z.lazy(() => MysqlStopGlobal$outboundSchema).optional(),
  replicatedJob: z.lazy(() => MysqlStopReplicatedJob$outboundSchema).optional(),
  globalJob: z.lazy(() => MysqlStopGlobalJob$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    replicated: "Replicated",
    global: "Global",
    replicatedJob: "ReplicatedJob",
    globalJob: "GlobalJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopModeSwarm$ {
  /** @deprecated use `MysqlStopModeSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlStopModeSwarm$inboundSchema;
  /** @deprecated use `MysqlStopModeSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlStopModeSwarm$outboundSchema;
  /** @deprecated use `MysqlStopModeSwarm$Outbound` instead. */
  export type Outbound = MysqlStopModeSwarm$Outbound;
}

export function mysqlStopModeSwarmToJSON(
  mysqlStopModeSwarm: MysqlStopModeSwarm,
): string {
  return JSON.stringify(
    MysqlStopModeSwarm$outboundSchema.parse(mysqlStopModeSwarm),
  );
}

export function mysqlStopModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopModeSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlStopDriverOpts$inboundSchema: z.ZodType<
  MysqlStopDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MysqlStopDriverOpts$Outbound = {};

/** @internal */
export const MysqlStopDriverOpts$outboundSchema: z.ZodType<
  MysqlStopDriverOpts$Outbound,
  z.ZodTypeDef,
  MysqlStopDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopDriverOpts$ {
  /** @deprecated use `MysqlStopDriverOpts$inboundSchema` instead. */
  export const inboundSchema = MysqlStopDriverOpts$inboundSchema;
  /** @deprecated use `MysqlStopDriverOpts$outboundSchema` instead. */
  export const outboundSchema = MysqlStopDriverOpts$outboundSchema;
  /** @deprecated use `MysqlStopDriverOpts$Outbound` instead. */
  export type Outbound = MysqlStopDriverOpts$Outbound;
}

export function mysqlStopDriverOptsToJSON(
  mysqlStopDriverOpts: MysqlStopDriverOpts,
): string {
  return JSON.stringify(
    MysqlStopDriverOpts$outboundSchema.parse(mysqlStopDriverOpts),
  );
}

export function mysqlStopDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopDriverOpts' from JSON`,
  );
}

/** @internal */
export const MysqlStopNetworkSwarm$inboundSchema: z.ZodType<
  MysqlStopNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Target: z.string().optional(),
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => MysqlStopDriverOpts$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Target": "target",
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
  });
});

/** @internal */
export type MysqlStopNetworkSwarm$Outbound = {
  Target?: string | undefined;
  Aliases?: Array<string> | undefined;
  DriverOpts?: MysqlStopDriverOpts$Outbound | undefined;
};

/** @internal */
export const MysqlStopNetworkSwarm$outboundSchema: z.ZodType<
  MysqlStopNetworkSwarm$Outbound,
  z.ZodTypeDef,
  MysqlStopNetworkSwarm
> = z.object({
  target: z.string().optional(),
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => MysqlStopDriverOpts$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    target: "Target",
    aliases: "Aliases",
    driverOpts: "DriverOpts",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopNetworkSwarm$ {
  /** @deprecated use `MysqlStopNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlStopNetworkSwarm$inboundSchema;
  /** @deprecated use `MysqlStopNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlStopNetworkSwarm$outboundSchema;
  /** @deprecated use `MysqlStopNetworkSwarm$Outbound` instead. */
  export type Outbound = MysqlStopNetworkSwarm$Outbound;
}

export function mysqlStopNetworkSwarmToJSON(
  mysqlStopNetworkSwarm: MysqlStopNetworkSwarm,
): string {
  return JSON.stringify(
    MysqlStopNetworkSwarm$outboundSchema.parse(mysqlStopNetworkSwarm),
  );
}

export function mysqlStopNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlStopProject$inboundSchema: z.ZodType<
  MysqlStopProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  organizationId: z.string(),
  env: z.string(),
});

/** @internal */
export type MysqlStopProject$Outbound = {
  projectId: string;
  name: string;
  description: string | null;
  createdAt: string;
  organizationId: string;
  env: string;
};

/** @internal */
export const MysqlStopProject$outboundSchema: z.ZodType<
  MysqlStopProject$Outbound,
  z.ZodTypeDef,
  MysqlStopProject
> = z.object({
  projectId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  organizationId: z.string(),
  env: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopProject$ {
  /** @deprecated use `MysqlStopProject$inboundSchema` instead. */
  export const inboundSchema = MysqlStopProject$inboundSchema;
  /** @deprecated use `MysqlStopProject$outboundSchema` instead. */
  export const outboundSchema = MysqlStopProject$outboundSchema;
  /** @deprecated use `MysqlStopProject$Outbound` instead. */
  export type Outbound = MysqlStopProject$Outbound;
}

export function mysqlStopProjectToJSON(
  mysqlStopProject: MysqlStopProject,
): string {
  return JSON.stringify(
    MysqlStopProject$outboundSchema.parse(mysqlStopProject),
  );
}

export function mysqlStopProjectFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopProject' from JSON`,
  );
}

/** @internal */
export const MysqlStopEnvironment$inboundSchema: z.ZodType<
  MysqlStopEnvironment,
  z.ZodTypeDef,
  unknown
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
  project: z.lazy(() => MysqlStopProject$inboundSchema),
});

/** @internal */
export type MysqlStopEnvironment$Outbound = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
  project: MysqlStopProject$Outbound;
};

/** @internal */
export const MysqlStopEnvironment$outboundSchema: z.ZodType<
  MysqlStopEnvironment$Outbound,
  z.ZodTypeDef,
  MysqlStopEnvironment
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
  project: z.lazy(() => MysqlStopProject$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopEnvironment$ {
  /** @deprecated use `MysqlStopEnvironment$inboundSchema` instead. */
  export const inboundSchema = MysqlStopEnvironment$inboundSchema;
  /** @deprecated use `MysqlStopEnvironment$outboundSchema` instead. */
  export const outboundSchema = MysqlStopEnvironment$outboundSchema;
  /** @deprecated use `MysqlStopEnvironment$Outbound` instead. */
  export type Outbound = MysqlStopEnvironment$Outbound;
}

export function mysqlStopEnvironmentToJSON(
  mysqlStopEnvironment: MysqlStopEnvironment,
): string {
  return JSON.stringify(
    MysqlStopEnvironment$outboundSchema.parse(mysqlStopEnvironment),
  );
}

export function mysqlStopEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopEnvironment' from JSON`,
  );
}

/** @internal */
export const MysqlStopType$inboundSchema: z.ZodNativeEnum<
  typeof MysqlStopType
> = z.nativeEnum(MysqlStopType);

/** @internal */
export const MysqlStopType$outboundSchema: z.ZodNativeEnum<
  typeof MysqlStopType
> = MysqlStopType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopType$ {
  /** @deprecated use `MysqlStopType$inboundSchema` instead. */
  export const inboundSchema = MysqlStopType$inboundSchema;
  /** @deprecated use `MysqlStopType$outboundSchema` instead. */
  export const outboundSchema = MysqlStopType$outboundSchema;
}

/** @internal */
export const MysqlStopServiceType$inboundSchema: z.ZodNativeEnum<
  typeof MysqlStopServiceType
> = z.nativeEnum(MysqlStopServiceType);

/** @internal */
export const MysqlStopServiceType$outboundSchema: z.ZodNativeEnum<
  typeof MysqlStopServiceType
> = MysqlStopServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopServiceType$ {
  /** @deprecated use `MysqlStopServiceType$inboundSchema` instead. */
  export const inboundSchema = MysqlStopServiceType$inboundSchema;
  /** @deprecated use `MysqlStopServiceType$outboundSchema` instead. */
  export const outboundSchema = MysqlStopServiceType$outboundSchema;
}

/** @internal */
export const MysqlStopMount$inboundSchema: z.ZodType<
  MysqlStopMount,
  z.ZodTypeDef,
  unknown
> = z.object({
  mountId: z.string(),
  type: MysqlStopType$inboundSchema,
  hostPath: z.nullable(z.string()),
  volumeName: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  content: z.nullable(z.string()),
  serviceType: MysqlStopServiceType$inboundSchema,
  mountPath: z.string(),
  applicationId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
});

/** @internal */
export type MysqlStopMount$Outbound = {
  mountId: string;
  type: string;
  hostPath: string | null;
  volumeName: string | null;
  filePath: string | null;
  content: string | null;
  serviceType: string;
  mountPath: string;
  applicationId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mysqlId: string | null;
  redisId: string | null;
  composeId: string | null;
};

/** @internal */
export const MysqlStopMount$outboundSchema: z.ZodType<
  MysqlStopMount$Outbound,
  z.ZodTypeDef,
  MysqlStopMount
> = z.object({
  mountId: z.string(),
  type: MysqlStopType$outboundSchema,
  hostPath: z.nullable(z.string()),
  volumeName: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  content: z.nullable(z.string()),
  serviceType: MysqlStopServiceType$outboundSchema,
  mountPath: z.string(),
  applicationId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopMount$ {
  /** @deprecated use `MysqlStopMount$inboundSchema` instead. */
  export const inboundSchema = MysqlStopMount$inboundSchema;
  /** @deprecated use `MysqlStopMount$outboundSchema` instead. */
  export const outboundSchema = MysqlStopMount$outboundSchema;
  /** @deprecated use `MysqlStopMount$Outbound` instead. */
  export type Outbound = MysqlStopMount$Outbound;
}

export function mysqlStopMountToJSON(mysqlStopMount: MysqlStopMount): string {
  return JSON.stringify(MysqlStopMount$outboundSchema.parse(mysqlStopMount));
}

export function mysqlStopMountFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopMount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopMount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopMount' from JSON`,
  );
}

/** @internal */
export const MysqlStopServerStatus$inboundSchema: z.ZodNativeEnum<
  typeof MysqlStopServerStatus
> = z.nativeEnum(MysqlStopServerStatus);

/** @internal */
export const MysqlStopServerStatus$outboundSchema: z.ZodNativeEnum<
  typeof MysqlStopServerStatus
> = MysqlStopServerStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopServerStatus$ {
  /** @deprecated use `MysqlStopServerStatus$inboundSchema` instead. */
  export const inboundSchema = MysqlStopServerStatus$inboundSchema;
  /** @deprecated use `MysqlStopServerStatus$outboundSchema` instead. */
  export const outboundSchema = MysqlStopServerStatus$outboundSchema;
}

/** @internal */
export const MysqlStopMetricsConfigEnum$inboundSchema: z.ZodNativeEnum<
  typeof MysqlStopMetricsConfigEnum
> = z.nativeEnum(MysqlStopMetricsConfigEnum);

/** @internal */
export const MysqlStopMetricsConfigEnum$outboundSchema: z.ZodNativeEnum<
  typeof MysqlStopMetricsConfigEnum
> = MysqlStopMetricsConfigEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopMetricsConfigEnum$ {
  /** @deprecated use `MysqlStopMetricsConfigEnum$inboundSchema` instead. */
  export const inboundSchema = MysqlStopMetricsConfigEnum$inboundSchema;
  /** @deprecated use `MysqlStopMetricsConfigEnum$outboundSchema` instead. */
  export const outboundSchema = MysqlStopMetricsConfigEnum$outboundSchema;
}

/** @internal */
export const MysqlStopMetricsConfigUnion1$inboundSchema: z.ZodType<
  MysqlStopMetricsConfigUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  MysqlStopMetricsConfigEnum$inboundSchema,
]);

/** @internal */
export type MysqlStopMetricsConfigUnion1$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const MysqlStopMetricsConfigUnion1$outboundSchema: z.ZodType<
  MysqlStopMetricsConfigUnion1$Outbound,
  z.ZodTypeDef,
  MysqlStopMetricsConfigUnion1
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  MysqlStopMetricsConfigEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopMetricsConfigUnion1$ {
  /** @deprecated use `MysqlStopMetricsConfigUnion1$inboundSchema` instead. */
  export const inboundSchema = MysqlStopMetricsConfigUnion1$inboundSchema;
  /** @deprecated use `MysqlStopMetricsConfigUnion1$outboundSchema` instead. */
  export const outboundSchema = MysqlStopMetricsConfigUnion1$outboundSchema;
  /** @deprecated use `MysqlStopMetricsConfigUnion1$Outbound` instead. */
  export type Outbound = MysqlStopMetricsConfigUnion1$Outbound;
}

export function mysqlStopMetricsConfigUnion1ToJSON(
  mysqlStopMetricsConfigUnion1: MysqlStopMetricsConfigUnion1,
): string {
  return JSON.stringify(
    MysqlStopMetricsConfigUnion1$outboundSchema.parse(
      mysqlStopMetricsConfigUnion1,
    ),
  );
}

export function mysqlStopMetricsConfigUnion1FromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopMetricsConfigUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopMetricsConfigUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopMetricsConfigUnion1' from JSON`,
  );
}

/** @internal */
export const MysqlStopMetricsConfigUnion2$inboundSchema: z.ZodType<
  MysqlStopMetricsConfigUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    MysqlStopMetricsConfigEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type MysqlStopMetricsConfigUnion2$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const MysqlStopMetricsConfigUnion2$outboundSchema: z.ZodType<
  MysqlStopMetricsConfigUnion2$Outbound,
  z.ZodTypeDef,
  MysqlStopMetricsConfigUnion2
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    MysqlStopMetricsConfigEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopMetricsConfigUnion2$ {
  /** @deprecated use `MysqlStopMetricsConfigUnion2$inboundSchema` instead. */
  export const inboundSchema = MysqlStopMetricsConfigUnion2$inboundSchema;
  /** @deprecated use `MysqlStopMetricsConfigUnion2$outboundSchema` instead. */
  export const outboundSchema = MysqlStopMetricsConfigUnion2$outboundSchema;
  /** @deprecated use `MysqlStopMetricsConfigUnion2$Outbound` instead. */
  export type Outbound = MysqlStopMetricsConfigUnion2$Outbound;
}

export function mysqlStopMetricsConfigUnion2ToJSON(
  mysqlStopMetricsConfigUnion2: MysqlStopMetricsConfigUnion2,
): string {
  return JSON.stringify(
    MysqlStopMetricsConfigUnion2$outboundSchema.parse(
      mysqlStopMetricsConfigUnion2,
    ),
  );
}

export function mysqlStopMetricsConfigUnion2FromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopMetricsConfigUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopMetricsConfigUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopMetricsConfigUnion2' from JSON`,
  );
}

/** @internal */
export const MysqlStopServer$inboundSchema: z.ZodType<
  MysqlStopServer,
  z.ZodTypeDef,
  unknown
> = z.object({
  serverId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  ipAddress: z.string(),
  port: z.number(),
  username: z.string(),
  appName: z.string(),
  enableDockerCleanup: z.boolean(),
  createdAt: z.string(),
  organizationId: z.string(),
  serverStatus: MysqlStopServerStatus$inboundSchema,
  command: z.string(),
  sshKeyId: z.nullable(z.string()),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      MysqlStopMetricsConfigEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
});

/** @internal */
export type MysqlStopServer$Outbound = {
  serverId: string;
  name: string;
  description: string | null;
  ipAddress: string;
  port: number;
  username: string;
  appName: string;
  enableDockerCleanup: boolean;
  createdAt: string;
  organizationId: string;
  serverStatus: string;
  command: string;
  sshKeyId: string | null;
  metricsConfig: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  };
};

/** @internal */
export const MysqlStopServer$outboundSchema: z.ZodType<
  MysqlStopServer$Outbound,
  z.ZodTypeDef,
  MysqlStopServer
> = z.object({
  serverId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  ipAddress: z.string(),
  port: z.number(),
  username: z.string(),
  appName: z.string(),
  enableDockerCleanup: z.boolean(),
  createdAt: z.string(),
  organizationId: z.string(),
  serverStatus: MysqlStopServerStatus$outboundSchema,
  command: z.string(),
  sshKeyId: z.nullable(z.string()),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      MysqlStopMetricsConfigEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopServer$ {
  /** @deprecated use `MysqlStopServer$inboundSchema` instead. */
  export const inboundSchema = MysqlStopServer$inboundSchema;
  /** @deprecated use `MysqlStopServer$outboundSchema` instead. */
  export const outboundSchema = MysqlStopServer$outboundSchema;
  /** @deprecated use `MysqlStopServer$Outbound` instead. */
  export type Outbound = MysqlStopServer$Outbound;
}

export function mysqlStopServerToJSON(
  mysqlStopServer: MysqlStopServer,
): string {
  return JSON.stringify(MysqlStopServer$outboundSchema.parse(mysqlStopServer));
}

export function mysqlStopServerFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopServer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopServer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopServer' from JSON`,
  );
}

/** @internal */
export const MysqlStopBackupType$inboundSchema: z.ZodNativeEnum<
  typeof MysqlStopBackupType
> = z.nativeEnum(MysqlStopBackupType);

/** @internal */
export const MysqlStopBackupType$outboundSchema: z.ZodNativeEnum<
  typeof MysqlStopBackupType
> = MysqlStopBackupType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopBackupType$ {
  /** @deprecated use `MysqlStopBackupType$inboundSchema` instead. */
  export const inboundSchema = MysqlStopBackupType$inboundSchema;
  /** @deprecated use `MysqlStopBackupType$outboundSchema` instead. */
  export const outboundSchema = MysqlStopBackupType$outboundSchema;
}

/** @internal */
export const MysqlStopDatabaseType$inboundSchema: z.ZodNativeEnum<
  typeof MysqlStopDatabaseType
> = z.nativeEnum(MysqlStopDatabaseType);

/** @internal */
export const MysqlStopDatabaseType$outboundSchema: z.ZodNativeEnum<
  typeof MysqlStopDatabaseType
> = MysqlStopDatabaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopDatabaseType$ {
  /** @deprecated use `MysqlStopDatabaseType$inboundSchema` instead. */
  export const inboundSchema = MysqlStopDatabaseType$inboundSchema;
  /** @deprecated use `MysqlStopDatabaseType$outboundSchema` instead. */
  export const outboundSchema = MysqlStopDatabaseType$outboundSchema;
}

/** @internal */
export const MysqlStopMetadataEnum$inboundSchema: z.ZodNativeEnum<
  typeof MysqlStopMetadataEnum
> = z.nativeEnum(MysqlStopMetadataEnum);

/** @internal */
export const MysqlStopMetadataEnum$outboundSchema: z.ZodNativeEnum<
  typeof MysqlStopMetadataEnum
> = MysqlStopMetadataEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopMetadataEnum$ {
  /** @deprecated use `MysqlStopMetadataEnum$inboundSchema` instead. */
  export const inboundSchema = MysqlStopMetadataEnum$inboundSchema;
  /** @deprecated use `MysqlStopMetadataEnum$outboundSchema` instead. */
  export const outboundSchema = MysqlStopMetadataEnum$outboundSchema;
}

/** @internal */
export const MysqlStopPostgres$inboundSchema: z.ZodType<
  MysqlStopPostgres,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseUser: z.string(),
});

/** @internal */
export type MysqlStopPostgres$Outbound = {
  databaseUser: string;
};

/** @internal */
export const MysqlStopPostgres$outboundSchema: z.ZodType<
  MysqlStopPostgres$Outbound,
  z.ZodTypeDef,
  MysqlStopPostgres
> = z.object({
  databaseUser: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopPostgres$ {
  /** @deprecated use `MysqlStopPostgres$inboundSchema` instead. */
  export const inboundSchema = MysqlStopPostgres$inboundSchema;
  /** @deprecated use `MysqlStopPostgres$outboundSchema` instead. */
  export const outboundSchema = MysqlStopPostgres$outboundSchema;
  /** @deprecated use `MysqlStopPostgres$Outbound` instead. */
  export type Outbound = MysqlStopPostgres$Outbound;
}

export function mysqlStopPostgresToJSON(
  mysqlStopPostgres: MysqlStopPostgres,
): string {
  return JSON.stringify(
    MysqlStopPostgres$outboundSchema.parse(mysqlStopPostgres),
  );
}

export function mysqlStopPostgresFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopPostgres, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopPostgres$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopPostgres' from JSON`,
  );
}

/** @internal */
export const MysqlStopMariadb$inboundSchema: z.ZodType<
  MysqlStopMariadb,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseUser: z.string(),
  databasePassword: z.string(),
});

/** @internal */
export type MysqlStopMariadb$Outbound = {
  databaseUser: string;
  databasePassword: string;
};

/** @internal */
export const MysqlStopMariadb$outboundSchema: z.ZodType<
  MysqlStopMariadb$Outbound,
  z.ZodTypeDef,
  MysqlStopMariadb
> = z.object({
  databaseUser: z.string(),
  databasePassword: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopMariadb$ {
  /** @deprecated use `MysqlStopMariadb$inboundSchema` instead. */
  export const inboundSchema = MysqlStopMariadb$inboundSchema;
  /** @deprecated use `MysqlStopMariadb$outboundSchema` instead. */
  export const outboundSchema = MysqlStopMariadb$outboundSchema;
  /** @deprecated use `MysqlStopMariadb$Outbound` instead. */
  export type Outbound = MysqlStopMariadb$Outbound;
}

export function mysqlStopMariadbToJSON(
  mysqlStopMariadb: MysqlStopMariadb,
): string {
  return JSON.stringify(
    MysqlStopMariadb$outboundSchema.parse(mysqlStopMariadb),
  );
}

export function mysqlStopMariadbFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopMariadb, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopMariadb$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopMariadb' from JSON`,
  );
}

/** @internal */
export const MysqlStopMongo$inboundSchema: z.ZodType<
  MysqlStopMongo,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseUser: z.string(),
  databasePassword: z.string(),
});

/** @internal */
export type MysqlStopMongo$Outbound = {
  databaseUser: string;
  databasePassword: string;
};

/** @internal */
export const MysqlStopMongo$outboundSchema: z.ZodType<
  MysqlStopMongo$Outbound,
  z.ZodTypeDef,
  MysqlStopMongo
> = z.object({
  databaseUser: z.string(),
  databasePassword: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopMongo$ {
  /** @deprecated use `MysqlStopMongo$inboundSchema` instead. */
  export const inboundSchema = MysqlStopMongo$inboundSchema;
  /** @deprecated use `MysqlStopMongo$outboundSchema` instead. */
  export const outboundSchema = MysqlStopMongo$outboundSchema;
  /** @deprecated use `MysqlStopMongo$Outbound` instead. */
  export type Outbound = MysqlStopMongo$Outbound;
}

export function mysqlStopMongoToJSON(mysqlStopMongo: MysqlStopMongo): string {
  return JSON.stringify(MysqlStopMongo$outboundSchema.parse(mysqlStopMongo));
}

export function mysqlStopMongoFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopMongo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopMongo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopMongo' from JSON`,
  );
}

/** @internal */
export const MysqlStopMysql$inboundSchema: z.ZodType<
  MysqlStopMysql,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseRootPassword: z.string(),
});

/** @internal */
export type MysqlStopMysql$Outbound = {
  databaseRootPassword: string;
};

/** @internal */
export const MysqlStopMysql$outboundSchema: z.ZodType<
  MysqlStopMysql$Outbound,
  z.ZodTypeDef,
  MysqlStopMysql
> = z.object({
  databaseRootPassword: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopMysql$ {
  /** @deprecated use `MysqlStopMysql$inboundSchema` instead. */
  export const inboundSchema = MysqlStopMysql$inboundSchema;
  /** @deprecated use `MysqlStopMysql$outboundSchema` instead. */
  export const outboundSchema = MysqlStopMysql$outboundSchema;
  /** @deprecated use `MysqlStopMysql$Outbound` instead. */
  export type Outbound = MysqlStopMysql$Outbound;
}

export function mysqlStopMysqlToJSON(mysqlStopMysql: MysqlStopMysql): string {
  return JSON.stringify(MysqlStopMysql$outboundSchema.parse(mysqlStopMysql));
}

export function mysqlStopMysqlFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopMysql, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopMysql$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopMysql' from JSON`,
  );
}

/** @internal */
export const MysqlStopMetadata$inboundSchema: z.ZodType<
  MysqlStopMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  postgres: z.lazy(() => MysqlStopPostgres$inboundSchema).optional(),
  mariadb: z.lazy(() => MysqlStopMariadb$inboundSchema).optional(),
  mongo: z.lazy(() => MysqlStopMongo$inboundSchema).optional(),
  mysql: z.lazy(() => MysqlStopMysql$inboundSchema).optional(),
});

/** @internal */
export type MysqlStopMetadata$Outbound = {
  postgres?: MysqlStopPostgres$Outbound | undefined;
  mariadb?: MysqlStopMariadb$Outbound | undefined;
  mongo?: MysqlStopMongo$Outbound | undefined;
  mysql?: MysqlStopMysql$Outbound | undefined;
};

/** @internal */
export const MysqlStopMetadata$outboundSchema: z.ZodType<
  MysqlStopMetadata$Outbound,
  z.ZodTypeDef,
  MysqlStopMetadata
> = z.object({
  postgres: z.lazy(() => MysqlStopPostgres$outboundSchema).optional(),
  mariadb: z.lazy(() => MysqlStopMariadb$outboundSchema).optional(),
  mongo: z.lazy(() => MysqlStopMongo$outboundSchema).optional(),
  mysql: z.lazy(() => MysqlStopMysql$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopMetadata$ {
  /** @deprecated use `MysqlStopMetadata$inboundSchema` instead. */
  export const inboundSchema = MysqlStopMetadata$inboundSchema;
  /** @deprecated use `MysqlStopMetadata$outboundSchema` instead. */
  export const outboundSchema = MysqlStopMetadata$outboundSchema;
  /** @deprecated use `MysqlStopMetadata$Outbound` instead. */
  export type Outbound = MysqlStopMetadata$Outbound;
}

export function mysqlStopMetadataToJSON(
  mysqlStopMetadata: MysqlStopMetadata,
): string {
  return JSON.stringify(
    MysqlStopMetadata$outboundSchema.parse(mysqlStopMetadata),
  );
}

export function mysqlStopMetadataFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopMetadata' from JSON`,
  );
}

/** @internal */
export const MysqlStopMetadataUnion$inboundSchema: z.ZodType<
  MysqlStopMetadataUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => MysqlStopMetadata$inboundSchema),
  MysqlStopMetadataEnum$inboundSchema,
]);

/** @internal */
export type MysqlStopMetadataUnion$Outbound =
  | MysqlStopMetadata$Outbound
  | string;

/** @internal */
export const MysqlStopMetadataUnion$outboundSchema: z.ZodType<
  MysqlStopMetadataUnion$Outbound,
  z.ZodTypeDef,
  MysqlStopMetadataUnion
> = z.union([
  z.lazy(() => MysqlStopMetadata$outboundSchema),
  MysqlStopMetadataEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopMetadataUnion$ {
  /** @deprecated use `MysqlStopMetadataUnion$inboundSchema` instead. */
  export const inboundSchema = MysqlStopMetadataUnion$inboundSchema;
  /** @deprecated use `MysqlStopMetadataUnion$outboundSchema` instead. */
  export const outboundSchema = MysqlStopMetadataUnion$outboundSchema;
  /** @deprecated use `MysqlStopMetadataUnion$Outbound` instead. */
  export type Outbound = MysqlStopMetadataUnion$Outbound;
}

export function mysqlStopMetadataUnionToJSON(
  mysqlStopMetadataUnion: MysqlStopMetadataUnion,
): string {
  return JSON.stringify(
    MysqlStopMetadataUnion$outboundSchema.parse(mysqlStopMetadataUnion),
  );
}

export function mysqlStopMetadataUnionFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopMetadataUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopMetadataUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopMetadataUnion' from JSON`,
  );
}

/** @internal */
export const MysqlStopBackup$inboundSchema: z.ZodType<
  MysqlStopBackup,
  z.ZodTypeDef,
  unknown
> = z.object({
  backupId: z.string(),
  appName: z.string(),
  schedule: z.string(),
  enabled: z.nullable(z.boolean()),
  database: z.string(),
  prefix: z.string(),
  serviceName: z.nullable(z.string()),
  destinationId: z.string(),
  keepLatestCount: z.nullable(z.number()),
  backupType: MysqlStopBackupType$inboundSchema,
  databaseType: MysqlStopDatabaseType$inboundSchema,
  composeId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  userId: z.nullable(z.string()),
  metadata: z.nullable(
    z.union([
      z.lazy(() => MysqlStopMetadata$inboundSchema),
      MysqlStopMetadataEnum$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type MysqlStopBackup$Outbound = {
  backupId: string;
  appName: string;
  schedule: string;
  enabled: boolean | null;
  database: string;
  prefix: string;
  serviceName: string | null;
  destinationId: string;
  keepLatestCount: number | null;
  backupType: string;
  databaseType: string;
  composeId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mysqlId: string | null;
  mongoId: string | null;
  userId: string | null;
  metadata?: MysqlStopMetadata$Outbound | string | null | undefined;
};

/** @internal */
export const MysqlStopBackup$outboundSchema: z.ZodType<
  MysqlStopBackup$Outbound,
  z.ZodTypeDef,
  MysqlStopBackup
> = z.object({
  backupId: z.string(),
  appName: z.string(),
  schedule: z.string(),
  enabled: z.nullable(z.boolean()),
  database: z.string(),
  prefix: z.string(),
  serviceName: z.nullable(z.string()),
  destinationId: z.string(),
  keepLatestCount: z.nullable(z.number()),
  backupType: MysqlStopBackupType$outboundSchema,
  databaseType: MysqlStopDatabaseType$outboundSchema,
  composeId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  userId: z.nullable(z.string()),
  metadata: z.nullable(
    z.union([
      z.lazy(() => MysqlStopMetadata$outboundSchema),
      MysqlStopMetadataEnum$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopBackup$ {
  /** @deprecated use `MysqlStopBackup$inboundSchema` instead. */
  export const inboundSchema = MysqlStopBackup$inboundSchema;
  /** @deprecated use `MysqlStopBackup$outboundSchema` instead. */
  export const outboundSchema = MysqlStopBackup$outboundSchema;
  /** @deprecated use `MysqlStopBackup$Outbound` instead. */
  export type Outbound = MysqlStopBackup$Outbound;
}

export function mysqlStopBackupToJSON(
  mysqlStopBackup: MysqlStopBackup,
): string {
  return JSON.stringify(MysqlStopBackup$outboundSchema.parse(mysqlStopBackup));
}

export function mysqlStopBackupFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopBackup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopBackup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopBackup' from JSON`,
  );
}

/** @internal */
export const MysqlStopResponseBody$inboundSchema: z.ZodType<
  MysqlStopResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  mysqlId: z.string(),
  name: z.string(),
  appName: z.string(),
  description: z.nullable(z.string()),
  databaseName: z.string(),
  databaseUser: z.string(),
  databasePassword: z.string(),
  databaseRootPassword: z.string(),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  applicationStatus: MysqlStopApplicationStatus$inboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => MysqlStopHealthCheckSwarm$inboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MysqlStopRestartPolicySwarm$inboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => MysqlStopPlacementSwarm$inboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MysqlStopUpdateConfigSwarm$inboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MysqlStopRollbackConfigSwarm$inboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => MysqlStopModeSwarm$inboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MysqlStopNetworkSwarm$inboundSchema)),
  ),
  replicas: z.number(),
  createdAt: z.string(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
  environment: z.lazy(() => MysqlStopEnvironment$inboundSchema),
  mounts: z.array(z.lazy(() => MysqlStopMount$inboundSchema)),
  server: z.nullable(z.lazy(() => MysqlStopServer$inboundSchema)),
  backups: z.array(z.lazy(() => MysqlStopBackup$inboundSchema)),
});

/** @internal */
export type MysqlStopResponseBody$Outbound = {
  mysqlId: string;
  name: string;
  appName: string;
  description: string | null;
  databaseName: string;
  databaseUser: string;
  databasePassword: string;
  databaseRootPassword: string;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  externalPort: number | null;
  applicationStatus: string;
  healthCheckSwarm: MysqlStopHealthCheckSwarm$Outbound | null;
  restartPolicySwarm: MysqlStopRestartPolicySwarm$Outbound | null;
  placementSwarm: MysqlStopPlacementSwarm$Outbound | null;
  updateConfigSwarm: MysqlStopUpdateConfigSwarm$Outbound | null;
  rollbackConfigSwarm: MysqlStopRollbackConfigSwarm$Outbound | null;
  modeSwarm: MysqlStopModeSwarm$Outbound | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<MysqlStopNetworkSwarm$Outbound> | null;
  replicas: number;
  createdAt: string;
  environmentId: string;
  serverId: string | null;
  environment: MysqlStopEnvironment$Outbound;
  mounts: Array<MysqlStopMount$Outbound>;
  server: MysqlStopServer$Outbound | null;
  backups: Array<MysqlStopBackup$Outbound>;
};

/** @internal */
export const MysqlStopResponseBody$outboundSchema: z.ZodType<
  MysqlStopResponseBody$Outbound,
  z.ZodTypeDef,
  MysqlStopResponseBody
> = z.object({
  mysqlId: z.string(),
  name: z.string(),
  appName: z.string(),
  description: z.nullable(z.string()),
  databaseName: z.string(),
  databaseUser: z.string(),
  databasePassword: z.string(),
  databaseRootPassword: z.string(),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  applicationStatus: MysqlStopApplicationStatus$outboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => MysqlStopHealthCheckSwarm$outboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MysqlStopRestartPolicySwarm$outboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => MysqlStopPlacementSwarm$outboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MysqlStopUpdateConfigSwarm$outboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MysqlStopRollbackConfigSwarm$outboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => MysqlStopModeSwarm$outboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MysqlStopNetworkSwarm$outboundSchema)),
  ),
  replicas: z.number(),
  createdAt: z.string(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
  environment: z.lazy(() => MysqlStopEnvironment$outboundSchema),
  mounts: z.array(z.lazy(() => MysqlStopMount$outboundSchema)),
  server: z.nullable(z.lazy(() => MysqlStopServer$outboundSchema)),
  backups: z.array(z.lazy(() => MysqlStopBackup$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopResponseBody$ {
  /** @deprecated use `MysqlStopResponseBody$inboundSchema` instead. */
  export const inboundSchema = MysqlStopResponseBody$inboundSchema;
  /** @deprecated use `MysqlStopResponseBody$outboundSchema` instead. */
  export const outboundSchema = MysqlStopResponseBody$outboundSchema;
  /** @deprecated use `MysqlStopResponseBody$Outbound` instead. */
  export type Outbound = MysqlStopResponseBody$Outbound;
}

export function mysqlStopResponseBodyToJSON(
  mysqlStopResponseBody: MysqlStopResponseBody,
): string {
  return JSON.stringify(
    MysqlStopResponseBody$outboundSchema.parse(mysqlStopResponseBody),
  );
}

export function mysqlStopResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopResponseBody' from JSON`,
  );
}

/** @internal */
export const MysqlStopResponse$inboundSchema: z.ZodType<
  MysqlStopResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => MysqlStopResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type MysqlStopResponse$Outbound =
  | MysqlStopResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const MysqlStopResponse$outboundSchema: z.ZodType<
  MysqlStopResponse$Outbound,
  z.ZodTypeDef,
  MysqlStopResponse
> = z.union([
  z.lazy(() => MysqlStopResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStopResponse$ {
  /** @deprecated use `MysqlStopResponse$inboundSchema` instead. */
  export const inboundSchema = MysqlStopResponse$inboundSchema;
  /** @deprecated use `MysqlStopResponse$outboundSchema` instead. */
  export const outboundSchema = MysqlStopResponse$outboundSchema;
  /** @deprecated use `MysqlStopResponse$Outbound` instead. */
  export type Outbound = MysqlStopResponse$Outbound;
}

export function mysqlStopResponseToJSON(
  mysqlStopResponse: MysqlStopResponse,
): string {
  return JSON.stringify(
    MysqlStopResponse$outboundSchema.parse(mysqlStopResponse),
  );
}

export function mysqlStopResponseFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStopResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStopResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStopResponse' from JSON`,
  );
}
