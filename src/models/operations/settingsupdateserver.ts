/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SettingsUpdateServerSecurity = {
  authorization: string;
};

/** @internal */
export const SettingsUpdateServerSecurity$inboundSchema: z.ZodType<
  SettingsUpdateServerSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type SettingsUpdateServerSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const SettingsUpdateServerSecurity$outboundSchema: z.ZodType<
  SettingsUpdateServerSecurity$Outbound,
  z.ZodTypeDef,
  SettingsUpdateServerSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SettingsUpdateServerSecurity$ {
  /** @deprecated use `SettingsUpdateServerSecurity$inboundSchema` instead. */
  export const inboundSchema = SettingsUpdateServerSecurity$inboundSchema;
  /** @deprecated use `SettingsUpdateServerSecurity$outboundSchema` instead. */
  export const outboundSchema = SettingsUpdateServerSecurity$outboundSchema;
  /** @deprecated use `SettingsUpdateServerSecurity$Outbound` instead. */
  export type Outbound = SettingsUpdateServerSecurity$Outbound;
}

export function settingsUpdateServerSecurityToJSON(
  settingsUpdateServerSecurity: SettingsUpdateServerSecurity,
): string {
  return JSON.stringify(
    SettingsUpdateServerSecurity$outboundSchema.parse(
      settingsUpdateServerSecurity,
    ),
  );
}

export function settingsUpdateServerSecurityFromJSON(
  jsonString: string,
): SafeParseResult<SettingsUpdateServerSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SettingsUpdateServerSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SettingsUpdateServerSecurity' from JSON`,
  );
}
