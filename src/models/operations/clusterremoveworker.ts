/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ClusterRemoveWorkerSecurity = {
  authorization: string;
};

export type ClusterRemoveWorkerRequest = {
  nodeId: string;
  serverId?: string | undefined;
};

/** @internal */
export const ClusterRemoveWorkerSecurity$inboundSchema: z.ZodType<
  ClusterRemoveWorkerSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type ClusterRemoveWorkerSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const ClusterRemoveWorkerSecurity$outboundSchema: z.ZodType<
  ClusterRemoveWorkerSecurity$Outbound,
  z.ZodTypeDef,
  ClusterRemoveWorkerSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClusterRemoveWorkerSecurity$ {
  /** @deprecated use `ClusterRemoveWorkerSecurity$inboundSchema` instead. */
  export const inboundSchema = ClusterRemoveWorkerSecurity$inboundSchema;
  /** @deprecated use `ClusterRemoveWorkerSecurity$outboundSchema` instead. */
  export const outboundSchema = ClusterRemoveWorkerSecurity$outboundSchema;
  /** @deprecated use `ClusterRemoveWorkerSecurity$Outbound` instead. */
  export type Outbound = ClusterRemoveWorkerSecurity$Outbound;
}

export function clusterRemoveWorkerSecurityToJSON(
  clusterRemoveWorkerSecurity: ClusterRemoveWorkerSecurity,
): string {
  return JSON.stringify(
    ClusterRemoveWorkerSecurity$outboundSchema.parse(
      clusterRemoveWorkerSecurity,
    ),
  );
}

export function clusterRemoveWorkerSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ClusterRemoveWorkerSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClusterRemoveWorkerSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClusterRemoveWorkerSecurity' from JSON`,
  );
}

/** @internal */
export const ClusterRemoveWorkerRequest$inboundSchema: z.ZodType<
  ClusterRemoveWorkerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  nodeId: z.string(),
  serverId: z.string().optional(),
});

/** @internal */
export type ClusterRemoveWorkerRequest$Outbound = {
  nodeId: string;
  serverId?: string | undefined;
};

/** @internal */
export const ClusterRemoveWorkerRequest$outboundSchema: z.ZodType<
  ClusterRemoveWorkerRequest$Outbound,
  z.ZodTypeDef,
  ClusterRemoveWorkerRequest
> = z.object({
  nodeId: z.string(),
  serverId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClusterRemoveWorkerRequest$ {
  /** @deprecated use `ClusterRemoveWorkerRequest$inboundSchema` instead. */
  export const inboundSchema = ClusterRemoveWorkerRequest$inboundSchema;
  /** @deprecated use `ClusterRemoveWorkerRequest$outboundSchema` instead. */
  export const outboundSchema = ClusterRemoveWorkerRequest$outboundSchema;
  /** @deprecated use `ClusterRemoveWorkerRequest$Outbound` instead. */
  export type Outbound = ClusterRemoveWorkerRequest$Outbound;
}

export function clusterRemoveWorkerRequestToJSON(
  clusterRemoveWorkerRequest: ClusterRemoveWorkerRequest,
): string {
  return JSON.stringify(
    ClusterRemoveWorkerRequest$outboundSchema.parse(clusterRemoveWorkerRequest),
  );
}

export function clusterRemoveWorkerRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClusterRemoveWorkerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClusterRemoveWorkerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClusterRemoveWorkerRequest' from JSON`,
  );
}
