/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type EnvironmentByProjectIdRequest = {
  projectId: string;
};

export const EnvironmentByProjectIdApplicationApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type EnvironmentByProjectIdApplicationApplicationStatus = ClosedEnum<
  typeof EnvironmentByProjectIdApplicationApplicationStatus
>;

export const EnvironmentByProjectIdBuildType = {
  Dockerfile: "dockerfile",
  HerokuBuildpacks: "heroku_buildpacks",
  PaketoBuildpacks: "paketo_buildpacks",
  Nixpacks: "nixpacks",
  Static: "static",
  Railpack: "railpack",
} as const;
export type EnvironmentByProjectIdBuildType = ClosedEnum<
  typeof EnvironmentByProjectIdBuildType
>;

export const EnvironmentByProjectIdHealthCheckSwarmApplicationEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdHealthCheckSwarmApplicationEnum = ClosedEnum<
  typeof EnvironmentByProjectIdHealthCheckSwarmApplicationEnum
>;

export type EnvironmentByProjectIdHealthCheckSwarmApplicationUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdHealthCheckSwarmApplicationEnum;

export type EnvironmentByProjectIdApplicationHealthCheckSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdHealthCheckSwarmApplicationEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdLabelsSwarmApplicationEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdLabelsSwarmApplicationEnum = ClosedEnum<
  typeof EnvironmentByProjectIdLabelsSwarmApplicationEnum
>;

export type EnvironmentByProjectIdLabelsSwarmApplicationUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdLabelsSwarmApplicationEnum;

export type EnvironmentByProjectIdApplicationLabelsSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdLabelsSwarmApplicationEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdModeSwarmApplicationEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdModeSwarmApplicationEnum = ClosedEnum<
  typeof EnvironmentByProjectIdModeSwarmApplicationEnum
>;

export type EnvironmentByProjectIdModeSwarmApplicationUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdModeSwarmApplicationEnum;

export type EnvironmentByProjectIdApplicationModeSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdModeSwarmApplicationEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdNetworkSwarmApplicationEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdNetworkSwarmApplicationEnum = ClosedEnum<
  typeof EnvironmentByProjectIdNetworkSwarmApplicationEnum
>;

export type EnvironmentByProjectIdNetworkSwarmApplicationUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdNetworkSwarmApplicationEnum;

export type EnvironmentByProjectIdApplicationNetworkSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdNetworkSwarmApplicationEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdPlacementSwarmApplicationEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdPlacementSwarmApplicationEnum = ClosedEnum<
  typeof EnvironmentByProjectIdPlacementSwarmApplicationEnum
>;

export type EnvironmentByProjectIdPlacementSwarmApplicationUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdPlacementSwarmApplicationEnum;

export type EnvironmentByProjectIdApplicationPlacementSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdPlacementSwarmApplicationEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdPreviewCertificateType = {
  Letsencrypt: "letsencrypt",
  None: "none",
  Custom: "custom",
} as const;
export type EnvironmentByProjectIdPreviewCertificateType = ClosedEnum<
  typeof EnvironmentByProjectIdPreviewCertificateType
>;

export const EnvironmentByProjectIdRestartPolicySwarmApplicationEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdRestartPolicySwarmApplicationEnum =
  ClosedEnum<typeof EnvironmentByProjectIdRestartPolicySwarmApplicationEnum>;

export type EnvironmentByProjectIdRestartPolicySwarmApplicationUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdRestartPolicySwarmApplicationEnum;

export type EnvironmentByProjectIdApplicationRestartPolicySwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdRestartPolicySwarmApplicationEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdRollbackConfigSwarmApplicationEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdRollbackConfigSwarmApplicationEnum =
  ClosedEnum<typeof EnvironmentByProjectIdRollbackConfigSwarmApplicationEnum>;

export type EnvironmentByProjectIdRollbackConfigSwarmApplicationUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdRollbackConfigSwarmApplicationEnum;

export type EnvironmentByProjectIdApplicationRollbackConfigSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdRollbackConfigSwarmApplicationEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdApplicationSourceType = {
  Docker: "docker",
  Git: "git",
  Github: "github",
  Gitlab: "gitlab",
  Bitbucket: "bitbucket",
  Gitea: "gitea",
  Drop: "drop",
} as const;
export type EnvironmentByProjectIdApplicationSourceType = ClosedEnum<
  typeof EnvironmentByProjectIdApplicationSourceType
>;

export const EnvironmentByProjectIdApplicationTriggerType = {
  Push: "push",
  Tag: "tag",
} as const;
export type EnvironmentByProjectIdApplicationTriggerType = ClosedEnum<
  typeof EnvironmentByProjectIdApplicationTriggerType
>;

export const EnvironmentByProjectIdUpdateConfigSwarmApplicationEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdUpdateConfigSwarmApplicationEnum = ClosedEnum<
  typeof EnvironmentByProjectIdUpdateConfigSwarmApplicationEnum
>;

export type EnvironmentByProjectIdUpdateConfigSwarmApplicationUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdUpdateConfigSwarmApplicationEnum;

export type EnvironmentByProjectIdApplicationUpdateConfigSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdUpdateConfigSwarmApplicationEnum
  | Array<any>
  | { [k: string]: any };

export type EnvironmentByProjectIdApplication = {
  appName: string;
  applicationId: string;
  applicationStatus: EnvironmentByProjectIdApplicationApplicationStatus;
  autoDeploy: boolean | null;
  bitbucketBranch: string | null;
  bitbucketBuildPath: string | null;
  bitbucketId: string | null;
  bitbucketOwner: string | null;
  bitbucketRepository: string | null;
  branch: string | null;
  buildArgs: string | null;
  buildPath: string | null;
  buildType: EnvironmentByProjectIdBuildType;
  cleanCache: boolean | null;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  customGitBranch: string | null;
  customGitBuildPath: string | null;
  customGitSSHKeyId: string | null;
  customGitUrl: string | null;
  description: string | null;
  dockerBuildStage: string | null;
  dockerContextPath: string | null;
  dockerImage: string | null;
  dockerfile: string | null;
  dropBuildPath: string | null;
  enableSubmodules: boolean;
  enabled: boolean | null;
  env: string | null;
  environmentId: string;
  giteaBranch: string | null;
  giteaBuildPath: string | null;
  giteaId: string | null;
  giteaOwner: string | null;
  giteaRepository: string | null;
  githubId: string | null;
  gitlabBranch: string | null;
  gitlabBuildPath: string | null;
  gitlabId: string | null;
  gitlabOwner: string | null;
  gitlabPathNamespace: string | null;
  gitlabProjectId: number | null;
  gitlabRepository: string | null;
  healthCheckSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdHealthCheckSwarmApplicationEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  herokuVersion: string | null;
  isPreviewDeploymentsActive: boolean | null;
  isStaticSpa: boolean | null;
  labelsSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdLabelsSwarmApplicationEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdModeSwarmApplicationEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  name: string;
  networkSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdNetworkSwarmApplicationEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  owner: string | null;
  password: string | null;
  placementSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdPlacementSwarmApplicationEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  previewBuildArgs: string | null;
  previewCertificateType: EnvironmentByProjectIdPreviewCertificateType;
  previewCustomCertResolver: string | null;
  previewEnv: string | null;
  previewHttps: boolean;
  previewLabels: Array<string> | null;
  previewLimit: number | null;
  previewPath: string | null;
  previewPort: number | null;
  previewRequireCollaboratorPermissions: boolean | null;
  previewWildcard: string | null;
  publishDirectory: string | null;
  railpackVersion: string | null;
  refreshToken: string | null;
  registryId: string | null;
  registryUrl: string | null;
  replicas: number;
  repository: string | null;
  restartPolicySwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdRestartPolicySwarmApplicationEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  rollbackActive: boolean | null;
  rollbackConfigSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdRollbackConfigSwarmApplicationEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  serverId: string | null;
  sourceType: EnvironmentByProjectIdApplicationSourceType;
  subtitle: string | null;
  title: string | null;
  triggerType: EnvironmentByProjectIdApplicationTriggerType | null;
  updateConfigSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdUpdateConfigSwarmApplicationEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  username: string | null;
  watchPaths: Array<string> | null;
};

export const EnvironmentByProjectIdComposeStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type EnvironmentByProjectIdComposeStatus = ClosedEnum<
  typeof EnvironmentByProjectIdComposeStatus
>;

export const EnvironmentByProjectIdComposeType = {
  DockerCompose: "docker-compose",
  Stack: "stack",
} as const;
export type EnvironmentByProjectIdComposeType = ClosedEnum<
  typeof EnvironmentByProjectIdComposeType
>;

export const EnvironmentByProjectIdComposeSourceType = {
  Git: "git",
  Github: "github",
  Gitlab: "gitlab",
  Bitbucket: "bitbucket",
  Gitea: "gitea",
  Raw: "raw",
} as const;
export type EnvironmentByProjectIdComposeSourceType = ClosedEnum<
  typeof EnvironmentByProjectIdComposeSourceType
>;

export const EnvironmentByProjectIdComposeTriggerType = {
  Push: "push",
  Tag: "tag",
} as const;
export type EnvironmentByProjectIdComposeTriggerType = ClosedEnum<
  typeof EnvironmentByProjectIdComposeTriggerType
>;

export type EnvironmentByProjectIdCompose = {
  appName: string;
  autoDeploy: boolean | null;
  bitbucketBranch: string | null;
  bitbucketId: string | null;
  bitbucketOwner: string | null;
  bitbucketRepository: string | null;
  branch: string | null;
  command: string;
  composeFile: string;
  composeId: string;
  composePath: string;
  composeStatus: EnvironmentByProjectIdComposeStatus;
  composeType: EnvironmentByProjectIdComposeType;
  createdAt: string;
  customGitBranch: string | null;
  customGitSSHKeyId: string | null;
  customGitUrl: string | null;
  description: string | null;
  enableSubmodules: boolean;
  env: string | null;
  environmentId: string;
  giteaBranch: string | null;
  giteaId: string | null;
  giteaOwner: string | null;
  giteaRepository: string | null;
  githubId: string | null;
  gitlabBranch: string | null;
  gitlabId: string | null;
  gitlabOwner: string | null;
  gitlabPathNamespace: string | null;
  gitlabProjectId: number | null;
  gitlabRepository: string | null;
  isolatedDeployment: boolean;
  isolatedDeploymentsVolume: boolean;
  name: string;
  owner: string | null;
  randomize: boolean;
  refreshToken: string | null;
  repository: string | null;
  serverId: string | null;
  sourceType: EnvironmentByProjectIdComposeSourceType;
  suffix: string;
  triggerType: EnvironmentByProjectIdComposeTriggerType | null;
  watchPaths: Array<string> | null;
};

export const EnvironmentByProjectIdMariadbApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type EnvironmentByProjectIdMariadbApplicationStatus = ClosedEnum<
  typeof EnvironmentByProjectIdMariadbApplicationStatus
>;

export const EnvironmentByProjectIdHealthCheckSwarmMariadbEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdHealthCheckSwarmMariadbEnum = ClosedEnum<
  typeof EnvironmentByProjectIdHealthCheckSwarmMariadbEnum
>;

export type EnvironmentByProjectIdHealthCheckSwarmMariadbUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdHealthCheckSwarmMariadbEnum;

export type EnvironmentByProjectIdMariadbHealthCheckSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdHealthCheckSwarmMariadbEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdLabelsSwarmMariadbEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdLabelsSwarmMariadbEnum = ClosedEnum<
  typeof EnvironmentByProjectIdLabelsSwarmMariadbEnum
>;

export type EnvironmentByProjectIdLabelsSwarmMariadbUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdLabelsSwarmMariadbEnum;

export type EnvironmentByProjectIdMariadbLabelsSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdLabelsSwarmMariadbEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdModeSwarmMariadbEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdModeSwarmMariadbEnum = ClosedEnum<
  typeof EnvironmentByProjectIdModeSwarmMariadbEnum
>;

export type EnvironmentByProjectIdModeSwarmMariadbUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdModeSwarmMariadbEnum;

export type EnvironmentByProjectIdMariadbModeSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdModeSwarmMariadbEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdNetworkSwarmMariadbEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdNetworkSwarmMariadbEnum = ClosedEnum<
  typeof EnvironmentByProjectIdNetworkSwarmMariadbEnum
>;

export type EnvironmentByProjectIdNetworkSwarmMariadbUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdNetworkSwarmMariadbEnum;

export type EnvironmentByProjectIdMariadbNetworkSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdNetworkSwarmMariadbEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdPlacementSwarmMariadbEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdPlacementSwarmMariadbEnum = ClosedEnum<
  typeof EnvironmentByProjectIdPlacementSwarmMariadbEnum
>;

export type EnvironmentByProjectIdPlacementSwarmMariadbUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdPlacementSwarmMariadbEnum;

export type EnvironmentByProjectIdMariadbPlacementSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdPlacementSwarmMariadbEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdRestartPolicySwarmMariadbEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdRestartPolicySwarmMariadbEnum = ClosedEnum<
  typeof EnvironmentByProjectIdRestartPolicySwarmMariadbEnum
>;

export type EnvironmentByProjectIdRestartPolicySwarmMariadbUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdRestartPolicySwarmMariadbEnum;

export type EnvironmentByProjectIdMariadbRestartPolicySwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdRestartPolicySwarmMariadbEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdRollbackConfigSwarmMariadbEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdRollbackConfigSwarmMariadbEnum = ClosedEnum<
  typeof EnvironmentByProjectIdRollbackConfigSwarmMariadbEnum
>;

export type EnvironmentByProjectIdRollbackConfigSwarmMariadbUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdRollbackConfigSwarmMariadbEnum;

export type EnvironmentByProjectIdMariadbRollbackConfigSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdRollbackConfigSwarmMariadbEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdUpdateConfigSwarmMariadbEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdUpdateConfigSwarmMariadbEnum = ClosedEnum<
  typeof EnvironmentByProjectIdUpdateConfigSwarmMariadbEnum
>;

export type EnvironmentByProjectIdUpdateConfigSwarmMariadbUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdUpdateConfigSwarmMariadbEnum;

export type EnvironmentByProjectIdMariadbUpdateConfigSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdUpdateConfigSwarmMariadbEnum
  | Array<any>
  | { [k: string]: any };

export type EnvironmentByProjectIdMariadb = {
  appName: string;
  applicationStatus: EnvironmentByProjectIdMariadbApplicationStatus;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databaseName: string;
  databasePassword: string;
  databaseRootPassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdHealthCheckSwarmMariadbEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  labelsSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdLabelsSwarmMariadbEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  mariadbId: string;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdModeSwarmMariadbEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  name: string;
  networkSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdNetworkSwarmMariadbEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  placementSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdPlacementSwarmMariadbEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  replicas: number;
  restartPolicySwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdRestartPolicySwarmMariadbEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  rollbackConfigSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdRollbackConfigSwarmMariadbEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  serverId: string | null;
  updateConfigSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdUpdateConfigSwarmMariadbEnum
    | Array<any>
    | { [k: string]: any }
    | null;
};

export const EnvironmentByProjectIdMongoApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type EnvironmentByProjectIdMongoApplicationStatus = ClosedEnum<
  typeof EnvironmentByProjectIdMongoApplicationStatus
>;

export const EnvironmentByProjectIdHealthCheckSwarmMongoEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdHealthCheckSwarmMongoEnum = ClosedEnum<
  typeof EnvironmentByProjectIdHealthCheckSwarmMongoEnum
>;

export type EnvironmentByProjectIdHealthCheckSwarmMongoUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdHealthCheckSwarmMongoEnum;

export type EnvironmentByProjectIdMongoHealthCheckSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdHealthCheckSwarmMongoEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdLabelsSwarmMongoEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdLabelsSwarmMongoEnum = ClosedEnum<
  typeof EnvironmentByProjectIdLabelsSwarmMongoEnum
>;

export type EnvironmentByProjectIdLabelsSwarmMongoUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdLabelsSwarmMongoEnum;

export type EnvironmentByProjectIdMongoLabelsSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdLabelsSwarmMongoEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdModeSwarmMongoEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdModeSwarmMongoEnum = ClosedEnum<
  typeof EnvironmentByProjectIdModeSwarmMongoEnum
>;

export type EnvironmentByProjectIdModeSwarmMongoUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdModeSwarmMongoEnum;

export type EnvironmentByProjectIdMongoModeSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdModeSwarmMongoEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdNetworkSwarmMongoEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdNetworkSwarmMongoEnum = ClosedEnum<
  typeof EnvironmentByProjectIdNetworkSwarmMongoEnum
>;

export type EnvironmentByProjectIdNetworkSwarmMongoUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdNetworkSwarmMongoEnum;

export type EnvironmentByProjectIdMongoNetworkSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdNetworkSwarmMongoEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdPlacementSwarmMongoEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdPlacementSwarmMongoEnum = ClosedEnum<
  typeof EnvironmentByProjectIdPlacementSwarmMongoEnum
>;

export type EnvironmentByProjectIdPlacementSwarmMongoUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdPlacementSwarmMongoEnum;

export type EnvironmentByProjectIdMongoPlacementSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdPlacementSwarmMongoEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdRestartPolicySwarmMongoEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdRestartPolicySwarmMongoEnum = ClosedEnum<
  typeof EnvironmentByProjectIdRestartPolicySwarmMongoEnum
>;

export type EnvironmentByProjectIdRestartPolicySwarmMongoUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdRestartPolicySwarmMongoEnum;

export type EnvironmentByProjectIdMongoRestartPolicySwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdRestartPolicySwarmMongoEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdRollbackConfigSwarmMongoEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdRollbackConfigSwarmMongoEnum = ClosedEnum<
  typeof EnvironmentByProjectIdRollbackConfigSwarmMongoEnum
>;

export type EnvironmentByProjectIdRollbackConfigSwarmMongoUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdRollbackConfigSwarmMongoEnum;

export type EnvironmentByProjectIdMongoRollbackConfigSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdRollbackConfigSwarmMongoEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdUpdateConfigSwarmMongoEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdUpdateConfigSwarmMongoEnum = ClosedEnum<
  typeof EnvironmentByProjectIdUpdateConfigSwarmMongoEnum
>;

export type EnvironmentByProjectIdUpdateConfigSwarmMongoUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdUpdateConfigSwarmMongoEnum;

export type EnvironmentByProjectIdMongoUpdateConfigSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdUpdateConfigSwarmMongoEnum
  | Array<any>
  | { [k: string]: any };

export type EnvironmentByProjectIdMongo = {
  appName: string;
  applicationStatus: EnvironmentByProjectIdMongoApplicationStatus;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databasePassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdHealthCheckSwarmMongoEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  labelsSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdLabelsSwarmMongoEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdModeSwarmMongoEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  mongoId: string;
  name: string;
  networkSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdNetworkSwarmMongoEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  placementSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdPlacementSwarmMongoEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  replicaSets: boolean | null;
  replicas: number;
  restartPolicySwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdRestartPolicySwarmMongoEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  rollbackConfigSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdRollbackConfigSwarmMongoEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  serverId: string | null;
  updateConfigSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdUpdateConfigSwarmMongoEnum
    | Array<any>
    | { [k: string]: any }
    | null;
};

export const EnvironmentByProjectIdMysqlApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type EnvironmentByProjectIdMysqlApplicationStatus = ClosedEnum<
  typeof EnvironmentByProjectIdMysqlApplicationStatus
>;

export const EnvironmentByProjectIdHealthCheckSwarmMysqlEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdHealthCheckSwarmMysqlEnum = ClosedEnum<
  typeof EnvironmentByProjectIdHealthCheckSwarmMysqlEnum
>;

export type EnvironmentByProjectIdHealthCheckSwarmMysqlUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdHealthCheckSwarmMysqlEnum;

export type EnvironmentByProjectIdMysqlHealthCheckSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdHealthCheckSwarmMysqlEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdLabelsSwarmMysqlEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdLabelsSwarmMysqlEnum = ClosedEnum<
  typeof EnvironmentByProjectIdLabelsSwarmMysqlEnum
>;

export type EnvironmentByProjectIdLabelsSwarmMysqlUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdLabelsSwarmMysqlEnum;

export type EnvironmentByProjectIdMysqlLabelsSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdLabelsSwarmMysqlEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdModeSwarmMysqlEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdModeSwarmMysqlEnum = ClosedEnum<
  typeof EnvironmentByProjectIdModeSwarmMysqlEnum
>;

export type EnvironmentByProjectIdModeSwarmMysqlUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdModeSwarmMysqlEnum;

export type EnvironmentByProjectIdMysqlModeSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdModeSwarmMysqlEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdNetworkSwarmMysqlEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdNetworkSwarmMysqlEnum = ClosedEnum<
  typeof EnvironmentByProjectIdNetworkSwarmMysqlEnum
>;

export type EnvironmentByProjectIdNetworkSwarmMysqlUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdNetworkSwarmMysqlEnum;

export type EnvironmentByProjectIdMysqlNetworkSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdNetworkSwarmMysqlEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdPlacementSwarmMysqlEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdPlacementSwarmMysqlEnum = ClosedEnum<
  typeof EnvironmentByProjectIdPlacementSwarmMysqlEnum
>;

export type EnvironmentByProjectIdPlacementSwarmMysqlUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdPlacementSwarmMysqlEnum;

export type EnvironmentByProjectIdMysqlPlacementSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdPlacementSwarmMysqlEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdRestartPolicySwarmMysqlEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdRestartPolicySwarmMysqlEnum = ClosedEnum<
  typeof EnvironmentByProjectIdRestartPolicySwarmMysqlEnum
>;

export type EnvironmentByProjectIdRestartPolicySwarmMysqlUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdRestartPolicySwarmMysqlEnum;

export type EnvironmentByProjectIdMysqlRestartPolicySwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdRestartPolicySwarmMysqlEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdRollbackConfigSwarmMysqlEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdRollbackConfigSwarmMysqlEnum = ClosedEnum<
  typeof EnvironmentByProjectIdRollbackConfigSwarmMysqlEnum
>;

export type EnvironmentByProjectIdRollbackConfigSwarmMysqlUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdRollbackConfigSwarmMysqlEnum;

export type EnvironmentByProjectIdMysqlRollbackConfigSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdRollbackConfigSwarmMysqlEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdUpdateConfigSwarmMysqlEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdUpdateConfigSwarmMysqlEnum = ClosedEnum<
  typeof EnvironmentByProjectIdUpdateConfigSwarmMysqlEnum
>;

export type EnvironmentByProjectIdUpdateConfigSwarmMysqlUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdUpdateConfigSwarmMysqlEnum;

export type EnvironmentByProjectIdMysqlUpdateConfigSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdUpdateConfigSwarmMysqlEnum
  | Array<any>
  | { [k: string]: any };

export type EnvironmentByProjectIdMysql = {
  appName: string;
  applicationStatus: EnvironmentByProjectIdMysqlApplicationStatus;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databaseName: string;
  databasePassword: string;
  databaseRootPassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdHealthCheckSwarmMysqlEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  labelsSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdLabelsSwarmMysqlEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdModeSwarmMysqlEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  mysqlId: string;
  name: string;
  networkSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdNetworkSwarmMysqlEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  placementSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdPlacementSwarmMysqlEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  replicas: number;
  restartPolicySwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdRestartPolicySwarmMysqlEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  rollbackConfigSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdRollbackConfigSwarmMysqlEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  serverId: string | null;
  updateConfigSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdUpdateConfigSwarmMysqlEnum
    | Array<any>
    | { [k: string]: any }
    | null;
};

export const EnvironmentByProjectIdPostgreApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type EnvironmentByProjectIdPostgreApplicationStatus = ClosedEnum<
  typeof EnvironmentByProjectIdPostgreApplicationStatus
>;

export const EnvironmentByProjectIdHealthCheckSwarmPostgreEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdHealthCheckSwarmPostgreEnum = ClosedEnum<
  typeof EnvironmentByProjectIdHealthCheckSwarmPostgreEnum
>;

export type EnvironmentByProjectIdHealthCheckSwarmPostgreUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdHealthCheckSwarmPostgreEnum;

export type EnvironmentByProjectIdPostgreHealthCheckSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdHealthCheckSwarmPostgreEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdLabelsSwarmPostgreEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdLabelsSwarmPostgreEnum = ClosedEnum<
  typeof EnvironmentByProjectIdLabelsSwarmPostgreEnum
>;

export type EnvironmentByProjectIdLabelsSwarmPostgreUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdLabelsSwarmPostgreEnum;

export type EnvironmentByProjectIdPostgreLabelsSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdLabelsSwarmPostgreEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdModeSwarmPostgreEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdModeSwarmPostgreEnum = ClosedEnum<
  typeof EnvironmentByProjectIdModeSwarmPostgreEnum
>;

export type EnvironmentByProjectIdModeSwarmPostgreUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdModeSwarmPostgreEnum;

export type EnvironmentByProjectIdPostgreModeSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdModeSwarmPostgreEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdNetworkSwarmPostgreEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdNetworkSwarmPostgreEnum = ClosedEnum<
  typeof EnvironmentByProjectIdNetworkSwarmPostgreEnum
>;

export type EnvironmentByProjectIdNetworkSwarmPostgreUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdNetworkSwarmPostgreEnum;

export type EnvironmentByProjectIdPostgreNetworkSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdNetworkSwarmPostgreEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdPlacementSwarmPostgreEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdPlacementSwarmPostgreEnum = ClosedEnum<
  typeof EnvironmentByProjectIdPlacementSwarmPostgreEnum
>;

export type EnvironmentByProjectIdPlacementSwarmPostgreUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdPlacementSwarmPostgreEnum;

export type EnvironmentByProjectIdPostgrePlacementSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdPlacementSwarmPostgreEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdRestartPolicySwarmPostgreEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdRestartPolicySwarmPostgreEnum = ClosedEnum<
  typeof EnvironmentByProjectIdRestartPolicySwarmPostgreEnum
>;

export type EnvironmentByProjectIdRestartPolicySwarmPostgreUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdRestartPolicySwarmPostgreEnum;

export type EnvironmentByProjectIdPostgreRestartPolicySwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdRestartPolicySwarmPostgreEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdRollbackConfigSwarmPostgreEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdRollbackConfigSwarmPostgreEnum = ClosedEnum<
  typeof EnvironmentByProjectIdRollbackConfigSwarmPostgreEnum
>;

export type EnvironmentByProjectIdRollbackConfigSwarmPostgreUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdRollbackConfigSwarmPostgreEnum;

export type EnvironmentByProjectIdPostgreRollbackConfigSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdRollbackConfigSwarmPostgreEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdUpdateConfigSwarmPostgreEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdUpdateConfigSwarmPostgreEnum = ClosedEnum<
  typeof EnvironmentByProjectIdUpdateConfigSwarmPostgreEnum
>;

export type EnvironmentByProjectIdUpdateConfigSwarmPostgreUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdUpdateConfigSwarmPostgreEnum;

export type EnvironmentByProjectIdPostgreUpdateConfigSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdUpdateConfigSwarmPostgreEnum
  | Array<any>
  | { [k: string]: any };

export type EnvironmentByProjectIdPostgre = {
  appName: string;
  applicationStatus: EnvironmentByProjectIdPostgreApplicationStatus;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databaseName: string;
  databasePassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdHealthCheckSwarmPostgreEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  labelsSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdLabelsSwarmPostgreEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdModeSwarmPostgreEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  name: string;
  networkSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdNetworkSwarmPostgreEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  placementSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdPlacementSwarmPostgreEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  postgresId: string;
  replicas: number;
  restartPolicySwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdRestartPolicySwarmPostgreEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  rollbackConfigSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdRollbackConfigSwarmPostgreEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  serverId: string | null;
  updateConfigSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdUpdateConfigSwarmPostgreEnum
    | Array<any>
    | { [k: string]: any }
    | null;
};

export type EnvironmentByProjectIdProject = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

export const EnvironmentByProjectIdRediApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type EnvironmentByProjectIdRediApplicationStatus = ClosedEnum<
  typeof EnvironmentByProjectIdRediApplicationStatus
>;

export const EnvironmentByProjectIdHealthCheckSwarmRediEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdHealthCheckSwarmRediEnum = ClosedEnum<
  typeof EnvironmentByProjectIdHealthCheckSwarmRediEnum
>;

export type EnvironmentByProjectIdHealthCheckSwarmRediUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdHealthCheckSwarmRediEnum;

export type EnvironmentByProjectIdRediHealthCheckSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdHealthCheckSwarmRediEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdLabelsSwarmRediEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdLabelsSwarmRediEnum = ClosedEnum<
  typeof EnvironmentByProjectIdLabelsSwarmRediEnum
>;

export type EnvironmentByProjectIdLabelsSwarmRediUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdLabelsSwarmRediEnum;

export type EnvironmentByProjectIdRediLabelsSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdLabelsSwarmRediEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdModeSwarmRediEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdModeSwarmRediEnum = ClosedEnum<
  typeof EnvironmentByProjectIdModeSwarmRediEnum
>;

export type EnvironmentByProjectIdModeSwarmRediUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdModeSwarmRediEnum;

export type EnvironmentByProjectIdRediModeSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdModeSwarmRediEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdNetworkSwarmRediEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdNetworkSwarmRediEnum = ClosedEnum<
  typeof EnvironmentByProjectIdNetworkSwarmRediEnum
>;

export type EnvironmentByProjectIdNetworkSwarmRediUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdNetworkSwarmRediEnum;

export type EnvironmentByProjectIdRediNetworkSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdNetworkSwarmRediEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdPlacementSwarmRediEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdPlacementSwarmRediEnum = ClosedEnum<
  typeof EnvironmentByProjectIdPlacementSwarmRediEnum
>;

export type EnvironmentByProjectIdPlacementSwarmRediUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdPlacementSwarmRediEnum;

export type EnvironmentByProjectIdRediPlacementSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdPlacementSwarmRediEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdRestartPolicySwarmRediEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdRestartPolicySwarmRediEnum = ClosedEnum<
  typeof EnvironmentByProjectIdRestartPolicySwarmRediEnum
>;

export type EnvironmentByProjectIdRestartPolicySwarmRediUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdRestartPolicySwarmRediEnum;

export type EnvironmentByProjectIdRediRestartPolicySwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdRestartPolicySwarmRediEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdRollbackConfigSwarmRediEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdRollbackConfigSwarmRediEnum = ClosedEnum<
  typeof EnvironmentByProjectIdRollbackConfigSwarmRediEnum
>;

export type EnvironmentByProjectIdRollbackConfigSwarmRediUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdRollbackConfigSwarmRediEnum;

export type EnvironmentByProjectIdRediRollbackConfigSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdRollbackConfigSwarmRediEnum
  | Array<any>
  | { [k: string]: any };

export const EnvironmentByProjectIdUpdateConfigSwarmRediEnum = {
  Null: "null",
} as const;
export type EnvironmentByProjectIdUpdateConfigSwarmRediEnum = ClosedEnum<
  typeof EnvironmentByProjectIdUpdateConfigSwarmRediEnum
>;

export type EnvironmentByProjectIdUpdateConfigSwarmRediUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdUpdateConfigSwarmRediEnum;

export type EnvironmentByProjectIdRediUpdateConfigSwarmUnion =
  | string
  | number
  | boolean
  | EnvironmentByProjectIdUpdateConfigSwarmRediEnum
  | Array<any>
  | { [k: string]: any };

export type EnvironmentByProjectIdRedi = {
  appName: string;
  applicationStatus: EnvironmentByProjectIdRediApplicationStatus;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databasePassword: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdHealthCheckSwarmRediEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  labelsSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdLabelsSwarmRediEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdModeSwarmRediEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  name: string;
  networkSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdNetworkSwarmRediEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  placementSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdPlacementSwarmRediEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  redisId: string;
  replicas: number;
  restartPolicySwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdRestartPolicySwarmRediEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  rollbackConfigSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdRollbackConfigSwarmRediEnum
    | Array<any>
    | { [k: string]: any }
    | null;
  serverId: string | null;
  updateConfigSwarm:
    | string
    | number
    | boolean
    | EnvironmentByProjectIdUpdateConfigSwarmRediEnum
    | Array<any>
    | { [k: string]: any }
    | null;
};

export type EnvironmentByProjectIdResponseBody = {
  applications: Array<EnvironmentByProjectIdApplication>;
  compose: Array<EnvironmentByProjectIdCompose>;
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  mariadb: Array<EnvironmentByProjectIdMariadb>;
  mongo: Array<EnvironmentByProjectIdMongo>;
  mysql: Array<EnvironmentByProjectIdMysql>;
  name: string;
  postgres: Array<EnvironmentByProjectIdPostgre>;
  project: EnvironmentByProjectIdProject;
  projectId: string;
  redis: Array<EnvironmentByProjectIdRedi>;
};

export type EnvironmentByProjectIdResponse =
  | models.ErrorT
  | Array<EnvironmentByProjectIdResponseBody>;

/** @internal */
export const EnvironmentByProjectIdRequest$inboundSchema: z.ZodType<
  EnvironmentByProjectIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
});

/** @internal */
export type EnvironmentByProjectIdRequest$Outbound = {
  projectId: string;
};

/** @internal */
export const EnvironmentByProjectIdRequest$outboundSchema: z.ZodType<
  EnvironmentByProjectIdRequest$Outbound,
  z.ZodTypeDef,
  EnvironmentByProjectIdRequest
> = z.object({
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRequest$ {
  /** @deprecated use `EnvironmentByProjectIdRequest$inboundSchema` instead. */
  export const inboundSchema = EnvironmentByProjectIdRequest$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRequest$outboundSchema` instead. */
  export const outboundSchema = EnvironmentByProjectIdRequest$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRequest$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdRequest$Outbound;
}

export function environmentByProjectIdRequestToJSON(
  environmentByProjectIdRequest: EnvironmentByProjectIdRequest,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdRequest$outboundSchema.parse(
      environmentByProjectIdRequest,
    ),
  );
}

export function environmentByProjectIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentByProjectIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentByProjectIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentByProjectIdRequest' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdApplicationApplicationStatus$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdApplicationApplicationStatus> = z
    .nativeEnum(EnvironmentByProjectIdApplicationApplicationStatus);

/** @internal */
export const EnvironmentByProjectIdApplicationApplicationStatus$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdApplicationApplicationStatus> =
    EnvironmentByProjectIdApplicationApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdApplicationApplicationStatus$ {
  /** @deprecated use `EnvironmentByProjectIdApplicationApplicationStatus$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdApplicationApplicationStatus$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdApplicationApplicationStatus$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdApplicationApplicationStatus$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdBuildType$inboundSchema: z.ZodNativeEnum<
  typeof EnvironmentByProjectIdBuildType
> = z.nativeEnum(EnvironmentByProjectIdBuildType);

/** @internal */
export const EnvironmentByProjectIdBuildType$outboundSchema: z.ZodNativeEnum<
  typeof EnvironmentByProjectIdBuildType
> = EnvironmentByProjectIdBuildType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdBuildType$ {
  /** @deprecated use `EnvironmentByProjectIdBuildType$inboundSchema` instead. */
  export const inboundSchema = EnvironmentByProjectIdBuildType$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdBuildType$outboundSchema` instead. */
  export const outboundSchema = EnvironmentByProjectIdBuildType$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdHealthCheckSwarmApplicationEnum$inboundSchema:
  z.ZodNativeEnum<
    typeof EnvironmentByProjectIdHealthCheckSwarmApplicationEnum
  > = z.nativeEnum(EnvironmentByProjectIdHealthCheckSwarmApplicationEnum);

/** @internal */
export const EnvironmentByProjectIdHealthCheckSwarmApplicationEnum$outboundSchema:
  z.ZodNativeEnum<
    typeof EnvironmentByProjectIdHealthCheckSwarmApplicationEnum
  > = EnvironmentByProjectIdHealthCheckSwarmApplicationEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdHealthCheckSwarmApplicationEnum$ {
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmApplicationEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdHealthCheckSwarmApplicationEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmApplicationEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdHealthCheckSwarmApplicationEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdHealthCheckSwarmApplicationUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdHealthCheckSwarmApplicationUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdHealthCheckSwarmApplicationEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdHealthCheckSwarmApplicationUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdHealthCheckSwarmApplicationUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdHealthCheckSwarmApplicationUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdHealthCheckSwarmApplicationUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdHealthCheckSwarmApplicationEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdHealthCheckSwarmApplicationUnion$ {
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmApplicationUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdHealthCheckSwarmApplicationUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmApplicationUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdHealthCheckSwarmApplicationUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmApplicationUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdHealthCheckSwarmApplicationUnion$Outbound;
}

export function environmentByProjectIdHealthCheckSwarmApplicationUnionToJSON(
  environmentByProjectIdHealthCheckSwarmApplicationUnion:
    EnvironmentByProjectIdHealthCheckSwarmApplicationUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdHealthCheckSwarmApplicationUnion$outboundSchema.parse(
      environmentByProjectIdHealthCheckSwarmApplicationUnion,
    ),
  );
}

export function environmentByProjectIdHealthCheckSwarmApplicationUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdHealthCheckSwarmApplicationUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdHealthCheckSwarmApplicationUnion$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentByProjectIdHealthCheckSwarmApplicationUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdApplicationHealthCheckSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdApplicationHealthCheckSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdHealthCheckSwarmApplicationEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdApplicationHealthCheckSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdApplicationHealthCheckSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdApplicationHealthCheckSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdApplicationHealthCheckSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdHealthCheckSwarmApplicationEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdApplicationHealthCheckSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdApplicationHealthCheckSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdApplicationHealthCheckSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdApplicationHealthCheckSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdApplicationHealthCheckSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdApplicationHealthCheckSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdApplicationHealthCheckSwarmUnion$Outbound;
}

export function environmentByProjectIdApplicationHealthCheckSwarmUnionToJSON(
  environmentByProjectIdApplicationHealthCheckSwarmUnion:
    EnvironmentByProjectIdApplicationHealthCheckSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdApplicationHealthCheckSwarmUnion$outboundSchema.parse(
      environmentByProjectIdApplicationHealthCheckSwarmUnion,
    ),
  );
}

export function environmentByProjectIdApplicationHealthCheckSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdApplicationHealthCheckSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdApplicationHealthCheckSwarmUnion$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentByProjectIdApplicationHealthCheckSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdLabelsSwarmApplicationEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdLabelsSwarmApplicationEnum> = z
    .nativeEnum(EnvironmentByProjectIdLabelsSwarmApplicationEnum);

/** @internal */
export const EnvironmentByProjectIdLabelsSwarmApplicationEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdLabelsSwarmApplicationEnum> =
    EnvironmentByProjectIdLabelsSwarmApplicationEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdLabelsSwarmApplicationEnum$ {
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmApplicationEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdLabelsSwarmApplicationEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmApplicationEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdLabelsSwarmApplicationEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdLabelsSwarmApplicationUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdLabelsSwarmApplicationUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdLabelsSwarmApplicationEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdLabelsSwarmApplicationUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdLabelsSwarmApplicationUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdLabelsSwarmApplicationUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdLabelsSwarmApplicationUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdLabelsSwarmApplicationEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdLabelsSwarmApplicationUnion$ {
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmApplicationUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdLabelsSwarmApplicationUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmApplicationUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdLabelsSwarmApplicationUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmApplicationUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdLabelsSwarmApplicationUnion$Outbound;
}

export function environmentByProjectIdLabelsSwarmApplicationUnionToJSON(
  environmentByProjectIdLabelsSwarmApplicationUnion:
    EnvironmentByProjectIdLabelsSwarmApplicationUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdLabelsSwarmApplicationUnion$outboundSchema.parse(
      environmentByProjectIdLabelsSwarmApplicationUnion,
    ),
  );
}

export function environmentByProjectIdLabelsSwarmApplicationUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdLabelsSwarmApplicationUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdLabelsSwarmApplicationUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdLabelsSwarmApplicationUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdApplicationLabelsSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdApplicationLabelsSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdLabelsSwarmApplicationEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdApplicationLabelsSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdApplicationLabelsSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdApplicationLabelsSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdApplicationLabelsSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdLabelsSwarmApplicationEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdApplicationLabelsSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdApplicationLabelsSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdApplicationLabelsSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdApplicationLabelsSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdApplicationLabelsSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdApplicationLabelsSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdApplicationLabelsSwarmUnion$Outbound;
}

export function environmentByProjectIdApplicationLabelsSwarmUnionToJSON(
  environmentByProjectIdApplicationLabelsSwarmUnion:
    EnvironmentByProjectIdApplicationLabelsSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdApplicationLabelsSwarmUnion$outboundSchema.parse(
      environmentByProjectIdApplicationLabelsSwarmUnion,
    ),
  );
}

export function environmentByProjectIdApplicationLabelsSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdApplicationLabelsSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdApplicationLabelsSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdApplicationLabelsSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdModeSwarmApplicationEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdModeSwarmApplicationEnum> = z
    .nativeEnum(EnvironmentByProjectIdModeSwarmApplicationEnum);

/** @internal */
export const EnvironmentByProjectIdModeSwarmApplicationEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdModeSwarmApplicationEnum> =
    EnvironmentByProjectIdModeSwarmApplicationEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdModeSwarmApplicationEnum$ {
  /** @deprecated use `EnvironmentByProjectIdModeSwarmApplicationEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdModeSwarmApplicationEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdModeSwarmApplicationEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdModeSwarmApplicationEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdModeSwarmApplicationUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdModeSwarmApplicationUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdModeSwarmApplicationEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdModeSwarmApplicationUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdModeSwarmApplicationUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdModeSwarmApplicationUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdModeSwarmApplicationUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdModeSwarmApplicationEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdModeSwarmApplicationUnion$ {
  /** @deprecated use `EnvironmentByProjectIdModeSwarmApplicationUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdModeSwarmApplicationUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdModeSwarmApplicationUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdModeSwarmApplicationUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdModeSwarmApplicationUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdModeSwarmApplicationUnion$Outbound;
}

export function environmentByProjectIdModeSwarmApplicationUnionToJSON(
  environmentByProjectIdModeSwarmApplicationUnion:
    EnvironmentByProjectIdModeSwarmApplicationUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdModeSwarmApplicationUnion$outboundSchema.parse(
      environmentByProjectIdModeSwarmApplicationUnion,
    ),
  );
}

export function environmentByProjectIdModeSwarmApplicationUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdModeSwarmApplicationUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdModeSwarmApplicationUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdModeSwarmApplicationUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdApplicationModeSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdApplicationModeSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdModeSwarmApplicationEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdApplicationModeSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdApplicationModeSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdApplicationModeSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdApplicationModeSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdModeSwarmApplicationEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdApplicationModeSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdApplicationModeSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdApplicationModeSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdApplicationModeSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdApplicationModeSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdApplicationModeSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdApplicationModeSwarmUnion$Outbound;
}

export function environmentByProjectIdApplicationModeSwarmUnionToJSON(
  environmentByProjectIdApplicationModeSwarmUnion:
    EnvironmentByProjectIdApplicationModeSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdApplicationModeSwarmUnion$outboundSchema.parse(
      environmentByProjectIdApplicationModeSwarmUnion,
    ),
  );
}

export function environmentByProjectIdApplicationModeSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdApplicationModeSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdApplicationModeSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdApplicationModeSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdNetworkSwarmApplicationEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdNetworkSwarmApplicationEnum> = z
    .nativeEnum(EnvironmentByProjectIdNetworkSwarmApplicationEnum);

/** @internal */
export const EnvironmentByProjectIdNetworkSwarmApplicationEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdNetworkSwarmApplicationEnum> =
    EnvironmentByProjectIdNetworkSwarmApplicationEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdNetworkSwarmApplicationEnum$ {
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmApplicationEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdNetworkSwarmApplicationEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmApplicationEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdNetworkSwarmApplicationEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdNetworkSwarmApplicationUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdNetworkSwarmApplicationUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdNetworkSwarmApplicationEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdNetworkSwarmApplicationUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdNetworkSwarmApplicationUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdNetworkSwarmApplicationUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdNetworkSwarmApplicationUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdNetworkSwarmApplicationEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdNetworkSwarmApplicationUnion$ {
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmApplicationUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdNetworkSwarmApplicationUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmApplicationUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdNetworkSwarmApplicationUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmApplicationUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdNetworkSwarmApplicationUnion$Outbound;
}

export function environmentByProjectIdNetworkSwarmApplicationUnionToJSON(
  environmentByProjectIdNetworkSwarmApplicationUnion:
    EnvironmentByProjectIdNetworkSwarmApplicationUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdNetworkSwarmApplicationUnion$outboundSchema.parse(
      environmentByProjectIdNetworkSwarmApplicationUnion,
    ),
  );
}

export function environmentByProjectIdNetworkSwarmApplicationUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdNetworkSwarmApplicationUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdNetworkSwarmApplicationUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdNetworkSwarmApplicationUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdApplicationNetworkSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdApplicationNetworkSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdNetworkSwarmApplicationEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdApplicationNetworkSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdApplicationNetworkSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdApplicationNetworkSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdApplicationNetworkSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdNetworkSwarmApplicationEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdApplicationNetworkSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdApplicationNetworkSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdApplicationNetworkSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdApplicationNetworkSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdApplicationNetworkSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdApplicationNetworkSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdApplicationNetworkSwarmUnion$Outbound;
}

export function environmentByProjectIdApplicationNetworkSwarmUnionToJSON(
  environmentByProjectIdApplicationNetworkSwarmUnion:
    EnvironmentByProjectIdApplicationNetworkSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdApplicationNetworkSwarmUnion$outboundSchema.parse(
      environmentByProjectIdApplicationNetworkSwarmUnion,
    ),
  );
}

export function environmentByProjectIdApplicationNetworkSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdApplicationNetworkSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdApplicationNetworkSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdApplicationNetworkSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdPlacementSwarmApplicationEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdPlacementSwarmApplicationEnum> =
    z.nativeEnum(EnvironmentByProjectIdPlacementSwarmApplicationEnum);

/** @internal */
export const EnvironmentByProjectIdPlacementSwarmApplicationEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdPlacementSwarmApplicationEnum> =
    EnvironmentByProjectIdPlacementSwarmApplicationEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdPlacementSwarmApplicationEnum$ {
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmApplicationEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdPlacementSwarmApplicationEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmApplicationEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdPlacementSwarmApplicationEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdPlacementSwarmApplicationUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdPlacementSwarmApplicationUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdPlacementSwarmApplicationEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdPlacementSwarmApplicationUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdPlacementSwarmApplicationUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdPlacementSwarmApplicationUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdPlacementSwarmApplicationUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdPlacementSwarmApplicationEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdPlacementSwarmApplicationUnion$ {
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmApplicationUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdPlacementSwarmApplicationUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmApplicationUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdPlacementSwarmApplicationUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmApplicationUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdPlacementSwarmApplicationUnion$Outbound;
}

export function environmentByProjectIdPlacementSwarmApplicationUnionToJSON(
  environmentByProjectIdPlacementSwarmApplicationUnion:
    EnvironmentByProjectIdPlacementSwarmApplicationUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdPlacementSwarmApplicationUnion$outboundSchema.parse(
      environmentByProjectIdPlacementSwarmApplicationUnion,
    ),
  );
}

export function environmentByProjectIdPlacementSwarmApplicationUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdPlacementSwarmApplicationUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdPlacementSwarmApplicationUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdPlacementSwarmApplicationUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdApplicationPlacementSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdApplicationPlacementSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdPlacementSwarmApplicationEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdApplicationPlacementSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdApplicationPlacementSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdApplicationPlacementSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdApplicationPlacementSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdPlacementSwarmApplicationEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdApplicationPlacementSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdApplicationPlacementSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdApplicationPlacementSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdApplicationPlacementSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdApplicationPlacementSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdApplicationPlacementSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdApplicationPlacementSwarmUnion$Outbound;
}

export function environmentByProjectIdApplicationPlacementSwarmUnionToJSON(
  environmentByProjectIdApplicationPlacementSwarmUnion:
    EnvironmentByProjectIdApplicationPlacementSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdApplicationPlacementSwarmUnion$outboundSchema.parse(
      environmentByProjectIdApplicationPlacementSwarmUnion,
    ),
  );
}

export function environmentByProjectIdApplicationPlacementSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdApplicationPlacementSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdApplicationPlacementSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdApplicationPlacementSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdPreviewCertificateType$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdPreviewCertificateType> = z
    .nativeEnum(EnvironmentByProjectIdPreviewCertificateType);

/** @internal */
export const EnvironmentByProjectIdPreviewCertificateType$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdPreviewCertificateType> =
    EnvironmentByProjectIdPreviewCertificateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdPreviewCertificateType$ {
  /** @deprecated use `EnvironmentByProjectIdPreviewCertificateType$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdPreviewCertificateType$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPreviewCertificateType$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdPreviewCertificateType$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdRestartPolicySwarmApplicationEnum$inboundSchema:
  z.ZodNativeEnum<
    typeof EnvironmentByProjectIdRestartPolicySwarmApplicationEnum
  > = z.nativeEnum(EnvironmentByProjectIdRestartPolicySwarmApplicationEnum);

/** @internal */
export const EnvironmentByProjectIdRestartPolicySwarmApplicationEnum$outboundSchema:
  z.ZodNativeEnum<
    typeof EnvironmentByProjectIdRestartPolicySwarmApplicationEnum
  > = EnvironmentByProjectIdRestartPolicySwarmApplicationEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRestartPolicySwarmApplicationEnum$ {
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmApplicationEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRestartPolicySwarmApplicationEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmApplicationEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRestartPolicySwarmApplicationEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdRestartPolicySwarmApplicationUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRestartPolicySwarmApplicationUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdRestartPolicySwarmApplicationEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdRestartPolicySwarmApplicationUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdRestartPolicySwarmApplicationUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRestartPolicySwarmApplicationUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdRestartPolicySwarmApplicationUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdRestartPolicySwarmApplicationEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRestartPolicySwarmApplicationUnion$ {
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmApplicationUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRestartPolicySwarmApplicationUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmApplicationUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRestartPolicySwarmApplicationUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmApplicationUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdRestartPolicySwarmApplicationUnion$Outbound;
}

export function environmentByProjectIdRestartPolicySwarmApplicationUnionToJSON(
  environmentByProjectIdRestartPolicySwarmApplicationUnion:
    EnvironmentByProjectIdRestartPolicySwarmApplicationUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdRestartPolicySwarmApplicationUnion$outboundSchema
      .parse(environmentByProjectIdRestartPolicySwarmApplicationUnion),
  );
}

export function environmentByProjectIdRestartPolicySwarmApplicationUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdRestartPolicySwarmApplicationUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdRestartPolicySwarmApplicationUnion$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentByProjectIdRestartPolicySwarmApplicationUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdApplicationRestartPolicySwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdApplicationRestartPolicySwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdRestartPolicySwarmApplicationEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdApplicationRestartPolicySwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdApplicationRestartPolicySwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdApplicationRestartPolicySwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdApplicationRestartPolicySwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdRestartPolicySwarmApplicationEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdApplicationRestartPolicySwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdApplicationRestartPolicySwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdApplicationRestartPolicySwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdApplicationRestartPolicySwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdApplicationRestartPolicySwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdApplicationRestartPolicySwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdApplicationRestartPolicySwarmUnion$Outbound;
}

export function environmentByProjectIdApplicationRestartPolicySwarmUnionToJSON(
  environmentByProjectIdApplicationRestartPolicySwarmUnion:
    EnvironmentByProjectIdApplicationRestartPolicySwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdApplicationRestartPolicySwarmUnion$outboundSchema
      .parse(environmentByProjectIdApplicationRestartPolicySwarmUnion),
  );
}

export function environmentByProjectIdApplicationRestartPolicySwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdApplicationRestartPolicySwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdApplicationRestartPolicySwarmUnion$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentByProjectIdApplicationRestartPolicySwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdRollbackConfigSwarmApplicationEnum$inboundSchema:
  z.ZodNativeEnum<
    typeof EnvironmentByProjectIdRollbackConfigSwarmApplicationEnum
  > = z.nativeEnum(EnvironmentByProjectIdRollbackConfigSwarmApplicationEnum);

/** @internal */
export const EnvironmentByProjectIdRollbackConfigSwarmApplicationEnum$outboundSchema:
  z.ZodNativeEnum<
    typeof EnvironmentByProjectIdRollbackConfigSwarmApplicationEnum
  > = EnvironmentByProjectIdRollbackConfigSwarmApplicationEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRollbackConfigSwarmApplicationEnum$ {
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmApplicationEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRollbackConfigSwarmApplicationEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmApplicationEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRollbackConfigSwarmApplicationEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdRollbackConfigSwarmApplicationUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRollbackConfigSwarmApplicationUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdRollbackConfigSwarmApplicationEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdRollbackConfigSwarmApplicationUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdRollbackConfigSwarmApplicationUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRollbackConfigSwarmApplicationUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdRollbackConfigSwarmApplicationUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdRollbackConfigSwarmApplicationEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRollbackConfigSwarmApplicationUnion$ {
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmApplicationUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRollbackConfigSwarmApplicationUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmApplicationUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRollbackConfigSwarmApplicationUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmApplicationUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdRollbackConfigSwarmApplicationUnion$Outbound;
}

export function environmentByProjectIdRollbackConfigSwarmApplicationUnionToJSON(
  environmentByProjectIdRollbackConfigSwarmApplicationUnion:
    EnvironmentByProjectIdRollbackConfigSwarmApplicationUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdRollbackConfigSwarmApplicationUnion$outboundSchema
      .parse(environmentByProjectIdRollbackConfigSwarmApplicationUnion),
  );
}

export function environmentByProjectIdRollbackConfigSwarmApplicationUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdRollbackConfigSwarmApplicationUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdRollbackConfigSwarmApplicationUnion$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentByProjectIdRollbackConfigSwarmApplicationUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdApplicationRollbackConfigSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdApplicationRollbackConfigSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdRollbackConfigSwarmApplicationEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdApplicationRollbackConfigSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdApplicationRollbackConfigSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdApplicationRollbackConfigSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdApplicationRollbackConfigSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdRollbackConfigSwarmApplicationEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdApplicationRollbackConfigSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdApplicationRollbackConfigSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdApplicationRollbackConfigSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdApplicationRollbackConfigSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdApplicationRollbackConfigSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdApplicationRollbackConfigSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdApplicationRollbackConfigSwarmUnion$Outbound;
}

export function environmentByProjectIdApplicationRollbackConfigSwarmUnionToJSON(
  environmentByProjectIdApplicationRollbackConfigSwarmUnion:
    EnvironmentByProjectIdApplicationRollbackConfigSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdApplicationRollbackConfigSwarmUnion$outboundSchema
      .parse(environmentByProjectIdApplicationRollbackConfigSwarmUnion),
  );
}

export function environmentByProjectIdApplicationRollbackConfigSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdApplicationRollbackConfigSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdApplicationRollbackConfigSwarmUnion$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentByProjectIdApplicationRollbackConfigSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdApplicationSourceType$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdApplicationSourceType> = z
    .nativeEnum(EnvironmentByProjectIdApplicationSourceType);

/** @internal */
export const EnvironmentByProjectIdApplicationSourceType$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdApplicationSourceType> =
    EnvironmentByProjectIdApplicationSourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdApplicationSourceType$ {
  /** @deprecated use `EnvironmentByProjectIdApplicationSourceType$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdApplicationSourceType$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdApplicationSourceType$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdApplicationSourceType$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdApplicationTriggerType$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdApplicationTriggerType> = z
    .nativeEnum(EnvironmentByProjectIdApplicationTriggerType);

/** @internal */
export const EnvironmentByProjectIdApplicationTriggerType$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdApplicationTriggerType> =
    EnvironmentByProjectIdApplicationTriggerType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdApplicationTriggerType$ {
  /** @deprecated use `EnvironmentByProjectIdApplicationTriggerType$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdApplicationTriggerType$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdApplicationTriggerType$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdApplicationTriggerType$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdUpdateConfigSwarmApplicationEnum$inboundSchema:
  z.ZodNativeEnum<
    typeof EnvironmentByProjectIdUpdateConfigSwarmApplicationEnum
  > = z.nativeEnum(EnvironmentByProjectIdUpdateConfigSwarmApplicationEnum);

/** @internal */
export const EnvironmentByProjectIdUpdateConfigSwarmApplicationEnum$outboundSchema:
  z.ZodNativeEnum<
    typeof EnvironmentByProjectIdUpdateConfigSwarmApplicationEnum
  > = EnvironmentByProjectIdUpdateConfigSwarmApplicationEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdUpdateConfigSwarmApplicationEnum$ {
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmApplicationEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdUpdateConfigSwarmApplicationEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmApplicationEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdUpdateConfigSwarmApplicationEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdUpdateConfigSwarmApplicationUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdUpdateConfigSwarmApplicationUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdUpdateConfigSwarmApplicationEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdUpdateConfigSwarmApplicationUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdUpdateConfigSwarmApplicationUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdUpdateConfigSwarmApplicationUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdUpdateConfigSwarmApplicationUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdUpdateConfigSwarmApplicationEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdUpdateConfigSwarmApplicationUnion$ {
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmApplicationUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdUpdateConfigSwarmApplicationUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmApplicationUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdUpdateConfigSwarmApplicationUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmApplicationUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdUpdateConfigSwarmApplicationUnion$Outbound;
}

export function environmentByProjectIdUpdateConfigSwarmApplicationUnionToJSON(
  environmentByProjectIdUpdateConfigSwarmApplicationUnion:
    EnvironmentByProjectIdUpdateConfigSwarmApplicationUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdUpdateConfigSwarmApplicationUnion$outboundSchema
      .parse(environmentByProjectIdUpdateConfigSwarmApplicationUnion),
  );
}

export function environmentByProjectIdUpdateConfigSwarmApplicationUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdUpdateConfigSwarmApplicationUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdUpdateConfigSwarmApplicationUnion$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentByProjectIdUpdateConfigSwarmApplicationUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdApplicationUpdateConfigSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdApplicationUpdateConfigSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdUpdateConfigSwarmApplicationEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdApplicationUpdateConfigSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdApplicationUpdateConfigSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdApplicationUpdateConfigSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdApplicationUpdateConfigSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdUpdateConfigSwarmApplicationEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdApplicationUpdateConfigSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdApplicationUpdateConfigSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdApplicationUpdateConfigSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdApplicationUpdateConfigSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdApplicationUpdateConfigSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdApplicationUpdateConfigSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdApplicationUpdateConfigSwarmUnion$Outbound;
}

export function environmentByProjectIdApplicationUpdateConfigSwarmUnionToJSON(
  environmentByProjectIdApplicationUpdateConfigSwarmUnion:
    EnvironmentByProjectIdApplicationUpdateConfigSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdApplicationUpdateConfigSwarmUnion$outboundSchema
      .parse(environmentByProjectIdApplicationUpdateConfigSwarmUnion),
  );
}

export function environmentByProjectIdApplicationUpdateConfigSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdApplicationUpdateConfigSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdApplicationUpdateConfigSwarmUnion$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentByProjectIdApplicationUpdateConfigSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdApplication$inboundSchema: z.ZodType<
  EnvironmentByProjectIdApplication,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  applicationId: z.string(),
  applicationStatus:
    EnvironmentByProjectIdApplicationApplicationStatus$inboundSchema,
  autoDeploy: z.nullable(z.boolean()),
  bitbucketBranch: z.nullable(z.string()),
  bitbucketBuildPath: z.nullable(z.string()),
  bitbucketId: z.nullable(z.string()),
  bitbucketOwner: z.nullable(z.string()),
  bitbucketRepository: z.nullable(z.string()),
  branch: z.nullable(z.string()),
  buildArgs: z.nullable(z.string()),
  buildPath: z.nullable(z.string()),
  buildType: EnvironmentByProjectIdBuildType$inboundSchema,
  cleanCache: z.nullable(z.boolean()),
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  customGitBranch: z.nullable(z.string()),
  customGitBuildPath: z.nullable(z.string()),
  customGitSSHKeyId: z.nullable(z.string()),
  customGitUrl: z.nullable(z.string()),
  description: z.nullable(z.string()),
  dockerBuildStage: z.nullable(z.string()),
  dockerContextPath: z.nullable(z.string()),
  dockerImage: z.nullable(z.string()),
  dockerfile: z.nullable(z.string()),
  dropBuildPath: z.nullable(z.string()),
  enableSubmodules: z.boolean(),
  enabled: z.nullable(z.boolean()),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  giteaBranch: z.nullable(z.string()),
  giteaBuildPath: z.nullable(z.string()),
  giteaId: z.nullable(z.string()),
  giteaOwner: z.nullable(z.string()),
  giteaRepository: z.nullable(z.string()),
  githubId: z.nullable(z.string()),
  gitlabBranch: z.nullable(z.string()),
  gitlabBuildPath: z.nullable(z.string()),
  gitlabId: z.nullable(z.string()),
  gitlabOwner: z.nullable(z.string()),
  gitlabPathNamespace: z.nullable(z.string()),
  gitlabProjectId: z.nullable(z.number()),
  gitlabRepository: z.nullable(z.string()),
  healthCheckSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdHealthCheckSwarmApplicationEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  herokuVersion: z.nullable(z.string()),
  isPreviewDeploymentsActive: z.nullable(z.boolean()),
  isStaticSpa: z.nullable(z.boolean()),
  labelsSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdLabelsSwarmApplicationEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdModeSwarmApplicationEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  name: z.string(),
  networkSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdNetworkSwarmApplicationEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  owner: z.nullable(z.string()),
  password: z.nullable(z.string()),
  placementSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdPlacementSwarmApplicationEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  previewBuildArgs: z.nullable(z.string()),
  previewCertificateType:
    EnvironmentByProjectIdPreviewCertificateType$inboundSchema,
  previewCustomCertResolver: z.nullable(z.string()),
  previewEnv: z.nullable(z.string()),
  previewHttps: z.boolean(),
  previewLabels: z.nullable(z.array(z.string())),
  previewLimit: z.nullable(z.number()),
  previewPath: z.nullable(z.string()),
  previewPort: z.nullable(z.number()),
  previewRequireCollaboratorPermissions: z.nullable(z.boolean()),
  previewWildcard: z.nullable(z.string()),
  publishDirectory: z.nullable(z.string()),
  railpackVersion: z.nullable(z.string()),
  refreshToken: z.nullable(z.string()),
  registryId: z.nullable(z.string()),
  registryUrl: z.nullable(z.string()),
  replicas: z.number(),
  repository: z.nullable(z.string()),
  restartPolicySwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdRestartPolicySwarmApplicationEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  rollbackActive: z.nullable(z.boolean()),
  rollbackConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdRollbackConfigSwarmApplicationEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  serverId: z.nullable(z.string()),
  sourceType: EnvironmentByProjectIdApplicationSourceType$inboundSchema,
  subtitle: z.nullable(z.string()),
  title: z.nullable(z.string()),
  triggerType: z.nullable(
    EnvironmentByProjectIdApplicationTriggerType$inboundSchema,
  ),
  updateConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdUpdateConfigSwarmApplicationEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  username: z.nullable(z.string()),
  watchPaths: z.nullable(z.array(z.string())),
});

/** @internal */
export type EnvironmentByProjectIdApplication$Outbound = {
  appName: string;
  applicationId: string;
  applicationStatus: string;
  autoDeploy: boolean | null;
  bitbucketBranch: string | null;
  bitbucketBuildPath: string | null;
  bitbucketId: string | null;
  bitbucketOwner: string | null;
  bitbucketRepository: string | null;
  branch: string | null;
  buildArgs: string | null;
  buildPath: string | null;
  buildType: string;
  cleanCache: boolean | null;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  customGitBranch: string | null;
  customGitBuildPath: string | null;
  customGitSSHKeyId: string | null;
  customGitUrl: string | null;
  description: string | null;
  dockerBuildStage: string | null;
  dockerContextPath: string | null;
  dockerImage: string | null;
  dockerfile: string | null;
  dropBuildPath: string | null;
  enableSubmodules: boolean;
  enabled: boolean | null;
  env: string | null;
  environmentId: string;
  giteaBranch: string | null;
  giteaBuildPath: string | null;
  giteaId: string | null;
  giteaOwner: string | null;
  giteaRepository: string | null;
  githubId: string | null;
  gitlabBranch: string | null;
  gitlabBuildPath: string | null;
  gitlabId: string | null;
  gitlabOwner: string | null;
  gitlabPathNamespace: string | null;
  gitlabProjectId: number | null;
  gitlabRepository: string | null;
  healthCheckSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  herokuVersion: string | null;
  isPreviewDeploymentsActive: boolean | null;
  isStaticSpa: boolean | null;
  labelsSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  name: string;
  networkSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  owner: string | null;
  password: string | null;
  placementSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  previewBuildArgs: string | null;
  previewCertificateType: string;
  previewCustomCertResolver: string | null;
  previewEnv: string | null;
  previewHttps: boolean;
  previewLabels: Array<string> | null;
  previewLimit: number | null;
  previewPath: string | null;
  previewPort: number | null;
  previewRequireCollaboratorPermissions: boolean | null;
  previewWildcard: string | null;
  publishDirectory: string | null;
  railpackVersion: string | null;
  refreshToken: string | null;
  registryId: string | null;
  registryUrl: string | null;
  replicas: number;
  repository: string | null;
  restartPolicySwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  rollbackActive: boolean | null;
  rollbackConfigSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  serverId: string | null;
  sourceType: string;
  subtitle: string | null;
  title: string | null;
  triggerType: string | null;
  updateConfigSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  username: string | null;
  watchPaths: Array<string> | null;
};

/** @internal */
export const EnvironmentByProjectIdApplication$outboundSchema: z.ZodType<
  EnvironmentByProjectIdApplication$Outbound,
  z.ZodTypeDef,
  EnvironmentByProjectIdApplication
> = z.object({
  appName: z.string(),
  applicationId: z.string(),
  applicationStatus:
    EnvironmentByProjectIdApplicationApplicationStatus$outboundSchema,
  autoDeploy: z.nullable(z.boolean()),
  bitbucketBranch: z.nullable(z.string()),
  bitbucketBuildPath: z.nullable(z.string()),
  bitbucketId: z.nullable(z.string()),
  bitbucketOwner: z.nullable(z.string()),
  bitbucketRepository: z.nullable(z.string()),
  branch: z.nullable(z.string()),
  buildArgs: z.nullable(z.string()),
  buildPath: z.nullable(z.string()),
  buildType: EnvironmentByProjectIdBuildType$outboundSchema,
  cleanCache: z.nullable(z.boolean()),
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  customGitBranch: z.nullable(z.string()),
  customGitBuildPath: z.nullable(z.string()),
  customGitSSHKeyId: z.nullable(z.string()),
  customGitUrl: z.nullable(z.string()),
  description: z.nullable(z.string()),
  dockerBuildStage: z.nullable(z.string()),
  dockerContextPath: z.nullable(z.string()),
  dockerImage: z.nullable(z.string()),
  dockerfile: z.nullable(z.string()),
  dropBuildPath: z.nullable(z.string()),
  enableSubmodules: z.boolean(),
  enabled: z.nullable(z.boolean()),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  giteaBranch: z.nullable(z.string()),
  giteaBuildPath: z.nullable(z.string()),
  giteaId: z.nullable(z.string()),
  giteaOwner: z.nullable(z.string()),
  giteaRepository: z.nullable(z.string()),
  githubId: z.nullable(z.string()),
  gitlabBranch: z.nullable(z.string()),
  gitlabBuildPath: z.nullable(z.string()),
  gitlabId: z.nullable(z.string()),
  gitlabOwner: z.nullable(z.string()),
  gitlabPathNamespace: z.nullable(z.string()),
  gitlabProjectId: z.nullable(z.number()),
  gitlabRepository: z.nullable(z.string()),
  healthCheckSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdHealthCheckSwarmApplicationEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  herokuVersion: z.nullable(z.string()),
  isPreviewDeploymentsActive: z.nullable(z.boolean()),
  isStaticSpa: z.nullable(z.boolean()),
  labelsSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdLabelsSwarmApplicationEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdModeSwarmApplicationEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  name: z.string(),
  networkSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdNetworkSwarmApplicationEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  owner: z.nullable(z.string()),
  password: z.nullable(z.string()),
  placementSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdPlacementSwarmApplicationEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  previewBuildArgs: z.nullable(z.string()),
  previewCertificateType:
    EnvironmentByProjectIdPreviewCertificateType$outboundSchema,
  previewCustomCertResolver: z.nullable(z.string()),
  previewEnv: z.nullable(z.string()),
  previewHttps: z.boolean(),
  previewLabels: z.nullable(z.array(z.string())),
  previewLimit: z.nullable(z.number()),
  previewPath: z.nullable(z.string()),
  previewPort: z.nullable(z.number()),
  previewRequireCollaboratorPermissions: z.nullable(z.boolean()),
  previewWildcard: z.nullable(z.string()),
  publishDirectory: z.nullable(z.string()),
  railpackVersion: z.nullable(z.string()),
  refreshToken: z.nullable(z.string()),
  registryId: z.nullable(z.string()),
  registryUrl: z.nullable(z.string()),
  replicas: z.number(),
  repository: z.nullable(z.string()),
  restartPolicySwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdRestartPolicySwarmApplicationEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  rollbackActive: z.nullable(z.boolean()),
  rollbackConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdRollbackConfigSwarmApplicationEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  serverId: z.nullable(z.string()),
  sourceType: EnvironmentByProjectIdApplicationSourceType$outboundSchema,
  subtitle: z.nullable(z.string()),
  title: z.nullable(z.string()),
  triggerType: z.nullable(
    EnvironmentByProjectIdApplicationTriggerType$outboundSchema,
  ),
  updateConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdUpdateConfigSwarmApplicationEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  username: z.nullable(z.string()),
  watchPaths: z.nullable(z.array(z.string())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdApplication$ {
  /** @deprecated use `EnvironmentByProjectIdApplication$inboundSchema` instead. */
  export const inboundSchema = EnvironmentByProjectIdApplication$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdApplication$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdApplication$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdApplication$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdApplication$Outbound;
}

export function environmentByProjectIdApplicationToJSON(
  environmentByProjectIdApplication: EnvironmentByProjectIdApplication,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdApplication$outboundSchema.parse(
      environmentByProjectIdApplication,
    ),
  );
}

export function environmentByProjectIdApplicationFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentByProjectIdApplication, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentByProjectIdApplication$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentByProjectIdApplication' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdComposeStatus$inboundSchema: z.ZodNativeEnum<
  typeof EnvironmentByProjectIdComposeStatus
> = z.nativeEnum(EnvironmentByProjectIdComposeStatus);

/** @internal */
export const EnvironmentByProjectIdComposeStatus$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdComposeStatus> =
    EnvironmentByProjectIdComposeStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdComposeStatus$ {
  /** @deprecated use `EnvironmentByProjectIdComposeStatus$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdComposeStatus$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdComposeStatus$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdComposeStatus$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdComposeType$inboundSchema: z.ZodNativeEnum<
  typeof EnvironmentByProjectIdComposeType
> = z.nativeEnum(EnvironmentByProjectIdComposeType);

/** @internal */
export const EnvironmentByProjectIdComposeType$outboundSchema: z.ZodNativeEnum<
  typeof EnvironmentByProjectIdComposeType
> = EnvironmentByProjectIdComposeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdComposeType$ {
  /** @deprecated use `EnvironmentByProjectIdComposeType$inboundSchema` instead. */
  export const inboundSchema = EnvironmentByProjectIdComposeType$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdComposeType$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdComposeType$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdComposeSourceType$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdComposeSourceType> = z
    .nativeEnum(EnvironmentByProjectIdComposeSourceType);

/** @internal */
export const EnvironmentByProjectIdComposeSourceType$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdComposeSourceType> =
    EnvironmentByProjectIdComposeSourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdComposeSourceType$ {
  /** @deprecated use `EnvironmentByProjectIdComposeSourceType$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdComposeSourceType$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdComposeSourceType$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdComposeSourceType$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdComposeTriggerType$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdComposeTriggerType> = z
    .nativeEnum(EnvironmentByProjectIdComposeTriggerType);

/** @internal */
export const EnvironmentByProjectIdComposeTriggerType$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdComposeTriggerType> =
    EnvironmentByProjectIdComposeTriggerType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdComposeTriggerType$ {
  /** @deprecated use `EnvironmentByProjectIdComposeTriggerType$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdComposeTriggerType$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdComposeTriggerType$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdComposeTriggerType$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdCompose$inboundSchema: z.ZodType<
  EnvironmentByProjectIdCompose,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  autoDeploy: z.nullable(z.boolean()),
  bitbucketBranch: z.nullable(z.string()),
  bitbucketId: z.nullable(z.string()),
  bitbucketOwner: z.nullable(z.string()),
  bitbucketRepository: z.nullable(z.string()),
  branch: z.nullable(z.string()),
  command: z.string(),
  composeFile: z.string(),
  composeId: z.string(),
  composePath: z.string(),
  composeStatus: EnvironmentByProjectIdComposeStatus$inboundSchema,
  composeType: EnvironmentByProjectIdComposeType$inboundSchema,
  createdAt: z.string(),
  customGitBranch: z.nullable(z.string()),
  customGitSSHKeyId: z.nullable(z.string()),
  customGitUrl: z.nullable(z.string()),
  description: z.nullable(z.string()),
  enableSubmodules: z.boolean(),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  giteaBranch: z.nullable(z.string()),
  giteaId: z.nullable(z.string()),
  giteaOwner: z.nullable(z.string()),
  giteaRepository: z.nullable(z.string()),
  githubId: z.nullable(z.string()),
  gitlabBranch: z.nullable(z.string()),
  gitlabId: z.nullable(z.string()),
  gitlabOwner: z.nullable(z.string()),
  gitlabPathNamespace: z.nullable(z.string()),
  gitlabProjectId: z.nullable(z.number()),
  gitlabRepository: z.nullable(z.string()),
  isolatedDeployment: z.boolean(),
  isolatedDeploymentsVolume: z.boolean(),
  name: z.string(),
  owner: z.nullable(z.string()),
  randomize: z.boolean(),
  refreshToken: z.nullable(z.string()),
  repository: z.nullable(z.string()),
  serverId: z.nullable(z.string()),
  sourceType: EnvironmentByProjectIdComposeSourceType$inboundSchema,
  suffix: z.string(),
  triggerType: z.nullable(
    EnvironmentByProjectIdComposeTriggerType$inboundSchema,
  ),
  watchPaths: z.nullable(z.array(z.string())),
});

/** @internal */
export type EnvironmentByProjectIdCompose$Outbound = {
  appName: string;
  autoDeploy: boolean | null;
  bitbucketBranch: string | null;
  bitbucketId: string | null;
  bitbucketOwner: string | null;
  bitbucketRepository: string | null;
  branch: string | null;
  command: string;
  composeFile: string;
  composeId: string;
  composePath: string;
  composeStatus: string;
  composeType: string;
  createdAt: string;
  customGitBranch: string | null;
  customGitSSHKeyId: string | null;
  customGitUrl: string | null;
  description: string | null;
  enableSubmodules: boolean;
  env: string | null;
  environmentId: string;
  giteaBranch: string | null;
  giteaId: string | null;
  giteaOwner: string | null;
  giteaRepository: string | null;
  githubId: string | null;
  gitlabBranch: string | null;
  gitlabId: string | null;
  gitlabOwner: string | null;
  gitlabPathNamespace: string | null;
  gitlabProjectId: number | null;
  gitlabRepository: string | null;
  isolatedDeployment: boolean;
  isolatedDeploymentsVolume: boolean;
  name: string;
  owner: string | null;
  randomize: boolean;
  refreshToken: string | null;
  repository: string | null;
  serverId: string | null;
  sourceType: string;
  suffix: string;
  triggerType: string | null;
  watchPaths: Array<string> | null;
};

/** @internal */
export const EnvironmentByProjectIdCompose$outboundSchema: z.ZodType<
  EnvironmentByProjectIdCompose$Outbound,
  z.ZodTypeDef,
  EnvironmentByProjectIdCompose
> = z.object({
  appName: z.string(),
  autoDeploy: z.nullable(z.boolean()),
  bitbucketBranch: z.nullable(z.string()),
  bitbucketId: z.nullable(z.string()),
  bitbucketOwner: z.nullable(z.string()),
  bitbucketRepository: z.nullable(z.string()),
  branch: z.nullable(z.string()),
  command: z.string(),
  composeFile: z.string(),
  composeId: z.string(),
  composePath: z.string(),
  composeStatus: EnvironmentByProjectIdComposeStatus$outboundSchema,
  composeType: EnvironmentByProjectIdComposeType$outboundSchema,
  createdAt: z.string(),
  customGitBranch: z.nullable(z.string()),
  customGitSSHKeyId: z.nullable(z.string()),
  customGitUrl: z.nullable(z.string()),
  description: z.nullable(z.string()),
  enableSubmodules: z.boolean(),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  giteaBranch: z.nullable(z.string()),
  giteaId: z.nullable(z.string()),
  giteaOwner: z.nullable(z.string()),
  giteaRepository: z.nullable(z.string()),
  githubId: z.nullable(z.string()),
  gitlabBranch: z.nullable(z.string()),
  gitlabId: z.nullable(z.string()),
  gitlabOwner: z.nullable(z.string()),
  gitlabPathNamespace: z.nullable(z.string()),
  gitlabProjectId: z.nullable(z.number()),
  gitlabRepository: z.nullable(z.string()),
  isolatedDeployment: z.boolean(),
  isolatedDeploymentsVolume: z.boolean(),
  name: z.string(),
  owner: z.nullable(z.string()),
  randomize: z.boolean(),
  refreshToken: z.nullable(z.string()),
  repository: z.nullable(z.string()),
  serverId: z.nullable(z.string()),
  sourceType: EnvironmentByProjectIdComposeSourceType$outboundSchema,
  suffix: z.string(),
  triggerType: z.nullable(
    EnvironmentByProjectIdComposeTriggerType$outboundSchema,
  ),
  watchPaths: z.nullable(z.array(z.string())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdCompose$ {
  /** @deprecated use `EnvironmentByProjectIdCompose$inboundSchema` instead. */
  export const inboundSchema = EnvironmentByProjectIdCompose$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdCompose$outboundSchema` instead. */
  export const outboundSchema = EnvironmentByProjectIdCompose$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdCompose$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdCompose$Outbound;
}

export function environmentByProjectIdComposeToJSON(
  environmentByProjectIdCompose: EnvironmentByProjectIdCompose,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdCompose$outboundSchema.parse(
      environmentByProjectIdCompose,
    ),
  );
}

export function environmentByProjectIdComposeFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentByProjectIdCompose, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentByProjectIdCompose$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentByProjectIdCompose' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMariadbApplicationStatus$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdMariadbApplicationStatus> = z
    .nativeEnum(EnvironmentByProjectIdMariadbApplicationStatus);

/** @internal */
export const EnvironmentByProjectIdMariadbApplicationStatus$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdMariadbApplicationStatus> =
    EnvironmentByProjectIdMariadbApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMariadbApplicationStatus$ {
  /** @deprecated use `EnvironmentByProjectIdMariadbApplicationStatus$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdMariadbApplicationStatus$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMariadbApplicationStatus$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdMariadbApplicationStatus$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdHealthCheckSwarmMariadbEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdHealthCheckSwarmMariadbEnum> = z
    .nativeEnum(EnvironmentByProjectIdHealthCheckSwarmMariadbEnum);

/** @internal */
export const EnvironmentByProjectIdHealthCheckSwarmMariadbEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdHealthCheckSwarmMariadbEnum> =
    EnvironmentByProjectIdHealthCheckSwarmMariadbEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdHealthCheckSwarmMariadbEnum$ {
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmMariadbEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdHealthCheckSwarmMariadbEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmMariadbEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdHealthCheckSwarmMariadbEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdHealthCheckSwarmMariadbUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdHealthCheckSwarmMariadbUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdHealthCheckSwarmMariadbEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdHealthCheckSwarmMariadbUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdHealthCheckSwarmMariadbUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdHealthCheckSwarmMariadbUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdHealthCheckSwarmMariadbUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdHealthCheckSwarmMariadbEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdHealthCheckSwarmMariadbUnion$ {
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmMariadbUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdHealthCheckSwarmMariadbUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmMariadbUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdHealthCheckSwarmMariadbUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmMariadbUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdHealthCheckSwarmMariadbUnion$Outbound;
}

export function environmentByProjectIdHealthCheckSwarmMariadbUnionToJSON(
  environmentByProjectIdHealthCheckSwarmMariadbUnion:
    EnvironmentByProjectIdHealthCheckSwarmMariadbUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdHealthCheckSwarmMariadbUnion$outboundSchema.parse(
      environmentByProjectIdHealthCheckSwarmMariadbUnion,
    ),
  );
}

export function environmentByProjectIdHealthCheckSwarmMariadbUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdHealthCheckSwarmMariadbUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdHealthCheckSwarmMariadbUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdHealthCheckSwarmMariadbUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMariadbHealthCheckSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMariadbHealthCheckSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdHealthCheckSwarmMariadbEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdMariadbHealthCheckSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdMariadbHealthCheckSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMariadbHealthCheckSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdMariadbHealthCheckSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdHealthCheckSwarmMariadbEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMariadbHealthCheckSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdMariadbHealthCheckSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdMariadbHealthCheckSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMariadbHealthCheckSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdMariadbHealthCheckSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMariadbHealthCheckSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdMariadbHealthCheckSwarmUnion$Outbound;
}

export function environmentByProjectIdMariadbHealthCheckSwarmUnionToJSON(
  environmentByProjectIdMariadbHealthCheckSwarmUnion:
    EnvironmentByProjectIdMariadbHealthCheckSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdMariadbHealthCheckSwarmUnion$outboundSchema.parse(
      environmentByProjectIdMariadbHealthCheckSwarmUnion,
    ),
  );
}

export function environmentByProjectIdMariadbHealthCheckSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdMariadbHealthCheckSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdMariadbHealthCheckSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdMariadbHealthCheckSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdLabelsSwarmMariadbEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdLabelsSwarmMariadbEnum> = z
    .nativeEnum(EnvironmentByProjectIdLabelsSwarmMariadbEnum);

/** @internal */
export const EnvironmentByProjectIdLabelsSwarmMariadbEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdLabelsSwarmMariadbEnum> =
    EnvironmentByProjectIdLabelsSwarmMariadbEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdLabelsSwarmMariadbEnum$ {
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmMariadbEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdLabelsSwarmMariadbEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmMariadbEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdLabelsSwarmMariadbEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdLabelsSwarmMariadbUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdLabelsSwarmMariadbUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdLabelsSwarmMariadbEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdLabelsSwarmMariadbUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdLabelsSwarmMariadbUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdLabelsSwarmMariadbUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdLabelsSwarmMariadbUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdLabelsSwarmMariadbEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdLabelsSwarmMariadbUnion$ {
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmMariadbUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdLabelsSwarmMariadbUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmMariadbUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdLabelsSwarmMariadbUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmMariadbUnion$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdLabelsSwarmMariadbUnion$Outbound;
}

export function environmentByProjectIdLabelsSwarmMariadbUnionToJSON(
  environmentByProjectIdLabelsSwarmMariadbUnion:
    EnvironmentByProjectIdLabelsSwarmMariadbUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdLabelsSwarmMariadbUnion$outboundSchema.parse(
      environmentByProjectIdLabelsSwarmMariadbUnion,
    ),
  );
}

export function environmentByProjectIdLabelsSwarmMariadbUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdLabelsSwarmMariadbUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdLabelsSwarmMariadbUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdLabelsSwarmMariadbUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMariadbLabelsSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMariadbLabelsSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdLabelsSwarmMariadbEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdMariadbLabelsSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdMariadbLabelsSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMariadbLabelsSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdMariadbLabelsSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdLabelsSwarmMariadbEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMariadbLabelsSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdMariadbLabelsSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdMariadbLabelsSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMariadbLabelsSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdMariadbLabelsSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMariadbLabelsSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdMariadbLabelsSwarmUnion$Outbound;
}

export function environmentByProjectIdMariadbLabelsSwarmUnionToJSON(
  environmentByProjectIdMariadbLabelsSwarmUnion:
    EnvironmentByProjectIdMariadbLabelsSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdMariadbLabelsSwarmUnion$outboundSchema.parse(
      environmentByProjectIdMariadbLabelsSwarmUnion,
    ),
  );
}

export function environmentByProjectIdMariadbLabelsSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdMariadbLabelsSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdMariadbLabelsSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdMariadbLabelsSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdModeSwarmMariadbEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdModeSwarmMariadbEnum> = z
    .nativeEnum(EnvironmentByProjectIdModeSwarmMariadbEnum);

/** @internal */
export const EnvironmentByProjectIdModeSwarmMariadbEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdModeSwarmMariadbEnum> =
    EnvironmentByProjectIdModeSwarmMariadbEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdModeSwarmMariadbEnum$ {
  /** @deprecated use `EnvironmentByProjectIdModeSwarmMariadbEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdModeSwarmMariadbEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdModeSwarmMariadbEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdModeSwarmMariadbEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdModeSwarmMariadbUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdModeSwarmMariadbUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdModeSwarmMariadbEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdModeSwarmMariadbUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdModeSwarmMariadbUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdModeSwarmMariadbUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdModeSwarmMariadbUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdModeSwarmMariadbEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdModeSwarmMariadbUnion$ {
  /** @deprecated use `EnvironmentByProjectIdModeSwarmMariadbUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdModeSwarmMariadbUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdModeSwarmMariadbUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdModeSwarmMariadbUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdModeSwarmMariadbUnion$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdModeSwarmMariadbUnion$Outbound;
}

export function environmentByProjectIdModeSwarmMariadbUnionToJSON(
  environmentByProjectIdModeSwarmMariadbUnion:
    EnvironmentByProjectIdModeSwarmMariadbUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdModeSwarmMariadbUnion$outboundSchema.parse(
      environmentByProjectIdModeSwarmMariadbUnion,
    ),
  );
}

export function environmentByProjectIdModeSwarmMariadbUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdModeSwarmMariadbUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdModeSwarmMariadbUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdModeSwarmMariadbUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMariadbModeSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMariadbModeSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdModeSwarmMariadbEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdMariadbModeSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdMariadbModeSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMariadbModeSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdMariadbModeSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdModeSwarmMariadbEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMariadbModeSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdMariadbModeSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdMariadbModeSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMariadbModeSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdMariadbModeSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMariadbModeSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdMariadbModeSwarmUnion$Outbound;
}

export function environmentByProjectIdMariadbModeSwarmUnionToJSON(
  environmentByProjectIdMariadbModeSwarmUnion:
    EnvironmentByProjectIdMariadbModeSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdMariadbModeSwarmUnion$outboundSchema.parse(
      environmentByProjectIdMariadbModeSwarmUnion,
    ),
  );
}

export function environmentByProjectIdMariadbModeSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdMariadbModeSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdMariadbModeSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdMariadbModeSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdNetworkSwarmMariadbEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdNetworkSwarmMariadbEnum> = z
    .nativeEnum(EnvironmentByProjectIdNetworkSwarmMariadbEnum);

/** @internal */
export const EnvironmentByProjectIdNetworkSwarmMariadbEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdNetworkSwarmMariadbEnum> =
    EnvironmentByProjectIdNetworkSwarmMariadbEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdNetworkSwarmMariadbEnum$ {
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmMariadbEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdNetworkSwarmMariadbEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmMariadbEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdNetworkSwarmMariadbEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdNetworkSwarmMariadbUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdNetworkSwarmMariadbUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdNetworkSwarmMariadbEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdNetworkSwarmMariadbUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdNetworkSwarmMariadbUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdNetworkSwarmMariadbUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdNetworkSwarmMariadbUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdNetworkSwarmMariadbEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdNetworkSwarmMariadbUnion$ {
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmMariadbUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdNetworkSwarmMariadbUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmMariadbUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdNetworkSwarmMariadbUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmMariadbUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdNetworkSwarmMariadbUnion$Outbound;
}

export function environmentByProjectIdNetworkSwarmMariadbUnionToJSON(
  environmentByProjectIdNetworkSwarmMariadbUnion:
    EnvironmentByProjectIdNetworkSwarmMariadbUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdNetworkSwarmMariadbUnion$outboundSchema.parse(
      environmentByProjectIdNetworkSwarmMariadbUnion,
    ),
  );
}

export function environmentByProjectIdNetworkSwarmMariadbUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdNetworkSwarmMariadbUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdNetworkSwarmMariadbUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdNetworkSwarmMariadbUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMariadbNetworkSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMariadbNetworkSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdNetworkSwarmMariadbEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdMariadbNetworkSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdMariadbNetworkSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMariadbNetworkSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdMariadbNetworkSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdNetworkSwarmMariadbEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMariadbNetworkSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdMariadbNetworkSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdMariadbNetworkSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMariadbNetworkSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdMariadbNetworkSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMariadbNetworkSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdMariadbNetworkSwarmUnion$Outbound;
}

export function environmentByProjectIdMariadbNetworkSwarmUnionToJSON(
  environmentByProjectIdMariadbNetworkSwarmUnion:
    EnvironmentByProjectIdMariadbNetworkSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdMariadbNetworkSwarmUnion$outboundSchema.parse(
      environmentByProjectIdMariadbNetworkSwarmUnion,
    ),
  );
}

export function environmentByProjectIdMariadbNetworkSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdMariadbNetworkSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdMariadbNetworkSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdMariadbNetworkSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdPlacementSwarmMariadbEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdPlacementSwarmMariadbEnum> = z
    .nativeEnum(EnvironmentByProjectIdPlacementSwarmMariadbEnum);

/** @internal */
export const EnvironmentByProjectIdPlacementSwarmMariadbEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdPlacementSwarmMariadbEnum> =
    EnvironmentByProjectIdPlacementSwarmMariadbEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdPlacementSwarmMariadbEnum$ {
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmMariadbEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdPlacementSwarmMariadbEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmMariadbEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdPlacementSwarmMariadbEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdPlacementSwarmMariadbUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdPlacementSwarmMariadbUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdPlacementSwarmMariadbEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdPlacementSwarmMariadbUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdPlacementSwarmMariadbUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdPlacementSwarmMariadbUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdPlacementSwarmMariadbUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdPlacementSwarmMariadbEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdPlacementSwarmMariadbUnion$ {
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmMariadbUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdPlacementSwarmMariadbUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmMariadbUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdPlacementSwarmMariadbUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmMariadbUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdPlacementSwarmMariadbUnion$Outbound;
}

export function environmentByProjectIdPlacementSwarmMariadbUnionToJSON(
  environmentByProjectIdPlacementSwarmMariadbUnion:
    EnvironmentByProjectIdPlacementSwarmMariadbUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdPlacementSwarmMariadbUnion$outboundSchema.parse(
      environmentByProjectIdPlacementSwarmMariadbUnion,
    ),
  );
}

export function environmentByProjectIdPlacementSwarmMariadbUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdPlacementSwarmMariadbUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdPlacementSwarmMariadbUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdPlacementSwarmMariadbUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMariadbPlacementSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMariadbPlacementSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdPlacementSwarmMariadbEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdMariadbPlacementSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdMariadbPlacementSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMariadbPlacementSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdMariadbPlacementSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdPlacementSwarmMariadbEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMariadbPlacementSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdMariadbPlacementSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdMariadbPlacementSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMariadbPlacementSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdMariadbPlacementSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMariadbPlacementSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdMariadbPlacementSwarmUnion$Outbound;
}

export function environmentByProjectIdMariadbPlacementSwarmUnionToJSON(
  environmentByProjectIdMariadbPlacementSwarmUnion:
    EnvironmentByProjectIdMariadbPlacementSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdMariadbPlacementSwarmUnion$outboundSchema.parse(
      environmentByProjectIdMariadbPlacementSwarmUnion,
    ),
  );
}

export function environmentByProjectIdMariadbPlacementSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdMariadbPlacementSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdMariadbPlacementSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdMariadbPlacementSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdRestartPolicySwarmMariadbEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdRestartPolicySwarmMariadbEnum> =
    z.nativeEnum(EnvironmentByProjectIdRestartPolicySwarmMariadbEnum);

/** @internal */
export const EnvironmentByProjectIdRestartPolicySwarmMariadbEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdRestartPolicySwarmMariadbEnum> =
    EnvironmentByProjectIdRestartPolicySwarmMariadbEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRestartPolicySwarmMariadbEnum$ {
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmMariadbEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRestartPolicySwarmMariadbEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmMariadbEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRestartPolicySwarmMariadbEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdRestartPolicySwarmMariadbUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRestartPolicySwarmMariadbUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdRestartPolicySwarmMariadbEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdRestartPolicySwarmMariadbUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdRestartPolicySwarmMariadbUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRestartPolicySwarmMariadbUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdRestartPolicySwarmMariadbUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdRestartPolicySwarmMariadbEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRestartPolicySwarmMariadbUnion$ {
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmMariadbUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRestartPolicySwarmMariadbUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmMariadbUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRestartPolicySwarmMariadbUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmMariadbUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdRestartPolicySwarmMariadbUnion$Outbound;
}

export function environmentByProjectIdRestartPolicySwarmMariadbUnionToJSON(
  environmentByProjectIdRestartPolicySwarmMariadbUnion:
    EnvironmentByProjectIdRestartPolicySwarmMariadbUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdRestartPolicySwarmMariadbUnion$outboundSchema.parse(
      environmentByProjectIdRestartPolicySwarmMariadbUnion,
    ),
  );
}

export function environmentByProjectIdRestartPolicySwarmMariadbUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdRestartPolicySwarmMariadbUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdRestartPolicySwarmMariadbUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdRestartPolicySwarmMariadbUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMariadbRestartPolicySwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMariadbRestartPolicySwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdRestartPolicySwarmMariadbEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdMariadbRestartPolicySwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdMariadbRestartPolicySwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMariadbRestartPolicySwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdMariadbRestartPolicySwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdRestartPolicySwarmMariadbEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMariadbRestartPolicySwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdMariadbRestartPolicySwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdMariadbRestartPolicySwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMariadbRestartPolicySwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdMariadbRestartPolicySwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMariadbRestartPolicySwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdMariadbRestartPolicySwarmUnion$Outbound;
}

export function environmentByProjectIdMariadbRestartPolicySwarmUnionToJSON(
  environmentByProjectIdMariadbRestartPolicySwarmUnion:
    EnvironmentByProjectIdMariadbRestartPolicySwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdMariadbRestartPolicySwarmUnion$outboundSchema.parse(
      environmentByProjectIdMariadbRestartPolicySwarmUnion,
    ),
  );
}

export function environmentByProjectIdMariadbRestartPolicySwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdMariadbRestartPolicySwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdMariadbRestartPolicySwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdMariadbRestartPolicySwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdRollbackConfigSwarmMariadbEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdRollbackConfigSwarmMariadbEnum> =
    z.nativeEnum(EnvironmentByProjectIdRollbackConfigSwarmMariadbEnum);

/** @internal */
export const EnvironmentByProjectIdRollbackConfigSwarmMariadbEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdRollbackConfigSwarmMariadbEnum> =
    EnvironmentByProjectIdRollbackConfigSwarmMariadbEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRollbackConfigSwarmMariadbEnum$ {
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmMariadbEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRollbackConfigSwarmMariadbEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmMariadbEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRollbackConfigSwarmMariadbEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdRollbackConfigSwarmMariadbUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRollbackConfigSwarmMariadbUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdRollbackConfigSwarmMariadbEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdRollbackConfigSwarmMariadbUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdRollbackConfigSwarmMariadbUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRollbackConfigSwarmMariadbUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdRollbackConfigSwarmMariadbUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdRollbackConfigSwarmMariadbEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRollbackConfigSwarmMariadbUnion$ {
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmMariadbUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRollbackConfigSwarmMariadbUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmMariadbUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRollbackConfigSwarmMariadbUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmMariadbUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdRollbackConfigSwarmMariadbUnion$Outbound;
}

export function environmentByProjectIdRollbackConfigSwarmMariadbUnionToJSON(
  environmentByProjectIdRollbackConfigSwarmMariadbUnion:
    EnvironmentByProjectIdRollbackConfigSwarmMariadbUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdRollbackConfigSwarmMariadbUnion$outboundSchema.parse(
      environmentByProjectIdRollbackConfigSwarmMariadbUnion,
    ),
  );
}

export function environmentByProjectIdRollbackConfigSwarmMariadbUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdRollbackConfigSwarmMariadbUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdRollbackConfigSwarmMariadbUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdRollbackConfigSwarmMariadbUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMariadbRollbackConfigSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMariadbRollbackConfigSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdRollbackConfigSwarmMariadbEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdMariadbRollbackConfigSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdMariadbRollbackConfigSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMariadbRollbackConfigSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdMariadbRollbackConfigSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdRollbackConfigSwarmMariadbEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMariadbRollbackConfigSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdMariadbRollbackConfigSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdMariadbRollbackConfigSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMariadbRollbackConfigSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdMariadbRollbackConfigSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMariadbRollbackConfigSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdMariadbRollbackConfigSwarmUnion$Outbound;
}

export function environmentByProjectIdMariadbRollbackConfigSwarmUnionToJSON(
  environmentByProjectIdMariadbRollbackConfigSwarmUnion:
    EnvironmentByProjectIdMariadbRollbackConfigSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdMariadbRollbackConfigSwarmUnion$outboundSchema.parse(
      environmentByProjectIdMariadbRollbackConfigSwarmUnion,
    ),
  );
}

export function environmentByProjectIdMariadbRollbackConfigSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdMariadbRollbackConfigSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdMariadbRollbackConfigSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdMariadbRollbackConfigSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdUpdateConfigSwarmMariadbEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdUpdateConfigSwarmMariadbEnum> = z
    .nativeEnum(EnvironmentByProjectIdUpdateConfigSwarmMariadbEnum);

/** @internal */
export const EnvironmentByProjectIdUpdateConfigSwarmMariadbEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdUpdateConfigSwarmMariadbEnum> =
    EnvironmentByProjectIdUpdateConfigSwarmMariadbEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdUpdateConfigSwarmMariadbEnum$ {
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmMariadbEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdUpdateConfigSwarmMariadbEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmMariadbEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdUpdateConfigSwarmMariadbEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdUpdateConfigSwarmMariadbUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdUpdateConfigSwarmMariadbUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdUpdateConfigSwarmMariadbEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdUpdateConfigSwarmMariadbUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdUpdateConfigSwarmMariadbUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdUpdateConfigSwarmMariadbUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdUpdateConfigSwarmMariadbUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdUpdateConfigSwarmMariadbEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdUpdateConfigSwarmMariadbUnion$ {
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmMariadbUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdUpdateConfigSwarmMariadbUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmMariadbUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdUpdateConfigSwarmMariadbUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmMariadbUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdUpdateConfigSwarmMariadbUnion$Outbound;
}

export function environmentByProjectIdUpdateConfigSwarmMariadbUnionToJSON(
  environmentByProjectIdUpdateConfigSwarmMariadbUnion:
    EnvironmentByProjectIdUpdateConfigSwarmMariadbUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdUpdateConfigSwarmMariadbUnion$outboundSchema.parse(
      environmentByProjectIdUpdateConfigSwarmMariadbUnion,
    ),
  );
}

export function environmentByProjectIdUpdateConfigSwarmMariadbUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdUpdateConfigSwarmMariadbUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdUpdateConfigSwarmMariadbUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdUpdateConfigSwarmMariadbUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMariadbUpdateConfigSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMariadbUpdateConfigSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdUpdateConfigSwarmMariadbEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdMariadbUpdateConfigSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdMariadbUpdateConfigSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMariadbUpdateConfigSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdMariadbUpdateConfigSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdUpdateConfigSwarmMariadbEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMariadbUpdateConfigSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdMariadbUpdateConfigSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdMariadbUpdateConfigSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMariadbUpdateConfigSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdMariadbUpdateConfigSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMariadbUpdateConfigSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdMariadbUpdateConfigSwarmUnion$Outbound;
}

export function environmentByProjectIdMariadbUpdateConfigSwarmUnionToJSON(
  environmentByProjectIdMariadbUpdateConfigSwarmUnion:
    EnvironmentByProjectIdMariadbUpdateConfigSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdMariadbUpdateConfigSwarmUnion$outboundSchema.parse(
      environmentByProjectIdMariadbUpdateConfigSwarmUnion,
    ),
  );
}

export function environmentByProjectIdMariadbUpdateConfigSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdMariadbUpdateConfigSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdMariadbUpdateConfigSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdMariadbUpdateConfigSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMariadb$inboundSchema: z.ZodType<
  EnvironmentByProjectIdMariadb,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  applicationStatus:
    EnvironmentByProjectIdMariadbApplicationStatus$inboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databaseName: z.string(),
  databasePassword: z.string(),
  databaseRootPassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdHealthCheckSwarmMariadbEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  labelsSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdLabelsSwarmMariadbEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  mariadbId: z.string(),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdModeSwarmMariadbEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  name: z.string(),
  networkSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdNetworkSwarmMariadbEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  placementSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdPlacementSwarmMariadbEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdRestartPolicySwarmMariadbEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  rollbackConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdRollbackConfigSwarmMariadbEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdUpdateConfigSwarmMariadbEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
});

/** @internal */
export type EnvironmentByProjectIdMariadb$Outbound = {
  appName: string;
  applicationStatus: string;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databaseName: string;
  databasePassword: string;
  databaseRootPassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  labelsSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  mariadbId: string;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  name: string;
  networkSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  placementSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  replicas: number;
  restartPolicySwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  rollbackConfigSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  serverId: string | null;
  updateConfigSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
};

/** @internal */
export const EnvironmentByProjectIdMariadb$outboundSchema: z.ZodType<
  EnvironmentByProjectIdMariadb$Outbound,
  z.ZodTypeDef,
  EnvironmentByProjectIdMariadb
> = z.object({
  appName: z.string(),
  applicationStatus:
    EnvironmentByProjectIdMariadbApplicationStatus$outboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databaseName: z.string(),
  databasePassword: z.string(),
  databaseRootPassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdHealthCheckSwarmMariadbEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  labelsSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdLabelsSwarmMariadbEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  mariadbId: z.string(),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdModeSwarmMariadbEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  name: z.string(),
  networkSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdNetworkSwarmMariadbEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  placementSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdPlacementSwarmMariadbEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdRestartPolicySwarmMariadbEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  rollbackConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdRollbackConfigSwarmMariadbEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdUpdateConfigSwarmMariadbEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMariadb$ {
  /** @deprecated use `EnvironmentByProjectIdMariadb$inboundSchema` instead. */
  export const inboundSchema = EnvironmentByProjectIdMariadb$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMariadb$outboundSchema` instead. */
  export const outboundSchema = EnvironmentByProjectIdMariadb$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMariadb$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdMariadb$Outbound;
}

export function environmentByProjectIdMariadbToJSON(
  environmentByProjectIdMariadb: EnvironmentByProjectIdMariadb,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdMariadb$outboundSchema.parse(
      environmentByProjectIdMariadb,
    ),
  );
}

export function environmentByProjectIdMariadbFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentByProjectIdMariadb, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentByProjectIdMariadb$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentByProjectIdMariadb' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMongoApplicationStatus$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdMongoApplicationStatus> = z
    .nativeEnum(EnvironmentByProjectIdMongoApplicationStatus);

/** @internal */
export const EnvironmentByProjectIdMongoApplicationStatus$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdMongoApplicationStatus> =
    EnvironmentByProjectIdMongoApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMongoApplicationStatus$ {
  /** @deprecated use `EnvironmentByProjectIdMongoApplicationStatus$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdMongoApplicationStatus$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMongoApplicationStatus$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdMongoApplicationStatus$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdHealthCheckSwarmMongoEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdHealthCheckSwarmMongoEnum> = z
    .nativeEnum(EnvironmentByProjectIdHealthCheckSwarmMongoEnum);

/** @internal */
export const EnvironmentByProjectIdHealthCheckSwarmMongoEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdHealthCheckSwarmMongoEnum> =
    EnvironmentByProjectIdHealthCheckSwarmMongoEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdHealthCheckSwarmMongoEnum$ {
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmMongoEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdHealthCheckSwarmMongoEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmMongoEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdHealthCheckSwarmMongoEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdHealthCheckSwarmMongoUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdHealthCheckSwarmMongoUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdHealthCheckSwarmMongoEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdHealthCheckSwarmMongoUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdHealthCheckSwarmMongoUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdHealthCheckSwarmMongoUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdHealthCheckSwarmMongoUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdHealthCheckSwarmMongoEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdHealthCheckSwarmMongoUnion$ {
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmMongoUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdHealthCheckSwarmMongoUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmMongoUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdHealthCheckSwarmMongoUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmMongoUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdHealthCheckSwarmMongoUnion$Outbound;
}

export function environmentByProjectIdHealthCheckSwarmMongoUnionToJSON(
  environmentByProjectIdHealthCheckSwarmMongoUnion:
    EnvironmentByProjectIdHealthCheckSwarmMongoUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdHealthCheckSwarmMongoUnion$outboundSchema.parse(
      environmentByProjectIdHealthCheckSwarmMongoUnion,
    ),
  );
}

export function environmentByProjectIdHealthCheckSwarmMongoUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdHealthCheckSwarmMongoUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdHealthCheckSwarmMongoUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdHealthCheckSwarmMongoUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMongoHealthCheckSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMongoHealthCheckSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdHealthCheckSwarmMongoEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdMongoHealthCheckSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdMongoHealthCheckSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMongoHealthCheckSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdMongoHealthCheckSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdHealthCheckSwarmMongoEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMongoHealthCheckSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdMongoHealthCheckSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdMongoHealthCheckSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMongoHealthCheckSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdMongoHealthCheckSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMongoHealthCheckSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdMongoHealthCheckSwarmUnion$Outbound;
}

export function environmentByProjectIdMongoHealthCheckSwarmUnionToJSON(
  environmentByProjectIdMongoHealthCheckSwarmUnion:
    EnvironmentByProjectIdMongoHealthCheckSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdMongoHealthCheckSwarmUnion$outboundSchema.parse(
      environmentByProjectIdMongoHealthCheckSwarmUnion,
    ),
  );
}

export function environmentByProjectIdMongoHealthCheckSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdMongoHealthCheckSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdMongoHealthCheckSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdMongoHealthCheckSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdLabelsSwarmMongoEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdLabelsSwarmMongoEnum> = z
    .nativeEnum(EnvironmentByProjectIdLabelsSwarmMongoEnum);

/** @internal */
export const EnvironmentByProjectIdLabelsSwarmMongoEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdLabelsSwarmMongoEnum> =
    EnvironmentByProjectIdLabelsSwarmMongoEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdLabelsSwarmMongoEnum$ {
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmMongoEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdLabelsSwarmMongoEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmMongoEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdLabelsSwarmMongoEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdLabelsSwarmMongoUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdLabelsSwarmMongoUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdLabelsSwarmMongoEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdLabelsSwarmMongoUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdLabelsSwarmMongoUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdLabelsSwarmMongoUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdLabelsSwarmMongoUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdLabelsSwarmMongoEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdLabelsSwarmMongoUnion$ {
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmMongoUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdLabelsSwarmMongoUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmMongoUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdLabelsSwarmMongoUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmMongoUnion$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdLabelsSwarmMongoUnion$Outbound;
}

export function environmentByProjectIdLabelsSwarmMongoUnionToJSON(
  environmentByProjectIdLabelsSwarmMongoUnion:
    EnvironmentByProjectIdLabelsSwarmMongoUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdLabelsSwarmMongoUnion$outboundSchema.parse(
      environmentByProjectIdLabelsSwarmMongoUnion,
    ),
  );
}

export function environmentByProjectIdLabelsSwarmMongoUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdLabelsSwarmMongoUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdLabelsSwarmMongoUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdLabelsSwarmMongoUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMongoLabelsSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMongoLabelsSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdLabelsSwarmMongoEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdMongoLabelsSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdMongoLabelsSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMongoLabelsSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdMongoLabelsSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdLabelsSwarmMongoEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMongoLabelsSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdMongoLabelsSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdMongoLabelsSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMongoLabelsSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdMongoLabelsSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMongoLabelsSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdMongoLabelsSwarmUnion$Outbound;
}

export function environmentByProjectIdMongoLabelsSwarmUnionToJSON(
  environmentByProjectIdMongoLabelsSwarmUnion:
    EnvironmentByProjectIdMongoLabelsSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdMongoLabelsSwarmUnion$outboundSchema.parse(
      environmentByProjectIdMongoLabelsSwarmUnion,
    ),
  );
}

export function environmentByProjectIdMongoLabelsSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdMongoLabelsSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdMongoLabelsSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdMongoLabelsSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdModeSwarmMongoEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdModeSwarmMongoEnum> = z
    .nativeEnum(EnvironmentByProjectIdModeSwarmMongoEnum);

/** @internal */
export const EnvironmentByProjectIdModeSwarmMongoEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdModeSwarmMongoEnum> =
    EnvironmentByProjectIdModeSwarmMongoEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdModeSwarmMongoEnum$ {
  /** @deprecated use `EnvironmentByProjectIdModeSwarmMongoEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdModeSwarmMongoEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdModeSwarmMongoEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdModeSwarmMongoEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdModeSwarmMongoUnion$inboundSchema: z.ZodType<
  EnvironmentByProjectIdModeSwarmMongoUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentByProjectIdModeSwarmMongoEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentByProjectIdModeSwarmMongoUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdModeSwarmMongoUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdModeSwarmMongoUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdModeSwarmMongoUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdModeSwarmMongoEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdModeSwarmMongoUnion$ {
  /** @deprecated use `EnvironmentByProjectIdModeSwarmMongoUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdModeSwarmMongoUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdModeSwarmMongoUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdModeSwarmMongoUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdModeSwarmMongoUnion$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdModeSwarmMongoUnion$Outbound;
}

export function environmentByProjectIdModeSwarmMongoUnionToJSON(
  environmentByProjectIdModeSwarmMongoUnion:
    EnvironmentByProjectIdModeSwarmMongoUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdModeSwarmMongoUnion$outboundSchema.parse(
      environmentByProjectIdModeSwarmMongoUnion,
    ),
  );
}

export function environmentByProjectIdModeSwarmMongoUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdModeSwarmMongoUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdModeSwarmMongoUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdModeSwarmMongoUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMongoModeSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentByProjectIdMongoModeSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdModeSwarmMongoEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentByProjectIdMongoModeSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdMongoModeSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMongoModeSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdMongoModeSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdModeSwarmMongoEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMongoModeSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdMongoModeSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdMongoModeSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMongoModeSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdMongoModeSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMongoModeSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdMongoModeSwarmUnion$Outbound;
}

export function environmentByProjectIdMongoModeSwarmUnionToJSON(
  environmentByProjectIdMongoModeSwarmUnion:
    EnvironmentByProjectIdMongoModeSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdMongoModeSwarmUnion$outboundSchema.parse(
      environmentByProjectIdMongoModeSwarmUnion,
    ),
  );
}

export function environmentByProjectIdMongoModeSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdMongoModeSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdMongoModeSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdMongoModeSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdNetworkSwarmMongoEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdNetworkSwarmMongoEnum> = z
    .nativeEnum(EnvironmentByProjectIdNetworkSwarmMongoEnum);

/** @internal */
export const EnvironmentByProjectIdNetworkSwarmMongoEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdNetworkSwarmMongoEnum> =
    EnvironmentByProjectIdNetworkSwarmMongoEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdNetworkSwarmMongoEnum$ {
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmMongoEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdNetworkSwarmMongoEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmMongoEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdNetworkSwarmMongoEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdNetworkSwarmMongoUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdNetworkSwarmMongoUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdNetworkSwarmMongoEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdNetworkSwarmMongoUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdNetworkSwarmMongoUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdNetworkSwarmMongoUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdNetworkSwarmMongoUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdNetworkSwarmMongoEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdNetworkSwarmMongoUnion$ {
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmMongoUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdNetworkSwarmMongoUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmMongoUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdNetworkSwarmMongoUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmMongoUnion$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdNetworkSwarmMongoUnion$Outbound;
}

export function environmentByProjectIdNetworkSwarmMongoUnionToJSON(
  environmentByProjectIdNetworkSwarmMongoUnion:
    EnvironmentByProjectIdNetworkSwarmMongoUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdNetworkSwarmMongoUnion$outboundSchema.parse(
      environmentByProjectIdNetworkSwarmMongoUnion,
    ),
  );
}

export function environmentByProjectIdNetworkSwarmMongoUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdNetworkSwarmMongoUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdNetworkSwarmMongoUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdNetworkSwarmMongoUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMongoNetworkSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMongoNetworkSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdNetworkSwarmMongoEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdMongoNetworkSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdMongoNetworkSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMongoNetworkSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdMongoNetworkSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdNetworkSwarmMongoEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMongoNetworkSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdMongoNetworkSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdMongoNetworkSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMongoNetworkSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdMongoNetworkSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMongoNetworkSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdMongoNetworkSwarmUnion$Outbound;
}

export function environmentByProjectIdMongoNetworkSwarmUnionToJSON(
  environmentByProjectIdMongoNetworkSwarmUnion:
    EnvironmentByProjectIdMongoNetworkSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdMongoNetworkSwarmUnion$outboundSchema.parse(
      environmentByProjectIdMongoNetworkSwarmUnion,
    ),
  );
}

export function environmentByProjectIdMongoNetworkSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdMongoNetworkSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdMongoNetworkSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdMongoNetworkSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdPlacementSwarmMongoEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdPlacementSwarmMongoEnum> = z
    .nativeEnum(EnvironmentByProjectIdPlacementSwarmMongoEnum);

/** @internal */
export const EnvironmentByProjectIdPlacementSwarmMongoEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdPlacementSwarmMongoEnum> =
    EnvironmentByProjectIdPlacementSwarmMongoEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdPlacementSwarmMongoEnum$ {
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmMongoEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdPlacementSwarmMongoEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmMongoEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdPlacementSwarmMongoEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdPlacementSwarmMongoUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdPlacementSwarmMongoUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdPlacementSwarmMongoEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdPlacementSwarmMongoUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdPlacementSwarmMongoUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdPlacementSwarmMongoUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdPlacementSwarmMongoUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdPlacementSwarmMongoEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdPlacementSwarmMongoUnion$ {
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmMongoUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdPlacementSwarmMongoUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmMongoUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdPlacementSwarmMongoUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmMongoUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdPlacementSwarmMongoUnion$Outbound;
}

export function environmentByProjectIdPlacementSwarmMongoUnionToJSON(
  environmentByProjectIdPlacementSwarmMongoUnion:
    EnvironmentByProjectIdPlacementSwarmMongoUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdPlacementSwarmMongoUnion$outboundSchema.parse(
      environmentByProjectIdPlacementSwarmMongoUnion,
    ),
  );
}

export function environmentByProjectIdPlacementSwarmMongoUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdPlacementSwarmMongoUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdPlacementSwarmMongoUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdPlacementSwarmMongoUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMongoPlacementSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMongoPlacementSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdPlacementSwarmMongoEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdMongoPlacementSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdMongoPlacementSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMongoPlacementSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdMongoPlacementSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdPlacementSwarmMongoEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMongoPlacementSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdMongoPlacementSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdMongoPlacementSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMongoPlacementSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdMongoPlacementSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMongoPlacementSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdMongoPlacementSwarmUnion$Outbound;
}

export function environmentByProjectIdMongoPlacementSwarmUnionToJSON(
  environmentByProjectIdMongoPlacementSwarmUnion:
    EnvironmentByProjectIdMongoPlacementSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdMongoPlacementSwarmUnion$outboundSchema.parse(
      environmentByProjectIdMongoPlacementSwarmUnion,
    ),
  );
}

export function environmentByProjectIdMongoPlacementSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdMongoPlacementSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdMongoPlacementSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdMongoPlacementSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdRestartPolicySwarmMongoEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdRestartPolicySwarmMongoEnum> = z
    .nativeEnum(EnvironmentByProjectIdRestartPolicySwarmMongoEnum);

/** @internal */
export const EnvironmentByProjectIdRestartPolicySwarmMongoEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdRestartPolicySwarmMongoEnum> =
    EnvironmentByProjectIdRestartPolicySwarmMongoEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRestartPolicySwarmMongoEnum$ {
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmMongoEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRestartPolicySwarmMongoEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmMongoEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRestartPolicySwarmMongoEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdRestartPolicySwarmMongoUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRestartPolicySwarmMongoUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdRestartPolicySwarmMongoEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdRestartPolicySwarmMongoUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdRestartPolicySwarmMongoUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRestartPolicySwarmMongoUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdRestartPolicySwarmMongoUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdRestartPolicySwarmMongoEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRestartPolicySwarmMongoUnion$ {
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmMongoUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRestartPolicySwarmMongoUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmMongoUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRestartPolicySwarmMongoUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmMongoUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdRestartPolicySwarmMongoUnion$Outbound;
}

export function environmentByProjectIdRestartPolicySwarmMongoUnionToJSON(
  environmentByProjectIdRestartPolicySwarmMongoUnion:
    EnvironmentByProjectIdRestartPolicySwarmMongoUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdRestartPolicySwarmMongoUnion$outboundSchema.parse(
      environmentByProjectIdRestartPolicySwarmMongoUnion,
    ),
  );
}

export function environmentByProjectIdRestartPolicySwarmMongoUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdRestartPolicySwarmMongoUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdRestartPolicySwarmMongoUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdRestartPolicySwarmMongoUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMongoRestartPolicySwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMongoRestartPolicySwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdRestartPolicySwarmMongoEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdMongoRestartPolicySwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdMongoRestartPolicySwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMongoRestartPolicySwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdMongoRestartPolicySwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdRestartPolicySwarmMongoEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMongoRestartPolicySwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdMongoRestartPolicySwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdMongoRestartPolicySwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMongoRestartPolicySwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdMongoRestartPolicySwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMongoRestartPolicySwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdMongoRestartPolicySwarmUnion$Outbound;
}

export function environmentByProjectIdMongoRestartPolicySwarmUnionToJSON(
  environmentByProjectIdMongoRestartPolicySwarmUnion:
    EnvironmentByProjectIdMongoRestartPolicySwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdMongoRestartPolicySwarmUnion$outboundSchema.parse(
      environmentByProjectIdMongoRestartPolicySwarmUnion,
    ),
  );
}

export function environmentByProjectIdMongoRestartPolicySwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdMongoRestartPolicySwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdMongoRestartPolicySwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdMongoRestartPolicySwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdRollbackConfigSwarmMongoEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdRollbackConfigSwarmMongoEnum> = z
    .nativeEnum(EnvironmentByProjectIdRollbackConfigSwarmMongoEnum);

/** @internal */
export const EnvironmentByProjectIdRollbackConfigSwarmMongoEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdRollbackConfigSwarmMongoEnum> =
    EnvironmentByProjectIdRollbackConfigSwarmMongoEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRollbackConfigSwarmMongoEnum$ {
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmMongoEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRollbackConfigSwarmMongoEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmMongoEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRollbackConfigSwarmMongoEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdRollbackConfigSwarmMongoUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRollbackConfigSwarmMongoUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdRollbackConfigSwarmMongoEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdRollbackConfigSwarmMongoUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdRollbackConfigSwarmMongoUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRollbackConfigSwarmMongoUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdRollbackConfigSwarmMongoUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdRollbackConfigSwarmMongoEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRollbackConfigSwarmMongoUnion$ {
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmMongoUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRollbackConfigSwarmMongoUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmMongoUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRollbackConfigSwarmMongoUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmMongoUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdRollbackConfigSwarmMongoUnion$Outbound;
}

export function environmentByProjectIdRollbackConfigSwarmMongoUnionToJSON(
  environmentByProjectIdRollbackConfigSwarmMongoUnion:
    EnvironmentByProjectIdRollbackConfigSwarmMongoUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdRollbackConfigSwarmMongoUnion$outboundSchema.parse(
      environmentByProjectIdRollbackConfigSwarmMongoUnion,
    ),
  );
}

export function environmentByProjectIdRollbackConfigSwarmMongoUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdRollbackConfigSwarmMongoUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdRollbackConfigSwarmMongoUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdRollbackConfigSwarmMongoUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMongoRollbackConfigSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMongoRollbackConfigSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdRollbackConfigSwarmMongoEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdMongoRollbackConfigSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdMongoRollbackConfigSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMongoRollbackConfigSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdMongoRollbackConfigSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdRollbackConfigSwarmMongoEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMongoRollbackConfigSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdMongoRollbackConfigSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdMongoRollbackConfigSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMongoRollbackConfigSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdMongoRollbackConfigSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMongoRollbackConfigSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdMongoRollbackConfigSwarmUnion$Outbound;
}

export function environmentByProjectIdMongoRollbackConfigSwarmUnionToJSON(
  environmentByProjectIdMongoRollbackConfigSwarmUnion:
    EnvironmentByProjectIdMongoRollbackConfigSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdMongoRollbackConfigSwarmUnion$outboundSchema.parse(
      environmentByProjectIdMongoRollbackConfigSwarmUnion,
    ),
  );
}

export function environmentByProjectIdMongoRollbackConfigSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdMongoRollbackConfigSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdMongoRollbackConfigSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdMongoRollbackConfigSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdUpdateConfigSwarmMongoEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdUpdateConfigSwarmMongoEnum> = z
    .nativeEnum(EnvironmentByProjectIdUpdateConfigSwarmMongoEnum);

/** @internal */
export const EnvironmentByProjectIdUpdateConfigSwarmMongoEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdUpdateConfigSwarmMongoEnum> =
    EnvironmentByProjectIdUpdateConfigSwarmMongoEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdUpdateConfigSwarmMongoEnum$ {
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmMongoEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdUpdateConfigSwarmMongoEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmMongoEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdUpdateConfigSwarmMongoEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdUpdateConfigSwarmMongoUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdUpdateConfigSwarmMongoUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdUpdateConfigSwarmMongoEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdUpdateConfigSwarmMongoUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdUpdateConfigSwarmMongoUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdUpdateConfigSwarmMongoUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdUpdateConfigSwarmMongoUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdUpdateConfigSwarmMongoEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdUpdateConfigSwarmMongoUnion$ {
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmMongoUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdUpdateConfigSwarmMongoUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmMongoUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdUpdateConfigSwarmMongoUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmMongoUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdUpdateConfigSwarmMongoUnion$Outbound;
}

export function environmentByProjectIdUpdateConfigSwarmMongoUnionToJSON(
  environmentByProjectIdUpdateConfigSwarmMongoUnion:
    EnvironmentByProjectIdUpdateConfigSwarmMongoUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdUpdateConfigSwarmMongoUnion$outboundSchema.parse(
      environmentByProjectIdUpdateConfigSwarmMongoUnion,
    ),
  );
}

export function environmentByProjectIdUpdateConfigSwarmMongoUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdUpdateConfigSwarmMongoUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdUpdateConfigSwarmMongoUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdUpdateConfigSwarmMongoUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMongoUpdateConfigSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMongoUpdateConfigSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdUpdateConfigSwarmMongoEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdMongoUpdateConfigSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdMongoUpdateConfigSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMongoUpdateConfigSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdMongoUpdateConfigSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdUpdateConfigSwarmMongoEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMongoUpdateConfigSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdMongoUpdateConfigSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdMongoUpdateConfigSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMongoUpdateConfigSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdMongoUpdateConfigSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMongoUpdateConfigSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdMongoUpdateConfigSwarmUnion$Outbound;
}

export function environmentByProjectIdMongoUpdateConfigSwarmUnionToJSON(
  environmentByProjectIdMongoUpdateConfigSwarmUnion:
    EnvironmentByProjectIdMongoUpdateConfigSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdMongoUpdateConfigSwarmUnion$outboundSchema.parse(
      environmentByProjectIdMongoUpdateConfigSwarmUnion,
    ),
  );
}

export function environmentByProjectIdMongoUpdateConfigSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdMongoUpdateConfigSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdMongoUpdateConfigSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdMongoUpdateConfigSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMongo$inboundSchema: z.ZodType<
  EnvironmentByProjectIdMongo,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  applicationStatus: EnvironmentByProjectIdMongoApplicationStatus$inboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databasePassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdHealthCheckSwarmMongoEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  labelsSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdLabelsSwarmMongoEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdModeSwarmMongoEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  mongoId: z.string(),
  name: z.string(),
  networkSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdNetworkSwarmMongoEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  placementSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdPlacementSwarmMongoEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  replicaSets: z.nullable(z.boolean()),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdRestartPolicySwarmMongoEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  rollbackConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdRollbackConfigSwarmMongoEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdUpdateConfigSwarmMongoEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
});

/** @internal */
export type EnvironmentByProjectIdMongo$Outbound = {
  appName: string;
  applicationStatus: string;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databasePassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  labelsSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  mongoId: string;
  name: string;
  networkSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  placementSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  replicaSets: boolean | null;
  replicas: number;
  restartPolicySwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  rollbackConfigSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  serverId: string | null;
  updateConfigSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
};

/** @internal */
export const EnvironmentByProjectIdMongo$outboundSchema: z.ZodType<
  EnvironmentByProjectIdMongo$Outbound,
  z.ZodTypeDef,
  EnvironmentByProjectIdMongo
> = z.object({
  appName: z.string(),
  applicationStatus:
    EnvironmentByProjectIdMongoApplicationStatus$outboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databasePassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdHealthCheckSwarmMongoEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  labelsSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdLabelsSwarmMongoEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdModeSwarmMongoEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  mongoId: z.string(),
  name: z.string(),
  networkSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdNetworkSwarmMongoEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  placementSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdPlacementSwarmMongoEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  replicaSets: z.nullable(z.boolean()),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdRestartPolicySwarmMongoEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  rollbackConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdRollbackConfigSwarmMongoEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdUpdateConfigSwarmMongoEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMongo$ {
  /** @deprecated use `EnvironmentByProjectIdMongo$inboundSchema` instead. */
  export const inboundSchema = EnvironmentByProjectIdMongo$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMongo$outboundSchema` instead. */
  export const outboundSchema = EnvironmentByProjectIdMongo$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMongo$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdMongo$Outbound;
}

export function environmentByProjectIdMongoToJSON(
  environmentByProjectIdMongo: EnvironmentByProjectIdMongo,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdMongo$outboundSchema.parse(
      environmentByProjectIdMongo,
    ),
  );
}

export function environmentByProjectIdMongoFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentByProjectIdMongo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentByProjectIdMongo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentByProjectIdMongo' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMysqlApplicationStatus$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdMysqlApplicationStatus> = z
    .nativeEnum(EnvironmentByProjectIdMysqlApplicationStatus);

/** @internal */
export const EnvironmentByProjectIdMysqlApplicationStatus$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdMysqlApplicationStatus> =
    EnvironmentByProjectIdMysqlApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMysqlApplicationStatus$ {
  /** @deprecated use `EnvironmentByProjectIdMysqlApplicationStatus$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdMysqlApplicationStatus$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMysqlApplicationStatus$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdMysqlApplicationStatus$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdHealthCheckSwarmMysqlEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdHealthCheckSwarmMysqlEnum> = z
    .nativeEnum(EnvironmentByProjectIdHealthCheckSwarmMysqlEnum);

/** @internal */
export const EnvironmentByProjectIdHealthCheckSwarmMysqlEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdHealthCheckSwarmMysqlEnum> =
    EnvironmentByProjectIdHealthCheckSwarmMysqlEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdHealthCheckSwarmMysqlEnum$ {
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmMysqlEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdHealthCheckSwarmMysqlEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmMysqlEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdHealthCheckSwarmMysqlEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdHealthCheckSwarmMysqlUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdHealthCheckSwarmMysqlUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdHealthCheckSwarmMysqlEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdHealthCheckSwarmMysqlUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdHealthCheckSwarmMysqlUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdHealthCheckSwarmMysqlUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdHealthCheckSwarmMysqlUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdHealthCheckSwarmMysqlEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdHealthCheckSwarmMysqlUnion$ {
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmMysqlUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdHealthCheckSwarmMysqlUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmMysqlUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdHealthCheckSwarmMysqlUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmMysqlUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdHealthCheckSwarmMysqlUnion$Outbound;
}

export function environmentByProjectIdHealthCheckSwarmMysqlUnionToJSON(
  environmentByProjectIdHealthCheckSwarmMysqlUnion:
    EnvironmentByProjectIdHealthCheckSwarmMysqlUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdHealthCheckSwarmMysqlUnion$outboundSchema.parse(
      environmentByProjectIdHealthCheckSwarmMysqlUnion,
    ),
  );
}

export function environmentByProjectIdHealthCheckSwarmMysqlUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdHealthCheckSwarmMysqlUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdHealthCheckSwarmMysqlUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdHealthCheckSwarmMysqlUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMysqlHealthCheckSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMysqlHealthCheckSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdHealthCheckSwarmMysqlEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdMysqlHealthCheckSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdMysqlHealthCheckSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMysqlHealthCheckSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdMysqlHealthCheckSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdHealthCheckSwarmMysqlEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMysqlHealthCheckSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdMysqlHealthCheckSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdMysqlHealthCheckSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMysqlHealthCheckSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdMysqlHealthCheckSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMysqlHealthCheckSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdMysqlHealthCheckSwarmUnion$Outbound;
}

export function environmentByProjectIdMysqlHealthCheckSwarmUnionToJSON(
  environmentByProjectIdMysqlHealthCheckSwarmUnion:
    EnvironmentByProjectIdMysqlHealthCheckSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdMysqlHealthCheckSwarmUnion$outboundSchema.parse(
      environmentByProjectIdMysqlHealthCheckSwarmUnion,
    ),
  );
}

export function environmentByProjectIdMysqlHealthCheckSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdMysqlHealthCheckSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdMysqlHealthCheckSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdMysqlHealthCheckSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdLabelsSwarmMysqlEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdLabelsSwarmMysqlEnum> = z
    .nativeEnum(EnvironmentByProjectIdLabelsSwarmMysqlEnum);

/** @internal */
export const EnvironmentByProjectIdLabelsSwarmMysqlEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdLabelsSwarmMysqlEnum> =
    EnvironmentByProjectIdLabelsSwarmMysqlEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdLabelsSwarmMysqlEnum$ {
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmMysqlEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdLabelsSwarmMysqlEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmMysqlEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdLabelsSwarmMysqlEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdLabelsSwarmMysqlUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdLabelsSwarmMysqlUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdLabelsSwarmMysqlEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdLabelsSwarmMysqlUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdLabelsSwarmMysqlUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdLabelsSwarmMysqlUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdLabelsSwarmMysqlUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdLabelsSwarmMysqlEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdLabelsSwarmMysqlUnion$ {
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmMysqlUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdLabelsSwarmMysqlUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmMysqlUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdLabelsSwarmMysqlUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmMysqlUnion$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdLabelsSwarmMysqlUnion$Outbound;
}

export function environmentByProjectIdLabelsSwarmMysqlUnionToJSON(
  environmentByProjectIdLabelsSwarmMysqlUnion:
    EnvironmentByProjectIdLabelsSwarmMysqlUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdLabelsSwarmMysqlUnion$outboundSchema.parse(
      environmentByProjectIdLabelsSwarmMysqlUnion,
    ),
  );
}

export function environmentByProjectIdLabelsSwarmMysqlUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdLabelsSwarmMysqlUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdLabelsSwarmMysqlUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdLabelsSwarmMysqlUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMysqlLabelsSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMysqlLabelsSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdLabelsSwarmMysqlEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdMysqlLabelsSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdMysqlLabelsSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMysqlLabelsSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdMysqlLabelsSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdLabelsSwarmMysqlEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMysqlLabelsSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdMysqlLabelsSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdMysqlLabelsSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMysqlLabelsSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdMysqlLabelsSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMysqlLabelsSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdMysqlLabelsSwarmUnion$Outbound;
}

export function environmentByProjectIdMysqlLabelsSwarmUnionToJSON(
  environmentByProjectIdMysqlLabelsSwarmUnion:
    EnvironmentByProjectIdMysqlLabelsSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdMysqlLabelsSwarmUnion$outboundSchema.parse(
      environmentByProjectIdMysqlLabelsSwarmUnion,
    ),
  );
}

export function environmentByProjectIdMysqlLabelsSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdMysqlLabelsSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdMysqlLabelsSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdMysqlLabelsSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdModeSwarmMysqlEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdModeSwarmMysqlEnum> = z
    .nativeEnum(EnvironmentByProjectIdModeSwarmMysqlEnum);

/** @internal */
export const EnvironmentByProjectIdModeSwarmMysqlEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdModeSwarmMysqlEnum> =
    EnvironmentByProjectIdModeSwarmMysqlEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdModeSwarmMysqlEnum$ {
  /** @deprecated use `EnvironmentByProjectIdModeSwarmMysqlEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdModeSwarmMysqlEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdModeSwarmMysqlEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdModeSwarmMysqlEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdModeSwarmMysqlUnion$inboundSchema: z.ZodType<
  EnvironmentByProjectIdModeSwarmMysqlUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentByProjectIdModeSwarmMysqlEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentByProjectIdModeSwarmMysqlUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdModeSwarmMysqlUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdModeSwarmMysqlUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdModeSwarmMysqlUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdModeSwarmMysqlEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdModeSwarmMysqlUnion$ {
  /** @deprecated use `EnvironmentByProjectIdModeSwarmMysqlUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdModeSwarmMysqlUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdModeSwarmMysqlUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdModeSwarmMysqlUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdModeSwarmMysqlUnion$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdModeSwarmMysqlUnion$Outbound;
}

export function environmentByProjectIdModeSwarmMysqlUnionToJSON(
  environmentByProjectIdModeSwarmMysqlUnion:
    EnvironmentByProjectIdModeSwarmMysqlUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdModeSwarmMysqlUnion$outboundSchema.parse(
      environmentByProjectIdModeSwarmMysqlUnion,
    ),
  );
}

export function environmentByProjectIdModeSwarmMysqlUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdModeSwarmMysqlUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdModeSwarmMysqlUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdModeSwarmMysqlUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMysqlModeSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentByProjectIdMysqlModeSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdModeSwarmMysqlEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentByProjectIdMysqlModeSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdMysqlModeSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMysqlModeSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdMysqlModeSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdModeSwarmMysqlEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMysqlModeSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdMysqlModeSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdMysqlModeSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMysqlModeSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdMysqlModeSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMysqlModeSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdMysqlModeSwarmUnion$Outbound;
}

export function environmentByProjectIdMysqlModeSwarmUnionToJSON(
  environmentByProjectIdMysqlModeSwarmUnion:
    EnvironmentByProjectIdMysqlModeSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdMysqlModeSwarmUnion$outboundSchema.parse(
      environmentByProjectIdMysqlModeSwarmUnion,
    ),
  );
}

export function environmentByProjectIdMysqlModeSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdMysqlModeSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdMysqlModeSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdMysqlModeSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdNetworkSwarmMysqlEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdNetworkSwarmMysqlEnum> = z
    .nativeEnum(EnvironmentByProjectIdNetworkSwarmMysqlEnum);

/** @internal */
export const EnvironmentByProjectIdNetworkSwarmMysqlEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdNetworkSwarmMysqlEnum> =
    EnvironmentByProjectIdNetworkSwarmMysqlEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdNetworkSwarmMysqlEnum$ {
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmMysqlEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdNetworkSwarmMysqlEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmMysqlEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdNetworkSwarmMysqlEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdNetworkSwarmMysqlUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdNetworkSwarmMysqlUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdNetworkSwarmMysqlEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdNetworkSwarmMysqlUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdNetworkSwarmMysqlUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdNetworkSwarmMysqlUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdNetworkSwarmMysqlUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdNetworkSwarmMysqlEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdNetworkSwarmMysqlUnion$ {
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmMysqlUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdNetworkSwarmMysqlUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmMysqlUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdNetworkSwarmMysqlUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmMysqlUnion$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdNetworkSwarmMysqlUnion$Outbound;
}

export function environmentByProjectIdNetworkSwarmMysqlUnionToJSON(
  environmentByProjectIdNetworkSwarmMysqlUnion:
    EnvironmentByProjectIdNetworkSwarmMysqlUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdNetworkSwarmMysqlUnion$outboundSchema.parse(
      environmentByProjectIdNetworkSwarmMysqlUnion,
    ),
  );
}

export function environmentByProjectIdNetworkSwarmMysqlUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdNetworkSwarmMysqlUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdNetworkSwarmMysqlUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdNetworkSwarmMysqlUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMysqlNetworkSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMysqlNetworkSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdNetworkSwarmMysqlEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdMysqlNetworkSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdMysqlNetworkSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMysqlNetworkSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdMysqlNetworkSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdNetworkSwarmMysqlEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMysqlNetworkSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdMysqlNetworkSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdMysqlNetworkSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMysqlNetworkSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdMysqlNetworkSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMysqlNetworkSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdMysqlNetworkSwarmUnion$Outbound;
}

export function environmentByProjectIdMysqlNetworkSwarmUnionToJSON(
  environmentByProjectIdMysqlNetworkSwarmUnion:
    EnvironmentByProjectIdMysqlNetworkSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdMysqlNetworkSwarmUnion$outboundSchema.parse(
      environmentByProjectIdMysqlNetworkSwarmUnion,
    ),
  );
}

export function environmentByProjectIdMysqlNetworkSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdMysqlNetworkSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdMysqlNetworkSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdMysqlNetworkSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdPlacementSwarmMysqlEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdPlacementSwarmMysqlEnum> = z
    .nativeEnum(EnvironmentByProjectIdPlacementSwarmMysqlEnum);

/** @internal */
export const EnvironmentByProjectIdPlacementSwarmMysqlEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdPlacementSwarmMysqlEnum> =
    EnvironmentByProjectIdPlacementSwarmMysqlEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdPlacementSwarmMysqlEnum$ {
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmMysqlEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdPlacementSwarmMysqlEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmMysqlEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdPlacementSwarmMysqlEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdPlacementSwarmMysqlUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdPlacementSwarmMysqlUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdPlacementSwarmMysqlEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdPlacementSwarmMysqlUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdPlacementSwarmMysqlUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdPlacementSwarmMysqlUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdPlacementSwarmMysqlUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdPlacementSwarmMysqlEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdPlacementSwarmMysqlUnion$ {
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmMysqlUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdPlacementSwarmMysqlUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmMysqlUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdPlacementSwarmMysqlUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmMysqlUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdPlacementSwarmMysqlUnion$Outbound;
}

export function environmentByProjectIdPlacementSwarmMysqlUnionToJSON(
  environmentByProjectIdPlacementSwarmMysqlUnion:
    EnvironmentByProjectIdPlacementSwarmMysqlUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdPlacementSwarmMysqlUnion$outboundSchema.parse(
      environmentByProjectIdPlacementSwarmMysqlUnion,
    ),
  );
}

export function environmentByProjectIdPlacementSwarmMysqlUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdPlacementSwarmMysqlUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdPlacementSwarmMysqlUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdPlacementSwarmMysqlUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMysqlPlacementSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMysqlPlacementSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdPlacementSwarmMysqlEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdMysqlPlacementSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdMysqlPlacementSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMysqlPlacementSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdMysqlPlacementSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdPlacementSwarmMysqlEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMysqlPlacementSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdMysqlPlacementSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdMysqlPlacementSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMysqlPlacementSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdMysqlPlacementSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMysqlPlacementSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdMysqlPlacementSwarmUnion$Outbound;
}

export function environmentByProjectIdMysqlPlacementSwarmUnionToJSON(
  environmentByProjectIdMysqlPlacementSwarmUnion:
    EnvironmentByProjectIdMysqlPlacementSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdMysqlPlacementSwarmUnion$outboundSchema.parse(
      environmentByProjectIdMysqlPlacementSwarmUnion,
    ),
  );
}

export function environmentByProjectIdMysqlPlacementSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdMysqlPlacementSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdMysqlPlacementSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdMysqlPlacementSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdRestartPolicySwarmMysqlEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdRestartPolicySwarmMysqlEnum> = z
    .nativeEnum(EnvironmentByProjectIdRestartPolicySwarmMysqlEnum);

/** @internal */
export const EnvironmentByProjectIdRestartPolicySwarmMysqlEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdRestartPolicySwarmMysqlEnum> =
    EnvironmentByProjectIdRestartPolicySwarmMysqlEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRestartPolicySwarmMysqlEnum$ {
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmMysqlEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRestartPolicySwarmMysqlEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmMysqlEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRestartPolicySwarmMysqlEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdRestartPolicySwarmMysqlUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRestartPolicySwarmMysqlUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdRestartPolicySwarmMysqlEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdRestartPolicySwarmMysqlUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdRestartPolicySwarmMysqlUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRestartPolicySwarmMysqlUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdRestartPolicySwarmMysqlUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdRestartPolicySwarmMysqlEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRestartPolicySwarmMysqlUnion$ {
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmMysqlUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRestartPolicySwarmMysqlUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmMysqlUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRestartPolicySwarmMysqlUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmMysqlUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdRestartPolicySwarmMysqlUnion$Outbound;
}

export function environmentByProjectIdRestartPolicySwarmMysqlUnionToJSON(
  environmentByProjectIdRestartPolicySwarmMysqlUnion:
    EnvironmentByProjectIdRestartPolicySwarmMysqlUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdRestartPolicySwarmMysqlUnion$outboundSchema.parse(
      environmentByProjectIdRestartPolicySwarmMysqlUnion,
    ),
  );
}

export function environmentByProjectIdRestartPolicySwarmMysqlUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdRestartPolicySwarmMysqlUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdRestartPolicySwarmMysqlUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdRestartPolicySwarmMysqlUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMysqlRestartPolicySwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMysqlRestartPolicySwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdRestartPolicySwarmMysqlEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdMysqlRestartPolicySwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdMysqlRestartPolicySwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMysqlRestartPolicySwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdMysqlRestartPolicySwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdRestartPolicySwarmMysqlEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMysqlRestartPolicySwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdMysqlRestartPolicySwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdMysqlRestartPolicySwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMysqlRestartPolicySwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdMysqlRestartPolicySwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMysqlRestartPolicySwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdMysqlRestartPolicySwarmUnion$Outbound;
}

export function environmentByProjectIdMysqlRestartPolicySwarmUnionToJSON(
  environmentByProjectIdMysqlRestartPolicySwarmUnion:
    EnvironmentByProjectIdMysqlRestartPolicySwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdMysqlRestartPolicySwarmUnion$outboundSchema.parse(
      environmentByProjectIdMysqlRestartPolicySwarmUnion,
    ),
  );
}

export function environmentByProjectIdMysqlRestartPolicySwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdMysqlRestartPolicySwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdMysqlRestartPolicySwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdMysqlRestartPolicySwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdRollbackConfigSwarmMysqlEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdRollbackConfigSwarmMysqlEnum> = z
    .nativeEnum(EnvironmentByProjectIdRollbackConfigSwarmMysqlEnum);

/** @internal */
export const EnvironmentByProjectIdRollbackConfigSwarmMysqlEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdRollbackConfigSwarmMysqlEnum> =
    EnvironmentByProjectIdRollbackConfigSwarmMysqlEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRollbackConfigSwarmMysqlEnum$ {
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmMysqlEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRollbackConfigSwarmMysqlEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmMysqlEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRollbackConfigSwarmMysqlEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdRollbackConfigSwarmMysqlUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRollbackConfigSwarmMysqlUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdRollbackConfigSwarmMysqlEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdRollbackConfigSwarmMysqlUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdRollbackConfigSwarmMysqlUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRollbackConfigSwarmMysqlUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdRollbackConfigSwarmMysqlUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdRollbackConfigSwarmMysqlEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRollbackConfigSwarmMysqlUnion$ {
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmMysqlUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRollbackConfigSwarmMysqlUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmMysqlUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRollbackConfigSwarmMysqlUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmMysqlUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdRollbackConfigSwarmMysqlUnion$Outbound;
}

export function environmentByProjectIdRollbackConfigSwarmMysqlUnionToJSON(
  environmentByProjectIdRollbackConfigSwarmMysqlUnion:
    EnvironmentByProjectIdRollbackConfigSwarmMysqlUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdRollbackConfigSwarmMysqlUnion$outboundSchema.parse(
      environmentByProjectIdRollbackConfigSwarmMysqlUnion,
    ),
  );
}

export function environmentByProjectIdRollbackConfigSwarmMysqlUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdRollbackConfigSwarmMysqlUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdRollbackConfigSwarmMysqlUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdRollbackConfigSwarmMysqlUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMysqlRollbackConfigSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMysqlRollbackConfigSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdRollbackConfigSwarmMysqlEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdMysqlRollbackConfigSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdMysqlRollbackConfigSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMysqlRollbackConfigSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdMysqlRollbackConfigSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdRollbackConfigSwarmMysqlEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMysqlRollbackConfigSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdMysqlRollbackConfigSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdMysqlRollbackConfigSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMysqlRollbackConfigSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdMysqlRollbackConfigSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMysqlRollbackConfigSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdMysqlRollbackConfigSwarmUnion$Outbound;
}

export function environmentByProjectIdMysqlRollbackConfigSwarmUnionToJSON(
  environmentByProjectIdMysqlRollbackConfigSwarmUnion:
    EnvironmentByProjectIdMysqlRollbackConfigSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdMysqlRollbackConfigSwarmUnion$outboundSchema.parse(
      environmentByProjectIdMysqlRollbackConfigSwarmUnion,
    ),
  );
}

export function environmentByProjectIdMysqlRollbackConfigSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdMysqlRollbackConfigSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdMysqlRollbackConfigSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdMysqlRollbackConfigSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdUpdateConfigSwarmMysqlEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdUpdateConfigSwarmMysqlEnum> = z
    .nativeEnum(EnvironmentByProjectIdUpdateConfigSwarmMysqlEnum);

/** @internal */
export const EnvironmentByProjectIdUpdateConfigSwarmMysqlEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdUpdateConfigSwarmMysqlEnum> =
    EnvironmentByProjectIdUpdateConfigSwarmMysqlEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdUpdateConfigSwarmMysqlEnum$ {
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmMysqlEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdUpdateConfigSwarmMysqlEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmMysqlEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdUpdateConfigSwarmMysqlEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdUpdateConfigSwarmMysqlUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdUpdateConfigSwarmMysqlUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdUpdateConfigSwarmMysqlEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdUpdateConfigSwarmMysqlUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdUpdateConfigSwarmMysqlUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdUpdateConfigSwarmMysqlUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdUpdateConfigSwarmMysqlUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdUpdateConfigSwarmMysqlEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdUpdateConfigSwarmMysqlUnion$ {
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmMysqlUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdUpdateConfigSwarmMysqlUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmMysqlUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdUpdateConfigSwarmMysqlUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmMysqlUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdUpdateConfigSwarmMysqlUnion$Outbound;
}

export function environmentByProjectIdUpdateConfigSwarmMysqlUnionToJSON(
  environmentByProjectIdUpdateConfigSwarmMysqlUnion:
    EnvironmentByProjectIdUpdateConfigSwarmMysqlUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdUpdateConfigSwarmMysqlUnion$outboundSchema.parse(
      environmentByProjectIdUpdateConfigSwarmMysqlUnion,
    ),
  );
}

export function environmentByProjectIdUpdateConfigSwarmMysqlUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdUpdateConfigSwarmMysqlUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdUpdateConfigSwarmMysqlUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdUpdateConfigSwarmMysqlUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMysqlUpdateConfigSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMysqlUpdateConfigSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdUpdateConfigSwarmMysqlEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdMysqlUpdateConfigSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdMysqlUpdateConfigSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdMysqlUpdateConfigSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdMysqlUpdateConfigSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdUpdateConfigSwarmMysqlEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMysqlUpdateConfigSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdMysqlUpdateConfigSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdMysqlUpdateConfigSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMysqlUpdateConfigSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdMysqlUpdateConfigSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMysqlUpdateConfigSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdMysqlUpdateConfigSwarmUnion$Outbound;
}

export function environmentByProjectIdMysqlUpdateConfigSwarmUnionToJSON(
  environmentByProjectIdMysqlUpdateConfigSwarmUnion:
    EnvironmentByProjectIdMysqlUpdateConfigSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdMysqlUpdateConfigSwarmUnion$outboundSchema.parse(
      environmentByProjectIdMysqlUpdateConfigSwarmUnion,
    ),
  );
}

export function environmentByProjectIdMysqlUpdateConfigSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdMysqlUpdateConfigSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdMysqlUpdateConfigSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdMysqlUpdateConfigSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdMysql$inboundSchema: z.ZodType<
  EnvironmentByProjectIdMysql,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  applicationStatus: EnvironmentByProjectIdMysqlApplicationStatus$inboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databaseName: z.string(),
  databasePassword: z.string(),
  databaseRootPassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdHealthCheckSwarmMysqlEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  labelsSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdLabelsSwarmMysqlEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdModeSwarmMysqlEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  mysqlId: z.string(),
  name: z.string(),
  networkSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdNetworkSwarmMysqlEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  placementSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdPlacementSwarmMysqlEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdRestartPolicySwarmMysqlEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  rollbackConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdRollbackConfigSwarmMysqlEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdUpdateConfigSwarmMysqlEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
});

/** @internal */
export type EnvironmentByProjectIdMysql$Outbound = {
  appName: string;
  applicationStatus: string;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databaseName: string;
  databasePassword: string;
  databaseRootPassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  labelsSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  mysqlId: string;
  name: string;
  networkSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  placementSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  replicas: number;
  restartPolicySwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  rollbackConfigSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  serverId: string | null;
  updateConfigSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
};

/** @internal */
export const EnvironmentByProjectIdMysql$outboundSchema: z.ZodType<
  EnvironmentByProjectIdMysql$Outbound,
  z.ZodTypeDef,
  EnvironmentByProjectIdMysql
> = z.object({
  appName: z.string(),
  applicationStatus:
    EnvironmentByProjectIdMysqlApplicationStatus$outboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databaseName: z.string(),
  databasePassword: z.string(),
  databaseRootPassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdHealthCheckSwarmMysqlEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  labelsSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdLabelsSwarmMysqlEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdModeSwarmMysqlEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  mysqlId: z.string(),
  name: z.string(),
  networkSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdNetworkSwarmMysqlEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  placementSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdPlacementSwarmMysqlEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdRestartPolicySwarmMysqlEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  rollbackConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdRollbackConfigSwarmMysqlEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdUpdateConfigSwarmMysqlEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdMysql$ {
  /** @deprecated use `EnvironmentByProjectIdMysql$inboundSchema` instead. */
  export const inboundSchema = EnvironmentByProjectIdMysql$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMysql$outboundSchema` instead. */
  export const outboundSchema = EnvironmentByProjectIdMysql$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdMysql$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdMysql$Outbound;
}

export function environmentByProjectIdMysqlToJSON(
  environmentByProjectIdMysql: EnvironmentByProjectIdMysql,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdMysql$outboundSchema.parse(
      environmentByProjectIdMysql,
    ),
  );
}

export function environmentByProjectIdMysqlFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentByProjectIdMysql, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentByProjectIdMysql$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentByProjectIdMysql' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdPostgreApplicationStatus$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdPostgreApplicationStatus> = z
    .nativeEnum(EnvironmentByProjectIdPostgreApplicationStatus);

/** @internal */
export const EnvironmentByProjectIdPostgreApplicationStatus$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdPostgreApplicationStatus> =
    EnvironmentByProjectIdPostgreApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdPostgreApplicationStatus$ {
  /** @deprecated use `EnvironmentByProjectIdPostgreApplicationStatus$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdPostgreApplicationStatus$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPostgreApplicationStatus$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdPostgreApplicationStatus$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdHealthCheckSwarmPostgreEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdHealthCheckSwarmPostgreEnum> = z
    .nativeEnum(EnvironmentByProjectIdHealthCheckSwarmPostgreEnum);

/** @internal */
export const EnvironmentByProjectIdHealthCheckSwarmPostgreEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdHealthCheckSwarmPostgreEnum> =
    EnvironmentByProjectIdHealthCheckSwarmPostgreEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdHealthCheckSwarmPostgreEnum$ {
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmPostgreEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdHealthCheckSwarmPostgreEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmPostgreEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdHealthCheckSwarmPostgreEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdHealthCheckSwarmPostgreUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdHealthCheckSwarmPostgreUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdHealthCheckSwarmPostgreEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdHealthCheckSwarmPostgreUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdHealthCheckSwarmPostgreUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdHealthCheckSwarmPostgreUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdHealthCheckSwarmPostgreUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdHealthCheckSwarmPostgreEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdHealthCheckSwarmPostgreUnion$ {
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmPostgreUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdHealthCheckSwarmPostgreUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmPostgreUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdHealthCheckSwarmPostgreUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmPostgreUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdHealthCheckSwarmPostgreUnion$Outbound;
}

export function environmentByProjectIdHealthCheckSwarmPostgreUnionToJSON(
  environmentByProjectIdHealthCheckSwarmPostgreUnion:
    EnvironmentByProjectIdHealthCheckSwarmPostgreUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdHealthCheckSwarmPostgreUnion$outboundSchema.parse(
      environmentByProjectIdHealthCheckSwarmPostgreUnion,
    ),
  );
}

export function environmentByProjectIdHealthCheckSwarmPostgreUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdHealthCheckSwarmPostgreUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdHealthCheckSwarmPostgreUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdHealthCheckSwarmPostgreUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdPostgreHealthCheckSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdPostgreHealthCheckSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdHealthCheckSwarmPostgreEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdPostgreHealthCheckSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdPostgreHealthCheckSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdPostgreHealthCheckSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdPostgreHealthCheckSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdHealthCheckSwarmPostgreEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdPostgreHealthCheckSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdPostgreHealthCheckSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdPostgreHealthCheckSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPostgreHealthCheckSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdPostgreHealthCheckSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPostgreHealthCheckSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdPostgreHealthCheckSwarmUnion$Outbound;
}

export function environmentByProjectIdPostgreHealthCheckSwarmUnionToJSON(
  environmentByProjectIdPostgreHealthCheckSwarmUnion:
    EnvironmentByProjectIdPostgreHealthCheckSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdPostgreHealthCheckSwarmUnion$outboundSchema.parse(
      environmentByProjectIdPostgreHealthCheckSwarmUnion,
    ),
  );
}

export function environmentByProjectIdPostgreHealthCheckSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdPostgreHealthCheckSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdPostgreHealthCheckSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdPostgreHealthCheckSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdLabelsSwarmPostgreEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdLabelsSwarmPostgreEnum> = z
    .nativeEnum(EnvironmentByProjectIdLabelsSwarmPostgreEnum);

/** @internal */
export const EnvironmentByProjectIdLabelsSwarmPostgreEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdLabelsSwarmPostgreEnum> =
    EnvironmentByProjectIdLabelsSwarmPostgreEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdLabelsSwarmPostgreEnum$ {
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmPostgreEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdLabelsSwarmPostgreEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmPostgreEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdLabelsSwarmPostgreEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdLabelsSwarmPostgreUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdLabelsSwarmPostgreUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdLabelsSwarmPostgreEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdLabelsSwarmPostgreUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdLabelsSwarmPostgreUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdLabelsSwarmPostgreUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdLabelsSwarmPostgreUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdLabelsSwarmPostgreEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdLabelsSwarmPostgreUnion$ {
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmPostgreUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdLabelsSwarmPostgreUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmPostgreUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdLabelsSwarmPostgreUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmPostgreUnion$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdLabelsSwarmPostgreUnion$Outbound;
}

export function environmentByProjectIdLabelsSwarmPostgreUnionToJSON(
  environmentByProjectIdLabelsSwarmPostgreUnion:
    EnvironmentByProjectIdLabelsSwarmPostgreUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdLabelsSwarmPostgreUnion$outboundSchema.parse(
      environmentByProjectIdLabelsSwarmPostgreUnion,
    ),
  );
}

export function environmentByProjectIdLabelsSwarmPostgreUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdLabelsSwarmPostgreUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdLabelsSwarmPostgreUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdLabelsSwarmPostgreUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdPostgreLabelsSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdPostgreLabelsSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdLabelsSwarmPostgreEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdPostgreLabelsSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdPostgreLabelsSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdPostgreLabelsSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdPostgreLabelsSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdLabelsSwarmPostgreEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdPostgreLabelsSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdPostgreLabelsSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdPostgreLabelsSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPostgreLabelsSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdPostgreLabelsSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPostgreLabelsSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdPostgreLabelsSwarmUnion$Outbound;
}

export function environmentByProjectIdPostgreLabelsSwarmUnionToJSON(
  environmentByProjectIdPostgreLabelsSwarmUnion:
    EnvironmentByProjectIdPostgreLabelsSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdPostgreLabelsSwarmUnion$outboundSchema.parse(
      environmentByProjectIdPostgreLabelsSwarmUnion,
    ),
  );
}

export function environmentByProjectIdPostgreLabelsSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdPostgreLabelsSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdPostgreLabelsSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdPostgreLabelsSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdModeSwarmPostgreEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdModeSwarmPostgreEnum> = z
    .nativeEnum(EnvironmentByProjectIdModeSwarmPostgreEnum);

/** @internal */
export const EnvironmentByProjectIdModeSwarmPostgreEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdModeSwarmPostgreEnum> =
    EnvironmentByProjectIdModeSwarmPostgreEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdModeSwarmPostgreEnum$ {
  /** @deprecated use `EnvironmentByProjectIdModeSwarmPostgreEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdModeSwarmPostgreEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdModeSwarmPostgreEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdModeSwarmPostgreEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdModeSwarmPostgreUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdModeSwarmPostgreUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdModeSwarmPostgreEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdModeSwarmPostgreUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdModeSwarmPostgreUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdModeSwarmPostgreUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdModeSwarmPostgreUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdModeSwarmPostgreEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdModeSwarmPostgreUnion$ {
  /** @deprecated use `EnvironmentByProjectIdModeSwarmPostgreUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdModeSwarmPostgreUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdModeSwarmPostgreUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdModeSwarmPostgreUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdModeSwarmPostgreUnion$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdModeSwarmPostgreUnion$Outbound;
}

export function environmentByProjectIdModeSwarmPostgreUnionToJSON(
  environmentByProjectIdModeSwarmPostgreUnion:
    EnvironmentByProjectIdModeSwarmPostgreUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdModeSwarmPostgreUnion$outboundSchema.parse(
      environmentByProjectIdModeSwarmPostgreUnion,
    ),
  );
}

export function environmentByProjectIdModeSwarmPostgreUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdModeSwarmPostgreUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdModeSwarmPostgreUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdModeSwarmPostgreUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdPostgreModeSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdPostgreModeSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdModeSwarmPostgreEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdPostgreModeSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdPostgreModeSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdPostgreModeSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdPostgreModeSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdModeSwarmPostgreEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdPostgreModeSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdPostgreModeSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdPostgreModeSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPostgreModeSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdPostgreModeSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPostgreModeSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdPostgreModeSwarmUnion$Outbound;
}

export function environmentByProjectIdPostgreModeSwarmUnionToJSON(
  environmentByProjectIdPostgreModeSwarmUnion:
    EnvironmentByProjectIdPostgreModeSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdPostgreModeSwarmUnion$outboundSchema.parse(
      environmentByProjectIdPostgreModeSwarmUnion,
    ),
  );
}

export function environmentByProjectIdPostgreModeSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdPostgreModeSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdPostgreModeSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdPostgreModeSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdNetworkSwarmPostgreEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdNetworkSwarmPostgreEnum> = z
    .nativeEnum(EnvironmentByProjectIdNetworkSwarmPostgreEnum);

/** @internal */
export const EnvironmentByProjectIdNetworkSwarmPostgreEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdNetworkSwarmPostgreEnum> =
    EnvironmentByProjectIdNetworkSwarmPostgreEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdNetworkSwarmPostgreEnum$ {
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmPostgreEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdNetworkSwarmPostgreEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmPostgreEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdNetworkSwarmPostgreEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdNetworkSwarmPostgreUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdNetworkSwarmPostgreUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdNetworkSwarmPostgreEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdNetworkSwarmPostgreUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdNetworkSwarmPostgreUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdNetworkSwarmPostgreUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdNetworkSwarmPostgreUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdNetworkSwarmPostgreEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdNetworkSwarmPostgreUnion$ {
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmPostgreUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdNetworkSwarmPostgreUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmPostgreUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdNetworkSwarmPostgreUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmPostgreUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdNetworkSwarmPostgreUnion$Outbound;
}

export function environmentByProjectIdNetworkSwarmPostgreUnionToJSON(
  environmentByProjectIdNetworkSwarmPostgreUnion:
    EnvironmentByProjectIdNetworkSwarmPostgreUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdNetworkSwarmPostgreUnion$outboundSchema.parse(
      environmentByProjectIdNetworkSwarmPostgreUnion,
    ),
  );
}

export function environmentByProjectIdNetworkSwarmPostgreUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdNetworkSwarmPostgreUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdNetworkSwarmPostgreUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdNetworkSwarmPostgreUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdPostgreNetworkSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdPostgreNetworkSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdNetworkSwarmPostgreEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdPostgreNetworkSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdPostgreNetworkSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdPostgreNetworkSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdPostgreNetworkSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdNetworkSwarmPostgreEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdPostgreNetworkSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdPostgreNetworkSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdPostgreNetworkSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPostgreNetworkSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdPostgreNetworkSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPostgreNetworkSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdPostgreNetworkSwarmUnion$Outbound;
}

export function environmentByProjectIdPostgreNetworkSwarmUnionToJSON(
  environmentByProjectIdPostgreNetworkSwarmUnion:
    EnvironmentByProjectIdPostgreNetworkSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdPostgreNetworkSwarmUnion$outboundSchema.parse(
      environmentByProjectIdPostgreNetworkSwarmUnion,
    ),
  );
}

export function environmentByProjectIdPostgreNetworkSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdPostgreNetworkSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdPostgreNetworkSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdPostgreNetworkSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdPlacementSwarmPostgreEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdPlacementSwarmPostgreEnum> = z
    .nativeEnum(EnvironmentByProjectIdPlacementSwarmPostgreEnum);

/** @internal */
export const EnvironmentByProjectIdPlacementSwarmPostgreEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdPlacementSwarmPostgreEnum> =
    EnvironmentByProjectIdPlacementSwarmPostgreEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdPlacementSwarmPostgreEnum$ {
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmPostgreEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdPlacementSwarmPostgreEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmPostgreEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdPlacementSwarmPostgreEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdPlacementSwarmPostgreUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdPlacementSwarmPostgreUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdPlacementSwarmPostgreEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdPlacementSwarmPostgreUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdPlacementSwarmPostgreUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdPlacementSwarmPostgreUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdPlacementSwarmPostgreUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdPlacementSwarmPostgreEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdPlacementSwarmPostgreUnion$ {
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmPostgreUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdPlacementSwarmPostgreUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmPostgreUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdPlacementSwarmPostgreUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmPostgreUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdPlacementSwarmPostgreUnion$Outbound;
}

export function environmentByProjectIdPlacementSwarmPostgreUnionToJSON(
  environmentByProjectIdPlacementSwarmPostgreUnion:
    EnvironmentByProjectIdPlacementSwarmPostgreUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdPlacementSwarmPostgreUnion$outboundSchema.parse(
      environmentByProjectIdPlacementSwarmPostgreUnion,
    ),
  );
}

export function environmentByProjectIdPlacementSwarmPostgreUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdPlacementSwarmPostgreUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdPlacementSwarmPostgreUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdPlacementSwarmPostgreUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdPostgrePlacementSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdPostgrePlacementSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdPlacementSwarmPostgreEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdPostgrePlacementSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdPostgrePlacementSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdPostgrePlacementSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdPostgrePlacementSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdPlacementSwarmPostgreEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdPostgrePlacementSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdPostgrePlacementSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdPostgrePlacementSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPostgrePlacementSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdPostgrePlacementSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPostgrePlacementSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdPostgrePlacementSwarmUnion$Outbound;
}

export function environmentByProjectIdPostgrePlacementSwarmUnionToJSON(
  environmentByProjectIdPostgrePlacementSwarmUnion:
    EnvironmentByProjectIdPostgrePlacementSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdPostgrePlacementSwarmUnion$outboundSchema.parse(
      environmentByProjectIdPostgrePlacementSwarmUnion,
    ),
  );
}

export function environmentByProjectIdPostgrePlacementSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdPostgrePlacementSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdPostgrePlacementSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdPostgrePlacementSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdRestartPolicySwarmPostgreEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdRestartPolicySwarmPostgreEnum> =
    z.nativeEnum(EnvironmentByProjectIdRestartPolicySwarmPostgreEnum);

/** @internal */
export const EnvironmentByProjectIdRestartPolicySwarmPostgreEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdRestartPolicySwarmPostgreEnum> =
    EnvironmentByProjectIdRestartPolicySwarmPostgreEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRestartPolicySwarmPostgreEnum$ {
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmPostgreEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRestartPolicySwarmPostgreEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmPostgreEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRestartPolicySwarmPostgreEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdRestartPolicySwarmPostgreUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRestartPolicySwarmPostgreUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdRestartPolicySwarmPostgreEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdRestartPolicySwarmPostgreUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdRestartPolicySwarmPostgreUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRestartPolicySwarmPostgreUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdRestartPolicySwarmPostgreUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdRestartPolicySwarmPostgreEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRestartPolicySwarmPostgreUnion$ {
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmPostgreUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRestartPolicySwarmPostgreUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmPostgreUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRestartPolicySwarmPostgreUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmPostgreUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdRestartPolicySwarmPostgreUnion$Outbound;
}

export function environmentByProjectIdRestartPolicySwarmPostgreUnionToJSON(
  environmentByProjectIdRestartPolicySwarmPostgreUnion:
    EnvironmentByProjectIdRestartPolicySwarmPostgreUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdRestartPolicySwarmPostgreUnion$outboundSchema.parse(
      environmentByProjectIdRestartPolicySwarmPostgreUnion,
    ),
  );
}

export function environmentByProjectIdRestartPolicySwarmPostgreUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdRestartPolicySwarmPostgreUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdRestartPolicySwarmPostgreUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdRestartPolicySwarmPostgreUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdPostgreRestartPolicySwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdPostgreRestartPolicySwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdRestartPolicySwarmPostgreEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdPostgreRestartPolicySwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdPostgreRestartPolicySwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdPostgreRestartPolicySwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdPostgreRestartPolicySwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdRestartPolicySwarmPostgreEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdPostgreRestartPolicySwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdPostgreRestartPolicySwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdPostgreRestartPolicySwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPostgreRestartPolicySwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdPostgreRestartPolicySwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPostgreRestartPolicySwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdPostgreRestartPolicySwarmUnion$Outbound;
}

export function environmentByProjectIdPostgreRestartPolicySwarmUnionToJSON(
  environmentByProjectIdPostgreRestartPolicySwarmUnion:
    EnvironmentByProjectIdPostgreRestartPolicySwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdPostgreRestartPolicySwarmUnion$outboundSchema.parse(
      environmentByProjectIdPostgreRestartPolicySwarmUnion,
    ),
  );
}

export function environmentByProjectIdPostgreRestartPolicySwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdPostgreRestartPolicySwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdPostgreRestartPolicySwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdPostgreRestartPolicySwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdRollbackConfigSwarmPostgreEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdRollbackConfigSwarmPostgreEnum> =
    z.nativeEnum(EnvironmentByProjectIdRollbackConfigSwarmPostgreEnum);

/** @internal */
export const EnvironmentByProjectIdRollbackConfigSwarmPostgreEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdRollbackConfigSwarmPostgreEnum> =
    EnvironmentByProjectIdRollbackConfigSwarmPostgreEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRollbackConfigSwarmPostgreEnum$ {
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmPostgreEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRollbackConfigSwarmPostgreEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmPostgreEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRollbackConfigSwarmPostgreEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdRollbackConfigSwarmPostgreUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRollbackConfigSwarmPostgreUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdRollbackConfigSwarmPostgreEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdRollbackConfigSwarmPostgreUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdRollbackConfigSwarmPostgreUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRollbackConfigSwarmPostgreUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdRollbackConfigSwarmPostgreUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdRollbackConfigSwarmPostgreEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRollbackConfigSwarmPostgreUnion$ {
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmPostgreUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRollbackConfigSwarmPostgreUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmPostgreUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRollbackConfigSwarmPostgreUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmPostgreUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdRollbackConfigSwarmPostgreUnion$Outbound;
}

export function environmentByProjectIdRollbackConfigSwarmPostgreUnionToJSON(
  environmentByProjectIdRollbackConfigSwarmPostgreUnion:
    EnvironmentByProjectIdRollbackConfigSwarmPostgreUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdRollbackConfigSwarmPostgreUnion$outboundSchema.parse(
      environmentByProjectIdRollbackConfigSwarmPostgreUnion,
    ),
  );
}

export function environmentByProjectIdRollbackConfigSwarmPostgreUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdRollbackConfigSwarmPostgreUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdRollbackConfigSwarmPostgreUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdRollbackConfigSwarmPostgreUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdPostgreRollbackConfigSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdPostgreRollbackConfigSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdRollbackConfigSwarmPostgreEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdPostgreRollbackConfigSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdPostgreRollbackConfigSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdPostgreRollbackConfigSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdPostgreRollbackConfigSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdRollbackConfigSwarmPostgreEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdPostgreRollbackConfigSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdPostgreRollbackConfigSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdPostgreRollbackConfigSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPostgreRollbackConfigSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdPostgreRollbackConfigSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPostgreRollbackConfigSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdPostgreRollbackConfigSwarmUnion$Outbound;
}

export function environmentByProjectIdPostgreRollbackConfigSwarmUnionToJSON(
  environmentByProjectIdPostgreRollbackConfigSwarmUnion:
    EnvironmentByProjectIdPostgreRollbackConfigSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdPostgreRollbackConfigSwarmUnion$outboundSchema.parse(
      environmentByProjectIdPostgreRollbackConfigSwarmUnion,
    ),
  );
}

export function environmentByProjectIdPostgreRollbackConfigSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdPostgreRollbackConfigSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdPostgreRollbackConfigSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdPostgreRollbackConfigSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdUpdateConfigSwarmPostgreEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdUpdateConfigSwarmPostgreEnum> = z
    .nativeEnum(EnvironmentByProjectIdUpdateConfigSwarmPostgreEnum);

/** @internal */
export const EnvironmentByProjectIdUpdateConfigSwarmPostgreEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdUpdateConfigSwarmPostgreEnum> =
    EnvironmentByProjectIdUpdateConfigSwarmPostgreEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdUpdateConfigSwarmPostgreEnum$ {
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmPostgreEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdUpdateConfigSwarmPostgreEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmPostgreEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdUpdateConfigSwarmPostgreEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdUpdateConfigSwarmPostgreUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdUpdateConfigSwarmPostgreUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdUpdateConfigSwarmPostgreEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdUpdateConfigSwarmPostgreUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdUpdateConfigSwarmPostgreUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdUpdateConfigSwarmPostgreUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdUpdateConfigSwarmPostgreUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdUpdateConfigSwarmPostgreEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdUpdateConfigSwarmPostgreUnion$ {
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmPostgreUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdUpdateConfigSwarmPostgreUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmPostgreUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdUpdateConfigSwarmPostgreUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmPostgreUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdUpdateConfigSwarmPostgreUnion$Outbound;
}

export function environmentByProjectIdUpdateConfigSwarmPostgreUnionToJSON(
  environmentByProjectIdUpdateConfigSwarmPostgreUnion:
    EnvironmentByProjectIdUpdateConfigSwarmPostgreUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdUpdateConfigSwarmPostgreUnion$outboundSchema.parse(
      environmentByProjectIdUpdateConfigSwarmPostgreUnion,
    ),
  );
}

export function environmentByProjectIdUpdateConfigSwarmPostgreUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdUpdateConfigSwarmPostgreUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdUpdateConfigSwarmPostgreUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdUpdateConfigSwarmPostgreUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdPostgreUpdateConfigSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdPostgreUpdateConfigSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdUpdateConfigSwarmPostgreEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdPostgreUpdateConfigSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdPostgreUpdateConfigSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdPostgreUpdateConfigSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdPostgreUpdateConfigSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdUpdateConfigSwarmPostgreEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdPostgreUpdateConfigSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdPostgreUpdateConfigSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdPostgreUpdateConfigSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPostgreUpdateConfigSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdPostgreUpdateConfigSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPostgreUpdateConfigSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdPostgreUpdateConfigSwarmUnion$Outbound;
}

export function environmentByProjectIdPostgreUpdateConfigSwarmUnionToJSON(
  environmentByProjectIdPostgreUpdateConfigSwarmUnion:
    EnvironmentByProjectIdPostgreUpdateConfigSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdPostgreUpdateConfigSwarmUnion$outboundSchema.parse(
      environmentByProjectIdPostgreUpdateConfigSwarmUnion,
    ),
  );
}

export function environmentByProjectIdPostgreUpdateConfigSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdPostgreUpdateConfigSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdPostgreUpdateConfigSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdPostgreUpdateConfigSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdPostgre$inboundSchema: z.ZodType<
  EnvironmentByProjectIdPostgre,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  applicationStatus:
    EnvironmentByProjectIdPostgreApplicationStatus$inboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databaseName: z.string(),
  databasePassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdHealthCheckSwarmPostgreEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  labelsSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdLabelsSwarmPostgreEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdModeSwarmPostgreEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  name: z.string(),
  networkSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdNetworkSwarmPostgreEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  placementSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdPlacementSwarmPostgreEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  postgresId: z.string(),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdRestartPolicySwarmPostgreEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  rollbackConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdRollbackConfigSwarmPostgreEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdUpdateConfigSwarmPostgreEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
});

/** @internal */
export type EnvironmentByProjectIdPostgre$Outbound = {
  appName: string;
  applicationStatus: string;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databaseName: string;
  databasePassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  labelsSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  name: string;
  networkSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  placementSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  postgresId: string;
  replicas: number;
  restartPolicySwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  rollbackConfigSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  serverId: string | null;
  updateConfigSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
};

/** @internal */
export const EnvironmentByProjectIdPostgre$outboundSchema: z.ZodType<
  EnvironmentByProjectIdPostgre$Outbound,
  z.ZodTypeDef,
  EnvironmentByProjectIdPostgre
> = z.object({
  appName: z.string(),
  applicationStatus:
    EnvironmentByProjectIdPostgreApplicationStatus$outboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databaseName: z.string(),
  databasePassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdHealthCheckSwarmPostgreEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  labelsSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdLabelsSwarmPostgreEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdModeSwarmPostgreEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  name: z.string(),
  networkSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdNetworkSwarmPostgreEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  placementSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdPlacementSwarmPostgreEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  postgresId: z.string(),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdRestartPolicySwarmPostgreEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  rollbackConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdRollbackConfigSwarmPostgreEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdUpdateConfigSwarmPostgreEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdPostgre$ {
  /** @deprecated use `EnvironmentByProjectIdPostgre$inboundSchema` instead. */
  export const inboundSchema = EnvironmentByProjectIdPostgre$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPostgre$outboundSchema` instead. */
  export const outboundSchema = EnvironmentByProjectIdPostgre$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPostgre$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdPostgre$Outbound;
}

export function environmentByProjectIdPostgreToJSON(
  environmentByProjectIdPostgre: EnvironmentByProjectIdPostgre,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdPostgre$outboundSchema.parse(
      environmentByProjectIdPostgre,
    ),
  );
}

export function environmentByProjectIdPostgreFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentByProjectIdPostgre, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentByProjectIdPostgre$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentByProjectIdPostgre' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdProject$inboundSchema: z.ZodType<
  EnvironmentByProjectIdProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/** @internal */
export type EnvironmentByProjectIdProject$Outbound = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

/** @internal */
export const EnvironmentByProjectIdProject$outboundSchema: z.ZodType<
  EnvironmentByProjectIdProject$Outbound,
  z.ZodTypeDef,
  EnvironmentByProjectIdProject
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdProject$ {
  /** @deprecated use `EnvironmentByProjectIdProject$inboundSchema` instead. */
  export const inboundSchema = EnvironmentByProjectIdProject$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdProject$outboundSchema` instead. */
  export const outboundSchema = EnvironmentByProjectIdProject$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdProject$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdProject$Outbound;
}

export function environmentByProjectIdProjectToJSON(
  environmentByProjectIdProject: EnvironmentByProjectIdProject,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdProject$outboundSchema.parse(
      environmentByProjectIdProject,
    ),
  );
}

export function environmentByProjectIdProjectFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentByProjectIdProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentByProjectIdProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentByProjectIdProject' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdRediApplicationStatus$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdRediApplicationStatus> = z
    .nativeEnum(EnvironmentByProjectIdRediApplicationStatus);

/** @internal */
export const EnvironmentByProjectIdRediApplicationStatus$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdRediApplicationStatus> =
    EnvironmentByProjectIdRediApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRediApplicationStatus$ {
  /** @deprecated use `EnvironmentByProjectIdRediApplicationStatus$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRediApplicationStatus$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRediApplicationStatus$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRediApplicationStatus$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdHealthCheckSwarmRediEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdHealthCheckSwarmRediEnum> = z
    .nativeEnum(EnvironmentByProjectIdHealthCheckSwarmRediEnum);

/** @internal */
export const EnvironmentByProjectIdHealthCheckSwarmRediEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdHealthCheckSwarmRediEnum> =
    EnvironmentByProjectIdHealthCheckSwarmRediEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdHealthCheckSwarmRediEnum$ {
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmRediEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdHealthCheckSwarmRediEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmRediEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdHealthCheckSwarmRediEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdHealthCheckSwarmRediUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdHealthCheckSwarmRediUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdHealthCheckSwarmRediEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdHealthCheckSwarmRediUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdHealthCheckSwarmRediUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdHealthCheckSwarmRediUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdHealthCheckSwarmRediUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdHealthCheckSwarmRediEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdHealthCheckSwarmRediUnion$ {
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmRediUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdHealthCheckSwarmRediUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmRediUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdHealthCheckSwarmRediUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdHealthCheckSwarmRediUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdHealthCheckSwarmRediUnion$Outbound;
}

export function environmentByProjectIdHealthCheckSwarmRediUnionToJSON(
  environmentByProjectIdHealthCheckSwarmRediUnion:
    EnvironmentByProjectIdHealthCheckSwarmRediUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdHealthCheckSwarmRediUnion$outboundSchema.parse(
      environmentByProjectIdHealthCheckSwarmRediUnion,
    ),
  );
}

export function environmentByProjectIdHealthCheckSwarmRediUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdHealthCheckSwarmRediUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdHealthCheckSwarmRediUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdHealthCheckSwarmRediUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdRediHealthCheckSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRediHealthCheckSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdHealthCheckSwarmRediEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdRediHealthCheckSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdRediHealthCheckSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRediHealthCheckSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdRediHealthCheckSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdHealthCheckSwarmRediEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRediHealthCheckSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdRediHealthCheckSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRediHealthCheckSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRediHealthCheckSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRediHealthCheckSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRediHealthCheckSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdRediHealthCheckSwarmUnion$Outbound;
}

export function environmentByProjectIdRediHealthCheckSwarmUnionToJSON(
  environmentByProjectIdRediHealthCheckSwarmUnion:
    EnvironmentByProjectIdRediHealthCheckSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdRediHealthCheckSwarmUnion$outboundSchema.parse(
      environmentByProjectIdRediHealthCheckSwarmUnion,
    ),
  );
}

export function environmentByProjectIdRediHealthCheckSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdRediHealthCheckSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdRediHealthCheckSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdRediHealthCheckSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdLabelsSwarmRediEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdLabelsSwarmRediEnum> = z
    .nativeEnum(EnvironmentByProjectIdLabelsSwarmRediEnum);

/** @internal */
export const EnvironmentByProjectIdLabelsSwarmRediEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdLabelsSwarmRediEnum> =
    EnvironmentByProjectIdLabelsSwarmRediEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdLabelsSwarmRediEnum$ {
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmRediEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdLabelsSwarmRediEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmRediEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdLabelsSwarmRediEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdLabelsSwarmRediUnion$inboundSchema:
  z.ZodType<EnvironmentByProjectIdLabelsSwarmRediUnion, z.ZodTypeDef, unknown> =
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdLabelsSwarmRediEnum$inboundSchema,
    ]);

/** @internal */
export type EnvironmentByProjectIdLabelsSwarmRediUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdLabelsSwarmRediUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdLabelsSwarmRediUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdLabelsSwarmRediUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdLabelsSwarmRediEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdLabelsSwarmRediUnion$ {
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmRediUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdLabelsSwarmRediUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmRediUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdLabelsSwarmRediUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdLabelsSwarmRediUnion$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdLabelsSwarmRediUnion$Outbound;
}

export function environmentByProjectIdLabelsSwarmRediUnionToJSON(
  environmentByProjectIdLabelsSwarmRediUnion:
    EnvironmentByProjectIdLabelsSwarmRediUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdLabelsSwarmRediUnion$outboundSchema.parse(
      environmentByProjectIdLabelsSwarmRediUnion,
    ),
  );
}

export function environmentByProjectIdLabelsSwarmRediUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdLabelsSwarmRediUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdLabelsSwarmRediUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdLabelsSwarmRediUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdRediLabelsSwarmUnion$inboundSchema:
  z.ZodType<EnvironmentByProjectIdRediLabelsSwarmUnion, z.ZodTypeDef, unknown> =
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdLabelsSwarmRediEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]);

/** @internal */
export type EnvironmentByProjectIdRediLabelsSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdRediLabelsSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRediLabelsSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdRediLabelsSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdLabelsSwarmRediEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRediLabelsSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdRediLabelsSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRediLabelsSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRediLabelsSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRediLabelsSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRediLabelsSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdRediLabelsSwarmUnion$Outbound;
}

export function environmentByProjectIdRediLabelsSwarmUnionToJSON(
  environmentByProjectIdRediLabelsSwarmUnion:
    EnvironmentByProjectIdRediLabelsSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdRediLabelsSwarmUnion$outboundSchema.parse(
      environmentByProjectIdRediLabelsSwarmUnion,
    ),
  );
}

export function environmentByProjectIdRediLabelsSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdRediLabelsSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdRediLabelsSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdRediLabelsSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdModeSwarmRediEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdModeSwarmRediEnum> = z
    .nativeEnum(EnvironmentByProjectIdModeSwarmRediEnum);

/** @internal */
export const EnvironmentByProjectIdModeSwarmRediEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdModeSwarmRediEnum> =
    EnvironmentByProjectIdModeSwarmRediEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdModeSwarmRediEnum$ {
  /** @deprecated use `EnvironmentByProjectIdModeSwarmRediEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdModeSwarmRediEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdModeSwarmRediEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdModeSwarmRediEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdModeSwarmRediUnion$inboundSchema: z.ZodType<
  EnvironmentByProjectIdModeSwarmRediUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentByProjectIdModeSwarmRediEnum$inboundSchema,
]);

/** @internal */
export type EnvironmentByProjectIdModeSwarmRediUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdModeSwarmRediUnion$outboundSchema: z.ZodType<
  EnvironmentByProjectIdModeSwarmRediUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentByProjectIdModeSwarmRediUnion
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  EnvironmentByProjectIdModeSwarmRediEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdModeSwarmRediUnion$ {
  /** @deprecated use `EnvironmentByProjectIdModeSwarmRediUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdModeSwarmRediUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdModeSwarmRediUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdModeSwarmRediUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdModeSwarmRediUnion$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdModeSwarmRediUnion$Outbound;
}

export function environmentByProjectIdModeSwarmRediUnionToJSON(
  environmentByProjectIdModeSwarmRediUnion:
    EnvironmentByProjectIdModeSwarmRediUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdModeSwarmRediUnion$outboundSchema.parse(
      environmentByProjectIdModeSwarmRediUnion,
    ),
  );
}

export function environmentByProjectIdModeSwarmRediUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdModeSwarmRediUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdModeSwarmRediUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdModeSwarmRediUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdRediModeSwarmUnion$inboundSchema: z.ZodType<
  EnvironmentByProjectIdRediModeSwarmUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdModeSwarmRediEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type EnvironmentByProjectIdRediModeSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdRediModeSwarmUnion$outboundSchema: z.ZodType<
  EnvironmentByProjectIdRediModeSwarmUnion$Outbound,
  z.ZodTypeDef,
  EnvironmentByProjectIdRediModeSwarmUnion
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdModeSwarmRediEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRediModeSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdRediModeSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRediModeSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRediModeSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRediModeSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRediModeSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdRediModeSwarmUnion$Outbound;
}

export function environmentByProjectIdRediModeSwarmUnionToJSON(
  environmentByProjectIdRediModeSwarmUnion:
    EnvironmentByProjectIdRediModeSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdRediModeSwarmUnion$outboundSchema.parse(
      environmentByProjectIdRediModeSwarmUnion,
    ),
  );
}

export function environmentByProjectIdRediModeSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdRediModeSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdRediModeSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdRediModeSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdNetworkSwarmRediEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdNetworkSwarmRediEnum> = z
    .nativeEnum(EnvironmentByProjectIdNetworkSwarmRediEnum);

/** @internal */
export const EnvironmentByProjectIdNetworkSwarmRediEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdNetworkSwarmRediEnum> =
    EnvironmentByProjectIdNetworkSwarmRediEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdNetworkSwarmRediEnum$ {
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmRediEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdNetworkSwarmRediEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmRediEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdNetworkSwarmRediEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdNetworkSwarmRediUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdNetworkSwarmRediUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdNetworkSwarmRediEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdNetworkSwarmRediUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdNetworkSwarmRediUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdNetworkSwarmRediUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdNetworkSwarmRediUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdNetworkSwarmRediEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdNetworkSwarmRediUnion$ {
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmRediUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdNetworkSwarmRediUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmRediUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdNetworkSwarmRediUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdNetworkSwarmRediUnion$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdNetworkSwarmRediUnion$Outbound;
}

export function environmentByProjectIdNetworkSwarmRediUnionToJSON(
  environmentByProjectIdNetworkSwarmRediUnion:
    EnvironmentByProjectIdNetworkSwarmRediUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdNetworkSwarmRediUnion$outboundSchema.parse(
      environmentByProjectIdNetworkSwarmRediUnion,
    ),
  );
}

export function environmentByProjectIdNetworkSwarmRediUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdNetworkSwarmRediUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdNetworkSwarmRediUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdNetworkSwarmRediUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdRediNetworkSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRediNetworkSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdNetworkSwarmRediEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdRediNetworkSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdRediNetworkSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRediNetworkSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdRediNetworkSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdNetworkSwarmRediEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRediNetworkSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdRediNetworkSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRediNetworkSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRediNetworkSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRediNetworkSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRediNetworkSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdRediNetworkSwarmUnion$Outbound;
}

export function environmentByProjectIdRediNetworkSwarmUnionToJSON(
  environmentByProjectIdRediNetworkSwarmUnion:
    EnvironmentByProjectIdRediNetworkSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdRediNetworkSwarmUnion$outboundSchema.parse(
      environmentByProjectIdRediNetworkSwarmUnion,
    ),
  );
}

export function environmentByProjectIdRediNetworkSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdRediNetworkSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdRediNetworkSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdRediNetworkSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdPlacementSwarmRediEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdPlacementSwarmRediEnum> = z
    .nativeEnum(EnvironmentByProjectIdPlacementSwarmRediEnum);

/** @internal */
export const EnvironmentByProjectIdPlacementSwarmRediEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdPlacementSwarmRediEnum> =
    EnvironmentByProjectIdPlacementSwarmRediEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdPlacementSwarmRediEnum$ {
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmRediEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdPlacementSwarmRediEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmRediEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdPlacementSwarmRediEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdPlacementSwarmRediUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdPlacementSwarmRediUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdPlacementSwarmRediEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdPlacementSwarmRediUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdPlacementSwarmRediUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdPlacementSwarmRediUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdPlacementSwarmRediUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdPlacementSwarmRediEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdPlacementSwarmRediUnion$ {
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmRediUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdPlacementSwarmRediUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmRediUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdPlacementSwarmRediUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdPlacementSwarmRediUnion$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdPlacementSwarmRediUnion$Outbound;
}

export function environmentByProjectIdPlacementSwarmRediUnionToJSON(
  environmentByProjectIdPlacementSwarmRediUnion:
    EnvironmentByProjectIdPlacementSwarmRediUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdPlacementSwarmRediUnion$outboundSchema.parse(
      environmentByProjectIdPlacementSwarmRediUnion,
    ),
  );
}

export function environmentByProjectIdPlacementSwarmRediUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdPlacementSwarmRediUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdPlacementSwarmRediUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdPlacementSwarmRediUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdRediPlacementSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRediPlacementSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdPlacementSwarmRediEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdRediPlacementSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdRediPlacementSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRediPlacementSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdRediPlacementSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdPlacementSwarmRediEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRediPlacementSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdRediPlacementSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRediPlacementSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRediPlacementSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRediPlacementSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRediPlacementSwarmUnion$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdRediPlacementSwarmUnion$Outbound;
}

export function environmentByProjectIdRediPlacementSwarmUnionToJSON(
  environmentByProjectIdRediPlacementSwarmUnion:
    EnvironmentByProjectIdRediPlacementSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdRediPlacementSwarmUnion$outboundSchema.parse(
      environmentByProjectIdRediPlacementSwarmUnion,
    ),
  );
}

export function environmentByProjectIdRediPlacementSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdRediPlacementSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdRediPlacementSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdRediPlacementSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdRestartPolicySwarmRediEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdRestartPolicySwarmRediEnum> = z
    .nativeEnum(EnvironmentByProjectIdRestartPolicySwarmRediEnum);

/** @internal */
export const EnvironmentByProjectIdRestartPolicySwarmRediEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdRestartPolicySwarmRediEnum> =
    EnvironmentByProjectIdRestartPolicySwarmRediEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRestartPolicySwarmRediEnum$ {
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmRediEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRestartPolicySwarmRediEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmRediEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRestartPolicySwarmRediEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdRestartPolicySwarmRediUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRestartPolicySwarmRediUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdRestartPolicySwarmRediEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdRestartPolicySwarmRediUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdRestartPolicySwarmRediUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRestartPolicySwarmRediUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdRestartPolicySwarmRediUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdRestartPolicySwarmRediEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRestartPolicySwarmRediUnion$ {
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmRediUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRestartPolicySwarmRediUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmRediUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRestartPolicySwarmRediUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRestartPolicySwarmRediUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdRestartPolicySwarmRediUnion$Outbound;
}

export function environmentByProjectIdRestartPolicySwarmRediUnionToJSON(
  environmentByProjectIdRestartPolicySwarmRediUnion:
    EnvironmentByProjectIdRestartPolicySwarmRediUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdRestartPolicySwarmRediUnion$outboundSchema.parse(
      environmentByProjectIdRestartPolicySwarmRediUnion,
    ),
  );
}

export function environmentByProjectIdRestartPolicySwarmRediUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdRestartPolicySwarmRediUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdRestartPolicySwarmRediUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdRestartPolicySwarmRediUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdRediRestartPolicySwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRediRestartPolicySwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdRestartPolicySwarmRediEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdRediRestartPolicySwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdRediRestartPolicySwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRediRestartPolicySwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdRediRestartPolicySwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdRestartPolicySwarmRediEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRediRestartPolicySwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdRediRestartPolicySwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRediRestartPolicySwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRediRestartPolicySwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRediRestartPolicySwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRediRestartPolicySwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdRediRestartPolicySwarmUnion$Outbound;
}

export function environmentByProjectIdRediRestartPolicySwarmUnionToJSON(
  environmentByProjectIdRediRestartPolicySwarmUnion:
    EnvironmentByProjectIdRediRestartPolicySwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdRediRestartPolicySwarmUnion$outboundSchema.parse(
      environmentByProjectIdRediRestartPolicySwarmUnion,
    ),
  );
}

export function environmentByProjectIdRediRestartPolicySwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdRediRestartPolicySwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdRediRestartPolicySwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdRediRestartPolicySwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdRollbackConfigSwarmRediEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdRollbackConfigSwarmRediEnum> = z
    .nativeEnum(EnvironmentByProjectIdRollbackConfigSwarmRediEnum);

/** @internal */
export const EnvironmentByProjectIdRollbackConfigSwarmRediEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdRollbackConfigSwarmRediEnum> =
    EnvironmentByProjectIdRollbackConfigSwarmRediEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRollbackConfigSwarmRediEnum$ {
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmRediEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRollbackConfigSwarmRediEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmRediEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRollbackConfigSwarmRediEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdRollbackConfigSwarmRediUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRollbackConfigSwarmRediUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdRollbackConfigSwarmRediEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdRollbackConfigSwarmRediUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdRollbackConfigSwarmRediUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRollbackConfigSwarmRediUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdRollbackConfigSwarmRediUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdRollbackConfigSwarmRediEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRollbackConfigSwarmRediUnion$ {
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmRediUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRollbackConfigSwarmRediUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmRediUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRollbackConfigSwarmRediUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRollbackConfigSwarmRediUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdRollbackConfigSwarmRediUnion$Outbound;
}

export function environmentByProjectIdRollbackConfigSwarmRediUnionToJSON(
  environmentByProjectIdRollbackConfigSwarmRediUnion:
    EnvironmentByProjectIdRollbackConfigSwarmRediUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdRollbackConfigSwarmRediUnion$outboundSchema.parse(
      environmentByProjectIdRollbackConfigSwarmRediUnion,
    ),
  );
}

export function environmentByProjectIdRollbackConfigSwarmRediUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdRollbackConfigSwarmRediUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdRollbackConfigSwarmRediUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdRollbackConfigSwarmRediUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdRediRollbackConfigSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRediRollbackConfigSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdRollbackConfigSwarmRediEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdRediRollbackConfigSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdRediRollbackConfigSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRediRollbackConfigSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdRediRollbackConfigSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdRollbackConfigSwarmRediEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRediRollbackConfigSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdRediRollbackConfigSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRediRollbackConfigSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRediRollbackConfigSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRediRollbackConfigSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRediRollbackConfigSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdRediRollbackConfigSwarmUnion$Outbound;
}

export function environmentByProjectIdRediRollbackConfigSwarmUnionToJSON(
  environmentByProjectIdRediRollbackConfigSwarmUnion:
    EnvironmentByProjectIdRediRollbackConfigSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdRediRollbackConfigSwarmUnion$outboundSchema.parse(
      environmentByProjectIdRediRollbackConfigSwarmUnion,
    ),
  );
}

export function environmentByProjectIdRediRollbackConfigSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdRediRollbackConfigSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdRediRollbackConfigSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdRediRollbackConfigSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdUpdateConfigSwarmRediEnum$inboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdUpdateConfigSwarmRediEnum> = z
    .nativeEnum(EnvironmentByProjectIdUpdateConfigSwarmRediEnum);

/** @internal */
export const EnvironmentByProjectIdUpdateConfigSwarmRediEnum$outboundSchema:
  z.ZodNativeEnum<typeof EnvironmentByProjectIdUpdateConfigSwarmRediEnum> =
    EnvironmentByProjectIdUpdateConfigSwarmRediEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdUpdateConfigSwarmRediEnum$ {
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmRediEnum$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdUpdateConfigSwarmRediEnum$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmRediEnum$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdUpdateConfigSwarmRediEnum$outboundSchema;
}

/** @internal */
export const EnvironmentByProjectIdUpdateConfigSwarmRediUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdUpdateConfigSwarmRediUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdUpdateConfigSwarmRediEnum$inboundSchema,
  ]);

/** @internal */
export type EnvironmentByProjectIdUpdateConfigSwarmRediUnion$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const EnvironmentByProjectIdUpdateConfigSwarmRediUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdUpdateConfigSwarmRediUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdUpdateConfigSwarmRediUnion
  > = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    EnvironmentByProjectIdUpdateConfigSwarmRediEnum$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdUpdateConfigSwarmRediUnion$ {
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmRediUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdUpdateConfigSwarmRediUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmRediUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdUpdateConfigSwarmRediUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdUpdateConfigSwarmRediUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdUpdateConfigSwarmRediUnion$Outbound;
}

export function environmentByProjectIdUpdateConfigSwarmRediUnionToJSON(
  environmentByProjectIdUpdateConfigSwarmRediUnion:
    EnvironmentByProjectIdUpdateConfigSwarmRediUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdUpdateConfigSwarmRediUnion$outboundSchema.parse(
      environmentByProjectIdUpdateConfigSwarmRediUnion,
    ),
  );
}

export function environmentByProjectIdUpdateConfigSwarmRediUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdUpdateConfigSwarmRediUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdUpdateConfigSwarmRediUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdUpdateConfigSwarmRediUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdRediUpdateConfigSwarmUnion$inboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRediUpdateConfigSwarmUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdUpdateConfigSwarmRediEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/** @internal */
export type EnvironmentByProjectIdRediUpdateConfigSwarmUnion$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const EnvironmentByProjectIdRediUpdateConfigSwarmUnion$outboundSchema:
  z.ZodType<
    EnvironmentByProjectIdRediUpdateConfigSwarmUnion$Outbound,
    z.ZodTypeDef,
    EnvironmentByProjectIdRediUpdateConfigSwarmUnion
  > = z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      EnvironmentByProjectIdUpdateConfigSwarmRediEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRediUpdateConfigSwarmUnion$ {
  /** @deprecated use `EnvironmentByProjectIdRediUpdateConfigSwarmUnion$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentByProjectIdRediUpdateConfigSwarmUnion$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRediUpdateConfigSwarmUnion$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdRediUpdateConfigSwarmUnion$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRediUpdateConfigSwarmUnion$Outbound` instead. */
  export type Outbound =
    EnvironmentByProjectIdRediUpdateConfigSwarmUnion$Outbound;
}

export function environmentByProjectIdRediUpdateConfigSwarmUnionToJSON(
  environmentByProjectIdRediUpdateConfigSwarmUnion:
    EnvironmentByProjectIdRediUpdateConfigSwarmUnion,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdRediUpdateConfigSwarmUnion$outboundSchema.parse(
      environmentByProjectIdRediUpdateConfigSwarmUnion,
    ),
  );
}

export function environmentByProjectIdRediUpdateConfigSwarmUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentByProjectIdRediUpdateConfigSwarmUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdRediUpdateConfigSwarmUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentByProjectIdRediUpdateConfigSwarmUnion' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdRedi$inboundSchema: z.ZodType<
  EnvironmentByProjectIdRedi,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  applicationStatus: EnvironmentByProjectIdRediApplicationStatus$inboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databasePassword: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdHealthCheckSwarmRediEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  labelsSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdLabelsSwarmRediEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdModeSwarmRediEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  name: z.string(),
  networkSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdNetworkSwarmRediEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  placementSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdPlacementSwarmRediEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  redisId: z.string(),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdRestartPolicySwarmRediEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  rollbackConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdRollbackConfigSwarmRediEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdUpdateConfigSwarmRediEnum$inboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
});

/** @internal */
export type EnvironmentByProjectIdRedi$Outbound = {
  appName: string;
  applicationStatus: string;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databasePassword: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  labelsSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  name: string;
  networkSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  placementSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  redisId: string;
  replicas: number;
  restartPolicySwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  rollbackConfigSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
  serverId: string | null;
  updateConfigSwarm: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  } | null;
};

/** @internal */
export const EnvironmentByProjectIdRedi$outboundSchema: z.ZodType<
  EnvironmentByProjectIdRedi$Outbound,
  z.ZodTypeDef,
  EnvironmentByProjectIdRedi
> = z.object({
  appName: z.string(),
  applicationStatus: EnvironmentByProjectIdRediApplicationStatus$outboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databasePassword: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdHealthCheckSwarmRediEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  labelsSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdLabelsSwarmRediEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdModeSwarmRediEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  name: z.string(),
  networkSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdNetworkSwarmRediEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  placementSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdPlacementSwarmRediEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  redisId: z.string(),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdRestartPolicySwarmRediEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  rollbackConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdRollbackConfigSwarmRediEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.union([
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        EnvironmentByProjectIdUpdateConfigSwarmRediEnum$outboundSchema,
      ]),
      z.array(z.any()),
      z.record(z.any()),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdRedi$ {
  /** @deprecated use `EnvironmentByProjectIdRedi$inboundSchema` instead. */
  export const inboundSchema = EnvironmentByProjectIdRedi$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRedi$outboundSchema` instead. */
  export const outboundSchema = EnvironmentByProjectIdRedi$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdRedi$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdRedi$Outbound;
}

export function environmentByProjectIdRediToJSON(
  environmentByProjectIdRedi: EnvironmentByProjectIdRedi,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdRedi$outboundSchema.parse(environmentByProjectIdRedi),
  );
}

export function environmentByProjectIdRediFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentByProjectIdRedi, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentByProjectIdRedi$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentByProjectIdRedi' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdResponseBody$inboundSchema: z.ZodType<
  EnvironmentByProjectIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  applications: z.array(
    z.lazy(() => EnvironmentByProjectIdApplication$inboundSchema),
  ),
  compose: z.array(z.lazy(() => EnvironmentByProjectIdCompose$inboundSchema)),
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  mariadb: z.array(z.lazy(() => EnvironmentByProjectIdMariadb$inboundSchema)),
  mongo: z.array(z.lazy(() => EnvironmentByProjectIdMongo$inboundSchema)),
  mysql: z.array(z.lazy(() => EnvironmentByProjectIdMysql$inboundSchema)),
  name: z.string(),
  postgres: z.array(z.lazy(() => EnvironmentByProjectIdPostgre$inboundSchema)),
  project: z.lazy(() => EnvironmentByProjectIdProject$inboundSchema),
  projectId: z.string(),
  redis: z.array(z.lazy(() => EnvironmentByProjectIdRedi$inboundSchema)),
});

/** @internal */
export type EnvironmentByProjectIdResponseBody$Outbound = {
  applications: Array<EnvironmentByProjectIdApplication$Outbound>;
  compose: Array<EnvironmentByProjectIdCompose$Outbound>;
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  mariadb: Array<EnvironmentByProjectIdMariadb$Outbound>;
  mongo: Array<EnvironmentByProjectIdMongo$Outbound>;
  mysql: Array<EnvironmentByProjectIdMysql$Outbound>;
  name: string;
  postgres: Array<EnvironmentByProjectIdPostgre$Outbound>;
  project: EnvironmentByProjectIdProject$Outbound;
  projectId: string;
  redis: Array<EnvironmentByProjectIdRedi$Outbound>;
};

/** @internal */
export const EnvironmentByProjectIdResponseBody$outboundSchema: z.ZodType<
  EnvironmentByProjectIdResponseBody$Outbound,
  z.ZodTypeDef,
  EnvironmentByProjectIdResponseBody
> = z.object({
  applications: z.array(
    z.lazy(() => EnvironmentByProjectIdApplication$outboundSchema),
  ),
  compose: z.array(z.lazy(() => EnvironmentByProjectIdCompose$outboundSchema)),
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  mariadb: z.array(z.lazy(() => EnvironmentByProjectIdMariadb$outboundSchema)),
  mongo: z.array(z.lazy(() => EnvironmentByProjectIdMongo$outboundSchema)),
  mysql: z.array(z.lazy(() => EnvironmentByProjectIdMysql$outboundSchema)),
  name: z.string(),
  postgres: z.array(z.lazy(() => EnvironmentByProjectIdPostgre$outboundSchema)),
  project: z.lazy(() => EnvironmentByProjectIdProject$outboundSchema),
  projectId: z.string(),
  redis: z.array(z.lazy(() => EnvironmentByProjectIdRedi$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdResponseBody$ {
  /** @deprecated use `EnvironmentByProjectIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = EnvironmentByProjectIdResponseBody$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentByProjectIdResponseBody$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdResponseBody$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdResponseBody$Outbound;
}

export function environmentByProjectIdResponseBodyToJSON(
  environmentByProjectIdResponseBody: EnvironmentByProjectIdResponseBody,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdResponseBody$outboundSchema.parse(
      environmentByProjectIdResponseBody,
    ),
  );
}

export function environmentByProjectIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentByProjectIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentByProjectIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentByProjectIdResponseBody' from JSON`,
  );
}

/** @internal */
export const EnvironmentByProjectIdResponse$inboundSchema: z.ZodType<
  EnvironmentByProjectIdResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ErrorT$inboundSchema,
  z.array(z.lazy(() => EnvironmentByProjectIdResponseBody$inboundSchema)),
]);

/** @internal */
export type EnvironmentByProjectIdResponse$Outbound =
  | models.ErrorT$Outbound
  | Array<EnvironmentByProjectIdResponseBody$Outbound>;

/** @internal */
export const EnvironmentByProjectIdResponse$outboundSchema: z.ZodType<
  EnvironmentByProjectIdResponse$Outbound,
  z.ZodTypeDef,
  EnvironmentByProjectIdResponse
> = z.union([
  models.ErrorT$outboundSchema,
  z.array(z.lazy(() => EnvironmentByProjectIdResponseBody$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentByProjectIdResponse$ {
  /** @deprecated use `EnvironmentByProjectIdResponse$inboundSchema` instead. */
  export const inboundSchema = EnvironmentByProjectIdResponse$inboundSchema;
  /** @deprecated use `EnvironmentByProjectIdResponse$outboundSchema` instead. */
  export const outboundSchema = EnvironmentByProjectIdResponse$outboundSchema;
  /** @deprecated use `EnvironmentByProjectIdResponse$Outbound` instead. */
  export type Outbound = EnvironmentByProjectIdResponse$Outbound;
}

export function environmentByProjectIdResponseToJSON(
  environmentByProjectIdResponse: EnvironmentByProjectIdResponse,
): string {
  return JSON.stringify(
    EnvironmentByProjectIdResponse$outboundSchema.parse(
      environmentByProjectIdResponse,
    ),
  );
}

export function environmentByProjectIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentByProjectIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentByProjectIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentByProjectIdResponse' from JSON`,
  );
}
