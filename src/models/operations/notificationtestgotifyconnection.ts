/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NotificationTestGotifyConnectionSecurity = {
  authorization: string;
};

export type NotificationTestGotifyConnectionRequest = {
  appToken: string;
  decoration?: boolean | undefined;
  priority: number;
  serverUrl: string;
};

/** @internal */
export const NotificationTestGotifyConnectionSecurity$inboundSchema: z.ZodType<
  NotificationTestGotifyConnectionSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type NotificationTestGotifyConnectionSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const NotificationTestGotifyConnectionSecurity$outboundSchema: z.ZodType<
  NotificationTestGotifyConnectionSecurity$Outbound,
  z.ZodTypeDef,
  NotificationTestGotifyConnectionSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationTestGotifyConnectionSecurity$ {
  /** @deprecated use `NotificationTestGotifyConnectionSecurity$inboundSchema` instead. */
  export const inboundSchema =
    NotificationTestGotifyConnectionSecurity$inboundSchema;
  /** @deprecated use `NotificationTestGotifyConnectionSecurity$outboundSchema` instead. */
  export const outboundSchema =
    NotificationTestGotifyConnectionSecurity$outboundSchema;
  /** @deprecated use `NotificationTestGotifyConnectionSecurity$Outbound` instead. */
  export type Outbound = NotificationTestGotifyConnectionSecurity$Outbound;
}

export function notificationTestGotifyConnectionSecurityToJSON(
  notificationTestGotifyConnectionSecurity:
    NotificationTestGotifyConnectionSecurity,
): string {
  return JSON.stringify(
    NotificationTestGotifyConnectionSecurity$outboundSchema.parse(
      notificationTestGotifyConnectionSecurity,
    ),
  );
}

export function notificationTestGotifyConnectionSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  NotificationTestGotifyConnectionSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NotificationTestGotifyConnectionSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'NotificationTestGotifyConnectionSecurity' from JSON`,
  );
}

/** @internal */
export const NotificationTestGotifyConnectionRequest$inboundSchema: z.ZodType<
  NotificationTestGotifyConnectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appToken: z.string(),
  decoration: z.boolean().optional(),
  priority: z.number(),
  serverUrl: z.string(),
});

/** @internal */
export type NotificationTestGotifyConnectionRequest$Outbound = {
  appToken: string;
  decoration?: boolean | undefined;
  priority: number;
  serverUrl: string;
};

/** @internal */
export const NotificationTestGotifyConnectionRequest$outboundSchema: z.ZodType<
  NotificationTestGotifyConnectionRequest$Outbound,
  z.ZodTypeDef,
  NotificationTestGotifyConnectionRequest
> = z.object({
  appToken: z.string(),
  decoration: z.boolean().optional(),
  priority: z.number(),
  serverUrl: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationTestGotifyConnectionRequest$ {
  /** @deprecated use `NotificationTestGotifyConnectionRequest$inboundSchema` instead. */
  export const inboundSchema =
    NotificationTestGotifyConnectionRequest$inboundSchema;
  /** @deprecated use `NotificationTestGotifyConnectionRequest$outboundSchema` instead. */
  export const outboundSchema =
    NotificationTestGotifyConnectionRequest$outboundSchema;
  /** @deprecated use `NotificationTestGotifyConnectionRequest$Outbound` instead. */
  export type Outbound = NotificationTestGotifyConnectionRequest$Outbound;
}

export function notificationTestGotifyConnectionRequestToJSON(
  notificationTestGotifyConnectionRequest:
    NotificationTestGotifyConnectionRequest,
): string {
  return JSON.stringify(
    NotificationTestGotifyConnectionRequest$outboundSchema.parse(
      notificationTestGotifyConnectionRequest,
    ),
  );
}

export function notificationTestGotifyConnectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  NotificationTestGotifyConnectionRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NotificationTestGotifyConnectionRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'NotificationTestGotifyConnectionRequest' from JSON`,
  );
}
