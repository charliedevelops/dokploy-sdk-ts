/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ServerSetupMonitoringSecurity = {
  authorization: string;
};

export type ServerSetupMonitoringThresholds = {
  cpu: number;
  memory: number;
};

export type ServerSetupMonitoringServer = {
  refreshRate: number;
  port: number;
  token: string;
  urlCallback: string;
  retentionDays: number;
  cronJob: string;
  thresholds: ServerSetupMonitoringThresholds;
};

export type ServerSetupMonitoringServices = {
  include?: Array<string> | undefined;
  exclude?: Array<string> | undefined;
};

export type ServerSetupMonitoringContainers = {
  refreshRate: number;
  services: ServerSetupMonitoringServices;
};

export type ServerSetupMonitoringMetricsConfig = {
  server: ServerSetupMonitoringServer;
  containers: ServerSetupMonitoringContainers;
};

export type ServerSetupMonitoringRequest = {
  serverId: string;
  metricsConfig: ServerSetupMonitoringMetricsConfig;
};

/** @internal */
export const ServerSetupMonitoringSecurity$inboundSchema: z.ZodType<
  ServerSetupMonitoringSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type ServerSetupMonitoringSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const ServerSetupMonitoringSecurity$outboundSchema: z.ZodType<
  ServerSetupMonitoringSecurity$Outbound,
  z.ZodTypeDef,
  ServerSetupMonitoringSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServerSetupMonitoringSecurity$ {
  /** @deprecated use `ServerSetupMonitoringSecurity$inboundSchema` instead. */
  export const inboundSchema = ServerSetupMonitoringSecurity$inboundSchema;
  /** @deprecated use `ServerSetupMonitoringSecurity$outboundSchema` instead. */
  export const outboundSchema = ServerSetupMonitoringSecurity$outboundSchema;
  /** @deprecated use `ServerSetupMonitoringSecurity$Outbound` instead. */
  export type Outbound = ServerSetupMonitoringSecurity$Outbound;
}

export function serverSetupMonitoringSecurityToJSON(
  serverSetupMonitoringSecurity: ServerSetupMonitoringSecurity,
): string {
  return JSON.stringify(
    ServerSetupMonitoringSecurity$outboundSchema.parse(
      serverSetupMonitoringSecurity,
    ),
  );
}

export function serverSetupMonitoringSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ServerSetupMonitoringSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServerSetupMonitoringSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServerSetupMonitoringSecurity' from JSON`,
  );
}

/** @internal */
export const ServerSetupMonitoringThresholds$inboundSchema: z.ZodType<
  ServerSetupMonitoringThresholds,
  z.ZodTypeDef,
  unknown
> = z.object({
  cpu: z.number(),
  memory: z.number(),
});

/** @internal */
export type ServerSetupMonitoringThresholds$Outbound = {
  cpu: number;
  memory: number;
};

/** @internal */
export const ServerSetupMonitoringThresholds$outboundSchema: z.ZodType<
  ServerSetupMonitoringThresholds$Outbound,
  z.ZodTypeDef,
  ServerSetupMonitoringThresholds
> = z.object({
  cpu: z.number(),
  memory: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServerSetupMonitoringThresholds$ {
  /** @deprecated use `ServerSetupMonitoringThresholds$inboundSchema` instead. */
  export const inboundSchema = ServerSetupMonitoringThresholds$inboundSchema;
  /** @deprecated use `ServerSetupMonitoringThresholds$outboundSchema` instead. */
  export const outboundSchema = ServerSetupMonitoringThresholds$outboundSchema;
  /** @deprecated use `ServerSetupMonitoringThresholds$Outbound` instead. */
  export type Outbound = ServerSetupMonitoringThresholds$Outbound;
}

export function serverSetupMonitoringThresholdsToJSON(
  serverSetupMonitoringThresholds: ServerSetupMonitoringThresholds,
): string {
  return JSON.stringify(
    ServerSetupMonitoringThresholds$outboundSchema.parse(
      serverSetupMonitoringThresholds,
    ),
  );
}

export function serverSetupMonitoringThresholdsFromJSON(
  jsonString: string,
): SafeParseResult<ServerSetupMonitoringThresholds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServerSetupMonitoringThresholds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServerSetupMonitoringThresholds' from JSON`,
  );
}

/** @internal */
export const ServerSetupMonitoringServer$inboundSchema: z.ZodType<
  ServerSetupMonitoringServer,
  z.ZodTypeDef,
  unknown
> = z.object({
  refreshRate: z.number(),
  port: z.number(),
  token: z.string(),
  urlCallback: z.string(),
  retentionDays: z.number(),
  cronJob: z.string(),
  thresholds: z.lazy(() => ServerSetupMonitoringThresholds$inboundSchema),
});

/** @internal */
export type ServerSetupMonitoringServer$Outbound = {
  refreshRate: number;
  port: number;
  token: string;
  urlCallback: string;
  retentionDays: number;
  cronJob: string;
  thresholds: ServerSetupMonitoringThresholds$Outbound;
};

/** @internal */
export const ServerSetupMonitoringServer$outboundSchema: z.ZodType<
  ServerSetupMonitoringServer$Outbound,
  z.ZodTypeDef,
  ServerSetupMonitoringServer
> = z.object({
  refreshRate: z.number(),
  port: z.number(),
  token: z.string(),
  urlCallback: z.string(),
  retentionDays: z.number(),
  cronJob: z.string(),
  thresholds: z.lazy(() => ServerSetupMonitoringThresholds$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServerSetupMonitoringServer$ {
  /** @deprecated use `ServerSetupMonitoringServer$inboundSchema` instead. */
  export const inboundSchema = ServerSetupMonitoringServer$inboundSchema;
  /** @deprecated use `ServerSetupMonitoringServer$outboundSchema` instead. */
  export const outboundSchema = ServerSetupMonitoringServer$outboundSchema;
  /** @deprecated use `ServerSetupMonitoringServer$Outbound` instead. */
  export type Outbound = ServerSetupMonitoringServer$Outbound;
}

export function serverSetupMonitoringServerToJSON(
  serverSetupMonitoringServer: ServerSetupMonitoringServer,
): string {
  return JSON.stringify(
    ServerSetupMonitoringServer$outboundSchema.parse(
      serverSetupMonitoringServer,
    ),
  );
}

export function serverSetupMonitoringServerFromJSON(
  jsonString: string,
): SafeParseResult<ServerSetupMonitoringServer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServerSetupMonitoringServer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServerSetupMonitoringServer' from JSON`,
  );
}

/** @internal */
export const ServerSetupMonitoringServices$inboundSchema: z.ZodType<
  ServerSetupMonitoringServices,
  z.ZodTypeDef,
  unknown
> = z.object({
  include: z.array(z.string()).optional(),
  exclude: z.array(z.string()).optional(),
});

/** @internal */
export type ServerSetupMonitoringServices$Outbound = {
  include?: Array<string> | undefined;
  exclude?: Array<string> | undefined;
};

/** @internal */
export const ServerSetupMonitoringServices$outboundSchema: z.ZodType<
  ServerSetupMonitoringServices$Outbound,
  z.ZodTypeDef,
  ServerSetupMonitoringServices
> = z.object({
  include: z.array(z.string()).optional(),
  exclude: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServerSetupMonitoringServices$ {
  /** @deprecated use `ServerSetupMonitoringServices$inboundSchema` instead. */
  export const inboundSchema = ServerSetupMonitoringServices$inboundSchema;
  /** @deprecated use `ServerSetupMonitoringServices$outboundSchema` instead. */
  export const outboundSchema = ServerSetupMonitoringServices$outboundSchema;
  /** @deprecated use `ServerSetupMonitoringServices$Outbound` instead. */
  export type Outbound = ServerSetupMonitoringServices$Outbound;
}

export function serverSetupMonitoringServicesToJSON(
  serverSetupMonitoringServices: ServerSetupMonitoringServices,
): string {
  return JSON.stringify(
    ServerSetupMonitoringServices$outboundSchema.parse(
      serverSetupMonitoringServices,
    ),
  );
}

export function serverSetupMonitoringServicesFromJSON(
  jsonString: string,
): SafeParseResult<ServerSetupMonitoringServices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServerSetupMonitoringServices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServerSetupMonitoringServices' from JSON`,
  );
}

/** @internal */
export const ServerSetupMonitoringContainers$inboundSchema: z.ZodType<
  ServerSetupMonitoringContainers,
  z.ZodTypeDef,
  unknown
> = z.object({
  refreshRate: z.number(),
  services: z.lazy(() => ServerSetupMonitoringServices$inboundSchema),
});

/** @internal */
export type ServerSetupMonitoringContainers$Outbound = {
  refreshRate: number;
  services: ServerSetupMonitoringServices$Outbound;
};

/** @internal */
export const ServerSetupMonitoringContainers$outboundSchema: z.ZodType<
  ServerSetupMonitoringContainers$Outbound,
  z.ZodTypeDef,
  ServerSetupMonitoringContainers
> = z.object({
  refreshRate: z.number(),
  services: z.lazy(() => ServerSetupMonitoringServices$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServerSetupMonitoringContainers$ {
  /** @deprecated use `ServerSetupMonitoringContainers$inboundSchema` instead. */
  export const inboundSchema = ServerSetupMonitoringContainers$inboundSchema;
  /** @deprecated use `ServerSetupMonitoringContainers$outboundSchema` instead. */
  export const outboundSchema = ServerSetupMonitoringContainers$outboundSchema;
  /** @deprecated use `ServerSetupMonitoringContainers$Outbound` instead. */
  export type Outbound = ServerSetupMonitoringContainers$Outbound;
}

export function serverSetupMonitoringContainersToJSON(
  serverSetupMonitoringContainers: ServerSetupMonitoringContainers,
): string {
  return JSON.stringify(
    ServerSetupMonitoringContainers$outboundSchema.parse(
      serverSetupMonitoringContainers,
    ),
  );
}

export function serverSetupMonitoringContainersFromJSON(
  jsonString: string,
): SafeParseResult<ServerSetupMonitoringContainers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServerSetupMonitoringContainers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServerSetupMonitoringContainers' from JSON`,
  );
}

/** @internal */
export const ServerSetupMonitoringMetricsConfig$inboundSchema: z.ZodType<
  ServerSetupMonitoringMetricsConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  server: z.lazy(() => ServerSetupMonitoringServer$inboundSchema),
  containers: z.lazy(() => ServerSetupMonitoringContainers$inboundSchema),
});

/** @internal */
export type ServerSetupMonitoringMetricsConfig$Outbound = {
  server: ServerSetupMonitoringServer$Outbound;
  containers: ServerSetupMonitoringContainers$Outbound;
};

/** @internal */
export const ServerSetupMonitoringMetricsConfig$outboundSchema: z.ZodType<
  ServerSetupMonitoringMetricsConfig$Outbound,
  z.ZodTypeDef,
  ServerSetupMonitoringMetricsConfig
> = z.object({
  server: z.lazy(() => ServerSetupMonitoringServer$outboundSchema),
  containers: z.lazy(() => ServerSetupMonitoringContainers$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServerSetupMonitoringMetricsConfig$ {
  /** @deprecated use `ServerSetupMonitoringMetricsConfig$inboundSchema` instead. */
  export const inboundSchema = ServerSetupMonitoringMetricsConfig$inboundSchema;
  /** @deprecated use `ServerSetupMonitoringMetricsConfig$outboundSchema` instead. */
  export const outboundSchema =
    ServerSetupMonitoringMetricsConfig$outboundSchema;
  /** @deprecated use `ServerSetupMonitoringMetricsConfig$Outbound` instead. */
  export type Outbound = ServerSetupMonitoringMetricsConfig$Outbound;
}

export function serverSetupMonitoringMetricsConfigToJSON(
  serverSetupMonitoringMetricsConfig: ServerSetupMonitoringMetricsConfig,
): string {
  return JSON.stringify(
    ServerSetupMonitoringMetricsConfig$outboundSchema.parse(
      serverSetupMonitoringMetricsConfig,
    ),
  );
}

export function serverSetupMonitoringMetricsConfigFromJSON(
  jsonString: string,
): SafeParseResult<ServerSetupMonitoringMetricsConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ServerSetupMonitoringMetricsConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServerSetupMonitoringMetricsConfig' from JSON`,
  );
}

/** @internal */
export const ServerSetupMonitoringRequest$inboundSchema: z.ZodType<
  ServerSetupMonitoringRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serverId: z.string(),
  metricsConfig: z.lazy(() => ServerSetupMonitoringMetricsConfig$inboundSchema),
});

/** @internal */
export type ServerSetupMonitoringRequest$Outbound = {
  serverId: string;
  metricsConfig: ServerSetupMonitoringMetricsConfig$Outbound;
};

/** @internal */
export const ServerSetupMonitoringRequest$outboundSchema: z.ZodType<
  ServerSetupMonitoringRequest$Outbound,
  z.ZodTypeDef,
  ServerSetupMonitoringRequest
> = z.object({
  serverId: z.string(),
  metricsConfig: z.lazy(() =>
    ServerSetupMonitoringMetricsConfig$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServerSetupMonitoringRequest$ {
  /** @deprecated use `ServerSetupMonitoringRequest$inboundSchema` instead. */
  export const inboundSchema = ServerSetupMonitoringRequest$inboundSchema;
  /** @deprecated use `ServerSetupMonitoringRequest$outboundSchema` instead. */
  export const outboundSchema = ServerSetupMonitoringRequest$outboundSchema;
  /** @deprecated use `ServerSetupMonitoringRequest$Outbound` instead. */
  export type Outbound = ServerSetupMonitoringRequest$Outbound;
}

export function serverSetupMonitoringRequestToJSON(
  serverSetupMonitoringRequest: ServerSetupMonitoringRequest,
): string {
  return JSON.stringify(
    ServerSetupMonitoringRequest$outboundSchema.parse(
      serverSetupMonitoringRequest,
    ),
  );
}

export function serverSetupMonitoringRequestFromJSON(
  jsonString: string,
): SafeParseResult<ServerSetupMonitoringRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServerSetupMonitoringRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServerSetupMonitoringRequest' from JSON`,
  );
}
