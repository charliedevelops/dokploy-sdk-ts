/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GitlabUpdateSecurity = {
  authorization: string;
};

export type GitlabUpdateRequest = {
  gitlabId: string;
  gitlabUrl: string;
  applicationId?: string | undefined;
  redirectUri?: string | undefined;
  secret?: string | undefined;
  accessToken?: string | null | undefined;
  refreshToken?: string | null | undefined;
  groupName?: string | undefined;
  expiresAt?: number | null | undefined;
  gitProviderId: string;
  name: string;
};

export type GitlabUpdateResponse = models.ErrorT | any;

/** @internal */
export const GitlabUpdateSecurity$inboundSchema: z.ZodType<
  GitlabUpdateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type GitlabUpdateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const GitlabUpdateSecurity$outboundSchema: z.ZodType<
  GitlabUpdateSecurity$Outbound,
  z.ZodTypeDef,
  GitlabUpdateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitlabUpdateSecurity$ {
  /** @deprecated use `GitlabUpdateSecurity$inboundSchema` instead. */
  export const inboundSchema = GitlabUpdateSecurity$inboundSchema;
  /** @deprecated use `GitlabUpdateSecurity$outboundSchema` instead. */
  export const outboundSchema = GitlabUpdateSecurity$outboundSchema;
  /** @deprecated use `GitlabUpdateSecurity$Outbound` instead. */
  export type Outbound = GitlabUpdateSecurity$Outbound;
}

export function gitlabUpdateSecurityToJSON(
  gitlabUpdateSecurity: GitlabUpdateSecurity,
): string {
  return JSON.stringify(
    GitlabUpdateSecurity$outboundSchema.parse(gitlabUpdateSecurity),
  );
}

export function gitlabUpdateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GitlabUpdateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitlabUpdateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitlabUpdateSecurity' from JSON`,
  );
}

/** @internal */
export const GitlabUpdateRequest$inboundSchema: z.ZodType<
  GitlabUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  gitlabId: z.string(),
  gitlabUrl: z.string(),
  applicationId: z.string().optional(),
  redirectUri: z.string().optional(),
  secret: z.string().optional(),
  accessToken: z.nullable(z.string()).optional(),
  refreshToken: z.nullable(z.string()).optional(),
  groupName: z.string().optional(),
  expiresAt: z.nullable(z.number()).optional(),
  gitProviderId: z.string(),
  name: z.string(),
});

/** @internal */
export type GitlabUpdateRequest$Outbound = {
  gitlabId: string;
  gitlabUrl: string;
  applicationId?: string | undefined;
  redirectUri?: string | undefined;
  secret?: string | undefined;
  accessToken?: string | null | undefined;
  refreshToken?: string | null | undefined;
  groupName?: string | undefined;
  expiresAt?: number | null | undefined;
  gitProviderId: string;
  name: string;
};

/** @internal */
export const GitlabUpdateRequest$outboundSchema: z.ZodType<
  GitlabUpdateRequest$Outbound,
  z.ZodTypeDef,
  GitlabUpdateRequest
> = z.object({
  gitlabId: z.string(),
  gitlabUrl: z.string(),
  applicationId: z.string().optional(),
  redirectUri: z.string().optional(),
  secret: z.string().optional(),
  accessToken: z.nullable(z.string()).optional(),
  refreshToken: z.nullable(z.string()).optional(),
  groupName: z.string().optional(),
  expiresAt: z.nullable(z.number()).optional(),
  gitProviderId: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitlabUpdateRequest$ {
  /** @deprecated use `GitlabUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = GitlabUpdateRequest$inboundSchema;
  /** @deprecated use `GitlabUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = GitlabUpdateRequest$outboundSchema;
  /** @deprecated use `GitlabUpdateRequest$Outbound` instead. */
  export type Outbound = GitlabUpdateRequest$Outbound;
}

export function gitlabUpdateRequestToJSON(
  gitlabUpdateRequest: GitlabUpdateRequest,
): string {
  return JSON.stringify(
    GitlabUpdateRequest$outboundSchema.parse(gitlabUpdateRequest),
  );
}

export function gitlabUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<GitlabUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitlabUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitlabUpdateRequest' from JSON`,
  );
}

/** @internal */
export const GitlabUpdateResponse$inboundSchema: z.ZodType<
  GitlabUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.any()]);

/** @internal */
export type GitlabUpdateResponse$Outbound = models.ErrorT$Outbound | any;

/** @internal */
export const GitlabUpdateResponse$outboundSchema: z.ZodType<
  GitlabUpdateResponse$Outbound,
  z.ZodTypeDef,
  GitlabUpdateResponse
> = z.union([models.ErrorT$outboundSchema, z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitlabUpdateResponse$ {
  /** @deprecated use `GitlabUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = GitlabUpdateResponse$inboundSchema;
  /** @deprecated use `GitlabUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = GitlabUpdateResponse$outboundSchema;
  /** @deprecated use `GitlabUpdateResponse$Outbound` instead. */
  export type Outbound = GitlabUpdateResponse$Outbound;
}

export function gitlabUpdateResponseToJSON(
  gitlabUpdateResponse: GitlabUpdateResponse,
): string {
  return JSON.stringify(
    GitlabUpdateResponse$outboundSchema.parse(gitlabUpdateResponse),
  );
}

export function gitlabUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<GitlabUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitlabUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitlabUpdateResponse' from JSON`,
  );
}
