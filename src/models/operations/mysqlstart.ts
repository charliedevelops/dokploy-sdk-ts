/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type MysqlStartSecurity = {
  authorization: string;
};

export type MysqlStartRequest = {
  mysqlId: string;
};

export const MysqlStartApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type MysqlStartApplicationStatus = ClosedEnum<
  typeof MysqlStartApplicationStatus
>;

export const MysqlStartBackupType = {
  Database: "database",
  Compose: "compose",
} as const;
export type MysqlStartBackupType = ClosedEnum<typeof MysqlStartBackupType>;

export const MysqlStartDatabaseType = {
  Postgres: "postgres",
  Mariadb: "mariadb",
  Mysql: "mysql",
  Mongo: "mongo",
  WebServer: "web-server",
} as const;
export type MysqlStartDatabaseType = ClosedEnum<typeof MysqlStartDatabaseType>;

export const MysqlStartMetadataEnum = {
  Null: "null",
} as const;
export type MysqlStartMetadataEnum = ClosedEnum<typeof MysqlStartMetadataEnum>;

export type MysqlStartMariadb = {
  databasePassword: string;
  databaseUser: string;
};

export type MysqlStartMongo = {
  databasePassword: string;
  databaseUser: string;
};

export type MysqlStartMysql = {
  databaseRootPassword: string;
};

export type MysqlStartPostgres = {
  databaseUser: string;
};

export type MysqlStartMetadata = {
  mariadb?: MysqlStartMariadb | undefined;
  mongo?: MysqlStartMongo | undefined;
  mysql?: MysqlStartMysql | undefined;
  postgres?: MysqlStartPostgres | undefined;
};

export type MysqlStartMetadataUnion =
  | MysqlStartMetadata
  | MysqlStartMetadataEnum;

export type MysqlStartBackup = {
  appName: string;
  backupId: string;
  backupType: MysqlStartBackupType;
  composeId: string | null;
  database: string;
  databaseType: MysqlStartDatabaseType;
  destinationId: string;
  enabled: boolean | null;
  keepLatestCount: number | null;
  mariadbId: string | null;
  metadata?: MysqlStartMetadata | MysqlStartMetadataEnum | null | undefined;
  mongoId: string | null;
  mysqlId: string | null;
  postgresId: string | null;
  prefix: string;
  schedule: string;
  serviceName: string | null;
  userId: string | null;
};

export type MysqlStartProject = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

export type MysqlStartEnvironment = {
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  name: string;
  project: MysqlStartProject;
  projectId: string;
};

export type MysqlStartHealthCheckSwarm = {
  interval?: number | undefined;
  retries?: number | undefined;
  startPeriod?: number | undefined;
  test?: Array<string> | undefined;
  timeout?: number | undefined;
};

export type MysqlStartGlobal = {};

export type MysqlStartGlobalJob = {};

export type MysqlStartReplicated = {
  replicas?: number | undefined;
};

export type MysqlStartReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type MysqlStartModeSwarm = {
  global?: MysqlStartGlobal | undefined;
  globalJob?: MysqlStartGlobalJob | undefined;
  replicated?: MysqlStartReplicated | undefined;
  replicatedJob?: MysqlStartReplicatedJob | undefined;
};

export const MysqlStartServiceType = {
  Application: "application",
  Postgres: "postgres",
  Mysql: "mysql",
  Mariadb: "mariadb",
  Mongo: "mongo",
  Redis: "redis",
  Compose: "compose",
} as const;
export type MysqlStartServiceType = ClosedEnum<typeof MysqlStartServiceType>;

export const MysqlStartType = {
  Bind: "bind",
  Volume: "volume",
  File: "file",
} as const;
export type MysqlStartType = ClosedEnum<typeof MysqlStartType>;

export type MysqlStartMount = {
  applicationId: string | null;
  composeId: string | null;
  content: string | null;
  filePath: string | null;
  hostPath: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mountId: string;
  mountPath: string;
  mysqlId: string | null;
  postgresId: string | null;
  redisId: string | null;
  serviceType: MysqlStartServiceType;
  type: MysqlStartType;
  volumeName: string | null;
};

export type MysqlStartDriverOpts = {};

export type MysqlStartNetworkSwarm = {
  aliases?: Array<string> | undefined;
  driverOpts?: MysqlStartDriverOpts | undefined;
  target?: string | undefined;
};

export type MysqlStartPlatform = {
  architecture: string;
  os: string;
};

export type MysqlStartSpread = {
  spreadDescriptor: string;
};

export type MysqlStartPreference = {
  spread: MysqlStartSpread;
};

export type MysqlStartPlacementSwarm = {
  constraints?: Array<string> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<MysqlStartPlatform> | undefined;
  preferences?: Array<MysqlStartPreference> | undefined;
};

export type MysqlStartRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type MysqlStartRollbackConfigSwarm = {
  delay?: number | undefined;
  failureAction?: string | undefined;
  maxFailureRatio?: number | undefined;
  monitor?: number | undefined;
  order: string;
  parallelism: number;
};

export const MysqlStartMetricsConfigEnum = {
  Null: "null",
} as const;
export type MysqlStartMetricsConfigEnum = ClosedEnum<
  typeof MysqlStartMetricsConfigEnum
>;

export type MysqlStartMetricsConfigUnion1 =
  | string
  | number
  | boolean
  | MysqlStartMetricsConfigEnum;

export type MysqlStartMetricsConfigUnion2 =
  | string
  | number
  | boolean
  | MysqlStartMetricsConfigEnum
  | Array<any>
  | { [k: string]: any };

export const MysqlStartServerStatus = {
  Active: "active",
  Inactive: "inactive",
} as const;
export type MysqlStartServerStatus = ClosedEnum<typeof MysqlStartServerStatus>;

export type MysqlStartServer = {
  appName: string;
  command: string;
  createdAt: string;
  description: string | null;
  enableDockerCleanup: boolean;
  ipAddress: string;
  metricsConfig:
    | string
    | number
    | boolean
    | MysqlStartMetricsConfigEnum
    | Array<any>
    | { [k: string]: any };
  name: string;
  organizationId: string;
  port: number;
  serverId: string;
  serverStatus: MysqlStartServerStatus;
  sshKeyId: string | null;
  username: string;
};

export type MysqlStartUpdateConfigSwarm = {
  delay?: number | undefined;
  failureAction?: string | undefined;
  maxFailureRatio?: number | undefined;
  monitor?: number | undefined;
  order: string;
  parallelism: number;
};

/**
 * Successful response
 */
export type MysqlStartResponseBody = {
  appName: string;
  applicationStatus: MysqlStartApplicationStatus;
  backups: Array<MysqlStartBackup>;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databaseName: string;
  databasePassword: string;
  databaseRootPassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environment: MysqlStartEnvironment;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: MysqlStartHealthCheckSwarm | null;
  labelsSwarm: { [k: string]: string } | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: MysqlStartModeSwarm | null;
  mounts: Array<MysqlStartMount>;
  mysqlId: string;
  name: string;
  networkSwarm: Array<MysqlStartNetworkSwarm> | null;
  placementSwarm: MysqlStartPlacementSwarm | null;
  replicas: number;
  restartPolicySwarm: MysqlStartRestartPolicySwarm | null;
  rollbackConfigSwarm: MysqlStartRollbackConfigSwarm | null;
  server: MysqlStartServer | null;
  serverId: string | null;
  updateConfigSwarm: MysqlStartUpdateConfigSwarm | null;
};

export type MysqlStartResponse = MysqlStartResponseBody | models.ErrorT;

/** @internal */
export const MysqlStartSecurity$inboundSchema: z.ZodType<
  MysqlStartSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type MysqlStartSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const MysqlStartSecurity$outboundSchema: z.ZodType<
  MysqlStartSecurity$Outbound,
  z.ZodTypeDef,
  MysqlStartSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartSecurity$ {
  /** @deprecated use `MysqlStartSecurity$inboundSchema` instead. */
  export const inboundSchema = MysqlStartSecurity$inboundSchema;
  /** @deprecated use `MysqlStartSecurity$outboundSchema` instead. */
  export const outboundSchema = MysqlStartSecurity$outboundSchema;
  /** @deprecated use `MysqlStartSecurity$Outbound` instead. */
  export type Outbound = MysqlStartSecurity$Outbound;
}

export function mysqlStartSecurityToJSON(
  mysqlStartSecurity: MysqlStartSecurity,
): string {
  return JSON.stringify(
    MysqlStartSecurity$outboundSchema.parse(mysqlStartSecurity),
  );
}

export function mysqlStartSecurityFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartSecurity' from JSON`,
  );
}

/** @internal */
export const MysqlStartRequest$inboundSchema: z.ZodType<
  MysqlStartRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mysqlId: z.string(),
});

/** @internal */
export type MysqlStartRequest$Outbound = {
  mysqlId: string;
};

/** @internal */
export const MysqlStartRequest$outboundSchema: z.ZodType<
  MysqlStartRequest$Outbound,
  z.ZodTypeDef,
  MysqlStartRequest
> = z.object({
  mysqlId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartRequest$ {
  /** @deprecated use `MysqlStartRequest$inboundSchema` instead. */
  export const inboundSchema = MysqlStartRequest$inboundSchema;
  /** @deprecated use `MysqlStartRequest$outboundSchema` instead. */
  export const outboundSchema = MysqlStartRequest$outboundSchema;
  /** @deprecated use `MysqlStartRequest$Outbound` instead. */
  export type Outbound = MysqlStartRequest$Outbound;
}

export function mysqlStartRequestToJSON(
  mysqlStartRequest: MysqlStartRequest,
): string {
  return JSON.stringify(
    MysqlStartRequest$outboundSchema.parse(mysqlStartRequest),
  );
}

export function mysqlStartRequestFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartRequest' from JSON`,
  );
}

/** @internal */
export const MysqlStartApplicationStatus$inboundSchema: z.ZodNativeEnum<
  typeof MysqlStartApplicationStatus
> = z.nativeEnum(MysqlStartApplicationStatus);

/** @internal */
export const MysqlStartApplicationStatus$outboundSchema: z.ZodNativeEnum<
  typeof MysqlStartApplicationStatus
> = MysqlStartApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartApplicationStatus$ {
  /** @deprecated use `MysqlStartApplicationStatus$inboundSchema` instead. */
  export const inboundSchema = MysqlStartApplicationStatus$inboundSchema;
  /** @deprecated use `MysqlStartApplicationStatus$outboundSchema` instead. */
  export const outboundSchema = MysqlStartApplicationStatus$outboundSchema;
}

/** @internal */
export const MysqlStartBackupType$inboundSchema: z.ZodNativeEnum<
  typeof MysqlStartBackupType
> = z.nativeEnum(MysqlStartBackupType);

/** @internal */
export const MysqlStartBackupType$outboundSchema: z.ZodNativeEnum<
  typeof MysqlStartBackupType
> = MysqlStartBackupType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartBackupType$ {
  /** @deprecated use `MysqlStartBackupType$inboundSchema` instead. */
  export const inboundSchema = MysqlStartBackupType$inboundSchema;
  /** @deprecated use `MysqlStartBackupType$outboundSchema` instead. */
  export const outboundSchema = MysqlStartBackupType$outboundSchema;
}

/** @internal */
export const MysqlStartDatabaseType$inboundSchema: z.ZodNativeEnum<
  typeof MysqlStartDatabaseType
> = z.nativeEnum(MysqlStartDatabaseType);

/** @internal */
export const MysqlStartDatabaseType$outboundSchema: z.ZodNativeEnum<
  typeof MysqlStartDatabaseType
> = MysqlStartDatabaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartDatabaseType$ {
  /** @deprecated use `MysqlStartDatabaseType$inboundSchema` instead. */
  export const inboundSchema = MysqlStartDatabaseType$inboundSchema;
  /** @deprecated use `MysqlStartDatabaseType$outboundSchema` instead. */
  export const outboundSchema = MysqlStartDatabaseType$outboundSchema;
}

/** @internal */
export const MysqlStartMetadataEnum$inboundSchema: z.ZodNativeEnum<
  typeof MysqlStartMetadataEnum
> = z.nativeEnum(MysqlStartMetadataEnum);

/** @internal */
export const MysqlStartMetadataEnum$outboundSchema: z.ZodNativeEnum<
  typeof MysqlStartMetadataEnum
> = MysqlStartMetadataEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartMetadataEnum$ {
  /** @deprecated use `MysqlStartMetadataEnum$inboundSchema` instead. */
  export const inboundSchema = MysqlStartMetadataEnum$inboundSchema;
  /** @deprecated use `MysqlStartMetadataEnum$outboundSchema` instead. */
  export const outboundSchema = MysqlStartMetadataEnum$outboundSchema;
}

/** @internal */
export const MysqlStartMariadb$inboundSchema: z.ZodType<
  MysqlStartMariadb,
  z.ZodTypeDef,
  unknown
> = z.object({
  databasePassword: z.string(),
  databaseUser: z.string(),
});

/** @internal */
export type MysqlStartMariadb$Outbound = {
  databasePassword: string;
  databaseUser: string;
};

/** @internal */
export const MysqlStartMariadb$outboundSchema: z.ZodType<
  MysqlStartMariadb$Outbound,
  z.ZodTypeDef,
  MysqlStartMariadb
> = z.object({
  databasePassword: z.string(),
  databaseUser: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartMariadb$ {
  /** @deprecated use `MysqlStartMariadb$inboundSchema` instead. */
  export const inboundSchema = MysqlStartMariadb$inboundSchema;
  /** @deprecated use `MysqlStartMariadb$outboundSchema` instead. */
  export const outboundSchema = MysqlStartMariadb$outboundSchema;
  /** @deprecated use `MysqlStartMariadb$Outbound` instead. */
  export type Outbound = MysqlStartMariadb$Outbound;
}

export function mysqlStartMariadbToJSON(
  mysqlStartMariadb: MysqlStartMariadb,
): string {
  return JSON.stringify(
    MysqlStartMariadb$outboundSchema.parse(mysqlStartMariadb),
  );
}

export function mysqlStartMariadbFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartMariadb, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartMariadb$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartMariadb' from JSON`,
  );
}

/** @internal */
export const MysqlStartMongo$inboundSchema: z.ZodType<
  MysqlStartMongo,
  z.ZodTypeDef,
  unknown
> = z.object({
  databasePassword: z.string(),
  databaseUser: z.string(),
});

/** @internal */
export type MysqlStartMongo$Outbound = {
  databasePassword: string;
  databaseUser: string;
};

/** @internal */
export const MysqlStartMongo$outboundSchema: z.ZodType<
  MysqlStartMongo$Outbound,
  z.ZodTypeDef,
  MysqlStartMongo
> = z.object({
  databasePassword: z.string(),
  databaseUser: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartMongo$ {
  /** @deprecated use `MysqlStartMongo$inboundSchema` instead. */
  export const inboundSchema = MysqlStartMongo$inboundSchema;
  /** @deprecated use `MysqlStartMongo$outboundSchema` instead. */
  export const outboundSchema = MysqlStartMongo$outboundSchema;
  /** @deprecated use `MysqlStartMongo$Outbound` instead. */
  export type Outbound = MysqlStartMongo$Outbound;
}

export function mysqlStartMongoToJSON(
  mysqlStartMongo: MysqlStartMongo,
): string {
  return JSON.stringify(MysqlStartMongo$outboundSchema.parse(mysqlStartMongo));
}

export function mysqlStartMongoFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartMongo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartMongo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartMongo' from JSON`,
  );
}

/** @internal */
export const MysqlStartMysql$inboundSchema: z.ZodType<
  MysqlStartMysql,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseRootPassword: z.string(),
});

/** @internal */
export type MysqlStartMysql$Outbound = {
  databaseRootPassword: string;
};

/** @internal */
export const MysqlStartMysql$outboundSchema: z.ZodType<
  MysqlStartMysql$Outbound,
  z.ZodTypeDef,
  MysqlStartMysql
> = z.object({
  databaseRootPassword: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartMysql$ {
  /** @deprecated use `MysqlStartMysql$inboundSchema` instead. */
  export const inboundSchema = MysqlStartMysql$inboundSchema;
  /** @deprecated use `MysqlStartMysql$outboundSchema` instead. */
  export const outboundSchema = MysqlStartMysql$outboundSchema;
  /** @deprecated use `MysqlStartMysql$Outbound` instead. */
  export type Outbound = MysqlStartMysql$Outbound;
}

export function mysqlStartMysqlToJSON(
  mysqlStartMysql: MysqlStartMysql,
): string {
  return JSON.stringify(MysqlStartMysql$outboundSchema.parse(mysqlStartMysql));
}

export function mysqlStartMysqlFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartMysql, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartMysql$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartMysql' from JSON`,
  );
}

/** @internal */
export const MysqlStartPostgres$inboundSchema: z.ZodType<
  MysqlStartPostgres,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseUser: z.string(),
});

/** @internal */
export type MysqlStartPostgres$Outbound = {
  databaseUser: string;
};

/** @internal */
export const MysqlStartPostgres$outboundSchema: z.ZodType<
  MysqlStartPostgres$Outbound,
  z.ZodTypeDef,
  MysqlStartPostgres
> = z.object({
  databaseUser: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartPostgres$ {
  /** @deprecated use `MysqlStartPostgres$inboundSchema` instead. */
  export const inboundSchema = MysqlStartPostgres$inboundSchema;
  /** @deprecated use `MysqlStartPostgres$outboundSchema` instead. */
  export const outboundSchema = MysqlStartPostgres$outboundSchema;
  /** @deprecated use `MysqlStartPostgres$Outbound` instead. */
  export type Outbound = MysqlStartPostgres$Outbound;
}

export function mysqlStartPostgresToJSON(
  mysqlStartPostgres: MysqlStartPostgres,
): string {
  return JSON.stringify(
    MysqlStartPostgres$outboundSchema.parse(mysqlStartPostgres),
  );
}

export function mysqlStartPostgresFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartPostgres, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartPostgres$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartPostgres' from JSON`,
  );
}

/** @internal */
export const MysqlStartMetadata$inboundSchema: z.ZodType<
  MysqlStartMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  mariadb: z.lazy(() => MysqlStartMariadb$inboundSchema).optional(),
  mongo: z.lazy(() => MysqlStartMongo$inboundSchema).optional(),
  mysql: z.lazy(() => MysqlStartMysql$inboundSchema).optional(),
  postgres: z.lazy(() => MysqlStartPostgres$inboundSchema).optional(),
});

/** @internal */
export type MysqlStartMetadata$Outbound = {
  mariadb?: MysqlStartMariadb$Outbound | undefined;
  mongo?: MysqlStartMongo$Outbound | undefined;
  mysql?: MysqlStartMysql$Outbound | undefined;
  postgres?: MysqlStartPostgres$Outbound | undefined;
};

/** @internal */
export const MysqlStartMetadata$outboundSchema: z.ZodType<
  MysqlStartMetadata$Outbound,
  z.ZodTypeDef,
  MysqlStartMetadata
> = z.object({
  mariadb: z.lazy(() => MysqlStartMariadb$outboundSchema).optional(),
  mongo: z.lazy(() => MysqlStartMongo$outboundSchema).optional(),
  mysql: z.lazy(() => MysqlStartMysql$outboundSchema).optional(),
  postgres: z.lazy(() => MysqlStartPostgres$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartMetadata$ {
  /** @deprecated use `MysqlStartMetadata$inboundSchema` instead. */
  export const inboundSchema = MysqlStartMetadata$inboundSchema;
  /** @deprecated use `MysqlStartMetadata$outboundSchema` instead. */
  export const outboundSchema = MysqlStartMetadata$outboundSchema;
  /** @deprecated use `MysqlStartMetadata$Outbound` instead. */
  export type Outbound = MysqlStartMetadata$Outbound;
}

export function mysqlStartMetadataToJSON(
  mysqlStartMetadata: MysqlStartMetadata,
): string {
  return JSON.stringify(
    MysqlStartMetadata$outboundSchema.parse(mysqlStartMetadata),
  );
}

export function mysqlStartMetadataFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartMetadata' from JSON`,
  );
}

/** @internal */
export const MysqlStartMetadataUnion$inboundSchema: z.ZodType<
  MysqlStartMetadataUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => MysqlStartMetadata$inboundSchema),
  MysqlStartMetadataEnum$inboundSchema,
]);

/** @internal */
export type MysqlStartMetadataUnion$Outbound =
  | MysqlStartMetadata$Outbound
  | string;

/** @internal */
export const MysqlStartMetadataUnion$outboundSchema: z.ZodType<
  MysqlStartMetadataUnion$Outbound,
  z.ZodTypeDef,
  MysqlStartMetadataUnion
> = z.union([
  z.lazy(() => MysqlStartMetadata$outboundSchema),
  MysqlStartMetadataEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartMetadataUnion$ {
  /** @deprecated use `MysqlStartMetadataUnion$inboundSchema` instead. */
  export const inboundSchema = MysqlStartMetadataUnion$inboundSchema;
  /** @deprecated use `MysqlStartMetadataUnion$outboundSchema` instead. */
  export const outboundSchema = MysqlStartMetadataUnion$outboundSchema;
  /** @deprecated use `MysqlStartMetadataUnion$Outbound` instead. */
  export type Outbound = MysqlStartMetadataUnion$Outbound;
}

export function mysqlStartMetadataUnionToJSON(
  mysqlStartMetadataUnion: MysqlStartMetadataUnion,
): string {
  return JSON.stringify(
    MysqlStartMetadataUnion$outboundSchema.parse(mysqlStartMetadataUnion),
  );
}

export function mysqlStartMetadataUnionFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartMetadataUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartMetadataUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartMetadataUnion' from JSON`,
  );
}

/** @internal */
export const MysqlStartBackup$inboundSchema: z.ZodType<
  MysqlStartBackup,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  backupId: z.string(),
  backupType: MysqlStartBackupType$inboundSchema,
  composeId: z.nullable(z.string()),
  database: z.string(),
  databaseType: MysqlStartDatabaseType$inboundSchema,
  destinationId: z.string(),
  enabled: z.nullable(z.boolean()),
  keepLatestCount: z.nullable(z.number()),
  mariadbId: z.nullable(z.string()),
  metadata: z.nullable(
    z.union([
      z.lazy(() => MysqlStartMetadata$inboundSchema),
      MysqlStartMetadataEnum$inboundSchema,
    ]),
  ).optional(),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  prefix: z.string(),
  schedule: z.string(),
  serviceName: z.nullable(z.string()),
  userId: z.nullable(z.string()),
});

/** @internal */
export type MysqlStartBackup$Outbound = {
  appName: string;
  backupId: string;
  backupType: string;
  composeId: string | null;
  database: string;
  databaseType: string;
  destinationId: string;
  enabled: boolean | null;
  keepLatestCount: number | null;
  mariadbId: string | null;
  metadata?: MysqlStartMetadata$Outbound | string | null | undefined;
  mongoId: string | null;
  mysqlId: string | null;
  postgresId: string | null;
  prefix: string;
  schedule: string;
  serviceName: string | null;
  userId: string | null;
};

/** @internal */
export const MysqlStartBackup$outboundSchema: z.ZodType<
  MysqlStartBackup$Outbound,
  z.ZodTypeDef,
  MysqlStartBackup
> = z.object({
  appName: z.string(),
  backupId: z.string(),
  backupType: MysqlStartBackupType$outboundSchema,
  composeId: z.nullable(z.string()),
  database: z.string(),
  databaseType: MysqlStartDatabaseType$outboundSchema,
  destinationId: z.string(),
  enabled: z.nullable(z.boolean()),
  keepLatestCount: z.nullable(z.number()),
  mariadbId: z.nullable(z.string()),
  metadata: z.nullable(
    z.union([
      z.lazy(() => MysqlStartMetadata$outboundSchema),
      MysqlStartMetadataEnum$outboundSchema,
    ]),
  ).optional(),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  prefix: z.string(),
  schedule: z.string(),
  serviceName: z.nullable(z.string()),
  userId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartBackup$ {
  /** @deprecated use `MysqlStartBackup$inboundSchema` instead. */
  export const inboundSchema = MysqlStartBackup$inboundSchema;
  /** @deprecated use `MysqlStartBackup$outboundSchema` instead. */
  export const outboundSchema = MysqlStartBackup$outboundSchema;
  /** @deprecated use `MysqlStartBackup$Outbound` instead. */
  export type Outbound = MysqlStartBackup$Outbound;
}

export function mysqlStartBackupToJSON(
  mysqlStartBackup: MysqlStartBackup,
): string {
  return JSON.stringify(
    MysqlStartBackup$outboundSchema.parse(mysqlStartBackup),
  );
}

export function mysqlStartBackupFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartBackup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartBackup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartBackup' from JSON`,
  );
}

/** @internal */
export const MysqlStartProject$inboundSchema: z.ZodType<
  MysqlStartProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/** @internal */
export type MysqlStartProject$Outbound = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

/** @internal */
export const MysqlStartProject$outboundSchema: z.ZodType<
  MysqlStartProject$Outbound,
  z.ZodTypeDef,
  MysqlStartProject
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartProject$ {
  /** @deprecated use `MysqlStartProject$inboundSchema` instead. */
  export const inboundSchema = MysqlStartProject$inboundSchema;
  /** @deprecated use `MysqlStartProject$outboundSchema` instead. */
  export const outboundSchema = MysqlStartProject$outboundSchema;
  /** @deprecated use `MysqlStartProject$Outbound` instead. */
  export type Outbound = MysqlStartProject$Outbound;
}

export function mysqlStartProjectToJSON(
  mysqlStartProject: MysqlStartProject,
): string {
  return JSON.stringify(
    MysqlStartProject$outboundSchema.parse(mysqlStartProject),
  );
}

export function mysqlStartProjectFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartProject' from JSON`,
  );
}

/** @internal */
export const MysqlStartEnvironment$inboundSchema: z.ZodType<
  MysqlStartEnvironment,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  name: z.string(),
  project: z.lazy(() => MysqlStartProject$inboundSchema),
  projectId: z.string(),
});

/** @internal */
export type MysqlStartEnvironment$Outbound = {
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  name: string;
  project: MysqlStartProject$Outbound;
  projectId: string;
};

/** @internal */
export const MysqlStartEnvironment$outboundSchema: z.ZodType<
  MysqlStartEnvironment$Outbound,
  z.ZodTypeDef,
  MysqlStartEnvironment
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  name: z.string(),
  project: z.lazy(() => MysqlStartProject$outboundSchema),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartEnvironment$ {
  /** @deprecated use `MysqlStartEnvironment$inboundSchema` instead. */
  export const inboundSchema = MysqlStartEnvironment$inboundSchema;
  /** @deprecated use `MysqlStartEnvironment$outboundSchema` instead. */
  export const outboundSchema = MysqlStartEnvironment$outboundSchema;
  /** @deprecated use `MysqlStartEnvironment$Outbound` instead. */
  export type Outbound = MysqlStartEnvironment$Outbound;
}

export function mysqlStartEnvironmentToJSON(
  mysqlStartEnvironment: MysqlStartEnvironment,
): string {
  return JSON.stringify(
    MysqlStartEnvironment$outboundSchema.parse(mysqlStartEnvironment),
  );
}

export function mysqlStartEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartEnvironment' from JSON`,
  );
}

/** @internal */
export const MysqlStartHealthCheckSwarm$inboundSchema: z.ZodType<
  MysqlStartHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Interval: z.number().optional(),
  Retries: z.number().optional(),
  StartPeriod: z.number().optional(),
  Test: z.array(z.string()).optional(),
  Timeout: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Interval": "interval",
    "Retries": "retries",
    "StartPeriod": "startPeriod",
    "Test": "test",
    "Timeout": "timeout",
  });
});

/** @internal */
export type MysqlStartHealthCheckSwarm$Outbound = {
  Interval?: number | undefined;
  Retries?: number | undefined;
  StartPeriod?: number | undefined;
  Test?: Array<string> | undefined;
  Timeout?: number | undefined;
};

/** @internal */
export const MysqlStartHealthCheckSwarm$outboundSchema: z.ZodType<
  MysqlStartHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  MysqlStartHealthCheckSwarm
> = z.object({
  interval: z.number().optional(),
  retries: z.number().optional(),
  startPeriod: z.number().optional(),
  test: z.array(z.string()).optional(),
  timeout: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    interval: "Interval",
    retries: "Retries",
    startPeriod: "StartPeriod",
    test: "Test",
    timeout: "Timeout",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartHealthCheckSwarm$ {
  /** @deprecated use `MysqlStartHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlStartHealthCheckSwarm$inboundSchema;
  /** @deprecated use `MysqlStartHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlStartHealthCheckSwarm$outboundSchema;
  /** @deprecated use `MysqlStartHealthCheckSwarm$Outbound` instead. */
  export type Outbound = MysqlStartHealthCheckSwarm$Outbound;
}

export function mysqlStartHealthCheckSwarmToJSON(
  mysqlStartHealthCheckSwarm: MysqlStartHealthCheckSwarm,
): string {
  return JSON.stringify(
    MysqlStartHealthCheckSwarm$outboundSchema.parse(mysqlStartHealthCheckSwarm),
  );
}

export function mysqlStartHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlStartGlobal$inboundSchema: z.ZodType<
  MysqlStartGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MysqlStartGlobal$Outbound = {};

/** @internal */
export const MysqlStartGlobal$outboundSchema: z.ZodType<
  MysqlStartGlobal$Outbound,
  z.ZodTypeDef,
  MysqlStartGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartGlobal$ {
  /** @deprecated use `MysqlStartGlobal$inboundSchema` instead. */
  export const inboundSchema = MysqlStartGlobal$inboundSchema;
  /** @deprecated use `MysqlStartGlobal$outboundSchema` instead. */
  export const outboundSchema = MysqlStartGlobal$outboundSchema;
  /** @deprecated use `MysqlStartGlobal$Outbound` instead. */
  export type Outbound = MysqlStartGlobal$Outbound;
}

export function mysqlStartGlobalToJSON(
  mysqlStartGlobal: MysqlStartGlobal,
): string {
  return JSON.stringify(
    MysqlStartGlobal$outboundSchema.parse(mysqlStartGlobal),
  );
}

export function mysqlStartGlobalFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartGlobal' from JSON`,
  );
}

/** @internal */
export const MysqlStartGlobalJob$inboundSchema: z.ZodType<
  MysqlStartGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MysqlStartGlobalJob$Outbound = {};

/** @internal */
export const MysqlStartGlobalJob$outboundSchema: z.ZodType<
  MysqlStartGlobalJob$Outbound,
  z.ZodTypeDef,
  MysqlStartGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartGlobalJob$ {
  /** @deprecated use `MysqlStartGlobalJob$inboundSchema` instead. */
  export const inboundSchema = MysqlStartGlobalJob$inboundSchema;
  /** @deprecated use `MysqlStartGlobalJob$outboundSchema` instead. */
  export const outboundSchema = MysqlStartGlobalJob$outboundSchema;
  /** @deprecated use `MysqlStartGlobalJob$Outbound` instead. */
  export type Outbound = MysqlStartGlobalJob$Outbound;
}

export function mysqlStartGlobalJobToJSON(
  mysqlStartGlobalJob: MysqlStartGlobalJob,
): string {
  return JSON.stringify(
    MysqlStartGlobalJob$outboundSchema.parse(mysqlStartGlobalJob),
  );
}

export function mysqlStartGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartGlobalJob' from JSON`,
  );
}

/** @internal */
export const MysqlStartReplicated$inboundSchema: z.ZodType<
  MysqlStartReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type MysqlStartReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const MysqlStartReplicated$outboundSchema: z.ZodType<
  MysqlStartReplicated$Outbound,
  z.ZodTypeDef,
  MysqlStartReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartReplicated$ {
  /** @deprecated use `MysqlStartReplicated$inboundSchema` instead. */
  export const inboundSchema = MysqlStartReplicated$inboundSchema;
  /** @deprecated use `MysqlStartReplicated$outboundSchema` instead. */
  export const outboundSchema = MysqlStartReplicated$outboundSchema;
  /** @deprecated use `MysqlStartReplicated$Outbound` instead. */
  export type Outbound = MysqlStartReplicated$Outbound;
}

export function mysqlStartReplicatedToJSON(
  mysqlStartReplicated: MysqlStartReplicated,
): string {
  return JSON.stringify(
    MysqlStartReplicated$outboundSchema.parse(mysqlStartReplicated),
  );
}

export function mysqlStartReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartReplicated' from JSON`,
  );
}

/** @internal */
export const MysqlStartReplicatedJob$inboundSchema: z.ZodType<
  MysqlStartReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type MysqlStartReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const MysqlStartReplicatedJob$outboundSchema: z.ZodType<
  MysqlStartReplicatedJob$Outbound,
  z.ZodTypeDef,
  MysqlStartReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartReplicatedJob$ {
  /** @deprecated use `MysqlStartReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = MysqlStartReplicatedJob$inboundSchema;
  /** @deprecated use `MysqlStartReplicatedJob$outboundSchema` instead. */
  export const outboundSchema = MysqlStartReplicatedJob$outboundSchema;
  /** @deprecated use `MysqlStartReplicatedJob$Outbound` instead. */
  export type Outbound = MysqlStartReplicatedJob$Outbound;
}

export function mysqlStartReplicatedJobToJSON(
  mysqlStartReplicatedJob: MysqlStartReplicatedJob,
): string {
  return JSON.stringify(
    MysqlStartReplicatedJob$outboundSchema.parse(mysqlStartReplicatedJob),
  );
}

export function mysqlStartReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartReplicatedJob' from JSON`,
  );
}

/** @internal */
export const MysqlStartModeSwarm$inboundSchema: z.ZodType<
  MysqlStartModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Global: z.lazy(() => MysqlStartGlobal$inboundSchema).optional(),
  GlobalJob: z.lazy(() => MysqlStartGlobalJob$inboundSchema).optional(),
  Replicated: z.lazy(() => MysqlStartReplicated$inboundSchema).optional(),
  ReplicatedJob: z.lazy(() => MysqlStartReplicatedJob$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Global": "global",
    "GlobalJob": "globalJob",
    "Replicated": "replicated",
    "ReplicatedJob": "replicatedJob",
  });
});

/** @internal */
export type MysqlStartModeSwarm$Outbound = {
  Global?: MysqlStartGlobal$Outbound | undefined;
  GlobalJob?: MysqlStartGlobalJob$Outbound | undefined;
  Replicated?: MysqlStartReplicated$Outbound | undefined;
  ReplicatedJob?: MysqlStartReplicatedJob$Outbound | undefined;
};

/** @internal */
export const MysqlStartModeSwarm$outboundSchema: z.ZodType<
  MysqlStartModeSwarm$Outbound,
  z.ZodTypeDef,
  MysqlStartModeSwarm
> = z.object({
  global: z.lazy(() => MysqlStartGlobal$outboundSchema).optional(),
  globalJob: z.lazy(() => MysqlStartGlobalJob$outboundSchema).optional(),
  replicated: z.lazy(() => MysqlStartReplicated$outboundSchema).optional(),
  replicatedJob: z.lazy(() => MysqlStartReplicatedJob$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    global: "Global",
    globalJob: "GlobalJob",
    replicated: "Replicated",
    replicatedJob: "ReplicatedJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartModeSwarm$ {
  /** @deprecated use `MysqlStartModeSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlStartModeSwarm$inboundSchema;
  /** @deprecated use `MysqlStartModeSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlStartModeSwarm$outboundSchema;
  /** @deprecated use `MysqlStartModeSwarm$Outbound` instead. */
  export type Outbound = MysqlStartModeSwarm$Outbound;
}

export function mysqlStartModeSwarmToJSON(
  mysqlStartModeSwarm: MysqlStartModeSwarm,
): string {
  return JSON.stringify(
    MysqlStartModeSwarm$outboundSchema.parse(mysqlStartModeSwarm),
  );
}

export function mysqlStartModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartModeSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlStartServiceType$inboundSchema: z.ZodNativeEnum<
  typeof MysqlStartServiceType
> = z.nativeEnum(MysqlStartServiceType);

/** @internal */
export const MysqlStartServiceType$outboundSchema: z.ZodNativeEnum<
  typeof MysqlStartServiceType
> = MysqlStartServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartServiceType$ {
  /** @deprecated use `MysqlStartServiceType$inboundSchema` instead. */
  export const inboundSchema = MysqlStartServiceType$inboundSchema;
  /** @deprecated use `MysqlStartServiceType$outboundSchema` instead. */
  export const outboundSchema = MysqlStartServiceType$outboundSchema;
}

/** @internal */
export const MysqlStartType$inboundSchema: z.ZodNativeEnum<
  typeof MysqlStartType
> = z.nativeEnum(MysqlStartType);

/** @internal */
export const MysqlStartType$outboundSchema: z.ZodNativeEnum<
  typeof MysqlStartType
> = MysqlStartType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartType$ {
  /** @deprecated use `MysqlStartType$inboundSchema` instead. */
  export const inboundSchema = MysqlStartType$inboundSchema;
  /** @deprecated use `MysqlStartType$outboundSchema` instead. */
  export const outboundSchema = MysqlStartType$outboundSchema;
}

/** @internal */
export const MysqlStartMount$inboundSchema: z.ZodType<
  MysqlStartMount,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  content: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  hostPath: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mountId: z.string(),
  mountPath: z.string(),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  serviceType: MysqlStartServiceType$inboundSchema,
  type: MysqlStartType$inboundSchema,
  volumeName: z.nullable(z.string()),
});

/** @internal */
export type MysqlStartMount$Outbound = {
  applicationId: string | null;
  composeId: string | null;
  content: string | null;
  filePath: string | null;
  hostPath: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mountId: string;
  mountPath: string;
  mysqlId: string | null;
  postgresId: string | null;
  redisId: string | null;
  serviceType: string;
  type: string;
  volumeName: string | null;
};

/** @internal */
export const MysqlStartMount$outboundSchema: z.ZodType<
  MysqlStartMount$Outbound,
  z.ZodTypeDef,
  MysqlStartMount
> = z.object({
  applicationId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  content: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  hostPath: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mountId: z.string(),
  mountPath: z.string(),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  serviceType: MysqlStartServiceType$outboundSchema,
  type: MysqlStartType$outboundSchema,
  volumeName: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartMount$ {
  /** @deprecated use `MysqlStartMount$inboundSchema` instead. */
  export const inboundSchema = MysqlStartMount$inboundSchema;
  /** @deprecated use `MysqlStartMount$outboundSchema` instead. */
  export const outboundSchema = MysqlStartMount$outboundSchema;
  /** @deprecated use `MysqlStartMount$Outbound` instead. */
  export type Outbound = MysqlStartMount$Outbound;
}

export function mysqlStartMountToJSON(
  mysqlStartMount: MysqlStartMount,
): string {
  return JSON.stringify(MysqlStartMount$outboundSchema.parse(mysqlStartMount));
}

export function mysqlStartMountFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartMount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartMount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartMount' from JSON`,
  );
}

/** @internal */
export const MysqlStartDriverOpts$inboundSchema: z.ZodType<
  MysqlStartDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MysqlStartDriverOpts$Outbound = {};

/** @internal */
export const MysqlStartDriverOpts$outboundSchema: z.ZodType<
  MysqlStartDriverOpts$Outbound,
  z.ZodTypeDef,
  MysqlStartDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartDriverOpts$ {
  /** @deprecated use `MysqlStartDriverOpts$inboundSchema` instead. */
  export const inboundSchema = MysqlStartDriverOpts$inboundSchema;
  /** @deprecated use `MysqlStartDriverOpts$outboundSchema` instead. */
  export const outboundSchema = MysqlStartDriverOpts$outboundSchema;
  /** @deprecated use `MysqlStartDriverOpts$Outbound` instead. */
  export type Outbound = MysqlStartDriverOpts$Outbound;
}

export function mysqlStartDriverOptsToJSON(
  mysqlStartDriverOpts: MysqlStartDriverOpts,
): string {
  return JSON.stringify(
    MysqlStartDriverOpts$outboundSchema.parse(mysqlStartDriverOpts),
  );
}

export function mysqlStartDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartDriverOpts' from JSON`,
  );
}

/** @internal */
export const MysqlStartNetworkSwarm$inboundSchema: z.ZodType<
  MysqlStartNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => MysqlStartDriverOpts$inboundSchema).optional(),
  Target: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
    "Target": "target",
  });
});

/** @internal */
export type MysqlStartNetworkSwarm$Outbound = {
  Aliases?: Array<string> | undefined;
  DriverOpts?: MysqlStartDriverOpts$Outbound | undefined;
  Target?: string | undefined;
};

/** @internal */
export const MysqlStartNetworkSwarm$outboundSchema: z.ZodType<
  MysqlStartNetworkSwarm$Outbound,
  z.ZodTypeDef,
  MysqlStartNetworkSwarm
> = z.object({
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => MysqlStartDriverOpts$outboundSchema).optional(),
  target: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    aliases: "Aliases",
    driverOpts: "DriverOpts",
    target: "Target",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartNetworkSwarm$ {
  /** @deprecated use `MysqlStartNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlStartNetworkSwarm$inboundSchema;
  /** @deprecated use `MysqlStartNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlStartNetworkSwarm$outboundSchema;
  /** @deprecated use `MysqlStartNetworkSwarm$Outbound` instead. */
  export type Outbound = MysqlStartNetworkSwarm$Outbound;
}

export function mysqlStartNetworkSwarmToJSON(
  mysqlStartNetworkSwarm: MysqlStartNetworkSwarm,
): string {
  return JSON.stringify(
    MysqlStartNetworkSwarm$outboundSchema.parse(mysqlStartNetworkSwarm),
  );
}

export function mysqlStartNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlStartPlatform$inboundSchema: z.ZodType<
  MysqlStartPlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type MysqlStartPlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const MysqlStartPlatform$outboundSchema: z.ZodType<
  MysqlStartPlatform$Outbound,
  z.ZodTypeDef,
  MysqlStartPlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartPlatform$ {
  /** @deprecated use `MysqlStartPlatform$inboundSchema` instead. */
  export const inboundSchema = MysqlStartPlatform$inboundSchema;
  /** @deprecated use `MysqlStartPlatform$outboundSchema` instead. */
  export const outboundSchema = MysqlStartPlatform$outboundSchema;
  /** @deprecated use `MysqlStartPlatform$Outbound` instead. */
  export type Outbound = MysqlStartPlatform$Outbound;
}

export function mysqlStartPlatformToJSON(
  mysqlStartPlatform: MysqlStartPlatform,
): string {
  return JSON.stringify(
    MysqlStartPlatform$outboundSchema.parse(mysqlStartPlatform),
  );
}

export function mysqlStartPlatformFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartPlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartPlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartPlatform' from JSON`,
  );
}

/** @internal */
export const MysqlStartSpread$inboundSchema: z.ZodType<
  MysqlStartSpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type MysqlStartSpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const MysqlStartSpread$outboundSchema: z.ZodType<
  MysqlStartSpread$Outbound,
  z.ZodTypeDef,
  MysqlStartSpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartSpread$ {
  /** @deprecated use `MysqlStartSpread$inboundSchema` instead. */
  export const inboundSchema = MysqlStartSpread$inboundSchema;
  /** @deprecated use `MysqlStartSpread$outboundSchema` instead. */
  export const outboundSchema = MysqlStartSpread$outboundSchema;
  /** @deprecated use `MysqlStartSpread$Outbound` instead. */
  export type Outbound = MysqlStartSpread$Outbound;
}

export function mysqlStartSpreadToJSON(
  mysqlStartSpread: MysqlStartSpread,
): string {
  return JSON.stringify(
    MysqlStartSpread$outboundSchema.parse(mysqlStartSpread),
  );
}

export function mysqlStartSpreadFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartSpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartSpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartSpread' from JSON`,
  );
}

/** @internal */
export const MysqlStartPreference$inboundSchema: z.ZodType<
  MysqlStartPreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => MysqlStartSpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type MysqlStartPreference$Outbound = {
  Spread: MysqlStartSpread$Outbound;
};

/** @internal */
export const MysqlStartPreference$outboundSchema: z.ZodType<
  MysqlStartPreference$Outbound,
  z.ZodTypeDef,
  MysqlStartPreference
> = z.object({
  spread: z.lazy(() => MysqlStartSpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartPreference$ {
  /** @deprecated use `MysqlStartPreference$inboundSchema` instead. */
  export const inboundSchema = MysqlStartPreference$inboundSchema;
  /** @deprecated use `MysqlStartPreference$outboundSchema` instead. */
  export const outboundSchema = MysqlStartPreference$outboundSchema;
  /** @deprecated use `MysqlStartPreference$Outbound` instead. */
  export type Outbound = MysqlStartPreference$Outbound;
}

export function mysqlStartPreferenceToJSON(
  mysqlStartPreference: MysqlStartPreference,
): string {
  return JSON.stringify(
    MysqlStartPreference$outboundSchema.parse(mysqlStartPreference),
  );
}

export function mysqlStartPreferenceFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartPreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartPreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartPreference' from JSON`,
  );
}

/** @internal */
export const MysqlStartPlacementSwarm$inboundSchema: z.ZodType<
  MysqlStartPlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => MysqlStartPlatform$inboundSchema)).optional(),
  Preferences: z.array(z.lazy(() => MysqlStartPreference$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
    "Preferences": "preferences",
  });
});

/** @internal */
export type MysqlStartPlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<MysqlStartPlatform$Outbound> | undefined;
  Preferences?: Array<MysqlStartPreference$Outbound> | undefined;
};

/** @internal */
export const MysqlStartPlacementSwarm$outboundSchema: z.ZodType<
  MysqlStartPlacementSwarm$Outbound,
  z.ZodTypeDef,
  MysqlStartPlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => MysqlStartPlatform$outboundSchema))
    .optional(),
  preferences: z.array(z.lazy(() => MysqlStartPreference$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
    preferences: "Preferences",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartPlacementSwarm$ {
  /** @deprecated use `MysqlStartPlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlStartPlacementSwarm$inboundSchema;
  /** @deprecated use `MysqlStartPlacementSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlStartPlacementSwarm$outboundSchema;
  /** @deprecated use `MysqlStartPlacementSwarm$Outbound` instead. */
  export type Outbound = MysqlStartPlacementSwarm$Outbound;
}

export function mysqlStartPlacementSwarmToJSON(
  mysqlStartPlacementSwarm: MysqlStartPlacementSwarm,
): string {
  return JSON.stringify(
    MysqlStartPlacementSwarm$outboundSchema.parse(mysqlStartPlacementSwarm),
  );
}

export function mysqlStartPlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartPlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartPlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartPlacementSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlStartRestartPolicySwarm$inboundSchema: z.ZodType<
  MysqlStartRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type MysqlStartRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const MysqlStartRestartPolicySwarm$outboundSchema: z.ZodType<
  MysqlStartRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  MysqlStartRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartRestartPolicySwarm$ {
  /** @deprecated use `MysqlStartRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlStartRestartPolicySwarm$inboundSchema;
  /** @deprecated use `MysqlStartRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlStartRestartPolicySwarm$outboundSchema;
  /** @deprecated use `MysqlStartRestartPolicySwarm$Outbound` instead. */
  export type Outbound = MysqlStartRestartPolicySwarm$Outbound;
}

export function mysqlStartRestartPolicySwarmToJSON(
  mysqlStartRestartPolicySwarm: MysqlStartRestartPolicySwarm,
): string {
  return JSON.stringify(
    MysqlStartRestartPolicySwarm$outboundSchema.parse(
      mysqlStartRestartPolicySwarm,
    ),
  );
}

export function mysqlStartRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const MysqlStartRollbackConfigSwarm$inboundSchema: z.ZodType<
  MysqlStartRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  MaxFailureRatio: z.number().optional(),
  Monitor: z.number().optional(),
  Order: z.string(),
  Parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    "Delay": "delay",
    "FailureAction": "failureAction",
    "MaxFailureRatio": "maxFailureRatio",
    "Monitor": "monitor",
    "Order": "order",
    "Parallelism": "parallelism",
  });
});

/** @internal */
export type MysqlStartRollbackConfigSwarm$Outbound = {
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  MaxFailureRatio?: number | undefined;
  Monitor?: number | undefined;
  Order: string;
  Parallelism: number;
};

/** @internal */
export const MysqlStartRollbackConfigSwarm$outboundSchema: z.ZodType<
  MysqlStartRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  MysqlStartRollbackConfigSwarm
> = z.object({
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  maxFailureRatio: z.number().optional(),
  monitor: z.number().optional(),
  order: z.string(),
  parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    delay: "Delay",
    failureAction: "FailureAction",
    maxFailureRatio: "MaxFailureRatio",
    monitor: "Monitor",
    order: "Order",
    parallelism: "Parallelism",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartRollbackConfigSwarm$ {
  /** @deprecated use `MysqlStartRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlStartRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `MysqlStartRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlStartRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `MysqlStartRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = MysqlStartRollbackConfigSwarm$Outbound;
}

export function mysqlStartRollbackConfigSwarmToJSON(
  mysqlStartRollbackConfigSwarm: MysqlStartRollbackConfigSwarm,
): string {
  return JSON.stringify(
    MysqlStartRollbackConfigSwarm$outboundSchema.parse(
      mysqlStartRollbackConfigSwarm,
    ),
  );
}

export function mysqlStartRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartRollbackConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartRollbackConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlStartMetricsConfigEnum$inboundSchema: z.ZodNativeEnum<
  typeof MysqlStartMetricsConfigEnum
> = z.nativeEnum(MysqlStartMetricsConfigEnum);

/** @internal */
export const MysqlStartMetricsConfigEnum$outboundSchema: z.ZodNativeEnum<
  typeof MysqlStartMetricsConfigEnum
> = MysqlStartMetricsConfigEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartMetricsConfigEnum$ {
  /** @deprecated use `MysqlStartMetricsConfigEnum$inboundSchema` instead. */
  export const inboundSchema = MysqlStartMetricsConfigEnum$inboundSchema;
  /** @deprecated use `MysqlStartMetricsConfigEnum$outboundSchema` instead. */
  export const outboundSchema = MysqlStartMetricsConfigEnum$outboundSchema;
}

/** @internal */
export const MysqlStartMetricsConfigUnion1$inboundSchema: z.ZodType<
  MysqlStartMetricsConfigUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  MysqlStartMetricsConfigEnum$inboundSchema,
]);

/** @internal */
export type MysqlStartMetricsConfigUnion1$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const MysqlStartMetricsConfigUnion1$outboundSchema: z.ZodType<
  MysqlStartMetricsConfigUnion1$Outbound,
  z.ZodTypeDef,
  MysqlStartMetricsConfigUnion1
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  MysqlStartMetricsConfigEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartMetricsConfigUnion1$ {
  /** @deprecated use `MysqlStartMetricsConfigUnion1$inboundSchema` instead. */
  export const inboundSchema = MysqlStartMetricsConfigUnion1$inboundSchema;
  /** @deprecated use `MysqlStartMetricsConfigUnion1$outboundSchema` instead. */
  export const outboundSchema = MysqlStartMetricsConfigUnion1$outboundSchema;
  /** @deprecated use `MysqlStartMetricsConfigUnion1$Outbound` instead. */
  export type Outbound = MysqlStartMetricsConfigUnion1$Outbound;
}

export function mysqlStartMetricsConfigUnion1ToJSON(
  mysqlStartMetricsConfigUnion1: MysqlStartMetricsConfigUnion1,
): string {
  return JSON.stringify(
    MysqlStartMetricsConfigUnion1$outboundSchema.parse(
      mysqlStartMetricsConfigUnion1,
    ),
  );
}

export function mysqlStartMetricsConfigUnion1FromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartMetricsConfigUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartMetricsConfigUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartMetricsConfigUnion1' from JSON`,
  );
}

/** @internal */
export const MysqlStartMetricsConfigUnion2$inboundSchema: z.ZodType<
  MysqlStartMetricsConfigUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    MysqlStartMetricsConfigEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type MysqlStartMetricsConfigUnion2$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const MysqlStartMetricsConfigUnion2$outboundSchema: z.ZodType<
  MysqlStartMetricsConfigUnion2$Outbound,
  z.ZodTypeDef,
  MysqlStartMetricsConfigUnion2
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    MysqlStartMetricsConfigEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartMetricsConfigUnion2$ {
  /** @deprecated use `MysqlStartMetricsConfigUnion2$inboundSchema` instead. */
  export const inboundSchema = MysqlStartMetricsConfigUnion2$inboundSchema;
  /** @deprecated use `MysqlStartMetricsConfigUnion2$outboundSchema` instead. */
  export const outboundSchema = MysqlStartMetricsConfigUnion2$outboundSchema;
  /** @deprecated use `MysqlStartMetricsConfigUnion2$Outbound` instead. */
  export type Outbound = MysqlStartMetricsConfigUnion2$Outbound;
}

export function mysqlStartMetricsConfigUnion2ToJSON(
  mysqlStartMetricsConfigUnion2: MysqlStartMetricsConfigUnion2,
): string {
  return JSON.stringify(
    MysqlStartMetricsConfigUnion2$outboundSchema.parse(
      mysqlStartMetricsConfigUnion2,
    ),
  );
}

export function mysqlStartMetricsConfigUnion2FromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartMetricsConfigUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartMetricsConfigUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartMetricsConfigUnion2' from JSON`,
  );
}

/** @internal */
export const MysqlStartServerStatus$inboundSchema: z.ZodNativeEnum<
  typeof MysqlStartServerStatus
> = z.nativeEnum(MysqlStartServerStatus);

/** @internal */
export const MysqlStartServerStatus$outboundSchema: z.ZodNativeEnum<
  typeof MysqlStartServerStatus
> = MysqlStartServerStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartServerStatus$ {
  /** @deprecated use `MysqlStartServerStatus$inboundSchema` instead. */
  export const inboundSchema = MysqlStartServerStatus$inboundSchema;
  /** @deprecated use `MysqlStartServerStatus$outboundSchema` instead. */
  export const outboundSchema = MysqlStartServerStatus$outboundSchema;
}

/** @internal */
export const MysqlStartServer$inboundSchema: z.ZodType<
  MysqlStartServer,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  command: z.string(),
  createdAt: z.string(),
  description: z.nullable(z.string()),
  enableDockerCleanup: z.boolean(),
  ipAddress: z.string(),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      MysqlStartMetricsConfigEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
  name: z.string(),
  organizationId: z.string(),
  port: z.number(),
  serverId: z.string(),
  serverStatus: MysqlStartServerStatus$inboundSchema,
  sshKeyId: z.nullable(z.string()),
  username: z.string(),
});

/** @internal */
export type MysqlStartServer$Outbound = {
  appName: string;
  command: string;
  createdAt: string;
  description: string | null;
  enableDockerCleanup: boolean;
  ipAddress: string;
  metricsConfig: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  };
  name: string;
  organizationId: string;
  port: number;
  serverId: string;
  serverStatus: string;
  sshKeyId: string | null;
  username: string;
};

/** @internal */
export const MysqlStartServer$outboundSchema: z.ZodType<
  MysqlStartServer$Outbound,
  z.ZodTypeDef,
  MysqlStartServer
> = z.object({
  appName: z.string(),
  command: z.string(),
  createdAt: z.string(),
  description: z.nullable(z.string()),
  enableDockerCleanup: z.boolean(),
  ipAddress: z.string(),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      MysqlStartMetricsConfigEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
  name: z.string(),
  organizationId: z.string(),
  port: z.number(),
  serverId: z.string(),
  serverStatus: MysqlStartServerStatus$outboundSchema,
  sshKeyId: z.nullable(z.string()),
  username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartServer$ {
  /** @deprecated use `MysqlStartServer$inboundSchema` instead. */
  export const inboundSchema = MysqlStartServer$inboundSchema;
  /** @deprecated use `MysqlStartServer$outboundSchema` instead. */
  export const outboundSchema = MysqlStartServer$outboundSchema;
  /** @deprecated use `MysqlStartServer$Outbound` instead. */
  export type Outbound = MysqlStartServer$Outbound;
}

export function mysqlStartServerToJSON(
  mysqlStartServer: MysqlStartServer,
): string {
  return JSON.stringify(
    MysqlStartServer$outboundSchema.parse(mysqlStartServer),
  );
}

export function mysqlStartServerFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartServer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartServer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartServer' from JSON`,
  );
}

/** @internal */
export const MysqlStartUpdateConfigSwarm$inboundSchema: z.ZodType<
  MysqlStartUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  MaxFailureRatio: z.number().optional(),
  Monitor: z.number().optional(),
  Order: z.string(),
  Parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    "Delay": "delay",
    "FailureAction": "failureAction",
    "MaxFailureRatio": "maxFailureRatio",
    "Monitor": "monitor",
    "Order": "order",
    "Parallelism": "parallelism",
  });
});

/** @internal */
export type MysqlStartUpdateConfigSwarm$Outbound = {
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  MaxFailureRatio?: number | undefined;
  Monitor?: number | undefined;
  Order: string;
  Parallelism: number;
};

/** @internal */
export const MysqlStartUpdateConfigSwarm$outboundSchema: z.ZodType<
  MysqlStartUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  MysqlStartUpdateConfigSwarm
> = z.object({
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  maxFailureRatio: z.number().optional(),
  monitor: z.number().optional(),
  order: z.string(),
  parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    delay: "Delay",
    failureAction: "FailureAction",
    maxFailureRatio: "MaxFailureRatio",
    monitor: "Monitor",
    order: "Order",
    parallelism: "Parallelism",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartUpdateConfigSwarm$ {
  /** @deprecated use `MysqlStartUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlStartUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `MysqlStartUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlStartUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `MysqlStartUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = MysqlStartUpdateConfigSwarm$Outbound;
}

export function mysqlStartUpdateConfigSwarmToJSON(
  mysqlStartUpdateConfigSwarm: MysqlStartUpdateConfigSwarm,
): string {
  return JSON.stringify(
    MysqlStartUpdateConfigSwarm$outboundSchema.parse(
      mysqlStartUpdateConfigSwarm,
    ),
  );
}

export function mysqlStartUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlStartResponseBody$inboundSchema: z.ZodType<
  MysqlStartResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  applicationStatus: MysqlStartApplicationStatus$inboundSchema,
  backups: z.array(z.lazy(() => MysqlStartBackup$inboundSchema)),
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databaseName: z.string(),
  databasePassword: z.string(),
  databaseRootPassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environment: z.lazy(() => MysqlStartEnvironment$inboundSchema),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.lazy(() => MysqlStartHealthCheckSwarm$inboundSchema),
  ),
  labelsSwarm: z.nullable(z.record(z.string())),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(z.lazy(() => MysqlStartModeSwarm$inboundSchema)),
  mounts: z.array(z.lazy(() => MysqlStartMount$inboundSchema)),
  mysqlId: z.string(),
  name: z.string(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MysqlStartNetworkSwarm$inboundSchema)),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => MysqlStartPlacementSwarm$inboundSchema),
  ),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MysqlStartRestartPolicySwarm$inboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MysqlStartRollbackConfigSwarm$inboundSchema),
  ),
  server: z.nullable(z.lazy(() => MysqlStartServer$inboundSchema)),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MysqlStartUpdateConfigSwarm$inboundSchema),
  ),
});

/** @internal */
export type MysqlStartResponseBody$Outbound = {
  appName: string;
  applicationStatus: string;
  backups: Array<MysqlStartBackup$Outbound>;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databaseName: string;
  databasePassword: string;
  databaseRootPassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environment: MysqlStartEnvironment$Outbound;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: MysqlStartHealthCheckSwarm$Outbound | null;
  labelsSwarm: { [k: string]: string } | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: MysqlStartModeSwarm$Outbound | null;
  mounts: Array<MysqlStartMount$Outbound>;
  mysqlId: string;
  name: string;
  networkSwarm: Array<MysqlStartNetworkSwarm$Outbound> | null;
  placementSwarm: MysqlStartPlacementSwarm$Outbound | null;
  replicas: number;
  restartPolicySwarm: MysqlStartRestartPolicySwarm$Outbound | null;
  rollbackConfigSwarm: MysqlStartRollbackConfigSwarm$Outbound | null;
  server: MysqlStartServer$Outbound | null;
  serverId: string | null;
  updateConfigSwarm: MysqlStartUpdateConfigSwarm$Outbound | null;
};

/** @internal */
export const MysqlStartResponseBody$outboundSchema: z.ZodType<
  MysqlStartResponseBody$Outbound,
  z.ZodTypeDef,
  MysqlStartResponseBody
> = z.object({
  appName: z.string(),
  applicationStatus: MysqlStartApplicationStatus$outboundSchema,
  backups: z.array(z.lazy(() => MysqlStartBackup$outboundSchema)),
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databaseName: z.string(),
  databasePassword: z.string(),
  databaseRootPassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environment: z.lazy(() => MysqlStartEnvironment$outboundSchema),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.lazy(() => MysqlStartHealthCheckSwarm$outboundSchema),
  ),
  labelsSwarm: z.nullable(z.record(z.string())),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(z.lazy(() => MysqlStartModeSwarm$outboundSchema)),
  mounts: z.array(z.lazy(() => MysqlStartMount$outboundSchema)),
  mysqlId: z.string(),
  name: z.string(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MysqlStartNetworkSwarm$outboundSchema)),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => MysqlStartPlacementSwarm$outboundSchema),
  ),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MysqlStartRestartPolicySwarm$outboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MysqlStartRollbackConfigSwarm$outboundSchema),
  ),
  server: z.nullable(z.lazy(() => MysqlStartServer$outboundSchema)),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MysqlStartUpdateConfigSwarm$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartResponseBody$ {
  /** @deprecated use `MysqlStartResponseBody$inboundSchema` instead. */
  export const inboundSchema = MysqlStartResponseBody$inboundSchema;
  /** @deprecated use `MysqlStartResponseBody$outboundSchema` instead. */
  export const outboundSchema = MysqlStartResponseBody$outboundSchema;
  /** @deprecated use `MysqlStartResponseBody$Outbound` instead. */
  export type Outbound = MysqlStartResponseBody$Outbound;
}

export function mysqlStartResponseBodyToJSON(
  mysqlStartResponseBody: MysqlStartResponseBody,
): string {
  return JSON.stringify(
    MysqlStartResponseBody$outboundSchema.parse(mysqlStartResponseBody),
  );
}

export function mysqlStartResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartResponseBody' from JSON`,
  );
}

/** @internal */
export const MysqlStartResponse$inboundSchema: z.ZodType<
  MysqlStartResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => MysqlStartResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type MysqlStartResponse$Outbound =
  | MysqlStartResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const MysqlStartResponse$outboundSchema: z.ZodType<
  MysqlStartResponse$Outbound,
  z.ZodTypeDef,
  MysqlStartResponse
> = z.union([
  z.lazy(() => MysqlStartResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlStartResponse$ {
  /** @deprecated use `MysqlStartResponse$inboundSchema` instead. */
  export const inboundSchema = MysqlStartResponse$inboundSchema;
  /** @deprecated use `MysqlStartResponse$outboundSchema` instead. */
  export const outboundSchema = MysqlStartResponse$outboundSchema;
  /** @deprecated use `MysqlStartResponse$Outbound` instead. */
  export type Outbound = MysqlStartResponse$Outbound;
}

export function mysqlStartResponseToJSON(
  mysqlStartResponse: MysqlStartResponse,
): string {
  return JSON.stringify(
    MysqlStartResponse$outboundSchema.parse(mysqlStartResponse),
  );
}

export function mysqlStartResponseFromJSON(
  jsonString: string,
): SafeParseResult<MysqlStartResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlStartResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlStartResponse' from JSON`,
  );
}
