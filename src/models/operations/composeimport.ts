/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComposeImportSecurity = {
  authorization: string;
};

export type ComposeImportRequest = {
  base64: string;
  composeId: string;
};

/** @internal */
export const ComposeImportSecurity$inboundSchema: z.ZodType<
  ComposeImportSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type ComposeImportSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const ComposeImportSecurity$outboundSchema: z.ZodType<
  ComposeImportSecurity$Outbound,
  z.ZodTypeDef,
  ComposeImportSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComposeImportSecurity$ {
  /** @deprecated use `ComposeImportSecurity$inboundSchema` instead. */
  export const inboundSchema = ComposeImportSecurity$inboundSchema;
  /** @deprecated use `ComposeImportSecurity$outboundSchema` instead. */
  export const outboundSchema = ComposeImportSecurity$outboundSchema;
  /** @deprecated use `ComposeImportSecurity$Outbound` instead. */
  export type Outbound = ComposeImportSecurity$Outbound;
}

export function composeImportSecurityToJSON(
  composeImportSecurity: ComposeImportSecurity,
): string {
  return JSON.stringify(
    ComposeImportSecurity$outboundSchema.parse(composeImportSecurity),
  );
}

export function composeImportSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ComposeImportSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComposeImportSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComposeImportSecurity' from JSON`,
  );
}

/** @internal */
export const ComposeImportRequest$inboundSchema: z.ZodType<
  ComposeImportRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  base64: z.string(),
  composeId: z.string(),
});

/** @internal */
export type ComposeImportRequest$Outbound = {
  base64: string;
  composeId: string;
};

/** @internal */
export const ComposeImportRequest$outboundSchema: z.ZodType<
  ComposeImportRequest$Outbound,
  z.ZodTypeDef,
  ComposeImportRequest
> = z.object({
  base64: z.string(),
  composeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComposeImportRequest$ {
  /** @deprecated use `ComposeImportRequest$inboundSchema` instead. */
  export const inboundSchema = ComposeImportRequest$inboundSchema;
  /** @deprecated use `ComposeImportRequest$outboundSchema` instead. */
  export const outboundSchema = ComposeImportRequest$outboundSchema;
  /** @deprecated use `ComposeImportRequest$Outbound` instead. */
  export type Outbound = ComposeImportRequest$Outbound;
}

export function composeImportRequestToJSON(
  composeImportRequest: ComposeImportRequest,
): string {
  return JSON.stringify(
    ComposeImportRequest$outboundSchema.parse(composeImportRequest),
  );
}

export function composeImportRequestFromJSON(
  jsonString: string,
): SafeParseResult<ComposeImportRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComposeImportRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComposeImportRequest' from JSON`,
  );
}
