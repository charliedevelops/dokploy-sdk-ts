/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PostgresRebuildSecurity = {
  authorization: string;
};

export type PostgresRebuildRequest = {
  postgresId: string;
};

export type PostgresRebuildResponse = models.ErrorT | boolean;

/** @internal */
export const PostgresRebuildSecurity$inboundSchema: z.ZodType<
  PostgresRebuildSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type PostgresRebuildSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const PostgresRebuildSecurity$outboundSchema: z.ZodType<
  PostgresRebuildSecurity$Outbound,
  z.ZodTypeDef,
  PostgresRebuildSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresRebuildSecurity$ {
  /** @deprecated use `PostgresRebuildSecurity$inboundSchema` instead. */
  export const inboundSchema = PostgresRebuildSecurity$inboundSchema;
  /** @deprecated use `PostgresRebuildSecurity$outboundSchema` instead. */
  export const outboundSchema = PostgresRebuildSecurity$outboundSchema;
  /** @deprecated use `PostgresRebuildSecurity$Outbound` instead. */
  export type Outbound = PostgresRebuildSecurity$Outbound;
}

export function postgresRebuildSecurityToJSON(
  postgresRebuildSecurity: PostgresRebuildSecurity,
): string {
  return JSON.stringify(
    PostgresRebuildSecurity$outboundSchema.parse(postgresRebuildSecurity),
  );
}

export function postgresRebuildSecurityFromJSON(
  jsonString: string,
): SafeParseResult<PostgresRebuildSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresRebuildSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresRebuildSecurity' from JSON`,
  );
}

/** @internal */
export const PostgresRebuildRequest$inboundSchema: z.ZodType<
  PostgresRebuildRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  postgresId: z.string(),
});

/** @internal */
export type PostgresRebuildRequest$Outbound = {
  postgresId: string;
};

/** @internal */
export const PostgresRebuildRequest$outboundSchema: z.ZodType<
  PostgresRebuildRequest$Outbound,
  z.ZodTypeDef,
  PostgresRebuildRequest
> = z.object({
  postgresId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresRebuildRequest$ {
  /** @deprecated use `PostgresRebuildRequest$inboundSchema` instead. */
  export const inboundSchema = PostgresRebuildRequest$inboundSchema;
  /** @deprecated use `PostgresRebuildRequest$outboundSchema` instead. */
  export const outboundSchema = PostgresRebuildRequest$outboundSchema;
  /** @deprecated use `PostgresRebuildRequest$Outbound` instead. */
  export type Outbound = PostgresRebuildRequest$Outbound;
}

export function postgresRebuildRequestToJSON(
  postgresRebuildRequest: PostgresRebuildRequest,
): string {
  return JSON.stringify(
    PostgresRebuildRequest$outboundSchema.parse(postgresRebuildRequest),
  );
}

export function postgresRebuildRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostgresRebuildRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresRebuildRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresRebuildRequest' from JSON`,
  );
}

/** @internal */
export const PostgresRebuildResponse$inboundSchema: z.ZodType<
  PostgresRebuildResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.boolean()]);

/** @internal */
export type PostgresRebuildResponse$Outbound = models.ErrorT$Outbound | boolean;

/** @internal */
export const PostgresRebuildResponse$outboundSchema: z.ZodType<
  PostgresRebuildResponse$Outbound,
  z.ZodTypeDef,
  PostgresRebuildResponse
> = z.union([models.ErrorT$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresRebuildResponse$ {
  /** @deprecated use `PostgresRebuildResponse$inboundSchema` instead. */
  export const inboundSchema = PostgresRebuildResponse$inboundSchema;
  /** @deprecated use `PostgresRebuildResponse$outboundSchema` instead. */
  export const outboundSchema = PostgresRebuildResponse$outboundSchema;
  /** @deprecated use `PostgresRebuildResponse$Outbound` instead. */
  export type Outbound = PostgresRebuildResponse$Outbound;
}

export function postgresRebuildResponseToJSON(
  postgresRebuildResponse: PostgresRebuildResponse,
): string {
  return JSON.stringify(
    PostgresRebuildResponse$outboundSchema.parse(postgresRebuildResponse),
  );
}

export function postgresRebuildResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostgresRebuildResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresRebuildResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresRebuildResponse' from JSON`,
  );
}
