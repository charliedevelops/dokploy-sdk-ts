/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type RedisRebuildSecurity = {
  authorization: string;
};

export type RedisRebuildRequest = {
  redisId: string;
};

export type RedisRebuildResponse = models.ErrorT | boolean;

/** @internal */
export const RedisRebuildSecurity$inboundSchema: z.ZodType<
  RedisRebuildSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type RedisRebuildSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const RedisRebuildSecurity$outboundSchema: z.ZodType<
  RedisRebuildSecurity$Outbound,
  z.ZodTypeDef,
  RedisRebuildSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRebuildSecurity$ {
  /** @deprecated use `RedisRebuildSecurity$inboundSchema` instead. */
  export const inboundSchema = RedisRebuildSecurity$inboundSchema;
  /** @deprecated use `RedisRebuildSecurity$outboundSchema` instead. */
  export const outboundSchema = RedisRebuildSecurity$outboundSchema;
  /** @deprecated use `RedisRebuildSecurity$Outbound` instead. */
  export type Outbound = RedisRebuildSecurity$Outbound;
}

export function redisRebuildSecurityToJSON(
  redisRebuildSecurity: RedisRebuildSecurity,
): string {
  return JSON.stringify(
    RedisRebuildSecurity$outboundSchema.parse(redisRebuildSecurity),
  );
}

export function redisRebuildSecurityFromJSON(
  jsonString: string,
): SafeParseResult<RedisRebuildSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisRebuildSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisRebuildSecurity' from JSON`,
  );
}

/** @internal */
export const RedisRebuildRequest$inboundSchema: z.ZodType<
  RedisRebuildRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  redisId: z.string(),
});

/** @internal */
export type RedisRebuildRequest$Outbound = {
  redisId: string;
};

/** @internal */
export const RedisRebuildRequest$outboundSchema: z.ZodType<
  RedisRebuildRequest$Outbound,
  z.ZodTypeDef,
  RedisRebuildRequest
> = z.object({
  redisId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRebuildRequest$ {
  /** @deprecated use `RedisRebuildRequest$inboundSchema` instead. */
  export const inboundSchema = RedisRebuildRequest$inboundSchema;
  /** @deprecated use `RedisRebuildRequest$outboundSchema` instead. */
  export const outboundSchema = RedisRebuildRequest$outboundSchema;
  /** @deprecated use `RedisRebuildRequest$Outbound` instead. */
  export type Outbound = RedisRebuildRequest$Outbound;
}

export function redisRebuildRequestToJSON(
  redisRebuildRequest: RedisRebuildRequest,
): string {
  return JSON.stringify(
    RedisRebuildRequest$outboundSchema.parse(redisRebuildRequest),
  );
}

export function redisRebuildRequestFromJSON(
  jsonString: string,
): SafeParseResult<RedisRebuildRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisRebuildRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisRebuildRequest' from JSON`,
  );
}

/** @internal */
export const RedisRebuildResponse$inboundSchema: z.ZodType<
  RedisRebuildResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.boolean()]);

/** @internal */
export type RedisRebuildResponse$Outbound = models.ErrorT$Outbound | boolean;

/** @internal */
export const RedisRebuildResponse$outboundSchema: z.ZodType<
  RedisRebuildResponse$Outbound,
  z.ZodTypeDef,
  RedisRebuildResponse
> = z.union([models.ErrorT$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisRebuildResponse$ {
  /** @deprecated use `RedisRebuildResponse$inboundSchema` instead. */
  export const inboundSchema = RedisRebuildResponse$inboundSchema;
  /** @deprecated use `RedisRebuildResponse$outboundSchema` instead. */
  export const outboundSchema = RedisRebuildResponse$outboundSchema;
  /** @deprecated use `RedisRebuildResponse$Outbound` instead. */
  export type Outbound = RedisRebuildResponse$Outbound;
}

export function redisRebuildResponseToJSON(
  redisRebuildResponse: RedisRebuildResponse,
): string {
  return JSON.stringify(
    RedisRebuildResponse$outboundSchema.parse(redisRebuildResponse),
  );
}

export function redisRebuildResponseFromJSON(
  jsonString: string,
): SafeParseResult<RedisRebuildResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisRebuildResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisRebuildResponse' from JSON`,
  );
}
