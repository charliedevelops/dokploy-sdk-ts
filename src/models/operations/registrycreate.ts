/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const RegistryCreateRegistryType = {
  Cloud: "cloud",
} as const;
export type RegistryCreateRegistryType = ClosedEnum<
  typeof RegistryCreateRegistryType
>;

export type RegistryCreateRequest = {
  imagePrefix: string | null;
  password: string;
  registryName: string;
  registryType: RegistryCreateRegistryType;
  registryUrl: string;
  serverId?: string | undefined;
  username: string;
};

/** @internal */
export const RegistryCreateRegistryType$inboundSchema: z.ZodNativeEnum<
  typeof RegistryCreateRegistryType
> = z.nativeEnum(RegistryCreateRegistryType);

/** @internal */
export const RegistryCreateRegistryType$outboundSchema: z.ZodNativeEnum<
  typeof RegistryCreateRegistryType
> = RegistryCreateRegistryType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegistryCreateRegistryType$ {
  /** @deprecated use `RegistryCreateRegistryType$inboundSchema` instead. */
  export const inboundSchema = RegistryCreateRegistryType$inboundSchema;
  /** @deprecated use `RegistryCreateRegistryType$outboundSchema` instead. */
  export const outboundSchema = RegistryCreateRegistryType$outboundSchema;
}

/** @internal */
export const RegistryCreateRequest$inboundSchema: z.ZodType<
  RegistryCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  imagePrefix: z.nullable(z.string()),
  password: z.string(),
  registryName: z.string(),
  registryType: RegistryCreateRegistryType$inboundSchema,
  registryUrl: z.string(),
  serverId: z.string().optional(),
  username: z.string(),
});

/** @internal */
export type RegistryCreateRequest$Outbound = {
  imagePrefix: string | null;
  password: string;
  registryName: string;
  registryType: string;
  registryUrl: string;
  serverId?: string | undefined;
  username: string;
};

/** @internal */
export const RegistryCreateRequest$outboundSchema: z.ZodType<
  RegistryCreateRequest$Outbound,
  z.ZodTypeDef,
  RegistryCreateRequest
> = z.object({
  imagePrefix: z.nullable(z.string()),
  password: z.string(),
  registryName: z.string(),
  registryType: RegistryCreateRegistryType$outboundSchema,
  registryUrl: z.string(),
  serverId: z.string().optional(),
  username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegistryCreateRequest$ {
  /** @deprecated use `RegistryCreateRequest$inboundSchema` instead. */
  export const inboundSchema = RegistryCreateRequest$inboundSchema;
  /** @deprecated use `RegistryCreateRequest$outboundSchema` instead. */
  export const outboundSchema = RegistryCreateRequest$outboundSchema;
  /** @deprecated use `RegistryCreateRequest$Outbound` instead. */
  export type Outbound = RegistryCreateRequest$Outbound;
}

export function registryCreateRequestToJSON(
  registryCreateRequest: RegistryCreateRequest,
): string {
  return JSON.stringify(
    RegistryCreateRequest$outboundSchema.parse(registryCreateRequest),
  );
}

export function registryCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<RegistryCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RegistryCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RegistryCreateRequest' from JSON`,
  );
}
