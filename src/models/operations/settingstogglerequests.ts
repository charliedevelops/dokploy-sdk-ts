/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SettingsToggleRequestsSecurity = {
  authorization: string;
};

export type SettingsToggleRequestsRequest = {
  enable: boolean;
};

/** @internal */
export const SettingsToggleRequestsSecurity$inboundSchema: z.ZodType<
  SettingsToggleRequestsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type SettingsToggleRequestsSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const SettingsToggleRequestsSecurity$outboundSchema: z.ZodType<
  SettingsToggleRequestsSecurity$Outbound,
  z.ZodTypeDef,
  SettingsToggleRequestsSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SettingsToggleRequestsSecurity$ {
  /** @deprecated use `SettingsToggleRequestsSecurity$inboundSchema` instead. */
  export const inboundSchema = SettingsToggleRequestsSecurity$inboundSchema;
  /** @deprecated use `SettingsToggleRequestsSecurity$outboundSchema` instead. */
  export const outboundSchema = SettingsToggleRequestsSecurity$outboundSchema;
  /** @deprecated use `SettingsToggleRequestsSecurity$Outbound` instead. */
  export type Outbound = SettingsToggleRequestsSecurity$Outbound;
}

export function settingsToggleRequestsSecurityToJSON(
  settingsToggleRequestsSecurity: SettingsToggleRequestsSecurity,
): string {
  return JSON.stringify(
    SettingsToggleRequestsSecurity$outboundSchema.parse(
      settingsToggleRequestsSecurity,
    ),
  );
}

export function settingsToggleRequestsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<SettingsToggleRequestsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SettingsToggleRequestsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SettingsToggleRequestsSecurity' from JSON`,
  );
}

/** @internal */
export const SettingsToggleRequestsRequest$inboundSchema: z.ZodType<
  SettingsToggleRequestsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  enable: z.boolean(),
});

/** @internal */
export type SettingsToggleRequestsRequest$Outbound = {
  enable: boolean;
};

/** @internal */
export const SettingsToggleRequestsRequest$outboundSchema: z.ZodType<
  SettingsToggleRequestsRequest$Outbound,
  z.ZodTypeDef,
  SettingsToggleRequestsRequest
> = z.object({
  enable: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SettingsToggleRequestsRequest$ {
  /** @deprecated use `SettingsToggleRequestsRequest$inboundSchema` instead. */
  export const inboundSchema = SettingsToggleRequestsRequest$inboundSchema;
  /** @deprecated use `SettingsToggleRequestsRequest$outboundSchema` instead. */
  export const outboundSchema = SettingsToggleRequestsRequest$outboundSchema;
  /** @deprecated use `SettingsToggleRequestsRequest$Outbound` instead. */
  export type Outbound = SettingsToggleRequestsRequest$Outbound;
}

export function settingsToggleRequestsRequestToJSON(
  settingsToggleRequestsRequest: SettingsToggleRequestsRequest,
): string {
  return JSON.stringify(
    SettingsToggleRequestsRequest$outboundSchema.parse(
      settingsToggleRequestsRequest,
    ),
  );
}

export function settingsToggleRequestsRequestFromJSON(
  jsonString: string,
): SafeParseResult<SettingsToggleRequestsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SettingsToggleRequestsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SettingsToggleRequestsRequest' from JSON`,
  );
}
