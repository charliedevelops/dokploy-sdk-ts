/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type RedirectsCreateSecurity = {
  authorization: string;
};

export type RedirectsCreateRequest = {
  regex: string;
  replacement: string;
  permanent: boolean;
  applicationId: string;
};

/**
 * Successful response
 */
export type RedirectsCreateResponseBody = {
  redirectId: string;
  regex: string;
  replacement: string;
  permanent: boolean;
  uniqueConfigKey: number;
  createdAt: string;
  applicationId: string;
};

export type RedirectsCreateResponse =
  | RedirectsCreateResponseBody
  | models.ErrorT;

/** @internal */
export const RedirectsCreateSecurity$inboundSchema: z.ZodType<
  RedirectsCreateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type RedirectsCreateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const RedirectsCreateSecurity$outboundSchema: z.ZodType<
  RedirectsCreateSecurity$Outbound,
  z.ZodTypeDef,
  RedirectsCreateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedirectsCreateSecurity$ {
  /** @deprecated use `RedirectsCreateSecurity$inboundSchema` instead. */
  export const inboundSchema = RedirectsCreateSecurity$inboundSchema;
  /** @deprecated use `RedirectsCreateSecurity$outboundSchema` instead. */
  export const outboundSchema = RedirectsCreateSecurity$outboundSchema;
  /** @deprecated use `RedirectsCreateSecurity$Outbound` instead. */
  export type Outbound = RedirectsCreateSecurity$Outbound;
}

export function redirectsCreateSecurityToJSON(
  redirectsCreateSecurity: RedirectsCreateSecurity,
): string {
  return JSON.stringify(
    RedirectsCreateSecurity$outboundSchema.parse(redirectsCreateSecurity),
  );
}

export function redirectsCreateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<RedirectsCreateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedirectsCreateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedirectsCreateSecurity' from JSON`,
  );
}

/** @internal */
export const RedirectsCreateRequest$inboundSchema: z.ZodType<
  RedirectsCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  regex: z.string(),
  replacement: z.string(),
  permanent: z.boolean(),
  applicationId: z.string(),
});

/** @internal */
export type RedirectsCreateRequest$Outbound = {
  regex: string;
  replacement: string;
  permanent: boolean;
  applicationId: string;
};

/** @internal */
export const RedirectsCreateRequest$outboundSchema: z.ZodType<
  RedirectsCreateRequest$Outbound,
  z.ZodTypeDef,
  RedirectsCreateRequest
> = z.object({
  regex: z.string(),
  replacement: z.string(),
  permanent: z.boolean(),
  applicationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedirectsCreateRequest$ {
  /** @deprecated use `RedirectsCreateRequest$inboundSchema` instead. */
  export const inboundSchema = RedirectsCreateRequest$inboundSchema;
  /** @deprecated use `RedirectsCreateRequest$outboundSchema` instead. */
  export const outboundSchema = RedirectsCreateRequest$outboundSchema;
  /** @deprecated use `RedirectsCreateRequest$Outbound` instead. */
  export type Outbound = RedirectsCreateRequest$Outbound;
}

export function redirectsCreateRequestToJSON(
  redirectsCreateRequest: RedirectsCreateRequest,
): string {
  return JSON.stringify(
    RedirectsCreateRequest$outboundSchema.parse(redirectsCreateRequest),
  );
}

export function redirectsCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<RedirectsCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedirectsCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedirectsCreateRequest' from JSON`,
  );
}

/** @internal */
export const RedirectsCreateResponseBody$inboundSchema: z.ZodType<
  RedirectsCreateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  redirectId: z.string(),
  regex: z.string(),
  replacement: z.string(),
  permanent: z.boolean(),
  uniqueConfigKey: z.number(),
  createdAt: z.string(),
  applicationId: z.string(),
});

/** @internal */
export type RedirectsCreateResponseBody$Outbound = {
  redirectId: string;
  regex: string;
  replacement: string;
  permanent: boolean;
  uniqueConfigKey: number;
  createdAt: string;
  applicationId: string;
};

/** @internal */
export const RedirectsCreateResponseBody$outboundSchema: z.ZodType<
  RedirectsCreateResponseBody$Outbound,
  z.ZodTypeDef,
  RedirectsCreateResponseBody
> = z.object({
  redirectId: z.string(),
  regex: z.string(),
  replacement: z.string(),
  permanent: z.boolean(),
  uniqueConfigKey: z.number(),
  createdAt: z.string(),
  applicationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedirectsCreateResponseBody$ {
  /** @deprecated use `RedirectsCreateResponseBody$inboundSchema` instead. */
  export const inboundSchema = RedirectsCreateResponseBody$inboundSchema;
  /** @deprecated use `RedirectsCreateResponseBody$outboundSchema` instead. */
  export const outboundSchema = RedirectsCreateResponseBody$outboundSchema;
  /** @deprecated use `RedirectsCreateResponseBody$Outbound` instead. */
  export type Outbound = RedirectsCreateResponseBody$Outbound;
}

export function redirectsCreateResponseBodyToJSON(
  redirectsCreateResponseBody: RedirectsCreateResponseBody,
): string {
  return JSON.stringify(
    RedirectsCreateResponseBody$outboundSchema.parse(
      redirectsCreateResponseBody,
    ),
  );
}

export function redirectsCreateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RedirectsCreateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedirectsCreateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedirectsCreateResponseBody' from JSON`,
  );
}

/** @internal */
export const RedirectsCreateResponse$inboundSchema: z.ZodType<
  RedirectsCreateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => RedirectsCreateResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type RedirectsCreateResponse$Outbound =
  | RedirectsCreateResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const RedirectsCreateResponse$outboundSchema: z.ZodType<
  RedirectsCreateResponse$Outbound,
  z.ZodTypeDef,
  RedirectsCreateResponse
> = z.union([
  z.lazy(() => RedirectsCreateResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedirectsCreateResponse$ {
  /** @deprecated use `RedirectsCreateResponse$inboundSchema` instead. */
  export const inboundSchema = RedirectsCreateResponse$inboundSchema;
  /** @deprecated use `RedirectsCreateResponse$outboundSchema` instead. */
  export const outboundSchema = RedirectsCreateResponse$outboundSchema;
  /** @deprecated use `RedirectsCreateResponse$Outbound` instead. */
  export type Outbound = RedirectsCreateResponse$Outbound;
}

export function redirectsCreateResponseToJSON(
  redirectsCreateResponse: RedirectsCreateResponse,
): string {
  return JSON.stringify(
    RedirectsCreateResponse$outboundSchema.parse(redirectsCreateResponse),
  );
}

export function redirectsCreateResponseFromJSON(
  jsonString: string,
): SafeParseResult<RedirectsCreateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedirectsCreateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedirectsCreateResponse' from JSON`,
  );
}
