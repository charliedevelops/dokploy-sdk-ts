/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GithubGetGithubRepositoriesRequest = {
  githubId: string;
};

/** @internal */
export const GithubGetGithubRepositoriesRequest$inboundSchema: z.ZodType<
  GithubGetGithubRepositoriesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  githubId: z.string(),
});

/** @internal */
export type GithubGetGithubRepositoriesRequest$Outbound = {
  githubId: string;
};

/** @internal */
export const GithubGetGithubRepositoriesRequest$outboundSchema: z.ZodType<
  GithubGetGithubRepositoriesRequest$Outbound,
  z.ZodTypeDef,
  GithubGetGithubRepositoriesRequest
> = z.object({
  githubId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GithubGetGithubRepositoriesRequest$ {
  /** @deprecated use `GithubGetGithubRepositoriesRequest$inboundSchema` instead. */
  export const inboundSchema = GithubGetGithubRepositoriesRequest$inboundSchema;
  /** @deprecated use `GithubGetGithubRepositoriesRequest$outboundSchema` instead. */
  export const outboundSchema =
    GithubGetGithubRepositoriesRequest$outboundSchema;
  /** @deprecated use `GithubGetGithubRepositoriesRequest$Outbound` instead. */
  export type Outbound = GithubGetGithubRepositoriesRequest$Outbound;
}

export function githubGetGithubRepositoriesRequestToJSON(
  githubGetGithubRepositoriesRequest: GithubGetGithubRepositoriesRequest,
): string {
  return JSON.stringify(
    GithubGetGithubRepositoriesRequest$outboundSchema.parse(
      githubGetGithubRepositoriesRequest,
    ),
  );
}

export function githubGetGithubRepositoriesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GithubGetGithubRepositoriesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GithubGetGithubRepositoriesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GithubGetGithubRepositoriesRequest' from JSON`,
  );
}
