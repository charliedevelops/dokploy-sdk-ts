/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PortCreateSecurity = {
  authorization: string;
};

export const PortCreatePublishModeRequest = {
  Ingress: "ingress",
  Host: "host",
} as const;
export type PortCreatePublishModeRequest = ClosedEnum<
  typeof PortCreatePublishModeRequest
>;

export const PortCreateProtocolRequest = {
  Tcp: "tcp",
  Udp: "udp",
} as const;
export type PortCreateProtocolRequest = ClosedEnum<
  typeof PortCreateProtocolRequest
>;

export type PortCreateRequest = {
  publishedPort: number;
  publishMode?: PortCreatePublishModeRequest | undefined;
  targetPort: number;
  protocol?: PortCreateProtocolRequest | undefined;
  applicationId: string;
};

export const PortCreatePublishModeResponse = {
  Ingress: "ingress",
  Host: "host",
} as const;
export type PortCreatePublishModeResponse = ClosedEnum<
  typeof PortCreatePublishModeResponse
>;

export const PortCreateProtocolResponse = {
  Tcp: "tcp",
  Udp: "udp",
} as const;
export type PortCreateProtocolResponse = ClosedEnum<
  typeof PortCreateProtocolResponse
>;

/**
 * Successful response
 */
export type PortCreateResponseBody = {
  portId: string;
  publishedPort: number;
  publishMode: PortCreatePublishModeResponse;
  targetPort: number;
  protocol: PortCreateProtocolResponse;
  applicationId: string;
};

export type PortCreateResponse = PortCreateResponseBody | models.ErrorT;

/** @internal */
export const PortCreateSecurity$inboundSchema: z.ZodType<
  PortCreateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type PortCreateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const PortCreateSecurity$outboundSchema: z.ZodType<
  PortCreateSecurity$Outbound,
  z.ZodTypeDef,
  PortCreateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortCreateSecurity$ {
  /** @deprecated use `PortCreateSecurity$inboundSchema` instead. */
  export const inboundSchema = PortCreateSecurity$inboundSchema;
  /** @deprecated use `PortCreateSecurity$outboundSchema` instead. */
  export const outboundSchema = PortCreateSecurity$outboundSchema;
  /** @deprecated use `PortCreateSecurity$Outbound` instead. */
  export type Outbound = PortCreateSecurity$Outbound;
}

export function portCreateSecurityToJSON(
  portCreateSecurity: PortCreateSecurity,
): string {
  return JSON.stringify(
    PortCreateSecurity$outboundSchema.parse(portCreateSecurity),
  );
}

export function portCreateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<PortCreateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PortCreateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PortCreateSecurity' from JSON`,
  );
}

/** @internal */
export const PortCreatePublishModeRequest$inboundSchema: z.ZodNativeEnum<
  typeof PortCreatePublishModeRequest
> = z.nativeEnum(PortCreatePublishModeRequest);

/** @internal */
export const PortCreatePublishModeRequest$outboundSchema: z.ZodNativeEnum<
  typeof PortCreatePublishModeRequest
> = PortCreatePublishModeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortCreatePublishModeRequest$ {
  /** @deprecated use `PortCreatePublishModeRequest$inboundSchema` instead. */
  export const inboundSchema = PortCreatePublishModeRequest$inboundSchema;
  /** @deprecated use `PortCreatePublishModeRequest$outboundSchema` instead. */
  export const outboundSchema = PortCreatePublishModeRequest$outboundSchema;
}

/** @internal */
export const PortCreateProtocolRequest$inboundSchema: z.ZodNativeEnum<
  typeof PortCreateProtocolRequest
> = z.nativeEnum(PortCreateProtocolRequest);

/** @internal */
export const PortCreateProtocolRequest$outboundSchema: z.ZodNativeEnum<
  typeof PortCreateProtocolRequest
> = PortCreateProtocolRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortCreateProtocolRequest$ {
  /** @deprecated use `PortCreateProtocolRequest$inboundSchema` instead. */
  export const inboundSchema = PortCreateProtocolRequest$inboundSchema;
  /** @deprecated use `PortCreateProtocolRequest$outboundSchema` instead. */
  export const outboundSchema = PortCreateProtocolRequest$outboundSchema;
}

/** @internal */
export const PortCreateRequest$inboundSchema: z.ZodType<
  PortCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  publishedPort: z.number(),
  publishMode: PortCreatePublishModeRequest$inboundSchema.default("ingress"),
  targetPort: z.number(),
  protocol: PortCreateProtocolRequest$inboundSchema.default("tcp"),
  applicationId: z.string(),
});

/** @internal */
export type PortCreateRequest$Outbound = {
  publishedPort: number;
  publishMode: string;
  targetPort: number;
  protocol: string;
  applicationId: string;
};

/** @internal */
export const PortCreateRequest$outboundSchema: z.ZodType<
  PortCreateRequest$Outbound,
  z.ZodTypeDef,
  PortCreateRequest
> = z.object({
  publishedPort: z.number(),
  publishMode: PortCreatePublishModeRequest$outboundSchema.default("ingress"),
  targetPort: z.number(),
  protocol: PortCreateProtocolRequest$outboundSchema.default("tcp"),
  applicationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortCreateRequest$ {
  /** @deprecated use `PortCreateRequest$inboundSchema` instead. */
  export const inboundSchema = PortCreateRequest$inboundSchema;
  /** @deprecated use `PortCreateRequest$outboundSchema` instead. */
  export const outboundSchema = PortCreateRequest$outboundSchema;
  /** @deprecated use `PortCreateRequest$Outbound` instead. */
  export type Outbound = PortCreateRequest$Outbound;
}

export function portCreateRequestToJSON(
  portCreateRequest: PortCreateRequest,
): string {
  return JSON.stringify(
    PortCreateRequest$outboundSchema.parse(portCreateRequest),
  );
}

export function portCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<PortCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PortCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PortCreateRequest' from JSON`,
  );
}

/** @internal */
export const PortCreatePublishModeResponse$inboundSchema: z.ZodNativeEnum<
  typeof PortCreatePublishModeResponse
> = z.nativeEnum(PortCreatePublishModeResponse);

/** @internal */
export const PortCreatePublishModeResponse$outboundSchema: z.ZodNativeEnum<
  typeof PortCreatePublishModeResponse
> = PortCreatePublishModeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortCreatePublishModeResponse$ {
  /** @deprecated use `PortCreatePublishModeResponse$inboundSchema` instead. */
  export const inboundSchema = PortCreatePublishModeResponse$inboundSchema;
  /** @deprecated use `PortCreatePublishModeResponse$outboundSchema` instead. */
  export const outboundSchema = PortCreatePublishModeResponse$outboundSchema;
}

/** @internal */
export const PortCreateProtocolResponse$inboundSchema: z.ZodNativeEnum<
  typeof PortCreateProtocolResponse
> = z.nativeEnum(PortCreateProtocolResponse);

/** @internal */
export const PortCreateProtocolResponse$outboundSchema: z.ZodNativeEnum<
  typeof PortCreateProtocolResponse
> = PortCreateProtocolResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortCreateProtocolResponse$ {
  /** @deprecated use `PortCreateProtocolResponse$inboundSchema` instead. */
  export const inboundSchema = PortCreateProtocolResponse$inboundSchema;
  /** @deprecated use `PortCreateProtocolResponse$outboundSchema` instead. */
  export const outboundSchema = PortCreateProtocolResponse$outboundSchema;
}

/** @internal */
export const PortCreateResponseBody$inboundSchema: z.ZodType<
  PortCreateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  portId: z.string(),
  publishedPort: z.number(),
  publishMode: PortCreatePublishModeResponse$inboundSchema,
  targetPort: z.number(),
  protocol: PortCreateProtocolResponse$inboundSchema,
  applicationId: z.string(),
});

/** @internal */
export type PortCreateResponseBody$Outbound = {
  portId: string;
  publishedPort: number;
  publishMode: string;
  targetPort: number;
  protocol: string;
  applicationId: string;
};

/** @internal */
export const PortCreateResponseBody$outboundSchema: z.ZodType<
  PortCreateResponseBody$Outbound,
  z.ZodTypeDef,
  PortCreateResponseBody
> = z.object({
  portId: z.string(),
  publishedPort: z.number(),
  publishMode: PortCreatePublishModeResponse$outboundSchema,
  targetPort: z.number(),
  protocol: PortCreateProtocolResponse$outboundSchema,
  applicationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortCreateResponseBody$ {
  /** @deprecated use `PortCreateResponseBody$inboundSchema` instead. */
  export const inboundSchema = PortCreateResponseBody$inboundSchema;
  /** @deprecated use `PortCreateResponseBody$outboundSchema` instead. */
  export const outboundSchema = PortCreateResponseBody$outboundSchema;
  /** @deprecated use `PortCreateResponseBody$Outbound` instead. */
  export type Outbound = PortCreateResponseBody$Outbound;
}

export function portCreateResponseBodyToJSON(
  portCreateResponseBody: PortCreateResponseBody,
): string {
  return JSON.stringify(
    PortCreateResponseBody$outboundSchema.parse(portCreateResponseBody),
  );
}

export function portCreateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PortCreateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PortCreateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PortCreateResponseBody' from JSON`,
  );
}

/** @internal */
export const PortCreateResponse$inboundSchema: z.ZodType<
  PortCreateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PortCreateResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type PortCreateResponse$Outbound =
  | PortCreateResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const PortCreateResponse$outboundSchema: z.ZodType<
  PortCreateResponse$Outbound,
  z.ZodTypeDef,
  PortCreateResponse
> = z.union([
  z.lazy(() => PortCreateResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortCreateResponse$ {
  /** @deprecated use `PortCreateResponse$inboundSchema` instead. */
  export const inboundSchema = PortCreateResponse$inboundSchema;
  /** @deprecated use `PortCreateResponse$outboundSchema` instead. */
  export const outboundSchema = PortCreateResponse$outboundSchema;
  /** @deprecated use `PortCreateResponse$Outbound` instead. */
  export type Outbound = PortCreateResponse$Outbound;
}

export function portCreateResponseToJSON(
  portCreateResponse: PortCreateResponse,
): string {
  return JSON.stringify(
    PortCreateResponse$outboundSchema.parse(portCreateResponse),
  );
}

export function portCreateResponseFromJSON(
  jsonString: string,
): SafeParseResult<PortCreateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PortCreateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PortCreateResponse' from JSON`,
  );
}
