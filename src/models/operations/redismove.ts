/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type RedisMoveSecurity = {
  authorization: string;
};

export type RedisMoveRequest = {
  redisId: string;
  targetEnvironmentId: string;
};

export const RedisMoveApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type RedisMoveApplicationStatus = ClosedEnum<
  typeof RedisMoveApplicationStatus
>;

export type RedisMoveHealthCheckSwarm = {
  interval?: number | undefined;
  retries?: number | undefined;
  startPeriod?: number | undefined;
  test?: Array<string> | undefined;
  timeout?: number | undefined;
};

export type RedisMoveGlobal = {};

export type RedisMoveGlobalJob = {};

export type RedisMoveReplicated = {
  replicas?: number | undefined;
};

export type RedisMoveReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type RedisMoveModeSwarm = {
  global?: RedisMoveGlobal | undefined;
  globalJob?: RedisMoveGlobalJob | undefined;
  replicated?: RedisMoveReplicated | undefined;
  replicatedJob?: RedisMoveReplicatedJob | undefined;
};

export type RedisMoveDriverOpts = {};

export type RedisMoveNetworkSwarm = {
  aliases?: Array<string> | undefined;
  driverOpts?: RedisMoveDriverOpts | undefined;
  target?: string | undefined;
};

export type RedisMovePlatform = {
  architecture: string;
  os: string;
};

export type RedisMoveSpread = {
  spreadDescriptor: string;
};

export type RedisMovePreference = {
  spread: RedisMoveSpread;
};

export type RedisMovePlacementSwarm = {
  constraints?: Array<string> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<RedisMovePlatform> | undefined;
  preferences?: Array<RedisMovePreference> | undefined;
};

export type RedisMoveRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type RedisMoveRollbackConfigSwarm = {
  delay?: number | undefined;
  failureAction?: string | undefined;
  maxFailureRatio?: number | undefined;
  monitor?: number | undefined;
  order: string;
  parallelism: number;
};

export type RedisMoveUpdateConfigSwarm = {
  delay?: number | undefined;
  failureAction?: string | undefined;
  maxFailureRatio?: number | undefined;
  monitor?: number | undefined;
  order: string;
  parallelism: number;
};

/**
 * Successful response
 */
export type RedisMoveResponseBody = {
  appName: string;
  applicationStatus: RedisMoveApplicationStatus;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databasePassword: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: RedisMoveHealthCheckSwarm | null;
  labelsSwarm: { [k: string]: string } | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: RedisMoveModeSwarm | null;
  name: string;
  networkSwarm: Array<RedisMoveNetworkSwarm> | null;
  placementSwarm: RedisMovePlacementSwarm | null;
  redisId: string;
  replicas: number;
  restartPolicySwarm: RedisMoveRestartPolicySwarm | null;
  rollbackConfigSwarm: RedisMoveRollbackConfigSwarm | null;
  serverId: string | null;
  updateConfigSwarm: RedisMoveUpdateConfigSwarm | null;
};

export type RedisMoveResponse = RedisMoveResponseBody | models.ErrorT;

/** @internal */
export const RedisMoveSecurity$inboundSchema: z.ZodType<
  RedisMoveSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type RedisMoveSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const RedisMoveSecurity$outboundSchema: z.ZodType<
  RedisMoveSecurity$Outbound,
  z.ZodTypeDef,
  RedisMoveSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisMoveSecurity$ {
  /** @deprecated use `RedisMoveSecurity$inboundSchema` instead. */
  export const inboundSchema = RedisMoveSecurity$inboundSchema;
  /** @deprecated use `RedisMoveSecurity$outboundSchema` instead. */
  export const outboundSchema = RedisMoveSecurity$outboundSchema;
  /** @deprecated use `RedisMoveSecurity$Outbound` instead. */
  export type Outbound = RedisMoveSecurity$Outbound;
}

export function redisMoveSecurityToJSON(
  redisMoveSecurity: RedisMoveSecurity,
): string {
  return JSON.stringify(
    RedisMoveSecurity$outboundSchema.parse(redisMoveSecurity),
  );
}

export function redisMoveSecurityFromJSON(
  jsonString: string,
): SafeParseResult<RedisMoveSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisMoveSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisMoveSecurity' from JSON`,
  );
}

/** @internal */
export const RedisMoveRequest$inboundSchema: z.ZodType<
  RedisMoveRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  redisId: z.string(),
  targetEnvironmentId: z.string(),
});

/** @internal */
export type RedisMoveRequest$Outbound = {
  redisId: string;
  targetEnvironmentId: string;
};

/** @internal */
export const RedisMoveRequest$outboundSchema: z.ZodType<
  RedisMoveRequest$Outbound,
  z.ZodTypeDef,
  RedisMoveRequest
> = z.object({
  redisId: z.string(),
  targetEnvironmentId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisMoveRequest$ {
  /** @deprecated use `RedisMoveRequest$inboundSchema` instead. */
  export const inboundSchema = RedisMoveRequest$inboundSchema;
  /** @deprecated use `RedisMoveRequest$outboundSchema` instead. */
  export const outboundSchema = RedisMoveRequest$outboundSchema;
  /** @deprecated use `RedisMoveRequest$Outbound` instead. */
  export type Outbound = RedisMoveRequest$Outbound;
}

export function redisMoveRequestToJSON(
  redisMoveRequest: RedisMoveRequest,
): string {
  return JSON.stringify(
    RedisMoveRequest$outboundSchema.parse(redisMoveRequest),
  );
}

export function redisMoveRequestFromJSON(
  jsonString: string,
): SafeParseResult<RedisMoveRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisMoveRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisMoveRequest' from JSON`,
  );
}

/** @internal */
export const RedisMoveApplicationStatus$inboundSchema: z.ZodNativeEnum<
  typeof RedisMoveApplicationStatus
> = z.nativeEnum(RedisMoveApplicationStatus);

/** @internal */
export const RedisMoveApplicationStatus$outboundSchema: z.ZodNativeEnum<
  typeof RedisMoveApplicationStatus
> = RedisMoveApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisMoveApplicationStatus$ {
  /** @deprecated use `RedisMoveApplicationStatus$inboundSchema` instead. */
  export const inboundSchema = RedisMoveApplicationStatus$inboundSchema;
  /** @deprecated use `RedisMoveApplicationStatus$outboundSchema` instead. */
  export const outboundSchema = RedisMoveApplicationStatus$outboundSchema;
}

/** @internal */
export const RedisMoveHealthCheckSwarm$inboundSchema: z.ZodType<
  RedisMoveHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Interval: z.number().optional(),
  Retries: z.number().optional(),
  StartPeriod: z.number().optional(),
  Test: z.array(z.string()).optional(),
  Timeout: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Interval": "interval",
    "Retries": "retries",
    "StartPeriod": "startPeriod",
    "Test": "test",
    "Timeout": "timeout",
  });
});

/** @internal */
export type RedisMoveHealthCheckSwarm$Outbound = {
  Interval?: number | undefined;
  Retries?: number | undefined;
  StartPeriod?: number | undefined;
  Test?: Array<string> | undefined;
  Timeout?: number | undefined;
};

/** @internal */
export const RedisMoveHealthCheckSwarm$outboundSchema: z.ZodType<
  RedisMoveHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  RedisMoveHealthCheckSwarm
> = z.object({
  interval: z.number().optional(),
  retries: z.number().optional(),
  startPeriod: z.number().optional(),
  test: z.array(z.string()).optional(),
  timeout: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    interval: "Interval",
    retries: "Retries",
    startPeriod: "StartPeriod",
    test: "Test",
    timeout: "Timeout",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisMoveHealthCheckSwarm$ {
  /** @deprecated use `RedisMoveHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisMoveHealthCheckSwarm$inboundSchema;
  /** @deprecated use `RedisMoveHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisMoveHealthCheckSwarm$outboundSchema;
  /** @deprecated use `RedisMoveHealthCheckSwarm$Outbound` instead. */
  export type Outbound = RedisMoveHealthCheckSwarm$Outbound;
}

export function redisMoveHealthCheckSwarmToJSON(
  redisMoveHealthCheckSwarm: RedisMoveHealthCheckSwarm,
): string {
  return JSON.stringify(
    RedisMoveHealthCheckSwarm$outboundSchema.parse(redisMoveHealthCheckSwarm),
  );
}

export function redisMoveHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisMoveHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisMoveHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisMoveHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const RedisMoveGlobal$inboundSchema: z.ZodType<
  RedisMoveGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RedisMoveGlobal$Outbound = {};

/** @internal */
export const RedisMoveGlobal$outboundSchema: z.ZodType<
  RedisMoveGlobal$Outbound,
  z.ZodTypeDef,
  RedisMoveGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisMoveGlobal$ {
  /** @deprecated use `RedisMoveGlobal$inboundSchema` instead. */
  export const inboundSchema = RedisMoveGlobal$inboundSchema;
  /** @deprecated use `RedisMoveGlobal$outboundSchema` instead. */
  export const outboundSchema = RedisMoveGlobal$outboundSchema;
  /** @deprecated use `RedisMoveGlobal$Outbound` instead. */
  export type Outbound = RedisMoveGlobal$Outbound;
}

export function redisMoveGlobalToJSON(
  redisMoveGlobal: RedisMoveGlobal,
): string {
  return JSON.stringify(RedisMoveGlobal$outboundSchema.parse(redisMoveGlobal));
}

export function redisMoveGlobalFromJSON(
  jsonString: string,
): SafeParseResult<RedisMoveGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisMoveGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisMoveGlobal' from JSON`,
  );
}

/** @internal */
export const RedisMoveGlobalJob$inboundSchema: z.ZodType<
  RedisMoveGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RedisMoveGlobalJob$Outbound = {};

/** @internal */
export const RedisMoveGlobalJob$outboundSchema: z.ZodType<
  RedisMoveGlobalJob$Outbound,
  z.ZodTypeDef,
  RedisMoveGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisMoveGlobalJob$ {
  /** @deprecated use `RedisMoveGlobalJob$inboundSchema` instead. */
  export const inboundSchema = RedisMoveGlobalJob$inboundSchema;
  /** @deprecated use `RedisMoveGlobalJob$outboundSchema` instead. */
  export const outboundSchema = RedisMoveGlobalJob$outboundSchema;
  /** @deprecated use `RedisMoveGlobalJob$Outbound` instead. */
  export type Outbound = RedisMoveGlobalJob$Outbound;
}

export function redisMoveGlobalJobToJSON(
  redisMoveGlobalJob: RedisMoveGlobalJob,
): string {
  return JSON.stringify(
    RedisMoveGlobalJob$outboundSchema.parse(redisMoveGlobalJob),
  );
}

export function redisMoveGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<RedisMoveGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisMoveGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisMoveGlobalJob' from JSON`,
  );
}

/** @internal */
export const RedisMoveReplicated$inboundSchema: z.ZodType<
  RedisMoveReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type RedisMoveReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const RedisMoveReplicated$outboundSchema: z.ZodType<
  RedisMoveReplicated$Outbound,
  z.ZodTypeDef,
  RedisMoveReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisMoveReplicated$ {
  /** @deprecated use `RedisMoveReplicated$inboundSchema` instead. */
  export const inboundSchema = RedisMoveReplicated$inboundSchema;
  /** @deprecated use `RedisMoveReplicated$outboundSchema` instead. */
  export const outboundSchema = RedisMoveReplicated$outboundSchema;
  /** @deprecated use `RedisMoveReplicated$Outbound` instead. */
  export type Outbound = RedisMoveReplicated$Outbound;
}

export function redisMoveReplicatedToJSON(
  redisMoveReplicated: RedisMoveReplicated,
): string {
  return JSON.stringify(
    RedisMoveReplicated$outboundSchema.parse(redisMoveReplicated),
  );
}

export function redisMoveReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<RedisMoveReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisMoveReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisMoveReplicated' from JSON`,
  );
}

/** @internal */
export const RedisMoveReplicatedJob$inboundSchema: z.ZodType<
  RedisMoveReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type RedisMoveReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const RedisMoveReplicatedJob$outboundSchema: z.ZodType<
  RedisMoveReplicatedJob$Outbound,
  z.ZodTypeDef,
  RedisMoveReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisMoveReplicatedJob$ {
  /** @deprecated use `RedisMoveReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = RedisMoveReplicatedJob$inboundSchema;
  /** @deprecated use `RedisMoveReplicatedJob$outboundSchema` instead. */
  export const outboundSchema = RedisMoveReplicatedJob$outboundSchema;
  /** @deprecated use `RedisMoveReplicatedJob$Outbound` instead. */
  export type Outbound = RedisMoveReplicatedJob$Outbound;
}

export function redisMoveReplicatedJobToJSON(
  redisMoveReplicatedJob: RedisMoveReplicatedJob,
): string {
  return JSON.stringify(
    RedisMoveReplicatedJob$outboundSchema.parse(redisMoveReplicatedJob),
  );
}

export function redisMoveReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<RedisMoveReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisMoveReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisMoveReplicatedJob' from JSON`,
  );
}

/** @internal */
export const RedisMoveModeSwarm$inboundSchema: z.ZodType<
  RedisMoveModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Global: z.lazy(() => RedisMoveGlobal$inboundSchema).optional(),
  GlobalJob: z.lazy(() => RedisMoveGlobalJob$inboundSchema).optional(),
  Replicated: z.lazy(() => RedisMoveReplicated$inboundSchema).optional(),
  ReplicatedJob: z.lazy(() => RedisMoveReplicatedJob$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Global": "global",
    "GlobalJob": "globalJob",
    "Replicated": "replicated",
    "ReplicatedJob": "replicatedJob",
  });
});

/** @internal */
export type RedisMoveModeSwarm$Outbound = {
  Global?: RedisMoveGlobal$Outbound | undefined;
  GlobalJob?: RedisMoveGlobalJob$Outbound | undefined;
  Replicated?: RedisMoveReplicated$Outbound | undefined;
  ReplicatedJob?: RedisMoveReplicatedJob$Outbound | undefined;
};

/** @internal */
export const RedisMoveModeSwarm$outboundSchema: z.ZodType<
  RedisMoveModeSwarm$Outbound,
  z.ZodTypeDef,
  RedisMoveModeSwarm
> = z.object({
  global: z.lazy(() => RedisMoveGlobal$outboundSchema).optional(),
  globalJob: z.lazy(() => RedisMoveGlobalJob$outboundSchema).optional(),
  replicated: z.lazy(() => RedisMoveReplicated$outboundSchema).optional(),
  replicatedJob: z.lazy(() => RedisMoveReplicatedJob$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    global: "Global",
    globalJob: "GlobalJob",
    replicated: "Replicated",
    replicatedJob: "ReplicatedJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisMoveModeSwarm$ {
  /** @deprecated use `RedisMoveModeSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisMoveModeSwarm$inboundSchema;
  /** @deprecated use `RedisMoveModeSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisMoveModeSwarm$outboundSchema;
  /** @deprecated use `RedisMoveModeSwarm$Outbound` instead. */
  export type Outbound = RedisMoveModeSwarm$Outbound;
}

export function redisMoveModeSwarmToJSON(
  redisMoveModeSwarm: RedisMoveModeSwarm,
): string {
  return JSON.stringify(
    RedisMoveModeSwarm$outboundSchema.parse(redisMoveModeSwarm),
  );
}

export function redisMoveModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisMoveModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisMoveModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisMoveModeSwarm' from JSON`,
  );
}

/** @internal */
export const RedisMoveDriverOpts$inboundSchema: z.ZodType<
  RedisMoveDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RedisMoveDriverOpts$Outbound = {};

/** @internal */
export const RedisMoveDriverOpts$outboundSchema: z.ZodType<
  RedisMoveDriverOpts$Outbound,
  z.ZodTypeDef,
  RedisMoveDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisMoveDriverOpts$ {
  /** @deprecated use `RedisMoveDriverOpts$inboundSchema` instead. */
  export const inboundSchema = RedisMoveDriverOpts$inboundSchema;
  /** @deprecated use `RedisMoveDriverOpts$outboundSchema` instead. */
  export const outboundSchema = RedisMoveDriverOpts$outboundSchema;
  /** @deprecated use `RedisMoveDriverOpts$Outbound` instead. */
  export type Outbound = RedisMoveDriverOpts$Outbound;
}

export function redisMoveDriverOptsToJSON(
  redisMoveDriverOpts: RedisMoveDriverOpts,
): string {
  return JSON.stringify(
    RedisMoveDriverOpts$outboundSchema.parse(redisMoveDriverOpts),
  );
}

export function redisMoveDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<RedisMoveDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisMoveDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisMoveDriverOpts' from JSON`,
  );
}

/** @internal */
export const RedisMoveNetworkSwarm$inboundSchema: z.ZodType<
  RedisMoveNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => RedisMoveDriverOpts$inboundSchema).optional(),
  Target: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
    "Target": "target",
  });
});

/** @internal */
export type RedisMoveNetworkSwarm$Outbound = {
  Aliases?: Array<string> | undefined;
  DriverOpts?: RedisMoveDriverOpts$Outbound | undefined;
  Target?: string | undefined;
};

/** @internal */
export const RedisMoveNetworkSwarm$outboundSchema: z.ZodType<
  RedisMoveNetworkSwarm$Outbound,
  z.ZodTypeDef,
  RedisMoveNetworkSwarm
> = z.object({
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => RedisMoveDriverOpts$outboundSchema).optional(),
  target: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    aliases: "Aliases",
    driverOpts: "DriverOpts",
    target: "Target",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisMoveNetworkSwarm$ {
  /** @deprecated use `RedisMoveNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisMoveNetworkSwarm$inboundSchema;
  /** @deprecated use `RedisMoveNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisMoveNetworkSwarm$outboundSchema;
  /** @deprecated use `RedisMoveNetworkSwarm$Outbound` instead. */
  export type Outbound = RedisMoveNetworkSwarm$Outbound;
}

export function redisMoveNetworkSwarmToJSON(
  redisMoveNetworkSwarm: RedisMoveNetworkSwarm,
): string {
  return JSON.stringify(
    RedisMoveNetworkSwarm$outboundSchema.parse(redisMoveNetworkSwarm),
  );
}

export function redisMoveNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisMoveNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisMoveNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisMoveNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const RedisMovePlatform$inboundSchema: z.ZodType<
  RedisMovePlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type RedisMovePlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const RedisMovePlatform$outboundSchema: z.ZodType<
  RedisMovePlatform$Outbound,
  z.ZodTypeDef,
  RedisMovePlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisMovePlatform$ {
  /** @deprecated use `RedisMovePlatform$inboundSchema` instead. */
  export const inboundSchema = RedisMovePlatform$inboundSchema;
  /** @deprecated use `RedisMovePlatform$outboundSchema` instead. */
  export const outboundSchema = RedisMovePlatform$outboundSchema;
  /** @deprecated use `RedisMovePlatform$Outbound` instead. */
  export type Outbound = RedisMovePlatform$Outbound;
}

export function redisMovePlatformToJSON(
  redisMovePlatform: RedisMovePlatform,
): string {
  return JSON.stringify(
    RedisMovePlatform$outboundSchema.parse(redisMovePlatform),
  );
}

export function redisMovePlatformFromJSON(
  jsonString: string,
): SafeParseResult<RedisMovePlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisMovePlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisMovePlatform' from JSON`,
  );
}

/** @internal */
export const RedisMoveSpread$inboundSchema: z.ZodType<
  RedisMoveSpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type RedisMoveSpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const RedisMoveSpread$outboundSchema: z.ZodType<
  RedisMoveSpread$Outbound,
  z.ZodTypeDef,
  RedisMoveSpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisMoveSpread$ {
  /** @deprecated use `RedisMoveSpread$inboundSchema` instead. */
  export const inboundSchema = RedisMoveSpread$inboundSchema;
  /** @deprecated use `RedisMoveSpread$outboundSchema` instead. */
  export const outboundSchema = RedisMoveSpread$outboundSchema;
  /** @deprecated use `RedisMoveSpread$Outbound` instead. */
  export type Outbound = RedisMoveSpread$Outbound;
}

export function redisMoveSpreadToJSON(
  redisMoveSpread: RedisMoveSpread,
): string {
  return JSON.stringify(RedisMoveSpread$outboundSchema.parse(redisMoveSpread));
}

export function redisMoveSpreadFromJSON(
  jsonString: string,
): SafeParseResult<RedisMoveSpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisMoveSpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisMoveSpread' from JSON`,
  );
}

/** @internal */
export const RedisMovePreference$inboundSchema: z.ZodType<
  RedisMovePreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => RedisMoveSpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type RedisMovePreference$Outbound = {
  Spread: RedisMoveSpread$Outbound;
};

/** @internal */
export const RedisMovePreference$outboundSchema: z.ZodType<
  RedisMovePreference$Outbound,
  z.ZodTypeDef,
  RedisMovePreference
> = z.object({
  spread: z.lazy(() => RedisMoveSpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisMovePreference$ {
  /** @deprecated use `RedisMovePreference$inboundSchema` instead. */
  export const inboundSchema = RedisMovePreference$inboundSchema;
  /** @deprecated use `RedisMovePreference$outboundSchema` instead. */
  export const outboundSchema = RedisMovePreference$outboundSchema;
  /** @deprecated use `RedisMovePreference$Outbound` instead. */
  export type Outbound = RedisMovePreference$Outbound;
}

export function redisMovePreferenceToJSON(
  redisMovePreference: RedisMovePreference,
): string {
  return JSON.stringify(
    RedisMovePreference$outboundSchema.parse(redisMovePreference),
  );
}

export function redisMovePreferenceFromJSON(
  jsonString: string,
): SafeParseResult<RedisMovePreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisMovePreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisMovePreference' from JSON`,
  );
}

/** @internal */
export const RedisMovePlacementSwarm$inboundSchema: z.ZodType<
  RedisMovePlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => RedisMovePlatform$inboundSchema)).optional(),
  Preferences: z.array(z.lazy(() => RedisMovePreference$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
    "Preferences": "preferences",
  });
});

/** @internal */
export type RedisMovePlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<RedisMovePlatform$Outbound> | undefined;
  Preferences?: Array<RedisMovePreference$Outbound> | undefined;
};

/** @internal */
export const RedisMovePlacementSwarm$outboundSchema: z.ZodType<
  RedisMovePlacementSwarm$Outbound,
  z.ZodTypeDef,
  RedisMovePlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => RedisMovePlatform$outboundSchema)).optional(),
  preferences: z.array(z.lazy(() => RedisMovePreference$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
    preferences: "Preferences",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisMovePlacementSwarm$ {
  /** @deprecated use `RedisMovePlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisMovePlacementSwarm$inboundSchema;
  /** @deprecated use `RedisMovePlacementSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisMovePlacementSwarm$outboundSchema;
  /** @deprecated use `RedisMovePlacementSwarm$Outbound` instead. */
  export type Outbound = RedisMovePlacementSwarm$Outbound;
}

export function redisMovePlacementSwarmToJSON(
  redisMovePlacementSwarm: RedisMovePlacementSwarm,
): string {
  return JSON.stringify(
    RedisMovePlacementSwarm$outboundSchema.parse(redisMovePlacementSwarm),
  );
}

export function redisMovePlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisMovePlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisMovePlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisMovePlacementSwarm' from JSON`,
  );
}

/** @internal */
export const RedisMoveRestartPolicySwarm$inboundSchema: z.ZodType<
  RedisMoveRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type RedisMoveRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const RedisMoveRestartPolicySwarm$outboundSchema: z.ZodType<
  RedisMoveRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  RedisMoveRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisMoveRestartPolicySwarm$ {
  /** @deprecated use `RedisMoveRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema = RedisMoveRestartPolicySwarm$inboundSchema;
  /** @deprecated use `RedisMoveRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema = RedisMoveRestartPolicySwarm$outboundSchema;
  /** @deprecated use `RedisMoveRestartPolicySwarm$Outbound` instead. */
  export type Outbound = RedisMoveRestartPolicySwarm$Outbound;
}

export function redisMoveRestartPolicySwarmToJSON(
  redisMoveRestartPolicySwarm: RedisMoveRestartPolicySwarm,
): string {
  return JSON.stringify(
    RedisMoveRestartPolicySwarm$outboundSchema.parse(
      redisMoveRestartPolicySwarm,
    ),
  );
}

export function redisMoveRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisMoveRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisMoveRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisMoveRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const RedisMoveRollbackConfigSwarm$inboundSchema: z.ZodType<
  RedisMoveRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  MaxFailureRatio: z.number().optional(),
  Monitor: z.number().optional(),
  Order: z.string(),
  Parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    "Delay": "delay",
    "FailureAction": "failureAction",
    "MaxFailureRatio": "maxFailureRatio",
    "Monitor": "monitor",
    "Order": "order",
    "Parallelism": "parallelism",
  });
});

/** @internal */
export type RedisMoveRollbackConfigSwarm$Outbound = {
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  MaxFailureRatio?: number | undefined;
  Monitor?: number | undefined;
  Order: string;
  Parallelism: number;
};

/** @internal */
export const RedisMoveRollbackConfigSwarm$outboundSchema: z.ZodType<
  RedisMoveRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  RedisMoveRollbackConfigSwarm
> = z.object({
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  maxFailureRatio: z.number().optional(),
  monitor: z.number().optional(),
  order: z.string(),
  parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    delay: "Delay",
    failureAction: "FailureAction",
    maxFailureRatio: "MaxFailureRatio",
    monitor: "Monitor",
    order: "Order",
    parallelism: "Parallelism",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisMoveRollbackConfigSwarm$ {
  /** @deprecated use `RedisMoveRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisMoveRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `RedisMoveRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisMoveRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `RedisMoveRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = RedisMoveRollbackConfigSwarm$Outbound;
}

export function redisMoveRollbackConfigSwarmToJSON(
  redisMoveRollbackConfigSwarm: RedisMoveRollbackConfigSwarm,
): string {
  return JSON.stringify(
    RedisMoveRollbackConfigSwarm$outboundSchema.parse(
      redisMoveRollbackConfigSwarm,
    ),
  );
}

export function redisMoveRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisMoveRollbackConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisMoveRollbackConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisMoveRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const RedisMoveUpdateConfigSwarm$inboundSchema: z.ZodType<
  RedisMoveUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  MaxFailureRatio: z.number().optional(),
  Monitor: z.number().optional(),
  Order: z.string(),
  Parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    "Delay": "delay",
    "FailureAction": "failureAction",
    "MaxFailureRatio": "maxFailureRatio",
    "Monitor": "monitor",
    "Order": "order",
    "Parallelism": "parallelism",
  });
});

/** @internal */
export type RedisMoveUpdateConfigSwarm$Outbound = {
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  MaxFailureRatio?: number | undefined;
  Monitor?: number | undefined;
  Order: string;
  Parallelism: number;
};

/** @internal */
export const RedisMoveUpdateConfigSwarm$outboundSchema: z.ZodType<
  RedisMoveUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  RedisMoveUpdateConfigSwarm
> = z.object({
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  maxFailureRatio: z.number().optional(),
  monitor: z.number().optional(),
  order: z.string(),
  parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    delay: "Delay",
    failureAction: "FailureAction",
    maxFailureRatio: "MaxFailureRatio",
    monitor: "Monitor",
    order: "Order",
    parallelism: "Parallelism",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisMoveUpdateConfigSwarm$ {
  /** @deprecated use `RedisMoveUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisMoveUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `RedisMoveUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisMoveUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `RedisMoveUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = RedisMoveUpdateConfigSwarm$Outbound;
}

export function redisMoveUpdateConfigSwarmToJSON(
  redisMoveUpdateConfigSwarm: RedisMoveUpdateConfigSwarm,
): string {
  return JSON.stringify(
    RedisMoveUpdateConfigSwarm$outboundSchema.parse(redisMoveUpdateConfigSwarm),
  );
}

export function redisMoveUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisMoveUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisMoveUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisMoveUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const RedisMoveResponseBody$inboundSchema: z.ZodType<
  RedisMoveResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  applicationStatus: RedisMoveApplicationStatus$inboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databasePassword: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.lazy(() => RedisMoveHealthCheckSwarm$inboundSchema),
  ),
  labelsSwarm: z.nullable(z.record(z.string())),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(z.lazy(() => RedisMoveModeSwarm$inboundSchema)),
  name: z.string(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => RedisMoveNetworkSwarm$inboundSchema)),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => RedisMovePlacementSwarm$inboundSchema),
  ),
  redisId: z.string(),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => RedisMoveRestartPolicySwarm$inboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => RedisMoveRollbackConfigSwarm$inboundSchema),
  ),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.lazy(() => RedisMoveUpdateConfigSwarm$inboundSchema),
  ),
});

/** @internal */
export type RedisMoveResponseBody$Outbound = {
  appName: string;
  applicationStatus: string;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databasePassword: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: RedisMoveHealthCheckSwarm$Outbound | null;
  labelsSwarm: { [k: string]: string } | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: RedisMoveModeSwarm$Outbound | null;
  name: string;
  networkSwarm: Array<RedisMoveNetworkSwarm$Outbound> | null;
  placementSwarm: RedisMovePlacementSwarm$Outbound | null;
  redisId: string;
  replicas: number;
  restartPolicySwarm: RedisMoveRestartPolicySwarm$Outbound | null;
  rollbackConfigSwarm: RedisMoveRollbackConfigSwarm$Outbound | null;
  serverId: string | null;
  updateConfigSwarm: RedisMoveUpdateConfigSwarm$Outbound | null;
};

/** @internal */
export const RedisMoveResponseBody$outboundSchema: z.ZodType<
  RedisMoveResponseBody$Outbound,
  z.ZodTypeDef,
  RedisMoveResponseBody
> = z.object({
  appName: z.string(),
  applicationStatus: RedisMoveApplicationStatus$outboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databasePassword: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.lazy(() => RedisMoveHealthCheckSwarm$outboundSchema),
  ),
  labelsSwarm: z.nullable(z.record(z.string())),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(z.lazy(() => RedisMoveModeSwarm$outboundSchema)),
  name: z.string(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => RedisMoveNetworkSwarm$outboundSchema)),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => RedisMovePlacementSwarm$outboundSchema),
  ),
  redisId: z.string(),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => RedisMoveRestartPolicySwarm$outboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => RedisMoveRollbackConfigSwarm$outboundSchema),
  ),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.lazy(() => RedisMoveUpdateConfigSwarm$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisMoveResponseBody$ {
  /** @deprecated use `RedisMoveResponseBody$inboundSchema` instead. */
  export const inboundSchema = RedisMoveResponseBody$inboundSchema;
  /** @deprecated use `RedisMoveResponseBody$outboundSchema` instead. */
  export const outboundSchema = RedisMoveResponseBody$outboundSchema;
  /** @deprecated use `RedisMoveResponseBody$Outbound` instead. */
  export type Outbound = RedisMoveResponseBody$Outbound;
}

export function redisMoveResponseBodyToJSON(
  redisMoveResponseBody: RedisMoveResponseBody,
): string {
  return JSON.stringify(
    RedisMoveResponseBody$outboundSchema.parse(redisMoveResponseBody),
  );
}

export function redisMoveResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RedisMoveResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisMoveResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisMoveResponseBody' from JSON`,
  );
}

/** @internal */
export const RedisMoveResponse$inboundSchema: z.ZodType<
  RedisMoveResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => RedisMoveResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type RedisMoveResponse$Outbound =
  | RedisMoveResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const RedisMoveResponse$outboundSchema: z.ZodType<
  RedisMoveResponse$Outbound,
  z.ZodTypeDef,
  RedisMoveResponse
> = z.union([
  z.lazy(() => RedisMoveResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisMoveResponse$ {
  /** @deprecated use `RedisMoveResponse$inboundSchema` instead. */
  export const inboundSchema = RedisMoveResponse$inboundSchema;
  /** @deprecated use `RedisMoveResponse$outboundSchema` instead. */
  export const outboundSchema = RedisMoveResponse$outboundSchema;
  /** @deprecated use `RedisMoveResponse$Outbound` instead. */
  export type Outbound = RedisMoveResponse$Outbound;
}

export function redisMoveResponseToJSON(
  redisMoveResponse: RedisMoveResponse,
): string {
  return JSON.stringify(
    RedisMoveResponse$outboundSchema.parse(redisMoveResponse),
  );
}

export function redisMoveResponseFromJSON(
  jsonString: string,
): SafeParseResult<RedisMoveResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisMoveResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisMoveResponse' from JSON`,
  );
}
