/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NotificationTestDiscordConnectionSecurity = {
  authorization: string;
};

export type NotificationTestDiscordConnectionRequest = {
  webhookUrl: string;
  decoration?: boolean | undefined;
};

/** @internal */
export const NotificationTestDiscordConnectionSecurity$inboundSchema: z.ZodType<
  NotificationTestDiscordConnectionSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type NotificationTestDiscordConnectionSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const NotificationTestDiscordConnectionSecurity$outboundSchema:
  z.ZodType<
    NotificationTestDiscordConnectionSecurity$Outbound,
    z.ZodTypeDef,
    NotificationTestDiscordConnectionSecurity
  > = z.object({
    authorization: z.string(),
  }).transform((v) => {
    return remap$(v, {
      authorization: "Authorization",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationTestDiscordConnectionSecurity$ {
  /** @deprecated use `NotificationTestDiscordConnectionSecurity$inboundSchema` instead. */
  export const inboundSchema =
    NotificationTestDiscordConnectionSecurity$inboundSchema;
  /** @deprecated use `NotificationTestDiscordConnectionSecurity$outboundSchema` instead. */
  export const outboundSchema =
    NotificationTestDiscordConnectionSecurity$outboundSchema;
  /** @deprecated use `NotificationTestDiscordConnectionSecurity$Outbound` instead. */
  export type Outbound = NotificationTestDiscordConnectionSecurity$Outbound;
}

export function notificationTestDiscordConnectionSecurityToJSON(
  notificationTestDiscordConnectionSecurity:
    NotificationTestDiscordConnectionSecurity,
): string {
  return JSON.stringify(
    NotificationTestDiscordConnectionSecurity$outboundSchema.parse(
      notificationTestDiscordConnectionSecurity,
    ),
  );
}

export function notificationTestDiscordConnectionSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  NotificationTestDiscordConnectionSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NotificationTestDiscordConnectionSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'NotificationTestDiscordConnectionSecurity' from JSON`,
  );
}

/** @internal */
export const NotificationTestDiscordConnectionRequest$inboundSchema: z.ZodType<
  NotificationTestDiscordConnectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  webhookUrl: z.string(),
  decoration: z.boolean().optional(),
});

/** @internal */
export type NotificationTestDiscordConnectionRequest$Outbound = {
  webhookUrl: string;
  decoration?: boolean | undefined;
};

/** @internal */
export const NotificationTestDiscordConnectionRequest$outboundSchema: z.ZodType<
  NotificationTestDiscordConnectionRequest$Outbound,
  z.ZodTypeDef,
  NotificationTestDiscordConnectionRequest
> = z.object({
  webhookUrl: z.string(),
  decoration: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationTestDiscordConnectionRequest$ {
  /** @deprecated use `NotificationTestDiscordConnectionRequest$inboundSchema` instead. */
  export const inboundSchema =
    NotificationTestDiscordConnectionRequest$inboundSchema;
  /** @deprecated use `NotificationTestDiscordConnectionRequest$outboundSchema` instead. */
  export const outboundSchema =
    NotificationTestDiscordConnectionRequest$outboundSchema;
  /** @deprecated use `NotificationTestDiscordConnectionRequest$Outbound` instead. */
  export type Outbound = NotificationTestDiscordConnectionRequest$Outbound;
}

export function notificationTestDiscordConnectionRequestToJSON(
  notificationTestDiscordConnectionRequest:
    NotificationTestDiscordConnectionRequest,
): string {
  return JSON.stringify(
    NotificationTestDiscordConnectionRequest$outboundSchema.parse(
      notificationTestDiscordConnectionRequest,
    ),
  );
}

export function notificationTestDiscordConnectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  NotificationTestDiscordConnectionRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NotificationTestDiscordConnectionRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'NotificationTestDiscordConnectionRequest' from JSON`,
  );
}
