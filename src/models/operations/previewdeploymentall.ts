/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PreviewDeploymentAllSecurity = {
  authorization: string;
};

export type PreviewDeploymentAllRequest = {
  applicationId: string;
};

export const PreviewDeploymentAllPreviewStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type PreviewDeploymentAllPreviewStatus = ClosedEnum<
  typeof PreviewDeploymentAllPreviewStatus
>;

export type PreviewDeploymentAllResponseBody = {
  appName: string;
  applicationId: string;
  branch: string;
  createdAt: string;
  domainId: string | null;
  expiresAt: string | null;
  previewDeploymentId: string;
  previewStatus: PreviewDeploymentAllPreviewStatus;
  pullRequestCommentId: string;
  pullRequestId: string;
  pullRequestNumber: string;
  pullRequestTitle: string;
  pullRequestURL: string;
};

export type PreviewDeploymentAllResponse =
  | models.ErrorT
  | Array<PreviewDeploymentAllResponseBody>;

/** @internal */
export const PreviewDeploymentAllSecurity$inboundSchema: z.ZodType<
  PreviewDeploymentAllSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type PreviewDeploymentAllSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const PreviewDeploymentAllSecurity$outboundSchema: z.ZodType<
  PreviewDeploymentAllSecurity$Outbound,
  z.ZodTypeDef,
  PreviewDeploymentAllSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewDeploymentAllSecurity$ {
  /** @deprecated use `PreviewDeploymentAllSecurity$inboundSchema` instead. */
  export const inboundSchema = PreviewDeploymentAllSecurity$inboundSchema;
  /** @deprecated use `PreviewDeploymentAllSecurity$outboundSchema` instead. */
  export const outboundSchema = PreviewDeploymentAllSecurity$outboundSchema;
  /** @deprecated use `PreviewDeploymentAllSecurity$Outbound` instead. */
  export type Outbound = PreviewDeploymentAllSecurity$Outbound;
}

export function previewDeploymentAllSecurityToJSON(
  previewDeploymentAllSecurity: PreviewDeploymentAllSecurity,
): string {
  return JSON.stringify(
    PreviewDeploymentAllSecurity$outboundSchema.parse(
      previewDeploymentAllSecurity,
    ),
  );
}

export function previewDeploymentAllSecurityFromJSON(
  jsonString: string,
): SafeParseResult<PreviewDeploymentAllSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewDeploymentAllSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewDeploymentAllSecurity' from JSON`,
  );
}

/** @internal */
export const PreviewDeploymentAllRequest$inboundSchema: z.ZodType<
  PreviewDeploymentAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string(),
});

/** @internal */
export type PreviewDeploymentAllRequest$Outbound = {
  applicationId: string;
};

/** @internal */
export const PreviewDeploymentAllRequest$outboundSchema: z.ZodType<
  PreviewDeploymentAllRequest$Outbound,
  z.ZodTypeDef,
  PreviewDeploymentAllRequest
> = z.object({
  applicationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewDeploymentAllRequest$ {
  /** @deprecated use `PreviewDeploymentAllRequest$inboundSchema` instead. */
  export const inboundSchema = PreviewDeploymentAllRequest$inboundSchema;
  /** @deprecated use `PreviewDeploymentAllRequest$outboundSchema` instead. */
  export const outboundSchema = PreviewDeploymentAllRequest$outboundSchema;
  /** @deprecated use `PreviewDeploymentAllRequest$Outbound` instead. */
  export type Outbound = PreviewDeploymentAllRequest$Outbound;
}

export function previewDeploymentAllRequestToJSON(
  previewDeploymentAllRequest: PreviewDeploymentAllRequest,
): string {
  return JSON.stringify(
    PreviewDeploymentAllRequest$outboundSchema.parse(
      previewDeploymentAllRequest,
    ),
  );
}

export function previewDeploymentAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<PreviewDeploymentAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewDeploymentAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewDeploymentAllRequest' from JSON`,
  );
}

/** @internal */
export const PreviewDeploymentAllPreviewStatus$inboundSchema: z.ZodNativeEnum<
  typeof PreviewDeploymentAllPreviewStatus
> = z.nativeEnum(PreviewDeploymentAllPreviewStatus);

/** @internal */
export const PreviewDeploymentAllPreviewStatus$outboundSchema: z.ZodNativeEnum<
  typeof PreviewDeploymentAllPreviewStatus
> = PreviewDeploymentAllPreviewStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewDeploymentAllPreviewStatus$ {
  /** @deprecated use `PreviewDeploymentAllPreviewStatus$inboundSchema` instead. */
  export const inboundSchema = PreviewDeploymentAllPreviewStatus$inboundSchema;
  /** @deprecated use `PreviewDeploymentAllPreviewStatus$outboundSchema` instead. */
  export const outboundSchema =
    PreviewDeploymentAllPreviewStatus$outboundSchema;
}

/** @internal */
export const PreviewDeploymentAllResponseBody$inboundSchema: z.ZodType<
  PreviewDeploymentAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  applicationId: z.string(),
  branch: z.string(),
  createdAt: z.string(),
  domainId: z.nullable(z.string()),
  expiresAt: z.nullable(z.string()),
  previewDeploymentId: z.string(),
  previewStatus: PreviewDeploymentAllPreviewStatus$inboundSchema,
  pullRequestCommentId: z.string(),
  pullRequestId: z.string(),
  pullRequestNumber: z.string(),
  pullRequestTitle: z.string(),
  pullRequestURL: z.string(),
});

/** @internal */
export type PreviewDeploymentAllResponseBody$Outbound = {
  appName: string;
  applicationId: string;
  branch: string;
  createdAt: string;
  domainId: string | null;
  expiresAt: string | null;
  previewDeploymentId: string;
  previewStatus: string;
  pullRequestCommentId: string;
  pullRequestId: string;
  pullRequestNumber: string;
  pullRequestTitle: string;
  pullRequestURL: string;
};

/** @internal */
export const PreviewDeploymentAllResponseBody$outboundSchema: z.ZodType<
  PreviewDeploymentAllResponseBody$Outbound,
  z.ZodTypeDef,
  PreviewDeploymentAllResponseBody
> = z.object({
  appName: z.string(),
  applicationId: z.string(),
  branch: z.string(),
  createdAt: z.string(),
  domainId: z.nullable(z.string()),
  expiresAt: z.nullable(z.string()),
  previewDeploymentId: z.string(),
  previewStatus: PreviewDeploymentAllPreviewStatus$outboundSchema,
  pullRequestCommentId: z.string(),
  pullRequestId: z.string(),
  pullRequestNumber: z.string(),
  pullRequestTitle: z.string(),
  pullRequestURL: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewDeploymentAllResponseBody$ {
  /** @deprecated use `PreviewDeploymentAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = PreviewDeploymentAllResponseBody$inboundSchema;
  /** @deprecated use `PreviewDeploymentAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = PreviewDeploymentAllResponseBody$outboundSchema;
  /** @deprecated use `PreviewDeploymentAllResponseBody$Outbound` instead. */
  export type Outbound = PreviewDeploymentAllResponseBody$Outbound;
}

export function previewDeploymentAllResponseBodyToJSON(
  previewDeploymentAllResponseBody: PreviewDeploymentAllResponseBody,
): string {
  return JSON.stringify(
    PreviewDeploymentAllResponseBody$outboundSchema.parse(
      previewDeploymentAllResponseBody,
    ),
  );
}

export function previewDeploymentAllResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PreviewDeploymentAllResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewDeploymentAllResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewDeploymentAllResponseBody' from JSON`,
  );
}

/** @internal */
export const PreviewDeploymentAllResponse$inboundSchema: z.ZodType<
  PreviewDeploymentAllResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ErrorT$inboundSchema,
  z.array(z.lazy(() => PreviewDeploymentAllResponseBody$inboundSchema)),
]);

/** @internal */
export type PreviewDeploymentAllResponse$Outbound =
  | models.ErrorT$Outbound
  | Array<PreviewDeploymentAllResponseBody$Outbound>;

/** @internal */
export const PreviewDeploymentAllResponse$outboundSchema: z.ZodType<
  PreviewDeploymentAllResponse$Outbound,
  z.ZodTypeDef,
  PreviewDeploymentAllResponse
> = z.union([
  models.ErrorT$outboundSchema,
  z.array(z.lazy(() => PreviewDeploymentAllResponseBody$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewDeploymentAllResponse$ {
  /** @deprecated use `PreviewDeploymentAllResponse$inboundSchema` instead. */
  export const inboundSchema = PreviewDeploymentAllResponse$inboundSchema;
  /** @deprecated use `PreviewDeploymentAllResponse$outboundSchema` instead. */
  export const outboundSchema = PreviewDeploymentAllResponse$outboundSchema;
  /** @deprecated use `PreviewDeploymentAllResponse$Outbound` instead. */
  export type Outbound = PreviewDeploymentAllResponse$Outbound;
}

export function previewDeploymentAllResponseToJSON(
  previewDeploymentAllResponse: PreviewDeploymentAllResponse,
): string {
  return JSON.stringify(
    PreviewDeploymentAllResponse$outboundSchema.parse(
      previewDeploymentAllResponse,
    ),
  );
}

export function previewDeploymentAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<PreviewDeploymentAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewDeploymentAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewDeploymentAllResponse' from JSON`,
  );
}
