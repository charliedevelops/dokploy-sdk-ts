/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type VolumeBackupsListSecurity = {
  authorization: string;
};

export const VolumeBackupType = {
  Application: "application",
  Postgres: "postgres",
  Mysql: "mysql",
  Mariadb: "mariadb",
  Mongo: "mongo",
  Redis: "redis",
  Compose: "compose",
} as const;
export type VolumeBackupType = ClosedEnum<typeof VolumeBackupType>;

export type VolumeBackupsListRequest = {
  id: string;
  volumeBackupType: VolumeBackupType;
};

/** @internal */
export const VolumeBackupsListSecurity$inboundSchema: z.ZodType<
  VolumeBackupsListSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type VolumeBackupsListSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const VolumeBackupsListSecurity$outboundSchema: z.ZodType<
  VolumeBackupsListSecurity$Outbound,
  z.ZodTypeDef,
  VolumeBackupsListSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VolumeBackupsListSecurity$ {
  /** @deprecated use `VolumeBackupsListSecurity$inboundSchema` instead. */
  export const inboundSchema = VolumeBackupsListSecurity$inboundSchema;
  /** @deprecated use `VolumeBackupsListSecurity$outboundSchema` instead. */
  export const outboundSchema = VolumeBackupsListSecurity$outboundSchema;
  /** @deprecated use `VolumeBackupsListSecurity$Outbound` instead. */
  export type Outbound = VolumeBackupsListSecurity$Outbound;
}

export function volumeBackupsListSecurityToJSON(
  volumeBackupsListSecurity: VolumeBackupsListSecurity,
): string {
  return JSON.stringify(
    VolumeBackupsListSecurity$outboundSchema.parse(volumeBackupsListSecurity),
  );
}

export function volumeBackupsListSecurityFromJSON(
  jsonString: string,
): SafeParseResult<VolumeBackupsListSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VolumeBackupsListSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VolumeBackupsListSecurity' from JSON`,
  );
}

/** @internal */
export const VolumeBackupType$inboundSchema: z.ZodNativeEnum<
  typeof VolumeBackupType
> = z.nativeEnum(VolumeBackupType);

/** @internal */
export const VolumeBackupType$outboundSchema: z.ZodNativeEnum<
  typeof VolumeBackupType
> = VolumeBackupType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VolumeBackupType$ {
  /** @deprecated use `VolumeBackupType$inboundSchema` instead. */
  export const inboundSchema = VolumeBackupType$inboundSchema;
  /** @deprecated use `VolumeBackupType$outboundSchema` instead. */
  export const outboundSchema = VolumeBackupType$outboundSchema;
}

/** @internal */
export const VolumeBackupsListRequest$inboundSchema: z.ZodType<
  VolumeBackupsListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  volumeBackupType: VolumeBackupType$inboundSchema,
});

/** @internal */
export type VolumeBackupsListRequest$Outbound = {
  id: string;
  volumeBackupType: string;
};

/** @internal */
export const VolumeBackupsListRequest$outboundSchema: z.ZodType<
  VolumeBackupsListRequest$Outbound,
  z.ZodTypeDef,
  VolumeBackupsListRequest
> = z.object({
  id: z.string(),
  volumeBackupType: VolumeBackupType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VolumeBackupsListRequest$ {
  /** @deprecated use `VolumeBackupsListRequest$inboundSchema` instead. */
  export const inboundSchema = VolumeBackupsListRequest$inboundSchema;
  /** @deprecated use `VolumeBackupsListRequest$outboundSchema` instead. */
  export const outboundSchema = VolumeBackupsListRequest$outboundSchema;
  /** @deprecated use `VolumeBackupsListRequest$Outbound` instead. */
  export type Outbound = VolumeBackupsListRequest$Outbound;
}

export function volumeBackupsListRequestToJSON(
  volumeBackupsListRequest: VolumeBackupsListRequest,
): string {
  return JSON.stringify(
    VolumeBackupsListRequest$outboundSchema.parse(volumeBackupsListRequest),
  );
}

export function volumeBackupsListRequestFromJSON(
  jsonString: string,
): SafeParseResult<VolumeBackupsListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VolumeBackupsListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VolumeBackupsListRequest' from JSON`,
  );
}
