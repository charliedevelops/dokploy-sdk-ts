/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type MariadbDeploySecurity = {
  authorization: string;
};

export type MariadbDeployRequest = {
  mariadbId: string;
};

export const MariadbDeployApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type MariadbDeployApplicationStatus = ClosedEnum<
  typeof MariadbDeployApplicationStatus
>;

export type MariadbDeployHealthCheckSwarm = {
  test?: Array<string> | undefined;
  interval?: number | undefined;
  timeout?: number | undefined;
  startPeriod?: number | undefined;
  retries?: number | undefined;
};

export type MariadbDeployRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type MariadbDeploySpread = {
  spreadDescriptor: string;
};

export type MariadbDeployPreference = {
  spread: MariadbDeploySpread;
};

export type MariadbDeployPlatform = {
  architecture: string;
  os: string;
};

export type MariadbDeployPlacementSwarm = {
  constraints?: Array<string> | undefined;
  preferences?: Array<MariadbDeployPreference> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<MariadbDeployPlatform> | undefined;
};

export type MariadbDeployUpdateConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type MariadbDeployRollbackConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type MariadbDeployReplicated = {
  replicas?: number | undefined;
};

export type MariadbDeployGlobal = {};

export type MariadbDeployReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type MariadbDeployGlobalJob = {};

export type MariadbDeployModeSwarm = {
  replicated?: MariadbDeployReplicated | undefined;
  global?: MariadbDeployGlobal | undefined;
  replicatedJob?: MariadbDeployReplicatedJob | undefined;
  globalJob?: MariadbDeployGlobalJob | undefined;
};

export type MariadbDeployDriverOpts = {};

export type MariadbDeployNetworkSwarm = {
  target?: string | undefined;
  aliases?: Array<string> | undefined;
  driverOpts?: MariadbDeployDriverOpts | undefined;
};

export type MariadbDeployProject = {
  projectId: string;
  name: string;
  description: string | null;
  createdAt: string;
  organizationId: string;
  env: string;
};

export type MariadbDeployEnvironment = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
  project: MariadbDeployProject;
};

export const MariadbDeployType = {
  Bind: "bind",
  Volume: "volume",
  File: "file",
} as const;
export type MariadbDeployType = ClosedEnum<typeof MariadbDeployType>;

export const MariadbDeployServiceType = {
  Application: "application",
  Postgres: "postgres",
  Mysql: "mysql",
  Mariadb: "mariadb",
  Mongo: "mongo",
  Redis: "redis",
  Compose: "compose",
} as const;
export type MariadbDeployServiceType = ClosedEnum<
  typeof MariadbDeployServiceType
>;

export type MariadbDeployMount = {
  mountId: string;
  type: MariadbDeployType;
  hostPath: string | null;
  volumeName: string | null;
  filePath: string | null;
  content: string | null;
  serviceType: MariadbDeployServiceType;
  mountPath: string;
  applicationId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mysqlId: string | null;
  redisId: string | null;
  composeId: string | null;
};

export const MariadbDeployServerStatus = {
  Active: "active",
  Inactive: "inactive",
} as const;
export type MariadbDeployServerStatus = ClosedEnum<
  typeof MariadbDeployServerStatus
>;

export const MariadbDeployMetricsConfigEnum = {
  Null: "null",
} as const;
export type MariadbDeployMetricsConfigEnum = ClosedEnum<
  typeof MariadbDeployMetricsConfigEnum
>;

export type MariadbDeployMetricsConfigUnion1 =
  | string
  | number
  | boolean
  | MariadbDeployMetricsConfigEnum;

export type MariadbDeployMetricsConfigUnion2 =
  | string
  | number
  | boolean
  | MariadbDeployMetricsConfigEnum
  | Array<any>
  | { [k: string]: any };

export type MariadbDeployServer = {
  serverId: string;
  name: string;
  description: string | null;
  ipAddress: string;
  port: number;
  username: string;
  appName: string;
  enableDockerCleanup: boolean;
  createdAt: string;
  organizationId: string;
  serverStatus: MariadbDeployServerStatus;
  command: string;
  sshKeyId: string | null;
  metricsConfig:
    | string
    | number
    | boolean
    | MariadbDeployMetricsConfigEnum
    | Array<any>
    | { [k: string]: any };
};

export const MariadbDeployBackupType = {
  Database: "database",
  Compose: "compose",
} as const;
export type MariadbDeployBackupType = ClosedEnum<
  typeof MariadbDeployBackupType
>;

export const MariadbDeployDatabaseType = {
  Postgres: "postgres",
  Mariadb: "mariadb",
  Mysql: "mysql",
  Mongo: "mongo",
  WebServer: "web-server",
} as const;
export type MariadbDeployDatabaseType = ClosedEnum<
  typeof MariadbDeployDatabaseType
>;

export const MariadbDeployMetadataEnum = {
  Null: "null",
} as const;
export type MariadbDeployMetadataEnum = ClosedEnum<
  typeof MariadbDeployMetadataEnum
>;

export type MariadbDeployPostgres = {
  databaseUser: string;
};

export type MariadbDeployMariadb = {
  databaseUser: string;
  databasePassword: string;
};

export type MariadbDeployMongo = {
  databaseUser: string;
  databasePassword: string;
};

export type MariadbDeployMysql = {
  databaseRootPassword: string;
};

export type MariadbDeployMetadata = {
  postgres?: MariadbDeployPostgres | undefined;
  mariadb?: MariadbDeployMariadb | undefined;
  mongo?: MariadbDeployMongo | undefined;
  mysql?: MariadbDeployMysql | undefined;
};

export type MariadbDeployMetadataUnion =
  | MariadbDeployMetadata
  | MariadbDeployMetadataEnum;

export type MariadbDeployBackup = {
  backupId: string;
  appName: string;
  schedule: string;
  enabled: boolean | null;
  database: string;
  prefix: string;
  serviceName: string | null;
  destinationId: string;
  keepLatestCount: number | null;
  backupType: MariadbDeployBackupType;
  databaseType: MariadbDeployDatabaseType;
  composeId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mysqlId: string | null;
  mongoId: string | null;
  userId: string | null;
  metadata?:
    | MariadbDeployMetadata
    | MariadbDeployMetadataEnum
    | null
    | undefined;
};

/**
 * Successful response
 */
export type MariadbDeployResponseBody = {
  mariadbId: string;
  name: string;
  appName: string;
  description: string | null;
  databaseName: string;
  databaseUser: string;
  databasePassword: string;
  databaseRootPassword: string;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  externalPort: number | null;
  applicationStatus: MariadbDeployApplicationStatus;
  healthCheckSwarm: MariadbDeployHealthCheckSwarm | null;
  restartPolicySwarm: MariadbDeployRestartPolicySwarm | null;
  placementSwarm: MariadbDeployPlacementSwarm | null;
  updateConfigSwarm: MariadbDeployUpdateConfigSwarm | null;
  rollbackConfigSwarm: MariadbDeployRollbackConfigSwarm | null;
  modeSwarm: MariadbDeployModeSwarm | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<MariadbDeployNetworkSwarm> | null;
  replicas: number;
  createdAt: string;
  environmentId: string;
  serverId: string | null;
  environment: MariadbDeployEnvironment;
  mounts: Array<MariadbDeployMount>;
  server: MariadbDeployServer | null;
  backups: Array<MariadbDeployBackup>;
};

export type MariadbDeployResponse = MariadbDeployResponseBody | models.ErrorT;

/** @internal */
export const MariadbDeploySecurity$inboundSchema: z.ZodType<
  MariadbDeploySecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type MariadbDeploySecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const MariadbDeploySecurity$outboundSchema: z.ZodType<
  MariadbDeploySecurity$Outbound,
  z.ZodTypeDef,
  MariadbDeploySecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeploySecurity$ {
  /** @deprecated use `MariadbDeploySecurity$inboundSchema` instead. */
  export const inboundSchema = MariadbDeploySecurity$inboundSchema;
  /** @deprecated use `MariadbDeploySecurity$outboundSchema` instead. */
  export const outboundSchema = MariadbDeploySecurity$outboundSchema;
  /** @deprecated use `MariadbDeploySecurity$Outbound` instead. */
  export type Outbound = MariadbDeploySecurity$Outbound;
}

export function mariadbDeploySecurityToJSON(
  mariadbDeploySecurity: MariadbDeploySecurity,
): string {
  return JSON.stringify(
    MariadbDeploySecurity$outboundSchema.parse(mariadbDeploySecurity),
  );
}

export function mariadbDeploySecurityFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeploySecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeploySecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeploySecurity' from JSON`,
  );
}

/** @internal */
export const MariadbDeployRequest$inboundSchema: z.ZodType<
  MariadbDeployRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mariadbId: z.string(),
});

/** @internal */
export type MariadbDeployRequest$Outbound = {
  mariadbId: string;
};

/** @internal */
export const MariadbDeployRequest$outboundSchema: z.ZodType<
  MariadbDeployRequest$Outbound,
  z.ZodTypeDef,
  MariadbDeployRequest
> = z.object({
  mariadbId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployRequest$ {
  /** @deprecated use `MariadbDeployRequest$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployRequest$inboundSchema;
  /** @deprecated use `MariadbDeployRequest$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployRequest$outboundSchema;
  /** @deprecated use `MariadbDeployRequest$Outbound` instead. */
  export type Outbound = MariadbDeployRequest$Outbound;
}

export function mariadbDeployRequestToJSON(
  mariadbDeployRequest: MariadbDeployRequest,
): string {
  return JSON.stringify(
    MariadbDeployRequest$outboundSchema.parse(mariadbDeployRequest),
  );
}

export function mariadbDeployRequestFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployRequest' from JSON`,
  );
}

/** @internal */
export const MariadbDeployApplicationStatus$inboundSchema: z.ZodNativeEnum<
  typeof MariadbDeployApplicationStatus
> = z.nativeEnum(MariadbDeployApplicationStatus);

/** @internal */
export const MariadbDeployApplicationStatus$outboundSchema: z.ZodNativeEnum<
  typeof MariadbDeployApplicationStatus
> = MariadbDeployApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployApplicationStatus$ {
  /** @deprecated use `MariadbDeployApplicationStatus$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployApplicationStatus$inboundSchema;
  /** @deprecated use `MariadbDeployApplicationStatus$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployApplicationStatus$outboundSchema;
}

/** @internal */
export const MariadbDeployHealthCheckSwarm$inboundSchema: z.ZodType<
  MariadbDeployHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Test: z.array(z.string()).optional(),
  Interval: z.number().optional(),
  Timeout: z.number().optional(),
  StartPeriod: z.number().optional(),
  Retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Test": "test",
    "Interval": "interval",
    "Timeout": "timeout",
    "StartPeriod": "startPeriod",
    "Retries": "retries",
  });
});

/** @internal */
export type MariadbDeployHealthCheckSwarm$Outbound = {
  Test?: Array<string> | undefined;
  Interval?: number | undefined;
  Timeout?: number | undefined;
  StartPeriod?: number | undefined;
  Retries?: number | undefined;
};

/** @internal */
export const MariadbDeployHealthCheckSwarm$outboundSchema: z.ZodType<
  MariadbDeployHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  MariadbDeployHealthCheckSwarm
> = z.object({
  test: z.array(z.string()).optional(),
  interval: z.number().optional(),
  timeout: z.number().optional(),
  startPeriod: z.number().optional(),
  retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    test: "Test",
    interval: "Interval",
    timeout: "Timeout",
    startPeriod: "StartPeriod",
    retries: "Retries",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployHealthCheckSwarm$ {
  /** @deprecated use `MariadbDeployHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployHealthCheckSwarm$inboundSchema;
  /** @deprecated use `MariadbDeployHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployHealthCheckSwarm$outboundSchema;
  /** @deprecated use `MariadbDeployHealthCheckSwarm$Outbound` instead. */
  export type Outbound = MariadbDeployHealthCheckSwarm$Outbound;
}

export function mariadbDeployHealthCheckSwarmToJSON(
  mariadbDeployHealthCheckSwarm: MariadbDeployHealthCheckSwarm,
): string {
  return JSON.stringify(
    MariadbDeployHealthCheckSwarm$outboundSchema.parse(
      mariadbDeployHealthCheckSwarm,
    ),
  );
}

export function mariadbDeployHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbDeployRestartPolicySwarm$inboundSchema: z.ZodType<
  MariadbDeployRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type MariadbDeployRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const MariadbDeployRestartPolicySwarm$outboundSchema: z.ZodType<
  MariadbDeployRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  MariadbDeployRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployRestartPolicySwarm$ {
  /** @deprecated use `MariadbDeployRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployRestartPolicySwarm$inboundSchema;
  /** @deprecated use `MariadbDeployRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployRestartPolicySwarm$outboundSchema;
  /** @deprecated use `MariadbDeployRestartPolicySwarm$Outbound` instead. */
  export type Outbound = MariadbDeployRestartPolicySwarm$Outbound;
}

export function mariadbDeployRestartPolicySwarmToJSON(
  mariadbDeployRestartPolicySwarm: MariadbDeployRestartPolicySwarm,
): string {
  return JSON.stringify(
    MariadbDeployRestartPolicySwarm$outboundSchema.parse(
      mariadbDeployRestartPolicySwarm,
    ),
  );
}

export function mariadbDeployRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const MariadbDeploySpread$inboundSchema: z.ZodType<
  MariadbDeploySpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type MariadbDeploySpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const MariadbDeploySpread$outboundSchema: z.ZodType<
  MariadbDeploySpread$Outbound,
  z.ZodTypeDef,
  MariadbDeploySpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeploySpread$ {
  /** @deprecated use `MariadbDeploySpread$inboundSchema` instead. */
  export const inboundSchema = MariadbDeploySpread$inboundSchema;
  /** @deprecated use `MariadbDeploySpread$outboundSchema` instead. */
  export const outboundSchema = MariadbDeploySpread$outboundSchema;
  /** @deprecated use `MariadbDeploySpread$Outbound` instead. */
  export type Outbound = MariadbDeploySpread$Outbound;
}

export function mariadbDeploySpreadToJSON(
  mariadbDeploySpread: MariadbDeploySpread,
): string {
  return JSON.stringify(
    MariadbDeploySpread$outboundSchema.parse(mariadbDeploySpread),
  );
}

export function mariadbDeploySpreadFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeploySpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeploySpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeploySpread' from JSON`,
  );
}

/** @internal */
export const MariadbDeployPreference$inboundSchema: z.ZodType<
  MariadbDeployPreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => MariadbDeploySpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type MariadbDeployPreference$Outbound = {
  Spread: MariadbDeploySpread$Outbound;
};

/** @internal */
export const MariadbDeployPreference$outboundSchema: z.ZodType<
  MariadbDeployPreference$Outbound,
  z.ZodTypeDef,
  MariadbDeployPreference
> = z.object({
  spread: z.lazy(() => MariadbDeploySpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployPreference$ {
  /** @deprecated use `MariadbDeployPreference$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployPreference$inboundSchema;
  /** @deprecated use `MariadbDeployPreference$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployPreference$outboundSchema;
  /** @deprecated use `MariadbDeployPreference$Outbound` instead. */
  export type Outbound = MariadbDeployPreference$Outbound;
}

export function mariadbDeployPreferenceToJSON(
  mariadbDeployPreference: MariadbDeployPreference,
): string {
  return JSON.stringify(
    MariadbDeployPreference$outboundSchema.parse(mariadbDeployPreference),
  );
}

export function mariadbDeployPreferenceFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployPreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployPreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployPreference' from JSON`,
  );
}

/** @internal */
export const MariadbDeployPlatform$inboundSchema: z.ZodType<
  MariadbDeployPlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type MariadbDeployPlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const MariadbDeployPlatform$outboundSchema: z.ZodType<
  MariadbDeployPlatform$Outbound,
  z.ZodTypeDef,
  MariadbDeployPlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployPlatform$ {
  /** @deprecated use `MariadbDeployPlatform$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployPlatform$inboundSchema;
  /** @deprecated use `MariadbDeployPlatform$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployPlatform$outboundSchema;
  /** @deprecated use `MariadbDeployPlatform$Outbound` instead. */
  export type Outbound = MariadbDeployPlatform$Outbound;
}

export function mariadbDeployPlatformToJSON(
  mariadbDeployPlatform: MariadbDeployPlatform,
): string {
  return JSON.stringify(
    MariadbDeployPlatform$outboundSchema.parse(mariadbDeployPlatform),
  );
}

export function mariadbDeployPlatformFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployPlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployPlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployPlatform' from JSON`,
  );
}

/** @internal */
export const MariadbDeployPlacementSwarm$inboundSchema: z.ZodType<
  MariadbDeployPlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  Preferences: z.array(z.lazy(() => MariadbDeployPreference$inboundSchema))
    .optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => MariadbDeployPlatform$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "Preferences": "preferences",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
  });
});

/** @internal */
export type MariadbDeployPlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  Preferences?: Array<MariadbDeployPreference$Outbound> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<MariadbDeployPlatform$Outbound> | undefined;
};

/** @internal */
export const MariadbDeployPlacementSwarm$outboundSchema: z.ZodType<
  MariadbDeployPlacementSwarm$Outbound,
  z.ZodTypeDef,
  MariadbDeployPlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  preferences: z.array(z.lazy(() => MariadbDeployPreference$outboundSchema))
    .optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => MariadbDeployPlatform$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    preferences: "Preferences",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployPlacementSwarm$ {
  /** @deprecated use `MariadbDeployPlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployPlacementSwarm$inboundSchema;
  /** @deprecated use `MariadbDeployPlacementSwarm$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployPlacementSwarm$outboundSchema;
  /** @deprecated use `MariadbDeployPlacementSwarm$Outbound` instead. */
  export type Outbound = MariadbDeployPlacementSwarm$Outbound;
}

export function mariadbDeployPlacementSwarmToJSON(
  mariadbDeployPlacementSwarm: MariadbDeployPlacementSwarm,
): string {
  return JSON.stringify(
    MariadbDeployPlacementSwarm$outboundSchema.parse(
      mariadbDeployPlacementSwarm,
    ),
  );
}

export function mariadbDeployPlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployPlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployPlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployPlacementSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbDeployUpdateConfigSwarm$inboundSchema: z.ZodType<
  MariadbDeployUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type MariadbDeployUpdateConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const MariadbDeployUpdateConfigSwarm$outboundSchema: z.ZodType<
  MariadbDeployUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  MariadbDeployUpdateConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployUpdateConfigSwarm$ {
  /** @deprecated use `MariadbDeployUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `MariadbDeployUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `MariadbDeployUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = MariadbDeployUpdateConfigSwarm$Outbound;
}

export function mariadbDeployUpdateConfigSwarmToJSON(
  mariadbDeployUpdateConfigSwarm: MariadbDeployUpdateConfigSwarm,
): string {
  return JSON.stringify(
    MariadbDeployUpdateConfigSwarm$outboundSchema.parse(
      mariadbDeployUpdateConfigSwarm,
    ),
  );
}

export function mariadbDeployUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbDeployRollbackConfigSwarm$inboundSchema: z.ZodType<
  MariadbDeployRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type MariadbDeployRollbackConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const MariadbDeployRollbackConfigSwarm$outboundSchema: z.ZodType<
  MariadbDeployRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  MariadbDeployRollbackConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployRollbackConfigSwarm$ {
  /** @deprecated use `MariadbDeployRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `MariadbDeployRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `MariadbDeployRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = MariadbDeployRollbackConfigSwarm$Outbound;
}

export function mariadbDeployRollbackConfigSwarmToJSON(
  mariadbDeployRollbackConfigSwarm: MariadbDeployRollbackConfigSwarm,
): string {
  return JSON.stringify(
    MariadbDeployRollbackConfigSwarm$outboundSchema.parse(
      mariadbDeployRollbackConfigSwarm,
    ),
  );
}

export function mariadbDeployRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployRollbackConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployRollbackConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbDeployReplicated$inboundSchema: z.ZodType<
  MariadbDeployReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type MariadbDeployReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const MariadbDeployReplicated$outboundSchema: z.ZodType<
  MariadbDeployReplicated$Outbound,
  z.ZodTypeDef,
  MariadbDeployReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployReplicated$ {
  /** @deprecated use `MariadbDeployReplicated$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployReplicated$inboundSchema;
  /** @deprecated use `MariadbDeployReplicated$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployReplicated$outboundSchema;
  /** @deprecated use `MariadbDeployReplicated$Outbound` instead. */
  export type Outbound = MariadbDeployReplicated$Outbound;
}

export function mariadbDeployReplicatedToJSON(
  mariadbDeployReplicated: MariadbDeployReplicated,
): string {
  return JSON.stringify(
    MariadbDeployReplicated$outboundSchema.parse(mariadbDeployReplicated),
  );
}

export function mariadbDeployReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployReplicated' from JSON`,
  );
}

/** @internal */
export const MariadbDeployGlobal$inboundSchema: z.ZodType<
  MariadbDeployGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MariadbDeployGlobal$Outbound = {};

/** @internal */
export const MariadbDeployGlobal$outboundSchema: z.ZodType<
  MariadbDeployGlobal$Outbound,
  z.ZodTypeDef,
  MariadbDeployGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployGlobal$ {
  /** @deprecated use `MariadbDeployGlobal$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployGlobal$inboundSchema;
  /** @deprecated use `MariadbDeployGlobal$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployGlobal$outboundSchema;
  /** @deprecated use `MariadbDeployGlobal$Outbound` instead. */
  export type Outbound = MariadbDeployGlobal$Outbound;
}

export function mariadbDeployGlobalToJSON(
  mariadbDeployGlobal: MariadbDeployGlobal,
): string {
  return JSON.stringify(
    MariadbDeployGlobal$outboundSchema.parse(mariadbDeployGlobal),
  );
}

export function mariadbDeployGlobalFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployGlobal' from JSON`,
  );
}

/** @internal */
export const MariadbDeployReplicatedJob$inboundSchema: z.ZodType<
  MariadbDeployReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type MariadbDeployReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const MariadbDeployReplicatedJob$outboundSchema: z.ZodType<
  MariadbDeployReplicatedJob$Outbound,
  z.ZodTypeDef,
  MariadbDeployReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployReplicatedJob$ {
  /** @deprecated use `MariadbDeployReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployReplicatedJob$inboundSchema;
  /** @deprecated use `MariadbDeployReplicatedJob$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployReplicatedJob$outboundSchema;
  /** @deprecated use `MariadbDeployReplicatedJob$Outbound` instead. */
  export type Outbound = MariadbDeployReplicatedJob$Outbound;
}

export function mariadbDeployReplicatedJobToJSON(
  mariadbDeployReplicatedJob: MariadbDeployReplicatedJob,
): string {
  return JSON.stringify(
    MariadbDeployReplicatedJob$outboundSchema.parse(mariadbDeployReplicatedJob),
  );
}

export function mariadbDeployReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployReplicatedJob' from JSON`,
  );
}

/** @internal */
export const MariadbDeployGlobalJob$inboundSchema: z.ZodType<
  MariadbDeployGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MariadbDeployGlobalJob$Outbound = {};

/** @internal */
export const MariadbDeployGlobalJob$outboundSchema: z.ZodType<
  MariadbDeployGlobalJob$Outbound,
  z.ZodTypeDef,
  MariadbDeployGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployGlobalJob$ {
  /** @deprecated use `MariadbDeployGlobalJob$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployGlobalJob$inboundSchema;
  /** @deprecated use `MariadbDeployGlobalJob$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployGlobalJob$outboundSchema;
  /** @deprecated use `MariadbDeployGlobalJob$Outbound` instead. */
  export type Outbound = MariadbDeployGlobalJob$Outbound;
}

export function mariadbDeployGlobalJobToJSON(
  mariadbDeployGlobalJob: MariadbDeployGlobalJob,
): string {
  return JSON.stringify(
    MariadbDeployGlobalJob$outboundSchema.parse(mariadbDeployGlobalJob),
  );
}

export function mariadbDeployGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployGlobalJob' from JSON`,
  );
}

/** @internal */
export const MariadbDeployModeSwarm$inboundSchema: z.ZodType<
  MariadbDeployModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicated: z.lazy(() => MariadbDeployReplicated$inboundSchema).optional(),
  Global: z.lazy(() => MariadbDeployGlobal$inboundSchema).optional(),
  ReplicatedJob: z.lazy(() => MariadbDeployReplicatedJob$inboundSchema)
    .optional(),
  GlobalJob: z.lazy(() => MariadbDeployGlobalJob$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicated": "replicated",
    "Global": "global",
    "ReplicatedJob": "replicatedJob",
    "GlobalJob": "globalJob",
  });
});

/** @internal */
export type MariadbDeployModeSwarm$Outbound = {
  Replicated?: MariadbDeployReplicated$Outbound | undefined;
  Global?: MariadbDeployGlobal$Outbound | undefined;
  ReplicatedJob?: MariadbDeployReplicatedJob$Outbound | undefined;
  GlobalJob?: MariadbDeployGlobalJob$Outbound | undefined;
};

/** @internal */
export const MariadbDeployModeSwarm$outboundSchema: z.ZodType<
  MariadbDeployModeSwarm$Outbound,
  z.ZodTypeDef,
  MariadbDeployModeSwarm
> = z.object({
  replicated: z.lazy(() => MariadbDeployReplicated$outboundSchema).optional(),
  global: z.lazy(() => MariadbDeployGlobal$outboundSchema).optional(),
  replicatedJob: z.lazy(() => MariadbDeployReplicatedJob$outboundSchema)
    .optional(),
  globalJob: z.lazy(() => MariadbDeployGlobalJob$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    replicated: "Replicated",
    global: "Global",
    replicatedJob: "ReplicatedJob",
    globalJob: "GlobalJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployModeSwarm$ {
  /** @deprecated use `MariadbDeployModeSwarm$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployModeSwarm$inboundSchema;
  /** @deprecated use `MariadbDeployModeSwarm$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployModeSwarm$outboundSchema;
  /** @deprecated use `MariadbDeployModeSwarm$Outbound` instead. */
  export type Outbound = MariadbDeployModeSwarm$Outbound;
}

export function mariadbDeployModeSwarmToJSON(
  mariadbDeployModeSwarm: MariadbDeployModeSwarm,
): string {
  return JSON.stringify(
    MariadbDeployModeSwarm$outboundSchema.parse(mariadbDeployModeSwarm),
  );
}

export function mariadbDeployModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployModeSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbDeployDriverOpts$inboundSchema: z.ZodType<
  MariadbDeployDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MariadbDeployDriverOpts$Outbound = {};

/** @internal */
export const MariadbDeployDriverOpts$outboundSchema: z.ZodType<
  MariadbDeployDriverOpts$Outbound,
  z.ZodTypeDef,
  MariadbDeployDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployDriverOpts$ {
  /** @deprecated use `MariadbDeployDriverOpts$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployDriverOpts$inboundSchema;
  /** @deprecated use `MariadbDeployDriverOpts$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployDriverOpts$outboundSchema;
  /** @deprecated use `MariadbDeployDriverOpts$Outbound` instead. */
  export type Outbound = MariadbDeployDriverOpts$Outbound;
}

export function mariadbDeployDriverOptsToJSON(
  mariadbDeployDriverOpts: MariadbDeployDriverOpts,
): string {
  return JSON.stringify(
    MariadbDeployDriverOpts$outboundSchema.parse(mariadbDeployDriverOpts),
  );
}

export function mariadbDeployDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployDriverOpts' from JSON`,
  );
}

/** @internal */
export const MariadbDeployNetworkSwarm$inboundSchema: z.ZodType<
  MariadbDeployNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Target: z.string().optional(),
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => MariadbDeployDriverOpts$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Target": "target",
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
  });
});

/** @internal */
export type MariadbDeployNetworkSwarm$Outbound = {
  Target?: string | undefined;
  Aliases?: Array<string> | undefined;
  DriverOpts?: MariadbDeployDriverOpts$Outbound | undefined;
};

/** @internal */
export const MariadbDeployNetworkSwarm$outboundSchema: z.ZodType<
  MariadbDeployNetworkSwarm$Outbound,
  z.ZodTypeDef,
  MariadbDeployNetworkSwarm
> = z.object({
  target: z.string().optional(),
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => MariadbDeployDriverOpts$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    target: "Target",
    aliases: "Aliases",
    driverOpts: "DriverOpts",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployNetworkSwarm$ {
  /** @deprecated use `MariadbDeployNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployNetworkSwarm$inboundSchema;
  /** @deprecated use `MariadbDeployNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployNetworkSwarm$outboundSchema;
  /** @deprecated use `MariadbDeployNetworkSwarm$Outbound` instead. */
  export type Outbound = MariadbDeployNetworkSwarm$Outbound;
}

export function mariadbDeployNetworkSwarmToJSON(
  mariadbDeployNetworkSwarm: MariadbDeployNetworkSwarm,
): string {
  return JSON.stringify(
    MariadbDeployNetworkSwarm$outboundSchema.parse(mariadbDeployNetworkSwarm),
  );
}

export function mariadbDeployNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbDeployProject$inboundSchema: z.ZodType<
  MariadbDeployProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  organizationId: z.string(),
  env: z.string(),
});

/** @internal */
export type MariadbDeployProject$Outbound = {
  projectId: string;
  name: string;
  description: string | null;
  createdAt: string;
  organizationId: string;
  env: string;
};

/** @internal */
export const MariadbDeployProject$outboundSchema: z.ZodType<
  MariadbDeployProject$Outbound,
  z.ZodTypeDef,
  MariadbDeployProject
> = z.object({
  projectId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  organizationId: z.string(),
  env: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployProject$ {
  /** @deprecated use `MariadbDeployProject$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployProject$inboundSchema;
  /** @deprecated use `MariadbDeployProject$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployProject$outboundSchema;
  /** @deprecated use `MariadbDeployProject$Outbound` instead. */
  export type Outbound = MariadbDeployProject$Outbound;
}

export function mariadbDeployProjectToJSON(
  mariadbDeployProject: MariadbDeployProject,
): string {
  return JSON.stringify(
    MariadbDeployProject$outboundSchema.parse(mariadbDeployProject),
  );
}

export function mariadbDeployProjectFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployProject' from JSON`,
  );
}

/** @internal */
export const MariadbDeployEnvironment$inboundSchema: z.ZodType<
  MariadbDeployEnvironment,
  z.ZodTypeDef,
  unknown
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
  project: z.lazy(() => MariadbDeployProject$inboundSchema),
});

/** @internal */
export type MariadbDeployEnvironment$Outbound = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
  project: MariadbDeployProject$Outbound;
};

/** @internal */
export const MariadbDeployEnvironment$outboundSchema: z.ZodType<
  MariadbDeployEnvironment$Outbound,
  z.ZodTypeDef,
  MariadbDeployEnvironment
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
  project: z.lazy(() => MariadbDeployProject$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployEnvironment$ {
  /** @deprecated use `MariadbDeployEnvironment$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployEnvironment$inboundSchema;
  /** @deprecated use `MariadbDeployEnvironment$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployEnvironment$outboundSchema;
  /** @deprecated use `MariadbDeployEnvironment$Outbound` instead. */
  export type Outbound = MariadbDeployEnvironment$Outbound;
}

export function mariadbDeployEnvironmentToJSON(
  mariadbDeployEnvironment: MariadbDeployEnvironment,
): string {
  return JSON.stringify(
    MariadbDeployEnvironment$outboundSchema.parse(mariadbDeployEnvironment),
  );
}

export function mariadbDeployEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployEnvironment' from JSON`,
  );
}

/** @internal */
export const MariadbDeployType$inboundSchema: z.ZodNativeEnum<
  typeof MariadbDeployType
> = z.nativeEnum(MariadbDeployType);

/** @internal */
export const MariadbDeployType$outboundSchema: z.ZodNativeEnum<
  typeof MariadbDeployType
> = MariadbDeployType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployType$ {
  /** @deprecated use `MariadbDeployType$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployType$inboundSchema;
  /** @deprecated use `MariadbDeployType$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployType$outboundSchema;
}

/** @internal */
export const MariadbDeployServiceType$inboundSchema: z.ZodNativeEnum<
  typeof MariadbDeployServiceType
> = z.nativeEnum(MariadbDeployServiceType);

/** @internal */
export const MariadbDeployServiceType$outboundSchema: z.ZodNativeEnum<
  typeof MariadbDeployServiceType
> = MariadbDeployServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployServiceType$ {
  /** @deprecated use `MariadbDeployServiceType$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployServiceType$inboundSchema;
  /** @deprecated use `MariadbDeployServiceType$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployServiceType$outboundSchema;
}

/** @internal */
export const MariadbDeployMount$inboundSchema: z.ZodType<
  MariadbDeployMount,
  z.ZodTypeDef,
  unknown
> = z.object({
  mountId: z.string(),
  type: MariadbDeployType$inboundSchema,
  hostPath: z.nullable(z.string()),
  volumeName: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  content: z.nullable(z.string()),
  serviceType: MariadbDeployServiceType$inboundSchema,
  mountPath: z.string(),
  applicationId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
});

/** @internal */
export type MariadbDeployMount$Outbound = {
  mountId: string;
  type: string;
  hostPath: string | null;
  volumeName: string | null;
  filePath: string | null;
  content: string | null;
  serviceType: string;
  mountPath: string;
  applicationId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mysqlId: string | null;
  redisId: string | null;
  composeId: string | null;
};

/** @internal */
export const MariadbDeployMount$outboundSchema: z.ZodType<
  MariadbDeployMount$Outbound,
  z.ZodTypeDef,
  MariadbDeployMount
> = z.object({
  mountId: z.string(),
  type: MariadbDeployType$outboundSchema,
  hostPath: z.nullable(z.string()),
  volumeName: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  content: z.nullable(z.string()),
  serviceType: MariadbDeployServiceType$outboundSchema,
  mountPath: z.string(),
  applicationId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployMount$ {
  /** @deprecated use `MariadbDeployMount$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployMount$inboundSchema;
  /** @deprecated use `MariadbDeployMount$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployMount$outboundSchema;
  /** @deprecated use `MariadbDeployMount$Outbound` instead. */
  export type Outbound = MariadbDeployMount$Outbound;
}

export function mariadbDeployMountToJSON(
  mariadbDeployMount: MariadbDeployMount,
): string {
  return JSON.stringify(
    MariadbDeployMount$outboundSchema.parse(mariadbDeployMount),
  );
}

export function mariadbDeployMountFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployMount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployMount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployMount' from JSON`,
  );
}

/** @internal */
export const MariadbDeployServerStatus$inboundSchema: z.ZodNativeEnum<
  typeof MariadbDeployServerStatus
> = z.nativeEnum(MariadbDeployServerStatus);

/** @internal */
export const MariadbDeployServerStatus$outboundSchema: z.ZodNativeEnum<
  typeof MariadbDeployServerStatus
> = MariadbDeployServerStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployServerStatus$ {
  /** @deprecated use `MariadbDeployServerStatus$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployServerStatus$inboundSchema;
  /** @deprecated use `MariadbDeployServerStatus$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployServerStatus$outboundSchema;
}

/** @internal */
export const MariadbDeployMetricsConfigEnum$inboundSchema: z.ZodNativeEnum<
  typeof MariadbDeployMetricsConfigEnum
> = z.nativeEnum(MariadbDeployMetricsConfigEnum);

/** @internal */
export const MariadbDeployMetricsConfigEnum$outboundSchema: z.ZodNativeEnum<
  typeof MariadbDeployMetricsConfigEnum
> = MariadbDeployMetricsConfigEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployMetricsConfigEnum$ {
  /** @deprecated use `MariadbDeployMetricsConfigEnum$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployMetricsConfigEnum$inboundSchema;
  /** @deprecated use `MariadbDeployMetricsConfigEnum$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployMetricsConfigEnum$outboundSchema;
}

/** @internal */
export const MariadbDeployMetricsConfigUnion1$inboundSchema: z.ZodType<
  MariadbDeployMetricsConfigUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  MariadbDeployMetricsConfigEnum$inboundSchema,
]);

/** @internal */
export type MariadbDeployMetricsConfigUnion1$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const MariadbDeployMetricsConfigUnion1$outboundSchema: z.ZodType<
  MariadbDeployMetricsConfigUnion1$Outbound,
  z.ZodTypeDef,
  MariadbDeployMetricsConfigUnion1
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  MariadbDeployMetricsConfigEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployMetricsConfigUnion1$ {
  /** @deprecated use `MariadbDeployMetricsConfigUnion1$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployMetricsConfigUnion1$inboundSchema;
  /** @deprecated use `MariadbDeployMetricsConfigUnion1$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployMetricsConfigUnion1$outboundSchema;
  /** @deprecated use `MariadbDeployMetricsConfigUnion1$Outbound` instead. */
  export type Outbound = MariadbDeployMetricsConfigUnion1$Outbound;
}

export function mariadbDeployMetricsConfigUnion1ToJSON(
  mariadbDeployMetricsConfigUnion1: MariadbDeployMetricsConfigUnion1,
): string {
  return JSON.stringify(
    MariadbDeployMetricsConfigUnion1$outboundSchema.parse(
      mariadbDeployMetricsConfigUnion1,
    ),
  );
}

export function mariadbDeployMetricsConfigUnion1FromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployMetricsConfigUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployMetricsConfigUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployMetricsConfigUnion1' from JSON`,
  );
}

/** @internal */
export const MariadbDeployMetricsConfigUnion2$inboundSchema: z.ZodType<
  MariadbDeployMetricsConfigUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    MariadbDeployMetricsConfigEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type MariadbDeployMetricsConfigUnion2$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const MariadbDeployMetricsConfigUnion2$outboundSchema: z.ZodType<
  MariadbDeployMetricsConfigUnion2$Outbound,
  z.ZodTypeDef,
  MariadbDeployMetricsConfigUnion2
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    MariadbDeployMetricsConfigEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployMetricsConfigUnion2$ {
  /** @deprecated use `MariadbDeployMetricsConfigUnion2$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployMetricsConfigUnion2$inboundSchema;
  /** @deprecated use `MariadbDeployMetricsConfigUnion2$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployMetricsConfigUnion2$outboundSchema;
  /** @deprecated use `MariadbDeployMetricsConfigUnion2$Outbound` instead. */
  export type Outbound = MariadbDeployMetricsConfigUnion2$Outbound;
}

export function mariadbDeployMetricsConfigUnion2ToJSON(
  mariadbDeployMetricsConfigUnion2: MariadbDeployMetricsConfigUnion2,
): string {
  return JSON.stringify(
    MariadbDeployMetricsConfigUnion2$outboundSchema.parse(
      mariadbDeployMetricsConfigUnion2,
    ),
  );
}

export function mariadbDeployMetricsConfigUnion2FromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployMetricsConfigUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployMetricsConfigUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployMetricsConfigUnion2' from JSON`,
  );
}

/** @internal */
export const MariadbDeployServer$inboundSchema: z.ZodType<
  MariadbDeployServer,
  z.ZodTypeDef,
  unknown
> = z.object({
  serverId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  ipAddress: z.string(),
  port: z.number(),
  username: z.string(),
  appName: z.string(),
  enableDockerCleanup: z.boolean(),
  createdAt: z.string(),
  organizationId: z.string(),
  serverStatus: MariadbDeployServerStatus$inboundSchema,
  command: z.string(),
  sshKeyId: z.nullable(z.string()),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      MariadbDeployMetricsConfigEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
});

/** @internal */
export type MariadbDeployServer$Outbound = {
  serverId: string;
  name: string;
  description: string | null;
  ipAddress: string;
  port: number;
  username: string;
  appName: string;
  enableDockerCleanup: boolean;
  createdAt: string;
  organizationId: string;
  serverStatus: string;
  command: string;
  sshKeyId: string | null;
  metricsConfig: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  };
};

/** @internal */
export const MariadbDeployServer$outboundSchema: z.ZodType<
  MariadbDeployServer$Outbound,
  z.ZodTypeDef,
  MariadbDeployServer
> = z.object({
  serverId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  ipAddress: z.string(),
  port: z.number(),
  username: z.string(),
  appName: z.string(),
  enableDockerCleanup: z.boolean(),
  createdAt: z.string(),
  organizationId: z.string(),
  serverStatus: MariadbDeployServerStatus$outboundSchema,
  command: z.string(),
  sshKeyId: z.nullable(z.string()),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      MariadbDeployMetricsConfigEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployServer$ {
  /** @deprecated use `MariadbDeployServer$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployServer$inboundSchema;
  /** @deprecated use `MariadbDeployServer$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployServer$outboundSchema;
  /** @deprecated use `MariadbDeployServer$Outbound` instead. */
  export type Outbound = MariadbDeployServer$Outbound;
}

export function mariadbDeployServerToJSON(
  mariadbDeployServer: MariadbDeployServer,
): string {
  return JSON.stringify(
    MariadbDeployServer$outboundSchema.parse(mariadbDeployServer),
  );
}

export function mariadbDeployServerFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployServer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployServer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployServer' from JSON`,
  );
}

/** @internal */
export const MariadbDeployBackupType$inboundSchema: z.ZodNativeEnum<
  typeof MariadbDeployBackupType
> = z.nativeEnum(MariadbDeployBackupType);

/** @internal */
export const MariadbDeployBackupType$outboundSchema: z.ZodNativeEnum<
  typeof MariadbDeployBackupType
> = MariadbDeployBackupType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployBackupType$ {
  /** @deprecated use `MariadbDeployBackupType$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployBackupType$inboundSchema;
  /** @deprecated use `MariadbDeployBackupType$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployBackupType$outboundSchema;
}

/** @internal */
export const MariadbDeployDatabaseType$inboundSchema: z.ZodNativeEnum<
  typeof MariadbDeployDatabaseType
> = z.nativeEnum(MariadbDeployDatabaseType);

/** @internal */
export const MariadbDeployDatabaseType$outboundSchema: z.ZodNativeEnum<
  typeof MariadbDeployDatabaseType
> = MariadbDeployDatabaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployDatabaseType$ {
  /** @deprecated use `MariadbDeployDatabaseType$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployDatabaseType$inboundSchema;
  /** @deprecated use `MariadbDeployDatabaseType$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployDatabaseType$outboundSchema;
}

/** @internal */
export const MariadbDeployMetadataEnum$inboundSchema: z.ZodNativeEnum<
  typeof MariadbDeployMetadataEnum
> = z.nativeEnum(MariadbDeployMetadataEnum);

/** @internal */
export const MariadbDeployMetadataEnum$outboundSchema: z.ZodNativeEnum<
  typeof MariadbDeployMetadataEnum
> = MariadbDeployMetadataEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployMetadataEnum$ {
  /** @deprecated use `MariadbDeployMetadataEnum$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployMetadataEnum$inboundSchema;
  /** @deprecated use `MariadbDeployMetadataEnum$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployMetadataEnum$outboundSchema;
}

/** @internal */
export const MariadbDeployPostgres$inboundSchema: z.ZodType<
  MariadbDeployPostgres,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseUser: z.string(),
});

/** @internal */
export type MariadbDeployPostgres$Outbound = {
  databaseUser: string;
};

/** @internal */
export const MariadbDeployPostgres$outboundSchema: z.ZodType<
  MariadbDeployPostgres$Outbound,
  z.ZodTypeDef,
  MariadbDeployPostgres
> = z.object({
  databaseUser: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployPostgres$ {
  /** @deprecated use `MariadbDeployPostgres$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployPostgres$inboundSchema;
  /** @deprecated use `MariadbDeployPostgres$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployPostgres$outboundSchema;
  /** @deprecated use `MariadbDeployPostgres$Outbound` instead. */
  export type Outbound = MariadbDeployPostgres$Outbound;
}

export function mariadbDeployPostgresToJSON(
  mariadbDeployPostgres: MariadbDeployPostgres,
): string {
  return JSON.stringify(
    MariadbDeployPostgres$outboundSchema.parse(mariadbDeployPostgres),
  );
}

export function mariadbDeployPostgresFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployPostgres, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployPostgres$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployPostgres' from JSON`,
  );
}

/** @internal */
export const MariadbDeployMariadb$inboundSchema: z.ZodType<
  MariadbDeployMariadb,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseUser: z.string(),
  databasePassword: z.string(),
});

/** @internal */
export type MariadbDeployMariadb$Outbound = {
  databaseUser: string;
  databasePassword: string;
};

/** @internal */
export const MariadbDeployMariadb$outboundSchema: z.ZodType<
  MariadbDeployMariadb$Outbound,
  z.ZodTypeDef,
  MariadbDeployMariadb
> = z.object({
  databaseUser: z.string(),
  databasePassword: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployMariadb$ {
  /** @deprecated use `MariadbDeployMariadb$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployMariadb$inboundSchema;
  /** @deprecated use `MariadbDeployMariadb$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployMariadb$outboundSchema;
  /** @deprecated use `MariadbDeployMariadb$Outbound` instead. */
  export type Outbound = MariadbDeployMariadb$Outbound;
}

export function mariadbDeployMariadbToJSON(
  mariadbDeployMariadb: MariadbDeployMariadb,
): string {
  return JSON.stringify(
    MariadbDeployMariadb$outboundSchema.parse(mariadbDeployMariadb),
  );
}

export function mariadbDeployMariadbFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployMariadb, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployMariadb$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployMariadb' from JSON`,
  );
}

/** @internal */
export const MariadbDeployMongo$inboundSchema: z.ZodType<
  MariadbDeployMongo,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseUser: z.string(),
  databasePassword: z.string(),
});

/** @internal */
export type MariadbDeployMongo$Outbound = {
  databaseUser: string;
  databasePassword: string;
};

/** @internal */
export const MariadbDeployMongo$outboundSchema: z.ZodType<
  MariadbDeployMongo$Outbound,
  z.ZodTypeDef,
  MariadbDeployMongo
> = z.object({
  databaseUser: z.string(),
  databasePassword: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployMongo$ {
  /** @deprecated use `MariadbDeployMongo$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployMongo$inboundSchema;
  /** @deprecated use `MariadbDeployMongo$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployMongo$outboundSchema;
  /** @deprecated use `MariadbDeployMongo$Outbound` instead. */
  export type Outbound = MariadbDeployMongo$Outbound;
}

export function mariadbDeployMongoToJSON(
  mariadbDeployMongo: MariadbDeployMongo,
): string {
  return JSON.stringify(
    MariadbDeployMongo$outboundSchema.parse(mariadbDeployMongo),
  );
}

export function mariadbDeployMongoFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployMongo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployMongo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployMongo' from JSON`,
  );
}

/** @internal */
export const MariadbDeployMysql$inboundSchema: z.ZodType<
  MariadbDeployMysql,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseRootPassword: z.string(),
});

/** @internal */
export type MariadbDeployMysql$Outbound = {
  databaseRootPassword: string;
};

/** @internal */
export const MariadbDeployMysql$outboundSchema: z.ZodType<
  MariadbDeployMysql$Outbound,
  z.ZodTypeDef,
  MariadbDeployMysql
> = z.object({
  databaseRootPassword: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployMysql$ {
  /** @deprecated use `MariadbDeployMysql$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployMysql$inboundSchema;
  /** @deprecated use `MariadbDeployMysql$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployMysql$outboundSchema;
  /** @deprecated use `MariadbDeployMysql$Outbound` instead. */
  export type Outbound = MariadbDeployMysql$Outbound;
}

export function mariadbDeployMysqlToJSON(
  mariadbDeployMysql: MariadbDeployMysql,
): string {
  return JSON.stringify(
    MariadbDeployMysql$outboundSchema.parse(mariadbDeployMysql),
  );
}

export function mariadbDeployMysqlFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployMysql, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployMysql$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployMysql' from JSON`,
  );
}

/** @internal */
export const MariadbDeployMetadata$inboundSchema: z.ZodType<
  MariadbDeployMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  postgres: z.lazy(() => MariadbDeployPostgres$inboundSchema).optional(),
  mariadb: z.lazy(() => MariadbDeployMariadb$inboundSchema).optional(),
  mongo: z.lazy(() => MariadbDeployMongo$inboundSchema).optional(),
  mysql: z.lazy(() => MariadbDeployMysql$inboundSchema).optional(),
});

/** @internal */
export type MariadbDeployMetadata$Outbound = {
  postgres?: MariadbDeployPostgres$Outbound | undefined;
  mariadb?: MariadbDeployMariadb$Outbound | undefined;
  mongo?: MariadbDeployMongo$Outbound | undefined;
  mysql?: MariadbDeployMysql$Outbound | undefined;
};

/** @internal */
export const MariadbDeployMetadata$outboundSchema: z.ZodType<
  MariadbDeployMetadata$Outbound,
  z.ZodTypeDef,
  MariadbDeployMetadata
> = z.object({
  postgres: z.lazy(() => MariadbDeployPostgres$outboundSchema).optional(),
  mariadb: z.lazy(() => MariadbDeployMariadb$outboundSchema).optional(),
  mongo: z.lazy(() => MariadbDeployMongo$outboundSchema).optional(),
  mysql: z.lazy(() => MariadbDeployMysql$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployMetadata$ {
  /** @deprecated use `MariadbDeployMetadata$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployMetadata$inboundSchema;
  /** @deprecated use `MariadbDeployMetadata$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployMetadata$outboundSchema;
  /** @deprecated use `MariadbDeployMetadata$Outbound` instead. */
  export type Outbound = MariadbDeployMetadata$Outbound;
}

export function mariadbDeployMetadataToJSON(
  mariadbDeployMetadata: MariadbDeployMetadata,
): string {
  return JSON.stringify(
    MariadbDeployMetadata$outboundSchema.parse(mariadbDeployMetadata),
  );
}

export function mariadbDeployMetadataFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployMetadata' from JSON`,
  );
}

/** @internal */
export const MariadbDeployMetadataUnion$inboundSchema: z.ZodType<
  MariadbDeployMetadataUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => MariadbDeployMetadata$inboundSchema),
  MariadbDeployMetadataEnum$inboundSchema,
]);

/** @internal */
export type MariadbDeployMetadataUnion$Outbound =
  | MariadbDeployMetadata$Outbound
  | string;

/** @internal */
export const MariadbDeployMetadataUnion$outboundSchema: z.ZodType<
  MariadbDeployMetadataUnion$Outbound,
  z.ZodTypeDef,
  MariadbDeployMetadataUnion
> = z.union([
  z.lazy(() => MariadbDeployMetadata$outboundSchema),
  MariadbDeployMetadataEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployMetadataUnion$ {
  /** @deprecated use `MariadbDeployMetadataUnion$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployMetadataUnion$inboundSchema;
  /** @deprecated use `MariadbDeployMetadataUnion$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployMetadataUnion$outboundSchema;
  /** @deprecated use `MariadbDeployMetadataUnion$Outbound` instead. */
  export type Outbound = MariadbDeployMetadataUnion$Outbound;
}

export function mariadbDeployMetadataUnionToJSON(
  mariadbDeployMetadataUnion: MariadbDeployMetadataUnion,
): string {
  return JSON.stringify(
    MariadbDeployMetadataUnion$outboundSchema.parse(mariadbDeployMetadataUnion),
  );
}

export function mariadbDeployMetadataUnionFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployMetadataUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployMetadataUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployMetadataUnion' from JSON`,
  );
}

/** @internal */
export const MariadbDeployBackup$inboundSchema: z.ZodType<
  MariadbDeployBackup,
  z.ZodTypeDef,
  unknown
> = z.object({
  backupId: z.string(),
  appName: z.string(),
  schedule: z.string(),
  enabled: z.nullable(z.boolean()),
  database: z.string(),
  prefix: z.string(),
  serviceName: z.nullable(z.string()),
  destinationId: z.string(),
  keepLatestCount: z.nullable(z.number()),
  backupType: MariadbDeployBackupType$inboundSchema,
  databaseType: MariadbDeployDatabaseType$inboundSchema,
  composeId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  userId: z.nullable(z.string()),
  metadata: z.nullable(
    z.union([
      z.lazy(() => MariadbDeployMetadata$inboundSchema),
      MariadbDeployMetadataEnum$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type MariadbDeployBackup$Outbound = {
  backupId: string;
  appName: string;
  schedule: string;
  enabled: boolean | null;
  database: string;
  prefix: string;
  serviceName: string | null;
  destinationId: string;
  keepLatestCount: number | null;
  backupType: string;
  databaseType: string;
  composeId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mysqlId: string | null;
  mongoId: string | null;
  userId: string | null;
  metadata?: MariadbDeployMetadata$Outbound | string | null | undefined;
};

/** @internal */
export const MariadbDeployBackup$outboundSchema: z.ZodType<
  MariadbDeployBackup$Outbound,
  z.ZodTypeDef,
  MariadbDeployBackup
> = z.object({
  backupId: z.string(),
  appName: z.string(),
  schedule: z.string(),
  enabled: z.nullable(z.boolean()),
  database: z.string(),
  prefix: z.string(),
  serviceName: z.nullable(z.string()),
  destinationId: z.string(),
  keepLatestCount: z.nullable(z.number()),
  backupType: MariadbDeployBackupType$outboundSchema,
  databaseType: MariadbDeployDatabaseType$outboundSchema,
  composeId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  userId: z.nullable(z.string()),
  metadata: z.nullable(
    z.union([
      z.lazy(() => MariadbDeployMetadata$outboundSchema),
      MariadbDeployMetadataEnum$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployBackup$ {
  /** @deprecated use `MariadbDeployBackup$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployBackup$inboundSchema;
  /** @deprecated use `MariadbDeployBackup$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployBackup$outboundSchema;
  /** @deprecated use `MariadbDeployBackup$Outbound` instead. */
  export type Outbound = MariadbDeployBackup$Outbound;
}

export function mariadbDeployBackupToJSON(
  mariadbDeployBackup: MariadbDeployBackup,
): string {
  return JSON.stringify(
    MariadbDeployBackup$outboundSchema.parse(mariadbDeployBackup),
  );
}

export function mariadbDeployBackupFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployBackup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployBackup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployBackup' from JSON`,
  );
}

/** @internal */
export const MariadbDeployResponseBody$inboundSchema: z.ZodType<
  MariadbDeployResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  mariadbId: z.string(),
  name: z.string(),
  appName: z.string(),
  description: z.nullable(z.string()),
  databaseName: z.string(),
  databaseUser: z.string(),
  databasePassword: z.string(),
  databaseRootPassword: z.string(),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  applicationStatus: MariadbDeployApplicationStatus$inboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => MariadbDeployHealthCheckSwarm$inboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MariadbDeployRestartPolicySwarm$inboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => MariadbDeployPlacementSwarm$inboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MariadbDeployUpdateConfigSwarm$inboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MariadbDeployRollbackConfigSwarm$inboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => MariadbDeployModeSwarm$inboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MariadbDeployNetworkSwarm$inboundSchema)),
  ),
  replicas: z.number(),
  createdAt: z.string(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
  environment: z.lazy(() => MariadbDeployEnvironment$inboundSchema),
  mounts: z.array(z.lazy(() => MariadbDeployMount$inboundSchema)),
  server: z.nullable(z.lazy(() => MariadbDeployServer$inboundSchema)),
  backups: z.array(z.lazy(() => MariadbDeployBackup$inboundSchema)),
});

/** @internal */
export type MariadbDeployResponseBody$Outbound = {
  mariadbId: string;
  name: string;
  appName: string;
  description: string | null;
  databaseName: string;
  databaseUser: string;
  databasePassword: string;
  databaseRootPassword: string;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  externalPort: number | null;
  applicationStatus: string;
  healthCheckSwarm: MariadbDeployHealthCheckSwarm$Outbound | null;
  restartPolicySwarm: MariadbDeployRestartPolicySwarm$Outbound | null;
  placementSwarm: MariadbDeployPlacementSwarm$Outbound | null;
  updateConfigSwarm: MariadbDeployUpdateConfigSwarm$Outbound | null;
  rollbackConfigSwarm: MariadbDeployRollbackConfigSwarm$Outbound | null;
  modeSwarm: MariadbDeployModeSwarm$Outbound | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<MariadbDeployNetworkSwarm$Outbound> | null;
  replicas: number;
  createdAt: string;
  environmentId: string;
  serverId: string | null;
  environment: MariadbDeployEnvironment$Outbound;
  mounts: Array<MariadbDeployMount$Outbound>;
  server: MariadbDeployServer$Outbound | null;
  backups: Array<MariadbDeployBackup$Outbound>;
};

/** @internal */
export const MariadbDeployResponseBody$outboundSchema: z.ZodType<
  MariadbDeployResponseBody$Outbound,
  z.ZodTypeDef,
  MariadbDeployResponseBody
> = z.object({
  mariadbId: z.string(),
  name: z.string(),
  appName: z.string(),
  description: z.nullable(z.string()),
  databaseName: z.string(),
  databaseUser: z.string(),
  databasePassword: z.string(),
  databaseRootPassword: z.string(),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  applicationStatus: MariadbDeployApplicationStatus$outboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => MariadbDeployHealthCheckSwarm$outboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MariadbDeployRestartPolicySwarm$outboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => MariadbDeployPlacementSwarm$outboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MariadbDeployUpdateConfigSwarm$outboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MariadbDeployRollbackConfigSwarm$outboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => MariadbDeployModeSwarm$outboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MariadbDeployNetworkSwarm$outboundSchema)),
  ),
  replicas: z.number(),
  createdAt: z.string(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
  environment: z.lazy(() => MariadbDeployEnvironment$outboundSchema),
  mounts: z.array(z.lazy(() => MariadbDeployMount$outboundSchema)),
  server: z.nullable(z.lazy(() => MariadbDeployServer$outboundSchema)),
  backups: z.array(z.lazy(() => MariadbDeployBackup$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployResponseBody$ {
  /** @deprecated use `MariadbDeployResponseBody$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployResponseBody$inboundSchema;
  /** @deprecated use `MariadbDeployResponseBody$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployResponseBody$outboundSchema;
  /** @deprecated use `MariadbDeployResponseBody$Outbound` instead. */
  export type Outbound = MariadbDeployResponseBody$Outbound;
}

export function mariadbDeployResponseBodyToJSON(
  mariadbDeployResponseBody: MariadbDeployResponseBody,
): string {
  return JSON.stringify(
    MariadbDeployResponseBody$outboundSchema.parse(mariadbDeployResponseBody),
  );
}

export function mariadbDeployResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployResponseBody' from JSON`,
  );
}

/** @internal */
export const MariadbDeployResponse$inboundSchema: z.ZodType<
  MariadbDeployResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => MariadbDeployResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type MariadbDeployResponse$Outbound =
  | MariadbDeployResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const MariadbDeployResponse$outboundSchema: z.ZodType<
  MariadbDeployResponse$Outbound,
  z.ZodTypeDef,
  MariadbDeployResponse
> = z.union([
  z.lazy(() => MariadbDeployResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbDeployResponse$ {
  /** @deprecated use `MariadbDeployResponse$inboundSchema` instead. */
  export const inboundSchema = MariadbDeployResponse$inboundSchema;
  /** @deprecated use `MariadbDeployResponse$outboundSchema` instead. */
  export const outboundSchema = MariadbDeployResponse$outboundSchema;
  /** @deprecated use `MariadbDeployResponse$Outbound` instead. */
  export type Outbound = MariadbDeployResponse$Outbound;
}

export function mariadbDeployResponseToJSON(
  mariadbDeployResponse: MariadbDeployResponse,
): string {
  return JSON.stringify(
    MariadbDeployResponse$outboundSchema.parse(mariadbDeployResponse),
  );
}

export function mariadbDeployResponseFromJSON(
  jsonString: string,
): SafeParseResult<MariadbDeployResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbDeployResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbDeployResponse' from JSON`,
  );
}
