/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ProjectRemoveRequest = {
  projectId: string;
};

/**
 * Successful response
 */
export type ProjectRemoveResponseBody = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

export type ProjectRemoveResponse = ProjectRemoveResponseBody | models.ErrorT;

/** @internal */
export const ProjectRemoveRequest$inboundSchema: z.ZodType<
  ProjectRemoveRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
});

/** @internal */
export type ProjectRemoveRequest$Outbound = {
  projectId: string;
};

/** @internal */
export const ProjectRemoveRequest$outboundSchema: z.ZodType<
  ProjectRemoveRequest$Outbound,
  z.ZodTypeDef,
  ProjectRemoveRequest
> = z.object({
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectRemoveRequest$ {
  /** @deprecated use `ProjectRemoveRequest$inboundSchema` instead. */
  export const inboundSchema = ProjectRemoveRequest$inboundSchema;
  /** @deprecated use `ProjectRemoveRequest$outboundSchema` instead. */
  export const outboundSchema = ProjectRemoveRequest$outboundSchema;
  /** @deprecated use `ProjectRemoveRequest$Outbound` instead. */
  export type Outbound = ProjectRemoveRequest$Outbound;
}

export function projectRemoveRequestToJSON(
  projectRemoveRequest: ProjectRemoveRequest,
): string {
  return JSON.stringify(
    ProjectRemoveRequest$outboundSchema.parse(projectRemoveRequest),
  );
}

export function projectRemoveRequestFromJSON(
  jsonString: string,
): SafeParseResult<ProjectRemoveRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectRemoveRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectRemoveRequest' from JSON`,
  );
}

/** @internal */
export const ProjectRemoveResponseBody$inboundSchema: z.ZodType<
  ProjectRemoveResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/** @internal */
export type ProjectRemoveResponseBody$Outbound = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

/** @internal */
export const ProjectRemoveResponseBody$outboundSchema: z.ZodType<
  ProjectRemoveResponseBody$Outbound,
  z.ZodTypeDef,
  ProjectRemoveResponseBody
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectRemoveResponseBody$ {
  /** @deprecated use `ProjectRemoveResponseBody$inboundSchema` instead. */
  export const inboundSchema = ProjectRemoveResponseBody$inboundSchema;
  /** @deprecated use `ProjectRemoveResponseBody$outboundSchema` instead. */
  export const outboundSchema = ProjectRemoveResponseBody$outboundSchema;
  /** @deprecated use `ProjectRemoveResponseBody$Outbound` instead. */
  export type Outbound = ProjectRemoveResponseBody$Outbound;
}

export function projectRemoveResponseBodyToJSON(
  projectRemoveResponseBody: ProjectRemoveResponseBody,
): string {
  return JSON.stringify(
    ProjectRemoveResponseBody$outboundSchema.parse(projectRemoveResponseBody),
  );
}

export function projectRemoveResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ProjectRemoveResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectRemoveResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectRemoveResponseBody' from JSON`,
  );
}

/** @internal */
export const ProjectRemoveResponse$inboundSchema: z.ZodType<
  ProjectRemoveResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ProjectRemoveResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type ProjectRemoveResponse$Outbound =
  | ProjectRemoveResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const ProjectRemoveResponse$outboundSchema: z.ZodType<
  ProjectRemoveResponse$Outbound,
  z.ZodTypeDef,
  ProjectRemoveResponse
> = z.union([
  z.lazy(() => ProjectRemoveResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectRemoveResponse$ {
  /** @deprecated use `ProjectRemoveResponse$inboundSchema` instead. */
  export const inboundSchema = ProjectRemoveResponse$inboundSchema;
  /** @deprecated use `ProjectRemoveResponse$outboundSchema` instead. */
  export const outboundSchema = ProjectRemoveResponse$outboundSchema;
  /** @deprecated use `ProjectRemoveResponse$Outbound` instead. */
  export type Outbound = ProjectRemoveResponse$Outbound;
}

export function projectRemoveResponseToJSON(
  projectRemoveResponse: ProjectRemoveResponse,
): string {
  return JSON.stringify(
    ProjectRemoveResponse$outboundSchema.parse(projectRemoveResponse),
  );
}

export function projectRemoveResponseFromJSON(
  jsonString: string,
): SafeParseResult<ProjectRemoveResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectRemoveResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectRemoveResponse' from JSON`,
  );
}
