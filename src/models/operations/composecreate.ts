/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComposeCreateSecurity = {
  authorization: string;
};

export const ComposeCreateComposeType = {
  DockerCompose: "docker-compose",
  Stack: "stack",
} as const;
export type ComposeCreateComposeType = ClosedEnum<
  typeof ComposeCreateComposeType
>;

export type ComposeCreateRequest = {
  name: string;
  description?: string | null | undefined;
  environmentId: string;
  composeType?: ComposeCreateComposeType | undefined;
  appName?: string | undefined;
  serverId?: string | null | undefined;
  composeFile?: string | undefined;
};

/** @internal */
export const ComposeCreateSecurity$inboundSchema: z.ZodType<
  ComposeCreateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type ComposeCreateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const ComposeCreateSecurity$outboundSchema: z.ZodType<
  ComposeCreateSecurity$Outbound,
  z.ZodTypeDef,
  ComposeCreateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComposeCreateSecurity$ {
  /** @deprecated use `ComposeCreateSecurity$inboundSchema` instead. */
  export const inboundSchema = ComposeCreateSecurity$inboundSchema;
  /** @deprecated use `ComposeCreateSecurity$outboundSchema` instead. */
  export const outboundSchema = ComposeCreateSecurity$outboundSchema;
  /** @deprecated use `ComposeCreateSecurity$Outbound` instead. */
  export type Outbound = ComposeCreateSecurity$Outbound;
}

export function composeCreateSecurityToJSON(
  composeCreateSecurity: ComposeCreateSecurity,
): string {
  return JSON.stringify(
    ComposeCreateSecurity$outboundSchema.parse(composeCreateSecurity),
  );
}

export function composeCreateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ComposeCreateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComposeCreateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComposeCreateSecurity' from JSON`,
  );
}

/** @internal */
export const ComposeCreateComposeType$inboundSchema: z.ZodNativeEnum<
  typeof ComposeCreateComposeType
> = z.nativeEnum(ComposeCreateComposeType);

/** @internal */
export const ComposeCreateComposeType$outboundSchema: z.ZodNativeEnum<
  typeof ComposeCreateComposeType
> = ComposeCreateComposeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComposeCreateComposeType$ {
  /** @deprecated use `ComposeCreateComposeType$inboundSchema` instead. */
  export const inboundSchema = ComposeCreateComposeType$inboundSchema;
  /** @deprecated use `ComposeCreateComposeType$outboundSchema` instead. */
  export const outboundSchema = ComposeCreateComposeType$outboundSchema;
}

/** @internal */
export const ComposeCreateRequest$inboundSchema: z.ZodType<
  ComposeCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  environmentId: z.string(),
  composeType: ComposeCreateComposeType$inboundSchema.optional(),
  appName: z.string().optional(),
  serverId: z.nullable(z.string()).optional(),
  composeFile: z.string().optional(),
});

/** @internal */
export type ComposeCreateRequest$Outbound = {
  name: string;
  description?: string | null | undefined;
  environmentId: string;
  composeType?: string | undefined;
  appName?: string | undefined;
  serverId?: string | null | undefined;
  composeFile?: string | undefined;
};

/** @internal */
export const ComposeCreateRequest$outboundSchema: z.ZodType<
  ComposeCreateRequest$Outbound,
  z.ZodTypeDef,
  ComposeCreateRequest
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  environmentId: z.string(),
  composeType: ComposeCreateComposeType$outboundSchema.optional(),
  appName: z.string().optional(),
  serverId: z.nullable(z.string()).optional(),
  composeFile: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComposeCreateRequest$ {
  /** @deprecated use `ComposeCreateRequest$inboundSchema` instead. */
  export const inboundSchema = ComposeCreateRequest$inboundSchema;
  /** @deprecated use `ComposeCreateRequest$outboundSchema` instead. */
  export const outboundSchema = ComposeCreateRequest$outboundSchema;
  /** @deprecated use `ComposeCreateRequest$Outbound` instead. */
  export type Outbound = ComposeCreateRequest$Outbound;
}

export function composeCreateRequestToJSON(
  composeCreateRequest: ComposeCreateRequest,
): string {
  return JSON.stringify(
    ComposeCreateRequest$outboundSchema.parse(composeCreateRequest),
  );
}

export function composeCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<ComposeCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComposeCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComposeCreateRequest' from JSON`,
  );
}
