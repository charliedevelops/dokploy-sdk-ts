/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GitProviderGetAllSecurity = {
  authorization: string;
};

export const GitProviderGetAllProviderType = {
  Github: "github",
  Gitlab: "gitlab",
  Bitbucket: "bitbucket",
  Gitea: "gitea",
} as const;
export type GitProviderGetAllProviderType = ClosedEnum<
  typeof GitProviderGetAllProviderType
>;

export type GitProviderGetAllGitlab = {
  gitlabId: string;
  gitlabUrl: string;
  applicationId: string | null;
  redirectUri: string | null;
  secret: string | null;
  accessToken: string | null;
  refreshToken: string | null;
  groupName: string | null;
  expiresAt: number | null;
  gitProviderId: string;
};

export type GitProviderGetAllBitbucket = {
  bitbucketId: string;
  bitbucketUsername: string | null;
  appPassword: string | null;
  bitbucketWorkspaceName: string | null;
  gitProviderId: string;
};

export type GitProviderGetAllGithub = {
  githubId: string;
  githubAppName: string | null;
  githubAppId: number | null;
  githubClientId: string | null;
  githubClientSecret: string | null;
  githubInstallationId: string | null;
  githubPrivateKey: string | null;
  githubWebhookSecret: string | null;
  gitProviderId: string;
};

export type GitProviderGetAllGitea = {
  giteaId: string;
  giteaUrl: string;
  redirectUri: string | null;
  clientId: string | null;
  clientSecret: string | null;
  gitProviderId: string;
  accessToken: string | null;
  refreshToken: string | null;
  expiresAt: number | null;
  scopes: string | null;
  lastAuthenticatedAt: number | null;
};

export type GitProviderGetAllResponseBody = {
  gitProviderId: string;
  name: string;
  providerType: GitProviderGetAllProviderType;
  createdAt: string;
  organizationId: string;
  userId: string;
  gitlab: GitProviderGetAllGitlab | null;
  bitbucket: GitProviderGetAllBitbucket | null;
  github: GitProviderGetAllGithub | null;
  gitea: GitProviderGetAllGitea | null;
};

export type GitProviderGetAllResponse =
  | models.ErrorT
  | Array<GitProviderGetAllResponseBody>;

/** @internal */
export const GitProviderGetAllSecurity$inboundSchema: z.ZodType<
  GitProviderGetAllSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type GitProviderGetAllSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const GitProviderGetAllSecurity$outboundSchema: z.ZodType<
  GitProviderGetAllSecurity$Outbound,
  z.ZodTypeDef,
  GitProviderGetAllSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitProviderGetAllSecurity$ {
  /** @deprecated use `GitProviderGetAllSecurity$inboundSchema` instead. */
  export const inboundSchema = GitProviderGetAllSecurity$inboundSchema;
  /** @deprecated use `GitProviderGetAllSecurity$outboundSchema` instead. */
  export const outboundSchema = GitProviderGetAllSecurity$outboundSchema;
  /** @deprecated use `GitProviderGetAllSecurity$Outbound` instead. */
  export type Outbound = GitProviderGetAllSecurity$Outbound;
}

export function gitProviderGetAllSecurityToJSON(
  gitProviderGetAllSecurity: GitProviderGetAllSecurity,
): string {
  return JSON.stringify(
    GitProviderGetAllSecurity$outboundSchema.parse(gitProviderGetAllSecurity),
  );
}

export function gitProviderGetAllSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GitProviderGetAllSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitProviderGetAllSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitProviderGetAllSecurity' from JSON`,
  );
}

/** @internal */
export const GitProviderGetAllProviderType$inboundSchema: z.ZodNativeEnum<
  typeof GitProviderGetAllProviderType
> = z.nativeEnum(GitProviderGetAllProviderType);

/** @internal */
export const GitProviderGetAllProviderType$outboundSchema: z.ZodNativeEnum<
  typeof GitProviderGetAllProviderType
> = GitProviderGetAllProviderType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitProviderGetAllProviderType$ {
  /** @deprecated use `GitProviderGetAllProviderType$inboundSchema` instead. */
  export const inboundSchema = GitProviderGetAllProviderType$inboundSchema;
  /** @deprecated use `GitProviderGetAllProviderType$outboundSchema` instead. */
  export const outboundSchema = GitProviderGetAllProviderType$outboundSchema;
}

/** @internal */
export const GitProviderGetAllGitlab$inboundSchema: z.ZodType<
  GitProviderGetAllGitlab,
  z.ZodTypeDef,
  unknown
> = z.object({
  gitlabId: z.string(),
  gitlabUrl: z.string(),
  applicationId: z.nullable(z.string()),
  redirectUri: z.nullable(z.string()),
  secret: z.nullable(z.string()),
  accessToken: z.nullable(z.string()),
  refreshToken: z.nullable(z.string()),
  groupName: z.nullable(z.string()),
  expiresAt: z.nullable(z.number()),
  gitProviderId: z.string(),
});

/** @internal */
export type GitProviderGetAllGitlab$Outbound = {
  gitlabId: string;
  gitlabUrl: string;
  applicationId: string | null;
  redirectUri: string | null;
  secret: string | null;
  accessToken: string | null;
  refreshToken: string | null;
  groupName: string | null;
  expiresAt: number | null;
  gitProviderId: string;
};

/** @internal */
export const GitProviderGetAllGitlab$outboundSchema: z.ZodType<
  GitProviderGetAllGitlab$Outbound,
  z.ZodTypeDef,
  GitProviderGetAllGitlab
> = z.object({
  gitlabId: z.string(),
  gitlabUrl: z.string(),
  applicationId: z.nullable(z.string()),
  redirectUri: z.nullable(z.string()),
  secret: z.nullable(z.string()),
  accessToken: z.nullable(z.string()),
  refreshToken: z.nullable(z.string()),
  groupName: z.nullable(z.string()),
  expiresAt: z.nullable(z.number()),
  gitProviderId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitProviderGetAllGitlab$ {
  /** @deprecated use `GitProviderGetAllGitlab$inboundSchema` instead. */
  export const inboundSchema = GitProviderGetAllGitlab$inboundSchema;
  /** @deprecated use `GitProviderGetAllGitlab$outboundSchema` instead. */
  export const outboundSchema = GitProviderGetAllGitlab$outboundSchema;
  /** @deprecated use `GitProviderGetAllGitlab$Outbound` instead. */
  export type Outbound = GitProviderGetAllGitlab$Outbound;
}

export function gitProviderGetAllGitlabToJSON(
  gitProviderGetAllGitlab: GitProviderGetAllGitlab,
): string {
  return JSON.stringify(
    GitProviderGetAllGitlab$outboundSchema.parse(gitProviderGetAllGitlab),
  );
}

export function gitProviderGetAllGitlabFromJSON(
  jsonString: string,
): SafeParseResult<GitProviderGetAllGitlab, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitProviderGetAllGitlab$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitProviderGetAllGitlab' from JSON`,
  );
}

/** @internal */
export const GitProviderGetAllBitbucket$inboundSchema: z.ZodType<
  GitProviderGetAllBitbucket,
  z.ZodTypeDef,
  unknown
> = z.object({
  bitbucketId: z.string(),
  bitbucketUsername: z.nullable(z.string()),
  appPassword: z.nullable(z.string()),
  bitbucketWorkspaceName: z.nullable(z.string()),
  gitProviderId: z.string(),
});

/** @internal */
export type GitProviderGetAllBitbucket$Outbound = {
  bitbucketId: string;
  bitbucketUsername: string | null;
  appPassword: string | null;
  bitbucketWorkspaceName: string | null;
  gitProviderId: string;
};

/** @internal */
export const GitProviderGetAllBitbucket$outboundSchema: z.ZodType<
  GitProviderGetAllBitbucket$Outbound,
  z.ZodTypeDef,
  GitProviderGetAllBitbucket
> = z.object({
  bitbucketId: z.string(),
  bitbucketUsername: z.nullable(z.string()),
  appPassword: z.nullable(z.string()),
  bitbucketWorkspaceName: z.nullable(z.string()),
  gitProviderId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitProviderGetAllBitbucket$ {
  /** @deprecated use `GitProviderGetAllBitbucket$inboundSchema` instead. */
  export const inboundSchema = GitProviderGetAllBitbucket$inboundSchema;
  /** @deprecated use `GitProviderGetAllBitbucket$outboundSchema` instead. */
  export const outboundSchema = GitProviderGetAllBitbucket$outboundSchema;
  /** @deprecated use `GitProviderGetAllBitbucket$Outbound` instead. */
  export type Outbound = GitProviderGetAllBitbucket$Outbound;
}

export function gitProviderGetAllBitbucketToJSON(
  gitProviderGetAllBitbucket: GitProviderGetAllBitbucket,
): string {
  return JSON.stringify(
    GitProviderGetAllBitbucket$outboundSchema.parse(gitProviderGetAllBitbucket),
  );
}

export function gitProviderGetAllBitbucketFromJSON(
  jsonString: string,
): SafeParseResult<GitProviderGetAllBitbucket, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitProviderGetAllBitbucket$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitProviderGetAllBitbucket' from JSON`,
  );
}

/** @internal */
export const GitProviderGetAllGithub$inboundSchema: z.ZodType<
  GitProviderGetAllGithub,
  z.ZodTypeDef,
  unknown
> = z.object({
  githubId: z.string(),
  githubAppName: z.nullable(z.string()),
  githubAppId: z.nullable(z.number()),
  githubClientId: z.nullable(z.string()),
  githubClientSecret: z.nullable(z.string()),
  githubInstallationId: z.nullable(z.string()),
  githubPrivateKey: z.nullable(z.string()),
  githubWebhookSecret: z.nullable(z.string()),
  gitProviderId: z.string(),
});

/** @internal */
export type GitProviderGetAllGithub$Outbound = {
  githubId: string;
  githubAppName: string | null;
  githubAppId: number | null;
  githubClientId: string | null;
  githubClientSecret: string | null;
  githubInstallationId: string | null;
  githubPrivateKey: string | null;
  githubWebhookSecret: string | null;
  gitProviderId: string;
};

/** @internal */
export const GitProviderGetAllGithub$outboundSchema: z.ZodType<
  GitProviderGetAllGithub$Outbound,
  z.ZodTypeDef,
  GitProviderGetAllGithub
> = z.object({
  githubId: z.string(),
  githubAppName: z.nullable(z.string()),
  githubAppId: z.nullable(z.number()),
  githubClientId: z.nullable(z.string()),
  githubClientSecret: z.nullable(z.string()),
  githubInstallationId: z.nullable(z.string()),
  githubPrivateKey: z.nullable(z.string()),
  githubWebhookSecret: z.nullable(z.string()),
  gitProviderId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitProviderGetAllGithub$ {
  /** @deprecated use `GitProviderGetAllGithub$inboundSchema` instead. */
  export const inboundSchema = GitProviderGetAllGithub$inboundSchema;
  /** @deprecated use `GitProviderGetAllGithub$outboundSchema` instead. */
  export const outboundSchema = GitProviderGetAllGithub$outboundSchema;
  /** @deprecated use `GitProviderGetAllGithub$Outbound` instead. */
  export type Outbound = GitProviderGetAllGithub$Outbound;
}

export function gitProviderGetAllGithubToJSON(
  gitProviderGetAllGithub: GitProviderGetAllGithub,
): string {
  return JSON.stringify(
    GitProviderGetAllGithub$outboundSchema.parse(gitProviderGetAllGithub),
  );
}

export function gitProviderGetAllGithubFromJSON(
  jsonString: string,
): SafeParseResult<GitProviderGetAllGithub, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitProviderGetAllGithub$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitProviderGetAllGithub' from JSON`,
  );
}

/** @internal */
export const GitProviderGetAllGitea$inboundSchema: z.ZodType<
  GitProviderGetAllGitea,
  z.ZodTypeDef,
  unknown
> = z.object({
  giteaId: z.string(),
  giteaUrl: z.string(),
  redirectUri: z.nullable(z.string()),
  clientId: z.nullable(z.string()),
  clientSecret: z.nullable(z.string()),
  gitProviderId: z.string(),
  accessToken: z.nullable(z.string()),
  refreshToken: z.nullable(z.string()),
  expiresAt: z.nullable(z.number()),
  scopes: z.nullable(z.string()),
  lastAuthenticatedAt: z.nullable(z.number()),
});

/** @internal */
export type GitProviderGetAllGitea$Outbound = {
  giteaId: string;
  giteaUrl: string;
  redirectUri: string | null;
  clientId: string | null;
  clientSecret: string | null;
  gitProviderId: string;
  accessToken: string | null;
  refreshToken: string | null;
  expiresAt: number | null;
  scopes: string | null;
  lastAuthenticatedAt: number | null;
};

/** @internal */
export const GitProviderGetAllGitea$outboundSchema: z.ZodType<
  GitProviderGetAllGitea$Outbound,
  z.ZodTypeDef,
  GitProviderGetAllGitea
> = z.object({
  giteaId: z.string(),
  giteaUrl: z.string(),
  redirectUri: z.nullable(z.string()),
  clientId: z.nullable(z.string()),
  clientSecret: z.nullable(z.string()),
  gitProviderId: z.string(),
  accessToken: z.nullable(z.string()),
  refreshToken: z.nullable(z.string()),
  expiresAt: z.nullable(z.number()),
  scopes: z.nullable(z.string()),
  lastAuthenticatedAt: z.nullable(z.number()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitProviderGetAllGitea$ {
  /** @deprecated use `GitProviderGetAllGitea$inboundSchema` instead. */
  export const inboundSchema = GitProviderGetAllGitea$inboundSchema;
  /** @deprecated use `GitProviderGetAllGitea$outboundSchema` instead. */
  export const outboundSchema = GitProviderGetAllGitea$outboundSchema;
  /** @deprecated use `GitProviderGetAllGitea$Outbound` instead. */
  export type Outbound = GitProviderGetAllGitea$Outbound;
}

export function gitProviderGetAllGiteaToJSON(
  gitProviderGetAllGitea: GitProviderGetAllGitea,
): string {
  return JSON.stringify(
    GitProviderGetAllGitea$outboundSchema.parse(gitProviderGetAllGitea),
  );
}

export function gitProviderGetAllGiteaFromJSON(
  jsonString: string,
): SafeParseResult<GitProviderGetAllGitea, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitProviderGetAllGitea$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitProviderGetAllGitea' from JSON`,
  );
}

/** @internal */
export const GitProviderGetAllResponseBody$inboundSchema: z.ZodType<
  GitProviderGetAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  gitProviderId: z.string(),
  name: z.string(),
  providerType: GitProviderGetAllProviderType$inboundSchema,
  createdAt: z.string(),
  organizationId: z.string(),
  userId: z.string(),
  gitlab: z.nullable(z.lazy(() => GitProviderGetAllGitlab$inboundSchema)),
  bitbucket: z.nullable(z.lazy(() => GitProviderGetAllBitbucket$inboundSchema)),
  github: z.nullable(z.lazy(() => GitProviderGetAllGithub$inboundSchema)),
  gitea: z.nullable(z.lazy(() => GitProviderGetAllGitea$inboundSchema)),
});

/** @internal */
export type GitProviderGetAllResponseBody$Outbound = {
  gitProviderId: string;
  name: string;
  providerType: string;
  createdAt: string;
  organizationId: string;
  userId: string;
  gitlab: GitProviderGetAllGitlab$Outbound | null;
  bitbucket: GitProviderGetAllBitbucket$Outbound | null;
  github: GitProviderGetAllGithub$Outbound | null;
  gitea: GitProviderGetAllGitea$Outbound | null;
};

/** @internal */
export const GitProviderGetAllResponseBody$outboundSchema: z.ZodType<
  GitProviderGetAllResponseBody$Outbound,
  z.ZodTypeDef,
  GitProviderGetAllResponseBody
> = z.object({
  gitProviderId: z.string(),
  name: z.string(),
  providerType: GitProviderGetAllProviderType$outboundSchema,
  createdAt: z.string(),
  organizationId: z.string(),
  userId: z.string(),
  gitlab: z.nullable(z.lazy(() => GitProviderGetAllGitlab$outboundSchema)),
  bitbucket: z.nullable(
    z.lazy(() => GitProviderGetAllBitbucket$outboundSchema),
  ),
  github: z.nullable(z.lazy(() => GitProviderGetAllGithub$outboundSchema)),
  gitea: z.nullable(z.lazy(() => GitProviderGetAllGitea$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitProviderGetAllResponseBody$ {
  /** @deprecated use `GitProviderGetAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = GitProviderGetAllResponseBody$inboundSchema;
  /** @deprecated use `GitProviderGetAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = GitProviderGetAllResponseBody$outboundSchema;
  /** @deprecated use `GitProviderGetAllResponseBody$Outbound` instead. */
  export type Outbound = GitProviderGetAllResponseBody$Outbound;
}

export function gitProviderGetAllResponseBodyToJSON(
  gitProviderGetAllResponseBody: GitProviderGetAllResponseBody,
): string {
  return JSON.stringify(
    GitProviderGetAllResponseBody$outboundSchema.parse(
      gitProviderGetAllResponseBody,
    ),
  );
}

export function gitProviderGetAllResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GitProviderGetAllResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitProviderGetAllResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitProviderGetAllResponseBody' from JSON`,
  );
}

/** @internal */
export const GitProviderGetAllResponse$inboundSchema: z.ZodType<
  GitProviderGetAllResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ErrorT$inboundSchema,
  z.array(z.lazy(() => GitProviderGetAllResponseBody$inboundSchema)),
]);

/** @internal */
export type GitProviderGetAllResponse$Outbound =
  | models.ErrorT$Outbound
  | Array<GitProviderGetAllResponseBody$Outbound>;

/** @internal */
export const GitProviderGetAllResponse$outboundSchema: z.ZodType<
  GitProviderGetAllResponse$Outbound,
  z.ZodTypeDef,
  GitProviderGetAllResponse
> = z.union([
  models.ErrorT$outboundSchema,
  z.array(z.lazy(() => GitProviderGetAllResponseBody$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitProviderGetAllResponse$ {
  /** @deprecated use `GitProviderGetAllResponse$inboundSchema` instead. */
  export const inboundSchema = GitProviderGetAllResponse$inboundSchema;
  /** @deprecated use `GitProviderGetAllResponse$outboundSchema` instead. */
  export const outboundSchema = GitProviderGetAllResponse$outboundSchema;
  /** @deprecated use `GitProviderGetAllResponse$Outbound` instead. */
  export type Outbound = GitProviderGetAllResponse$Outbound;
}

export function gitProviderGetAllResponseToJSON(
  gitProviderGetAllResponse: GitProviderGetAllResponse,
): string {
  return JSON.stringify(
    GitProviderGetAllResponse$outboundSchema.parse(gitProviderGetAllResponse),
  );
}

export function gitProviderGetAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<GitProviderGetAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitProviderGetAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitProviderGetAllResponse' from JSON`,
  );
}
