/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PreviewDeploymentOneSecurity = {
  authorization: string;
};

export type PreviewDeploymentOneRequest = {
  previewDeploymentId: string;
};

export const PreviewDeploymentOnePreviewStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type PreviewDeploymentOnePreviewStatus = ClosedEnum<
  typeof PreviewDeploymentOnePreviewStatus
>;

/**
 * Successful response
 */
export type PreviewDeploymentOneResponseBody = {
  previewDeploymentId: string;
  branch: string;
  pullRequestId: string;
  pullRequestNumber: string;
  pullRequestURL: string;
  pullRequestTitle: string;
  pullRequestCommentId: string;
  previewStatus: PreviewDeploymentOnePreviewStatus;
  appName: string;
  applicationId: string;
  domainId: string | null;
  createdAt: string;
  expiresAt: string | null;
};

export type PreviewDeploymentOneResponse =
  | PreviewDeploymentOneResponseBody
  | models.ErrorT;

/** @internal */
export const PreviewDeploymentOneSecurity$inboundSchema: z.ZodType<
  PreviewDeploymentOneSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type PreviewDeploymentOneSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const PreviewDeploymentOneSecurity$outboundSchema: z.ZodType<
  PreviewDeploymentOneSecurity$Outbound,
  z.ZodTypeDef,
  PreviewDeploymentOneSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewDeploymentOneSecurity$ {
  /** @deprecated use `PreviewDeploymentOneSecurity$inboundSchema` instead. */
  export const inboundSchema = PreviewDeploymentOneSecurity$inboundSchema;
  /** @deprecated use `PreviewDeploymentOneSecurity$outboundSchema` instead. */
  export const outboundSchema = PreviewDeploymentOneSecurity$outboundSchema;
  /** @deprecated use `PreviewDeploymentOneSecurity$Outbound` instead. */
  export type Outbound = PreviewDeploymentOneSecurity$Outbound;
}

export function previewDeploymentOneSecurityToJSON(
  previewDeploymentOneSecurity: PreviewDeploymentOneSecurity,
): string {
  return JSON.stringify(
    PreviewDeploymentOneSecurity$outboundSchema.parse(
      previewDeploymentOneSecurity,
    ),
  );
}

export function previewDeploymentOneSecurityFromJSON(
  jsonString: string,
): SafeParseResult<PreviewDeploymentOneSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewDeploymentOneSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewDeploymentOneSecurity' from JSON`,
  );
}

/** @internal */
export const PreviewDeploymentOneRequest$inboundSchema: z.ZodType<
  PreviewDeploymentOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  previewDeploymentId: z.string(),
});

/** @internal */
export type PreviewDeploymentOneRequest$Outbound = {
  previewDeploymentId: string;
};

/** @internal */
export const PreviewDeploymentOneRequest$outboundSchema: z.ZodType<
  PreviewDeploymentOneRequest$Outbound,
  z.ZodTypeDef,
  PreviewDeploymentOneRequest
> = z.object({
  previewDeploymentId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewDeploymentOneRequest$ {
  /** @deprecated use `PreviewDeploymentOneRequest$inboundSchema` instead. */
  export const inboundSchema = PreviewDeploymentOneRequest$inboundSchema;
  /** @deprecated use `PreviewDeploymentOneRequest$outboundSchema` instead. */
  export const outboundSchema = PreviewDeploymentOneRequest$outboundSchema;
  /** @deprecated use `PreviewDeploymentOneRequest$Outbound` instead. */
  export type Outbound = PreviewDeploymentOneRequest$Outbound;
}

export function previewDeploymentOneRequestToJSON(
  previewDeploymentOneRequest: PreviewDeploymentOneRequest,
): string {
  return JSON.stringify(
    PreviewDeploymentOneRequest$outboundSchema.parse(
      previewDeploymentOneRequest,
    ),
  );
}

export function previewDeploymentOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<PreviewDeploymentOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewDeploymentOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewDeploymentOneRequest' from JSON`,
  );
}

/** @internal */
export const PreviewDeploymentOnePreviewStatus$inboundSchema: z.ZodNativeEnum<
  typeof PreviewDeploymentOnePreviewStatus
> = z.nativeEnum(PreviewDeploymentOnePreviewStatus);

/** @internal */
export const PreviewDeploymentOnePreviewStatus$outboundSchema: z.ZodNativeEnum<
  typeof PreviewDeploymentOnePreviewStatus
> = PreviewDeploymentOnePreviewStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewDeploymentOnePreviewStatus$ {
  /** @deprecated use `PreviewDeploymentOnePreviewStatus$inboundSchema` instead. */
  export const inboundSchema = PreviewDeploymentOnePreviewStatus$inboundSchema;
  /** @deprecated use `PreviewDeploymentOnePreviewStatus$outboundSchema` instead. */
  export const outboundSchema =
    PreviewDeploymentOnePreviewStatus$outboundSchema;
}

/** @internal */
export const PreviewDeploymentOneResponseBody$inboundSchema: z.ZodType<
  PreviewDeploymentOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  previewDeploymentId: z.string(),
  branch: z.string(),
  pullRequestId: z.string(),
  pullRequestNumber: z.string(),
  pullRequestURL: z.string(),
  pullRequestTitle: z.string(),
  pullRequestCommentId: z.string(),
  previewStatus: PreviewDeploymentOnePreviewStatus$inboundSchema,
  appName: z.string(),
  applicationId: z.string(),
  domainId: z.nullable(z.string()),
  createdAt: z.string(),
  expiresAt: z.nullable(z.string()),
});

/** @internal */
export type PreviewDeploymentOneResponseBody$Outbound = {
  previewDeploymentId: string;
  branch: string;
  pullRequestId: string;
  pullRequestNumber: string;
  pullRequestURL: string;
  pullRequestTitle: string;
  pullRequestCommentId: string;
  previewStatus: string;
  appName: string;
  applicationId: string;
  domainId: string | null;
  createdAt: string;
  expiresAt: string | null;
};

/** @internal */
export const PreviewDeploymentOneResponseBody$outboundSchema: z.ZodType<
  PreviewDeploymentOneResponseBody$Outbound,
  z.ZodTypeDef,
  PreviewDeploymentOneResponseBody
> = z.object({
  previewDeploymentId: z.string(),
  branch: z.string(),
  pullRequestId: z.string(),
  pullRequestNumber: z.string(),
  pullRequestURL: z.string(),
  pullRequestTitle: z.string(),
  pullRequestCommentId: z.string(),
  previewStatus: PreviewDeploymentOnePreviewStatus$outboundSchema,
  appName: z.string(),
  applicationId: z.string(),
  domainId: z.nullable(z.string()),
  createdAt: z.string(),
  expiresAt: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewDeploymentOneResponseBody$ {
  /** @deprecated use `PreviewDeploymentOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = PreviewDeploymentOneResponseBody$inboundSchema;
  /** @deprecated use `PreviewDeploymentOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = PreviewDeploymentOneResponseBody$outboundSchema;
  /** @deprecated use `PreviewDeploymentOneResponseBody$Outbound` instead. */
  export type Outbound = PreviewDeploymentOneResponseBody$Outbound;
}

export function previewDeploymentOneResponseBodyToJSON(
  previewDeploymentOneResponseBody: PreviewDeploymentOneResponseBody,
): string {
  return JSON.stringify(
    PreviewDeploymentOneResponseBody$outboundSchema.parse(
      previewDeploymentOneResponseBody,
    ),
  );
}

export function previewDeploymentOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PreviewDeploymentOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewDeploymentOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewDeploymentOneResponseBody' from JSON`,
  );
}

/** @internal */
export const PreviewDeploymentOneResponse$inboundSchema: z.ZodType<
  PreviewDeploymentOneResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PreviewDeploymentOneResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type PreviewDeploymentOneResponse$Outbound =
  | PreviewDeploymentOneResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const PreviewDeploymentOneResponse$outboundSchema: z.ZodType<
  PreviewDeploymentOneResponse$Outbound,
  z.ZodTypeDef,
  PreviewDeploymentOneResponse
> = z.union([
  z.lazy(() => PreviewDeploymentOneResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewDeploymentOneResponse$ {
  /** @deprecated use `PreviewDeploymentOneResponse$inboundSchema` instead. */
  export const inboundSchema = PreviewDeploymentOneResponse$inboundSchema;
  /** @deprecated use `PreviewDeploymentOneResponse$outboundSchema` instead. */
  export const outboundSchema = PreviewDeploymentOneResponse$outboundSchema;
  /** @deprecated use `PreviewDeploymentOneResponse$Outbound` instead. */
  export type Outbound = PreviewDeploymentOneResponse$Outbound;
}

export function previewDeploymentOneResponseToJSON(
  previewDeploymentOneResponse: PreviewDeploymentOneResponse,
): string {
  return JSON.stringify(
    PreviewDeploymentOneResponse$outboundSchema.parse(
      previewDeploymentOneResponse,
    ),
  );
}

export function previewDeploymentOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<PreviewDeploymentOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewDeploymentOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewDeploymentOneResponse' from JSON`,
  );
}
