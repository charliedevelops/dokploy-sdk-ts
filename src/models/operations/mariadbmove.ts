/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type MariadbMoveSecurity = {
  authorization: string;
};

export type MariadbMoveRequest = {
  mariadbId: string;
  targetEnvironmentId: string;
};

export const MariadbMoveApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type MariadbMoveApplicationStatus = ClosedEnum<
  typeof MariadbMoveApplicationStatus
>;

export type MariadbMoveHealthCheckSwarm = {
  interval?: number | undefined;
  retries?: number | undefined;
  startPeriod?: number | undefined;
  test?: Array<string> | undefined;
  timeout?: number | undefined;
};

export type MariadbMoveGlobal = {};

export type MariadbMoveGlobalJob = {};

export type MariadbMoveReplicated = {
  replicas?: number | undefined;
};

export type MariadbMoveReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type MariadbMoveModeSwarm = {
  global?: MariadbMoveGlobal | undefined;
  globalJob?: MariadbMoveGlobalJob | undefined;
  replicated?: MariadbMoveReplicated | undefined;
  replicatedJob?: MariadbMoveReplicatedJob | undefined;
};

export type MariadbMoveDriverOpts = {};

export type MariadbMoveNetworkSwarm = {
  aliases?: Array<string> | undefined;
  driverOpts?: MariadbMoveDriverOpts | undefined;
  target?: string | undefined;
};

export type MariadbMovePlatform = {
  architecture: string;
  os: string;
};

export type MariadbMoveSpread = {
  spreadDescriptor: string;
};

export type MariadbMovePreference = {
  spread: MariadbMoveSpread;
};

export type MariadbMovePlacementSwarm = {
  constraints?: Array<string> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<MariadbMovePlatform> | undefined;
  preferences?: Array<MariadbMovePreference> | undefined;
};

export type MariadbMoveRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type MariadbMoveRollbackConfigSwarm = {
  delay?: number | undefined;
  failureAction?: string | undefined;
  maxFailureRatio?: number | undefined;
  monitor?: number | undefined;
  order: string;
  parallelism: number;
};

export type MariadbMoveUpdateConfigSwarm = {
  delay?: number | undefined;
  failureAction?: string | undefined;
  maxFailureRatio?: number | undefined;
  monitor?: number | undefined;
  order: string;
  parallelism: number;
};

/**
 * Successful response
 */
export type MariadbMoveResponseBody = {
  appName: string;
  applicationStatus: MariadbMoveApplicationStatus;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databaseName: string;
  databasePassword: string;
  databaseRootPassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: MariadbMoveHealthCheckSwarm | null;
  labelsSwarm: { [k: string]: string } | null;
  mariadbId: string;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: MariadbMoveModeSwarm | null;
  name: string;
  networkSwarm: Array<MariadbMoveNetworkSwarm> | null;
  placementSwarm: MariadbMovePlacementSwarm | null;
  replicas: number;
  restartPolicySwarm: MariadbMoveRestartPolicySwarm | null;
  rollbackConfigSwarm: MariadbMoveRollbackConfigSwarm | null;
  serverId: string | null;
  updateConfigSwarm: MariadbMoveUpdateConfigSwarm | null;
};

export type MariadbMoveResponse = MariadbMoveResponseBody | models.ErrorT;

/** @internal */
export const MariadbMoveSecurity$inboundSchema: z.ZodType<
  MariadbMoveSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type MariadbMoveSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const MariadbMoveSecurity$outboundSchema: z.ZodType<
  MariadbMoveSecurity$Outbound,
  z.ZodTypeDef,
  MariadbMoveSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbMoveSecurity$ {
  /** @deprecated use `MariadbMoveSecurity$inboundSchema` instead. */
  export const inboundSchema = MariadbMoveSecurity$inboundSchema;
  /** @deprecated use `MariadbMoveSecurity$outboundSchema` instead. */
  export const outboundSchema = MariadbMoveSecurity$outboundSchema;
  /** @deprecated use `MariadbMoveSecurity$Outbound` instead. */
  export type Outbound = MariadbMoveSecurity$Outbound;
}

export function mariadbMoveSecurityToJSON(
  mariadbMoveSecurity: MariadbMoveSecurity,
): string {
  return JSON.stringify(
    MariadbMoveSecurity$outboundSchema.parse(mariadbMoveSecurity),
  );
}

export function mariadbMoveSecurityFromJSON(
  jsonString: string,
): SafeParseResult<MariadbMoveSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbMoveSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbMoveSecurity' from JSON`,
  );
}

/** @internal */
export const MariadbMoveRequest$inboundSchema: z.ZodType<
  MariadbMoveRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mariadbId: z.string(),
  targetEnvironmentId: z.string(),
});

/** @internal */
export type MariadbMoveRequest$Outbound = {
  mariadbId: string;
  targetEnvironmentId: string;
};

/** @internal */
export const MariadbMoveRequest$outboundSchema: z.ZodType<
  MariadbMoveRequest$Outbound,
  z.ZodTypeDef,
  MariadbMoveRequest
> = z.object({
  mariadbId: z.string(),
  targetEnvironmentId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbMoveRequest$ {
  /** @deprecated use `MariadbMoveRequest$inboundSchema` instead. */
  export const inboundSchema = MariadbMoveRequest$inboundSchema;
  /** @deprecated use `MariadbMoveRequest$outboundSchema` instead. */
  export const outboundSchema = MariadbMoveRequest$outboundSchema;
  /** @deprecated use `MariadbMoveRequest$Outbound` instead. */
  export type Outbound = MariadbMoveRequest$Outbound;
}

export function mariadbMoveRequestToJSON(
  mariadbMoveRequest: MariadbMoveRequest,
): string {
  return JSON.stringify(
    MariadbMoveRequest$outboundSchema.parse(mariadbMoveRequest),
  );
}

export function mariadbMoveRequestFromJSON(
  jsonString: string,
): SafeParseResult<MariadbMoveRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbMoveRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbMoveRequest' from JSON`,
  );
}

/** @internal */
export const MariadbMoveApplicationStatus$inboundSchema: z.ZodNativeEnum<
  typeof MariadbMoveApplicationStatus
> = z.nativeEnum(MariadbMoveApplicationStatus);

/** @internal */
export const MariadbMoveApplicationStatus$outboundSchema: z.ZodNativeEnum<
  typeof MariadbMoveApplicationStatus
> = MariadbMoveApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbMoveApplicationStatus$ {
  /** @deprecated use `MariadbMoveApplicationStatus$inboundSchema` instead. */
  export const inboundSchema = MariadbMoveApplicationStatus$inboundSchema;
  /** @deprecated use `MariadbMoveApplicationStatus$outboundSchema` instead. */
  export const outboundSchema = MariadbMoveApplicationStatus$outboundSchema;
}

/** @internal */
export const MariadbMoveHealthCheckSwarm$inboundSchema: z.ZodType<
  MariadbMoveHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Interval: z.number().optional(),
  Retries: z.number().optional(),
  StartPeriod: z.number().optional(),
  Test: z.array(z.string()).optional(),
  Timeout: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Interval": "interval",
    "Retries": "retries",
    "StartPeriod": "startPeriod",
    "Test": "test",
    "Timeout": "timeout",
  });
});

/** @internal */
export type MariadbMoveHealthCheckSwarm$Outbound = {
  Interval?: number | undefined;
  Retries?: number | undefined;
  StartPeriod?: number | undefined;
  Test?: Array<string> | undefined;
  Timeout?: number | undefined;
};

/** @internal */
export const MariadbMoveHealthCheckSwarm$outboundSchema: z.ZodType<
  MariadbMoveHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  MariadbMoveHealthCheckSwarm
> = z.object({
  interval: z.number().optional(),
  retries: z.number().optional(),
  startPeriod: z.number().optional(),
  test: z.array(z.string()).optional(),
  timeout: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    interval: "Interval",
    retries: "Retries",
    startPeriod: "StartPeriod",
    test: "Test",
    timeout: "Timeout",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbMoveHealthCheckSwarm$ {
  /** @deprecated use `MariadbMoveHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema = MariadbMoveHealthCheckSwarm$inboundSchema;
  /** @deprecated use `MariadbMoveHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema = MariadbMoveHealthCheckSwarm$outboundSchema;
  /** @deprecated use `MariadbMoveHealthCheckSwarm$Outbound` instead. */
  export type Outbound = MariadbMoveHealthCheckSwarm$Outbound;
}

export function mariadbMoveHealthCheckSwarmToJSON(
  mariadbMoveHealthCheckSwarm: MariadbMoveHealthCheckSwarm,
): string {
  return JSON.stringify(
    MariadbMoveHealthCheckSwarm$outboundSchema.parse(
      mariadbMoveHealthCheckSwarm,
    ),
  );
}

export function mariadbMoveHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbMoveHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbMoveHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbMoveHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbMoveGlobal$inboundSchema: z.ZodType<
  MariadbMoveGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MariadbMoveGlobal$Outbound = {};

/** @internal */
export const MariadbMoveGlobal$outboundSchema: z.ZodType<
  MariadbMoveGlobal$Outbound,
  z.ZodTypeDef,
  MariadbMoveGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbMoveGlobal$ {
  /** @deprecated use `MariadbMoveGlobal$inboundSchema` instead. */
  export const inboundSchema = MariadbMoveGlobal$inboundSchema;
  /** @deprecated use `MariadbMoveGlobal$outboundSchema` instead. */
  export const outboundSchema = MariadbMoveGlobal$outboundSchema;
  /** @deprecated use `MariadbMoveGlobal$Outbound` instead. */
  export type Outbound = MariadbMoveGlobal$Outbound;
}

export function mariadbMoveGlobalToJSON(
  mariadbMoveGlobal: MariadbMoveGlobal,
): string {
  return JSON.stringify(
    MariadbMoveGlobal$outboundSchema.parse(mariadbMoveGlobal),
  );
}

export function mariadbMoveGlobalFromJSON(
  jsonString: string,
): SafeParseResult<MariadbMoveGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbMoveGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbMoveGlobal' from JSON`,
  );
}

/** @internal */
export const MariadbMoveGlobalJob$inboundSchema: z.ZodType<
  MariadbMoveGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MariadbMoveGlobalJob$Outbound = {};

/** @internal */
export const MariadbMoveGlobalJob$outboundSchema: z.ZodType<
  MariadbMoveGlobalJob$Outbound,
  z.ZodTypeDef,
  MariadbMoveGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbMoveGlobalJob$ {
  /** @deprecated use `MariadbMoveGlobalJob$inboundSchema` instead. */
  export const inboundSchema = MariadbMoveGlobalJob$inboundSchema;
  /** @deprecated use `MariadbMoveGlobalJob$outboundSchema` instead. */
  export const outboundSchema = MariadbMoveGlobalJob$outboundSchema;
  /** @deprecated use `MariadbMoveGlobalJob$Outbound` instead. */
  export type Outbound = MariadbMoveGlobalJob$Outbound;
}

export function mariadbMoveGlobalJobToJSON(
  mariadbMoveGlobalJob: MariadbMoveGlobalJob,
): string {
  return JSON.stringify(
    MariadbMoveGlobalJob$outboundSchema.parse(mariadbMoveGlobalJob),
  );
}

export function mariadbMoveGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<MariadbMoveGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbMoveGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbMoveGlobalJob' from JSON`,
  );
}

/** @internal */
export const MariadbMoveReplicated$inboundSchema: z.ZodType<
  MariadbMoveReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type MariadbMoveReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const MariadbMoveReplicated$outboundSchema: z.ZodType<
  MariadbMoveReplicated$Outbound,
  z.ZodTypeDef,
  MariadbMoveReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbMoveReplicated$ {
  /** @deprecated use `MariadbMoveReplicated$inboundSchema` instead. */
  export const inboundSchema = MariadbMoveReplicated$inboundSchema;
  /** @deprecated use `MariadbMoveReplicated$outboundSchema` instead. */
  export const outboundSchema = MariadbMoveReplicated$outboundSchema;
  /** @deprecated use `MariadbMoveReplicated$Outbound` instead. */
  export type Outbound = MariadbMoveReplicated$Outbound;
}

export function mariadbMoveReplicatedToJSON(
  mariadbMoveReplicated: MariadbMoveReplicated,
): string {
  return JSON.stringify(
    MariadbMoveReplicated$outboundSchema.parse(mariadbMoveReplicated),
  );
}

export function mariadbMoveReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<MariadbMoveReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbMoveReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbMoveReplicated' from JSON`,
  );
}

/** @internal */
export const MariadbMoveReplicatedJob$inboundSchema: z.ZodType<
  MariadbMoveReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type MariadbMoveReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const MariadbMoveReplicatedJob$outboundSchema: z.ZodType<
  MariadbMoveReplicatedJob$Outbound,
  z.ZodTypeDef,
  MariadbMoveReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbMoveReplicatedJob$ {
  /** @deprecated use `MariadbMoveReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = MariadbMoveReplicatedJob$inboundSchema;
  /** @deprecated use `MariadbMoveReplicatedJob$outboundSchema` instead. */
  export const outboundSchema = MariadbMoveReplicatedJob$outboundSchema;
  /** @deprecated use `MariadbMoveReplicatedJob$Outbound` instead. */
  export type Outbound = MariadbMoveReplicatedJob$Outbound;
}

export function mariadbMoveReplicatedJobToJSON(
  mariadbMoveReplicatedJob: MariadbMoveReplicatedJob,
): string {
  return JSON.stringify(
    MariadbMoveReplicatedJob$outboundSchema.parse(mariadbMoveReplicatedJob),
  );
}

export function mariadbMoveReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<MariadbMoveReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbMoveReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbMoveReplicatedJob' from JSON`,
  );
}

/** @internal */
export const MariadbMoveModeSwarm$inboundSchema: z.ZodType<
  MariadbMoveModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Global: z.lazy(() => MariadbMoveGlobal$inboundSchema).optional(),
  GlobalJob: z.lazy(() => MariadbMoveGlobalJob$inboundSchema).optional(),
  Replicated: z.lazy(() => MariadbMoveReplicated$inboundSchema).optional(),
  ReplicatedJob: z.lazy(() => MariadbMoveReplicatedJob$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Global": "global",
    "GlobalJob": "globalJob",
    "Replicated": "replicated",
    "ReplicatedJob": "replicatedJob",
  });
});

/** @internal */
export type MariadbMoveModeSwarm$Outbound = {
  Global?: MariadbMoveGlobal$Outbound | undefined;
  GlobalJob?: MariadbMoveGlobalJob$Outbound | undefined;
  Replicated?: MariadbMoveReplicated$Outbound | undefined;
  ReplicatedJob?: MariadbMoveReplicatedJob$Outbound | undefined;
};

/** @internal */
export const MariadbMoveModeSwarm$outboundSchema: z.ZodType<
  MariadbMoveModeSwarm$Outbound,
  z.ZodTypeDef,
  MariadbMoveModeSwarm
> = z.object({
  global: z.lazy(() => MariadbMoveGlobal$outboundSchema).optional(),
  globalJob: z.lazy(() => MariadbMoveGlobalJob$outboundSchema).optional(),
  replicated: z.lazy(() => MariadbMoveReplicated$outboundSchema).optional(),
  replicatedJob: z.lazy(() => MariadbMoveReplicatedJob$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    global: "Global",
    globalJob: "GlobalJob",
    replicated: "Replicated",
    replicatedJob: "ReplicatedJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbMoveModeSwarm$ {
  /** @deprecated use `MariadbMoveModeSwarm$inboundSchema` instead. */
  export const inboundSchema = MariadbMoveModeSwarm$inboundSchema;
  /** @deprecated use `MariadbMoveModeSwarm$outboundSchema` instead. */
  export const outboundSchema = MariadbMoveModeSwarm$outboundSchema;
  /** @deprecated use `MariadbMoveModeSwarm$Outbound` instead. */
  export type Outbound = MariadbMoveModeSwarm$Outbound;
}

export function mariadbMoveModeSwarmToJSON(
  mariadbMoveModeSwarm: MariadbMoveModeSwarm,
): string {
  return JSON.stringify(
    MariadbMoveModeSwarm$outboundSchema.parse(mariadbMoveModeSwarm),
  );
}

export function mariadbMoveModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbMoveModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbMoveModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbMoveModeSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbMoveDriverOpts$inboundSchema: z.ZodType<
  MariadbMoveDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MariadbMoveDriverOpts$Outbound = {};

/** @internal */
export const MariadbMoveDriverOpts$outboundSchema: z.ZodType<
  MariadbMoveDriverOpts$Outbound,
  z.ZodTypeDef,
  MariadbMoveDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbMoveDriverOpts$ {
  /** @deprecated use `MariadbMoveDriverOpts$inboundSchema` instead. */
  export const inboundSchema = MariadbMoveDriverOpts$inboundSchema;
  /** @deprecated use `MariadbMoveDriverOpts$outboundSchema` instead. */
  export const outboundSchema = MariadbMoveDriverOpts$outboundSchema;
  /** @deprecated use `MariadbMoveDriverOpts$Outbound` instead. */
  export type Outbound = MariadbMoveDriverOpts$Outbound;
}

export function mariadbMoveDriverOptsToJSON(
  mariadbMoveDriverOpts: MariadbMoveDriverOpts,
): string {
  return JSON.stringify(
    MariadbMoveDriverOpts$outboundSchema.parse(mariadbMoveDriverOpts),
  );
}

export function mariadbMoveDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<MariadbMoveDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbMoveDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbMoveDriverOpts' from JSON`,
  );
}

/** @internal */
export const MariadbMoveNetworkSwarm$inboundSchema: z.ZodType<
  MariadbMoveNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => MariadbMoveDriverOpts$inboundSchema).optional(),
  Target: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
    "Target": "target",
  });
});

/** @internal */
export type MariadbMoveNetworkSwarm$Outbound = {
  Aliases?: Array<string> | undefined;
  DriverOpts?: MariadbMoveDriverOpts$Outbound | undefined;
  Target?: string | undefined;
};

/** @internal */
export const MariadbMoveNetworkSwarm$outboundSchema: z.ZodType<
  MariadbMoveNetworkSwarm$Outbound,
  z.ZodTypeDef,
  MariadbMoveNetworkSwarm
> = z.object({
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => MariadbMoveDriverOpts$outboundSchema).optional(),
  target: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    aliases: "Aliases",
    driverOpts: "DriverOpts",
    target: "Target",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbMoveNetworkSwarm$ {
  /** @deprecated use `MariadbMoveNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = MariadbMoveNetworkSwarm$inboundSchema;
  /** @deprecated use `MariadbMoveNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = MariadbMoveNetworkSwarm$outboundSchema;
  /** @deprecated use `MariadbMoveNetworkSwarm$Outbound` instead. */
  export type Outbound = MariadbMoveNetworkSwarm$Outbound;
}

export function mariadbMoveNetworkSwarmToJSON(
  mariadbMoveNetworkSwarm: MariadbMoveNetworkSwarm,
): string {
  return JSON.stringify(
    MariadbMoveNetworkSwarm$outboundSchema.parse(mariadbMoveNetworkSwarm),
  );
}

export function mariadbMoveNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbMoveNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbMoveNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbMoveNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbMovePlatform$inboundSchema: z.ZodType<
  MariadbMovePlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type MariadbMovePlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const MariadbMovePlatform$outboundSchema: z.ZodType<
  MariadbMovePlatform$Outbound,
  z.ZodTypeDef,
  MariadbMovePlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbMovePlatform$ {
  /** @deprecated use `MariadbMovePlatform$inboundSchema` instead. */
  export const inboundSchema = MariadbMovePlatform$inboundSchema;
  /** @deprecated use `MariadbMovePlatform$outboundSchema` instead. */
  export const outboundSchema = MariadbMovePlatform$outboundSchema;
  /** @deprecated use `MariadbMovePlatform$Outbound` instead. */
  export type Outbound = MariadbMovePlatform$Outbound;
}

export function mariadbMovePlatformToJSON(
  mariadbMovePlatform: MariadbMovePlatform,
): string {
  return JSON.stringify(
    MariadbMovePlatform$outboundSchema.parse(mariadbMovePlatform),
  );
}

export function mariadbMovePlatformFromJSON(
  jsonString: string,
): SafeParseResult<MariadbMovePlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbMovePlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbMovePlatform' from JSON`,
  );
}

/** @internal */
export const MariadbMoveSpread$inboundSchema: z.ZodType<
  MariadbMoveSpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type MariadbMoveSpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const MariadbMoveSpread$outboundSchema: z.ZodType<
  MariadbMoveSpread$Outbound,
  z.ZodTypeDef,
  MariadbMoveSpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbMoveSpread$ {
  /** @deprecated use `MariadbMoveSpread$inboundSchema` instead. */
  export const inboundSchema = MariadbMoveSpread$inboundSchema;
  /** @deprecated use `MariadbMoveSpread$outboundSchema` instead. */
  export const outboundSchema = MariadbMoveSpread$outboundSchema;
  /** @deprecated use `MariadbMoveSpread$Outbound` instead. */
  export type Outbound = MariadbMoveSpread$Outbound;
}

export function mariadbMoveSpreadToJSON(
  mariadbMoveSpread: MariadbMoveSpread,
): string {
  return JSON.stringify(
    MariadbMoveSpread$outboundSchema.parse(mariadbMoveSpread),
  );
}

export function mariadbMoveSpreadFromJSON(
  jsonString: string,
): SafeParseResult<MariadbMoveSpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbMoveSpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbMoveSpread' from JSON`,
  );
}

/** @internal */
export const MariadbMovePreference$inboundSchema: z.ZodType<
  MariadbMovePreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => MariadbMoveSpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type MariadbMovePreference$Outbound = {
  Spread: MariadbMoveSpread$Outbound;
};

/** @internal */
export const MariadbMovePreference$outboundSchema: z.ZodType<
  MariadbMovePreference$Outbound,
  z.ZodTypeDef,
  MariadbMovePreference
> = z.object({
  spread: z.lazy(() => MariadbMoveSpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbMovePreference$ {
  /** @deprecated use `MariadbMovePreference$inboundSchema` instead. */
  export const inboundSchema = MariadbMovePreference$inboundSchema;
  /** @deprecated use `MariadbMovePreference$outboundSchema` instead. */
  export const outboundSchema = MariadbMovePreference$outboundSchema;
  /** @deprecated use `MariadbMovePreference$Outbound` instead. */
  export type Outbound = MariadbMovePreference$Outbound;
}

export function mariadbMovePreferenceToJSON(
  mariadbMovePreference: MariadbMovePreference,
): string {
  return JSON.stringify(
    MariadbMovePreference$outboundSchema.parse(mariadbMovePreference),
  );
}

export function mariadbMovePreferenceFromJSON(
  jsonString: string,
): SafeParseResult<MariadbMovePreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbMovePreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbMovePreference' from JSON`,
  );
}

/** @internal */
export const MariadbMovePlacementSwarm$inboundSchema: z.ZodType<
  MariadbMovePlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => MariadbMovePlatform$inboundSchema))
    .optional(),
  Preferences: z.array(z.lazy(() => MariadbMovePreference$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
    "Preferences": "preferences",
  });
});

/** @internal */
export type MariadbMovePlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<MariadbMovePlatform$Outbound> | undefined;
  Preferences?: Array<MariadbMovePreference$Outbound> | undefined;
};

/** @internal */
export const MariadbMovePlacementSwarm$outboundSchema: z.ZodType<
  MariadbMovePlacementSwarm$Outbound,
  z.ZodTypeDef,
  MariadbMovePlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => MariadbMovePlatform$outboundSchema))
    .optional(),
  preferences: z.array(z.lazy(() => MariadbMovePreference$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
    preferences: "Preferences",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbMovePlacementSwarm$ {
  /** @deprecated use `MariadbMovePlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = MariadbMovePlacementSwarm$inboundSchema;
  /** @deprecated use `MariadbMovePlacementSwarm$outboundSchema` instead. */
  export const outboundSchema = MariadbMovePlacementSwarm$outboundSchema;
  /** @deprecated use `MariadbMovePlacementSwarm$Outbound` instead. */
  export type Outbound = MariadbMovePlacementSwarm$Outbound;
}

export function mariadbMovePlacementSwarmToJSON(
  mariadbMovePlacementSwarm: MariadbMovePlacementSwarm,
): string {
  return JSON.stringify(
    MariadbMovePlacementSwarm$outboundSchema.parse(mariadbMovePlacementSwarm),
  );
}

export function mariadbMovePlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbMovePlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbMovePlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbMovePlacementSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbMoveRestartPolicySwarm$inboundSchema: z.ZodType<
  MariadbMoveRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type MariadbMoveRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const MariadbMoveRestartPolicySwarm$outboundSchema: z.ZodType<
  MariadbMoveRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  MariadbMoveRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbMoveRestartPolicySwarm$ {
  /** @deprecated use `MariadbMoveRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema = MariadbMoveRestartPolicySwarm$inboundSchema;
  /** @deprecated use `MariadbMoveRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema = MariadbMoveRestartPolicySwarm$outboundSchema;
  /** @deprecated use `MariadbMoveRestartPolicySwarm$Outbound` instead. */
  export type Outbound = MariadbMoveRestartPolicySwarm$Outbound;
}

export function mariadbMoveRestartPolicySwarmToJSON(
  mariadbMoveRestartPolicySwarm: MariadbMoveRestartPolicySwarm,
): string {
  return JSON.stringify(
    MariadbMoveRestartPolicySwarm$outboundSchema.parse(
      mariadbMoveRestartPolicySwarm,
    ),
  );
}

export function mariadbMoveRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbMoveRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbMoveRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbMoveRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const MariadbMoveRollbackConfigSwarm$inboundSchema: z.ZodType<
  MariadbMoveRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  MaxFailureRatio: z.number().optional(),
  Monitor: z.number().optional(),
  Order: z.string(),
  Parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    "Delay": "delay",
    "FailureAction": "failureAction",
    "MaxFailureRatio": "maxFailureRatio",
    "Monitor": "monitor",
    "Order": "order",
    "Parallelism": "parallelism",
  });
});

/** @internal */
export type MariadbMoveRollbackConfigSwarm$Outbound = {
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  MaxFailureRatio?: number | undefined;
  Monitor?: number | undefined;
  Order: string;
  Parallelism: number;
};

/** @internal */
export const MariadbMoveRollbackConfigSwarm$outboundSchema: z.ZodType<
  MariadbMoveRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  MariadbMoveRollbackConfigSwarm
> = z.object({
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  maxFailureRatio: z.number().optional(),
  monitor: z.number().optional(),
  order: z.string(),
  parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    delay: "Delay",
    failureAction: "FailureAction",
    maxFailureRatio: "MaxFailureRatio",
    monitor: "Monitor",
    order: "Order",
    parallelism: "Parallelism",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbMoveRollbackConfigSwarm$ {
  /** @deprecated use `MariadbMoveRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MariadbMoveRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `MariadbMoveRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MariadbMoveRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `MariadbMoveRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = MariadbMoveRollbackConfigSwarm$Outbound;
}

export function mariadbMoveRollbackConfigSwarmToJSON(
  mariadbMoveRollbackConfigSwarm: MariadbMoveRollbackConfigSwarm,
): string {
  return JSON.stringify(
    MariadbMoveRollbackConfigSwarm$outboundSchema.parse(
      mariadbMoveRollbackConfigSwarm,
    ),
  );
}

export function mariadbMoveRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbMoveRollbackConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbMoveRollbackConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbMoveRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbMoveUpdateConfigSwarm$inboundSchema: z.ZodType<
  MariadbMoveUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  MaxFailureRatio: z.number().optional(),
  Monitor: z.number().optional(),
  Order: z.string(),
  Parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    "Delay": "delay",
    "FailureAction": "failureAction",
    "MaxFailureRatio": "maxFailureRatio",
    "Monitor": "monitor",
    "Order": "order",
    "Parallelism": "parallelism",
  });
});

/** @internal */
export type MariadbMoveUpdateConfigSwarm$Outbound = {
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  MaxFailureRatio?: number | undefined;
  Monitor?: number | undefined;
  Order: string;
  Parallelism: number;
};

/** @internal */
export const MariadbMoveUpdateConfigSwarm$outboundSchema: z.ZodType<
  MariadbMoveUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  MariadbMoveUpdateConfigSwarm
> = z.object({
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  maxFailureRatio: z.number().optional(),
  monitor: z.number().optional(),
  order: z.string(),
  parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    delay: "Delay",
    failureAction: "FailureAction",
    maxFailureRatio: "MaxFailureRatio",
    monitor: "Monitor",
    order: "Order",
    parallelism: "Parallelism",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbMoveUpdateConfigSwarm$ {
  /** @deprecated use `MariadbMoveUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MariadbMoveUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `MariadbMoveUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MariadbMoveUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `MariadbMoveUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = MariadbMoveUpdateConfigSwarm$Outbound;
}

export function mariadbMoveUpdateConfigSwarmToJSON(
  mariadbMoveUpdateConfigSwarm: MariadbMoveUpdateConfigSwarm,
): string {
  return JSON.stringify(
    MariadbMoveUpdateConfigSwarm$outboundSchema.parse(
      mariadbMoveUpdateConfigSwarm,
    ),
  );
}

export function mariadbMoveUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbMoveUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbMoveUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbMoveUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbMoveResponseBody$inboundSchema: z.ZodType<
  MariadbMoveResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  applicationStatus: MariadbMoveApplicationStatus$inboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databaseName: z.string(),
  databasePassword: z.string(),
  databaseRootPassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.lazy(() => MariadbMoveHealthCheckSwarm$inboundSchema),
  ),
  labelsSwarm: z.nullable(z.record(z.string())),
  mariadbId: z.string(),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(z.lazy(() => MariadbMoveModeSwarm$inboundSchema)),
  name: z.string(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MariadbMoveNetworkSwarm$inboundSchema)),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => MariadbMovePlacementSwarm$inboundSchema),
  ),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MariadbMoveRestartPolicySwarm$inboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MariadbMoveRollbackConfigSwarm$inboundSchema),
  ),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MariadbMoveUpdateConfigSwarm$inboundSchema),
  ),
});

/** @internal */
export type MariadbMoveResponseBody$Outbound = {
  appName: string;
  applicationStatus: string;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databaseName: string;
  databasePassword: string;
  databaseRootPassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: MariadbMoveHealthCheckSwarm$Outbound | null;
  labelsSwarm: { [k: string]: string } | null;
  mariadbId: string;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: MariadbMoveModeSwarm$Outbound | null;
  name: string;
  networkSwarm: Array<MariadbMoveNetworkSwarm$Outbound> | null;
  placementSwarm: MariadbMovePlacementSwarm$Outbound | null;
  replicas: number;
  restartPolicySwarm: MariadbMoveRestartPolicySwarm$Outbound | null;
  rollbackConfigSwarm: MariadbMoveRollbackConfigSwarm$Outbound | null;
  serverId: string | null;
  updateConfigSwarm: MariadbMoveUpdateConfigSwarm$Outbound | null;
};

/** @internal */
export const MariadbMoveResponseBody$outboundSchema: z.ZodType<
  MariadbMoveResponseBody$Outbound,
  z.ZodTypeDef,
  MariadbMoveResponseBody
> = z.object({
  appName: z.string(),
  applicationStatus: MariadbMoveApplicationStatus$outboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databaseName: z.string(),
  databasePassword: z.string(),
  databaseRootPassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.lazy(() => MariadbMoveHealthCheckSwarm$outboundSchema),
  ),
  labelsSwarm: z.nullable(z.record(z.string())),
  mariadbId: z.string(),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(z.lazy(() => MariadbMoveModeSwarm$outboundSchema)),
  name: z.string(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MariadbMoveNetworkSwarm$outboundSchema)),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => MariadbMovePlacementSwarm$outboundSchema),
  ),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MariadbMoveRestartPolicySwarm$outboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MariadbMoveRollbackConfigSwarm$outboundSchema),
  ),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MariadbMoveUpdateConfigSwarm$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbMoveResponseBody$ {
  /** @deprecated use `MariadbMoveResponseBody$inboundSchema` instead. */
  export const inboundSchema = MariadbMoveResponseBody$inboundSchema;
  /** @deprecated use `MariadbMoveResponseBody$outboundSchema` instead. */
  export const outboundSchema = MariadbMoveResponseBody$outboundSchema;
  /** @deprecated use `MariadbMoveResponseBody$Outbound` instead. */
  export type Outbound = MariadbMoveResponseBody$Outbound;
}

export function mariadbMoveResponseBodyToJSON(
  mariadbMoveResponseBody: MariadbMoveResponseBody,
): string {
  return JSON.stringify(
    MariadbMoveResponseBody$outboundSchema.parse(mariadbMoveResponseBody),
  );
}

export function mariadbMoveResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<MariadbMoveResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbMoveResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbMoveResponseBody' from JSON`,
  );
}

/** @internal */
export const MariadbMoveResponse$inboundSchema: z.ZodType<
  MariadbMoveResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => MariadbMoveResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type MariadbMoveResponse$Outbound =
  | MariadbMoveResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const MariadbMoveResponse$outboundSchema: z.ZodType<
  MariadbMoveResponse$Outbound,
  z.ZodTypeDef,
  MariadbMoveResponse
> = z.union([
  z.lazy(() => MariadbMoveResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbMoveResponse$ {
  /** @deprecated use `MariadbMoveResponse$inboundSchema` instead. */
  export const inboundSchema = MariadbMoveResponse$inboundSchema;
  /** @deprecated use `MariadbMoveResponse$outboundSchema` instead. */
  export const outboundSchema = MariadbMoveResponse$outboundSchema;
  /** @deprecated use `MariadbMoveResponse$Outbound` instead. */
  export type Outbound = MariadbMoveResponse$Outbound;
}

export function mariadbMoveResponseToJSON(
  mariadbMoveResponse: MariadbMoveResponse,
): string {
  return JSON.stringify(
    MariadbMoveResponse$outboundSchema.parse(mariadbMoveResponse),
  );
}

export function mariadbMoveResponseFromJSON(
  jsonString: string,
): SafeParseResult<MariadbMoveResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbMoveResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbMoveResponse' from JSON`,
  );
}
