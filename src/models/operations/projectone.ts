/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ProjectOneSecurity = {
  authorization: string;
};

export type ProjectOneRequest = {
  projectId: string;
};

export type ProjectOneEnvironment = {
  applications?: Array<any> | undefined;
  compose?: Array<any> | undefined;
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  mariadb?: Array<any> | undefined;
  mongo?: Array<any> | undefined;
  mysql?: Array<any> | undefined;
  name: string;
  postgres?: Array<any> | undefined;
  projectId: string;
  redis?: Array<any> | undefined;
};

/**
 * Successful response
 */
export type ProjectOneResponseBody = {
  createdAt: string;
  description: string | null;
  env: string;
  environments: Array<ProjectOneEnvironment>;
  name: string;
  organizationId: string;
  projectId: string;
};

export type ProjectOneResponse = ProjectOneResponseBody | models.ErrorT;

/** @internal */
export const ProjectOneSecurity$inboundSchema: z.ZodType<
  ProjectOneSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type ProjectOneSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const ProjectOneSecurity$outboundSchema: z.ZodType<
  ProjectOneSecurity$Outbound,
  z.ZodTypeDef,
  ProjectOneSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectOneSecurity$ {
  /** @deprecated use `ProjectOneSecurity$inboundSchema` instead. */
  export const inboundSchema = ProjectOneSecurity$inboundSchema;
  /** @deprecated use `ProjectOneSecurity$outboundSchema` instead. */
  export const outboundSchema = ProjectOneSecurity$outboundSchema;
  /** @deprecated use `ProjectOneSecurity$Outbound` instead. */
  export type Outbound = ProjectOneSecurity$Outbound;
}

export function projectOneSecurityToJSON(
  projectOneSecurity: ProjectOneSecurity,
): string {
  return JSON.stringify(
    ProjectOneSecurity$outboundSchema.parse(projectOneSecurity),
  );
}

export function projectOneSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ProjectOneSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectOneSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectOneSecurity' from JSON`,
  );
}

/** @internal */
export const ProjectOneRequest$inboundSchema: z.ZodType<
  ProjectOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
});

/** @internal */
export type ProjectOneRequest$Outbound = {
  projectId: string;
};

/** @internal */
export const ProjectOneRequest$outboundSchema: z.ZodType<
  ProjectOneRequest$Outbound,
  z.ZodTypeDef,
  ProjectOneRequest
> = z.object({
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectOneRequest$ {
  /** @deprecated use `ProjectOneRequest$inboundSchema` instead. */
  export const inboundSchema = ProjectOneRequest$inboundSchema;
  /** @deprecated use `ProjectOneRequest$outboundSchema` instead. */
  export const outboundSchema = ProjectOneRequest$outboundSchema;
  /** @deprecated use `ProjectOneRequest$Outbound` instead. */
  export type Outbound = ProjectOneRequest$Outbound;
}

export function projectOneRequestToJSON(
  projectOneRequest: ProjectOneRequest,
): string {
  return JSON.stringify(
    ProjectOneRequest$outboundSchema.parse(projectOneRequest),
  );
}

export function projectOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<ProjectOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectOneRequest' from JSON`,
  );
}

/** @internal */
export const ProjectOneEnvironment$inboundSchema: z.ZodType<
  ProjectOneEnvironment,
  z.ZodTypeDef,
  unknown
> = z.object({
  applications: z.array(z.any()).optional(),
  compose: z.array(z.any()).optional(),
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  mariadb: z.array(z.any()).optional(),
  mongo: z.array(z.any()).optional(),
  mysql: z.array(z.any()).optional(),
  name: z.string(),
  postgres: z.array(z.any()).optional(),
  projectId: z.string(),
  redis: z.array(z.any()).optional(),
});

/** @internal */
export type ProjectOneEnvironment$Outbound = {
  applications?: Array<any> | undefined;
  compose?: Array<any> | undefined;
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  mariadb?: Array<any> | undefined;
  mongo?: Array<any> | undefined;
  mysql?: Array<any> | undefined;
  name: string;
  postgres?: Array<any> | undefined;
  projectId: string;
  redis?: Array<any> | undefined;
};

/** @internal */
export const ProjectOneEnvironment$outboundSchema: z.ZodType<
  ProjectOneEnvironment$Outbound,
  z.ZodTypeDef,
  ProjectOneEnvironment
> = z.object({
  applications: z.array(z.any()).optional(),
  compose: z.array(z.any()).optional(),
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  mariadb: z.array(z.any()).optional(),
  mongo: z.array(z.any()).optional(),
  mysql: z.array(z.any()).optional(),
  name: z.string(),
  postgres: z.array(z.any()).optional(),
  projectId: z.string(),
  redis: z.array(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectOneEnvironment$ {
  /** @deprecated use `ProjectOneEnvironment$inboundSchema` instead. */
  export const inboundSchema = ProjectOneEnvironment$inboundSchema;
  /** @deprecated use `ProjectOneEnvironment$outboundSchema` instead. */
  export const outboundSchema = ProjectOneEnvironment$outboundSchema;
  /** @deprecated use `ProjectOneEnvironment$Outbound` instead. */
  export type Outbound = ProjectOneEnvironment$Outbound;
}

export function projectOneEnvironmentToJSON(
  projectOneEnvironment: ProjectOneEnvironment,
): string {
  return JSON.stringify(
    ProjectOneEnvironment$outboundSchema.parse(projectOneEnvironment),
  );
}

export function projectOneEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<ProjectOneEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectOneEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectOneEnvironment' from JSON`,
  );
}

/** @internal */
export const ProjectOneResponseBody$inboundSchema: z.ZodType<
  ProjectOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environments: z.array(z.lazy(() => ProjectOneEnvironment$inboundSchema)),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/** @internal */
export type ProjectOneResponseBody$Outbound = {
  createdAt: string;
  description: string | null;
  env: string;
  environments: Array<ProjectOneEnvironment$Outbound>;
  name: string;
  organizationId: string;
  projectId: string;
};

/** @internal */
export const ProjectOneResponseBody$outboundSchema: z.ZodType<
  ProjectOneResponseBody$Outbound,
  z.ZodTypeDef,
  ProjectOneResponseBody
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environments: z.array(z.lazy(() => ProjectOneEnvironment$outboundSchema)),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectOneResponseBody$ {
  /** @deprecated use `ProjectOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = ProjectOneResponseBody$inboundSchema;
  /** @deprecated use `ProjectOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = ProjectOneResponseBody$outboundSchema;
  /** @deprecated use `ProjectOneResponseBody$Outbound` instead. */
  export type Outbound = ProjectOneResponseBody$Outbound;
}

export function projectOneResponseBodyToJSON(
  projectOneResponseBody: ProjectOneResponseBody,
): string {
  return JSON.stringify(
    ProjectOneResponseBody$outboundSchema.parse(projectOneResponseBody),
  );
}

export function projectOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ProjectOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectOneResponseBody' from JSON`,
  );
}

/** @internal */
export const ProjectOneResponse$inboundSchema: z.ZodType<
  ProjectOneResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ProjectOneResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type ProjectOneResponse$Outbound =
  | ProjectOneResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const ProjectOneResponse$outboundSchema: z.ZodType<
  ProjectOneResponse$Outbound,
  z.ZodTypeDef,
  ProjectOneResponse
> = z.union([
  z.lazy(() => ProjectOneResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectOneResponse$ {
  /** @deprecated use `ProjectOneResponse$inboundSchema` instead. */
  export const inboundSchema = ProjectOneResponse$inboundSchema;
  /** @deprecated use `ProjectOneResponse$outboundSchema` instead. */
  export const outboundSchema = ProjectOneResponse$outboundSchema;
  /** @deprecated use `ProjectOneResponse$Outbound` instead. */
  export type Outbound = ProjectOneResponse$Outbound;
}

export function projectOneResponseToJSON(
  projectOneResponse: ProjectOneResponse,
): string {
  return JSON.stringify(
    ProjectOneResponse$outboundSchema.parse(projectOneResponse),
  );
}

export function projectOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<ProjectOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectOneResponse' from JSON`,
  );
}
