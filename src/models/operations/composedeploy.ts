/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComposeDeployRequest = {
  composeId: string;
  description?: string | undefined;
  title?: string | undefined;
};

/** @internal */
export const ComposeDeployRequest$inboundSchema: z.ZodType<
  ComposeDeployRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  composeId: z.string(),
  description: z.string().optional(),
  title: z.string().optional(),
});

/** @internal */
export type ComposeDeployRequest$Outbound = {
  composeId: string;
  description?: string | undefined;
  title?: string | undefined;
};

/** @internal */
export const ComposeDeployRequest$outboundSchema: z.ZodType<
  ComposeDeployRequest$Outbound,
  z.ZodTypeDef,
  ComposeDeployRequest
> = z.object({
  composeId: z.string(),
  description: z.string().optional(),
  title: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComposeDeployRequest$ {
  /** @deprecated use `ComposeDeployRequest$inboundSchema` instead. */
  export const inboundSchema = ComposeDeployRequest$inboundSchema;
  /** @deprecated use `ComposeDeployRequest$outboundSchema` instead. */
  export const outboundSchema = ComposeDeployRequest$outboundSchema;
  /** @deprecated use `ComposeDeployRequest$Outbound` instead. */
  export type Outbound = ComposeDeployRequest$Outbound;
}

export function composeDeployRequestToJSON(
  composeDeployRequest: ComposeDeployRequest,
): string {
  return JSON.stringify(
    ComposeDeployRequest$outboundSchema.parse(composeDeployRequest),
  );
}

export function composeDeployRequestFromJSON(
  jsonString: string,
): SafeParseResult<ComposeDeployRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComposeDeployRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComposeDeployRequest' from JSON`,
  );
}
