/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComposeCleanQueuesRequest = {
  composeId: string;
};

/** @internal */
export const ComposeCleanQueuesRequest$inboundSchema: z.ZodType<
  ComposeCleanQueuesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  composeId: z.string(),
});

/** @internal */
export type ComposeCleanQueuesRequest$Outbound = {
  composeId: string;
};

/** @internal */
export const ComposeCleanQueuesRequest$outboundSchema: z.ZodType<
  ComposeCleanQueuesRequest$Outbound,
  z.ZodTypeDef,
  ComposeCleanQueuesRequest
> = z.object({
  composeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComposeCleanQueuesRequest$ {
  /** @deprecated use `ComposeCleanQueuesRequest$inboundSchema` instead. */
  export const inboundSchema = ComposeCleanQueuesRequest$inboundSchema;
  /** @deprecated use `ComposeCleanQueuesRequest$outboundSchema` instead. */
  export const outboundSchema = ComposeCleanQueuesRequest$outboundSchema;
  /** @deprecated use `ComposeCleanQueuesRequest$Outbound` instead. */
  export type Outbound = ComposeCleanQueuesRequest$Outbound;
}

export function composeCleanQueuesRequestToJSON(
  composeCleanQueuesRequest: ComposeCleanQueuesRequest,
): string {
  return JSON.stringify(
    ComposeCleanQueuesRequest$outboundSchema.parse(composeCleanQueuesRequest),
  );
}

export function composeCleanQueuesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ComposeCleanQueuesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComposeCleanQueuesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComposeCleanQueuesRequest' from JSON`,
  );
}
