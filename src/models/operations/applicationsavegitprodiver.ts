/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ApplicationSaveGitProdiverSecurity = {
  authorization: string;
};

export type ApplicationSaveGitProdiverRequest = {
  applicationId: string;
  customGitBranch?: string | null | undefined;
  customGitBuildPath?: string | null | undefined;
  customGitSSHKeyId?: string | null | undefined;
  customGitUrl?: string | null | undefined;
  enableSubmodules: boolean;
  watchPaths?: Array<string> | null | undefined;
};

export type ApplicationSaveGitProdiverResponse = models.ErrorT | boolean;

/** @internal */
export const ApplicationSaveGitProdiverSecurity$inboundSchema: z.ZodType<
  ApplicationSaveGitProdiverSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type ApplicationSaveGitProdiverSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const ApplicationSaveGitProdiverSecurity$outboundSchema: z.ZodType<
  ApplicationSaveGitProdiverSecurity$Outbound,
  z.ZodTypeDef,
  ApplicationSaveGitProdiverSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationSaveGitProdiverSecurity$ {
  /** @deprecated use `ApplicationSaveGitProdiverSecurity$inboundSchema` instead. */
  export const inboundSchema = ApplicationSaveGitProdiverSecurity$inboundSchema;
  /** @deprecated use `ApplicationSaveGitProdiverSecurity$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationSaveGitProdiverSecurity$outboundSchema;
  /** @deprecated use `ApplicationSaveGitProdiverSecurity$Outbound` instead. */
  export type Outbound = ApplicationSaveGitProdiverSecurity$Outbound;
}

export function applicationSaveGitProdiverSecurityToJSON(
  applicationSaveGitProdiverSecurity: ApplicationSaveGitProdiverSecurity,
): string {
  return JSON.stringify(
    ApplicationSaveGitProdiverSecurity$outboundSchema.parse(
      applicationSaveGitProdiverSecurity,
    ),
  );
}

export function applicationSaveGitProdiverSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationSaveGitProdiverSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationSaveGitProdiverSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationSaveGitProdiverSecurity' from JSON`,
  );
}

/** @internal */
export const ApplicationSaveGitProdiverRequest$inboundSchema: z.ZodType<
  ApplicationSaveGitProdiverRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string(),
  customGitBranch: z.nullable(z.string()).optional(),
  customGitBuildPath: z.nullable(z.string()).optional(),
  customGitSSHKeyId: z.nullable(z.string()).optional(),
  customGitUrl: z.nullable(z.string()).optional(),
  enableSubmodules: z.boolean(),
  watchPaths: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type ApplicationSaveGitProdiverRequest$Outbound = {
  applicationId: string;
  customGitBranch?: string | null | undefined;
  customGitBuildPath?: string | null | undefined;
  customGitSSHKeyId?: string | null | undefined;
  customGitUrl?: string | null | undefined;
  enableSubmodules: boolean;
  watchPaths?: Array<string> | null | undefined;
};

/** @internal */
export const ApplicationSaveGitProdiverRequest$outboundSchema: z.ZodType<
  ApplicationSaveGitProdiverRequest$Outbound,
  z.ZodTypeDef,
  ApplicationSaveGitProdiverRequest
> = z.object({
  applicationId: z.string(),
  customGitBranch: z.nullable(z.string()).optional(),
  customGitBuildPath: z.nullable(z.string()).optional(),
  customGitSSHKeyId: z.nullable(z.string()).optional(),
  customGitUrl: z.nullable(z.string()).optional(),
  enableSubmodules: z.boolean(),
  watchPaths: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationSaveGitProdiverRequest$ {
  /** @deprecated use `ApplicationSaveGitProdiverRequest$inboundSchema` instead. */
  export const inboundSchema = ApplicationSaveGitProdiverRequest$inboundSchema;
  /** @deprecated use `ApplicationSaveGitProdiverRequest$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationSaveGitProdiverRequest$outboundSchema;
  /** @deprecated use `ApplicationSaveGitProdiverRequest$Outbound` instead. */
  export type Outbound = ApplicationSaveGitProdiverRequest$Outbound;
}

export function applicationSaveGitProdiverRequestToJSON(
  applicationSaveGitProdiverRequest: ApplicationSaveGitProdiverRequest,
): string {
  return JSON.stringify(
    ApplicationSaveGitProdiverRequest$outboundSchema.parse(
      applicationSaveGitProdiverRequest,
    ),
  );
}

export function applicationSaveGitProdiverRequestFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationSaveGitProdiverRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationSaveGitProdiverRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationSaveGitProdiverRequest' from JSON`,
  );
}

/** @internal */
export const ApplicationSaveGitProdiverResponse$inboundSchema: z.ZodType<
  ApplicationSaveGitProdiverResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.boolean()]);

/** @internal */
export type ApplicationSaveGitProdiverResponse$Outbound =
  | models.ErrorT$Outbound
  | boolean;

/** @internal */
export const ApplicationSaveGitProdiverResponse$outboundSchema: z.ZodType<
  ApplicationSaveGitProdiverResponse$Outbound,
  z.ZodTypeDef,
  ApplicationSaveGitProdiverResponse
> = z.union([models.ErrorT$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationSaveGitProdiverResponse$ {
  /** @deprecated use `ApplicationSaveGitProdiverResponse$inboundSchema` instead. */
  export const inboundSchema = ApplicationSaveGitProdiverResponse$inboundSchema;
  /** @deprecated use `ApplicationSaveGitProdiverResponse$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationSaveGitProdiverResponse$outboundSchema;
  /** @deprecated use `ApplicationSaveGitProdiverResponse$Outbound` instead. */
  export type Outbound = ApplicationSaveGitProdiverResponse$Outbound;
}

export function applicationSaveGitProdiverResponseToJSON(
  applicationSaveGitProdiverResponse: ApplicationSaveGitProdiverResponse,
): string {
  return JSON.stringify(
    ApplicationSaveGitProdiverResponse$outboundSchema.parse(
      applicationSaveGitProdiverResponse,
    ),
  );
}

export function applicationSaveGitProdiverResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationSaveGitProdiverResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationSaveGitProdiverResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationSaveGitProdiverResponse' from JSON`,
  );
}
