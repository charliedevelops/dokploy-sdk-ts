/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type BitbucketUpdateRequest = {
  appPassword?: string | null | undefined;
  bitbucketId: string;
  bitbucketUsername?: string | undefined;
  bitbucketWorkspaceName?: string | undefined;
  gitProviderId: string;
  name: string;
  organizationId?: string | undefined;
};

/**
 * Successful response
 */
export type BitbucketUpdateResponseBody = {
  appPassword: string | null;
  bitbucketId: string;
  bitbucketUsername: string | null;
  bitbucketWorkspaceName: string | null;
  gitProviderId: string;
};

export type BitbucketUpdateResponse =
  | BitbucketUpdateResponseBody
  | models.ErrorT;

/** @internal */
export const BitbucketUpdateRequest$inboundSchema: z.ZodType<
  BitbucketUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appPassword: z.nullable(z.string()).optional(),
  bitbucketId: z.string(),
  bitbucketUsername: z.string().optional(),
  bitbucketWorkspaceName: z.string().optional(),
  gitProviderId: z.string(),
  name: z.string(),
  organizationId: z.string().optional(),
});

/** @internal */
export type BitbucketUpdateRequest$Outbound = {
  appPassword?: string | null | undefined;
  bitbucketId: string;
  bitbucketUsername?: string | undefined;
  bitbucketWorkspaceName?: string | undefined;
  gitProviderId: string;
  name: string;
  organizationId?: string | undefined;
};

/** @internal */
export const BitbucketUpdateRequest$outboundSchema: z.ZodType<
  BitbucketUpdateRequest$Outbound,
  z.ZodTypeDef,
  BitbucketUpdateRequest
> = z.object({
  appPassword: z.nullable(z.string()).optional(),
  bitbucketId: z.string(),
  bitbucketUsername: z.string().optional(),
  bitbucketWorkspaceName: z.string().optional(),
  gitProviderId: z.string(),
  name: z.string(),
  organizationId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BitbucketUpdateRequest$ {
  /** @deprecated use `BitbucketUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = BitbucketUpdateRequest$inboundSchema;
  /** @deprecated use `BitbucketUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = BitbucketUpdateRequest$outboundSchema;
  /** @deprecated use `BitbucketUpdateRequest$Outbound` instead. */
  export type Outbound = BitbucketUpdateRequest$Outbound;
}

export function bitbucketUpdateRequestToJSON(
  bitbucketUpdateRequest: BitbucketUpdateRequest,
): string {
  return JSON.stringify(
    BitbucketUpdateRequest$outboundSchema.parse(bitbucketUpdateRequest),
  );
}

export function bitbucketUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<BitbucketUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BitbucketUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BitbucketUpdateRequest' from JSON`,
  );
}

/** @internal */
export const BitbucketUpdateResponseBody$inboundSchema: z.ZodType<
  BitbucketUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  appPassword: z.nullable(z.string()),
  bitbucketId: z.string(),
  bitbucketUsername: z.nullable(z.string()),
  bitbucketWorkspaceName: z.nullable(z.string()),
  gitProviderId: z.string(),
});

/** @internal */
export type BitbucketUpdateResponseBody$Outbound = {
  appPassword: string | null;
  bitbucketId: string;
  bitbucketUsername: string | null;
  bitbucketWorkspaceName: string | null;
  gitProviderId: string;
};

/** @internal */
export const BitbucketUpdateResponseBody$outboundSchema: z.ZodType<
  BitbucketUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  BitbucketUpdateResponseBody
> = z.object({
  appPassword: z.nullable(z.string()),
  bitbucketId: z.string(),
  bitbucketUsername: z.nullable(z.string()),
  bitbucketWorkspaceName: z.nullable(z.string()),
  gitProviderId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BitbucketUpdateResponseBody$ {
  /** @deprecated use `BitbucketUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = BitbucketUpdateResponseBody$inboundSchema;
  /** @deprecated use `BitbucketUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = BitbucketUpdateResponseBody$outboundSchema;
  /** @deprecated use `BitbucketUpdateResponseBody$Outbound` instead. */
  export type Outbound = BitbucketUpdateResponseBody$Outbound;
}

export function bitbucketUpdateResponseBodyToJSON(
  bitbucketUpdateResponseBody: BitbucketUpdateResponseBody,
): string {
  return JSON.stringify(
    BitbucketUpdateResponseBody$outboundSchema.parse(
      bitbucketUpdateResponseBody,
    ),
  );
}

export function bitbucketUpdateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<BitbucketUpdateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BitbucketUpdateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BitbucketUpdateResponseBody' from JSON`,
  );
}

/** @internal */
export const BitbucketUpdateResponse$inboundSchema: z.ZodType<
  BitbucketUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => BitbucketUpdateResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type BitbucketUpdateResponse$Outbound =
  | BitbucketUpdateResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const BitbucketUpdateResponse$outboundSchema: z.ZodType<
  BitbucketUpdateResponse$Outbound,
  z.ZodTypeDef,
  BitbucketUpdateResponse
> = z.union([
  z.lazy(() => BitbucketUpdateResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BitbucketUpdateResponse$ {
  /** @deprecated use `BitbucketUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = BitbucketUpdateResponse$inboundSchema;
  /** @deprecated use `BitbucketUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = BitbucketUpdateResponse$outboundSchema;
  /** @deprecated use `BitbucketUpdateResponse$Outbound` instead. */
  export type Outbound = BitbucketUpdateResponse$Outbound;
}

export function bitbucketUpdateResponseToJSON(
  bitbucketUpdateResponse: BitbucketUpdateResponse,
): string {
  return JSON.stringify(
    BitbucketUpdateResponse$outboundSchema.parse(bitbucketUpdateResponse),
  );
}

export function bitbucketUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<BitbucketUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BitbucketUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BitbucketUpdateResponse' from JSON`,
  );
}
