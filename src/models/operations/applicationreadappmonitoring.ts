/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ApplicationReadAppMonitoringSecurity = {
  authorization: string;
};

export type ApplicationReadAppMonitoringRequest = {
  appName: string;
};

export type BlockValue = {
  readMb: string;
  writeMb: string;
};

export type Block = {
  time: string;
  value: BlockValue;
};

export type Cpu = {
  time: string;
  value: string;
};

export type Disk = {
  time: string;
  value?: any | undefined;
};

export type MemoryValue = {
  total: string;
  used: string;
};

export type Memory = {
  time: string;
  value: MemoryValue;
};

export type NetworkValue = {
  inputMb: string;
  outputMb: string;
};

export type Network = {
  time: string;
  value: NetworkValue;
};

/**
 * Successful response
 */
export type ApplicationReadAppMonitoringResponseBody = {
  block: Array<Block>;
  cpu: Array<Cpu>;
  disk: Array<Disk>;
  memory: Array<Memory>;
  network: Array<Network>;
};

export type ApplicationReadAppMonitoringResponse =
  | ApplicationReadAppMonitoringResponseBody
  | models.ErrorT;

/** @internal */
export const ApplicationReadAppMonitoringSecurity$inboundSchema: z.ZodType<
  ApplicationReadAppMonitoringSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type ApplicationReadAppMonitoringSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const ApplicationReadAppMonitoringSecurity$outboundSchema: z.ZodType<
  ApplicationReadAppMonitoringSecurity$Outbound,
  z.ZodTypeDef,
  ApplicationReadAppMonitoringSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationReadAppMonitoringSecurity$ {
  /** @deprecated use `ApplicationReadAppMonitoringSecurity$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationReadAppMonitoringSecurity$inboundSchema;
  /** @deprecated use `ApplicationReadAppMonitoringSecurity$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationReadAppMonitoringSecurity$outboundSchema;
  /** @deprecated use `ApplicationReadAppMonitoringSecurity$Outbound` instead. */
  export type Outbound = ApplicationReadAppMonitoringSecurity$Outbound;
}

export function applicationReadAppMonitoringSecurityToJSON(
  applicationReadAppMonitoringSecurity: ApplicationReadAppMonitoringSecurity,
): string {
  return JSON.stringify(
    ApplicationReadAppMonitoringSecurity$outboundSchema.parse(
      applicationReadAppMonitoringSecurity,
    ),
  );
}

export function applicationReadAppMonitoringSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationReadAppMonitoringSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationReadAppMonitoringSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationReadAppMonitoringSecurity' from JSON`,
  );
}

/** @internal */
export const ApplicationReadAppMonitoringRequest$inboundSchema: z.ZodType<
  ApplicationReadAppMonitoringRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
});

/** @internal */
export type ApplicationReadAppMonitoringRequest$Outbound = {
  appName: string;
};

/** @internal */
export const ApplicationReadAppMonitoringRequest$outboundSchema: z.ZodType<
  ApplicationReadAppMonitoringRequest$Outbound,
  z.ZodTypeDef,
  ApplicationReadAppMonitoringRequest
> = z.object({
  appName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationReadAppMonitoringRequest$ {
  /** @deprecated use `ApplicationReadAppMonitoringRequest$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationReadAppMonitoringRequest$inboundSchema;
  /** @deprecated use `ApplicationReadAppMonitoringRequest$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationReadAppMonitoringRequest$outboundSchema;
  /** @deprecated use `ApplicationReadAppMonitoringRequest$Outbound` instead. */
  export type Outbound = ApplicationReadAppMonitoringRequest$Outbound;
}

export function applicationReadAppMonitoringRequestToJSON(
  applicationReadAppMonitoringRequest: ApplicationReadAppMonitoringRequest,
): string {
  return JSON.stringify(
    ApplicationReadAppMonitoringRequest$outboundSchema.parse(
      applicationReadAppMonitoringRequest,
    ),
  );
}

export function applicationReadAppMonitoringRequestFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationReadAppMonitoringRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationReadAppMonitoringRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationReadAppMonitoringRequest' from JSON`,
  );
}

/** @internal */
export const BlockValue$inboundSchema: z.ZodType<
  BlockValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  readMb: z.string(),
  writeMb: z.string(),
});

/** @internal */
export type BlockValue$Outbound = {
  readMb: string;
  writeMb: string;
};

/** @internal */
export const BlockValue$outboundSchema: z.ZodType<
  BlockValue$Outbound,
  z.ZodTypeDef,
  BlockValue
> = z.object({
  readMb: z.string(),
  writeMb: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BlockValue$ {
  /** @deprecated use `BlockValue$inboundSchema` instead. */
  export const inboundSchema = BlockValue$inboundSchema;
  /** @deprecated use `BlockValue$outboundSchema` instead. */
  export const outboundSchema = BlockValue$outboundSchema;
  /** @deprecated use `BlockValue$Outbound` instead. */
  export type Outbound = BlockValue$Outbound;
}

export function blockValueToJSON(blockValue: BlockValue): string {
  return JSON.stringify(BlockValue$outboundSchema.parse(blockValue));
}

export function blockValueFromJSON(
  jsonString: string,
): SafeParseResult<BlockValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BlockValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BlockValue' from JSON`,
  );
}

/** @internal */
export const Block$inboundSchema: z.ZodType<Block, z.ZodTypeDef, unknown> = z
  .object({
    time: z.string(),
    value: z.lazy(() => BlockValue$inboundSchema),
  });

/** @internal */
export type Block$Outbound = {
  time: string;
  value: BlockValue$Outbound;
};

/** @internal */
export const Block$outboundSchema: z.ZodType<
  Block$Outbound,
  z.ZodTypeDef,
  Block
> = z.object({
  time: z.string(),
  value: z.lazy(() => BlockValue$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Block$ {
  /** @deprecated use `Block$inboundSchema` instead. */
  export const inboundSchema = Block$inboundSchema;
  /** @deprecated use `Block$outboundSchema` instead. */
  export const outboundSchema = Block$outboundSchema;
  /** @deprecated use `Block$Outbound` instead. */
  export type Outbound = Block$Outbound;
}

export function blockToJSON(block: Block): string {
  return JSON.stringify(Block$outboundSchema.parse(block));
}

export function blockFromJSON(
  jsonString: string,
): SafeParseResult<Block, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Block$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Block' from JSON`,
  );
}

/** @internal */
export const Cpu$inboundSchema: z.ZodType<Cpu, z.ZodTypeDef, unknown> = z
  .object({
    time: z.string(),
    value: z.string(),
  });

/** @internal */
export type Cpu$Outbound = {
  time: string;
  value: string;
};

/** @internal */
export const Cpu$outboundSchema: z.ZodType<Cpu$Outbound, z.ZodTypeDef, Cpu> = z
  .object({
    time: z.string(),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Cpu$ {
  /** @deprecated use `Cpu$inboundSchema` instead. */
  export const inboundSchema = Cpu$inboundSchema;
  /** @deprecated use `Cpu$outboundSchema` instead. */
  export const outboundSchema = Cpu$outboundSchema;
  /** @deprecated use `Cpu$Outbound` instead. */
  export type Outbound = Cpu$Outbound;
}

export function cpuToJSON(cpu: Cpu): string {
  return JSON.stringify(Cpu$outboundSchema.parse(cpu));
}

export function cpuFromJSON(
  jsonString: string,
): SafeParseResult<Cpu, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Cpu$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Cpu' from JSON`,
  );
}

/** @internal */
export const Disk$inboundSchema: z.ZodType<Disk, z.ZodTypeDef, unknown> = z
  .object({
    time: z.string(),
    value: z.any().optional(),
  });

/** @internal */
export type Disk$Outbound = {
  time: string;
  value?: any | undefined;
};

/** @internal */
export const Disk$outboundSchema: z.ZodType<Disk$Outbound, z.ZodTypeDef, Disk> =
  z.object({
    time: z.string(),
    value: z.any().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Disk$ {
  /** @deprecated use `Disk$inboundSchema` instead. */
  export const inboundSchema = Disk$inboundSchema;
  /** @deprecated use `Disk$outboundSchema` instead. */
  export const outboundSchema = Disk$outboundSchema;
  /** @deprecated use `Disk$Outbound` instead. */
  export type Outbound = Disk$Outbound;
}

export function diskToJSON(disk: Disk): string {
  return JSON.stringify(Disk$outboundSchema.parse(disk));
}

export function diskFromJSON(
  jsonString: string,
): SafeParseResult<Disk, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Disk$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Disk' from JSON`,
  );
}

/** @internal */
export const MemoryValue$inboundSchema: z.ZodType<
  MemoryValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  total: z.string(),
  used: z.string(),
});

/** @internal */
export type MemoryValue$Outbound = {
  total: string;
  used: string;
};

/** @internal */
export const MemoryValue$outboundSchema: z.ZodType<
  MemoryValue$Outbound,
  z.ZodTypeDef,
  MemoryValue
> = z.object({
  total: z.string(),
  used: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MemoryValue$ {
  /** @deprecated use `MemoryValue$inboundSchema` instead. */
  export const inboundSchema = MemoryValue$inboundSchema;
  /** @deprecated use `MemoryValue$outboundSchema` instead. */
  export const outboundSchema = MemoryValue$outboundSchema;
  /** @deprecated use `MemoryValue$Outbound` instead. */
  export type Outbound = MemoryValue$Outbound;
}

export function memoryValueToJSON(memoryValue: MemoryValue): string {
  return JSON.stringify(MemoryValue$outboundSchema.parse(memoryValue));
}

export function memoryValueFromJSON(
  jsonString: string,
): SafeParseResult<MemoryValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MemoryValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MemoryValue' from JSON`,
  );
}

/** @internal */
export const Memory$inboundSchema: z.ZodType<Memory, z.ZodTypeDef, unknown> = z
  .object({
    time: z.string(),
    value: z.lazy(() => MemoryValue$inboundSchema),
  });

/** @internal */
export type Memory$Outbound = {
  time: string;
  value: MemoryValue$Outbound;
};

/** @internal */
export const Memory$outboundSchema: z.ZodType<
  Memory$Outbound,
  z.ZodTypeDef,
  Memory
> = z.object({
  time: z.string(),
  value: z.lazy(() => MemoryValue$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Memory$ {
  /** @deprecated use `Memory$inboundSchema` instead. */
  export const inboundSchema = Memory$inboundSchema;
  /** @deprecated use `Memory$outboundSchema` instead. */
  export const outboundSchema = Memory$outboundSchema;
  /** @deprecated use `Memory$Outbound` instead. */
  export type Outbound = Memory$Outbound;
}

export function memoryToJSON(memory: Memory): string {
  return JSON.stringify(Memory$outboundSchema.parse(memory));
}

export function memoryFromJSON(
  jsonString: string,
): SafeParseResult<Memory, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Memory$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Memory' from JSON`,
  );
}

/** @internal */
export const NetworkValue$inboundSchema: z.ZodType<
  NetworkValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  inputMb: z.string(),
  outputMb: z.string(),
});

/** @internal */
export type NetworkValue$Outbound = {
  inputMb: string;
  outputMb: string;
};

/** @internal */
export const NetworkValue$outboundSchema: z.ZodType<
  NetworkValue$Outbound,
  z.ZodTypeDef,
  NetworkValue
> = z.object({
  inputMb: z.string(),
  outputMb: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NetworkValue$ {
  /** @deprecated use `NetworkValue$inboundSchema` instead. */
  export const inboundSchema = NetworkValue$inboundSchema;
  /** @deprecated use `NetworkValue$outboundSchema` instead. */
  export const outboundSchema = NetworkValue$outboundSchema;
  /** @deprecated use `NetworkValue$Outbound` instead. */
  export type Outbound = NetworkValue$Outbound;
}

export function networkValueToJSON(networkValue: NetworkValue): string {
  return JSON.stringify(NetworkValue$outboundSchema.parse(networkValue));
}

export function networkValueFromJSON(
  jsonString: string,
): SafeParseResult<NetworkValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NetworkValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NetworkValue' from JSON`,
  );
}

/** @internal */
export const Network$inboundSchema: z.ZodType<Network, z.ZodTypeDef, unknown> =
  z.object({
    time: z.string(),
    value: z.lazy(() => NetworkValue$inboundSchema),
  });

/** @internal */
export type Network$Outbound = {
  time: string;
  value: NetworkValue$Outbound;
};

/** @internal */
export const Network$outboundSchema: z.ZodType<
  Network$Outbound,
  z.ZodTypeDef,
  Network
> = z.object({
  time: z.string(),
  value: z.lazy(() => NetworkValue$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Network$ {
  /** @deprecated use `Network$inboundSchema` instead. */
  export const inboundSchema = Network$inboundSchema;
  /** @deprecated use `Network$outboundSchema` instead. */
  export const outboundSchema = Network$outboundSchema;
  /** @deprecated use `Network$Outbound` instead. */
  export type Outbound = Network$Outbound;
}

export function networkToJSON(network: Network): string {
  return JSON.stringify(Network$outboundSchema.parse(network));
}

export function networkFromJSON(
  jsonString: string,
): SafeParseResult<Network, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Network$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Network' from JSON`,
  );
}

/** @internal */
export const ApplicationReadAppMonitoringResponseBody$inboundSchema: z.ZodType<
  ApplicationReadAppMonitoringResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  block: z.array(z.lazy(() => Block$inboundSchema)),
  cpu: z.array(z.lazy(() => Cpu$inboundSchema)),
  disk: z.array(z.lazy(() => Disk$inboundSchema)),
  memory: z.array(z.lazy(() => Memory$inboundSchema)),
  network: z.array(z.lazy(() => Network$inboundSchema)),
});

/** @internal */
export type ApplicationReadAppMonitoringResponseBody$Outbound = {
  block: Array<Block$Outbound>;
  cpu: Array<Cpu$Outbound>;
  disk: Array<Disk$Outbound>;
  memory: Array<Memory$Outbound>;
  network: Array<Network$Outbound>;
};

/** @internal */
export const ApplicationReadAppMonitoringResponseBody$outboundSchema: z.ZodType<
  ApplicationReadAppMonitoringResponseBody$Outbound,
  z.ZodTypeDef,
  ApplicationReadAppMonitoringResponseBody
> = z.object({
  block: z.array(z.lazy(() => Block$outboundSchema)),
  cpu: z.array(z.lazy(() => Cpu$outboundSchema)),
  disk: z.array(z.lazy(() => Disk$outboundSchema)),
  memory: z.array(z.lazy(() => Memory$outboundSchema)),
  network: z.array(z.lazy(() => Network$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationReadAppMonitoringResponseBody$ {
  /** @deprecated use `ApplicationReadAppMonitoringResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationReadAppMonitoringResponseBody$inboundSchema;
  /** @deprecated use `ApplicationReadAppMonitoringResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationReadAppMonitoringResponseBody$outboundSchema;
  /** @deprecated use `ApplicationReadAppMonitoringResponseBody$Outbound` instead. */
  export type Outbound = ApplicationReadAppMonitoringResponseBody$Outbound;
}

export function applicationReadAppMonitoringResponseBodyToJSON(
  applicationReadAppMonitoringResponseBody:
    ApplicationReadAppMonitoringResponseBody,
): string {
  return JSON.stringify(
    ApplicationReadAppMonitoringResponseBody$outboundSchema.parse(
      applicationReadAppMonitoringResponseBody,
    ),
  );
}

export function applicationReadAppMonitoringResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ApplicationReadAppMonitoringResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationReadAppMonitoringResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApplicationReadAppMonitoringResponseBody' from JSON`,
  );
}

/** @internal */
export const ApplicationReadAppMonitoringResponse$inboundSchema: z.ZodType<
  ApplicationReadAppMonitoringResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ApplicationReadAppMonitoringResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type ApplicationReadAppMonitoringResponse$Outbound =
  | ApplicationReadAppMonitoringResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const ApplicationReadAppMonitoringResponse$outboundSchema: z.ZodType<
  ApplicationReadAppMonitoringResponse$Outbound,
  z.ZodTypeDef,
  ApplicationReadAppMonitoringResponse
> = z.union([
  z.lazy(() => ApplicationReadAppMonitoringResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationReadAppMonitoringResponse$ {
  /** @deprecated use `ApplicationReadAppMonitoringResponse$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationReadAppMonitoringResponse$inboundSchema;
  /** @deprecated use `ApplicationReadAppMonitoringResponse$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationReadAppMonitoringResponse$outboundSchema;
  /** @deprecated use `ApplicationReadAppMonitoringResponse$Outbound` instead. */
  export type Outbound = ApplicationReadAppMonitoringResponse$Outbound;
}

export function applicationReadAppMonitoringResponseToJSON(
  applicationReadAppMonitoringResponse: ApplicationReadAppMonitoringResponse,
): string {
  return JSON.stringify(
    ApplicationReadAppMonitoringResponse$outboundSchema.parse(
      applicationReadAppMonitoringResponse,
    ),
  );
}

export function applicationReadAppMonitoringResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationReadAppMonitoringResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationReadAppMonitoringResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationReadAppMonitoringResponse' from JSON`,
  );
}
