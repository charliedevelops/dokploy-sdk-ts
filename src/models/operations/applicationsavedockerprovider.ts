/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ApplicationSaveDockerProviderSecurity = {
  authorization: string;
};

export type ApplicationSaveDockerProviderRequest = {
  applicationId: string;
  dockerImage?: string | null | undefined;
  password?: string | null | undefined;
  registryUrl?: string | null | undefined;
  username?: string | null | undefined;
};

export type ApplicationSaveDockerProviderResponse = models.ErrorT | boolean;

/** @internal */
export const ApplicationSaveDockerProviderSecurity$inboundSchema: z.ZodType<
  ApplicationSaveDockerProviderSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type ApplicationSaveDockerProviderSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const ApplicationSaveDockerProviderSecurity$outboundSchema: z.ZodType<
  ApplicationSaveDockerProviderSecurity$Outbound,
  z.ZodTypeDef,
  ApplicationSaveDockerProviderSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationSaveDockerProviderSecurity$ {
  /** @deprecated use `ApplicationSaveDockerProviderSecurity$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationSaveDockerProviderSecurity$inboundSchema;
  /** @deprecated use `ApplicationSaveDockerProviderSecurity$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationSaveDockerProviderSecurity$outboundSchema;
  /** @deprecated use `ApplicationSaveDockerProviderSecurity$Outbound` instead. */
  export type Outbound = ApplicationSaveDockerProviderSecurity$Outbound;
}

export function applicationSaveDockerProviderSecurityToJSON(
  applicationSaveDockerProviderSecurity: ApplicationSaveDockerProviderSecurity,
): string {
  return JSON.stringify(
    ApplicationSaveDockerProviderSecurity$outboundSchema.parse(
      applicationSaveDockerProviderSecurity,
    ),
  );
}

export function applicationSaveDockerProviderSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationSaveDockerProviderSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationSaveDockerProviderSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationSaveDockerProviderSecurity' from JSON`,
  );
}

/** @internal */
export const ApplicationSaveDockerProviderRequest$inboundSchema: z.ZodType<
  ApplicationSaveDockerProviderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string(),
  dockerImage: z.nullable(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  registryUrl: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
});

/** @internal */
export type ApplicationSaveDockerProviderRequest$Outbound = {
  applicationId: string;
  dockerImage?: string | null | undefined;
  password?: string | null | undefined;
  registryUrl?: string | null | undefined;
  username?: string | null | undefined;
};

/** @internal */
export const ApplicationSaveDockerProviderRequest$outboundSchema: z.ZodType<
  ApplicationSaveDockerProviderRequest$Outbound,
  z.ZodTypeDef,
  ApplicationSaveDockerProviderRequest
> = z.object({
  applicationId: z.string(),
  dockerImage: z.nullable(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  registryUrl: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationSaveDockerProviderRequest$ {
  /** @deprecated use `ApplicationSaveDockerProviderRequest$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationSaveDockerProviderRequest$inboundSchema;
  /** @deprecated use `ApplicationSaveDockerProviderRequest$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationSaveDockerProviderRequest$outboundSchema;
  /** @deprecated use `ApplicationSaveDockerProviderRequest$Outbound` instead. */
  export type Outbound = ApplicationSaveDockerProviderRequest$Outbound;
}

export function applicationSaveDockerProviderRequestToJSON(
  applicationSaveDockerProviderRequest: ApplicationSaveDockerProviderRequest,
): string {
  return JSON.stringify(
    ApplicationSaveDockerProviderRequest$outboundSchema.parse(
      applicationSaveDockerProviderRequest,
    ),
  );
}

export function applicationSaveDockerProviderRequestFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationSaveDockerProviderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationSaveDockerProviderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationSaveDockerProviderRequest' from JSON`,
  );
}

/** @internal */
export const ApplicationSaveDockerProviderResponse$inboundSchema: z.ZodType<
  ApplicationSaveDockerProviderResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.boolean()]);

/** @internal */
export type ApplicationSaveDockerProviderResponse$Outbound =
  | models.ErrorT$Outbound
  | boolean;

/** @internal */
export const ApplicationSaveDockerProviderResponse$outboundSchema: z.ZodType<
  ApplicationSaveDockerProviderResponse$Outbound,
  z.ZodTypeDef,
  ApplicationSaveDockerProviderResponse
> = z.union([models.ErrorT$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationSaveDockerProviderResponse$ {
  /** @deprecated use `ApplicationSaveDockerProviderResponse$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationSaveDockerProviderResponse$inboundSchema;
  /** @deprecated use `ApplicationSaveDockerProviderResponse$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationSaveDockerProviderResponse$outboundSchema;
  /** @deprecated use `ApplicationSaveDockerProviderResponse$Outbound` instead. */
  export type Outbound = ApplicationSaveDockerProviderResponse$Outbound;
}

export function applicationSaveDockerProviderResponseToJSON(
  applicationSaveDockerProviderResponse: ApplicationSaveDockerProviderResponse,
): string {
  return JSON.stringify(
    ApplicationSaveDockerProviderResponse$outboundSchema.parse(
      applicationSaveDockerProviderResponse,
    ),
  );
}

export function applicationSaveDockerProviderResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationSaveDockerProviderResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationSaveDockerProviderResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationSaveDockerProviderResponse' from JSON`,
  );
}
