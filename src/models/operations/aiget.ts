/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AiGetRequest = {
  aiId: string;
};

/** @internal */
export const AiGetRequest$inboundSchema: z.ZodType<
  AiGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  aiId: z.string(),
});

/** @internal */
export type AiGetRequest$Outbound = {
  aiId: string;
};

/** @internal */
export const AiGetRequest$outboundSchema: z.ZodType<
  AiGetRequest$Outbound,
  z.ZodTypeDef,
  AiGetRequest
> = z.object({
  aiId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AiGetRequest$ {
  /** @deprecated use `AiGetRequest$inboundSchema` instead. */
  export const inboundSchema = AiGetRequest$inboundSchema;
  /** @deprecated use `AiGetRequest$outboundSchema` instead. */
  export const outboundSchema = AiGetRequest$outboundSchema;
  /** @deprecated use `AiGetRequest$Outbound` instead. */
  export type Outbound = AiGetRequest$Outbound;
}

export function aiGetRequestToJSON(aiGetRequest: AiGetRequest): string {
  return JSON.stringify(AiGetRequest$outboundSchema.parse(aiGetRequest));
}

export function aiGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<AiGetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AiGetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AiGetRequest' from JSON`,
  );
}
