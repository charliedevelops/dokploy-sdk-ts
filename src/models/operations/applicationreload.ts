/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ApplicationReloadSecurity = {
  authorization: string;
};

export type ApplicationReloadRequest = {
  appName: string;
  applicationId: string;
};

export type ApplicationReloadResponse = models.ErrorT | boolean;

/** @internal */
export const ApplicationReloadSecurity$inboundSchema: z.ZodType<
  ApplicationReloadSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type ApplicationReloadSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const ApplicationReloadSecurity$outboundSchema: z.ZodType<
  ApplicationReloadSecurity$Outbound,
  z.ZodTypeDef,
  ApplicationReloadSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationReloadSecurity$ {
  /** @deprecated use `ApplicationReloadSecurity$inboundSchema` instead. */
  export const inboundSchema = ApplicationReloadSecurity$inboundSchema;
  /** @deprecated use `ApplicationReloadSecurity$outboundSchema` instead. */
  export const outboundSchema = ApplicationReloadSecurity$outboundSchema;
  /** @deprecated use `ApplicationReloadSecurity$Outbound` instead. */
  export type Outbound = ApplicationReloadSecurity$Outbound;
}

export function applicationReloadSecurityToJSON(
  applicationReloadSecurity: ApplicationReloadSecurity,
): string {
  return JSON.stringify(
    ApplicationReloadSecurity$outboundSchema.parse(applicationReloadSecurity),
  );
}

export function applicationReloadSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationReloadSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationReloadSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationReloadSecurity' from JSON`,
  );
}

/** @internal */
export const ApplicationReloadRequest$inboundSchema: z.ZodType<
  ApplicationReloadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  applicationId: z.string(),
});

/** @internal */
export type ApplicationReloadRequest$Outbound = {
  appName: string;
  applicationId: string;
};

/** @internal */
export const ApplicationReloadRequest$outboundSchema: z.ZodType<
  ApplicationReloadRequest$Outbound,
  z.ZodTypeDef,
  ApplicationReloadRequest
> = z.object({
  appName: z.string(),
  applicationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationReloadRequest$ {
  /** @deprecated use `ApplicationReloadRequest$inboundSchema` instead. */
  export const inboundSchema = ApplicationReloadRequest$inboundSchema;
  /** @deprecated use `ApplicationReloadRequest$outboundSchema` instead. */
  export const outboundSchema = ApplicationReloadRequest$outboundSchema;
  /** @deprecated use `ApplicationReloadRequest$Outbound` instead. */
  export type Outbound = ApplicationReloadRequest$Outbound;
}

export function applicationReloadRequestToJSON(
  applicationReloadRequest: ApplicationReloadRequest,
): string {
  return JSON.stringify(
    ApplicationReloadRequest$outboundSchema.parse(applicationReloadRequest),
  );
}

export function applicationReloadRequestFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationReloadRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationReloadRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationReloadRequest' from JSON`,
  );
}

/** @internal */
export const ApplicationReloadResponse$inboundSchema: z.ZodType<
  ApplicationReloadResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.boolean()]);

/** @internal */
export type ApplicationReloadResponse$Outbound =
  | models.ErrorT$Outbound
  | boolean;

/** @internal */
export const ApplicationReloadResponse$outboundSchema: z.ZodType<
  ApplicationReloadResponse$Outbound,
  z.ZodTypeDef,
  ApplicationReloadResponse
> = z.union([models.ErrorT$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationReloadResponse$ {
  /** @deprecated use `ApplicationReloadResponse$inboundSchema` instead. */
  export const inboundSchema = ApplicationReloadResponse$inboundSchema;
  /** @deprecated use `ApplicationReloadResponse$outboundSchema` instead. */
  export const outboundSchema = ApplicationReloadResponse$outboundSchema;
  /** @deprecated use `ApplicationReloadResponse$Outbound` instead. */
  export type Outbound = ApplicationReloadResponse$Outbound;
}

export function applicationReloadResponseToJSON(
  applicationReloadResponse: ApplicationReloadResponse,
): string {
  return JSON.stringify(
    ApplicationReloadResponse$outboundSchema.parse(applicationReloadResponse),
  );
}

export function applicationReloadResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationReloadResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationReloadResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationReloadResponse' from JSON`,
  );
}
