/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type EnvironmentCreateSecurity = {
  authorization: string;
};

export type EnvironmentCreateRequest = {
  name: string;
  description?: string | null | undefined;
  projectId: string;
};

/**
 * Successful response
 */
export type EnvironmentCreateResponseBody = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
};

export type EnvironmentCreateResponse =
  | EnvironmentCreateResponseBody
  | models.ErrorT;

/** @internal */
export const EnvironmentCreateSecurity$inboundSchema: z.ZodType<
  EnvironmentCreateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type EnvironmentCreateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const EnvironmentCreateSecurity$outboundSchema: z.ZodType<
  EnvironmentCreateSecurity$Outbound,
  z.ZodTypeDef,
  EnvironmentCreateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentCreateSecurity$ {
  /** @deprecated use `EnvironmentCreateSecurity$inboundSchema` instead. */
  export const inboundSchema = EnvironmentCreateSecurity$inboundSchema;
  /** @deprecated use `EnvironmentCreateSecurity$outboundSchema` instead. */
  export const outboundSchema = EnvironmentCreateSecurity$outboundSchema;
  /** @deprecated use `EnvironmentCreateSecurity$Outbound` instead. */
  export type Outbound = EnvironmentCreateSecurity$Outbound;
}

export function environmentCreateSecurityToJSON(
  environmentCreateSecurity: EnvironmentCreateSecurity,
): string {
  return JSON.stringify(
    EnvironmentCreateSecurity$outboundSchema.parse(environmentCreateSecurity),
  );
}

export function environmentCreateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentCreateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentCreateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentCreateSecurity' from JSON`,
  );
}

/** @internal */
export const EnvironmentCreateRequest$inboundSchema: z.ZodType<
  EnvironmentCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  projectId: z.string(),
});

/** @internal */
export type EnvironmentCreateRequest$Outbound = {
  name: string;
  description?: string | null | undefined;
  projectId: string;
};

/** @internal */
export const EnvironmentCreateRequest$outboundSchema: z.ZodType<
  EnvironmentCreateRequest$Outbound,
  z.ZodTypeDef,
  EnvironmentCreateRequest
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentCreateRequest$ {
  /** @deprecated use `EnvironmentCreateRequest$inboundSchema` instead. */
  export const inboundSchema = EnvironmentCreateRequest$inboundSchema;
  /** @deprecated use `EnvironmentCreateRequest$outboundSchema` instead. */
  export const outboundSchema = EnvironmentCreateRequest$outboundSchema;
  /** @deprecated use `EnvironmentCreateRequest$Outbound` instead. */
  export type Outbound = EnvironmentCreateRequest$Outbound;
}

export function environmentCreateRequestToJSON(
  environmentCreateRequest: EnvironmentCreateRequest,
): string {
  return JSON.stringify(
    EnvironmentCreateRequest$outboundSchema.parse(environmentCreateRequest),
  );
}

export function environmentCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentCreateRequest' from JSON`,
  );
}

/** @internal */
export const EnvironmentCreateResponseBody$inboundSchema: z.ZodType<
  EnvironmentCreateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
});

/** @internal */
export type EnvironmentCreateResponseBody$Outbound = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
};

/** @internal */
export const EnvironmentCreateResponseBody$outboundSchema: z.ZodType<
  EnvironmentCreateResponseBody$Outbound,
  z.ZodTypeDef,
  EnvironmentCreateResponseBody
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentCreateResponseBody$ {
  /** @deprecated use `EnvironmentCreateResponseBody$inboundSchema` instead. */
  export const inboundSchema = EnvironmentCreateResponseBody$inboundSchema;
  /** @deprecated use `EnvironmentCreateResponseBody$outboundSchema` instead. */
  export const outboundSchema = EnvironmentCreateResponseBody$outboundSchema;
  /** @deprecated use `EnvironmentCreateResponseBody$Outbound` instead. */
  export type Outbound = EnvironmentCreateResponseBody$Outbound;
}

export function environmentCreateResponseBodyToJSON(
  environmentCreateResponseBody: EnvironmentCreateResponseBody,
): string {
  return JSON.stringify(
    EnvironmentCreateResponseBody$outboundSchema.parse(
      environmentCreateResponseBody,
    ),
  );
}

export function environmentCreateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentCreateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentCreateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentCreateResponseBody' from JSON`,
  );
}

/** @internal */
export const EnvironmentCreateResponse$inboundSchema: z.ZodType<
  EnvironmentCreateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => EnvironmentCreateResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type EnvironmentCreateResponse$Outbound =
  | EnvironmentCreateResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const EnvironmentCreateResponse$outboundSchema: z.ZodType<
  EnvironmentCreateResponse$Outbound,
  z.ZodTypeDef,
  EnvironmentCreateResponse
> = z.union([
  z.lazy(() => EnvironmentCreateResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentCreateResponse$ {
  /** @deprecated use `EnvironmentCreateResponse$inboundSchema` instead. */
  export const inboundSchema = EnvironmentCreateResponse$inboundSchema;
  /** @deprecated use `EnvironmentCreateResponse$outboundSchema` instead. */
  export const outboundSchema = EnvironmentCreateResponse$outboundSchema;
  /** @deprecated use `EnvironmentCreateResponse$Outbound` instead. */
  export type Outbound = EnvironmentCreateResponse$Outbound;
}

export function environmentCreateResponseToJSON(
  environmentCreateResponse: EnvironmentCreateResponse,
): string {
  return JSON.stringify(
    EnvironmentCreateResponse$outboundSchema.parse(environmentCreateResponse),
  );
}

export function environmentCreateResponseFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentCreateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentCreateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentCreateResponse' from JSON`,
  );
}
