/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type MongoDeployRequest = {
  mongoId: string;
};

export const MongoDeployApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type MongoDeployApplicationStatus = ClosedEnum<
  typeof MongoDeployApplicationStatus
>;

export const MongoDeployBackupType = {
  Database: "database",
  Compose: "compose",
} as const;
export type MongoDeployBackupType = ClosedEnum<typeof MongoDeployBackupType>;

export const MongoDeployDatabaseType = {
  Postgres: "postgres",
  Mariadb: "mariadb",
  Mysql: "mysql",
  Mongo: "mongo",
  WebServer: "web-server",
} as const;
export type MongoDeployDatabaseType = ClosedEnum<
  typeof MongoDeployDatabaseType
>;

export const MongoDeployMetadataEnum = {
  Null: "null",
} as const;
export type MongoDeployMetadataEnum = ClosedEnum<
  typeof MongoDeployMetadataEnum
>;

export type MongoDeployMariadb = {
  databasePassword: string;
  databaseUser: string;
};

export type MongoDeployMongo = {
  databasePassword: string;
  databaseUser: string;
};

export type MongoDeployMysql = {
  databaseRootPassword: string;
};

export type MongoDeployPostgres = {
  databaseUser: string;
};

export type MongoDeployMetadata = {
  mariadb?: MongoDeployMariadb | undefined;
  mongo?: MongoDeployMongo | undefined;
  mysql?: MongoDeployMysql | undefined;
  postgres?: MongoDeployPostgres | undefined;
};

export type MongoDeployMetadataUnion =
  | MongoDeployMetadata
  | MongoDeployMetadataEnum;

export type MongoDeployBackup = {
  appName: string;
  backupId: string;
  backupType: MongoDeployBackupType;
  composeId: string | null;
  database: string;
  databaseType: MongoDeployDatabaseType;
  destinationId: string;
  enabled: boolean | null;
  keepLatestCount: number | null;
  mariadbId: string | null;
  metadata?: MongoDeployMetadata | MongoDeployMetadataEnum | null | undefined;
  mongoId: string | null;
  mysqlId: string | null;
  postgresId: string | null;
  prefix: string;
  schedule: string;
  serviceName: string | null;
  userId: string | null;
};

export type MongoDeployProject = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

export type MongoDeployEnvironment = {
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  name: string;
  project: MongoDeployProject;
  projectId: string;
};

export type MongoDeployHealthCheckSwarm = {
  interval?: number | undefined;
  retries?: number | undefined;
  startPeriod?: number | undefined;
  test?: Array<string> | undefined;
  timeout?: number | undefined;
};

export type MongoDeployGlobal = {};

export type MongoDeployGlobalJob = {};

export type MongoDeployReplicated = {
  replicas?: number | undefined;
};

export type MongoDeployReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type MongoDeployModeSwarm = {
  global?: MongoDeployGlobal | undefined;
  globalJob?: MongoDeployGlobalJob | undefined;
  replicated?: MongoDeployReplicated | undefined;
  replicatedJob?: MongoDeployReplicatedJob | undefined;
};

export const MongoDeployServiceType = {
  Application: "application",
  Postgres: "postgres",
  Mysql: "mysql",
  Mariadb: "mariadb",
  Mongo: "mongo",
  Redis: "redis",
  Compose: "compose",
} as const;
export type MongoDeployServiceType = ClosedEnum<typeof MongoDeployServiceType>;

export const MongoDeployType = {
  Bind: "bind",
  Volume: "volume",
  File: "file",
} as const;
export type MongoDeployType = ClosedEnum<typeof MongoDeployType>;

export type MongoDeployMount = {
  applicationId: string | null;
  composeId: string | null;
  content: string | null;
  filePath: string | null;
  hostPath: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mountId: string;
  mountPath: string;
  mysqlId: string | null;
  postgresId: string | null;
  redisId: string | null;
  serviceType: MongoDeployServiceType;
  type: MongoDeployType;
  volumeName: string | null;
};

export type MongoDeployDriverOpts = {};

export type MongoDeployNetworkSwarm = {
  aliases?: Array<string> | undefined;
  driverOpts?: MongoDeployDriverOpts | undefined;
  target?: string | undefined;
};

export type MongoDeployPlatform = {
  architecture: string;
  os: string;
};

export type MongoDeploySpread = {
  spreadDescriptor: string;
};

export type MongoDeployPreference = {
  spread: MongoDeploySpread;
};

export type MongoDeployPlacementSwarm = {
  constraints?: Array<string> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<MongoDeployPlatform> | undefined;
  preferences?: Array<MongoDeployPreference> | undefined;
};

export type MongoDeployRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type MongoDeployRollbackConfigSwarm = {
  delay?: number | undefined;
  failureAction?: string | undefined;
  maxFailureRatio?: number | undefined;
  monitor?: number | undefined;
  order: string;
  parallelism: number;
};

export const MongoDeployMetricsConfigEnum = {
  Null: "null",
} as const;
export type MongoDeployMetricsConfigEnum = ClosedEnum<
  typeof MongoDeployMetricsConfigEnum
>;

export type MongoDeployMetricsConfigUnion1 =
  | string
  | number
  | boolean
  | MongoDeployMetricsConfigEnum;

export type MongoDeployMetricsConfigUnion2 =
  | string
  | number
  | boolean
  | MongoDeployMetricsConfigEnum
  | Array<any>
  | { [k: string]: any };

export const MongoDeployServerStatus = {
  Active: "active",
  Inactive: "inactive",
} as const;
export type MongoDeployServerStatus = ClosedEnum<
  typeof MongoDeployServerStatus
>;

export type MongoDeployServer = {
  appName: string;
  command: string;
  createdAt: string;
  description: string | null;
  enableDockerCleanup: boolean;
  ipAddress: string;
  metricsConfig:
    | string
    | number
    | boolean
    | MongoDeployMetricsConfigEnum
    | Array<any>
    | { [k: string]: any };
  name: string;
  organizationId: string;
  port: number;
  serverId: string;
  serverStatus: MongoDeployServerStatus;
  sshKeyId: string | null;
  username: string;
};

export type MongoDeployUpdateConfigSwarm = {
  delay?: number | undefined;
  failureAction?: string | undefined;
  maxFailureRatio?: number | undefined;
  monitor?: number | undefined;
  order: string;
  parallelism: number;
};

/**
 * Successful response
 */
export type MongoDeployResponseBody = {
  appName: string;
  applicationStatus: MongoDeployApplicationStatus;
  backups: Array<MongoDeployBackup>;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databasePassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environment: MongoDeployEnvironment;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: MongoDeployHealthCheckSwarm | null;
  labelsSwarm: { [k: string]: string } | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: MongoDeployModeSwarm | null;
  mongoId: string;
  mounts: Array<MongoDeployMount>;
  name: string;
  networkSwarm: Array<MongoDeployNetworkSwarm> | null;
  placementSwarm: MongoDeployPlacementSwarm | null;
  replicaSets: boolean | null;
  replicas: number;
  restartPolicySwarm: MongoDeployRestartPolicySwarm | null;
  rollbackConfigSwarm: MongoDeployRollbackConfigSwarm | null;
  server: MongoDeployServer | null;
  serverId: string | null;
  updateConfigSwarm: MongoDeployUpdateConfigSwarm | null;
};

export type MongoDeployResponse = MongoDeployResponseBody | models.ErrorT;

/** @internal */
export const MongoDeployRequest$inboundSchema: z.ZodType<
  MongoDeployRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mongoId: z.string(),
});

/** @internal */
export type MongoDeployRequest$Outbound = {
  mongoId: string;
};

/** @internal */
export const MongoDeployRequest$outboundSchema: z.ZodType<
  MongoDeployRequest$Outbound,
  z.ZodTypeDef,
  MongoDeployRequest
> = z.object({
  mongoId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployRequest$ {
  /** @deprecated use `MongoDeployRequest$inboundSchema` instead. */
  export const inboundSchema = MongoDeployRequest$inboundSchema;
  /** @deprecated use `MongoDeployRequest$outboundSchema` instead. */
  export const outboundSchema = MongoDeployRequest$outboundSchema;
  /** @deprecated use `MongoDeployRequest$Outbound` instead. */
  export type Outbound = MongoDeployRequest$Outbound;
}

export function mongoDeployRequestToJSON(
  mongoDeployRequest: MongoDeployRequest,
): string {
  return JSON.stringify(
    MongoDeployRequest$outboundSchema.parse(mongoDeployRequest),
  );
}

export function mongoDeployRequestFromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployRequest' from JSON`,
  );
}

/** @internal */
export const MongoDeployApplicationStatus$inboundSchema: z.ZodNativeEnum<
  typeof MongoDeployApplicationStatus
> = z.nativeEnum(MongoDeployApplicationStatus);

/** @internal */
export const MongoDeployApplicationStatus$outboundSchema: z.ZodNativeEnum<
  typeof MongoDeployApplicationStatus
> = MongoDeployApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployApplicationStatus$ {
  /** @deprecated use `MongoDeployApplicationStatus$inboundSchema` instead. */
  export const inboundSchema = MongoDeployApplicationStatus$inboundSchema;
  /** @deprecated use `MongoDeployApplicationStatus$outboundSchema` instead. */
  export const outboundSchema = MongoDeployApplicationStatus$outboundSchema;
}

/** @internal */
export const MongoDeployBackupType$inboundSchema: z.ZodNativeEnum<
  typeof MongoDeployBackupType
> = z.nativeEnum(MongoDeployBackupType);

/** @internal */
export const MongoDeployBackupType$outboundSchema: z.ZodNativeEnum<
  typeof MongoDeployBackupType
> = MongoDeployBackupType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployBackupType$ {
  /** @deprecated use `MongoDeployBackupType$inboundSchema` instead. */
  export const inboundSchema = MongoDeployBackupType$inboundSchema;
  /** @deprecated use `MongoDeployBackupType$outboundSchema` instead. */
  export const outboundSchema = MongoDeployBackupType$outboundSchema;
}

/** @internal */
export const MongoDeployDatabaseType$inboundSchema: z.ZodNativeEnum<
  typeof MongoDeployDatabaseType
> = z.nativeEnum(MongoDeployDatabaseType);

/** @internal */
export const MongoDeployDatabaseType$outboundSchema: z.ZodNativeEnum<
  typeof MongoDeployDatabaseType
> = MongoDeployDatabaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployDatabaseType$ {
  /** @deprecated use `MongoDeployDatabaseType$inboundSchema` instead. */
  export const inboundSchema = MongoDeployDatabaseType$inboundSchema;
  /** @deprecated use `MongoDeployDatabaseType$outboundSchema` instead. */
  export const outboundSchema = MongoDeployDatabaseType$outboundSchema;
}

/** @internal */
export const MongoDeployMetadataEnum$inboundSchema: z.ZodNativeEnum<
  typeof MongoDeployMetadataEnum
> = z.nativeEnum(MongoDeployMetadataEnum);

/** @internal */
export const MongoDeployMetadataEnum$outboundSchema: z.ZodNativeEnum<
  typeof MongoDeployMetadataEnum
> = MongoDeployMetadataEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployMetadataEnum$ {
  /** @deprecated use `MongoDeployMetadataEnum$inboundSchema` instead. */
  export const inboundSchema = MongoDeployMetadataEnum$inboundSchema;
  /** @deprecated use `MongoDeployMetadataEnum$outboundSchema` instead. */
  export const outboundSchema = MongoDeployMetadataEnum$outboundSchema;
}

/** @internal */
export const MongoDeployMariadb$inboundSchema: z.ZodType<
  MongoDeployMariadb,
  z.ZodTypeDef,
  unknown
> = z.object({
  databasePassword: z.string(),
  databaseUser: z.string(),
});

/** @internal */
export type MongoDeployMariadb$Outbound = {
  databasePassword: string;
  databaseUser: string;
};

/** @internal */
export const MongoDeployMariadb$outboundSchema: z.ZodType<
  MongoDeployMariadb$Outbound,
  z.ZodTypeDef,
  MongoDeployMariadb
> = z.object({
  databasePassword: z.string(),
  databaseUser: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployMariadb$ {
  /** @deprecated use `MongoDeployMariadb$inboundSchema` instead. */
  export const inboundSchema = MongoDeployMariadb$inboundSchema;
  /** @deprecated use `MongoDeployMariadb$outboundSchema` instead. */
  export const outboundSchema = MongoDeployMariadb$outboundSchema;
  /** @deprecated use `MongoDeployMariadb$Outbound` instead. */
  export type Outbound = MongoDeployMariadb$Outbound;
}

export function mongoDeployMariadbToJSON(
  mongoDeployMariadb: MongoDeployMariadb,
): string {
  return JSON.stringify(
    MongoDeployMariadb$outboundSchema.parse(mongoDeployMariadb),
  );
}

export function mongoDeployMariadbFromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployMariadb, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployMariadb$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployMariadb' from JSON`,
  );
}

/** @internal */
export const MongoDeployMongo$inboundSchema: z.ZodType<
  MongoDeployMongo,
  z.ZodTypeDef,
  unknown
> = z.object({
  databasePassword: z.string(),
  databaseUser: z.string(),
});

/** @internal */
export type MongoDeployMongo$Outbound = {
  databasePassword: string;
  databaseUser: string;
};

/** @internal */
export const MongoDeployMongo$outboundSchema: z.ZodType<
  MongoDeployMongo$Outbound,
  z.ZodTypeDef,
  MongoDeployMongo
> = z.object({
  databasePassword: z.string(),
  databaseUser: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployMongo$ {
  /** @deprecated use `MongoDeployMongo$inboundSchema` instead. */
  export const inboundSchema = MongoDeployMongo$inboundSchema;
  /** @deprecated use `MongoDeployMongo$outboundSchema` instead. */
  export const outboundSchema = MongoDeployMongo$outboundSchema;
  /** @deprecated use `MongoDeployMongo$Outbound` instead. */
  export type Outbound = MongoDeployMongo$Outbound;
}

export function mongoDeployMongoToJSON(
  mongoDeployMongo: MongoDeployMongo,
): string {
  return JSON.stringify(
    MongoDeployMongo$outboundSchema.parse(mongoDeployMongo),
  );
}

export function mongoDeployMongoFromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployMongo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployMongo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployMongo' from JSON`,
  );
}

/** @internal */
export const MongoDeployMysql$inboundSchema: z.ZodType<
  MongoDeployMysql,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseRootPassword: z.string(),
});

/** @internal */
export type MongoDeployMysql$Outbound = {
  databaseRootPassword: string;
};

/** @internal */
export const MongoDeployMysql$outboundSchema: z.ZodType<
  MongoDeployMysql$Outbound,
  z.ZodTypeDef,
  MongoDeployMysql
> = z.object({
  databaseRootPassword: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployMysql$ {
  /** @deprecated use `MongoDeployMysql$inboundSchema` instead. */
  export const inboundSchema = MongoDeployMysql$inboundSchema;
  /** @deprecated use `MongoDeployMysql$outboundSchema` instead. */
  export const outboundSchema = MongoDeployMysql$outboundSchema;
  /** @deprecated use `MongoDeployMysql$Outbound` instead. */
  export type Outbound = MongoDeployMysql$Outbound;
}

export function mongoDeployMysqlToJSON(
  mongoDeployMysql: MongoDeployMysql,
): string {
  return JSON.stringify(
    MongoDeployMysql$outboundSchema.parse(mongoDeployMysql),
  );
}

export function mongoDeployMysqlFromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployMysql, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployMysql$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployMysql' from JSON`,
  );
}

/** @internal */
export const MongoDeployPostgres$inboundSchema: z.ZodType<
  MongoDeployPostgres,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseUser: z.string(),
});

/** @internal */
export type MongoDeployPostgres$Outbound = {
  databaseUser: string;
};

/** @internal */
export const MongoDeployPostgres$outboundSchema: z.ZodType<
  MongoDeployPostgres$Outbound,
  z.ZodTypeDef,
  MongoDeployPostgres
> = z.object({
  databaseUser: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployPostgres$ {
  /** @deprecated use `MongoDeployPostgres$inboundSchema` instead. */
  export const inboundSchema = MongoDeployPostgres$inboundSchema;
  /** @deprecated use `MongoDeployPostgres$outboundSchema` instead. */
  export const outboundSchema = MongoDeployPostgres$outboundSchema;
  /** @deprecated use `MongoDeployPostgres$Outbound` instead. */
  export type Outbound = MongoDeployPostgres$Outbound;
}

export function mongoDeployPostgresToJSON(
  mongoDeployPostgres: MongoDeployPostgres,
): string {
  return JSON.stringify(
    MongoDeployPostgres$outboundSchema.parse(mongoDeployPostgres),
  );
}

export function mongoDeployPostgresFromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployPostgres, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployPostgres$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployPostgres' from JSON`,
  );
}

/** @internal */
export const MongoDeployMetadata$inboundSchema: z.ZodType<
  MongoDeployMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  mariadb: z.lazy(() => MongoDeployMariadb$inboundSchema).optional(),
  mongo: z.lazy(() => MongoDeployMongo$inboundSchema).optional(),
  mysql: z.lazy(() => MongoDeployMysql$inboundSchema).optional(),
  postgres: z.lazy(() => MongoDeployPostgres$inboundSchema).optional(),
});

/** @internal */
export type MongoDeployMetadata$Outbound = {
  mariadb?: MongoDeployMariadb$Outbound | undefined;
  mongo?: MongoDeployMongo$Outbound | undefined;
  mysql?: MongoDeployMysql$Outbound | undefined;
  postgres?: MongoDeployPostgres$Outbound | undefined;
};

/** @internal */
export const MongoDeployMetadata$outboundSchema: z.ZodType<
  MongoDeployMetadata$Outbound,
  z.ZodTypeDef,
  MongoDeployMetadata
> = z.object({
  mariadb: z.lazy(() => MongoDeployMariadb$outboundSchema).optional(),
  mongo: z.lazy(() => MongoDeployMongo$outboundSchema).optional(),
  mysql: z.lazy(() => MongoDeployMysql$outboundSchema).optional(),
  postgres: z.lazy(() => MongoDeployPostgres$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployMetadata$ {
  /** @deprecated use `MongoDeployMetadata$inboundSchema` instead. */
  export const inboundSchema = MongoDeployMetadata$inboundSchema;
  /** @deprecated use `MongoDeployMetadata$outboundSchema` instead. */
  export const outboundSchema = MongoDeployMetadata$outboundSchema;
  /** @deprecated use `MongoDeployMetadata$Outbound` instead. */
  export type Outbound = MongoDeployMetadata$Outbound;
}

export function mongoDeployMetadataToJSON(
  mongoDeployMetadata: MongoDeployMetadata,
): string {
  return JSON.stringify(
    MongoDeployMetadata$outboundSchema.parse(mongoDeployMetadata),
  );
}

export function mongoDeployMetadataFromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployMetadata' from JSON`,
  );
}

/** @internal */
export const MongoDeployMetadataUnion$inboundSchema: z.ZodType<
  MongoDeployMetadataUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => MongoDeployMetadata$inboundSchema),
  MongoDeployMetadataEnum$inboundSchema,
]);

/** @internal */
export type MongoDeployMetadataUnion$Outbound =
  | MongoDeployMetadata$Outbound
  | string;

/** @internal */
export const MongoDeployMetadataUnion$outboundSchema: z.ZodType<
  MongoDeployMetadataUnion$Outbound,
  z.ZodTypeDef,
  MongoDeployMetadataUnion
> = z.union([
  z.lazy(() => MongoDeployMetadata$outboundSchema),
  MongoDeployMetadataEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployMetadataUnion$ {
  /** @deprecated use `MongoDeployMetadataUnion$inboundSchema` instead. */
  export const inboundSchema = MongoDeployMetadataUnion$inboundSchema;
  /** @deprecated use `MongoDeployMetadataUnion$outboundSchema` instead. */
  export const outboundSchema = MongoDeployMetadataUnion$outboundSchema;
  /** @deprecated use `MongoDeployMetadataUnion$Outbound` instead. */
  export type Outbound = MongoDeployMetadataUnion$Outbound;
}

export function mongoDeployMetadataUnionToJSON(
  mongoDeployMetadataUnion: MongoDeployMetadataUnion,
): string {
  return JSON.stringify(
    MongoDeployMetadataUnion$outboundSchema.parse(mongoDeployMetadataUnion),
  );
}

export function mongoDeployMetadataUnionFromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployMetadataUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployMetadataUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployMetadataUnion' from JSON`,
  );
}

/** @internal */
export const MongoDeployBackup$inboundSchema: z.ZodType<
  MongoDeployBackup,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  backupId: z.string(),
  backupType: MongoDeployBackupType$inboundSchema,
  composeId: z.nullable(z.string()),
  database: z.string(),
  databaseType: MongoDeployDatabaseType$inboundSchema,
  destinationId: z.string(),
  enabled: z.nullable(z.boolean()),
  keepLatestCount: z.nullable(z.number()),
  mariadbId: z.nullable(z.string()),
  metadata: z.nullable(
    z.union([
      z.lazy(() => MongoDeployMetadata$inboundSchema),
      MongoDeployMetadataEnum$inboundSchema,
    ]),
  ).optional(),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  prefix: z.string(),
  schedule: z.string(),
  serviceName: z.nullable(z.string()),
  userId: z.nullable(z.string()),
});

/** @internal */
export type MongoDeployBackup$Outbound = {
  appName: string;
  backupId: string;
  backupType: string;
  composeId: string | null;
  database: string;
  databaseType: string;
  destinationId: string;
  enabled: boolean | null;
  keepLatestCount: number | null;
  mariadbId: string | null;
  metadata?: MongoDeployMetadata$Outbound | string | null | undefined;
  mongoId: string | null;
  mysqlId: string | null;
  postgresId: string | null;
  prefix: string;
  schedule: string;
  serviceName: string | null;
  userId: string | null;
};

/** @internal */
export const MongoDeployBackup$outboundSchema: z.ZodType<
  MongoDeployBackup$Outbound,
  z.ZodTypeDef,
  MongoDeployBackup
> = z.object({
  appName: z.string(),
  backupId: z.string(),
  backupType: MongoDeployBackupType$outboundSchema,
  composeId: z.nullable(z.string()),
  database: z.string(),
  databaseType: MongoDeployDatabaseType$outboundSchema,
  destinationId: z.string(),
  enabled: z.nullable(z.boolean()),
  keepLatestCount: z.nullable(z.number()),
  mariadbId: z.nullable(z.string()),
  metadata: z.nullable(
    z.union([
      z.lazy(() => MongoDeployMetadata$outboundSchema),
      MongoDeployMetadataEnum$outboundSchema,
    ]),
  ).optional(),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  prefix: z.string(),
  schedule: z.string(),
  serviceName: z.nullable(z.string()),
  userId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployBackup$ {
  /** @deprecated use `MongoDeployBackup$inboundSchema` instead. */
  export const inboundSchema = MongoDeployBackup$inboundSchema;
  /** @deprecated use `MongoDeployBackup$outboundSchema` instead. */
  export const outboundSchema = MongoDeployBackup$outboundSchema;
  /** @deprecated use `MongoDeployBackup$Outbound` instead. */
  export type Outbound = MongoDeployBackup$Outbound;
}

export function mongoDeployBackupToJSON(
  mongoDeployBackup: MongoDeployBackup,
): string {
  return JSON.stringify(
    MongoDeployBackup$outboundSchema.parse(mongoDeployBackup),
  );
}

export function mongoDeployBackupFromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployBackup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployBackup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployBackup' from JSON`,
  );
}

/** @internal */
export const MongoDeployProject$inboundSchema: z.ZodType<
  MongoDeployProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/** @internal */
export type MongoDeployProject$Outbound = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

/** @internal */
export const MongoDeployProject$outboundSchema: z.ZodType<
  MongoDeployProject$Outbound,
  z.ZodTypeDef,
  MongoDeployProject
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployProject$ {
  /** @deprecated use `MongoDeployProject$inboundSchema` instead. */
  export const inboundSchema = MongoDeployProject$inboundSchema;
  /** @deprecated use `MongoDeployProject$outboundSchema` instead. */
  export const outboundSchema = MongoDeployProject$outboundSchema;
  /** @deprecated use `MongoDeployProject$Outbound` instead. */
  export type Outbound = MongoDeployProject$Outbound;
}

export function mongoDeployProjectToJSON(
  mongoDeployProject: MongoDeployProject,
): string {
  return JSON.stringify(
    MongoDeployProject$outboundSchema.parse(mongoDeployProject),
  );
}

export function mongoDeployProjectFromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployProject' from JSON`,
  );
}

/** @internal */
export const MongoDeployEnvironment$inboundSchema: z.ZodType<
  MongoDeployEnvironment,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  name: z.string(),
  project: z.lazy(() => MongoDeployProject$inboundSchema),
  projectId: z.string(),
});

/** @internal */
export type MongoDeployEnvironment$Outbound = {
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  name: string;
  project: MongoDeployProject$Outbound;
  projectId: string;
};

/** @internal */
export const MongoDeployEnvironment$outboundSchema: z.ZodType<
  MongoDeployEnvironment$Outbound,
  z.ZodTypeDef,
  MongoDeployEnvironment
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  name: z.string(),
  project: z.lazy(() => MongoDeployProject$outboundSchema),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployEnvironment$ {
  /** @deprecated use `MongoDeployEnvironment$inboundSchema` instead. */
  export const inboundSchema = MongoDeployEnvironment$inboundSchema;
  /** @deprecated use `MongoDeployEnvironment$outboundSchema` instead. */
  export const outboundSchema = MongoDeployEnvironment$outboundSchema;
  /** @deprecated use `MongoDeployEnvironment$Outbound` instead. */
  export type Outbound = MongoDeployEnvironment$Outbound;
}

export function mongoDeployEnvironmentToJSON(
  mongoDeployEnvironment: MongoDeployEnvironment,
): string {
  return JSON.stringify(
    MongoDeployEnvironment$outboundSchema.parse(mongoDeployEnvironment),
  );
}

export function mongoDeployEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployEnvironment' from JSON`,
  );
}

/** @internal */
export const MongoDeployHealthCheckSwarm$inboundSchema: z.ZodType<
  MongoDeployHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Interval: z.number().optional(),
  Retries: z.number().optional(),
  StartPeriod: z.number().optional(),
  Test: z.array(z.string()).optional(),
  Timeout: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Interval": "interval",
    "Retries": "retries",
    "StartPeriod": "startPeriod",
    "Test": "test",
    "Timeout": "timeout",
  });
});

/** @internal */
export type MongoDeployHealthCheckSwarm$Outbound = {
  Interval?: number | undefined;
  Retries?: number | undefined;
  StartPeriod?: number | undefined;
  Test?: Array<string> | undefined;
  Timeout?: number | undefined;
};

/** @internal */
export const MongoDeployHealthCheckSwarm$outboundSchema: z.ZodType<
  MongoDeployHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  MongoDeployHealthCheckSwarm
> = z.object({
  interval: z.number().optional(),
  retries: z.number().optional(),
  startPeriod: z.number().optional(),
  test: z.array(z.string()).optional(),
  timeout: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    interval: "Interval",
    retries: "Retries",
    startPeriod: "StartPeriod",
    test: "Test",
    timeout: "Timeout",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployHealthCheckSwarm$ {
  /** @deprecated use `MongoDeployHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoDeployHealthCheckSwarm$inboundSchema;
  /** @deprecated use `MongoDeployHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoDeployHealthCheckSwarm$outboundSchema;
  /** @deprecated use `MongoDeployHealthCheckSwarm$Outbound` instead. */
  export type Outbound = MongoDeployHealthCheckSwarm$Outbound;
}

export function mongoDeployHealthCheckSwarmToJSON(
  mongoDeployHealthCheckSwarm: MongoDeployHealthCheckSwarm,
): string {
  return JSON.stringify(
    MongoDeployHealthCheckSwarm$outboundSchema.parse(
      mongoDeployHealthCheckSwarm,
    ),
  );
}

export function mongoDeployHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const MongoDeployGlobal$inboundSchema: z.ZodType<
  MongoDeployGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MongoDeployGlobal$Outbound = {};

/** @internal */
export const MongoDeployGlobal$outboundSchema: z.ZodType<
  MongoDeployGlobal$Outbound,
  z.ZodTypeDef,
  MongoDeployGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployGlobal$ {
  /** @deprecated use `MongoDeployGlobal$inboundSchema` instead. */
  export const inboundSchema = MongoDeployGlobal$inboundSchema;
  /** @deprecated use `MongoDeployGlobal$outboundSchema` instead. */
  export const outboundSchema = MongoDeployGlobal$outboundSchema;
  /** @deprecated use `MongoDeployGlobal$Outbound` instead. */
  export type Outbound = MongoDeployGlobal$Outbound;
}

export function mongoDeployGlobalToJSON(
  mongoDeployGlobal: MongoDeployGlobal,
): string {
  return JSON.stringify(
    MongoDeployGlobal$outboundSchema.parse(mongoDeployGlobal),
  );
}

export function mongoDeployGlobalFromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployGlobal' from JSON`,
  );
}

/** @internal */
export const MongoDeployGlobalJob$inboundSchema: z.ZodType<
  MongoDeployGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MongoDeployGlobalJob$Outbound = {};

/** @internal */
export const MongoDeployGlobalJob$outboundSchema: z.ZodType<
  MongoDeployGlobalJob$Outbound,
  z.ZodTypeDef,
  MongoDeployGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployGlobalJob$ {
  /** @deprecated use `MongoDeployGlobalJob$inboundSchema` instead. */
  export const inboundSchema = MongoDeployGlobalJob$inboundSchema;
  /** @deprecated use `MongoDeployGlobalJob$outboundSchema` instead. */
  export const outboundSchema = MongoDeployGlobalJob$outboundSchema;
  /** @deprecated use `MongoDeployGlobalJob$Outbound` instead. */
  export type Outbound = MongoDeployGlobalJob$Outbound;
}

export function mongoDeployGlobalJobToJSON(
  mongoDeployGlobalJob: MongoDeployGlobalJob,
): string {
  return JSON.stringify(
    MongoDeployGlobalJob$outboundSchema.parse(mongoDeployGlobalJob),
  );
}

export function mongoDeployGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployGlobalJob' from JSON`,
  );
}

/** @internal */
export const MongoDeployReplicated$inboundSchema: z.ZodType<
  MongoDeployReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type MongoDeployReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const MongoDeployReplicated$outboundSchema: z.ZodType<
  MongoDeployReplicated$Outbound,
  z.ZodTypeDef,
  MongoDeployReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployReplicated$ {
  /** @deprecated use `MongoDeployReplicated$inboundSchema` instead. */
  export const inboundSchema = MongoDeployReplicated$inboundSchema;
  /** @deprecated use `MongoDeployReplicated$outboundSchema` instead. */
  export const outboundSchema = MongoDeployReplicated$outboundSchema;
  /** @deprecated use `MongoDeployReplicated$Outbound` instead. */
  export type Outbound = MongoDeployReplicated$Outbound;
}

export function mongoDeployReplicatedToJSON(
  mongoDeployReplicated: MongoDeployReplicated,
): string {
  return JSON.stringify(
    MongoDeployReplicated$outboundSchema.parse(mongoDeployReplicated),
  );
}

export function mongoDeployReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployReplicated' from JSON`,
  );
}

/** @internal */
export const MongoDeployReplicatedJob$inboundSchema: z.ZodType<
  MongoDeployReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type MongoDeployReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const MongoDeployReplicatedJob$outboundSchema: z.ZodType<
  MongoDeployReplicatedJob$Outbound,
  z.ZodTypeDef,
  MongoDeployReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployReplicatedJob$ {
  /** @deprecated use `MongoDeployReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = MongoDeployReplicatedJob$inboundSchema;
  /** @deprecated use `MongoDeployReplicatedJob$outboundSchema` instead. */
  export const outboundSchema = MongoDeployReplicatedJob$outboundSchema;
  /** @deprecated use `MongoDeployReplicatedJob$Outbound` instead. */
  export type Outbound = MongoDeployReplicatedJob$Outbound;
}

export function mongoDeployReplicatedJobToJSON(
  mongoDeployReplicatedJob: MongoDeployReplicatedJob,
): string {
  return JSON.stringify(
    MongoDeployReplicatedJob$outboundSchema.parse(mongoDeployReplicatedJob),
  );
}

export function mongoDeployReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployReplicatedJob' from JSON`,
  );
}

/** @internal */
export const MongoDeployModeSwarm$inboundSchema: z.ZodType<
  MongoDeployModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Global: z.lazy(() => MongoDeployGlobal$inboundSchema).optional(),
  GlobalJob: z.lazy(() => MongoDeployGlobalJob$inboundSchema).optional(),
  Replicated: z.lazy(() => MongoDeployReplicated$inboundSchema).optional(),
  ReplicatedJob: z.lazy(() => MongoDeployReplicatedJob$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Global": "global",
    "GlobalJob": "globalJob",
    "Replicated": "replicated",
    "ReplicatedJob": "replicatedJob",
  });
});

/** @internal */
export type MongoDeployModeSwarm$Outbound = {
  Global?: MongoDeployGlobal$Outbound | undefined;
  GlobalJob?: MongoDeployGlobalJob$Outbound | undefined;
  Replicated?: MongoDeployReplicated$Outbound | undefined;
  ReplicatedJob?: MongoDeployReplicatedJob$Outbound | undefined;
};

/** @internal */
export const MongoDeployModeSwarm$outboundSchema: z.ZodType<
  MongoDeployModeSwarm$Outbound,
  z.ZodTypeDef,
  MongoDeployModeSwarm
> = z.object({
  global: z.lazy(() => MongoDeployGlobal$outboundSchema).optional(),
  globalJob: z.lazy(() => MongoDeployGlobalJob$outboundSchema).optional(),
  replicated: z.lazy(() => MongoDeployReplicated$outboundSchema).optional(),
  replicatedJob: z.lazy(() => MongoDeployReplicatedJob$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    global: "Global",
    globalJob: "GlobalJob",
    replicated: "Replicated",
    replicatedJob: "ReplicatedJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployModeSwarm$ {
  /** @deprecated use `MongoDeployModeSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoDeployModeSwarm$inboundSchema;
  /** @deprecated use `MongoDeployModeSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoDeployModeSwarm$outboundSchema;
  /** @deprecated use `MongoDeployModeSwarm$Outbound` instead. */
  export type Outbound = MongoDeployModeSwarm$Outbound;
}

export function mongoDeployModeSwarmToJSON(
  mongoDeployModeSwarm: MongoDeployModeSwarm,
): string {
  return JSON.stringify(
    MongoDeployModeSwarm$outboundSchema.parse(mongoDeployModeSwarm),
  );
}

export function mongoDeployModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployModeSwarm' from JSON`,
  );
}

/** @internal */
export const MongoDeployServiceType$inboundSchema: z.ZodNativeEnum<
  typeof MongoDeployServiceType
> = z.nativeEnum(MongoDeployServiceType);

/** @internal */
export const MongoDeployServiceType$outboundSchema: z.ZodNativeEnum<
  typeof MongoDeployServiceType
> = MongoDeployServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployServiceType$ {
  /** @deprecated use `MongoDeployServiceType$inboundSchema` instead. */
  export const inboundSchema = MongoDeployServiceType$inboundSchema;
  /** @deprecated use `MongoDeployServiceType$outboundSchema` instead. */
  export const outboundSchema = MongoDeployServiceType$outboundSchema;
}

/** @internal */
export const MongoDeployType$inboundSchema: z.ZodNativeEnum<
  typeof MongoDeployType
> = z.nativeEnum(MongoDeployType);

/** @internal */
export const MongoDeployType$outboundSchema: z.ZodNativeEnum<
  typeof MongoDeployType
> = MongoDeployType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployType$ {
  /** @deprecated use `MongoDeployType$inboundSchema` instead. */
  export const inboundSchema = MongoDeployType$inboundSchema;
  /** @deprecated use `MongoDeployType$outboundSchema` instead. */
  export const outboundSchema = MongoDeployType$outboundSchema;
}

/** @internal */
export const MongoDeployMount$inboundSchema: z.ZodType<
  MongoDeployMount,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  content: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  hostPath: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mountId: z.string(),
  mountPath: z.string(),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  serviceType: MongoDeployServiceType$inboundSchema,
  type: MongoDeployType$inboundSchema,
  volumeName: z.nullable(z.string()),
});

/** @internal */
export type MongoDeployMount$Outbound = {
  applicationId: string | null;
  composeId: string | null;
  content: string | null;
  filePath: string | null;
  hostPath: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mountId: string;
  mountPath: string;
  mysqlId: string | null;
  postgresId: string | null;
  redisId: string | null;
  serviceType: string;
  type: string;
  volumeName: string | null;
};

/** @internal */
export const MongoDeployMount$outboundSchema: z.ZodType<
  MongoDeployMount$Outbound,
  z.ZodTypeDef,
  MongoDeployMount
> = z.object({
  applicationId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  content: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  hostPath: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mountId: z.string(),
  mountPath: z.string(),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  serviceType: MongoDeployServiceType$outboundSchema,
  type: MongoDeployType$outboundSchema,
  volumeName: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployMount$ {
  /** @deprecated use `MongoDeployMount$inboundSchema` instead. */
  export const inboundSchema = MongoDeployMount$inboundSchema;
  /** @deprecated use `MongoDeployMount$outboundSchema` instead. */
  export const outboundSchema = MongoDeployMount$outboundSchema;
  /** @deprecated use `MongoDeployMount$Outbound` instead. */
  export type Outbound = MongoDeployMount$Outbound;
}

export function mongoDeployMountToJSON(
  mongoDeployMount: MongoDeployMount,
): string {
  return JSON.stringify(
    MongoDeployMount$outboundSchema.parse(mongoDeployMount),
  );
}

export function mongoDeployMountFromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployMount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployMount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployMount' from JSON`,
  );
}

/** @internal */
export const MongoDeployDriverOpts$inboundSchema: z.ZodType<
  MongoDeployDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MongoDeployDriverOpts$Outbound = {};

/** @internal */
export const MongoDeployDriverOpts$outboundSchema: z.ZodType<
  MongoDeployDriverOpts$Outbound,
  z.ZodTypeDef,
  MongoDeployDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployDriverOpts$ {
  /** @deprecated use `MongoDeployDriverOpts$inboundSchema` instead. */
  export const inboundSchema = MongoDeployDriverOpts$inboundSchema;
  /** @deprecated use `MongoDeployDriverOpts$outboundSchema` instead. */
  export const outboundSchema = MongoDeployDriverOpts$outboundSchema;
  /** @deprecated use `MongoDeployDriverOpts$Outbound` instead. */
  export type Outbound = MongoDeployDriverOpts$Outbound;
}

export function mongoDeployDriverOptsToJSON(
  mongoDeployDriverOpts: MongoDeployDriverOpts,
): string {
  return JSON.stringify(
    MongoDeployDriverOpts$outboundSchema.parse(mongoDeployDriverOpts),
  );
}

export function mongoDeployDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployDriverOpts' from JSON`,
  );
}

/** @internal */
export const MongoDeployNetworkSwarm$inboundSchema: z.ZodType<
  MongoDeployNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => MongoDeployDriverOpts$inboundSchema).optional(),
  Target: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
    "Target": "target",
  });
});

/** @internal */
export type MongoDeployNetworkSwarm$Outbound = {
  Aliases?: Array<string> | undefined;
  DriverOpts?: MongoDeployDriverOpts$Outbound | undefined;
  Target?: string | undefined;
};

/** @internal */
export const MongoDeployNetworkSwarm$outboundSchema: z.ZodType<
  MongoDeployNetworkSwarm$Outbound,
  z.ZodTypeDef,
  MongoDeployNetworkSwarm
> = z.object({
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => MongoDeployDriverOpts$outboundSchema).optional(),
  target: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    aliases: "Aliases",
    driverOpts: "DriverOpts",
    target: "Target",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployNetworkSwarm$ {
  /** @deprecated use `MongoDeployNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoDeployNetworkSwarm$inboundSchema;
  /** @deprecated use `MongoDeployNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoDeployNetworkSwarm$outboundSchema;
  /** @deprecated use `MongoDeployNetworkSwarm$Outbound` instead. */
  export type Outbound = MongoDeployNetworkSwarm$Outbound;
}

export function mongoDeployNetworkSwarmToJSON(
  mongoDeployNetworkSwarm: MongoDeployNetworkSwarm,
): string {
  return JSON.stringify(
    MongoDeployNetworkSwarm$outboundSchema.parse(mongoDeployNetworkSwarm),
  );
}

export function mongoDeployNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const MongoDeployPlatform$inboundSchema: z.ZodType<
  MongoDeployPlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type MongoDeployPlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const MongoDeployPlatform$outboundSchema: z.ZodType<
  MongoDeployPlatform$Outbound,
  z.ZodTypeDef,
  MongoDeployPlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployPlatform$ {
  /** @deprecated use `MongoDeployPlatform$inboundSchema` instead. */
  export const inboundSchema = MongoDeployPlatform$inboundSchema;
  /** @deprecated use `MongoDeployPlatform$outboundSchema` instead. */
  export const outboundSchema = MongoDeployPlatform$outboundSchema;
  /** @deprecated use `MongoDeployPlatform$Outbound` instead. */
  export type Outbound = MongoDeployPlatform$Outbound;
}

export function mongoDeployPlatformToJSON(
  mongoDeployPlatform: MongoDeployPlatform,
): string {
  return JSON.stringify(
    MongoDeployPlatform$outboundSchema.parse(mongoDeployPlatform),
  );
}

export function mongoDeployPlatformFromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployPlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployPlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployPlatform' from JSON`,
  );
}

/** @internal */
export const MongoDeploySpread$inboundSchema: z.ZodType<
  MongoDeploySpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type MongoDeploySpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const MongoDeploySpread$outboundSchema: z.ZodType<
  MongoDeploySpread$Outbound,
  z.ZodTypeDef,
  MongoDeploySpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeploySpread$ {
  /** @deprecated use `MongoDeploySpread$inboundSchema` instead. */
  export const inboundSchema = MongoDeploySpread$inboundSchema;
  /** @deprecated use `MongoDeploySpread$outboundSchema` instead. */
  export const outboundSchema = MongoDeploySpread$outboundSchema;
  /** @deprecated use `MongoDeploySpread$Outbound` instead. */
  export type Outbound = MongoDeploySpread$Outbound;
}

export function mongoDeploySpreadToJSON(
  mongoDeploySpread: MongoDeploySpread,
): string {
  return JSON.stringify(
    MongoDeploySpread$outboundSchema.parse(mongoDeploySpread),
  );
}

export function mongoDeploySpreadFromJSON(
  jsonString: string,
): SafeParseResult<MongoDeploySpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeploySpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeploySpread' from JSON`,
  );
}

/** @internal */
export const MongoDeployPreference$inboundSchema: z.ZodType<
  MongoDeployPreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => MongoDeploySpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type MongoDeployPreference$Outbound = {
  Spread: MongoDeploySpread$Outbound;
};

/** @internal */
export const MongoDeployPreference$outboundSchema: z.ZodType<
  MongoDeployPreference$Outbound,
  z.ZodTypeDef,
  MongoDeployPreference
> = z.object({
  spread: z.lazy(() => MongoDeploySpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployPreference$ {
  /** @deprecated use `MongoDeployPreference$inboundSchema` instead. */
  export const inboundSchema = MongoDeployPreference$inboundSchema;
  /** @deprecated use `MongoDeployPreference$outboundSchema` instead. */
  export const outboundSchema = MongoDeployPreference$outboundSchema;
  /** @deprecated use `MongoDeployPreference$Outbound` instead. */
  export type Outbound = MongoDeployPreference$Outbound;
}

export function mongoDeployPreferenceToJSON(
  mongoDeployPreference: MongoDeployPreference,
): string {
  return JSON.stringify(
    MongoDeployPreference$outboundSchema.parse(mongoDeployPreference),
  );
}

export function mongoDeployPreferenceFromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployPreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployPreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployPreference' from JSON`,
  );
}

/** @internal */
export const MongoDeployPlacementSwarm$inboundSchema: z.ZodType<
  MongoDeployPlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => MongoDeployPlatform$inboundSchema))
    .optional(),
  Preferences: z.array(z.lazy(() => MongoDeployPreference$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
    "Preferences": "preferences",
  });
});

/** @internal */
export type MongoDeployPlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<MongoDeployPlatform$Outbound> | undefined;
  Preferences?: Array<MongoDeployPreference$Outbound> | undefined;
};

/** @internal */
export const MongoDeployPlacementSwarm$outboundSchema: z.ZodType<
  MongoDeployPlacementSwarm$Outbound,
  z.ZodTypeDef,
  MongoDeployPlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => MongoDeployPlatform$outboundSchema))
    .optional(),
  preferences: z.array(z.lazy(() => MongoDeployPreference$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
    preferences: "Preferences",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployPlacementSwarm$ {
  /** @deprecated use `MongoDeployPlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoDeployPlacementSwarm$inboundSchema;
  /** @deprecated use `MongoDeployPlacementSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoDeployPlacementSwarm$outboundSchema;
  /** @deprecated use `MongoDeployPlacementSwarm$Outbound` instead. */
  export type Outbound = MongoDeployPlacementSwarm$Outbound;
}

export function mongoDeployPlacementSwarmToJSON(
  mongoDeployPlacementSwarm: MongoDeployPlacementSwarm,
): string {
  return JSON.stringify(
    MongoDeployPlacementSwarm$outboundSchema.parse(mongoDeployPlacementSwarm),
  );
}

export function mongoDeployPlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployPlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployPlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployPlacementSwarm' from JSON`,
  );
}

/** @internal */
export const MongoDeployRestartPolicySwarm$inboundSchema: z.ZodType<
  MongoDeployRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type MongoDeployRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const MongoDeployRestartPolicySwarm$outboundSchema: z.ZodType<
  MongoDeployRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  MongoDeployRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployRestartPolicySwarm$ {
  /** @deprecated use `MongoDeployRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema = MongoDeployRestartPolicySwarm$inboundSchema;
  /** @deprecated use `MongoDeployRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema = MongoDeployRestartPolicySwarm$outboundSchema;
  /** @deprecated use `MongoDeployRestartPolicySwarm$Outbound` instead. */
  export type Outbound = MongoDeployRestartPolicySwarm$Outbound;
}

export function mongoDeployRestartPolicySwarmToJSON(
  mongoDeployRestartPolicySwarm: MongoDeployRestartPolicySwarm,
): string {
  return JSON.stringify(
    MongoDeployRestartPolicySwarm$outboundSchema.parse(
      mongoDeployRestartPolicySwarm,
    ),
  );
}

export function mongoDeployRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const MongoDeployRollbackConfigSwarm$inboundSchema: z.ZodType<
  MongoDeployRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  MaxFailureRatio: z.number().optional(),
  Monitor: z.number().optional(),
  Order: z.string(),
  Parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    "Delay": "delay",
    "FailureAction": "failureAction",
    "MaxFailureRatio": "maxFailureRatio",
    "Monitor": "monitor",
    "Order": "order",
    "Parallelism": "parallelism",
  });
});

/** @internal */
export type MongoDeployRollbackConfigSwarm$Outbound = {
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  MaxFailureRatio?: number | undefined;
  Monitor?: number | undefined;
  Order: string;
  Parallelism: number;
};

/** @internal */
export const MongoDeployRollbackConfigSwarm$outboundSchema: z.ZodType<
  MongoDeployRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  MongoDeployRollbackConfigSwarm
> = z.object({
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  maxFailureRatio: z.number().optional(),
  monitor: z.number().optional(),
  order: z.string(),
  parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    delay: "Delay",
    failureAction: "FailureAction",
    maxFailureRatio: "MaxFailureRatio",
    monitor: "Monitor",
    order: "Order",
    parallelism: "Parallelism",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployRollbackConfigSwarm$ {
  /** @deprecated use `MongoDeployRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoDeployRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `MongoDeployRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoDeployRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `MongoDeployRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = MongoDeployRollbackConfigSwarm$Outbound;
}

export function mongoDeployRollbackConfigSwarmToJSON(
  mongoDeployRollbackConfigSwarm: MongoDeployRollbackConfigSwarm,
): string {
  return JSON.stringify(
    MongoDeployRollbackConfigSwarm$outboundSchema.parse(
      mongoDeployRollbackConfigSwarm,
    ),
  );
}

export function mongoDeployRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployRollbackConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployRollbackConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MongoDeployMetricsConfigEnum$inboundSchema: z.ZodNativeEnum<
  typeof MongoDeployMetricsConfigEnum
> = z.nativeEnum(MongoDeployMetricsConfigEnum);

/** @internal */
export const MongoDeployMetricsConfigEnum$outboundSchema: z.ZodNativeEnum<
  typeof MongoDeployMetricsConfigEnum
> = MongoDeployMetricsConfigEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployMetricsConfigEnum$ {
  /** @deprecated use `MongoDeployMetricsConfigEnum$inboundSchema` instead. */
  export const inboundSchema = MongoDeployMetricsConfigEnum$inboundSchema;
  /** @deprecated use `MongoDeployMetricsConfigEnum$outboundSchema` instead. */
  export const outboundSchema = MongoDeployMetricsConfigEnum$outboundSchema;
}

/** @internal */
export const MongoDeployMetricsConfigUnion1$inboundSchema: z.ZodType<
  MongoDeployMetricsConfigUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  MongoDeployMetricsConfigEnum$inboundSchema,
]);

/** @internal */
export type MongoDeployMetricsConfigUnion1$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const MongoDeployMetricsConfigUnion1$outboundSchema: z.ZodType<
  MongoDeployMetricsConfigUnion1$Outbound,
  z.ZodTypeDef,
  MongoDeployMetricsConfigUnion1
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  MongoDeployMetricsConfigEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployMetricsConfigUnion1$ {
  /** @deprecated use `MongoDeployMetricsConfigUnion1$inboundSchema` instead. */
  export const inboundSchema = MongoDeployMetricsConfigUnion1$inboundSchema;
  /** @deprecated use `MongoDeployMetricsConfigUnion1$outboundSchema` instead. */
  export const outboundSchema = MongoDeployMetricsConfigUnion1$outboundSchema;
  /** @deprecated use `MongoDeployMetricsConfigUnion1$Outbound` instead. */
  export type Outbound = MongoDeployMetricsConfigUnion1$Outbound;
}

export function mongoDeployMetricsConfigUnion1ToJSON(
  mongoDeployMetricsConfigUnion1: MongoDeployMetricsConfigUnion1,
): string {
  return JSON.stringify(
    MongoDeployMetricsConfigUnion1$outboundSchema.parse(
      mongoDeployMetricsConfigUnion1,
    ),
  );
}

export function mongoDeployMetricsConfigUnion1FromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployMetricsConfigUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployMetricsConfigUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployMetricsConfigUnion1' from JSON`,
  );
}

/** @internal */
export const MongoDeployMetricsConfigUnion2$inboundSchema: z.ZodType<
  MongoDeployMetricsConfigUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    MongoDeployMetricsConfigEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type MongoDeployMetricsConfigUnion2$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const MongoDeployMetricsConfigUnion2$outboundSchema: z.ZodType<
  MongoDeployMetricsConfigUnion2$Outbound,
  z.ZodTypeDef,
  MongoDeployMetricsConfigUnion2
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    MongoDeployMetricsConfigEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployMetricsConfigUnion2$ {
  /** @deprecated use `MongoDeployMetricsConfigUnion2$inboundSchema` instead. */
  export const inboundSchema = MongoDeployMetricsConfigUnion2$inboundSchema;
  /** @deprecated use `MongoDeployMetricsConfigUnion2$outboundSchema` instead. */
  export const outboundSchema = MongoDeployMetricsConfigUnion2$outboundSchema;
  /** @deprecated use `MongoDeployMetricsConfigUnion2$Outbound` instead. */
  export type Outbound = MongoDeployMetricsConfigUnion2$Outbound;
}

export function mongoDeployMetricsConfigUnion2ToJSON(
  mongoDeployMetricsConfigUnion2: MongoDeployMetricsConfigUnion2,
): string {
  return JSON.stringify(
    MongoDeployMetricsConfigUnion2$outboundSchema.parse(
      mongoDeployMetricsConfigUnion2,
    ),
  );
}

export function mongoDeployMetricsConfigUnion2FromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployMetricsConfigUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployMetricsConfigUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployMetricsConfigUnion2' from JSON`,
  );
}

/** @internal */
export const MongoDeployServerStatus$inboundSchema: z.ZodNativeEnum<
  typeof MongoDeployServerStatus
> = z.nativeEnum(MongoDeployServerStatus);

/** @internal */
export const MongoDeployServerStatus$outboundSchema: z.ZodNativeEnum<
  typeof MongoDeployServerStatus
> = MongoDeployServerStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployServerStatus$ {
  /** @deprecated use `MongoDeployServerStatus$inboundSchema` instead. */
  export const inboundSchema = MongoDeployServerStatus$inboundSchema;
  /** @deprecated use `MongoDeployServerStatus$outboundSchema` instead. */
  export const outboundSchema = MongoDeployServerStatus$outboundSchema;
}

/** @internal */
export const MongoDeployServer$inboundSchema: z.ZodType<
  MongoDeployServer,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  command: z.string(),
  createdAt: z.string(),
  description: z.nullable(z.string()),
  enableDockerCleanup: z.boolean(),
  ipAddress: z.string(),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      MongoDeployMetricsConfigEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
  name: z.string(),
  organizationId: z.string(),
  port: z.number(),
  serverId: z.string(),
  serverStatus: MongoDeployServerStatus$inboundSchema,
  sshKeyId: z.nullable(z.string()),
  username: z.string(),
});

/** @internal */
export type MongoDeployServer$Outbound = {
  appName: string;
  command: string;
  createdAt: string;
  description: string | null;
  enableDockerCleanup: boolean;
  ipAddress: string;
  metricsConfig: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  };
  name: string;
  organizationId: string;
  port: number;
  serverId: string;
  serverStatus: string;
  sshKeyId: string | null;
  username: string;
};

/** @internal */
export const MongoDeployServer$outboundSchema: z.ZodType<
  MongoDeployServer$Outbound,
  z.ZodTypeDef,
  MongoDeployServer
> = z.object({
  appName: z.string(),
  command: z.string(),
  createdAt: z.string(),
  description: z.nullable(z.string()),
  enableDockerCleanup: z.boolean(),
  ipAddress: z.string(),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      MongoDeployMetricsConfigEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
  name: z.string(),
  organizationId: z.string(),
  port: z.number(),
  serverId: z.string(),
  serverStatus: MongoDeployServerStatus$outboundSchema,
  sshKeyId: z.nullable(z.string()),
  username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployServer$ {
  /** @deprecated use `MongoDeployServer$inboundSchema` instead. */
  export const inboundSchema = MongoDeployServer$inboundSchema;
  /** @deprecated use `MongoDeployServer$outboundSchema` instead. */
  export const outboundSchema = MongoDeployServer$outboundSchema;
  /** @deprecated use `MongoDeployServer$Outbound` instead. */
  export type Outbound = MongoDeployServer$Outbound;
}

export function mongoDeployServerToJSON(
  mongoDeployServer: MongoDeployServer,
): string {
  return JSON.stringify(
    MongoDeployServer$outboundSchema.parse(mongoDeployServer),
  );
}

export function mongoDeployServerFromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployServer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployServer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployServer' from JSON`,
  );
}

/** @internal */
export const MongoDeployUpdateConfigSwarm$inboundSchema: z.ZodType<
  MongoDeployUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  MaxFailureRatio: z.number().optional(),
  Monitor: z.number().optional(),
  Order: z.string(),
  Parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    "Delay": "delay",
    "FailureAction": "failureAction",
    "MaxFailureRatio": "maxFailureRatio",
    "Monitor": "monitor",
    "Order": "order",
    "Parallelism": "parallelism",
  });
});

/** @internal */
export type MongoDeployUpdateConfigSwarm$Outbound = {
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  MaxFailureRatio?: number | undefined;
  Monitor?: number | undefined;
  Order: string;
  Parallelism: number;
};

/** @internal */
export const MongoDeployUpdateConfigSwarm$outboundSchema: z.ZodType<
  MongoDeployUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  MongoDeployUpdateConfigSwarm
> = z.object({
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  maxFailureRatio: z.number().optional(),
  monitor: z.number().optional(),
  order: z.string(),
  parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    delay: "Delay",
    failureAction: "FailureAction",
    maxFailureRatio: "MaxFailureRatio",
    monitor: "Monitor",
    order: "Order",
    parallelism: "Parallelism",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployUpdateConfigSwarm$ {
  /** @deprecated use `MongoDeployUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoDeployUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `MongoDeployUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoDeployUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `MongoDeployUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = MongoDeployUpdateConfigSwarm$Outbound;
}

export function mongoDeployUpdateConfigSwarmToJSON(
  mongoDeployUpdateConfigSwarm: MongoDeployUpdateConfigSwarm,
): string {
  return JSON.stringify(
    MongoDeployUpdateConfigSwarm$outboundSchema.parse(
      mongoDeployUpdateConfigSwarm,
    ),
  );
}

export function mongoDeployUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MongoDeployResponseBody$inboundSchema: z.ZodType<
  MongoDeployResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  applicationStatus: MongoDeployApplicationStatus$inboundSchema,
  backups: z.array(z.lazy(() => MongoDeployBackup$inboundSchema)),
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databasePassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environment: z.lazy(() => MongoDeployEnvironment$inboundSchema),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.lazy(() => MongoDeployHealthCheckSwarm$inboundSchema),
  ),
  labelsSwarm: z.nullable(z.record(z.string())),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(z.lazy(() => MongoDeployModeSwarm$inboundSchema)),
  mongoId: z.string(),
  mounts: z.array(z.lazy(() => MongoDeployMount$inboundSchema)),
  name: z.string(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MongoDeployNetworkSwarm$inboundSchema)),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => MongoDeployPlacementSwarm$inboundSchema),
  ),
  replicaSets: z.nullable(z.boolean()),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MongoDeployRestartPolicySwarm$inboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MongoDeployRollbackConfigSwarm$inboundSchema),
  ),
  server: z.nullable(z.lazy(() => MongoDeployServer$inboundSchema)),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MongoDeployUpdateConfigSwarm$inboundSchema),
  ),
});

/** @internal */
export type MongoDeployResponseBody$Outbound = {
  appName: string;
  applicationStatus: string;
  backups: Array<MongoDeployBackup$Outbound>;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databasePassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environment: MongoDeployEnvironment$Outbound;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: MongoDeployHealthCheckSwarm$Outbound | null;
  labelsSwarm: { [k: string]: string } | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: MongoDeployModeSwarm$Outbound | null;
  mongoId: string;
  mounts: Array<MongoDeployMount$Outbound>;
  name: string;
  networkSwarm: Array<MongoDeployNetworkSwarm$Outbound> | null;
  placementSwarm: MongoDeployPlacementSwarm$Outbound | null;
  replicaSets: boolean | null;
  replicas: number;
  restartPolicySwarm: MongoDeployRestartPolicySwarm$Outbound | null;
  rollbackConfigSwarm: MongoDeployRollbackConfigSwarm$Outbound | null;
  server: MongoDeployServer$Outbound | null;
  serverId: string | null;
  updateConfigSwarm: MongoDeployUpdateConfigSwarm$Outbound | null;
};

/** @internal */
export const MongoDeployResponseBody$outboundSchema: z.ZodType<
  MongoDeployResponseBody$Outbound,
  z.ZodTypeDef,
  MongoDeployResponseBody
> = z.object({
  appName: z.string(),
  applicationStatus: MongoDeployApplicationStatus$outboundSchema,
  backups: z.array(z.lazy(() => MongoDeployBackup$outboundSchema)),
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databasePassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environment: z.lazy(() => MongoDeployEnvironment$outboundSchema),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.lazy(() => MongoDeployHealthCheckSwarm$outboundSchema),
  ),
  labelsSwarm: z.nullable(z.record(z.string())),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(z.lazy(() => MongoDeployModeSwarm$outboundSchema)),
  mongoId: z.string(),
  mounts: z.array(z.lazy(() => MongoDeployMount$outboundSchema)),
  name: z.string(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MongoDeployNetworkSwarm$outboundSchema)),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => MongoDeployPlacementSwarm$outboundSchema),
  ),
  replicaSets: z.nullable(z.boolean()),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MongoDeployRestartPolicySwarm$outboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MongoDeployRollbackConfigSwarm$outboundSchema),
  ),
  server: z.nullable(z.lazy(() => MongoDeployServer$outboundSchema)),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MongoDeployUpdateConfigSwarm$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployResponseBody$ {
  /** @deprecated use `MongoDeployResponseBody$inboundSchema` instead. */
  export const inboundSchema = MongoDeployResponseBody$inboundSchema;
  /** @deprecated use `MongoDeployResponseBody$outboundSchema` instead. */
  export const outboundSchema = MongoDeployResponseBody$outboundSchema;
  /** @deprecated use `MongoDeployResponseBody$Outbound` instead. */
  export type Outbound = MongoDeployResponseBody$Outbound;
}

export function mongoDeployResponseBodyToJSON(
  mongoDeployResponseBody: MongoDeployResponseBody,
): string {
  return JSON.stringify(
    MongoDeployResponseBody$outboundSchema.parse(mongoDeployResponseBody),
  );
}

export function mongoDeployResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployResponseBody' from JSON`,
  );
}

/** @internal */
export const MongoDeployResponse$inboundSchema: z.ZodType<
  MongoDeployResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => MongoDeployResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type MongoDeployResponse$Outbound =
  | MongoDeployResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const MongoDeployResponse$outboundSchema: z.ZodType<
  MongoDeployResponse$Outbound,
  z.ZodTypeDef,
  MongoDeployResponse
> = z.union([
  z.lazy(() => MongoDeployResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoDeployResponse$ {
  /** @deprecated use `MongoDeployResponse$inboundSchema` instead. */
  export const inboundSchema = MongoDeployResponse$inboundSchema;
  /** @deprecated use `MongoDeployResponse$outboundSchema` instead. */
  export const outboundSchema = MongoDeployResponse$outboundSchema;
  /** @deprecated use `MongoDeployResponse$Outbound` instead. */
  export type Outbound = MongoDeployResponse$Outbound;
}

export function mongoDeployResponseToJSON(
  mongoDeployResponse: MongoDeployResponse,
): string {
  return JSON.stringify(
    MongoDeployResponse$outboundSchema.parse(mongoDeployResponse),
  );
}

export function mongoDeployResponseFromJSON(
  jsonString: string,
): SafeParseResult<MongoDeployResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoDeployResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoDeployResponse' from JSON`,
  );
}
