/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type RedisChangeStatusSecurity = {
  authorization: string;
};

export const RedisChangeStatusApplicationStatusRequest = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type RedisChangeStatusApplicationStatusRequest = ClosedEnum<
  typeof RedisChangeStatusApplicationStatusRequest
>;

export type RedisChangeStatusRequest = {
  applicationStatus: RedisChangeStatusApplicationStatusRequest;
  redisId: string;
};

export const RedisChangeStatusApplicationStatusResponse = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type RedisChangeStatusApplicationStatusResponse = ClosedEnum<
  typeof RedisChangeStatusApplicationStatusResponse
>;

export type RedisChangeStatusProject = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

export type RedisChangeStatusEnvironment = {
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  name: string;
  project: RedisChangeStatusProject;
  projectId: string;
};

export type RedisChangeStatusHealthCheckSwarm = {
  interval?: number | undefined;
  retries?: number | undefined;
  startPeriod?: number | undefined;
  test?: Array<string> | undefined;
  timeout?: number | undefined;
};

export type RedisChangeStatusGlobal = {};

export type RedisChangeStatusGlobalJob = {};

export type RedisChangeStatusReplicated = {
  replicas?: number | undefined;
};

export type RedisChangeStatusReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type RedisChangeStatusModeSwarm = {
  global?: RedisChangeStatusGlobal | undefined;
  globalJob?: RedisChangeStatusGlobalJob | undefined;
  replicated?: RedisChangeStatusReplicated | undefined;
  replicatedJob?: RedisChangeStatusReplicatedJob | undefined;
};

export const RedisChangeStatusServiceType = {
  Application: "application",
  Postgres: "postgres",
  Mysql: "mysql",
  Mariadb: "mariadb",
  Mongo: "mongo",
  Redis: "redis",
  Compose: "compose",
} as const;
export type RedisChangeStatusServiceType = ClosedEnum<
  typeof RedisChangeStatusServiceType
>;

export const RedisChangeStatusType = {
  Bind: "bind",
  Volume: "volume",
  File: "file",
} as const;
export type RedisChangeStatusType = ClosedEnum<typeof RedisChangeStatusType>;

export type RedisChangeStatusMount = {
  applicationId: string | null;
  composeId: string | null;
  content: string | null;
  filePath: string | null;
  hostPath: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mountId: string;
  mountPath: string;
  mysqlId: string | null;
  postgresId: string | null;
  redisId: string | null;
  serviceType: RedisChangeStatusServiceType;
  type: RedisChangeStatusType;
  volumeName: string | null;
};

export type RedisChangeStatusDriverOpts = {};

export type RedisChangeStatusNetworkSwarm = {
  aliases?: Array<string> | undefined;
  driverOpts?: RedisChangeStatusDriverOpts | undefined;
  target?: string | undefined;
};

export type RedisChangeStatusPlatform = {
  architecture: string;
  os: string;
};

export type RedisChangeStatusSpread = {
  spreadDescriptor: string;
};

export type RedisChangeStatusPreference = {
  spread: RedisChangeStatusSpread;
};

export type RedisChangeStatusPlacementSwarm = {
  constraints?: Array<string> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<RedisChangeStatusPlatform> | undefined;
  preferences?: Array<RedisChangeStatusPreference> | undefined;
};

export type RedisChangeStatusRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type RedisChangeStatusRollbackConfigSwarm = {
  delay?: number | undefined;
  failureAction?: string | undefined;
  maxFailureRatio?: number | undefined;
  monitor?: number | undefined;
  order: string;
  parallelism: number;
};

export const RedisChangeStatusMetricsConfigEnum = {
  Null: "null",
} as const;
export type RedisChangeStatusMetricsConfigEnum = ClosedEnum<
  typeof RedisChangeStatusMetricsConfigEnum
>;

export type RedisChangeStatusMetricsConfigUnion1 =
  | string
  | number
  | boolean
  | RedisChangeStatusMetricsConfigEnum;

export type RedisChangeStatusMetricsConfigUnion2 =
  | string
  | number
  | boolean
  | RedisChangeStatusMetricsConfigEnum
  | Array<any>
  | { [k: string]: any };

export const RedisChangeStatusServerStatus = {
  Active: "active",
  Inactive: "inactive",
} as const;
export type RedisChangeStatusServerStatus = ClosedEnum<
  typeof RedisChangeStatusServerStatus
>;

export type RedisChangeStatusServer = {
  appName: string;
  command: string;
  createdAt: string;
  description: string | null;
  enableDockerCleanup: boolean;
  ipAddress: string;
  metricsConfig:
    | string
    | number
    | boolean
    | RedisChangeStatusMetricsConfigEnum
    | Array<any>
    | { [k: string]: any };
  name: string;
  organizationId: string;
  port: number;
  serverId: string;
  serverStatus: RedisChangeStatusServerStatus;
  sshKeyId: string | null;
  username: string;
};

export type RedisChangeStatusUpdateConfigSwarm = {
  delay?: number | undefined;
  failureAction?: string | undefined;
  maxFailureRatio?: number | undefined;
  monitor?: number | undefined;
  order: string;
  parallelism: number;
};

/**
 * Successful response
 */
export type RedisChangeStatusResponseBody = {
  appName: string;
  applicationStatus: RedisChangeStatusApplicationStatusResponse;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databasePassword: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environment: RedisChangeStatusEnvironment;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: RedisChangeStatusHealthCheckSwarm | null;
  labelsSwarm: { [k: string]: string } | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: RedisChangeStatusModeSwarm | null;
  mounts: Array<RedisChangeStatusMount>;
  name: string;
  networkSwarm: Array<RedisChangeStatusNetworkSwarm> | null;
  placementSwarm: RedisChangeStatusPlacementSwarm | null;
  redisId: string;
  replicas: number;
  restartPolicySwarm: RedisChangeStatusRestartPolicySwarm | null;
  rollbackConfigSwarm: RedisChangeStatusRollbackConfigSwarm | null;
  server: RedisChangeStatusServer | null;
  serverId: string | null;
  updateConfigSwarm: RedisChangeStatusUpdateConfigSwarm | null;
};

export type RedisChangeStatusResponse =
  | RedisChangeStatusResponseBody
  | models.ErrorT;

/** @internal */
export const RedisChangeStatusSecurity$inboundSchema: z.ZodType<
  RedisChangeStatusSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type RedisChangeStatusSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const RedisChangeStatusSecurity$outboundSchema: z.ZodType<
  RedisChangeStatusSecurity$Outbound,
  z.ZodTypeDef,
  RedisChangeStatusSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusSecurity$ {
  /** @deprecated use `RedisChangeStatusSecurity$inboundSchema` instead. */
  export const inboundSchema = RedisChangeStatusSecurity$inboundSchema;
  /** @deprecated use `RedisChangeStatusSecurity$outboundSchema` instead. */
  export const outboundSchema = RedisChangeStatusSecurity$outboundSchema;
  /** @deprecated use `RedisChangeStatusSecurity$Outbound` instead. */
  export type Outbound = RedisChangeStatusSecurity$Outbound;
}

export function redisChangeStatusSecurityToJSON(
  redisChangeStatusSecurity: RedisChangeStatusSecurity,
): string {
  return JSON.stringify(
    RedisChangeStatusSecurity$outboundSchema.parse(redisChangeStatusSecurity),
  );
}

export function redisChangeStatusSecurityFromJSON(
  jsonString: string,
): SafeParseResult<RedisChangeStatusSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisChangeStatusSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisChangeStatusSecurity' from JSON`,
  );
}

/** @internal */
export const RedisChangeStatusApplicationStatusRequest$inboundSchema:
  z.ZodNativeEnum<typeof RedisChangeStatusApplicationStatusRequest> = z
    .nativeEnum(RedisChangeStatusApplicationStatusRequest);

/** @internal */
export const RedisChangeStatusApplicationStatusRequest$outboundSchema:
  z.ZodNativeEnum<typeof RedisChangeStatusApplicationStatusRequest> =
    RedisChangeStatusApplicationStatusRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusApplicationStatusRequest$ {
  /** @deprecated use `RedisChangeStatusApplicationStatusRequest$inboundSchema` instead. */
  export const inboundSchema =
    RedisChangeStatusApplicationStatusRequest$inboundSchema;
  /** @deprecated use `RedisChangeStatusApplicationStatusRequest$outboundSchema` instead. */
  export const outboundSchema =
    RedisChangeStatusApplicationStatusRequest$outboundSchema;
}

/** @internal */
export const RedisChangeStatusRequest$inboundSchema: z.ZodType<
  RedisChangeStatusRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationStatus: RedisChangeStatusApplicationStatusRequest$inboundSchema,
  redisId: z.string(),
});

/** @internal */
export type RedisChangeStatusRequest$Outbound = {
  applicationStatus: string;
  redisId: string;
};

/** @internal */
export const RedisChangeStatusRequest$outboundSchema: z.ZodType<
  RedisChangeStatusRequest$Outbound,
  z.ZodTypeDef,
  RedisChangeStatusRequest
> = z.object({
  applicationStatus: RedisChangeStatusApplicationStatusRequest$outboundSchema,
  redisId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusRequest$ {
  /** @deprecated use `RedisChangeStatusRequest$inboundSchema` instead. */
  export const inboundSchema = RedisChangeStatusRequest$inboundSchema;
  /** @deprecated use `RedisChangeStatusRequest$outboundSchema` instead. */
  export const outboundSchema = RedisChangeStatusRequest$outboundSchema;
  /** @deprecated use `RedisChangeStatusRequest$Outbound` instead. */
  export type Outbound = RedisChangeStatusRequest$Outbound;
}

export function redisChangeStatusRequestToJSON(
  redisChangeStatusRequest: RedisChangeStatusRequest,
): string {
  return JSON.stringify(
    RedisChangeStatusRequest$outboundSchema.parse(redisChangeStatusRequest),
  );
}

export function redisChangeStatusRequestFromJSON(
  jsonString: string,
): SafeParseResult<RedisChangeStatusRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisChangeStatusRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisChangeStatusRequest' from JSON`,
  );
}

/** @internal */
export const RedisChangeStatusApplicationStatusResponse$inboundSchema:
  z.ZodNativeEnum<typeof RedisChangeStatusApplicationStatusResponse> = z
    .nativeEnum(RedisChangeStatusApplicationStatusResponse);

/** @internal */
export const RedisChangeStatusApplicationStatusResponse$outboundSchema:
  z.ZodNativeEnum<typeof RedisChangeStatusApplicationStatusResponse> =
    RedisChangeStatusApplicationStatusResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusApplicationStatusResponse$ {
  /** @deprecated use `RedisChangeStatusApplicationStatusResponse$inboundSchema` instead. */
  export const inboundSchema =
    RedisChangeStatusApplicationStatusResponse$inboundSchema;
  /** @deprecated use `RedisChangeStatusApplicationStatusResponse$outboundSchema` instead. */
  export const outboundSchema =
    RedisChangeStatusApplicationStatusResponse$outboundSchema;
}

/** @internal */
export const RedisChangeStatusProject$inboundSchema: z.ZodType<
  RedisChangeStatusProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/** @internal */
export type RedisChangeStatusProject$Outbound = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

/** @internal */
export const RedisChangeStatusProject$outboundSchema: z.ZodType<
  RedisChangeStatusProject$Outbound,
  z.ZodTypeDef,
  RedisChangeStatusProject
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusProject$ {
  /** @deprecated use `RedisChangeStatusProject$inboundSchema` instead. */
  export const inboundSchema = RedisChangeStatusProject$inboundSchema;
  /** @deprecated use `RedisChangeStatusProject$outboundSchema` instead. */
  export const outboundSchema = RedisChangeStatusProject$outboundSchema;
  /** @deprecated use `RedisChangeStatusProject$Outbound` instead. */
  export type Outbound = RedisChangeStatusProject$Outbound;
}

export function redisChangeStatusProjectToJSON(
  redisChangeStatusProject: RedisChangeStatusProject,
): string {
  return JSON.stringify(
    RedisChangeStatusProject$outboundSchema.parse(redisChangeStatusProject),
  );
}

export function redisChangeStatusProjectFromJSON(
  jsonString: string,
): SafeParseResult<RedisChangeStatusProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisChangeStatusProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisChangeStatusProject' from JSON`,
  );
}

/** @internal */
export const RedisChangeStatusEnvironment$inboundSchema: z.ZodType<
  RedisChangeStatusEnvironment,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  name: z.string(),
  project: z.lazy(() => RedisChangeStatusProject$inboundSchema),
  projectId: z.string(),
});

/** @internal */
export type RedisChangeStatusEnvironment$Outbound = {
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  name: string;
  project: RedisChangeStatusProject$Outbound;
  projectId: string;
};

/** @internal */
export const RedisChangeStatusEnvironment$outboundSchema: z.ZodType<
  RedisChangeStatusEnvironment$Outbound,
  z.ZodTypeDef,
  RedisChangeStatusEnvironment
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  name: z.string(),
  project: z.lazy(() => RedisChangeStatusProject$outboundSchema),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusEnvironment$ {
  /** @deprecated use `RedisChangeStatusEnvironment$inboundSchema` instead. */
  export const inboundSchema = RedisChangeStatusEnvironment$inboundSchema;
  /** @deprecated use `RedisChangeStatusEnvironment$outboundSchema` instead. */
  export const outboundSchema = RedisChangeStatusEnvironment$outboundSchema;
  /** @deprecated use `RedisChangeStatusEnvironment$Outbound` instead. */
  export type Outbound = RedisChangeStatusEnvironment$Outbound;
}

export function redisChangeStatusEnvironmentToJSON(
  redisChangeStatusEnvironment: RedisChangeStatusEnvironment,
): string {
  return JSON.stringify(
    RedisChangeStatusEnvironment$outboundSchema.parse(
      redisChangeStatusEnvironment,
    ),
  );
}

export function redisChangeStatusEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<RedisChangeStatusEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisChangeStatusEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisChangeStatusEnvironment' from JSON`,
  );
}

/** @internal */
export const RedisChangeStatusHealthCheckSwarm$inboundSchema: z.ZodType<
  RedisChangeStatusHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Interval: z.number().optional(),
  Retries: z.number().optional(),
  StartPeriod: z.number().optional(),
  Test: z.array(z.string()).optional(),
  Timeout: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Interval": "interval",
    "Retries": "retries",
    "StartPeriod": "startPeriod",
    "Test": "test",
    "Timeout": "timeout",
  });
});

/** @internal */
export type RedisChangeStatusHealthCheckSwarm$Outbound = {
  Interval?: number | undefined;
  Retries?: number | undefined;
  StartPeriod?: number | undefined;
  Test?: Array<string> | undefined;
  Timeout?: number | undefined;
};

/** @internal */
export const RedisChangeStatusHealthCheckSwarm$outboundSchema: z.ZodType<
  RedisChangeStatusHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  RedisChangeStatusHealthCheckSwarm
> = z.object({
  interval: z.number().optional(),
  retries: z.number().optional(),
  startPeriod: z.number().optional(),
  test: z.array(z.string()).optional(),
  timeout: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    interval: "Interval",
    retries: "Retries",
    startPeriod: "StartPeriod",
    test: "Test",
    timeout: "Timeout",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusHealthCheckSwarm$ {
  /** @deprecated use `RedisChangeStatusHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisChangeStatusHealthCheckSwarm$inboundSchema;
  /** @deprecated use `RedisChangeStatusHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema =
    RedisChangeStatusHealthCheckSwarm$outboundSchema;
  /** @deprecated use `RedisChangeStatusHealthCheckSwarm$Outbound` instead. */
  export type Outbound = RedisChangeStatusHealthCheckSwarm$Outbound;
}

export function redisChangeStatusHealthCheckSwarmToJSON(
  redisChangeStatusHealthCheckSwarm: RedisChangeStatusHealthCheckSwarm,
): string {
  return JSON.stringify(
    RedisChangeStatusHealthCheckSwarm$outboundSchema.parse(
      redisChangeStatusHealthCheckSwarm,
    ),
  );
}

export function redisChangeStatusHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisChangeStatusHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisChangeStatusHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisChangeStatusHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const RedisChangeStatusGlobal$inboundSchema: z.ZodType<
  RedisChangeStatusGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RedisChangeStatusGlobal$Outbound = {};

/** @internal */
export const RedisChangeStatusGlobal$outboundSchema: z.ZodType<
  RedisChangeStatusGlobal$Outbound,
  z.ZodTypeDef,
  RedisChangeStatusGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusGlobal$ {
  /** @deprecated use `RedisChangeStatusGlobal$inboundSchema` instead. */
  export const inboundSchema = RedisChangeStatusGlobal$inboundSchema;
  /** @deprecated use `RedisChangeStatusGlobal$outboundSchema` instead. */
  export const outboundSchema = RedisChangeStatusGlobal$outboundSchema;
  /** @deprecated use `RedisChangeStatusGlobal$Outbound` instead. */
  export type Outbound = RedisChangeStatusGlobal$Outbound;
}

export function redisChangeStatusGlobalToJSON(
  redisChangeStatusGlobal: RedisChangeStatusGlobal,
): string {
  return JSON.stringify(
    RedisChangeStatusGlobal$outboundSchema.parse(redisChangeStatusGlobal),
  );
}

export function redisChangeStatusGlobalFromJSON(
  jsonString: string,
): SafeParseResult<RedisChangeStatusGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisChangeStatusGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisChangeStatusGlobal' from JSON`,
  );
}

/** @internal */
export const RedisChangeStatusGlobalJob$inboundSchema: z.ZodType<
  RedisChangeStatusGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RedisChangeStatusGlobalJob$Outbound = {};

/** @internal */
export const RedisChangeStatusGlobalJob$outboundSchema: z.ZodType<
  RedisChangeStatusGlobalJob$Outbound,
  z.ZodTypeDef,
  RedisChangeStatusGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusGlobalJob$ {
  /** @deprecated use `RedisChangeStatusGlobalJob$inboundSchema` instead. */
  export const inboundSchema = RedisChangeStatusGlobalJob$inboundSchema;
  /** @deprecated use `RedisChangeStatusGlobalJob$outboundSchema` instead. */
  export const outboundSchema = RedisChangeStatusGlobalJob$outboundSchema;
  /** @deprecated use `RedisChangeStatusGlobalJob$Outbound` instead. */
  export type Outbound = RedisChangeStatusGlobalJob$Outbound;
}

export function redisChangeStatusGlobalJobToJSON(
  redisChangeStatusGlobalJob: RedisChangeStatusGlobalJob,
): string {
  return JSON.stringify(
    RedisChangeStatusGlobalJob$outboundSchema.parse(redisChangeStatusGlobalJob),
  );
}

export function redisChangeStatusGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<RedisChangeStatusGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisChangeStatusGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisChangeStatusGlobalJob' from JSON`,
  );
}

/** @internal */
export const RedisChangeStatusReplicated$inboundSchema: z.ZodType<
  RedisChangeStatusReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type RedisChangeStatusReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const RedisChangeStatusReplicated$outboundSchema: z.ZodType<
  RedisChangeStatusReplicated$Outbound,
  z.ZodTypeDef,
  RedisChangeStatusReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusReplicated$ {
  /** @deprecated use `RedisChangeStatusReplicated$inboundSchema` instead. */
  export const inboundSchema = RedisChangeStatusReplicated$inboundSchema;
  /** @deprecated use `RedisChangeStatusReplicated$outboundSchema` instead. */
  export const outboundSchema = RedisChangeStatusReplicated$outboundSchema;
  /** @deprecated use `RedisChangeStatusReplicated$Outbound` instead. */
  export type Outbound = RedisChangeStatusReplicated$Outbound;
}

export function redisChangeStatusReplicatedToJSON(
  redisChangeStatusReplicated: RedisChangeStatusReplicated,
): string {
  return JSON.stringify(
    RedisChangeStatusReplicated$outboundSchema.parse(
      redisChangeStatusReplicated,
    ),
  );
}

export function redisChangeStatusReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<RedisChangeStatusReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisChangeStatusReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisChangeStatusReplicated' from JSON`,
  );
}

/** @internal */
export const RedisChangeStatusReplicatedJob$inboundSchema: z.ZodType<
  RedisChangeStatusReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type RedisChangeStatusReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const RedisChangeStatusReplicatedJob$outboundSchema: z.ZodType<
  RedisChangeStatusReplicatedJob$Outbound,
  z.ZodTypeDef,
  RedisChangeStatusReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusReplicatedJob$ {
  /** @deprecated use `RedisChangeStatusReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = RedisChangeStatusReplicatedJob$inboundSchema;
  /** @deprecated use `RedisChangeStatusReplicatedJob$outboundSchema` instead. */
  export const outboundSchema = RedisChangeStatusReplicatedJob$outboundSchema;
  /** @deprecated use `RedisChangeStatusReplicatedJob$Outbound` instead. */
  export type Outbound = RedisChangeStatusReplicatedJob$Outbound;
}

export function redisChangeStatusReplicatedJobToJSON(
  redisChangeStatusReplicatedJob: RedisChangeStatusReplicatedJob,
): string {
  return JSON.stringify(
    RedisChangeStatusReplicatedJob$outboundSchema.parse(
      redisChangeStatusReplicatedJob,
    ),
  );
}

export function redisChangeStatusReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<RedisChangeStatusReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisChangeStatusReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisChangeStatusReplicatedJob' from JSON`,
  );
}

/** @internal */
export const RedisChangeStatusModeSwarm$inboundSchema: z.ZodType<
  RedisChangeStatusModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Global: z.lazy(() => RedisChangeStatusGlobal$inboundSchema).optional(),
  GlobalJob: z.lazy(() => RedisChangeStatusGlobalJob$inboundSchema).optional(),
  Replicated: z.lazy(() => RedisChangeStatusReplicated$inboundSchema)
    .optional(),
  ReplicatedJob: z.lazy(() => RedisChangeStatusReplicatedJob$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Global": "global",
    "GlobalJob": "globalJob",
    "Replicated": "replicated",
    "ReplicatedJob": "replicatedJob",
  });
});

/** @internal */
export type RedisChangeStatusModeSwarm$Outbound = {
  Global?: RedisChangeStatusGlobal$Outbound | undefined;
  GlobalJob?: RedisChangeStatusGlobalJob$Outbound | undefined;
  Replicated?: RedisChangeStatusReplicated$Outbound | undefined;
  ReplicatedJob?: RedisChangeStatusReplicatedJob$Outbound | undefined;
};

/** @internal */
export const RedisChangeStatusModeSwarm$outboundSchema: z.ZodType<
  RedisChangeStatusModeSwarm$Outbound,
  z.ZodTypeDef,
  RedisChangeStatusModeSwarm
> = z.object({
  global: z.lazy(() => RedisChangeStatusGlobal$outboundSchema).optional(),
  globalJob: z.lazy(() => RedisChangeStatusGlobalJob$outboundSchema).optional(),
  replicated: z.lazy(() => RedisChangeStatusReplicated$outboundSchema)
    .optional(),
  replicatedJob: z.lazy(() => RedisChangeStatusReplicatedJob$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    global: "Global",
    globalJob: "GlobalJob",
    replicated: "Replicated",
    replicatedJob: "ReplicatedJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusModeSwarm$ {
  /** @deprecated use `RedisChangeStatusModeSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisChangeStatusModeSwarm$inboundSchema;
  /** @deprecated use `RedisChangeStatusModeSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisChangeStatusModeSwarm$outboundSchema;
  /** @deprecated use `RedisChangeStatusModeSwarm$Outbound` instead. */
  export type Outbound = RedisChangeStatusModeSwarm$Outbound;
}

export function redisChangeStatusModeSwarmToJSON(
  redisChangeStatusModeSwarm: RedisChangeStatusModeSwarm,
): string {
  return JSON.stringify(
    RedisChangeStatusModeSwarm$outboundSchema.parse(redisChangeStatusModeSwarm),
  );
}

export function redisChangeStatusModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisChangeStatusModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisChangeStatusModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisChangeStatusModeSwarm' from JSON`,
  );
}

/** @internal */
export const RedisChangeStatusServiceType$inboundSchema: z.ZodNativeEnum<
  typeof RedisChangeStatusServiceType
> = z.nativeEnum(RedisChangeStatusServiceType);

/** @internal */
export const RedisChangeStatusServiceType$outboundSchema: z.ZodNativeEnum<
  typeof RedisChangeStatusServiceType
> = RedisChangeStatusServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusServiceType$ {
  /** @deprecated use `RedisChangeStatusServiceType$inboundSchema` instead. */
  export const inboundSchema = RedisChangeStatusServiceType$inboundSchema;
  /** @deprecated use `RedisChangeStatusServiceType$outboundSchema` instead. */
  export const outboundSchema = RedisChangeStatusServiceType$outboundSchema;
}

/** @internal */
export const RedisChangeStatusType$inboundSchema: z.ZodNativeEnum<
  typeof RedisChangeStatusType
> = z.nativeEnum(RedisChangeStatusType);

/** @internal */
export const RedisChangeStatusType$outboundSchema: z.ZodNativeEnum<
  typeof RedisChangeStatusType
> = RedisChangeStatusType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusType$ {
  /** @deprecated use `RedisChangeStatusType$inboundSchema` instead. */
  export const inboundSchema = RedisChangeStatusType$inboundSchema;
  /** @deprecated use `RedisChangeStatusType$outboundSchema` instead. */
  export const outboundSchema = RedisChangeStatusType$outboundSchema;
}

/** @internal */
export const RedisChangeStatusMount$inboundSchema: z.ZodType<
  RedisChangeStatusMount,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  content: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  hostPath: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mountId: z.string(),
  mountPath: z.string(),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  serviceType: RedisChangeStatusServiceType$inboundSchema,
  type: RedisChangeStatusType$inboundSchema,
  volumeName: z.nullable(z.string()),
});

/** @internal */
export type RedisChangeStatusMount$Outbound = {
  applicationId: string | null;
  composeId: string | null;
  content: string | null;
  filePath: string | null;
  hostPath: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mountId: string;
  mountPath: string;
  mysqlId: string | null;
  postgresId: string | null;
  redisId: string | null;
  serviceType: string;
  type: string;
  volumeName: string | null;
};

/** @internal */
export const RedisChangeStatusMount$outboundSchema: z.ZodType<
  RedisChangeStatusMount$Outbound,
  z.ZodTypeDef,
  RedisChangeStatusMount
> = z.object({
  applicationId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  content: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  hostPath: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mountId: z.string(),
  mountPath: z.string(),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  serviceType: RedisChangeStatusServiceType$outboundSchema,
  type: RedisChangeStatusType$outboundSchema,
  volumeName: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusMount$ {
  /** @deprecated use `RedisChangeStatusMount$inboundSchema` instead. */
  export const inboundSchema = RedisChangeStatusMount$inboundSchema;
  /** @deprecated use `RedisChangeStatusMount$outboundSchema` instead. */
  export const outboundSchema = RedisChangeStatusMount$outboundSchema;
  /** @deprecated use `RedisChangeStatusMount$Outbound` instead. */
  export type Outbound = RedisChangeStatusMount$Outbound;
}

export function redisChangeStatusMountToJSON(
  redisChangeStatusMount: RedisChangeStatusMount,
): string {
  return JSON.stringify(
    RedisChangeStatusMount$outboundSchema.parse(redisChangeStatusMount),
  );
}

export function redisChangeStatusMountFromJSON(
  jsonString: string,
): SafeParseResult<RedisChangeStatusMount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisChangeStatusMount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisChangeStatusMount' from JSON`,
  );
}

/** @internal */
export const RedisChangeStatusDriverOpts$inboundSchema: z.ZodType<
  RedisChangeStatusDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RedisChangeStatusDriverOpts$Outbound = {};

/** @internal */
export const RedisChangeStatusDriverOpts$outboundSchema: z.ZodType<
  RedisChangeStatusDriverOpts$Outbound,
  z.ZodTypeDef,
  RedisChangeStatusDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusDriverOpts$ {
  /** @deprecated use `RedisChangeStatusDriverOpts$inboundSchema` instead. */
  export const inboundSchema = RedisChangeStatusDriverOpts$inboundSchema;
  /** @deprecated use `RedisChangeStatusDriverOpts$outboundSchema` instead. */
  export const outboundSchema = RedisChangeStatusDriverOpts$outboundSchema;
  /** @deprecated use `RedisChangeStatusDriverOpts$Outbound` instead. */
  export type Outbound = RedisChangeStatusDriverOpts$Outbound;
}

export function redisChangeStatusDriverOptsToJSON(
  redisChangeStatusDriverOpts: RedisChangeStatusDriverOpts,
): string {
  return JSON.stringify(
    RedisChangeStatusDriverOpts$outboundSchema.parse(
      redisChangeStatusDriverOpts,
    ),
  );
}

export function redisChangeStatusDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<RedisChangeStatusDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisChangeStatusDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisChangeStatusDriverOpts' from JSON`,
  );
}

/** @internal */
export const RedisChangeStatusNetworkSwarm$inboundSchema: z.ZodType<
  RedisChangeStatusNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => RedisChangeStatusDriverOpts$inboundSchema)
    .optional(),
  Target: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
    "Target": "target",
  });
});

/** @internal */
export type RedisChangeStatusNetworkSwarm$Outbound = {
  Aliases?: Array<string> | undefined;
  DriverOpts?: RedisChangeStatusDriverOpts$Outbound | undefined;
  Target?: string | undefined;
};

/** @internal */
export const RedisChangeStatusNetworkSwarm$outboundSchema: z.ZodType<
  RedisChangeStatusNetworkSwarm$Outbound,
  z.ZodTypeDef,
  RedisChangeStatusNetworkSwarm
> = z.object({
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => RedisChangeStatusDriverOpts$outboundSchema)
    .optional(),
  target: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    aliases: "Aliases",
    driverOpts: "DriverOpts",
    target: "Target",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusNetworkSwarm$ {
  /** @deprecated use `RedisChangeStatusNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisChangeStatusNetworkSwarm$inboundSchema;
  /** @deprecated use `RedisChangeStatusNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisChangeStatusNetworkSwarm$outboundSchema;
  /** @deprecated use `RedisChangeStatusNetworkSwarm$Outbound` instead. */
  export type Outbound = RedisChangeStatusNetworkSwarm$Outbound;
}

export function redisChangeStatusNetworkSwarmToJSON(
  redisChangeStatusNetworkSwarm: RedisChangeStatusNetworkSwarm,
): string {
  return JSON.stringify(
    RedisChangeStatusNetworkSwarm$outboundSchema.parse(
      redisChangeStatusNetworkSwarm,
    ),
  );
}

export function redisChangeStatusNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisChangeStatusNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisChangeStatusNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisChangeStatusNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const RedisChangeStatusPlatform$inboundSchema: z.ZodType<
  RedisChangeStatusPlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type RedisChangeStatusPlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const RedisChangeStatusPlatform$outboundSchema: z.ZodType<
  RedisChangeStatusPlatform$Outbound,
  z.ZodTypeDef,
  RedisChangeStatusPlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusPlatform$ {
  /** @deprecated use `RedisChangeStatusPlatform$inboundSchema` instead. */
  export const inboundSchema = RedisChangeStatusPlatform$inboundSchema;
  /** @deprecated use `RedisChangeStatusPlatform$outboundSchema` instead. */
  export const outboundSchema = RedisChangeStatusPlatform$outboundSchema;
  /** @deprecated use `RedisChangeStatusPlatform$Outbound` instead. */
  export type Outbound = RedisChangeStatusPlatform$Outbound;
}

export function redisChangeStatusPlatformToJSON(
  redisChangeStatusPlatform: RedisChangeStatusPlatform,
): string {
  return JSON.stringify(
    RedisChangeStatusPlatform$outboundSchema.parse(redisChangeStatusPlatform),
  );
}

export function redisChangeStatusPlatformFromJSON(
  jsonString: string,
): SafeParseResult<RedisChangeStatusPlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisChangeStatusPlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisChangeStatusPlatform' from JSON`,
  );
}

/** @internal */
export const RedisChangeStatusSpread$inboundSchema: z.ZodType<
  RedisChangeStatusSpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type RedisChangeStatusSpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const RedisChangeStatusSpread$outboundSchema: z.ZodType<
  RedisChangeStatusSpread$Outbound,
  z.ZodTypeDef,
  RedisChangeStatusSpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusSpread$ {
  /** @deprecated use `RedisChangeStatusSpread$inboundSchema` instead. */
  export const inboundSchema = RedisChangeStatusSpread$inboundSchema;
  /** @deprecated use `RedisChangeStatusSpread$outboundSchema` instead. */
  export const outboundSchema = RedisChangeStatusSpread$outboundSchema;
  /** @deprecated use `RedisChangeStatusSpread$Outbound` instead. */
  export type Outbound = RedisChangeStatusSpread$Outbound;
}

export function redisChangeStatusSpreadToJSON(
  redisChangeStatusSpread: RedisChangeStatusSpread,
): string {
  return JSON.stringify(
    RedisChangeStatusSpread$outboundSchema.parse(redisChangeStatusSpread),
  );
}

export function redisChangeStatusSpreadFromJSON(
  jsonString: string,
): SafeParseResult<RedisChangeStatusSpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisChangeStatusSpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisChangeStatusSpread' from JSON`,
  );
}

/** @internal */
export const RedisChangeStatusPreference$inboundSchema: z.ZodType<
  RedisChangeStatusPreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => RedisChangeStatusSpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type RedisChangeStatusPreference$Outbound = {
  Spread: RedisChangeStatusSpread$Outbound;
};

/** @internal */
export const RedisChangeStatusPreference$outboundSchema: z.ZodType<
  RedisChangeStatusPreference$Outbound,
  z.ZodTypeDef,
  RedisChangeStatusPreference
> = z.object({
  spread: z.lazy(() => RedisChangeStatusSpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusPreference$ {
  /** @deprecated use `RedisChangeStatusPreference$inboundSchema` instead. */
  export const inboundSchema = RedisChangeStatusPreference$inboundSchema;
  /** @deprecated use `RedisChangeStatusPreference$outboundSchema` instead. */
  export const outboundSchema = RedisChangeStatusPreference$outboundSchema;
  /** @deprecated use `RedisChangeStatusPreference$Outbound` instead. */
  export type Outbound = RedisChangeStatusPreference$Outbound;
}

export function redisChangeStatusPreferenceToJSON(
  redisChangeStatusPreference: RedisChangeStatusPreference,
): string {
  return JSON.stringify(
    RedisChangeStatusPreference$outboundSchema.parse(
      redisChangeStatusPreference,
    ),
  );
}

export function redisChangeStatusPreferenceFromJSON(
  jsonString: string,
): SafeParseResult<RedisChangeStatusPreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisChangeStatusPreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisChangeStatusPreference' from JSON`,
  );
}

/** @internal */
export const RedisChangeStatusPlacementSwarm$inboundSchema: z.ZodType<
  RedisChangeStatusPlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => RedisChangeStatusPlatform$inboundSchema))
    .optional(),
  Preferences: z.array(z.lazy(() => RedisChangeStatusPreference$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
    "Preferences": "preferences",
  });
});

/** @internal */
export type RedisChangeStatusPlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<RedisChangeStatusPlatform$Outbound> | undefined;
  Preferences?: Array<RedisChangeStatusPreference$Outbound> | undefined;
};

/** @internal */
export const RedisChangeStatusPlacementSwarm$outboundSchema: z.ZodType<
  RedisChangeStatusPlacementSwarm$Outbound,
  z.ZodTypeDef,
  RedisChangeStatusPlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => RedisChangeStatusPlatform$outboundSchema))
    .optional(),
  preferences: z.array(z.lazy(() => RedisChangeStatusPreference$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
    preferences: "Preferences",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusPlacementSwarm$ {
  /** @deprecated use `RedisChangeStatusPlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisChangeStatusPlacementSwarm$inboundSchema;
  /** @deprecated use `RedisChangeStatusPlacementSwarm$outboundSchema` instead. */
  export const outboundSchema = RedisChangeStatusPlacementSwarm$outboundSchema;
  /** @deprecated use `RedisChangeStatusPlacementSwarm$Outbound` instead. */
  export type Outbound = RedisChangeStatusPlacementSwarm$Outbound;
}

export function redisChangeStatusPlacementSwarmToJSON(
  redisChangeStatusPlacementSwarm: RedisChangeStatusPlacementSwarm,
): string {
  return JSON.stringify(
    RedisChangeStatusPlacementSwarm$outboundSchema.parse(
      redisChangeStatusPlacementSwarm,
    ),
  );
}

export function redisChangeStatusPlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisChangeStatusPlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisChangeStatusPlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisChangeStatusPlacementSwarm' from JSON`,
  );
}

/** @internal */
export const RedisChangeStatusRestartPolicySwarm$inboundSchema: z.ZodType<
  RedisChangeStatusRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type RedisChangeStatusRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const RedisChangeStatusRestartPolicySwarm$outboundSchema: z.ZodType<
  RedisChangeStatusRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  RedisChangeStatusRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusRestartPolicySwarm$ {
  /** @deprecated use `RedisChangeStatusRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema =
    RedisChangeStatusRestartPolicySwarm$inboundSchema;
  /** @deprecated use `RedisChangeStatusRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema =
    RedisChangeStatusRestartPolicySwarm$outboundSchema;
  /** @deprecated use `RedisChangeStatusRestartPolicySwarm$Outbound` instead. */
  export type Outbound = RedisChangeStatusRestartPolicySwarm$Outbound;
}

export function redisChangeStatusRestartPolicySwarmToJSON(
  redisChangeStatusRestartPolicySwarm: RedisChangeStatusRestartPolicySwarm,
): string {
  return JSON.stringify(
    RedisChangeStatusRestartPolicySwarm$outboundSchema.parse(
      redisChangeStatusRestartPolicySwarm,
    ),
  );
}

export function redisChangeStatusRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisChangeStatusRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RedisChangeStatusRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisChangeStatusRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const RedisChangeStatusRollbackConfigSwarm$inboundSchema: z.ZodType<
  RedisChangeStatusRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  MaxFailureRatio: z.number().optional(),
  Monitor: z.number().optional(),
  Order: z.string(),
  Parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    "Delay": "delay",
    "FailureAction": "failureAction",
    "MaxFailureRatio": "maxFailureRatio",
    "Monitor": "monitor",
    "Order": "order",
    "Parallelism": "parallelism",
  });
});

/** @internal */
export type RedisChangeStatusRollbackConfigSwarm$Outbound = {
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  MaxFailureRatio?: number | undefined;
  Monitor?: number | undefined;
  Order: string;
  Parallelism: number;
};

/** @internal */
export const RedisChangeStatusRollbackConfigSwarm$outboundSchema: z.ZodType<
  RedisChangeStatusRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  RedisChangeStatusRollbackConfigSwarm
> = z.object({
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  maxFailureRatio: z.number().optional(),
  monitor: z.number().optional(),
  order: z.string(),
  parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    delay: "Delay",
    failureAction: "FailureAction",
    maxFailureRatio: "MaxFailureRatio",
    monitor: "Monitor",
    order: "Order",
    parallelism: "Parallelism",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusRollbackConfigSwarm$ {
  /** @deprecated use `RedisChangeStatusRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema =
    RedisChangeStatusRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `RedisChangeStatusRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema =
    RedisChangeStatusRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `RedisChangeStatusRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = RedisChangeStatusRollbackConfigSwarm$Outbound;
}

export function redisChangeStatusRollbackConfigSwarmToJSON(
  redisChangeStatusRollbackConfigSwarm: RedisChangeStatusRollbackConfigSwarm,
): string {
  return JSON.stringify(
    RedisChangeStatusRollbackConfigSwarm$outboundSchema.parse(
      redisChangeStatusRollbackConfigSwarm,
    ),
  );
}

export function redisChangeStatusRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisChangeStatusRollbackConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RedisChangeStatusRollbackConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisChangeStatusRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const RedisChangeStatusMetricsConfigEnum$inboundSchema: z.ZodNativeEnum<
  typeof RedisChangeStatusMetricsConfigEnum
> = z.nativeEnum(RedisChangeStatusMetricsConfigEnum);

/** @internal */
export const RedisChangeStatusMetricsConfigEnum$outboundSchema: z.ZodNativeEnum<
  typeof RedisChangeStatusMetricsConfigEnum
> = RedisChangeStatusMetricsConfigEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusMetricsConfigEnum$ {
  /** @deprecated use `RedisChangeStatusMetricsConfigEnum$inboundSchema` instead. */
  export const inboundSchema = RedisChangeStatusMetricsConfigEnum$inboundSchema;
  /** @deprecated use `RedisChangeStatusMetricsConfigEnum$outboundSchema` instead. */
  export const outboundSchema =
    RedisChangeStatusMetricsConfigEnum$outboundSchema;
}

/** @internal */
export const RedisChangeStatusMetricsConfigUnion1$inboundSchema: z.ZodType<
  RedisChangeStatusMetricsConfigUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  RedisChangeStatusMetricsConfigEnum$inboundSchema,
]);

/** @internal */
export type RedisChangeStatusMetricsConfigUnion1$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const RedisChangeStatusMetricsConfigUnion1$outboundSchema: z.ZodType<
  RedisChangeStatusMetricsConfigUnion1$Outbound,
  z.ZodTypeDef,
  RedisChangeStatusMetricsConfigUnion1
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  RedisChangeStatusMetricsConfigEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusMetricsConfigUnion1$ {
  /** @deprecated use `RedisChangeStatusMetricsConfigUnion1$inboundSchema` instead. */
  export const inboundSchema =
    RedisChangeStatusMetricsConfigUnion1$inboundSchema;
  /** @deprecated use `RedisChangeStatusMetricsConfigUnion1$outboundSchema` instead. */
  export const outboundSchema =
    RedisChangeStatusMetricsConfigUnion1$outboundSchema;
  /** @deprecated use `RedisChangeStatusMetricsConfigUnion1$Outbound` instead. */
  export type Outbound = RedisChangeStatusMetricsConfigUnion1$Outbound;
}

export function redisChangeStatusMetricsConfigUnion1ToJSON(
  redisChangeStatusMetricsConfigUnion1: RedisChangeStatusMetricsConfigUnion1,
): string {
  return JSON.stringify(
    RedisChangeStatusMetricsConfigUnion1$outboundSchema.parse(
      redisChangeStatusMetricsConfigUnion1,
    ),
  );
}

export function redisChangeStatusMetricsConfigUnion1FromJSON(
  jsonString: string,
): SafeParseResult<RedisChangeStatusMetricsConfigUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RedisChangeStatusMetricsConfigUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisChangeStatusMetricsConfigUnion1' from JSON`,
  );
}

/** @internal */
export const RedisChangeStatusMetricsConfigUnion2$inboundSchema: z.ZodType<
  RedisChangeStatusMetricsConfigUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    RedisChangeStatusMetricsConfigEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type RedisChangeStatusMetricsConfigUnion2$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const RedisChangeStatusMetricsConfigUnion2$outboundSchema: z.ZodType<
  RedisChangeStatusMetricsConfigUnion2$Outbound,
  z.ZodTypeDef,
  RedisChangeStatusMetricsConfigUnion2
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    RedisChangeStatusMetricsConfigEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusMetricsConfigUnion2$ {
  /** @deprecated use `RedisChangeStatusMetricsConfigUnion2$inboundSchema` instead. */
  export const inboundSchema =
    RedisChangeStatusMetricsConfigUnion2$inboundSchema;
  /** @deprecated use `RedisChangeStatusMetricsConfigUnion2$outboundSchema` instead. */
  export const outboundSchema =
    RedisChangeStatusMetricsConfigUnion2$outboundSchema;
  /** @deprecated use `RedisChangeStatusMetricsConfigUnion2$Outbound` instead. */
  export type Outbound = RedisChangeStatusMetricsConfigUnion2$Outbound;
}

export function redisChangeStatusMetricsConfigUnion2ToJSON(
  redisChangeStatusMetricsConfigUnion2: RedisChangeStatusMetricsConfigUnion2,
): string {
  return JSON.stringify(
    RedisChangeStatusMetricsConfigUnion2$outboundSchema.parse(
      redisChangeStatusMetricsConfigUnion2,
    ),
  );
}

export function redisChangeStatusMetricsConfigUnion2FromJSON(
  jsonString: string,
): SafeParseResult<RedisChangeStatusMetricsConfigUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RedisChangeStatusMetricsConfigUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisChangeStatusMetricsConfigUnion2' from JSON`,
  );
}

/** @internal */
export const RedisChangeStatusServerStatus$inboundSchema: z.ZodNativeEnum<
  typeof RedisChangeStatusServerStatus
> = z.nativeEnum(RedisChangeStatusServerStatus);

/** @internal */
export const RedisChangeStatusServerStatus$outboundSchema: z.ZodNativeEnum<
  typeof RedisChangeStatusServerStatus
> = RedisChangeStatusServerStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusServerStatus$ {
  /** @deprecated use `RedisChangeStatusServerStatus$inboundSchema` instead. */
  export const inboundSchema = RedisChangeStatusServerStatus$inboundSchema;
  /** @deprecated use `RedisChangeStatusServerStatus$outboundSchema` instead. */
  export const outboundSchema = RedisChangeStatusServerStatus$outboundSchema;
}

/** @internal */
export const RedisChangeStatusServer$inboundSchema: z.ZodType<
  RedisChangeStatusServer,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  command: z.string(),
  createdAt: z.string(),
  description: z.nullable(z.string()),
  enableDockerCleanup: z.boolean(),
  ipAddress: z.string(),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      RedisChangeStatusMetricsConfigEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
  name: z.string(),
  organizationId: z.string(),
  port: z.number(),
  serverId: z.string(),
  serverStatus: RedisChangeStatusServerStatus$inboundSchema,
  sshKeyId: z.nullable(z.string()),
  username: z.string(),
});

/** @internal */
export type RedisChangeStatusServer$Outbound = {
  appName: string;
  command: string;
  createdAt: string;
  description: string | null;
  enableDockerCleanup: boolean;
  ipAddress: string;
  metricsConfig: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  };
  name: string;
  organizationId: string;
  port: number;
  serverId: string;
  serverStatus: string;
  sshKeyId: string | null;
  username: string;
};

/** @internal */
export const RedisChangeStatusServer$outboundSchema: z.ZodType<
  RedisChangeStatusServer$Outbound,
  z.ZodTypeDef,
  RedisChangeStatusServer
> = z.object({
  appName: z.string(),
  command: z.string(),
  createdAt: z.string(),
  description: z.nullable(z.string()),
  enableDockerCleanup: z.boolean(),
  ipAddress: z.string(),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      RedisChangeStatusMetricsConfigEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
  name: z.string(),
  organizationId: z.string(),
  port: z.number(),
  serverId: z.string(),
  serverStatus: RedisChangeStatusServerStatus$outboundSchema,
  sshKeyId: z.nullable(z.string()),
  username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusServer$ {
  /** @deprecated use `RedisChangeStatusServer$inboundSchema` instead. */
  export const inboundSchema = RedisChangeStatusServer$inboundSchema;
  /** @deprecated use `RedisChangeStatusServer$outboundSchema` instead. */
  export const outboundSchema = RedisChangeStatusServer$outboundSchema;
  /** @deprecated use `RedisChangeStatusServer$Outbound` instead. */
  export type Outbound = RedisChangeStatusServer$Outbound;
}

export function redisChangeStatusServerToJSON(
  redisChangeStatusServer: RedisChangeStatusServer,
): string {
  return JSON.stringify(
    RedisChangeStatusServer$outboundSchema.parse(redisChangeStatusServer),
  );
}

export function redisChangeStatusServerFromJSON(
  jsonString: string,
): SafeParseResult<RedisChangeStatusServer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisChangeStatusServer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisChangeStatusServer' from JSON`,
  );
}

/** @internal */
export const RedisChangeStatusUpdateConfigSwarm$inboundSchema: z.ZodType<
  RedisChangeStatusUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  MaxFailureRatio: z.number().optional(),
  Monitor: z.number().optional(),
  Order: z.string(),
  Parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    "Delay": "delay",
    "FailureAction": "failureAction",
    "MaxFailureRatio": "maxFailureRatio",
    "Monitor": "monitor",
    "Order": "order",
    "Parallelism": "parallelism",
  });
});

/** @internal */
export type RedisChangeStatusUpdateConfigSwarm$Outbound = {
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  MaxFailureRatio?: number | undefined;
  Monitor?: number | undefined;
  Order: string;
  Parallelism: number;
};

/** @internal */
export const RedisChangeStatusUpdateConfigSwarm$outboundSchema: z.ZodType<
  RedisChangeStatusUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  RedisChangeStatusUpdateConfigSwarm
> = z.object({
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  maxFailureRatio: z.number().optional(),
  monitor: z.number().optional(),
  order: z.string(),
  parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    delay: "Delay",
    failureAction: "FailureAction",
    maxFailureRatio: "MaxFailureRatio",
    monitor: "Monitor",
    order: "Order",
    parallelism: "Parallelism",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusUpdateConfigSwarm$ {
  /** @deprecated use `RedisChangeStatusUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = RedisChangeStatusUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `RedisChangeStatusUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema =
    RedisChangeStatusUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `RedisChangeStatusUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = RedisChangeStatusUpdateConfigSwarm$Outbound;
}

export function redisChangeStatusUpdateConfigSwarmToJSON(
  redisChangeStatusUpdateConfigSwarm: RedisChangeStatusUpdateConfigSwarm,
): string {
  return JSON.stringify(
    RedisChangeStatusUpdateConfigSwarm$outboundSchema.parse(
      redisChangeStatusUpdateConfigSwarm,
    ),
  );
}

export function redisChangeStatusUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<RedisChangeStatusUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RedisChangeStatusUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisChangeStatusUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const RedisChangeStatusResponseBody$inboundSchema: z.ZodType<
  RedisChangeStatusResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  applicationStatus: RedisChangeStatusApplicationStatusResponse$inboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databasePassword: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environment: z.lazy(() => RedisChangeStatusEnvironment$inboundSchema),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.lazy(() => RedisChangeStatusHealthCheckSwarm$inboundSchema),
  ),
  labelsSwarm: z.nullable(z.record(z.string())),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(z.lazy(() => RedisChangeStatusModeSwarm$inboundSchema)),
  mounts: z.array(z.lazy(() => RedisChangeStatusMount$inboundSchema)),
  name: z.string(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => RedisChangeStatusNetworkSwarm$inboundSchema)),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => RedisChangeStatusPlacementSwarm$inboundSchema),
  ),
  redisId: z.string(),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => RedisChangeStatusRestartPolicySwarm$inboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => RedisChangeStatusRollbackConfigSwarm$inboundSchema),
  ),
  server: z.nullable(z.lazy(() => RedisChangeStatusServer$inboundSchema)),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.lazy(() => RedisChangeStatusUpdateConfigSwarm$inboundSchema),
  ),
});

/** @internal */
export type RedisChangeStatusResponseBody$Outbound = {
  appName: string;
  applicationStatus: string;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databasePassword: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environment: RedisChangeStatusEnvironment$Outbound;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: RedisChangeStatusHealthCheckSwarm$Outbound | null;
  labelsSwarm: { [k: string]: string } | null;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: RedisChangeStatusModeSwarm$Outbound | null;
  mounts: Array<RedisChangeStatusMount$Outbound>;
  name: string;
  networkSwarm: Array<RedisChangeStatusNetworkSwarm$Outbound> | null;
  placementSwarm: RedisChangeStatusPlacementSwarm$Outbound | null;
  redisId: string;
  replicas: number;
  restartPolicySwarm: RedisChangeStatusRestartPolicySwarm$Outbound | null;
  rollbackConfigSwarm: RedisChangeStatusRollbackConfigSwarm$Outbound | null;
  server: RedisChangeStatusServer$Outbound | null;
  serverId: string | null;
  updateConfigSwarm: RedisChangeStatusUpdateConfigSwarm$Outbound | null;
};

/** @internal */
export const RedisChangeStatusResponseBody$outboundSchema: z.ZodType<
  RedisChangeStatusResponseBody$Outbound,
  z.ZodTypeDef,
  RedisChangeStatusResponseBody
> = z.object({
  appName: z.string(),
  applicationStatus: RedisChangeStatusApplicationStatusResponse$outboundSchema,
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databasePassword: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environment: z.lazy(() => RedisChangeStatusEnvironment$outboundSchema),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.lazy(() => RedisChangeStatusHealthCheckSwarm$outboundSchema),
  ),
  labelsSwarm: z.nullable(z.record(z.string())),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(
    z.lazy(() => RedisChangeStatusModeSwarm$outboundSchema),
  ),
  mounts: z.array(z.lazy(() => RedisChangeStatusMount$outboundSchema)),
  name: z.string(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => RedisChangeStatusNetworkSwarm$outboundSchema)),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => RedisChangeStatusPlacementSwarm$outboundSchema),
  ),
  redisId: z.string(),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => RedisChangeStatusRestartPolicySwarm$outboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => RedisChangeStatusRollbackConfigSwarm$outboundSchema),
  ),
  server: z.nullable(z.lazy(() => RedisChangeStatusServer$outboundSchema)),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.lazy(() => RedisChangeStatusUpdateConfigSwarm$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusResponseBody$ {
  /** @deprecated use `RedisChangeStatusResponseBody$inboundSchema` instead. */
  export const inboundSchema = RedisChangeStatusResponseBody$inboundSchema;
  /** @deprecated use `RedisChangeStatusResponseBody$outboundSchema` instead. */
  export const outboundSchema = RedisChangeStatusResponseBody$outboundSchema;
  /** @deprecated use `RedisChangeStatusResponseBody$Outbound` instead. */
  export type Outbound = RedisChangeStatusResponseBody$Outbound;
}

export function redisChangeStatusResponseBodyToJSON(
  redisChangeStatusResponseBody: RedisChangeStatusResponseBody,
): string {
  return JSON.stringify(
    RedisChangeStatusResponseBody$outboundSchema.parse(
      redisChangeStatusResponseBody,
    ),
  );
}

export function redisChangeStatusResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RedisChangeStatusResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisChangeStatusResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisChangeStatusResponseBody' from JSON`,
  );
}

/** @internal */
export const RedisChangeStatusResponse$inboundSchema: z.ZodType<
  RedisChangeStatusResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => RedisChangeStatusResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type RedisChangeStatusResponse$Outbound =
  | RedisChangeStatusResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const RedisChangeStatusResponse$outboundSchema: z.ZodType<
  RedisChangeStatusResponse$Outbound,
  z.ZodTypeDef,
  RedisChangeStatusResponse
> = z.union([
  z.lazy(() => RedisChangeStatusResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisChangeStatusResponse$ {
  /** @deprecated use `RedisChangeStatusResponse$inboundSchema` instead. */
  export const inboundSchema = RedisChangeStatusResponse$inboundSchema;
  /** @deprecated use `RedisChangeStatusResponse$outboundSchema` instead. */
  export const outboundSchema = RedisChangeStatusResponse$outboundSchema;
  /** @deprecated use `RedisChangeStatusResponse$Outbound` instead. */
  export type Outbound = RedisChangeStatusResponse$Outbound;
}

export function redisChangeStatusResponseToJSON(
  redisChangeStatusResponse: RedisChangeStatusResponse,
): string {
  return JSON.stringify(
    RedisChangeStatusResponse$outboundSchema.parse(redisChangeStatusResponse),
  );
}

export function redisChangeStatusResponseFromJSON(
  jsonString: string,
): SafeParseResult<RedisChangeStatusResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisChangeStatusResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisChangeStatusResponse' from JSON`,
  );
}
