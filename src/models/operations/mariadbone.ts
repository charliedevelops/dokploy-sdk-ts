/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type MariadbOneSecurity = {
  authorization: string;
};

export type MariadbOneRequest = {
  mariadbId: string;
};

export const MariadbOneApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type MariadbOneApplicationStatus = ClosedEnum<
  typeof MariadbOneApplicationStatus
>;

export const MariadbOneBackupType = {
  Database: "database",
  Compose: "compose",
} as const;
export type MariadbOneBackupType = ClosedEnum<typeof MariadbOneBackupType>;

export const MariadbOneDatabaseType = {
  Postgres: "postgres",
  Mariadb: "mariadb",
  Mysql: "mysql",
  Mongo: "mongo",
  WebServer: "web-server",
} as const;
export type MariadbOneDatabaseType = ClosedEnum<typeof MariadbOneDatabaseType>;

export const MariadbOneMetadataEnum = {
  Null: "null",
} as const;
export type MariadbOneMetadataEnum = ClosedEnum<typeof MariadbOneMetadataEnum>;

export type MariadbOneMariadb = {
  databasePassword: string;
  databaseUser: string;
};

export type MariadbOneMongo = {
  databasePassword: string;
  databaseUser: string;
};

export type MariadbOneMysql = {
  databaseRootPassword: string;
};

export type MariadbOnePostgres = {
  databaseUser: string;
};

export type MariadbOneMetadata = {
  mariadb?: MariadbOneMariadb | undefined;
  mongo?: MariadbOneMongo | undefined;
  mysql?: MariadbOneMysql | undefined;
  postgres?: MariadbOnePostgres | undefined;
};

export type MariadbOneMetadataUnion =
  | MariadbOneMetadata
  | MariadbOneMetadataEnum;

export type MariadbOneBackup = {
  appName: string;
  backupId: string;
  backupType: MariadbOneBackupType;
  composeId: string | null;
  database: string;
  databaseType: MariadbOneDatabaseType;
  destinationId: string;
  enabled: boolean | null;
  keepLatestCount: number | null;
  mariadbId: string | null;
  metadata?: MariadbOneMetadata | MariadbOneMetadataEnum | null | undefined;
  mongoId: string | null;
  mysqlId: string | null;
  postgresId: string | null;
  prefix: string;
  schedule: string;
  serviceName: string | null;
  userId: string | null;
};

export type MariadbOneProject = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

export type MariadbOneEnvironment = {
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  name: string;
  project: MariadbOneProject;
  projectId: string;
};

export type MariadbOneHealthCheckSwarm = {
  interval?: number | undefined;
  retries?: number | undefined;
  startPeriod?: number | undefined;
  test?: Array<string> | undefined;
  timeout?: number | undefined;
};

export type MariadbOneGlobal = {};

export type MariadbOneGlobalJob = {};

export type MariadbOneReplicated = {
  replicas?: number | undefined;
};

export type MariadbOneReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type MariadbOneModeSwarm = {
  global?: MariadbOneGlobal | undefined;
  globalJob?: MariadbOneGlobalJob | undefined;
  replicated?: MariadbOneReplicated | undefined;
  replicatedJob?: MariadbOneReplicatedJob | undefined;
};

export const MariadbOneServiceType = {
  Application: "application",
  Postgres: "postgres",
  Mysql: "mysql",
  Mariadb: "mariadb",
  Mongo: "mongo",
  Redis: "redis",
  Compose: "compose",
} as const;
export type MariadbOneServiceType = ClosedEnum<typeof MariadbOneServiceType>;

export const MariadbOneType = {
  Bind: "bind",
  Volume: "volume",
  File: "file",
} as const;
export type MariadbOneType = ClosedEnum<typeof MariadbOneType>;

export type MariadbOneMount = {
  applicationId: string | null;
  composeId: string | null;
  content: string | null;
  filePath: string | null;
  hostPath: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mountId: string;
  mountPath: string;
  mysqlId: string | null;
  postgresId: string | null;
  redisId: string | null;
  serviceType: MariadbOneServiceType;
  type: MariadbOneType;
  volumeName: string | null;
};

export type MariadbOneDriverOpts = {};

export type MariadbOneNetworkSwarm = {
  aliases?: Array<string> | undefined;
  driverOpts?: MariadbOneDriverOpts | undefined;
  target?: string | undefined;
};

export type MariadbOnePlatform = {
  architecture: string;
  os: string;
};

export type MariadbOneSpread = {
  spreadDescriptor: string;
};

export type MariadbOnePreference = {
  spread: MariadbOneSpread;
};

export type MariadbOnePlacementSwarm = {
  constraints?: Array<string> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<MariadbOnePlatform> | undefined;
  preferences?: Array<MariadbOnePreference> | undefined;
};

export type MariadbOneRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type MariadbOneRollbackConfigSwarm = {
  delay?: number | undefined;
  failureAction?: string | undefined;
  maxFailureRatio?: number | undefined;
  monitor?: number | undefined;
  order: string;
  parallelism: number;
};

export const MariadbOneMetricsConfigEnum = {
  Null: "null",
} as const;
export type MariadbOneMetricsConfigEnum = ClosedEnum<
  typeof MariadbOneMetricsConfigEnum
>;

export type MariadbOneMetricsConfigUnion1 =
  | string
  | number
  | boolean
  | MariadbOneMetricsConfigEnum;

export type MariadbOneMetricsConfigUnion2 =
  | string
  | number
  | boolean
  | MariadbOneMetricsConfigEnum
  | Array<any>
  | { [k: string]: any };

export const MariadbOneServerStatus = {
  Active: "active",
  Inactive: "inactive",
} as const;
export type MariadbOneServerStatus = ClosedEnum<typeof MariadbOneServerStatus>;

export type MariadbOneServer = {
  appName: string;
  command: string;
  createdAt: string;
  description: string | null;
  enableDockerCleanup: boolean;
  ipAddress: string;
  metricsConfig:
    | string
    | number
    | boolean
    | MariadbOneMetricsConfigEnum
    | Array<any>
    | { [k: string]: any };
  name: string;
  organizationId: string;
  port: number;
  serverId: string;
  serverStatus: MariadbOneServerStatus;
  sshKeyId: string | null;
  username: string;
};

export type MariadbOneUpdateConfigSwarm = {
  delay?: number | undefined;
  failureAction?: string | undefined;
  maxFailureRatio?: number | undefined;
  monitor?: number | undefined;
  order: string;
  parallelism: number;
};

/**
 * Successful response
 */
export type MariadbOneResponseBody = {
  appName: string;
  applicationStatus: MariadbOneApplicationStatus;
  backups: Array<MariadbOneBackup>;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databaseName: string;
  databasePassword: string;
  databaseRootPassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environment: MariadbOneEnvironment;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: MariadbOneHealthCheckSwarm | null;
  labelsSwarm: { [k: string]: string } | null;
  mariadbId: string;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: MariadbOneModeSwarm | null;
  mounts: Array<MariadbOneMount>;
  name: string;
  networkSwarm: Array<MariadbOneNetworkSwarm> | null;
  placementSwarm: MariadbOnePlacementSwarm | null;
  replicas: number;
  restartPolicySwarm: MariadbOneRestartPolicySwarm | null;
  rollbackConfigSwarm: MariadbOneRollbackConfigSwarm | null;
  server: MariadbOneServer | null;
  serverId: string | null;
  updateConfigSwarm: MariadbOneUpdateConfigSwarm | null;
};

export type MariadbOneResponse = MariadbOneResponseBody | models.ErrorT;

/** @internal */
export const MariadbOneSecurity$inboundSchema: z.ZodType<
  MariadbOneSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type MariadbOneSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const MariadbOneSecurity$outboundSchema: z.ZodType<
  MariadbOneSecurity$Outbound,
  z.ZodTypeDef,
  MariadbOneSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneSecurity$ {
  /** @deprecated use `MariadbOneSecurity$inboundSchema` instead. */
  export const inboundSchema = MariadbOneSecurity$inboundSchema;
  /** @deprecated use `MariadbOneSecurity$outboundSchema` instead. */
  export const outboundSchema = MariadbOneSecurity$outboundSchema;
  /** @deprecated use `MariadbOneSecurity$Outbound` instead. */
  export type Outbound = MariadbOneSecurity$Outbound;
}

export function mariadbOneSecurityToJSON(
  mariadbOneSecurity: MariadbOneSecurity,
): string {
  return JSON.stringify(
    MariadbOneSecurity$outboundSchema.parse(mariadbOneSecurity),
  );
}

export function mariadbOneSecurityFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOneSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOneSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOneSecurity' from JSON`,
  );
}

/** @internal */
export const MariadbOneRequest$inboundSchema: z.ZodType<
  MariadbOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mariadbId: z.string(),
});

/** @internal */
export type MariadbOneRequest$Outbound = {
  mariadbId: string;
};

/** @internal */
export const MariadbOneRequest$outboundSchema: z.ZodType<
  MariadbOneRequest$Outbound,
  z.ZodTypeDef,
  MariadbOneRequest
> = z.object({
  mariadbId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneRequest$ {
  /** @deprecated use `MariadbOneRequest$inboundSchema` instead. */
  export const inboundSchema = MariadbOneRequest$inboundSchema;
  /** @deprecated use `MariadbOneRequest$outboundSchema` instead. */
  export const outboundSchema = MariadbOneRequest$outboundSchema;
  /** @deprecated use `MariadbOneRequest$Outbound` instead. */
  export type Outbound = MariadbOneRequest$Outbound;
}

export function mariadbOneRequestToJSON(
  mariadbOneRequest: MariadbOneRequest,
): string {
  return JSON.stringify(
    MariadbOneRequest$outboundSchema.parse(mariadbOneRequest),
  );
}

export function mariadbOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOneRequest' from JSON`,
  );
}

/** @internal */
export const MariadbOneApplicationStatus$inboundSchema: z.ZodNativeEnum<
  typeof MariadbOneApplicationStatus
> = z.nativeEnum(MariadbOneApplicationStatus);

/** @internal */
export const MariadbOneApplicationStatus$outboundSchema: z.ZodNativeEnum<
  typeof MariadbOneApplicationStatus
> = MariadbOneApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneApplicationStatus$ {
  /** @deprecated use `MariadbOneApplicationStatus$inboundSchema` instead. */
  export const inboundSchema = MariadbOneApplicationStatus$inboundSchema;
  /** @deprecated use `MariadbOneApplicationStatus$outboundSchema` instead. */
  export const outboundSchema = MariadbOneApplicationStatus$outboundSchema;
}

/** @internal */
export const MariadbOneBackupType$inboundSchema: z.ZodNativeEnum<
  typeof MariadbOneBackupType
> = z.nativeEnum(MariadbOneBackupType);

/** @internal */
export const MariadbOneBackupType$outboundSchema: z.ZodNativeEnum<
  typeof MariadbOneBackupType
> = MariadbOneBackupType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneBackupType$ {
  /** @deprecated use `MariadbOneBackupType$inboundSchema` instead. */
  export const inboundSchema = MariadbOneBackupType$inboundSchema;
  /** @deprecated use `MariadbOneBackupType$outboundSchema` instead. */
  export const outboundSchema = MariadbOneBackupType$outboundSchema;
}

/** @internal */
export const MariadbOneDatabaseType$inboundSchema: z.ZodNativeEnum<
  typeof MariadbOneDatabaseType
> = z.nativeEnum(MariadbOneDatabaseType);

/** @internal */
export const MariadbOneDatabaseType$outboundSchema: z.ZodNativeEnum<
  typeof MariadbOneDatabaseType
> = MariadbOneDatabaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneDatabaseType$ {
  /** @deprecated use `MariadbOneDatabaseType$inboundSchema` instead. */
  export const inboundSchema = MariadbOneDatabaseType$inboundSchema;
  /** @deprecated use `MariadbOneDatabaseType$outboundSchema` instead. */
  export const outboundSchema = MariadbOneDatabaseType$outboundSchema;
}

/** @internal */
export const MariadbOneMetadataEnum$inboundSchema: z.ZodNativeEnum<
  typeof MariadbOneMetadataEnum
> = z.nativeEnum(MariadbOneMetadataEnum);

/** @internal */
export const MariadbOneMetadataEnum$outboundSchema: z.ZodNativeEnum<
  typeof MariadbOneMetadataEnum
> = MariadbOneMetadataEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneMetadataEnum$ {
  /** @deprecated use `MariadbOneMetadataEnum$inboundSchema` instead. */
  export const inboundSchema = MariadbOneMetadataEnum$inboundSchema;
  /** @deprecated use `MariadbOneMetadataEnum$outboundSchema` instead. */
  export const outboundSchema = MariadbOneMetadataEnum$outboundSchema;
}

/** @internal */
export const MariadbOneMariadb$inboundSchema: z.ZodType<
  MariadbOneMariadb,
  z.ZodTypeDef,
  unknown
> = z.object({
  databasePassword: z.string(),
  databaseUser: z.string(),
});

/** @internal */
export type MariadbOneMariadb$Outbound = {
  databasePassword: string;
  databaseUser: string;
};

/** @internal */
export const MariadbOneMariadb$outboundSchema: z.ZodType<
  MariadbOneMariadb$Outbound,
  z.ZodTypeDef,
  MariadbOneMariadb
> = z.object({
  databasePassword: z.string(),
  databaseUser: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneMariadb$ {
  /** @deprecated use `MariadbOneMariadb$inboundSchema` instead. */
  export const inboundSchema = MariadbOneMariadb$inboundSchema;
  /** @deprecated use `MariadbOneMariadb$outboundSchema` instead. */
  export const outboundSchema = MariadbOneMariadb$outboundSchema;
  /** @deprecated use `MariadbOneMariadb$Outbound` instead. */
  export type Outbound = MariadbOneMariadb$Outbound;
}

export function mariadbOneMariadbToJSON(
  mariadbOneMariadb: MariadbOneMariadb,
): string {
  return JSON.stringify(
    MariadbOneMariadb$outboundSchema.parse(mariadbOneMariadb),
  );
}

export function mariadbOneMariadbFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOneMariadb, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOneMariadb$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOneMariadb' from JSON`,
  );
}

/** @internal */
export const MariadbOneMongo$inboundSchema: z.ZodType<
  MariadbOneMongo,
  z.ZodTypeDef,
  unknown
> = z.object({
  databasePassword: z.string(),
  databaseUser: z.string(),
});

/** @internal */
export type MariadbOneMongo$Outbound = {
  databasePassword: string;
  databaseUser: string;
};

/** @internal */
export const MariadbOneMongo$outboundSchema: z.ZodType<
  MariadbOneMongo$Outbound,
  z.ZodTypeDef,
  MariadbOneMongo
> = z.object({
  databasePassword: z.string(),
  databaseUser: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneMongo$ {
  /** @deprecated use `MariadbOneMongo$inboundSchema` instead. */
  export const inboundSchema = MariadbOneMongo$inboundSchema;
  /** @deprecated use `MariadbOneMongo$outboundSchema` instead. */
  export const outboundSchema = MariadbOneMongo$outboundSchema;
  /** @deprecated use `MariadbOneMongo$Outbound` instead. */
  export type Outbound = MariadbOneMongo$Outbound;
}

export function mariadbOneMongoToJSON(
  mariadbOneMongo: MariadbOneMongo,
): string {
  return JSON.stringify(MariadbOneMongo$outboundSchema.parse(mariadbOneMongo));
}

export function mariadbOneMongoFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOneMongo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOneMongo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOneMongo' from JSON`,
  );
}

/** @internal */
export const MariadbOneMysql$inboundSchema: z.ZodType<
  MariadbOneMysql,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseRootPassword: z.string(),
});

/** @internal */
export type MariadbOneMysql$Outbound = {
  databaseRootPassword: string;
};

/** @internal */
export const MariadbOneMysql$outboundSchema: z.ZodType<
  MariadbOneMysql$Outbound,
  z.ZodTypeDef,
  MariadbOneMysql
> = z.object({
  databaseRootPassword: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneMysql$ {
  /** @deprecated use `MariadbOneMysql$inboundSchema` instead. */
  export const inboundSchema = MariadbOneMysql$inboundSchema;
  /** @deprecated use `MariadbOneMysql$outboundSchema` instead. */
  export const outboundSchema = MariadbOneMysql$outboundSchema;
  /** @deprecated use `MariadbOneMysql$Outbound` instead. */
  export type Outbound = MariadbOneMysql$Outbound;
}

export function mariadbOneMysqlToJSON(
  mariadbOneMysql: MariadbOneMysql,
): string {
  return JSON.stringify(MariadbOneMysql$outboundSchema.parse(mariadbOneMysql));
}

export function mariadbOneMysqlFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOneMysql, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOneMysql$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOneMysql' from JSON`,
  );
}

/** @internal */
export const MariadbOnePostgres$inboundSchema: z.ZodType<
  MariadbOnePostgres,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseUser: z.string(),
});

/** @internal */
export type MariadbOnePostgres$Outbound = {
  databaseUser: string;
};

/** @internal */
export const MariadbOnePostgres$outboundSchema: z.ZodType<
  MariadbOnePostgres$Outbound,
  z.ZodTypeDef,
  MariadbOnePostgres
> = z.object({
  databaseUser: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOnePostgres$ {
  /** @deprecated use `MariadbOnePostgres$inboundSchema` instead. */
  export const inboundSchema = MariadbOnePostgres$inboundSchema;
  /** @deprecated use `MariadbOnePostgres$outboundSchema` instead. */
  export const outboundSchema = MariadbOnePostgres$outboundSchema;
  /** @deprecated use `MariadbOnePostgres$Outbound` instead. */
  export type Outbound = MariadbOnePostgres$Outbound;
}

export function mariadbOnePostgresToJSON(
  mariadbOnePostgres: MariadbOnePostgres,
): string {
  return JSON.stringify(
    MariadbOnePostgres$outboundSchema.parse(mariadbOnePostgres),
  );
}

export function mariadbOnePostgresFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOnePostgres, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOnePostgres$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOnePostgres' from JSON`,
  );
}

/** @internal */
export const MariadbOneMetadata$inboundSchema: z.ZodType<
  MariadbOneMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  mariadb: z.lazy(() => MariadbOneMariadb$inboundSchema).optional(),
  mongo: z.lazy(() => MariadbOneMongo$inboundSchema).optional(),
  mysql: z.lazy(() => MariadbOneMysql$inboundSchema).optional(),
  postgres: z.lazy(() => MariadbOnePostgres$inboundSchema).optional(),
});

/** @internal */
export type MariadbOneMetadata$Outbound = {
  mariadb?: MariadbOneMariadb$Outbound | undefined;
  mongo?: MariadbOneMongo$Outbound | undefined;
  mysql?: MariadbOneMysql$Outbound | undefined;
  postgres?: MariadbOnePostgres$Outbound | undefined;
};

/** @internal */
export const MariadbOneMetadata$outboundSchema: z.ZodType<
  MariadbOneMetadata$Outbound,
  z.ZodTypeDef,
  MariadbOneMetadata
> = z.object({
  mariadb: z.lazy(() => MariadbOneMariadb$outboundSchema).optional(),
  mongo: z.lazy(() => MariadbOneMongo$outboundSchema).optional(),
  mysql: z.lazy(() => MariadbOneMysql$outboundSchema).optional(),
  postgres: z.lazy(() => MariadbOnePostgres$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneMetadata$ {
  /** @deprecated use `MariadbOneMetadata$inboundSchema` instead. */
  export const inboundSchema = MariadbOneMetadata$inboundSchema;
  /** @deprecated use `MariadbOneMetadata$outboundSchema` instead. */
  export const outboundSchema = MariadbOneMetadata$outboundSchema;
  /** @deprecated use `MariadbOneMetadata$Outbound` instead. */
  export type Outbound = MariadbOneMetadata$Outbound;
}

export function mariadbOneMetadataToJSON(
  mariadbOneMetadata: MariadbOneMetadata,
): string {
  return JSON.stringify(
    MariadbOneMetadata$outboundSchema.parse(mariadbOneMetadata),
  );
}

export function mariadbOneMetadataFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOneMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOneMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOneMetadata' from JSON`,
  );
}

/** @internal */
export const MariadbOneMetadataUnion$inboundSchema: z.ZodType<
  MariadbOneMetadataUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => MariadbOneMetadata$inboundSchema),
  MariadbOneMetadataEnum$inboundSchema,
]);

/** @internal */
export type MariadbOneMetadataUnion$Outbound =
  | MariadbOneMetadata$Outbound
  | string;

/** @internal */
export const MariadbOneMetadataUnion$outboundSchema: z.ZodType<
  MariadbOneMetadataUnion$Outbound,
  z.ZodTypeDef,
  MariadbOneMetadataUnion
> = z.union([
  z.lazy(() => MariadbOneMetadata$outboundSchema),
  MariadbOneMetadataEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneMetadataUnion$ {
  /** @deprecated use `MariadbOneMetadataUnion$inboundSchema` instead. */
  export const inboundSchema = MariadbOneMetadataUnion$inboundSchema;
  /** @deprecated use `MariadbOneMetadataUnion$outboundSchema` instead. */
  export const outboundSchema = MariadbOneMetadataUnion$outboundSchema;
  /** @deprecated use `MariadbOneMetadataUnion$Outbound` instead. */
  export type Outbound = MariadbOneMetadataUnion$Outbound;
}

export function mariadbOneMetadataUnionToJSON(
  mariadbOneMetadataUnion: MariadbOneMetadataUnion,
): string {
  return JSON.stringify(
    MariadbOneMetadataUnion$outboundSchema.parse(mariadbOneMetadataUnion),
  );
}

export function mariadbOneMetadataUnionFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOneMetadataUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOneMetadataUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOneMetadataUnion' from JSON`,
  );
}

/** @internal */
export const MariadbOneBackup$inboundSchema: z.ZodType<
  MariadbOneBackup,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  backupId: z.string(),
  backupType: MariadbOneBackupType$inboundSchema,
  composeId: z.nullable(z.string()),
  database: z.string(),
  databaseType: MariadbOneDatabaseType$inboundSchema,
  destinationId: z.string(),
  enabled: z.nullable(z.boolean()),
  keepLatestCount: z.nullable(z.number()),
  mariadbId: z.nullable(z.string()),
  metadata: z.nullable(
    z.union([
      z.lazy(() => MariadbOneMetadata$inboundSchema),
      MariadbOneMetadataEnum$inboundSchema,
    ]),
  ).optional(),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  prefix: z.string(),
  schedule: z.string(),
  serviceName: z.nullable(z.string()),
  userId: z.nullable(z.string()),
});

/** @internal */
export type MariadbOneBackup$Outbound = {
  appName: string;
  backupId: string;
  backupType: string;
  composeId: string | null;
  database: string;
  databaseType: string;
  destinationId: string;
  enabled: boolean | null;
  keepLatestCount: number | null;
  mariadbId: string | null;
  metadata?: MariadbOneMetadata$Outbound | string | null | undefined;
  mongoId: string | null;
  mysqlId: string | null;
  postgresId: string | null;
  prefix: string;
  schedule: string;
  serviceName: string | null;
  userId: string | null;
};

/** @internal */
export const MariadbOneBackup$outboundSchema: z.ZodType<
  MariadbOneBackup$Outbound,
  z.ZodTypeDef,
  MariadbOneBackup
> = z.object({
  appName: z.string(),
  backupId: z.string(),
  backupType: MariadbOneBackupType$outboundSchema,
  composeId: z.nullable(z.string()),
  database: z.string(),
  databaseType: MariadbOneDatabaseType$outboundSchema,
  destinationId: z.string(),
  enabled: z.nullable(z.boolean()),
  keepLatestCount: z.nullable(z.number()),
  mariadbId: z.nullable(z.string()),
  metadata: z.nullable(
    z.union([
      z.lazy(() => MariadbOneMetadata$outboundSchema),
      MariadbOneMetadataEnum$outboundSchema,
    ]),
  ).optional(),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  prefix: z.string(),
  schedule: z.string(),
  serviceName: z.nullable(z.string()),
  userId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneBackup$ {
  /** @deprecated use `MariadbOneBackup$inboundSchema` instead. */
  export const inboundSchema = MariadbOneBackup$inboundSchema;
  /** @deprecated use `MariadbOneBackup$outboundSchema` instead. */
  export const outboundSchema = MariadbOneBackup$outboundSchema;
  /** @deprecated use `MariadbOneBackup$Outbound` instead. */
  export type Outbound = MariadbOneBackup$Outbound;
}

export function mariadbOneBackupToJSON(
  mariadbOneBackup: MariadbOneBackup,
): string {
  return JSON.stringify(
    MariadbOneBackup$outboundSchema.parse(mariadbOneBackup),
  );
}

export function mariadbOneBackupFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOneBackup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOneBackup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOneBackup' from JSON`,
  );
}

/** @internal */
export const MariadbOneProject$inboundSchema: z.ZodType<
  MariadbOneProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/** @internal */
export type MariadbOneProject$Outbound = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

/** @internal */
export const MariadbOneProject$outboundSchema: z.ZodType<
  MariadbOneProject$Outbound,
  z.ZodTypeDef,
  MariadbOneProject
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneProject$ {
  /** @deprecated use `MariadbOneProject$inboundSchema` instead. */
  export const inboundSchema = MariadbOneProject$inboundSchema;
  /** @deprecated use `MariadbOneProject$outboundSchema` instead. */
  export const outboundSchema = MariadbOneProject$outboundSchema;
  /** @deprecated use `MariadbOneProject$Outbound` instead. */
  export type Outbound = MariadbOneProject$Outbound;
}

export function mariadbOneProjectToJSON(
  mariadbOneProject: MariadbOneProject,
): string {
  return JSON.stringify(
    MariadbOneProject$outboundSchema.parse(mariadbOneProject),
  );
}

export function mariadbOneProjectFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOneProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOneProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOneProject' from JSON`,
  );
}

/** @internal */
export const MariadbOneEnvironment$inboundSchema: z.ZodType<
  MariadbOneEnvironment,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  name: z.string(),
  project: z.lazy(() => MariadbOneProject$inboundSchema),
  projectId: z.string(),
});

/** @internal */
export type MariadbOneEnvironment$Outbound = {
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  name: string;
  project: MariadbOneProject$Outbound;
  projectId: string;
};

/** @internal */
export const MariadbOneEnvironment$outboundSchema: z.ZodType<
  MariadbOneEnvironment$Outbound,
  z.ZodTypeDef,
  MariadbOneEnvironment
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  name: z.string(),
  project: z.lazy(() => MariadbOneProject$outboundSchema),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneEnvironment$ {
  /** @deprecated use `MariadbOneEnvironment$inboundSchema` instead. */
  export const inboundSchema = MariadbOneEnvironment$inboundSchema;
  /** @deprecated use `MariadbOneEnvironment$outboundSchema` instead. */
  export const outboundSchema = MariadbOneEnvironment$outboundSchema;
  /** @deprecated use `MariadbOneEnvironment$Outbound` instead. */
  export type Outbound = MariadbOneEnvironment$Outbound;
}

export function mariadbOneEnvironmentToJSON(
  mariadbOneEnvironment: MariadbOneEnvironment,
): string {
  return JSON.stringify(
    MariadbOneEnvironment$outboundSchema.parse(mariadbOneEnvironment),
  );
}

export function mariadbOneEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOneEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOneEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOneEnvironment' from JSON`,
  );
}

/** @internal */
export const MariadbOneHealthCheckSwarm$inboundSchema: z.ZodType<
  MariadbOneHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Interval: z.number().optional(),
  Retries: z.number().optional(),
  StartPeriod: z.number().optional(),
  Test: z.array(z.string()).optional(),
  Timeout: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Interval": "interval",
    "Retries": "retries",
    "StartPeriod": "startPeriod",
    "Test": "test",
    "Timeout": "timeout",
  });
});

/** @internal */
export type MariadbOneHealthCheckSwarm$Outbound = {
  Interval?: number | undefined;
  Retries?: number | undefined;
  StartPeriod?: number | undefined;
  Test?: Array<string> | undefined;
  Timeout?: number | undefined;
};

/** @internal */
export const MariadbOneHealthCheckSwarm$outboundSchema: z.ZodType<
  MariadbOneHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  MariadbOneHealthCheckSwarm
> = z.object({
  interval: z.number().optional(),
  retries: z.number().optional(),
  startPeriod: z.number().optional(),
  test: z.array(z.string()).optional(),
  timeout: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    interval: "Interval",
    retries: "Retries",
    startPeriod: "StartPeriod",
    test: "Test",
    timeout: "Timeout",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneHealthCheckSwarm$ {
  /** @deprecated use `MariadbOneHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema = MariadbOneHealthCheckSwarm$inboundSchema;
  /** @deprecated use `MariadbOneHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema = MariadbOneHealthCheckSwarm$outboundSchema;
  /** @deprecated use `MariadbOneHealthCheckSwarm$Outbound` instead. */
  export type Outbound = MariadbOneHealthCheckSwarm$Outbound;
}

export function mariadbOneHealthCheckSwarmToJSON(
  mariadbOneHealthCheckSwarm: MariadbOneHealthCheckSwarm,
): string {
  return JSON.stringify(
    MariadbOneHealthCheckSwarm$outboundSchema.parse(mariadbOneHealthCheckSwarm),
  );
}

export function mariadbOneHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOneHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOneHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOneHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbOneGlobal$inboundSchema: z.ZodType<
  MariadbOneGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MariadbOneGlobal$Outbound = {};

/** @internal */
export const MariadbOneGlobal$outboundSchema: z.ZodType<
  MariadbOneGlobal$Outbound,
  z.ZodTypeDef,
  MariadbOneGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneGlobal$ {
  /** @deprecated use `MariadbOneGlobal$inboundSchema` instead. */
  export const inboundSchema = MariadbOneGlobal$inboundSchema;
  /** @deprecated use `MariadbOneGlobal$outboundSchema` instead. */
  export const outboundSchema = MariadbOneGlobal$outboundSchema;
  /** @deprecated use `MariadbOneGlobal$Outbound` instead. */
  export type Outbound = MariadbOneGlobal$Outbound;
}

export function mariadbOneGlobalToJSON(
  mariadbOneGlobal: MariadbOneGlobal,
): string {
  return JSON.stringify(
    MariadbOneGlobal$outboundSchema.parse(mariadbOneGlobal),
  );
}

export function mariadbOneGlobalFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOneGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOneGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOneGlobal' from JSON`,
  );
}

/** @internal */
export const MariadbOneGlobalJob$inboundSchema: z.ZodType<
  MariadbOneGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MariadbOneGlobalJob$Outbound = {};

/** @internal */
export const MariadbOneGlobalJob$outboundSchema: z.ZodType<
  MariadbOneGlobalJob$Outbound,
  z.ZodTypeDef,
  MariadbOneGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneGlobalJob$ {
  /** @deprecated use `MariadbOneGlobalJob$inboundSchema` instead. */
  export const inboundSchema = MariadbOneGlobalJob$inboundSchema;
  /** @deprecated use `MariadbOneGlobalJob$outboundSchema` instead. */
  export const outboundSchema = MariadbOneGlobalJob$outboundSchema;
  /** @deprecated use `MariadbOneGlobalJob$Outbound` instead. */
  export type Outbound = MariadbOneGlobalJob$Outbound;
}

export function mariadbOneGlobalJobToJSON(
  mariadbOneGlobalJob: MariadbOneGlobalJob,
): string {
  return JSON.stringify(
    MariadbOneGlobalJob$outboundSchema.parse(mariadbOneGlobalJob),
  );
}

export function mariadbOneGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOneGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOneGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOneGlobalJob' from JSON`,
  );
}

/** @internal */
export const MariadbOneReplicated$inboundSchema: z.ZodType<
  MariadbOneReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type MariadbOneReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const MariadbOneReplicated$outboundSchema: z.ZodType<
  MariadbOneReplicated$Outbound,
  z.ZodTypeDef,
  MariadbOneReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneReplicated$ {
  /** @deprecated use `MariadbOneReplicated$inboundSchema` instead. */
  export const inboundSchema = MariadbOneReplicated$inboundSchema;
  /** @deprecated use `MariadbOneReplicated$outboundSchema` instead. */
  export const outboundSchema = MariadbOneReplicated$outboundSchema;
  /** @deprecated use `MariadbOneReplicated$Outbound` instead. */
  export type Outbound = MariadbOneReplicated$Outbound;
}

export function mariadbOneReplicatedToJSON(
  mariadbOneReplicated: MariadbOneReplicated,
): string {
  return JSON.stringify(
    MariadbOneReplicated$outboundSchema.parse(mariadbOneReplicated),
  );
}

export function mariadbOneReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOneReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOneReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOneReplicated' from JSON`,
  );
}

/** @internal */
export const MariadbOneReplicatedJob$inboundSchema: z.ZodType<
  MariadbOneReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type MariadbOneReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const MariadbOneReplicatedJob$outboundSchema: z.ZodType<
  MariadbOneReplicatedJob$Outbound,
  z.ZodTypeDef,
  MariadbOneReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneReplicatedJob$ {
  /** @deprecated use `MariadbOneReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = MariadbOneReplicatedJob$inboundSchema;
  /** @deprecated use `MariadbOneReplicatedJob$outboundSchema` instead. */
  export const outboundSchema = MariadbOneReplicatedJob$outboundSchema;
  /** @deprecated use `MariadbOneReplicatedJob$Outbound` instead. */
  export type Outbound = MariadbOneReplicatedJob$Outbound;
}

export function mariadbOneReplicatedJobToJSON(
  mariadbOneReplicatedJob: MariadbOneReplicatedJob,
): string {
  return JSON.stringify(
    MariadbOneReplicatedJob$outboundSchema.parse(mariadbOneReplicatedJob),
  );
}

export function mariadbOneReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOneReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOneReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOneReplicatedJob' from JSON`,
  );
}

/** @internal */
export const MariadbOneModeSwarm$inboundSchema: z.ZodType<
  MariadbOneModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Global: z.lazy(() => MariadbOneGlobal$inboundSchema).optional(),
  GlobalJob: z.lazy(() => MariadbOneGlobalJob$inboundSchema).optional(),
  Replicated: z.lazy(() => MariadbOneReplicated$inboundSchema).optional(),
  ReplicatedJob: z.lazy(() => MariadbOneReplicatedJob$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Global": "global",
    "GlobalJob": "globalJob",
    "Replicated": "replicated",
    "ReplicatedJob": "replicatedJob",
  });
});

/** @internal */
export type MariadbOneModeSwarm$Outbound = {
  Global?: MariadbOneGlobal$Outbound | undefined;
  GlobalJob?: MariadbOneGlobalJob$Outbound | undefined;
  Replicated?: MariadbOneReplicated$Outbound | undefined;
  ReplicatedJob?: MariadbOneReplicatedJob$Outbound | undefined;
};

/** @internal */
export const MariadbOneModeSwarm$outboundSchema: z.ZodType<
  MariadbOneModeSwarm$Outbound,
  z.ZodTypeDef,
  MariadbOneModeSwarm
> = z.object({
  global: z.lazy(() => MariadbOneGlobal$outboundSchema).optional(),
  globalJob: z.lazy(() => MariadbOneGlobalJob$outboundSchema).optional(),
  replicated: z.lazy(() => MariadbOneReplicated$outboundSchema).optional(),
  replicatedJob: z.lazy(() => MariadbOneReplicatedJob$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    global: "Global",
    globalJob: "GlobalJob",
    replicated: "Replicated",
    replicatedJob: "ReplicatedJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneModeSwarm$ {
  /** @deprecated use `MariadbOneModeSwarm$inboundSchema` instead. */
  export const inboundSchema = MariadbOneModeSwarm$inboundSchema;
  /** @deprecated use `MariadbOneModeSwarm$outboundSchema` instead. */
  export const outboundSchema = MariadbOneModeSwarm$outboundSchema;
  /** @deprecated use `MariadbOneModeSwarm$Outbound` instead. */
  export type Outbound = MariadbOneModeSwarm$Outbound;
}

export function mariadbOneModeSwarmToJSON(
  mariadbOneModeSwarm: MariadbOneModeSwarm,
): string {
  return JSON.stringify(
    MariadbOneModeSwarm$outboundSchema.parse(mariadbOneModeSwarm),
  );
}

export function mariadbOneModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOneModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOneModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOneModeSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbOneServiceType$inboundSchema: z.ZodNativeEnum<
  typeof MariadbOneServiceType
> = z.nativeEnum(MariadbOneServiceType);

/** @internal */
export const MariadbOneServiceType$outboundSchema: z.ZodNativeEnum<
  typeof MariadbOneServiceType
> = MariadbOneServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneServiceType$ {
  /** @deprecated use `MariadbOneServiceType$inboundSchema` instead. */
  export const inboundSchema = MariadbOneServiceType$inboundSchema;
  /** @deprecated use `MariadbOneServiceType$outboundSchema` instead. */
  export const outboundSchema = MariadbOneServiceType$outboundSchema;
}

/** @internal */
export const MariadbOneType$inboundSchema: z.ZodNativeEnum<
  typeof MariadbOneType
> = z.nativeEnum(MariadbOneType);

/** @internal */
export const MariadbOneType$outboundSchema: z.ZodNativeEnum<
  typeof MariadbOneType
> = MariadbOneType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneType$ {
  /** @deprecated use `MariadbOneType$inboundSchema` instead. */
  export const inboundSchema = MariadbOneType$inboundSchema;
  /** @deprecated use `MariadbOneType$outboundSchema` instead. */
  export const outboundSchema = MariadbOneType$outboundSchema;
}

/** @internal */
export const MariadbOneMount$inboundSchema: z.ZodType<
  MariadbOneMount,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  content: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  hostPath: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mountId: z.string(),
  mountPath: z.string(),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  serviceType: MariadbOneServiceType$inboundSchema,
  type: MariadbOneType$inboundSchema,
  volumeName: z.nullable(z.string()),
});

/** @internal */
export type MariadbOneMount$Outbound = {
  applicationId: string | null;
  composeId: string | null;
  content: string | null;
  filePath: string | null;
  hostPath: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mountId: string;
  mountPath: string;
  mysqlId: string | null;
  postgresId: string | null;
  redisId: string | null;
  serviceType: string;
  type: string;
  volumeName: string | null;
};

/** @internal */
export const MariadbOneMount$outboundSchema: z.ZodType<
  MariadbOneMount$Outbound,
  z.ZodTypeDef,
  MariadbOneMount
> = z.object({
  applicationId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  content: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  hostPath: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mountId: z.string(),
  mountPath: z.string(),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  serviceType: MariadbOneServiceType$outboundSchema,
  type: MariadbOneType$outboundSchema,
  volumeName: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneMount$ {
  /** @deprecated use `MariadbOneMount$inboundSchema` instead. */
  export const inboundSchema = MariadbOneMount$inboundSchema;
  /** @deprecated use `MariadbOneMount$outboundSchema` instead. */
  export const outboundSchema = MariadbOneMount$outboundSchema;
  /** @deprecated use `MariadbOneMount$Outbound` instead. */
  export type Outbound = MariadbOneMount$Outbound;
}

export function mariadbOneMountToJSON(
  mariadbOneMount: MariadbOneMount,
): string {
  return JSON.stringify(MariadbOneMount$outboundSchema.parse(mariadbOneMount));
}

export function mariadbOneMountFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOneMount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOneMount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOneMount' from JSON`,
  );
}

/** @internal */
export const MariadbOneDriverOpts$inboundSchema: z.ZodType<
  MariadbOneDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MariadbOneDriverOpts$Outbound = {};

/** @internal */
export const MariadbOneDriverOpts$outboundSchema: z.ZodType<
  MariadbOneDriverOpts$Outbound,
  z.ZodTypeDef,
  MariadbOneDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneDriverOpts$ {
  /** @deprecated use `MariadbOneDriverOpts$inboundSchema` instead. */
  export const inboundSchema = MariadbOneDriverOpts$inboundSchema;
  /** @deprecated use `MariadbOneDriverOpts$outboundSchema` instead. */
  export const outboundSchema = MariadbOneDriverOpts$outboundSchema;
  /** @deprecated use `MariadbOneDriverOpts$Outbound` instead. */
  export type Outbound = MariadbOneDriverOpts$Outbound;
}

export function mariadbOneDriverOptsToJSON(
  mariadbOneDriverOpts: MariadbOneDriverOpts,
): string {
  return JSON.stringify(
    MariadbOneDriverOpts$outboundSchema.parse(mariadbOneDriverOpts),
  );
}

export function mariadbOneDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOneDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOneDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOneDriverOpts' from JSON`,
  );
}

/** @internal */
export const MariadbOneNetworkSwarm$inboundSchema: z.ZodType<
  MariadbOneNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => MariadbOneDriverOpts$inboundSchema).optional(),
  Target: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
    "Target": "target",
  });
});

/** @internal */
export type MariadbOneNetworkSwarm$Outbound = {
  Aliases?: Array<string> | undefined;
  DriverOpts?: MariadbOneDriverOpts$Outbound | undefined;
  Target?: string | undefined;
};

/** @internal */
export const MariadbOneNetworkSwarm$outboundSchema: z.ZodType<
  MariadbOneNetworkSwarm$Outbound,
  z.ZodTypeDef,
  MariadbOneNetworkSwarm
> = z.object({
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => MariadbOneDriverOpts$outboundSchema).optional(),
  target: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    aliases: "Aliases",
    driverOpts: "DriverOpts",
    target: "Target",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneNetworkSwarm$ {
  /** @deprecated use `MariadbOneNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = MariadbOneNetworkSwarm$inboundSchema;
  /** @deprecated use `MariadbOneNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = MariadbOneNetworkSwarm$outboundSchema;
  /** @deprecated use `MariadbOneNetworkSwarm$Outbound` instead. */
  export type Outbound = MariadbOneNetworkSwarm$Outbound;
}

export function mariadbOneNetworkSwarmToJSON(
  mariadbOneNetworkSwarm: MariadbOneNetworkSwarm,
): string {
  return JSON.stringify(
    MariadbOneNetworkSwarm$outboundSchema.parse(mariadbOneNetworkSwarm),
  );
}

export function mariadbOneNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOneNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOneNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOneNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbOnePlatform$inboundSchema: z.ZodType<
  MariadbOnePlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type MariadbOnePlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const MariadbOnePlatform$outboundSchema: z.ZodType<
  MariadbOnePlatform$Outbound,
  z.ZodTypeDef,
  MariadbOnePlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOnePlatform$ {
  /** @deprecated use `MariadbOnePlatform$inboundSchema` instead. */
  export const inboundSchema = MariadbOnePlatform$inboundSchema;
  /** @deprecated use `MariadbOnePlatform$outboundSchema` instead. */
  export const outboundSchema = MariadbOnePlatform$outboundSchema;
  /** @deprecated use `MariadbOnePlatform$Outbound` instead. */
  export type Outbound = MariadbOnePlatform$Outbound;
}

export function mariadbOnePlatformToJSON(
  mariadbOnePlatform: MariadbOnePlatform,
): string {
  return JSON.stringify(
    MariadbOnePlatform$outboundSchema.parse(mariadbOnePlatform),
  );
}

export function mariadbOnePlatformFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOnePlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOnePlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOnePlatform' from JSON`,
  );
}

/** @internal */
export const MariadbOneSpread$inboundSchema: z.ZodType<
  MariadbOneSpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type MariadbOneSpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const MariadbOneSpread$outboundSchema: z.ZodType<
  MariadbOneSpread$Outbound,
  z.ZodTypeDef,
  MariadbOneSpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneSpread$ {
  /** @deprecated use `MariadbOneSpread$inboundSchema` instead. */
  export const inboundSchema = MariadbOneSpread$inboundSchema;
  /** @deprecated use `MariadbOneSpread$outboundSchema` instead. */
  export const outboundSchema = MariadbOneSpread$outboundSchema;
  /** @deprecated use `MariadbOneSpread$Outbound` instead. */
  export type Outbound = MariadbOneSpread$Outbound;
}

export function mariadbOneSpreadToJSON(
  mariadbOneSpread: MariadbOneSpread,
): string {
  return JSON.stringify(
    MariadbOneSpread$outboundSchema.parse(mariadbOneSpread),
  );
}

export function mariadbOneSpreadFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOneSpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOneSpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOneSpread' from JSON`,
  );
}

/** @internal */
export const MariadbOnePreference$inboundSchema: z.ZodType<
  MariadbOnePreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => MariadbOneSpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type MariadbOnePreference$Outbound = {
  Spread: MariadbOneSpread$Outbound;
};

/** @internal */
export const MariadbOnePreference$outboundSchema: z.ZodType<
  MariadbOnePreference$Outbound,
  z.ZodTypeDef,
  MariadbOnePreference
> = z.object({
  spread: z.lazy(() => MariadbOneSpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOnePreference$ {
  /** @deprecated use `MariadbOnePreference$inboundSchema` instead. */
  export const inboundSchema = MariadbOnePreference$inboundSchema;
  /** @deprecated use `MariadbOnePreference$outboundSchema` instead. */
  export const outboundSchema = MariadbOnePreference$outboundSchema;
  /** @deprecated use `MariadbOnePreference$Outbound` instead. */
  export type Outbound = MariadbOnePreference$Outbound;
}

export function mariadbOnePreferenceToJSON(
  mariadbOnePreference: MariadbOnePreference,
): string {
  return JSON.stringify(
    MariadbOnePreference$outboundSchema.parse(mariadbOnePreference),
  );
}

export function mariadbOnePreferenceFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOnePreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOnePreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOnePreference' from JSON`,
  );
}

/** @internal */
export const MariadbOnePlacementSwarm$inboundSchema: z.ZodType<
  MariadbOnePlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => MariadbOnePlatform$inboundSchema)).optional(),
  Preferences: z.array(z.lazy(() => MariadbOnePreference$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
    "Preferences": "preferences",
  });
});

/** @internal */
export type MariadbOnePlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<MariadbOnePlatform$Outbound> | undefined;
  Preferences?: Array<MariadbOnePreference$Outbound> | undefined;
};

/** @internal */
export const MariadbOnePlacementSwarm$outboundSchema: z.ZodType<
  MariadbOnePlacementSwarm$Outbound,
  z.ZodTypeDef,
  MariadbOnePlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => MariadbOnePlatform$outboundSchema))
    .optional(),
  preferences: z.array(z.lazy(() => MariadbOnePreference$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
    preferences: "Preferences",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOnePlacementSwarm$ {
  /** @deprecated use `MariadbOnePlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = MariadbOnePlacementSwarm$inboundSchema;
  /** @deprecated use `MariadbOnePlacementSwarm$outboundSchema` instead. */
  export const outboundSchema = MariadbOnePlacementSwarm$outboundSchema;
  /** @deprecated use `MariadbOnePlacementSwarm$Outbound` instead. */
  export type Outbound = MariadbOnePlacementSwarm$Outbound;
}

export function mariadbOnePlacementSwarmToJSON(
  mariadbOnePlacementSwarm: MariadbOnePlacementSwarm,
): string {
  return JSON.stringify(
    MariadbOnePlacementSwarm$outboundSchema.parse(mariadbOnePlacementSwarm),
  );
}

export function mariadbOnePlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOnePlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOnePlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOnePlacementSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbOneRestartPolicySwarm$inboundSchema: z.ZodType<
  MariadbOneRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type MariadbOneRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const MariadbOneRestartPolicySwarm$outboundSchema: z.ZodType<
  MariadbOneRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  MariadbOneRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneRestartPolicySwarm$ {
  /** @deprecated use `MariadbOneRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema = MariadbOneRestartPolicySwarm$inboundSchema;
  /** @deprecated use `MariadbOneRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema = MariadbOneRestartPolicySwarm$outboundSchema;
  /** @deprecated use `MariadbOneRestartPolicySwarm$Outbound` instead. */
  export type Outbound = MariadbOneRestartPolicySwarm$Outbound;
}

export function mariadbOneRestartPolicySwarmToJSON(
  mariadbOneRestartPolicySwarm: MariadbOneRestartPolicySwarm,
): string {
  return JSON.stringify(
    MariadbOneRestartPolicySwarm$outboundSchema.parse(
      mariadbOneRestartPolicySwarm,
    ),
  );
}

export function mariadbOneRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOneRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOneRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOneRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const MariadbOneRollbackConfigSwarm$inboundSchema: z.ZodType<
  MariadbOneRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  MaxFailureRatio: z.number().optional(),
  Monitor: z.number().optional(),
  Order: z.string(),
  Parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    "Delay": "delay",
    "FailureAction": "failureAction",
    "MaxFailureRatio": "maxFailureRatio",
    "Monitor": "monitor",
    "Order": "order",
    "Parallelism": "parallelism",
  });
});

/** @internal */
export type MariadbOneRollbackConfigSwarm$Outbound = {
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  MaxFailureRatio?: number | undefined;
  Monitor?: number | undefined;
  Order: string;
  Parallelism: number;
};

/** @internal */
export const MariadbOneRollbackConfigSwarm$outboundSchema: z.ZodType<
  MariadbOneRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  MariadbOneRollbackConfigSwarm
> = z.object({
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  maxFailureRatio: z.number().optional(),
  monitor: z.number().optional(),
  order: z.string(),
  parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    delay: "Delay",
    failureAction: "FailureAction",
    maxFailureRatio: "MaxFailureRatio",
    monitor: "Monitor",
    order: "Order",
    parallelism: "Parallelism",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneRollbackConfigSwarm$ {
  /** @deprecated use `MariadbOneRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MariadbOneRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `MariadbOneRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MariadbOneRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `MariadbOneRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = MariadbOneRollbackConfigSwarm$Outbound;
}

export function mariadbOneRollbackConfigSwarmToJSON(
  mariadbOneRollbackConfigSwarm: MariadbOneRollbackConfigSwarm,
): string {
  return JSON.stringify(
    MariadbOneRollbackConfigSwarm$outboundSchema.parse(
      mariadbOneRollbackConfigSwarm,
    ),
  );
}

export function mariadbOneRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOneRollbackConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOneRollbackConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOneRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbOneMetricsConfigEnum$inboundSchema: z.ZodNativeEnum<
  typeof MariadbOneMetricsConfigEnum
> = z.nativeEnum(MariadbOneMetricsConfigEnum);

/** @internal */
export const MariadbOneMetricsConfigEnum$outboundSchema: z.ZodNativeEnum<
  typeof MariadbOneMetricsConfigEnum
> = MariadbOneMetricsConfigEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneMetricsConfigEnum$ {
  /** @deprecated use `MariadbOneMetricsConfigEnum$inboundSchema` instead. */
  export const inboundSchema = MariadbOneMetricsConfigEnum$inboundSchema;
  /** @deprecated use `MariadbOneMetricsConfigEnum$outboundSchema` instead. */
  export const outboundSchema = MariadbOneMetricsConfigEnum$outboundSchema;
}

/** @internal */
export const MariadbOneMetricsConfigUnion1$inboundSchema: z.ZodType<
  MariadbOneMetricsConfigUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  MariadbOneMetricsConfigEnum$inboundSchema,
]);

/** @internal */
export type MariadbOneMetricsConfigUnion1$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const MariadbOneMetricsConfigUnion1$outboundSchema: z.ZodType<
  MariadbOneMetricsConfigUnion1$Outbound,
  z.ZodTypeDef,
  MariadbOneMetricsConfigUnion1
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  MariadbOneMetricsConfigEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneMetricsConfigUnion1$ {
  /** @deprecated use `MariadbOneMetricsConfigUnion1$inboundSchema` instead. */
  export const inboundSchema = MariadbOneMetricsConfigUnion1$inboundSchema;
  /** @deprecated use `MariadbOneMetricsConfigUnion1$outboundSchema` instead. */
  export const outboundSchema = MariadbOneMetricsConfigUnion1$outboundSchema;
  /** @deprecated use `MariadbOneMetricsConfigUnion1$Outbound` instead. */
  export type Outbound = MariadbOneMetricsConfigUnion1$Outbound;
}

export function mariadbOneMetricsConfigUnion1ToJSON(
  mariadbOneMetricsConfigUnion1: MariadbOneMetricsConfigUnion1,
): string {
  return JSON.stringify(
    MariadbOneMetricsConfigUnion1$outboundSchema.parse(
      mariadbOneMetricsConfigUnion1,
    ),
  );
}

export function mariadbOneMetricsConfigUnion1FromJSON(
  jsonString: string,
): SafeParseResult<MariadbOneMetricsConfigUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOneMetricsConfigUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOneMetricsConfigUnion1' from JSON`,
  );
}

/** @internal */
export const MariadbOneMetricsConfigUnion2$inboundSchema: z.ZodType<
  MariadbOneMetricsConfigUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    MariadbOneMetricsConfigEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type MariadbOneMetricsConfigUnion2$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const MariadbOneMetricsConfigUnion2$outboundSchema: z.ZodType<
  MariadbOneMetricsConfigUnion2$Outbound,
  z.ZodTypeDef,
  MariadbOneMetricsConfigUnion2
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    MariadbOneMetricsConfigEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneMetricsConfigUnion2$ {
  /** @deprecated use `MariadbOneMetricsConfigUnion2$inboundSchema` instead. */
  export const inboundSchema = MariadbOneMetricsConfigUnion2$inboundSchema;
  /** @deprecated use `MariadbOneMetricsConfigUnion2$outboundSchema` instead. */
  export const outboundSchema = MariadbOneMetricsConfigUnion2$outboundSchema;
  /** @deprecated use `MariadbOneMetricsConfigUnion2$Outbound` instead. */
  export type Outbound = MariadbOneMetricsConfigUnion2$Outbound;
}

export function mariadbOneMetricsConfigUnion2ToJSON(
  mariadbOneMetricsConfigUnion2: MariadbOneMetricsConfigUnion2,
): string {
  return JSON.stringify(
    MariadbOneMetricsConfigUnion2$outboundSchema.parse(
      mariadbOneMetricsConfigUnion2,
    ),
  );
}

export function mariadbOneMetricsConfigUnion2FromJSON(
  jsonString: string,
): SafeParseResult<MariadbOneMetricsConfigUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOneMetricsConfigUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOneMetricsConfigUnion2' from JSON`,
  );
}

/** @internal */
export const MariadbOneServerStatus$inboundSchema: z.ZodNativeEnum<
  typeof MariadbOneServerStatus
> = z.nativeEnum(MariadbOneServerStatus);

/** @internal */
export const MariadbOneServerStatus$outboundSchema: z.ZodNativeEnum<
  typeof MariadbOneServerStatus
> = MariadbOneServerStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneServerStatus$ {
  /** @deprecated use `MariadbOneServerStatus$inboundSchema` instead. */
  export const inboundSchema = MariadbOneServerStatus$inboundSchema;
  /** @deprecated use `MariadbOneServerStatus$outboundSchema` instead. */
  export const outboundSchema = MariadbOneServerStatus$outboundSchema;
}

/** @internal */
export const MariadbOneServer$inboundSchema: z.ZodType<
  MariadbOneServer,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  command: z.string(),
  createdAt: z.string(),
  description: z.nullable(z.string()),
  enableDockerCleanup: z.boolean(),
  ipAddress: z.string(),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      MariadbOneMetricsConfigEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
  name: z.string(),
  organizationId: z.string(),
  port: z.number(),
  serverId: z.string(),
  serverStatus: MariadbOneServerStatus$inboundSchema,
  sshKeyId: z.nullable(z.string()),
  username: z.string(),
});

/** @internal */
export type MariadbOneServer$Outbound = {
  appName: string;
  command: string;
  createdAt: string;
  description: string | null;
  enableDockerCleanup: boolean;
  ipAddress: string;
  metricsConfig: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  };
  name: string;
  organizationId: string;
  port: number;
  serverId: string;
  serverStatus: string;
  sshKeyId: string | null;
  username: string;
};

/** @internal */
export const MariadbOneServer$outboundSchema: z.ZodType<
  MariadbOneServer$Outbound,
  z.ZodTypeDef,
  MariadbOneServer
> = z.object({
  appName: z.string(),
  command: z.string(),
  createdAt: z.string(),
  description: z.nullable(z.string()),
  enableDockerCleanup: z.boolean(),
  ipAddress: z.string(),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      MariadbOneMetricsConfigEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
  name: z.string(),
  organizationId: z.string(),
  port: z.number(),
  serverId: z.string(),
  serverStatus: MariadbOneServerStatus$outboundSchema,
  sshKeyId: z.nullable(z.string()),
  username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneServer$ {
  /** @deprecated use `MariadbOneServer$inboundSchema` instead. */
  export const inboundSchema = MariadbOneServer$inboundSchema;
  /** @deprecated use `MariadbOneServer$outboundSchema` instead. */
  export const outboundSchema = MariadbOneServer$outboundSchema;
  /** @deprecated use `MariadbOneServer$Outbound` instead. */
  export type Outbound = MariadbOneServer$Outbound;
}

export function mariadbOneServerToJSON(
  mariadbOneServer: MariadbOneServer,
): string {
  return JSON.stringify(
    MariadbOneServer$outboundSchema.parse(mariadbOneServer),
  );
}

export function mariadbOneServerFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOneServer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOneServer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOneServer' from JSON`,
  );
}

/** @internal */
export const MariadbOneUpdateConfigSwarm$inboundSchema: z.ZodType<
  MariadbOneUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  MaxFailureRatio: z.number().optional(),
  Monitor: z.number().optional(),
  Order: z.string(),
  Parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    "Delay": "delay",
    "FailureAction": "failureAction",
    "MaxFailureRatio": "maxFailureRatio",
    "Monitor": "monitor",
    "Order": "order",
    "Parallelism": "parallelism",
  });
});

/** @internal */
export type MariadbOneUpdateConfigSwarm$Outbound = {
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  MaxFailureRatio?: number | undefined;
  Monitor?: number | undefined;
  Order: string;
  Parallelism: number;
};

/** @internal */
export const MariadbOneUpdateConfigSwarm$outboundSchema: z.ZodType<
  MariadbOneUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  MariadbOneUpdateConfigSwarm
> = z.object({
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  maxFailureRatio: z.number().optional(),
  monitor: z.number().optional(),
  order: z.string(),
  parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    delay: "Delay",
    failureAction: "FailureAction",
    maxFailureRatio: "MaxFailureRatio",
    monitor: "Monitor",
    order: "Order",
    parallelism: "Parallelism",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneUpdateConfigSwarm$ {
  /** @deprecated use `MariadbOneUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MariadbOneUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `MariadbOneUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MariadbOneUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `MariadbOneUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = MariadbOneUpdateConfigSwarm$Outbound;
}

export function mariadbOneUpdateConfigSwarmToJSON(
  mariadbOneUpdateConfigSwarm: MariadbOneUpdateConfigSwarm,
): string {
  return JSON.stringify(
    MariadbOneUpdateConfigSwarm$outboundSchema.parse(
      mariadbOneUpdateConfigSwarm,
    ),
  );
}

export function mariadbOneUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOneUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOneUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOneUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MariadbOneResponseBody$inboundSchema: z.ZodType<
  MariadbOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  applicationStatus: MariadbOneApplicationStatus$inboundSchema,
  backups: z.array(z.lazy(() => MariadbOneBackup$inboundSchema)),
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databaseName: z.string(),
  databasePassword: z.string(),
  databaseRootPassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environment: z.lazy(() => MariadbOneEnvironment$inboundSchema),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.lazy(() => MariadbOneHealthCheckSwarm$inboundSchema),
  ),
  labelsSwarm: z.nullable(z.record(z.string())),
  mariadbId: z.string(),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(z.lazy(() => MariadbOneModeSwarm$inboundSchema)),
  mounts: z.array(z.lazy(() => MariadbOneMount$inboundSchema)),
  name: z.string(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MariadbOneNetworkSwarm$inboundSchema)),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => MariadbOnePlacementSwarm$inboundSchema),
  ),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MariadbOneRestartPolicySwarm$inboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MariadbOneRollbackConfigSwarm$inboundSchema),
  ),
  server: z.nullable(z.lazy(() => MariadbOneServer$inboundSchema)),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MariadbOneUpdateConfigSwarm$inboundSchema),
  ),
});

/** @internal */
export type MariadbOneResponseBody$Outbound = {
  appName: string;
  applicationStatus: string;
  backups: Array<MariadbOneBackup$Outbound>;
  command: string | null;
  cpuLimit: string | null;
  cpuReservation: string | null;
  createdAt: string;
  databaseName: string;
  databasePassword: string;
  databaseRootPassword: string;
  databaseUser: string;
  description: string | null;
  dockerImage: string;
  env: string | null;
  environment: MariadbOneEnvironment$Outbound;
  environmentId: string;
  externalPort: number | null;
  healthCheckSwarm: MariadbOneHealthCheckSwarm$Outbound | null;
  labelsSwarm: { [k: string]: string } | null;
  mariadbId: string;
  memoryLimit: string | null;
  memoryReservation: string | null;
  modeSwarm: MariadbOneModeSwarm$Outbound | null;
  mounts: Array<MariadbOneMount$Outbound>;
  name: string;
  networkSwarm: Array<MariadbOneNetworkSwarm$Outbound> | null;
  placementSwarm: MariadbOnePlacementSwarm$Outbound | null;
  replicas: number;
  restartPolicySwarm: MariadbOneRestartPolicySwarm$Outbound | null;
  rollbackConfigSwarm: MariadbOneRollbackConfigSwarm$Outbound | null;
  server: MariadbOneServer$Outbound | null;
  serverId: string | null;
  updateConfigSwarm: MariadbOneUpdateConfigSwarm$Outbound | null;
};

/** @internal */
export const MariadbOneResponseBody$outboundSchema: z.ZodType<
  MariadbOneResponseBody$Outbound,
  z.ZodTypeDef,
  MariadbOneResponseBody
> = z.object({
  appName: z.string(),
  applicationStatus: MariadbOneApplicationStatus$outboundSchema,
  backups: z.array(z.lazy(() => MariadbOneBackup$outboundSchema)),
  command: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  createdAt: z.string(),
  databaseName: z.string(),
  databasePassword: z.string(),
  databaseRootPassword: z.string(),
  databaseUser: z.string(),
  description: z.nullable(z.string()),
  dockerImage: z.string(),
  env: z.nullable(z.string()),
  environment: z.lazy(() => MariadbOneEnvironment$outboundSchema),
  environmentId: z.string(),
  externalPort: z.nullable(z.number()),
  healthCheckSwarm: z.nullable(
    z.lazy(() => MariadbOneHealthCheckSwarm$outboundSchema),
  ),
  labelsSwarm: z.nullable(z.record(z.string())),
  mariadbId: z.string(),
  memoryLimit: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  modeSwarm: z.nullable(z.lazy(() => MariadbOneModeSwarm$outboundSchema)),
  mounts: z.array(z.lazy(() => MariadbOneMount$outboundSchema)),
  name: z.string(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MariadbOneNetworkSwarm$outboundSchema)),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => MariadbOnePlacementSwarm$outboundSchema),
  ),
  replicas: z.number(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MariadbOneRestartPolicySwarm$outboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MariadbOneRollbackConfigSwarm$outboundSchema),
  ),
  server: z.nullable(z.lazy(() => MariadbOneServer$outboundSchema)),
  serverId: z.nullable(z.string()),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MariadbOneUpdateConfigSwarm$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneResponseBody$ {
  /** @deprecated use `MariadbOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = MariadbOneResponseBody$inboundSchema;
  /** @deprecated use `MariadbOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = MariadbOneResponseBody$outboundSchema;
  /** @deprecated use `MariadbOneResponseBody$Outbound` instead. */
  export type Outbound = MariadbOneResponseBody$Outbound;
}

export function mariadbOneResponseBodyToJSON(
  mariadbOneResponseBody: MariadbOneResponseBody,
): string {
  return JSON.stringify(
    MariadbOneResponseBody$outboundSchema.parse(mariadbOneResponseBody),
  );
}

export function mariadbOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOneResponseBody' from JSON`,
  );
}

/** @internal */
export const MariadbOneResponse$inboundSchema: z.ZodType<
  MariadbOneResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => MariadbOneResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type MariadbOneResponse$Outbound =
  | MariadbOneResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const MariadbOneResponse$outboundSchema: z.ZodType<
  MariadbOneResponse$Outbound,
  z.ZodTypeDef,
  MariadbOneResponse
> = z.union([
  z.lazy(() => MariadbOneResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbOneResponse$ {
  /** @deprecated use `MariadbOneResponse$inboundSchema` instead. */
  export const inboundSchema = MariadbOneResponse$inboundSchema;
  /** @deprecated use `MariadbOneResponse$outboundSchema` instead. */
  export const outboundSchema = MariadbOneResponse$outboundSchema;
  /** @deprecated use `MariadbOneResponse$Outbound` instead. */
  export type Outbound = MariadbOneResponse$Outbound;
}

export function mariadbOneResponseToJSON(
  mariadbOneResponse: MariadbOneResponse,
): string {
  return JSON.stringify(
    MariadbOneResponse$outboundSchema.parse(mariadbOneResponse),
  );
}

export function mariadbOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<MariadbOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbOneResponse' from JSON`,
  );
}
