/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type OrganizationAllSecurity = {
  authorization: string;
};

export type OrganizationAllResponseBody = {
  createdAt: Date;
  id: string;
  logo: string | null;
  metadata: string | null;
  name: string;
  ownerId: string;
  slug: string | null;
};

export type OrganizationAllResponse =
  | models.ErrorT
  | Array<OrganizationAllResponseBody>;

/** @internal */
export const OrganizationAllSecurity$inboundSchema: z.ZodType<
  OrganizationAllSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type OrganizationAllSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const OrganizationAllSecurity$outboundSchema: z.ZodType<
  OrganizationAllSecurity$Outbound,
  z.ZodTypeDef,
  OrganizationAllSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationAllSecurity$ {
  /** @deprecated use `OrganizationAllSecurity$inboundSchema` instead. */
  export const inboundSchema = OrganizationAllSecurity$inboundSchema;
  /** @deprecated use `OrganizationAllSecurity$outboundSchema` instead. */
  export const outboundSchema = OrganizationAllSecurity$outboundSchema;
  /** @deprecated use `OrganizationAllSecurity$Outbound` instead. */
  export type Outbound = OrganizationAllSecurity$Outbound;
}

export function organizationAllSecurityToJSON(
  organizationAllSecurity: OrganizationAllSecurity,
): string {
  return JSON.stringify(
    OrganizationAllSecurity$outboundSchema.parse(organizationAllSecurity),
  );
}

export function organizationAllSecurityFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationAllSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationAllSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationAllSecurity' from JSON`,
  );
}

/** @internal */
export const OrganizationAllResponseBody$inboundSchema: z.ZodType<
  OrganizationAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  id: z.string(),
  logo: z.nullable(z.string()),
  metadata: z.nullable(z.string()),
  name: z.string(),
  ownerId: z.string(),
  slug: z.nullable(z.string()),
});

/** @internal */
export type OrganizationAllResponseBody$Outbound = {
  createdAt: string;
  id: string;
  logo: string | null;
  metadata: string | null;
  name: string;
  ownerId: string;
  slug: string | null;
};

/** @internal */
export const OrganizationAllResponseBody$outboundSchema: z.ZodType<
  OrganizationAllResponseBody$Outbound,
  z.ZodTypeDef,
  OrganizationAllResponseBody
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  id: z.string(),
  logo: z.nullable(z.string()),
  metadata: z.nullable(z.string()),
  name: z.string(),
  ownerId: z.string(),
  slug: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationAllResponseBody$ {
  /** @deprecated use `OrganizationAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = OrganizationAllResponseBody$inboundSchema;
  /** @deprecated use `OrganizationAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = OrganizationAllResponseBody$outboundSchema;
  /** @deprecated use `OrganizationAllResponseBody$Outbound` instead. */
  export type Outbound = OrganizationAllResponseBody$Outbound;
}

export function organizationAllResponseBodyToJSON(
  organizationAllResponseBody: OrganizationAllResponseBody,
): string {
  return JSON.stringify(
    OrganizationAllResponseBody$outboundSchema.parse(
      organizationAllResponseBody,
    ),
  );
}

export function organizationAllResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationAllResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationAllResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationAllResponseBody' from JSON`,
  );
}

/** @internal */
export const OrganizationAllResponse$inboundSchema: z.ZodType<
  OrganizationAllResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ErrorT$inboundSchema,
  z.array(z.lazy(() => OrganizationAllResponseBody$inboundSchema)),
]);

/** @internal */
export type OrganizationAllResponse$Outbound =
  | models.ErrorT$Outbound
  | Array<OrganizationAllResponseBody$Outbound>;

/** @internal */
export const OrganizationAllResponse$outboundSchema: z.ZodType<
  OrganizationAllResponse$Outbound,
  z.ZodTypeDef,
  OrganizationAllResponse
> = z.union([
  models.ErrorT$outboundSchema,
  z.array(z.lazy(() => OrganizationAllResponseBody$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationAllResponse$ {
  /** @deprecated use `OrganizationAllResponse$inboundSchema` instead. */
  export const inboundSchema = OrganizationAllResponse$inboundSchema;
  /** @deprecated use `OrganizationAllResponse$outboundSchema` instead. */
  export const outboundSchema = OrganizationAllResponse$outboundSchema;
  /** @deprecated use `OrganizationAllResponse$Outbound` instead. */
  export type Outbound = OrganizationAllResponse$Outbound;
}

export function organizationAllResponseToJSON(
  organizationAllResponse: OrganizationAllResponse,
): string {
  return JSON.stringify(
    OrganizationAllResponse$outboundSchema.parse(organizationAllResponse),
  );
}

export function organizationAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationAllResponse' from JSON`,
  );
}
