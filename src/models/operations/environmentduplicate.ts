/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type EnvironmentDuplicateSecurity = {
  authorization: string;
};

export type EnvironmentDuplicateRequest = {
  environmentId: string;
  name: string;
  description?: string | null | undefined;
};

/**
 * Successful response
 */
export type EnvironmentDuplicateResponseBody = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
};

export type EnvironmentDuplicateResponse =
  | EnvironmentDuplicateResponseBody
  | models.ErrorT;

/** @internal */
export const EnvironmentDuplicateSecurity$inboundSchema: z.ZodType<
  EnvironmentDuplicateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type EnvironmentDuplicateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const EnvironmentDuplicateSecurity$outboundSchema: z.ZodType<
  EnvironmentDuplicateSecurity$Outbound,
  z.ZodTypeDef,
  EnvironmentDuplicateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentDuplicateSecurity$ {
  /** @deprecated use `EnvironmentDuplicateSecurity$inboundSchema` instead. */
  export const inboundSchema = EnvironmentDuplicateSecurity$inboundSchema;
  /** @deprecated use `EnvironmentDuplicateSecurity$outboundSchema` instead. */
  export const outboundSchema = EnvironmentDuplicateSecurity$outboundSchema;
  /** @deprecated use `EnvironmentDuplicateSecurity$Outbound` instead. */
  export type Outbound = EnvironmentDuplicateSecurity$Outbound;
}

export function environmentDuplicateSecurityToJSON(
  environmentDuplicateSecurity: EnvironmentDuplicateSecurity,
): string {
  return JSON.stringify(
    EnvironmentDuplicateSecurity$outboundSchema.parse(
      environmentDuplicateSecurity,
    ),
  );
}

export function environmentDuplicateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentDuplicateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentDuplicateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentDuplicateSecurity' from JSON`,
  );
}

/** @internal */
export const EnvironmentDuplicateRequest$inboundSchema: z.ZodType<
  EnvironmentDuplicateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()).optional(),
});

/** @internal */
export type EnvironmentDuplicateRequest$Outbound = {
  environmentId: string;
  name: string;
  description?: string | null | undefined;
};

/** @internal */
export const EnvironmentDuplicateRequest$outboundSchema: z.ZodType<
  EnvironmentDuplicateRequest$Outbound,
  z.ZodTypeDef,
  EnvironmentDuplicateRequest
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentDuplicateRequest$ {
  /** @deprecated use `EnvironmentDuplicateRequest$inboundSchema` instead. */
  export const inboundSchema = EnvironmentDuplicateRequest$inboundSchema;
  /** @deprecated use `EnvironmentDuplicateRequest$outboundSchema` instead. */
  export const outboundSchema = EnvironmentDuplicateRequest$outboundSchema;
  /** @deprecated use `EnvironmentDuplicateRequest$Outbound` instead. */
  export type Outbound = EnvironmentDuplicateRequest$Outbound;
}

export function environmentDuplicateRequestToJSON(
  environmentDuplicateRequest: EnvironmentDuplicateRequest,
): string {
  return JSON.stringify(
    EnvironmentDuplicateRequest$outboundSchema.parse(
      environmentDuplicateRequest,
    ),
  );
}

export function environmentDuplicateRequestFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentDuplicateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentDuplicateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentDuplicateRequest' from JSON`,
  );
}

/** @internal */
export const EnvironmentDuplicateResponseBody$inboundSchema: z.ZodType<
  EnvironmentDuplicateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
});

/** @internal */
export type EnvironmentDuplicateResponseBody$Outbound = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
};

/** @internal */
export const EnvironmentDuplicateResponseBody$outboundSchema: z.ZodType<
  EnvironmentDuplicateResponseBody$Outbound,
  z.ZodTypeDef,
  EnvironmentDuplicateResponseBody
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentDuplicateResponseBody$ {
  /** @deprecated use `EnvironmentDuplicateResponseBody$inboundSchema` instead. */
  export const inboundSchema = EnvironmentDuplicateResponseBody$inboundSchema;
  /** @deprecated use `EnvironmentDuplicateResponseBody$outboundSchema` instead. */
  export const outboundSchema = EnvironmentDuplicateResponseBody$outboundSchema;
  /** @deprecated use `EnvironmentDuplicateResponseBody$Outbound` instead. */
  export type Outbound = EnvironmentDuplicateResponseBody$Outbound;
}

export function environmentDuplicateResponseBodyToJSON(
  environmentDuplicateResponseBody: EnvironmentDuplicateResponseBody,
): string {
  return JSON.stringify(
    EnvironmentDuplicateResponseBody$outboundSchema.parse(
      environmentDuplicateResponseBody,
    ),
  );
}

export function environmentDuplicateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentDuplicateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentDuplicateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentDuplicateResponseBody' from JSON`,
  );
}

/** @internal */
export const EnvironmentDuplicateResponse$inboundSchema: z.ZodType<
  EnvironmentDuplicateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => EnvironmentDuplicateResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type EnvironmentDuplicateResponse$Outbound =
  | EnvironmentDuplicateResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const EnvironmentDuplicateResponse$outboundSchema: z.ZodType<
  EnvironmentDuplicateResponse$Outbound,
  z.ZodTypeDef,
  EnvironmentDuplicateResponse
> = z.union([
  z.lazy(() => EnvironmentDuplicateResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentDuplicateResponse$ {
  /** @deprecated use `EnvironmentDuplicateResponse$inboundSchema` instead. */
  export const inboundSchema = EnvironmentDuplicateResponse$inboundSchema;
  /** @deprecated use `EnvironmentDuplicateResponse$outboundSchema` instead. */
  export const outboundSchema = EnvironmentDuplicateResponse$outboundSchema;
  /** @deprecated use `EnvironmentDuplicateResponse$Outbound` instead. */
  export type Outbound = EnvironmentDuplicateResponse$Outbound;
}

export function environmentDuplicateResponseToJSON(
  environmentDuplicateResponse: EnvironmentDuplicateResponse,
): string {
  return JSON.stringify(
    EnvironmentDuplicateResponse$outboundSchema.parse(
      environmentDuplicateResponse,
    ),
  );
}

export function environmentDuplicateResponseFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentDuplicateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentDuplicateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentDuplicateResponse' from JSON`,
  );
}
