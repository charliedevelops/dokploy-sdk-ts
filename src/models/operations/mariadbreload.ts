/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type MariadbReloadSecurity = {
  authorization: string;
};

export type MariadbReloadRequest = {
  mariadbId: string;
  appName: string;
};

export type MariadbReloadResponse = models.ErrorT | boolean;

/** @internal */
export const MariadbReloadSecurity$inboundSchema: z.ZodType<
  MariadbReloadSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type MariadbReloadSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const MariadbReloadSecurity$outboundSchema: z.ZodType<
  MariadbReloadSecurity$Outbound,
  z.ZodTypeDef,
  MariadbReloadSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbReloadSecurity$ {
  /** @deprecated use `MariadbReloadSecurity$inboundSchema` instead. */
  export const inboundSchema = MariadbReloadSecurity$inboundSchema;
  /** @deprecated use `MariadbReloadSecurity$outboundSchema` instead. */
  export const outboundSchema = MariadbReloadSecurity$outboundSchema;
  /** @deprecated use `MariadbReloadSecurity$Outbound` instead. */
  export type Outbound = MariadbReloadSecurity$Outbound;
}

export function mariadbReloadSecurityToJSON(
  mariadbReloadSecurity: MariadbReloadSecurity,
): string {
  return JSON.stringify(
    MariadbReloadSecurity$outboundSchema.parse(mariadbReloadSecurity),
  );
}

export function mariadbReloadSecurityFromJSON(
  jsonString: string,
): SafeParseResult<MariadbReloadSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbReloadSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbReloadSecurity' from JSON`,
  );
}

/** @internal */
export const MariadbReloadRequest$inboundSchema: z.ZodType<
  MariadbReloadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mariadbId: z.string(),
  appName: z.string(),
});

/** @internal */
export type MariadbReloadRequest$Outbound = {
  mariadbId: string;
  appName: string;
};

/** @internal */
export const MariadbReloadRequest$outboundSchema: z.ZodType<
  MariadbReloadRequest$Outbound,
  z.ZodTypeDef,
  MariadbReloadRequest
> = z.object({
  mariadbId: z.string(),
  appName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbReloadRequest$ {
  /** @deprecated use `MariadbReloadRequest$inboundSchema` instead. */
  export const inboundSchema = MariadbReloadRequest$inboundSchema;
  /** @deprecated use `MariadbReloadRequest$outboundSchema` instead. */
  export const outboundSchema = MariadbReloadRequest$outboundSchema;
  /** @deprecated use `MariadbReloadRequest$Outbound` instead. */
  export type Outbound = MariadbReloadRequest$Outbound;
}

export function mariadbReloadRequestToJSON(
  mariadbReloadRequest: MariadbReloadRequest,
): string {
  return JSON.stringify(
    MariadbReloadRequest$outboundSchema.parse(mariadbReloadRequest),
  );
}

export function mariadbReloadRequestFromJSON(
  jsonString: string,
): SafeParseResult<MariadbReloadRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbReloadRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbReloadRequest' from JSON`,
  );
}

/** @internal */
export const MariadbReloadResponse$inboundSchema: z.ZodType<
  MariadbReloadResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.boolean()]);

/** @internal */
export type MariadbReloadResponse$Outbound = models.ErrorT$Outbound | boolean;

/** @internal */
export const MariadbReloadResponse$outboundSchema: z.ZodType<
  MariadbReloadResponse$Outbound,
  z.ZodTypeDef,
  MariadbReloadResponse
> = z.union([models.ErrorT$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbReloadResponse$ {
  /** @deprecated use `MariadbReloadResponse$inboundSchema` instead. */
  export const inboundSchema = MariadbReloadResponse$inboundSchema;
  /** @deprecated use `MariadbReloadResponse$outboundSchema` instead. */
  export const outboundSchema = MariadbReloadResponse$outboundSchema;
  /** @deprecated use `MariadbReloadResponse$Outbound` instead. */
  export type Outbound = MariadbReloadResponse$Outbound;
}

export function mariadbReloadResponseToJSON(
  mariadbReloadResponse: MariadbReloadResponse,
): string {
  return JSON.stringify(
    MariadbReloadResponse$outboundSchema.parse(mariadbReloadResponse),
  );
}

export function mariadbReloadResponseFromJSON(
  jsonString: string,
): SafeParseResult<MariadbReloadResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbReloadResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbReloadResponse' from JSON`,
  );
}
