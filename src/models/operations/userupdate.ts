/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UserUpdateSecurity = {
  authorization: string;
};

export const UserUpdateCertificateType = {
  Letsencrypt: "letsencrypt",
  None: "none",
  Custom: "custom",
} as const;
export type UserUpdateCertificateType = ClosedEnum<
  typeof UserUpdateCertificateType
>;

export type UserUpdateServices = {
  exclude: Array<string>;
  include: Array<string>;
};

export type UserUpdateContainers = {
  refreshRate: number;
  services: UserUpdateServices;
};

export type UserUpdateThresholds = {
  cpu: number;
  memory: number;
};

export const UserUpdateType = {
  Dokploy: "Dokploy",
  Remote: "Remote",
} as const;
export type UserUpdateType = ClosedEnum<typeof UserUpdateType>;

export type UserUpdateServer = {
  cronJob: string;
  port: number;
  refreshRate: number;
  retentionDays: number;
  thresholds: UserUpdateThresholds;
  token: string;
  type: UserUpdateType;
  urlCallback: string;
};

export type UserUpdateMetricsConfig = {
  containers: UserUpdateContainers;
  server: UserUpdateServer;
};

export type UserUpdateRequest = {
  allowImpersonation?: boolean | undefined;
  banExpires?: Date | null | undefined;
  banReason?: string | null | undefined;
  banned?: boolean | null | undefined;
  certificateType?: UserUpdateCertificateType | undefined;
  cleanupCacheApplications?: boolean | undefined;
  cleanupCacheOnCompose?: boolean | undefined;
  cleanupCacheOnPreviews?: boolean | undefined;
  createdAt?: Date | null | undefined;
  createdAt2?: string | undefined;
  currentPassword?: string | undefined;
  email?: string | undefined;
  emailVerified?: boolean | undefined;
  enableDockerCleanup?: boolean | undefined;
  enablePaidFeatures?: boolean | undefined;
  expirationDate?: string | undefined;
  host?: string | null | undefined;
  https?: boolean | undefined;
  id?: string | undefined;
  image?: string | null | undefined;
  isRegistered?: boolean | undefined;
  letsEncryptEmail?: string | null | undefined;
  logCleanupCron?: string | null | undefined;
  metricsConfig?: UserUpdateMetricsConfig | undefined;
  name?: string | undefined;
  password?: string | undefined;
  serverIp?: string | null | undefined;
  serversQuantity?: number | undefined;
  sshPrivateKey?: string | null | undefined;
  stripeCustomerId?: string | null | undefined;
  stripeSubscriptionId?: string | null | undefined;
  twoFactorEnabled?: boolean | null | undefined;
  updatedAt?: Date | undefined;
};

/** @internal */
export const UserUpdateSecurity$inboundSchema: z.ZodType<
  UserUpdateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type UserUpdateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const UserUpdateSecurity$outboundSchema: z.ZodType<
  UserUpdateSecurity$Outbound,
  z.ZodTypeDef,
  UserUpdateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserUpdateSecurity$ {
  /** @deprecated use `UserUpdateSecurity$inboundSchema` instead. */
  export const inboundSchema = UserUpdateSecurity$inboundSchema;
  /** @deprecated use `UserUpdateSecurity$outboundSchema` instead. */
  export const outboundSchema = UserUpdateSecurity$outboundSchema;
  /** @deprecated use `UserUpdateSecurity$Outbound` instead. */
  export type Outbound = UserUpdateSecurity$Outbound;
}

export function userUpdateSecurityToJSON(
  userUpdateSecurity: UserUpdateSecurity,
): string {
  return JSON.stringify(
    UserUpdateSecurity$outboundSchema.parse(userUpdateSecurity),
  );
}

export function userUpdateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UserUpdateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserUpdateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserUpdateSecurity' from JSON`,
  );
}

/** @internal */
export const UserUpdateCertificateType$inboundSchema: z.ZodNativeEnum<
  typeof UserUpdateCertificateType
> = z.nativeEnum(UserUpdateCertificateType);

/** @internal */
export const UserUpdateCertificateType$outboundSchema: z.ZodNativeEnum<
  typeof UserUpdateCertificateType
> = UserUpdateCertificateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserUpdateCertificateType$ {
  /** @deprecated use `UserUpdateCertificateType$inboundSchema` instead. */
  export const inboundSchema = UserUpdateCertificateType$inboundSchema;
  /** @deprecated use `UserUpdateCertificateType$outboundSchema` instead. */
  export const outboundSchema = UserUpdateCertificateType$outboundSchema;
}

/** @internal */
export const UserUpdateServices$inboundSchema: z.ZodType<
  UserUpdateServices,
  z.ZodTypeDef,
  unknown
> = z.object({
  exclude: z.array(z.string()),
  include: z.array(z.string()),
});

/** @internal */
export type UserUpdateServices$Outbound = {
  exclude: Array<string>;
  include: Array<string>;
};

/** @internal */
export const UserUpdateServices$outboundSchema: z.ZodType<
  UserUpdateServices$Outbound,
  z.ZodTypeDef,
  UserUpdateServices
> = z.object({
  exclude: z.array(z.string()),
  include: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserUpdateServices$ {
  /** @deprecated use `UserUpdateServices$inboundSchema` instead. */
  export const inboundSchema = UserUpdateServices$inboundSchema;
  /** @deprecated use `UserUpdateServices$outboundSchema` instead. */
  export const outboundSchema = UserUpdateServices$outboundSchema;
  /** @deprecated use `UserUpdateServices$Outbound` instead. */
  export type Outbound = UserUpdateServices$Outbound;
}

export function userUpdateServicesToJSON(
  userUpdateServices: UserUpdateServices,
): string {
  return JSON.stringify(
    UserUpdateServices$outboundSchema.parse(userUpdateServices),
  );
}

export function userUpdateServicesFromJSON(
  jsonString: string,
): SafeParseResult<UserUpdateServices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserUpdateServices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserUpdateServices' from JSON`,
  );
}

/** @internal */
export const UserUpdateContainers$inboundSchema: z.ZodType<
  UserUpdateContainers,
  z.ZodTypeDef,
  unknown
> = z.object({
  refreshRate: z.number(),
  services: z.lazy(() => UserUpdateServices$inboundSchema),
});

/** @internal */
export type UserUpdateContainers$Outbound = {
  refreshRate: number;
  services: UserUpdateServices$Outbound;
};

/** @internal */
export const UserUpdateContainers$outboundSchema: z.ZodType<
  UserUpdateContainers$Outbound,
  z.ZodTypeDef,
  UserUpdateContainers
> = z.object({
  refreshRate: z.number(),
  services: z.lazy(() => UserUpdateServices$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserUpdateContainers$ {
  /** @deprecated use `UserUpdateContainers$inboundSchema` instead. */
  export const inboundSchema = UserUpdateContainers$inboundSchema;
  /** @deprecated use `UserUpdateContainers$outboundSchema` instead. */
  export const outboundSchema = UserUpdateContainers$outboundSchema;
  /** @deprecated use `UserUpdateContainers$Outbound` instead. */
  export type Outbound = UserUpdateContainers$Outbound;
}

export function userUpdateContainersToJSON(
  userUpdateContainers: UserUpdateContainers,
): string {
  return JSON.stringify(
    UserUpdateContainers$outboundSchema.parse(userUpdateContainers),
  );
}

export function userUpdateContainersFromJSON(
  jsonString: string,
): SafeParseResult<UserUpdateContainers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserUpdateContainers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserUpdateContainers' from JSON`,
  );
}

/** @internal */
export const UserUpdateThresholds$inboundSchema: z.ZodType<
  UserUpdateThresholds,
  z.ZodTypeDef,
  unknown
> = z.object({
  cpu: z.number(),
  memory: z.number(),
});

/** @internal */
export type UserUpdateThresholds$Outbound = {
  cpu: number;
  memory: number;
};

/** @internal */
export const UserUpdateThresholds$outboundSchema: z.ZodType<
  UserUpdateThresholds$Outbound,
  z.ZodTypeDef,
  UserUpdateThresholds
> = z.object({
  cpu: z.number(),
  memory: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserUpdateThresholds$ {
  /** @deprecated use `UserUpdateThresholds$inboundSchema` instead. */
  export const inboundSchema = UserUpdateThresholds$inboundSchema;
  /** @deprecated use `UserUpdateThresholds$outboundSchema` instead. */
  export const outboundSchema = UserUpdateThresholds$outboundSchema;
  /** @deprecated use `UserUpdateThresholds$Outbound` instead. */
  export type Outbound = UserUpdateThresholds$Outbound;
}

export function userUpdateThresholdsToJSON(
  userUpdateThresholds: UserUpdateThresholds,
): string {
  return JSON.stringify(
    UserUpdateThresholds$outboundSchema.parse(userUpdateThresholds),
  );
}

export function userUpdateThresholdsFromJSON(
  jsonString: string,
): SafeParseResult<UserUpdateThresholds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserUpdateThresholds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserUpdateThresholds' from JSON`,
  );
}

/** @internal */
export const UserUpdateType$inboundSchema: z.ZodNativeEnum<
  typeof UserUpdateType
> = z.nativeEnum(UserUpdateType);

/** @internal */
export const UserUpdateType$outboundSchema: z.ZodNativeEnum<
  typeof UserUpdateType
> = UserUpdateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserUpdateType$ {
  /** @deprecated use `UserUpdateType$inboundSchema` instead. */
  export const inboundSchema = UserUpdateType$inboundSchema;
  /** @deprecated use `UserUpdateType$outboundSchema` instead. */
  export const outboundSchema = UserUpdateType$outboundSchema;
}

/** @internal */
export const UserUpdateServer$inboundSchema: z.ZodType<
  UserUpdateServer,
  z.ZodTypeDef,
  unknown
> = z.object({
  cronJob: z.string(),
  port: z.number(),
  refreshRate: z.number(),
  retentionDays: z.number(),
  thresholds: z.lazy(() => UserUpdateThresholds$inboundSchema),
  token: z.string(),
  type: UserUpdateType$inboundSchema,
  urlCallback: z.string(),
});

/** @internal */
export type UserUpdateServer$Outbound = {
  cronJob: string;
  port: number;
  refreshRate: number;
  retentionDays: number;
  thresholds: UserUpdateThresholds$Outbound;
  token: string;
  type: string;
  urlCallback: string;
};

/** @internal */
export const UserUpdateServer$outboundSchema: z.ZodType<
  UserUpdateServer$Outbound,
  z.ZodTypeDef,
  UserUpdateServer
> = z.object({
  cronJob: z.string(),
  port: z.number(),
  refreshRate: z.number(),
  retentionDays: z.number(),
  thresholds: z.lazy(() => UserUpdateThresholds$outboundSchema),
  token: z.string(),
  type: UserUpdateType$outboundSchema,
  urlCallback: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserUpdateServer$ {
  /** @deprecated use `UserUpdateServer$inboundSchema` instead. */
  export const inboundSchema = UserUpdateServer$inboundSchema;
  /** @deprecated use `UserUpdateServer$outboundSchema` instead. */
  export const outboundSchema = UserUpdateServer$outboundSchema;
  /** @deprecated use `UserUpdateServer$Outbound` instead. */
  export type Outbound = UserUpdateServer$Outbound;
}

export function userUpdateServerToJSON(
  userUpdateServer: UserUpdateServer,
): string {
  return JSON.stringify(
    UserUpdateServer$outboundSchema.parse(userUpdateServer),
  );
}

export function userUpdateServerFromJSON(
  jsonString: string,
): SafeParseResult<UserUpdateServer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserUpdateServer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserUpdateServer' from JSON`,
  );
}

/** @internal */
export const UserUpdateMetricsConfig$inboundSchema: z.ZodType<
  UserUpdateMetricsConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  containers: z.lazy(() => UserUpdateContainers$inboundSchema),
  server: z.lazy(() => UserUpdateServer$inboundSchema),
});

/** @internal */
export type UserUpdateMetricsConfig$Outbound = {
  containers: UserUpdateContainers$Outbound;
  server: UserUpdateServer$Outbound;
};

/** @internal */
export const UserUpdateMetricsConfig$outboundSchema: z.ZodType<
  UserUpdateMetricsConfig$Outbound,
  z.ZodTypeDef,
  UserUpdateMetricsConfig
> = z.object({
  containers: z.lazy(() => UserUpdateContainers$outboundSchema),
  server: z.lazy(() => UserUpdateServer$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserUpdateMetricsConfig$ {
  /** @deprecated use `UserUpdateMetricsConfig$inboundSchema` instead. */
  export const inboundSchema = UserUpdateMetricsConfig$inboundSchema;
  /** @deprecated use `UserUpdateMetricsConfig$outboundSchema` instead. */
  export const outboundSchema = UserUpdateMetricsConfig$outboundSchema;
  /** @deprecated use `UserUpdateMetricsConfig$Outbound` instead. */
  export type Outbound = UserUpdateMetricsConfig$Outbound;
}

export function userUpdateMetricsConfigToJSON(
  userUpdateMetricsConfig: UserUpdateMetricsConfig,
): string {
  return JSON.stringify(
    UserUpdateMetricsConfig$outboundSchema.parse(userUpdateMetricsConfig),
  );
}

export function userUpdateMetricsConfigFromJSON(
  jsonString: string,
): SafeParseResult<UserUpdateMetricsConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserUpdateMetricsConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserUpdateMetricsConfig' from JSON`,
  );
}

/** @internal */
export const UserUpdateRequest$inboundSchema: z.ZodType<
  UserUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowImpersonation: z.boolean().optional(),
  banExpires: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  banReason: z.nullable(z.string()).optional(),
  banned: z.nullable(z.boolean()).optional(),
  certificateType: UserUpdateCertificateType$inboundSchema.optional(),
  cleanupCacheApplications: z.boolean().optional(),
  cleanupCacheOnCompose: z.boolean().optional(),
  cleanupCacheOnPreviews: z.boolean().optional(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  createdAt2: z.string().optional(),
  currentPassword: z.string().optional(),
  email: z.string().optional(),
  emailVerified: z.boolean().optional(),
  enableDockerCleanup: z.boolean().optional(),
  enablePaidFeatures: z.boolean().optional(),
  expirationDate: z.string().optional(),
  host: z.nullable(z.string()).optional(),
  https: z.boolean().optional(),
  id: z.string().optional(),
  image: z.nullable(z.string()).optional(),
  isRegistered: z.boolean().optional(),
  letsEncryptEmail: z.nullable(z.string()).optional(),
  logCleanupCron: z.nullable(z.string()).optional(),
  metricsConfig: z.lazy(() => UserUpdateMetricsConfig$inboundSchema).optional(),
  name: z.string().optional(),
  password: z.string().optional(),
  serverIp: z.nullable(z.string()).optional(),
  serversQuantity: z.number().optional(),
  sshPrivateKey: z.nullable(z.string()).optional(),
  stripeCustomerId: z.nullable(z.string()).optional(),
  stripeSubscriptionId: z.nullable(z.string()).optional(),
  twoFactorEnabled: z.nullable(z.boolean()).optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type UserUpdateRequest$Outbound = {
  allowImpersonation?: boolean | undefined;
  banExpires?: string | null | undefined;
  banReason?: string | null | undefined;
  banned?: boolean | null | undefined;
  certificateType?: string | undefined;
  cleanupCacheApplications?: boolean | undefined;
  cleanupCacheOnCompose?: boolean | undefined;
  cleanupCacheOnPreviews?: boolean | undefined;
  createdAt?: string | null | undefined;
  createdAt2?: string | undefined;
  currentPassword?: string | undefined;
  email?: string | undefined;
  emailVerified?: boolean | undefined;
  enableDockerCleanup?: boolean | undefined;
  enablePaidFeatures?: boolean | undefined;
  expirationDate?: string | undefined;
  host?: string | null | undefined;
  https?: boolean | undefined;
  id?: string | undefined;
  image?: string | null | undefined;
  isRegistered?: boolean | undefined;
  letsEncryptEmail?: string | null | undefined;
  logCleanupCron?: string | null | undefined;
  metricsConfig?: UserUpdateMetricsConfig$Outbound | undefined;
  name?: string | undefined;
  password?: string | undefined;
  serverIp?: string | null | undefined;
  serversQuantity?: number | undefined;
  sshPrivateKey?: string | null | undefined;
  stripeCustomerId?: string | null | undefined;
  stripeSubscriptionId?: string | null | undefined;
  twoFactorEnabled?: boolean | null | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const UserUpdateRequest$outboundSchema: z.ZodType<
  UserUpdateRequest$Outbound,
  z.ZodTypeDef,
  UserUpdateRequest
> = z.object({
  allowImpersonation: z.boolean().optional(),
  banExpires: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  banReason: z.nullable(z.string()).optional(),
  banned: z.nullable(z.boolean()).optional(),
  certificateType: UserUpdateCertificateType$outboundSchema.optional(),
  cleanupCacheApplications: z.boolean().optional(),
  cleanupCacheOnCompose: z.boolean().optional(),
  cleanupCacheOnPreviews: z.boolean().optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt2: z.string().optional(),
  currentPassword: z.string().optional(),
  email: z.string().optional(),
  emailVerified: z.boolean().optional(),
  enableDockerCleanup: z.boolean().optional(),
  enablePaidFeatures: z.boolean().optional(),
  expirationDate: z.string().optional(),
  host: z.nullable(z.string()).optional(),
  https: z.boolean().optional(),
  id: z.string().optional(),
  image: z.nullable(z.string()).optional(),
  isRegistered: z.boolean().optional(),
  letsEncryptEmail: z.nullable(z.string()).optional(),
  logCleanupCron: z.nullable(z.string()).optional(),
  metricsConfig: z.lazy(() => UserUpdateMetricsConfig$outboundSchema)
    .optional(),
  name: z.string().optional(),
  password: z.string().optional(),
  serverIp: z.nullable(z.string()).optional(),
  serversQuantity: z.number().optional(),
  sshPrivateKey: z.nullable(z.string()).optional(),
  stripeCustomerId: z.nullable(z.string()).optional(),
  stripeSubscriptionId: z.nullable(z.string()).optional(),
  twoFactorEnabled: z.nullable(z.boolean()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserUpdateRequest$ {
  /** @deprecated use `UserUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = UserUpdateRequest$inboundSchema;
  /** @deprecated use `UserUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = UserUpdateRequest$outboundSchema;
  /** @deprecated use `UserUpdateRequest$Outbound` instead. */
  export type Outbound = UserUpdateRequest$Outbound;
}

export function userUpdateRequestToJSON(
  userUpdateRequest: UserUpdateRequest,
): string {
  return JSON.stringify(
    UserUpdateRequest$outboundSchema.parse(userUpdateRequest),
  );
}

export function userUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<UserUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserUpdateRequest' from JSON`,
  );
}
