/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GitlabTestConnectionSecurity = {
  authorization: string;
};

export type GitlabTestConnectionRequest = {
  gitlabId?: string | undefined;
  groupName?: string | undefined;
};

export type GitlabTestConnectionResponse = models.ErrorT | string;

/** @internal */
export const GitlabTestConnectionSecurity$inboundSchema: z.ZodType<
  GitlabTestConnectionSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type GitlabTestConnectionSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const GitlabTestConnectionSecurity$outboundSchema: z.ZodType<
  GitlabTestConnectionSecurity$Outbound,
  z.ZodTypeDef,
  GitlabTestConnectionSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitlabTestConnectionSecurity$ {
  /** @deprecated use `GitlabTestConnectionSecurity$inboundSchema` instead. */
  export const inboundSchema = GitlabTestConnectionSecurity$inboundSchema;
  /** @deprecated use `GitlabTestConnectionSecurity$outboundSchema` instead. */
  export const outboundSchema = GitlabTestConnectionSecurity$outboundSchema;
  /** @deprecated use `GitlabTestConnectionSecurity$Outbound` instead. */
  export type Outbound = GitlabTestConnectionSecurity$Outbound;
}

export function gitlabTestConnectionSecurityToJSON(
  gitlabTestConnectionSecurity: GitlabTestConnectionSecurity,
): string {
  return JSON.stringify(
    GitlabTestConnectionSecurity$outboundSchema.parse(
      gitlabTestConnectionSecurity,
    ),
  );
}

export function gitlabTestConnectionSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GitlabTestConnectionSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitlabTestConnectionSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitlabTestConnectionSecurity' from JSON`,
  );
}

/** @internal */
export const GitlabTestConnectionRequest$inboundSchema: z.ZodType<
  GitlabTestConnectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  gitlabId: z.string().optional(),
  groupName: z.string().optional(),
});

/** @internal */
export type GitlabTestConnectionRequest$Outbound = {
  gitlabId?: string | undefined;
  groupName?: string | undefined;
};

/** @internal */
export const GitlabTestConnectionRequest$outboundSchema: z.ZodType<
  GitlabTestConnectionRequest$Outbound,
  z.ZodTypeDef,
  GitlabTestConnectionRequest
> = z.object({
  gitlabId: z.string().optional(),
  groupName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitlabTestConnectionRequest$ {
  /** @deprecated use `GitlabTestConnectionRequest$inboundSchema` instead. */
  export const inboundSchema = GitlabTestConnectionRequest$inboundSchema;
  /** @deprecated use `GitlabTestConnectionRequest$outboundSchema` instead. */
  export const outboundSchema = GitlabTestConnectionRequest$outboundSchema;
  /** @deprecated use `GitlabTestConnectionRequest$Outbound` instead. */
  export type Outbound = GitlabTestConnectionRequest$Outbound;
}

export function gitlabTestConnectionRequestToJSON(
  gitlabTestConnectionRequest: GitlabTestConnectionRequest,
): string {
  return JSON.stringify(
    GitlabTestConnectionRequest$outboundSchema.parse(
      gitlabTestConnectionRequest,
    ),
  );
}

export function gitlabTestConnectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GitlabTestConnectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitlabTestConnectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitlabTestConnectionRequest' from JSON`,
  );
}

/** @internal */
export const GitlabTestConnectionResponse$inboundSchema: z.ZodType<
  GitlabTestConnectionResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.string()]);

/** @internal */
export type GitlabTestConnectionResponse$Outbound =
  | models.ErrorT$Outbound
  | string;

/** @internal */
export const GitlabTestConnectionResponse$outboundSchema: z.ZodType<
  GitlabTestConnectionResponse$Outbound,
  z.ZodTypeDef,
  GitlabTestConnectionResponse
> = z.union([models.ErrorT$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitlabTestConnectionResponse$ {
  /** @deprecated use `GitlabTestConnectionResponse$inboundSchema` instead. */
  export const inboundSchema = GitlabTestConnectionResponse$inboundSchema;
  /** @deprecated use `GitlabTestConnectionResponse$outboundSchema` instead. */
  export const outboundSchema = GitlabTestConnectionResponse$outboundSchema;
  /** @deprecated use `GitlabTestConnectionResponse$Outbound` instead. */
  export type Outbound = GitlabTestConnectionResponse$Outbound;
}

export function gitlabTestConnectionResponseToJSON(
  gitlabTestConnectionResponse: GitlabTestConnectionResponse,
): string {
  return JSON.stringify(
    GitlabTestConnectionResponse$outboundSchema.parse(
      gitlabTestConnectionResponse,
    ),
  );
}

export function gitlabTestConnectionResponseFromJSON(
  jsonString: string,
): SafeParseResult<GitlabTestConnectionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitlabTestConnectionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitlabTestConnectionResponse' from JSON`,
  );
}
