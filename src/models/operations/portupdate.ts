/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export const PortUpdateProtocolRequest = {
  Tcp: "tcp",
  Udp: "udp",
} as const;
export type PortUpdateProtocolRequest = ClosedEnum<
  typeof PortUpdateProtocolRequest
>;

export const PortUpdatePublishModeRequest = {
  Ingress: "ingress",
  Host: "host",
} as const;
export type PortUpdatePublishModeRequest = ClosedEnum<
  typeof PortUpdatePublishModeRequest
>;

export type PortUpdateRequest = {
  portId: string;
  protocol?: PortUpdateProtocolRequest | undefined;
  publishMode?: PortUpdatePublishModeRequest | undefined;
  publishedPort: number;
  targetPort: number;
};

export const PortUpdateProtocolResponse = {
  Tcp: "tcp",
  Udp: "udp",
} as const;
export type PortUpdateProtocolResponse = ClosedEnum<
  typeof PortUpdateProtocolResponse
>;

export const PortUpdatePublishModeResponse = {
  Ingress: "ingress",
  Host: "host",
} as const;
export type PortUpdatePublishModeResponse = ClosedEnum<
  typeof PortUpdatePublishModeResponse
>;

/**
 * Successful response
 */
export type PortUpdateResponseBody = {
  applicationId: string;
  portId: string;
  protocol: PortUpdateProtocolResponse;
  publishMode: PortUpdatePublishModeResponse;
  publishedPort: number;
  targetPort: number;
};

export type PortUpdateResponse = PortUpdateResponseBody | models.ErrorT;

/** @internal */
export const PortUpdateProtocolRequest$inboundSchema: z.ZodNativeEnum<
  typeof PortUpdateProtocolRequest
> = z.nativeEnum(PortUpdateProtocolRequest);

/** @internal */
export const PortUpdateProtocolRequest$outboundSchema: z.ZodNativeEnum<
  typeof PortUpdateProtocolRequest
> = PortUpdateProtocolRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortUpdateProtocolRequest$ {
  /** @deprecated use `PortUpdateProtocolRequest$inboundSchema` instead. */
  export const inboundSchema = PortUpdateProtocolRequest$inboundSchema;
  /** @deprecated use `PortUpdateProtocolRequest$outboundSchema` instead. */
  export const outboundSchema = PortUpdateProtocolRequest$outboundSchema;
}

/** @internal */
export const PortUpdatePublishModeRequest$inboundSchema: z.ZodNativeEnum<
  typeof PortUpdatePublishModeRequest
> = z.nativeEnum(PortUpdatePublishModeRequest);

/** @internal */
export const PortUpdatePublishModeRequest$outboundSchema: z.ZodNativeEnum<
  typeof PortUpdatePublishModeRequest
> = PortUpdatePublishModeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortUpdatePublishModeRequest$ {
  /** @deprecated use `PortUpdatePublishModeRequest$inboundSchema` instead. */
  export const inboundSchema = PortUpdatePublishModeRequest$inboundSchema;
  /** @deprecated use `PortUpdatePublishModeRequest$outboundSchema` instead. */
  export const outboundSchema = PortUpdatePublishModeRequest$outboundSchema;
}

/** @internal */
export const PortUpdateRequest$inboundSchema: z.ZodType<
  PortUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  portId: z.string(),
  protocol: PortUpdateProtocolRequest$inboundSchema.default("tcp"),
  publishMode: PortUpdatePublishModeRequest$inboundSchema.default("ingress"),
  publishedPort: z.number(),
  targetPort: z.number(),
});

/** @internal */
export type PortUpdateRequest$Outbound = {
  portId: string;
  protocol: string;
  publishMode: string;
  publishedPort: number;
  targetPort: number;
};

/** @internal */
export const PortUpdateRequest$outboundSchema: z.ZodType<
  PortUpdateRequest$Outbound,
  z.ZodTypeDef,
  PortUpdateRequest
> = z.object({
  portId: z.string(),
  protocol: PortUpdateProtocolRequest$outboundSchema.default("tcp"),
  publishMode: PortUpdatePublishModeRequest$outboundSchema.default("ingress"),
  publishedPort: z.number(),
  targetPort: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortUpdateRequest$ {
  /** @deprecated use `PortUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = PortUpdateRequest$inboundSchema;
  /** @deprecated use `PortUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = PortUpdateRequest$outboundSchema;
  /** @deprecated use `PortUpdateRequest$Outbound` instead. */
  export type Outbound = PortUpdateRequest$Outbound;
}

export function portUpdateRequestToJSON(
  portUpdateRequest: PortUpdateRequest,
): string {
  return JSON.stringify(
    PortUpdateRequest$outboundSchema.parse(portUpdateRequest),
  );
}

export function portUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<PortUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PortUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PortUpdateRequest' from JSON`,
  );
}

/** @internal */
export const PortUpdateProtocolResponse$inboundSchema: z.ZodNativeEnum<
  typeof PortUpdateProtocolResponse
> = z.nativeEnum(PortUpdateProtocolResponse);

/** @internal */
export const PortUpdateProtocolResponse$outboundSchema: z.ZodNativeEnum<
  typeof PortUpdateProtocolResponse
> = PortUpdateProtocolResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortUpdateProtocolResponse$ {
  /** @deprecated use `PortUpdateProtocolResponse$inboundSchema` instead. */
  export const inboundSchema = PortUpdateProtocolResponse$inboundSchema;
  /** @deprecated use `PortUpdateProtocolResponse$outboundSchema` instead. */
  export const outboundSchema = PortUpdateProtocolResponse$outboundSchema;
}

/** @internal */
export const PortUpdatePublishModeResponse$inboundSchema: z.ZodNativeEnum<
  typeof PortUpdatePublishModeResponse
> = z.nativeEnum(PortUpdatePublishModeResponse);

/** @internal */
export const PortUpdatePublishModeResponse$outboundSchema: z.ZodNativeEnum<
  typeof PortUpdatePublishModeResponse
> = PortUpdatePublishModeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortUpdatePublishModeResponse$ {
  /** @deprecated use `PortUpdatePublishModeResponse$inboundSchema` instead. */
  export const inboundSchema = PortUpdatePublishModeResponse$inboundSchema;
  /** @deprecated use `PortUpdatePublishModeResponse$outboundSchema` instead. */
  export const outboundSchema = PortUpdatePublishModeResponse$outboundSchema;
}

/** @internal */
export const PortUpdateResponseBody$inboundSchema: z.ZodType<
  PortUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string(),
  portId: z.string(),
  protocol: PortUpdateProtocolResponse$inboundSchema,
  publishMode: PortUpdatePublishModeResponse$inboundSchema,
  publishedPort: z.number(),
  targetPort: z.number(),
});

/** @internal */
export type PortUpdateResponseBody$Outbound = {
  applicationId: string;
  portId: string;
  protocol: string;
  publishMode: string;
  publishedPort: number;
  targetPort: number;
};

/** @internal */
export const PortUpdateResponseBody$outboundSchema: z.ZodType<
  PortUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  PortUpdateResponseBody
> = z.object({
  applicationId: z.string(),
  portId: z.string(),
  protocol: PortUpdateProtocolResponse$outboundSchema,
  publishMode: PortUpdatePublishModeResponse$outboundSchema,
  publishedPort: z.number(),
  targetPort: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortUpdateResponseBody$ {
  /** @deprecated use `PortUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = PortUpdateResponseBody$inboundSchema;
  /** @deprecated use `PortUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = PortUpdateResponseBody$outboundSchema;
  /** @deprecated use `PortUpdateResponseBody$Outbound` instead. */
  export type Outbound = PortUpdateResponseBody$Outbound;
}

export function portUpdateResponseBodyToJSON(
  portUpdateResponseBody: PortUpdateResponseBody,
): string {
  return JSON.stringify(
    PortUpdateResponseBody$outboundSchema.parse(portUpdateResponseBody),
  );
}

export function portUpdateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PortUpdateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PortUpdateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PortUpdateResponseBody' from JSON`,
  );
}

/** @internal */
export const PortUpdateResponse$inboundSchema: z.ZodType<
  PortUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PortUpdateResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type PortUpdateResponse$Outbound =
  | PortUpdateResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const PortUpdateResponse$outboundSchema: z.ZodType<
  PortUpdateResponse$Outbound,
  z.ZodTypeDef,
  PortUpdateResponse
> = z.union([
  z.lazy(() => PortUpdateResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortUpdateResponse$ {
  /** @deprecated use `PortUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = PortUpdateResponse$inboundSchema;
  /** @deprecated use `PortUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = PortUpdateResponse$outboundSchema;
  /** @deprecated use `PortUpdateResponse$Outbound` instead. */
  export type Outbound = PortUpdateResponse$Outbound;
}

export function portUpdateResponseToJSON(
  portUpdateResponse: PortUpdateResponse,
): string {
  return JSON.stringify(
    PortUpdateResponse$outboundSchema.parse(portUpdateResponse),
  );
}

export function portUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<PortUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PortUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PortUpdateResponse' from JSON`,
  );
}
