/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ApplicationReadTraefikConfigRequest = {
  applicationId: string;
};

/** @internal */
export const ApplicationReadTraefikConfigRequest$inboundSchema: z.ZodType<
  ApplicationReadTraefikConfigRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string(),
});

/** @internal */
export type ApplicationReadTraefikConfigRequest$Outbound = {
  applicationId: string;
};

/** @internal */
export const ApplicationReadTraefikConfigRequest$outboundSchema: z.ZodType<
  ApplicationReadTraefikConfigRequest$Outbound,
  z.ZodTypeDef,
  ApplicationReadTraefikConfigRequest
> = z.object({
  applicationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationReadTraefikConfigRequest$ {
  /** @deprecated use `ApplicationReadTraefikConfigRequest$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationReadTraefikConfigRequest$inboundSchema;
  /** @deprecated use `ApplicationReadTraefikConfigRequest$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationReadTraefikConfigRequest$outboundSchema;
  /** @deprecated use `ApplicationReadTraefikConfigRequest$Outbound` instead. */
  export type Outbound = ApplicationReadTraefikConfigRequest$Outbound;
}

export function applicationReadTraefikConfigRequestToJSON(
  applicationReadTraefikConfigRequest: ApplicationReadTraefikConfigRequest,
): string {
  return JSON.stringify(
    ApplicationReadTraefikConfigRequest$outboundSchema.parse(
      applicationReadTraefikConfigRequest,
    ),
  );
}

export function applicationReadTraefikConfigRequestFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationReadTraefikConfigRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationReadTraefikConfigRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationReadTraefikConfigRequest' from JSON`,
  );
}
