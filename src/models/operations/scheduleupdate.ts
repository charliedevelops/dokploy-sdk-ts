/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ScheduleUpdateScheduleType = {
  Application: "application",
  Compose: "compose",
  Server: "server",
  DokployServer: "dokploy-server",
} as const;
export type ScheduleUpdateScheduleType = ClosedEnum<
  typeof ScheduleUpdateScheduleType
>;

export const ScheduleUpdateShellType = {
  Bash: "bash",
  Sh: "sh",
} as const;
export type ScheduleUpdateShellType = ClosedEnum<
  typeof ScheduleUpdateShellType
>;

export type ScheduleUpdateRequest = {
  appName?: string | undefined;
  applicationId?: string | null | undefined;
  command: string;
  composeId?: string | null | undefined;
  createdAt?: string | undefined;
  cronExpression: string;
  enabled?: boolean | undefined;
  name: string;
  scheduleId: string;
  scheduleType?: ScheduleUpdateScheduleType | undefined;
  script?: string | null | undefined;
  serverId?: string | null | undefined;
  serviceName?: string | null | undefined;
  shellType?: ScheduleUpdateShellType | undefined;
  userId?: string | null | undefined;
};

/** @internal */
export const ScheduleUpdateScheduleType$inboundSchema: z.ZodNativeEnum<
  typeof ScheduleUpdateScheduleType
> = z.nativeEnum(ScheduleUpdateScheduleType);

/** @internal */
export const ScheduleUpdateScheduleType$outboundSchema: z.ZodNativeEnum<
  typeof ScheduleUpdateScheduleType
> = ScheduleUpdateScheduleType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScheduleUpdateScheduleType$ {
  /** @deprecated use `ScheduleUpdateScheduleType$inboundSchema` instead. */
  export const inboundSchema = ScheduleUpdateScheduleType$inboundSchema;
  /** @deprecated use `ScheduleUpdateScheduleType$outboundSchema` instead. */
  export const outboundSchema = ScheduleUpdateScheduleType$outboundSchema;
}

/** @internal */
export const ScheduleUpdateShellType$inboundSchema: z.ZodNativeEnum<
  typeof ScheduleUpdateShellType
> = z.nativeEnum(ScheduleUpdateShellType);

/** @internal */
export const ScheduleUpdateShellType$outboundSchema: z.ZodNativeEnum<
  typeof ScheduleUpdateShellType
> = ScheduleUpdateShellType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScheduleUpdateShellType$ {
  /** @deprecated use `ScheduleUpdateShellType$inboundSchema` instead. */
  export const inboundSchema = ScheduleUpdateShellType$inboundSchema;
  /** @deprecated use `ScheduleUpdateShellType$outboundSchema` instead. */
  export const outboundSchema = ScheduleUpdateShellType$outboundSchema;
}

/** @internal */
export const ScheduleUpdateRequest$inboundSchema: z.ZodType<
  ScheduleUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string().optional(),
  applicationId: z.nullable(z.string()).optional(),
  command: z.string(),
  composeId: z.nullable(z.string()).optional(),
  createdAt: z.string().optional(),
  cronExpression: z.string(),
  enabled: z.boolean().optional(),
  name: z.string(),
  scheduleId: z.string(),
  scheduleType: ScheduleUpdateScheduleType$inboundSchema.optional(),
  script: z.nullable(z.string()).optional(),
  serverId: z.nullable(z.string()).optional(),
  serviceName: z.nullable(z.string()).optional(),
  shellType: ScheduleUpdateShellType$inboundSchema.optional(),
  userId: z.nullable(z.string()).optional(),
});

/** @internal */
export type ScheduleUpdateRequest$Outbound = {
  appName?: string | undefined;
  applicationId?: string | null | undefined;
  command: string;
  composeId?: string | null | undefined;
  createdAt?: string | undefined;
  cronExpression: string;
  enabled?: boolean | undefined;
  name: string;
  scheduleId: string;
  scheduleType?: string | undefined;
  script?: string | null | undefined;
  serverId?: string | null | undefined;
  serviceName?: string | null | undefined;
  shellType?: string | undefined;
  userId?: string | null | undefined;
};

/** @internal */
export const ScheduleUpdateRequest$outboundSchema: z.ZodType<
  ScheduleUpdateRequest$Outbound,
  z.ZodTypeDef,
  ScheduleUpdateRequest
> = z.object({
  appName: z.string().optional(),
  applicationId: z.nullable(z.string()).optional(),
  command: z.string(),
  composeId: z.nullable(z.string()).optional(),
  createdAt: z.string().optional(),
  cronExpression: z.string(),
  enabled: z.boolean().optional(),
  name: z.string(),
  scheduleId: z.string(),
  scheduleType: ScheduleUpdateScheduleType$outboundSchema.optional(),
  script: z.nullable(z.string()).optional(),
  serverId: z.nullable(z.string()).optional(),
  serviceName: z.nullable(z.string()).optional(),
  shellType: ScheduleUpdateShellType$outboundSchema.optional(),
  userId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScheduleUpdateRequest$ {
  /** @deprecated use `ScheduleUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = ScheduleUpdateRequest$inboundSchema;
  /** @deprecated use `ScheduleUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = ScheduleUpdateRequest$outboundSchema;
  /** @deprecated use `ScheduleUpdateRequest$Outbound` instead. */
  export type Outbound = ScheduleUpdateRequest$Outbound;
}

export function scheduleUpdateRequestToJSON(
  scheduleUpdateRequest: ScheduleUpdateRequest,
): string {
  return JSON.stringify(
    ScheduleUpdateRequest$outboundSchema.parse(scheduleUpdateRequest),
  );
}

export function scheduleUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<ScheduleUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScheduleUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScheduleUpdateRequest' from JSON`,
  );
}
