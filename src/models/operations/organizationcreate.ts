/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type OrganizationCreateSecurity = {
  authorization: string;
};

export type OrganizationCreateRequest = {
  name: string;
  logo?: string | undefined;
};

/**
 * Successful response
 */
export type OrganizationCreateResponseBody = {
  id: string;
  name: string;
  slug: string | null;
  logo: string | null;
  createdAt: Date;
  metadata: string | null;
  ownerId: string;
};

export type OrganizationCreateResponse =
  | OrganizationCreateResponseBody
  | models.ErrorT;

/** @internal */
export const OrganizationCreateSecurity$inboundSchema: z.ZodType<
  OrganizationCreateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type OrganizationCreateSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const OrganizationCreateSecurity$outboundSchema: z.ZodType<
  OrganizationCreateSecurity$Outbound,
  z.ZodTypeDef,
  OrganizationCreateSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationCreateSecurity$ {
  /** @deprecated use `OrganizationCreateSecurity$inboundSchema` instead. */
  export const inboundSchema = OrganizationCreateSecurity$inboundSchema;
  /** @deprecated use `OrganizationCreateSecurity$outboundSchema` instead. */
  export const outboundSchema = OrganizationCreateSecurity$outboundSchema;
  /** @deprecated use `OrganizationCreateSecurity$Outbound` instead. */
  export type Outbound = OrganizationCreateSecurity$Outbound;
}

export function organizationCreateSecurityToJSON(
  organizationCreateSecurity: OrganizationCreateSecurity,
): string {
  return JSON.stringify(
    OrganizationCreateSecurity$outboundSchema.parse(organizationCreateSecurity),
  );
}

export function organizationCreateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationCreateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationCreateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationCreateSecurity' from JSON`,
  );
}

/** @internal */
export const OrganizationCreateRequest$inboundSchema: z.ZodType<
  OrganizationCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  logo: z.string().optional(),
});

/** @internal */
export type OrganizationCreateRequest$Outbound = {
  name: string;
  logo?: string | undefined;
};

/** @internal */
export const OrganizationCreateRequest$outboundSchema: z.ZodType<
  OrganizationCreateRequest$Outbound,
  z.ZodTypeDef,
  OrganizationCreateRequest
> = z.object({
  name: z.string(),
  logo: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationCreateRequest$ {
  /** @deprecated use `OrganizationCreateRequest$inboundSchema` instead. */
  export const inboundSchema = OrganizationCreateRequest$inboundSchema;
  /** @deprecated use `OrganizationCreateRequest$outboundSchema` instead. */
  export const outboundSchema = OrganizationCreateRequest$outboundSchema;
  /** @deprecated use `OrganizationCreateRequest$Outbound` instead. */
  export type Outbound = OrganizationCreateRequest$Outbound;
}

export function organizationCreateRequestToJSON(
  organizationCreateRequest: OrganizationCreateRequest,
): string {
  return JSON.stringify(
    OrganizationCreateRequest$outboundSchema.parse(organizationCreateRequest),
  );
}

export function organizationCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationCreateRequest' from JSON`,
  );
}

/** @internal */
export const OrganizationCreateResponseBody$inboundSchema: z.ZodType<
  OrganizationCreateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.nullable(z.string()),
  logo: z.nullable(z.string()),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  metadata: z.nullable(z.string()),
  ownerId: z.string(),
});

/** @internal */
export type OrganizationCreateResponseBody$Outbound = {
  id: string;
  name: string;
  slug: string | null;
  logo: string | null;
  createdAt: string;
  metadata: string | null;
  ownerId: string;
};

/** @internal */
export const OrganizationCreateResponseBody$outboundSchema: z.ZodType<
  OrganizationCreateResponseBody$Outbound,
  z.ZodTypeDef,
  OrganizationCreateResponseBody
> = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.nullable(z.string()),
  logo: z.nullable(z.string()),
  createdAt: z.date().transform(v => v.toISOString()),
  metadata: z.nullable(z.string()),
  ownerId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationCreateResponseBody$ {
  /** @deprecated use `OrganizationCreateResponseBody$inboundSchema` instead. */
  export const inboundSchema = OrganizationCreateResponseBody$inboundSchema;
  /** @deprecated use `OrganizationCreateResponseBody$outboundSchema` instead. */
  export const outboundSchema = OrganizationCreateResponseBody$outboundSchema;
  /** @deprecated use `OrganizationCreateResponseBody$Outbound` instead. */
  export type Outbound = OrganizationCreateResponseBody$Outbound;
}

export function organizationCreateResponseBodyToJSON(
  organizationCreateResponseBody: OrganizationCreateResponseBody,
): string {
  return JSON.stringify(
    OrganizationCreateResponseBody$outboundSchema.parse(
      organizationCreateResponseBody,
    ),
  );
}

export function organizationCreateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationCreateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationCreateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationCreateResponseBody' from JSON`,
  );
}

/** @internal */
export const OrganizationCreateResponse$inboundSchema: z.ZodType<
  OrganizationCreateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => OrganizationCreateResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type OrganizationCreateResponse$Outbound =
  | OrganizationCreateResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const OrganizationCreateResponse$outboundSchema: z.ZodType<
  OrganizationCreateResponse$Outbound,
  z.ZodTypeDef,
  OrganizationCreateResponse
> = z.union([
  z.lazy(() => OrganizationCreateResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationCreateResponse$ {
  /** @deprecated use `OrganizationCreateResponse$inboundSchema` instead. */
  export const inboundSchema = OrganizationCreateResponse$inboundSchema;
  /** @deprecated use `OrganizationCreateResponse$outboundSchema` instead. */
  export const outboundSchema = OrganizationCreateResponse$outboundSchema;
  /** @deprecated use `OrganizationCreateResponse$Outbound` instead. */
  export type Outbound = OrganizationCreateResponse$Outbound;
}

export function organizationCreateResponseToJSON(
  organizationCreateResponse: OrganizationCreateResponse,
): string {
  return JSON.stringify(
    OrganizationCreateResponse$outboundSchema.parse(organizationCreateResponse),
  );
}

export function organizationCreateResponseFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationCreateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationCreateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationCreateResponse' from JSON`,
  );
}
