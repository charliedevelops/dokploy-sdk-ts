/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type SecurityDeleteSecurity = {
  authorization: string;
};

export type SecurityDeleteRequest = {
  securityId: string;
};

/**
 * Successful response
 */
export type SecurityDeleteResponseBody = {
  applicationId: string;
  createdAt: string;
  password: string;
  securityId: string;
  username: string;
};

export type SecurityDeleteResponse = SecurityDeleteResponseBody | models.ErrorT;

/** @internal */
export const SecurityDeleteSecurity$inboundSchema: z.ZodType<
  SecurityDeleteSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type SecurityDeleteSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const SecurityDeleteSecurity$outboundSchema: z.ZodType<
  SecurityDeleteSecurity$Outbound,
  z.ZodTypeDef,
  SecurityDeleteSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SecurityDeleteSecurity$ {
  /** @deprecated use `SecurityDeleteSecurity$inboundSchema` instead. */
  export const inboundSchema = SecurityDeleteSecurity$inboundSchema;
  /** @deprecated use `SecurityDeleteSecurity$outboundSchema` instead. */
  export const outboundSchema = SecurityDeleteSecurity$outboundSchema;
  /** @deprecated use `SecurityDeleteSecurity$Outbound` instead. */
  export type Outbound = SecurityDeleteSecurity$Outbound;
}

export function securityDeleteSecurityToJSON(
  securityDeleteSecurity: SecurityDeleteSecurity,
): string {
  return JSON.stringify(
    SecurityDeleteSecurity$outboundSchema.parse(securityDeleteSecurity),
  );
}

export function securityDeleteSecurityFromJSON(
  jsonString: string,
): SafeParseResult<SecurityDeleteSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SecurityDeleteSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SecurityDeleteSecurity' from JSON`,
  );
}

/** @internal */
export const SecurityDeleteRequest$inboundSchema: z.ZodType<
  SecurityDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  securityId: z.string(),
});

/** @internal */
export type SecurityDeleteRequest$Outbound = {
  securityId: string;
};

/** @internal */
export const SecurityDeleteRequest$outboundSchema: z.ZodType<
  SecurityDeleteRequest$Outbound,
  z.ZodTypeDef,
  SecurityDeleteRequest
> = z.object({
  securityId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SecurityDeleteRequest$ {
  /** @deprecated use `SecurityDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = SecurityDeleteRequest$inboundSchema;
  /** @deprecated use `SecurityDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = SecurityDeleteRequest$outboundSchema;
  /** @deprecated use `SecurityDeleteRequest$Outbound` instead. */
  export type Outbound = SecurityDeleteRequest$Outbound;
}

export function securityDeleteRequestToJSON(
  securityDeleteRequest: SecurityDeleteRequest,
): string {
  return JSON.stringify(
    SecurityDeleteRequest$outboundSchema.parse(securityDeleteRequest),
  );
}

export function securityDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<SecurityDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SecurityDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SecurityDeleteRequest' from JSON`,
  );
}

/** @internal */
export const SecurityDeleteResponseBody$inboundSchema: z.ZodType<
  SecurityDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string(),
  createdAt: z.string(),
  password: z.string(),
  securityId: z.string(),
  username: z.string(),
});

/** @internal */
export type SecurityDeleteResponseBody$Outbound = {
  applicationId: string;
  createdAt: string;
  password: string;
  securityId: string;
  username: string;
};

/** @internal */
export const SecurityDeleteResponseBody$outboundSchema: z.ZodType<
  SecurityDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  SecurityDeleteResponseBody
> = z.object({
  applicationId: z.string(),
  createdAt: z.string(),
  password: z.string(),
  securityId: z.string(),
  username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SecurityDeleteResponseBody$ {
  /** @deprecated use `SecurityDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema = SecurityDeleteResponseBody$inboundSchema;
  /** @deprecated use `SecurityDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema = SecurityDeleteResponseBody$outboundSchema;
  /** @deprecated use `SecurityDeleteResponseBody$Outbound` instead. */
  export type Outbound = SecurityDeleteResponseBody$Outbound;
}

export function securityDeleteResponseBodyToJSON(
  securityDeleteResponseBody: SecurityDeleteResponseBody,
): string {
  return JSON.stringify(
    SecurityDeleteResponseBody$outboundSchema.parse(securityDeleteResponseBody),
  );
}

export function securityDeleteResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<SecurityDeleteResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SecurityDeleteResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SecurityDeleteResponseBody' from JSON`,
  );
}

/** @internal */
export const SecurityDeleteResponse$inboundSchema: z.ZodType<
  SecurityDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => SecurityDeleteResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type SecurityDeleteResponse$Outbound =
  | SecurityDeleteResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const SecurityDeleteResponse$outboundSchema: z.ZodType<
  SecurityDeleteResponse$Outbound,
  z.ZodTypeDef,
  SecurityDeleteResponse
> = z.union([
  z.lazy(() => SecurityDeleteResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SecurityDeleteResponse$ {
  /** @deprecated use `SecurityDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = SecurityDeleteResponse$inboundSchema;
  /** @deprecated use `SecurityDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = SecurityDeleteResponse$outboundSchema;
  /** @deprecated use `SecurityDeleteResponse$Outbound` instead. */
  export type Outbound = SecurityDeleteResponse$Outbound;
}

export function securityDeleteResponseToJSON(
  securityDeleteResponse: SecurityDeleteResponse,
): string {
  return JSON.stringify(
    SecurityDeleteResponse$outboundSchema.parse(securityDeleteResponse),
  );
}

export function securityDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<SecurityDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SecurityDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SecurityDeleteResponse' from JSON`,
  );
}
