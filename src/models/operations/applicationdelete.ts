/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ApplicationDeleteSecurity = {
  authorization: string;
};

export type ApplicationDeleteRequest = {
  applicationId: string;
};

export const ApplicationDeleteApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type ApplicationDeleteApplicationStatus = ClosedEnum<
  typeof ApplicationDeleteApplicationStatus
>;

export type ApplicationDeleteBitbucket = {
  appPassword: string | null;
  bitbucketId: string;
  bitbucketUsername: string | null;
  bitbucketWorkspaceName: string | null;
  gitProviderId: string;
};

export const ApplicationDeleteBuildType = {
  Dockerfile: "dockerfile",
  HerokuBuildpacks: "heroku_buildpacks",
  PaketoBuildpacks: "paketo_buildpacks",
  Nixpacks: "nixpacks",
  Static: "static",
  Railpack: "railpack",
} as const;
export type ApplicationDeleteBuildType = ClosedEnum<
  typeof ApplicationDeleteBuildType
>;

export const ApplicationDeleteStatus = {
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type ApplicationDeleteStatus = ClosedEnum<
  typeof ApplicationDeleteStatus
>;

export type ApplicationDeleteDeployment = {
  applicationId: string | null;
  backupId: string | null;
  composeId: string | null;
  createdAt: string;
  deploymentId: string;
  description: string | null;
  errorMessage: string | null;
  finishedAt: string | null;
  isPreviewDeployment: boolean | null;
  logPath: string;
  pid: string | null;
  previewDeploymentId: string | null;
  rollbackId: string | null;
  scheduleId: string | null;
  serverId: string | null;
  startedAt: string | null;
  status: ApplicationDeleteStatus | null;
  title: string;
  volumeBackupId: string | null;
};

export const ApplicationDeleteCertificateType = {
  Letsencrypt: "letsencrypt",
  None: "none",
  Custom: "custom",
} as const;
export type ApplicationDeleteCertificateType = ClosedEnum<
  typeof ApplicationDeleteCertificateType
>;

export const ApplicationDeleteDomainType = {
  Compose: "compose",
  Application: "application",
  Preview: "preview",
} as const;
export type ApplicationDeleteDomainType = ClosedEnum<
  typeof ApplicationDeleteDomainType
>;

export type ApplicationDeleteDomain = {
  applicationId: string | null;
  certificateType: ApplicationDeleteCertificateType;
  composeId: string | null;
  createdAt: string;
  customCertResolver: string | null;
  domainId: string;
  domainType: ApplicationDeleteDomainType | null;
  host: string;
  https: boolean;
  internalPath: string | null;
  path: string | null;
  port: number | null;
  previewDeploymentId: string | null;
  serviceName: string | null;
  stripPath: boolean;
  uniqueConfigKey: number;
};

export type ApplicationDeleteProject = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

export type ApplicationDeleteEnvironment = {
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  name: string;
  project: ApplicationDeleteProject;
  projectId: string;
};

export type ApplicationDeleteGitea = {
  accessToken: string | null;
  clientId: string | null;
  clientSecret: string | null;
  expiresAt: number | null;
  gitProviderId: string;
  giteaId: string;
  giteaUrl: string;
  lastAuthenticatedAt: number | null;
  redirectUri: string | null;
  refreshToken: string | null;
  scopes: string | null;
};

export type ApplicationDeleteGithub = {
  gitProviderId: string;
  githubAppId: number | null;
  githubAppName: string | null;
  githubClientId: string | null;
  githubClientSecret: string | null;
  githubId: string;
  githubInstallationId: string | null;
  githubPrivateKey: string | null;
  githubWebhookSecret: string | null;
};

export type ApplicationDeleteGitlab = {
  accessToken: string | null;
  applicationId: string | null;
  expiresAt: number | null;
  gitProviderId: string;
  gitlabId: string;
  gitlabUrl: string;
  groupName: string | null;
  redirectUri: string | null;
  refreshToken: string | null;
  secret: string | null;
};

export type ApplicationDeleteHealthCheckSwarm = {
  interval?: number | undefined;
  retries?: number | undefined;
  startPeriod?: number | undefined;
  test?: Array<string> | undefined;
  timeout?: number | undefined;
};

export type ApplicationDeleteGlobal = {};

export type ApplicationDeleteGlobalJob = {};

export type ApplicationDeleteReplicated = {
  replicas?: number | undefined;
};

export type ApplicationDeleteReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type ApplicationDeleteModeSwarm = {
  global?: ApplicationDeleteGlobal | undefined;
  globalJob?: ApplicationDeleteGlobalJob | undefined;
  replicated?: ApplicationDeleteReplicated | undefined;
  replicatedJob?: ApplicationDeleteReplicatedJob | undefined;
};

export const ApplicationDeleteServiceType = {
  Application: "application",
  Postgres: "postgres",
  Mysql: "mysql",
  Mariadb: "mariadb",
  Mongo: "mongo",
  Redis: "redis",
  Compose: "compose",
} as const;
export type ApplicationDeleteServiceType = ClosedEnum<
  typeof ApplicationDeleteServiceType
>;

export const ApplicationDeleteType = {
  Bind: "bind",
  Volume: "volume",
  File: "file",
} as const;
export type ApplicationDeleteType = ClosedEnum<typeof ApplicationDeleteType>;

export type ApplicationDeleteMount = {
  applicationId: string | null;
  composeId: string | null;
  content: string | null;
  filePath: string | null;
  hostPath: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mountId: string;
  mountPath: string;
  mysqlId: string | null;
  postgresId: string | null;
  redisId: string | null;
  serviceType: ApplicationDeleteServiceType;
  type: ApplicationDeleteType;
  volumeName: string | null;
};

export type ApplicationDeleteDriverOpts = {};

export type ApplicationDeleteNetworkSwarm = {
  aliases?: Array<string> | undefined;
  driverOpts?: ApplicationDeleteDriverOpts | undefined;
  target?: string | undefined;
};

export type ApplicationDeletePlatform = {
  architecture: string;
  os: string;
};

export type ApplicationDeleteSpread = {
  spreadDescriptor: string;
};

export type ApplicationDeletePreference = {
  spread: ApplicationDeleteSpread;
};

export type ApplicationDeletePlacementSwarm = {
  constraints?: Array<string> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<ApplicationDeletePlatform> | undefined;
  preferences?: Array<ApplicationDeletePreference> | undefined;
};

export const ApplicationDeleteProtocol = {
  Tcp: "tcp",
  Udp: "udp",
} as const;
export type ApplicationDeleteProtocol = ClosedEnum<
  typeof ApplicationDeleteProtocol
>;

export const ApplicationDeletePublishMode = {
  Ingress: "ingress",
  Host: "host",
} as const;
export type ApplicationDeletePublishMode = ClosedEnum<
  typeof ApplicationDeletePublishMode
>;

export type ApplicationDeletePort = {
  applicationId: string;
  portId: string;
  protocol: ApplicationDeleteProtocol;
  publishMode: ApplicationDeletePublishMode;
  publishedPort: number;
  targetPort: number;
};

export const ApplicationDeletePreviewCertificateType = {
  Letsencrypt: "letsencrypt",
  None: "none",
  Custom: "custom",
} as const;
export type ApplicationDeletePreviewCertificateType = ClosedEnum<
  typeof ApplicationDeletePreviewCertificateType
>;

export const ApplicationDeletePreviewStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type ApplicationDeletePreviewStatus = ClosedEnum<
  typeof ApplicationDeletePreviewStatus
>;

export type ApplicationDeletePreviewDeployment = {
  appName: string;
  applicationId: string;
  branch: string;
  createdAt: string;
  domainId: string | null;
  expiresAt: string | null;
  previewDeploymentId: string;
  previewStatus: ApplicationDeletePreviewStatus;
  pullRequestCommentId: string;
  pullRequestId: string;
  pullRequestNumber: string;
  pullRequestTitle: string;
  pullRequestURL: string;
};

export type ApplicationDeleteRedirect = {
  applicationId: string;
  createdAt: string;
  permanent: boolean;
  redirectId: string;
  regex: string;
  replacement: string;
  uniqueConfigKey: number;
};

export const ApplicationDeleteRegistryType = {
  SelfHosted: "selfHosted",
  Cloud: "cloud",
} as const;
export type ApplicationDeleteRegistryType = ClosedEnum<
  typeof ApplicationDeleteRegistryType
>;

export type ApplicationDeleteRegistry = {
  createdAt: string;
  imagePrefix: string | null;
  organizationId: string;
  password: string;
  registryId: string;
  registryName: string;
  registryType: ApplicationDeleteRegistryType;
  registryUrl: string;
  username: string;
};

export type ApplicationDeleteRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type ApplicationDeleteRollbackConfigSwarm = {
  delay?: number | undefined;
  failureAction?: string | undefined;
  maxFailureRatio?: number | undefined;
  monitor?: number | undefined;
  order: string;
  parallelism: number;
};

export type ApplicationDeleteSecurityResponse = {
  applicationId: string;
  createdAt: string;
  password: string;
  securityId: string;
  username: string;
};

export const ApplicationDeleteMetricsConfigEnum = {
  Null: "null",
} as const;
export type ApplicationDeleteMetricsConfigEnum = ClosedEnum<
  typeof ApplicationDeleteMetricsConfigEnum
>;

export type ApplicationDeleteMetricsConfigUnion1 =
  | string
  | number
  | boolean
  | ApplicationDeleteMetricsConfigEnum;

export type ApplicationDeleteMetricsConfigUnion2 =
  | string
  | number
  | boolean
  | ApplicationDeleteMetricsConfigEnum
  | Array<any>
  | { [k: string]: any };

export const ApplicationDeleteServerStatus = {
  Active: "active",
  Inactive: "inactive",
} as const;
export type ApplicationDeleteServerStatus = ClosedEnum<
  typeof ApplicationDeleteServerStatus
>;

export type ApplicationDeleteServer = {
  appName: string;
  command: string;
  createdAt: string;
  description: string | null;
  enableDockerCleanup: boolean;
  ipAddress: string;
  metricsConfig:
    | string
    | number
    | boolean
    | ApplicationDeleteMetricsConfigEnum
    | Array<any>
    | { [k: string]: any };
  name: string;
  organizationId: string;
  port: number;
  serverId: string;
  serverStatus: ApplicationDeleteServerStatus;
  sshKeyId: string | null;
  username: string;
};

export const ApplicationDeleteSourceType = {
  Github: "github",
  Docker: "docker",
  Git: "git",
  Gitlab: "gitlab",
  Bitbucket: "bitbucket",
  Gitea: "gitea",
  Drop: "drop",
} as const;
export type ApplicationDeleteSourceType = ClosedEnum<
  typeof ApplicationDeleteSourceType
>;

export const ApplicationDeleteTriggerType = {
  Push: "push",
  Tag: "tag",
} as const;
export type ApplicationDeleteTriggerType = ClosedEnum<
  typeof ApplicationDeleteTriggerType
>;

export type ApplicationDeleteUpdateConfigSwarm = {
  delay?: number | undefined;
  failureAction?: string | undefined;
  maxFailureRatio?: number | undefined;
  monitor?: number | undefined;
  order: string;
  parallelism: number;
};

/**
 * Successful response
 */
export type ApplicationDeleteResponseBody = {
  appName?: string | undefined;
  applicationId?: string | undefined;
  applicationStatus?: ApplicationDeleteApplicationStatus | undefined;
  autoDeploy?: boolean | null | undefined;
  bitbucket: ApplicationDeleteBitbucket | null;
  bitbucketBranch?: string | null | undefined;
  bitbucketBuildPath?: string | null | undefined;
  bitbucketId?: string | null | undefined;
  bitbucketOwner?: string | null | undefined;
  bitbucketRepository?: string | null | undefined;
  branch?: string | null | undefined;
  buildArgs?: string | null | undefined;
  buildPath?: string | null | undefined;
  buildType?: ApplicationDeleteBuildType | undefined;
  cleanCache?: boolean | null | undefined;
  command?: string | null | undefined;
  cpuLimit?: string | null | undefined;
  cpuReservation?: string | null | undefined;
  createdAt?: string | undefined;
  customGitBranch?: string | null | undefined;
  customGitBuildPath?: string | null | undefined;
  customGitSSHKeyId?: string | null | undefined;
  customGitUrl?: string | null | undefined;
  deployments: Array<ApplicationDeleteDeployment>;
  description?: string | null | undefined;
  dockerBuildStage?: string | null | undefined;
  dockerContextPath?: string | null | undefined;
  dockerImage?: string | null | undefined;
  dockerfile?: string | null | undefined;
  domains: Array<ApplicationDeleteDomain>;
  dropBuildPath?: string | null | undefined;
  enableSubmodules?: boolean | undefined;
  enabled?: boolean | null | undefined;
  env?: string | null | undefined;
  environment: ApplicationDeleteEnvironment;
  environmentId: string;
  gitea: ApplicationDeleteGitea | null;
  giteaBranch?: string | null | undefined;
  giteaBuildPath?: string | null | undefined;
  giteaId?: string | null | undefined;
  giteaOwner?: string | null | undefined;
  giteaRepository?: string | null | undefined;
  github: ApplicationDeleteGithub | null;
  githubId?: string | null | undefined;
  gitlab: ApplicationDeleteGitlab | null;
  gitlabBranch?: string | null | undefined;
  gitlabBuildPath?: string | null | undefined;
  gitlabId?: string | null | undefined;
  gitlabOwner?: string | null | undefined;
  gitlabPathNamespace?: string | null | undefined;
  gitlabProjectId?: number | null | undefined;
  gitlabRepository?: string | null | undefined;
  healthCheckSwarm?: ApplicationDeleteHealthCheckSwarm | null | undefined;
  herokuVersion?: string | null | undefined;
  isPreviewDeploymentsActive?: boolean | null | undefined;
  isStaticSpa?: boolean | null | undefined;
  labelsSwarm?: { [k: string]: string } | null | undefined;
  memoryLimit?: string | null | undefined;
  memoryReservation?: string | null | undefined;
  modeSwarm?: ApplicationDeleteModeSwarm | null | undefined;
  mounts: Array<ApplicationDeleteMount>;
  name: string;
  networkSwarm?: Array<ApplicationDeleteNetworkSwarm> | null | undefined;
  owner?: string | null | undefined;
  password?: string | null | undefined;
  placementSwarm?: ApplicationDeletePlacementSwarm | null | undefined;
  ports: Array<ApplicationDeletePort>;
  previewBuildArgs?: string | null | undefined;
  previewCertificateType?: ApplicationDeletePreviewCertificateType | undefined;
  previewCustomCertResolver?: string | null | undefined;
  previewDeployments: Array<ApplicationDeletePreviewDeployment>;
  previewEnv?: string | null | undefined;
  previewHttps?: boolean | undefined;
  previewLabels?: Array<string> | null | undefined;
  previewLimit?: number | null | undefined;
  previewPath?: string | null | undefined;
  previewPort?: number | null | undefined;
  previewRequireCollaboratorPermissions?: boolean | null | undefined;
  previewWildcard?: string | null | undefined;
  publishDirectory?: string | null | undefined;
  railpackVersion?: string | null | undefined;
  redirects: Array<ApplicationDeleteRedirect>;
  refreshToken?: string | null | undefined;
  registry: ApplicationDeleteRegistry | null;
  registryId?: string | null | undefined;
  registryUrl?: string | null | undefined;
  replicas?: number | undefined;
  repository?: string | null | undefined;
  restartPolicySwarm?: ApplicationDeleteRestartPolicySwarm | null | undefined;
  rollbackActive?: boolean | null | undefined;
  rollbackConfigSwarm?: ApplicationDeleteRollbackConfigSwarm | null | undefined;
  security: Array<ApplicationDeleteSecurityResponse>;
  server: ApplicationDeleteServer | null;
  serverId?: string | null | undefined;
  sourceType?: ApplicationDeleteSourceType | undefined;
  subtitle?: string | null | undefined;
  title?: string | null | undefined;
  triggerType?: ApplicationDeleteTriggerType | null | undefined;
  updateConfigSwarm?: ApplicationDeleteUpdateConfigSwarm | null | undefined;
  username?: string | null | undefined;
  watchPaths?: Array<string> | null | undefined;
};

export type ApplicationDeleteResponse =
  | ApplicationDeleteResponseBody
  | models.ErrorT;

/** @internal */
export const ApplicationDeleteSecurity$inboundSchema: z.ZodType<
  ApplicationDeleteSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type ApplicationDeleteSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const ApplicationDeleteSecurity$outboundSchema: z.ZodType<
  ApplicationDeleteSecurity$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteSecurity$ {
  /** @deprecated use `ApplicationDeleteSecurity$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteSecurity$inboundSchema;
  /** @deprecated use `ApplicationDeleteSecurity$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteSecurity$outboundSchema;
  /** @deprecated use `ApplicationDeleteSecurity$Outbound` instead. */
  export type Outbound = ApplicationDeleteSecurity$Outbound;
}

export function applicationDeleteSecurityToJSON(
  applicationDeleteSecurity: ApplicationDeleteSecurity,
): string {
  return JSON.stringify(
    ApplicationDeleteSecurity$outboundSchema.parse(applicationDeleteSecurity),
  );
}

export function applicationDeleteSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeleteSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteSecurity' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteRequest$inboundSchema: z.ZodType<
  ApplicationDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string(),
});

/** @internal */
export type ApplicationDeleteRequest$Outbound = {
  applicationId: string;
};

/** @internal */
export const ApplicationDeleteRequest$outboundSchema: z.ZodType<
  ApplicationDeleteRequest$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteRequest
> = z.object({
  applicationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteRequest$ {
  /** @deprecated use `ApplicationDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteRequest$inboundSchema;
  /** @deprecated use `ApplicationDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteRequest$outboundSchema;
  /** @deprecated use `ApplicationDeleteRequest$Outbound` instead. */
  export type Outbound = ApplicationDeleteRequest$Outbound;
}

export function applicationDeleteRequestToJSON(
  applicationDeleteRequest: ApplicationDeleteRequest,
): string {
  return JSON.stringify(
    ApplicationDeleteRequest$outboundSchema.parse(applicationDeleteRequest),
  );
}

export function applicationDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteRequest' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteApplicationStatus$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeleteApplicationStatus
> = z.nativeEnum(ApplicationDeleteApplicationStatus);

/** @internal */
export const ApplicationDeleteApplicationStatus$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeleteApplicationStatus
> = ApplicationDeleteApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteApplicationStatus$ {
  /** @deprecated use `ApplicationDeleteApplicationStatus$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteApplicationStatus$inboundSchema;
  /** @deprecated use `ApplicationDeleteApplicationStatus$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationDeleteApplicationStatus$outboundSchema;
}

/** @internal */
export const ApplicationDeleteBitbucket$inboundSchema: z.ZodType<
  ApplicationDeleteBitbucket,
  z.ZodTypeDef,
  unknown
> = z.object({
  appPassword: z.nullable(z.string()),
  bitbucketId: z.string(),
  bitbucketUsername: z.nullable(z.string()),
  bitbucketWorkspaceName: z.nullable(z.string()),
  gitProviderId: z.string(),
});

/** @internal */
export type ApplicationDeleteBitbucket$Outbound = {
  appPassword: string | null;
  bitbucketId: string;
  bitbucketUsername: string | null;
  bitbucketWorkspaceName: string | null;
  gitProviderId: string;
};

/** @internal */
export const ApplicationDeleteBitbucket$outboundSchema: z.ZodType<
  ApplicationDeleteBitbucket$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteBitbucket
> = z.object({
  appPassword: z.nullable(z.string()),
  bitbucketId: z.string(),
  bitbucketUsername: z.nullable(z.string()),
  bitbucketWorkspaceName: z.nullable(z.string()),
  gitProviderId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteBitbucket$ {
  /** @deprecated use `ApplicationDeleteBitbucket$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteBitbucket$inboundSchema;
  /** @deprecated use `ApplicationDeleteBitbucket$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteBitbucket$outboundSchema;
  /** @deprecated use `ApplicationDeleteBitbucket$Outbound` instead. */
  export type Outbound = ApplicationDeleteBitbucket$Outbound;
}

export function applicationDeleteBitbucketToJSON(
  applicationDeleteBitbucket: ApplicationDeleteBitbucket,
): string {
  return JSON.stringify(
    ApplicationDeleteBitbucket$outboundSchema.parse(applicationDeleteBitbucket),
  );
}

export function applicationDeleteBitbucketFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteBitbucket, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeleteBitbucket$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteBitbucket' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteBuildType$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeleteBuildType
> = z.nativeEnum(ApplicationDeleteBuildType);

/** @internal */
export const ApplicationDeleteBuildType$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeleteBuildType
> = ApplicationDeleteBuildType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteBuildType$ {
  /** @deprecated use `ApplicationDeleteBuildType$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteBuildType$inboundSchema;
  /** @deprecated use `ApplicationDeleteBuildType$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteBuildType$outboundSchema;
}

/** @internal */
export const ApplicationDeleteStatus$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeleteStatus
> = z.nativeEnum(ApplicationDeleteStatus);

/** @internal */
export const ApplicationDeleteStatus$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeleteStatus
> = ApplicationDeleteStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteStatus$ {
  /** @deprecated use `ApplicationDeleteStatus$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteStatus$inboundSchema;
  /** @deprecated use `ApplicationDeleteStatus$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteStatus$outboundSchema;
}

/** @internal */
export const ApplicationDeleteDeployment$inboundSchema: z.ZodType<
  ApplicationDeleteDeployment,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.nullable(z.string()),
  backupId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  createdAt: z.string(),
  deploymentId: z.string(),
  description: z.nullable(z.string()),
  errorMessage: z.nullable(z.string()),
  finishedAt: z.nullable(z.string()),
  isPreviewDeployment: z.nullable(z.boolean()),
  logPath: z.string(),
  pid: z.nullable(z.string()),
  previewDeploymentId: z.nullable(z.string()),
  rollbackId: z.nullable(z.string()),
  scheduleId: z.nullable(z.string()),
  serverId: z.nullable(z.string()),
  startedAt: z.nullable(z.string()),
  status: z.nullable(ApplicationDeleteStatus$inboundSchema),
  title: z.string(),
  volumeBackupId: z.nullable(z.string()),
});

/** @internal */
export type ApplicationDeleteDeployment$Outbound = {
  applicationId: string | null;
  backupId: string | null;
  composeId: string | null;
  createdAt: string;
  deploymentId: string;
  description: string | null;
  errorMessage: string | null;
  finishedAt: string | null;
  isPreviewDeployment: boolean | null;
  logPath: string;
  pid: string | null;
  previewDeploymentId: string | null;
  rollbackId: string | null;
  scheduleId: string | null;
  serverId: string | null;
  startedAt: string | null;
  status: string | null;
  title: string;
  volumeBackupId: string | null;
};

/** @internal */
export const ApplicationDeleteDeployment$outboundSchema: z.ZodType<
  ApplicationDeleteDeployment$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteDeployment
> = z.object({
  applicationId: z.nullable(z.string()),
  backupId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  createdAt: z.string(),
  deploymentId: z.string(),
  description: z.nullable(z.string()),
  errorMessage: z.nullable(z.string()),
  finishedAt: z.nullable(z.string()),
  isPreviewDeployment: z.nullable(z.boolean()),
  logPath: z.string(),
  pid: z.nullable(z.string()),
  previewDeploymentId: z.nullable(z.string()),
  rollbackId: z.nullable(z.string()),
  scheduleId: z.nullable(z.string()),
  serverId: z.nullable(z.string()),
  startedAt: z.nullable(z.string()),
  status: z.nullable(ApplicationDeleteStatus$outboundSchema),
  title: z.string(),
  volumeBackupId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteDeployment$ {
  /** @deprecated use `ApplicationDeleteDeployment$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteDeployment$inboundSchema;
  /** @deprecated use `ApplicationDeleteDeployment$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteDeployment$outboundSchema;
  /** @deprecated use `ApplicationDeleteDeployment$Outbound` instead. */
  export type Outbound = ApplicationDeleteDeployment$Outbound;
}

export function applicationDeleteDeploymentToJSON(
  applicationDeleteDeployment: ApplicationDeleteDeployment,
): string {
  return JSON.stringify(
    ApplicationDeleteDeployment$outboundSchema.parse(
      applicationDeleteDeployment,
    ),
  );
}

export function applicationDeleteDeploymentFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteDeployment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeleteDeployment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteDeployment' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteCertificateType$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeleteCertificateType
> = z.nativeEnum(ApplicationDeleteCertificateType);

/** @internal */
export const ApplicationDeleteCertificateType$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeleteCertificateType
> = ApplicationDeleteCertificateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteCertificateType$ {
  /** @deprecated use `ApplicationDeleteCertificateType$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteCertificateType$inboundSchema;
  /** @deprecated use `ApplicationDeleteCertificateType$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteCertificateType$outboundSchema;
}

/** @internal */
export const ApplicationDeleteDomainType$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeleteDomainType
> = z.nativeEnum(ApplicationDeleteDomainType);

/** @internal */
export const ApplicationDeleteDomainType$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeleteDomainType
> = ApplicationDeleteDomainType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteDomainType$ {
  /** @deprecated use `ApplicationDeleteDomainType$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteDomainType$inboundSchema;
  /** @deprecated use `ApplicationDeleteDomainType$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteDomainType$outboundSchema;
}

/** @internal */
export const ApplicationDeleteDomain$inboundSchema: z.ZodType<
  ApplicationDeleteDomain,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.nullable(z.string()),
  certificateType: ApplicationDeleteCertificateType$inboundSchema,
  composeId: z.nullable(z.string()),
  createdAt: z.string(),
  customCertResolver: z.nullable(z.string()),
  domainId: z.string(),
  domainType: z.nullable(ApplicationDeleteDomainType$inboundSchema),
  host: z.string(),
  https: z.boolean(),
  internalPath: z.nullable(z.string()),
  path: z.nullable(z.string()),
  port: z.nullable(z.number()),
  previewDeploymentId: z.nullable(z.string()),
  serviceName: z.nullable(z.string()),
  stripPath: z.boolean(),
  uniqueConfigKey: z.number(),
});

/** @internal */
export type ApplicationDeleteDomain$Outbound = {
  applicationId: string | null;
  certificateType: string;
  composeId: string | null;
  createdAt: string;
  customCertResolver: string | null;
  domainId: string;
  domainType: string | null;
  host: string;
  https: boolean;
  internalPath: string | null;
  path: string | null;
  port: number | null;
  previewDeploymentId: string | null;
  serviceName: string | null;
  stripPath: boolean;
  uniqueConfigKey: number;
};

/** @internal */
export const ApplicationDeleteDomain$outboundSchema: z.ZodType<
  ApplicationDeleteDomain$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteDomain
> = z.object({
  applicationId: z.nullable(z.string()),
  certificateType: ApplicationDeleteCertificateType$outboundSchema,
  composeId: z.nullable(z.string()),
  createdAt: z.string(),
  customCertResolver: z.nullable(z.string()),
  domainId: z.string(),
  domainType: z.nullable(ApplicationDeleteDomainType$outboundSchema),
  host: z.string(),
  https: z.boolean(),
  internalPath: z.nullable(z.string()),
  path: z.nullable(z.string()),
  port: z.nullable(z.number()),
  previewDeploymentId: z.nullable(z.string()),
  serviceName: z.nullable(z.string()),
  stripPath: z.boolean(),
  uniqueConfigKey: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteDomain$ {
  /** @deprecated use `ApplicationDeleteDomain$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteDomain$inboundSchema;
  /** @deprecated use `ApplicationDeleteDomain$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteDomain$outboundSchema;
  /** @deprecated use `ApplicationDeleteDomain$Outbound` instead. */
  export type Outbound = ApplicationDeleteDomain$Outbound;
}

export function applicationDeleteDomainToJSON(
  applicationDeleteDomain: ApplicationDeleteDomain,
): string {
  return JSON.stringify(
    ApplicationDeleteDomain$outboundSchema.parse(applicationDeleteDomain),
  );
}

export function applicationDeleteDomainFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteDomain, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeleteDomain$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteDomain' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteProject$inboundSchema: z.ZodType<
  ApplicationDeleteProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/** @internal */
export type ApplicationDeleteProject$Outbound = {
  createdAt: string;
  description: string | null;
  env: string;
  name: string;
  organizationId: string;
  projectId: string;
};

/** @internal */
export const ApplicationDeleteProject$outboundSchema: z.ZodType<
  ApplicationDeleteProject$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteProject
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  name: z.string(),
  organizationId: z.string(),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteProject$ {
  /** @deprecated use `ApplicationDeleteProject$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteProject$inboundSchema;
  /** @deprecated use `ApplicationDeleteProject$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteProject$outboundSchema;
  /** @deprecated use `ApplicationDeleteProject$Outbound` instead. */
  export type Outbound = ApplicationDeleteProject$Outbound;
}

export function applicationDeleteProjectToJSON(
  applicationDeleteProject: ApplicationDeleteProject,
): string {
  return JSON.stringify(
    ApplicationDeleteProject$outboundSchema.parse(applicationDeleteProject),
  );
}

export function applicationDeleteProjectFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeleteProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteProject' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteEnvironment$inboundSchema: z.ZodType<
  ApplicationDeleteEnvironment,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  name: z.string(),
  project: z.lazy(() => ApplicationDeleteProject$inboundSchema),
  projectId: z.string(),
});

/** @internal */
export type ApplicationDeleteEnvironment$Outbound = {
  createdAt: string;
  description: string | null;
  env: string;
  environmentId: string;
  name: string;
  project: ApplicationDeleteProject$Outbound;
  projectId: string;
};

/** @internal */
export const ApplicationDeleteEnvironment$outboundSchema: z.ZodType<
  ApplicationDeleteEnvironment$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteEnvironment
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()),
  env: z.string(),
  environmentId: z.string(),
  name: z.string(),
  project: z.lazy(() => ApplicationDeleteProject$outboundSchema),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteEnvironment$ {
  /** @deprecated use `ApplicationDeleteEnvironment$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteEnvironment$inboundSchema;
  /** @deprecated use `ApplicationDeleteEnvironment$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteEnvironment$outboundSchema;
  /** @deprecated use `ApplicationDeleteEnvironment$Outbound` instead. */
  export type Outbound = ApplicationDeleteEnvironment$Outbound;
}

export function applicationDeleteEnvironmentToJSON(
  applicationDeleteEnvironment: ApplicationDeleteEnvironment,
): string {
  return JSON.stringify(
    ApplicationDeleteEnvironment$outboundSchema.parse(
      applicationDeleteEnvironment,
    ),
  );
}

export function applicationDeleteEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeleteEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteEnvironment' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteGitea$inboundSchema: z.ZodType<
  ApplicationDeleteGitea,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.nullable(z.string()),
  clientId: z.nullable(z.string()),
  clientSecret: z.nullable(z.string()),
  expiresAt: z.nullable(z.number()),
  gitProviderId: z.string(),
  giteaId: z.string(),
  giteaUrl: z.string(),
  lastAuthenticatedAt: z.nullable(z.number()),
  redirectUri: z.nullable(z.string()),
  refreshToken: z.nullable(z.string()),
  scopes: z.nullable(z.string()),
});

/** @internal */
export type ApplicationDeleteGitea$Outbound = {
  accessToken: string | null;
  clientId: string | null;
  clientSecret: string | null;
  expiresAt: number | null;
  gitProviderId: string;
  giteaId: string;
  giteaUrl: string;
  lastAuthenticatedAt: number | null;
  redirectUri: string | null;
  refreshToken: string | null;
  scopes: string | null;
};

/** @internal */
export const ApplicationDeleteGitea$outboundSchema: z.ZodType<
  ApplicationDeleteGitea$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteGitea
> = z.object({
  accessToken: z.nullable(z.string()),
  clientId: z.nullable(z.string()),
  clientSecret: z.nullable(z.string()),
  expiresAt: z.nullable(z.number()),
  gitProviderId: z.string(),
  giteaId: z.string(),
  giteaUrl: z.string(),
  lastAuthenticatedAt: z.nullable(z.number()),
  redirectUri: z.nullable(z.string()),
  refreshToken: z.nullable(z.string()),
  scopes: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteGitea$ {
  /** @deprecated use `ApplicationDeleteGitea$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteGitea$inboundSchema;
  /** @deprecated use `ApplicationDeleteGitea$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteGitea$outboundSchema;
  /** @deprecated use `ApplicationDeleteGitea$Outbound` instead. */
  export type Outbound = ApplicationDeleteGitea$Outbound;
}

export function applicationDeleteGiteaToJSON(
  applicationDeleteGitea: ApplicationDeleteGitea,
): string {
  return JSON.stringify(
    ApplicationDeleteGitea$outboundSchema.parse(applicationDeleteGitea),
  );
}

export function applicationDeleteGiteaFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteGitea, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeleteGitea$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteGitea' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteGithub$inboundSchema: z.ZodType<
  ApplicationDeleteGithub,
  z.ZodTypeDef,
  unknown
> = z.object({
  gitProviderId: z.string(),
  githubAppId: z.nullable(z.number()),
  githubAppName: z.nullable(z.string()),
  githubClientId: z.nullable(z.string()),
  githubClientSecret: z.nullable(z.string()),
  githubId: z.string(),
  githubInstallationId: z.nullable(z.string()),
  githubPrivateKey: z.nullable(z.string()),
  githubWebhookSecret: z.nullable(z.string()),
});

/** @internal */
export type ApplicationDeleteGithub$Outbound = {
  gitProviderId: string;
  githubAppId: number | null;
  githubAppName: string | null;
  githubClientId: string | null;
  githubClientSecret: string | null;
  githubId: string;
  githubInstallationId: string | null;
  githubPrivateKey: string | null;
  githubWebhookSecret: string | null;
};

/** @internal */
export const ApplicationDeleteGithub$outboundSchema: z.ZodType<
  ApplicationDeleteGithub$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteGithub
> = z.object({
  gitProviderId: z.string(),
  githubAppId: z.nullable(z.number()),
  githubAppName: z.nullable(z.string()),
  githubClientId: z.nullable(z.string()),
  githubClientSecret: z.nullable(z.string()),
  githubId: z.string(),
  githubInstallationId: z.nullable(z.string()),
  githubPrivateKey: z.nullable(z.string()),
  githubWebhookSecret: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteGithub$ {
  /** @deprecated use `ApplicationDeleteGithub$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteGithub$inboundSchema;
  /** @deprecated use `ApplicationDeleteGithub$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteGithub$outboundSchema;
  /** @deprecated use `ApplicationDeleteGithub$Outbound` instead. */
  export type Outbound = ApplicationDeleteGithub$Outbound;
}

export function applicationDeleteGithubToJSON(
  applicationDeleteGithub: ApplicationDeleteGithub,
): string {
  return JSON.stringify(
    ApplicationDeleteGithub$outboundSchema.parse(applicationDeleteGithub),
  );
}

export function applicationDeleteGithubFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteGithub, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeleteGithub$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteGithub' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteGitlab$inboundSchema: z.ZodType<
  ApplicationDeleteGitlab,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.nullable(z.string()),
  applicationId: z.nullable(z.string()),
  expiresAt: z.nullable(z.number()),
  gitProviderId: z.string(),
  gitlabId: z.string(),
  gitlabUrl: z.string(),
  groupName: z.nullable(z.string()),
  redirectUri: z.nullable(z.string()),
  refreshToken: z.nullable(z.string()),
  secret: z.nullable(z.string()),
});

/** @internal */
export type ApplicationDeleteGitlab$Outbound = {
  accessToken: string | null;
  applicationId: string | null;
  expiresAt: number | null;
  gitProviderId: string;
  gitlabId: string;
  gitlabUrl: string;
  groupName: string | null;
  redirectUri: string | null;
  refreshToken: string | null;
  secret: string | null;
};

/** @internal */
export const ApplicationDeleteGitlab$outboundSchema: z.ZodType<
  ApplicationDeleteGitlab$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteGitlab
> = z.object({
  accessToken: z.nullable(z.string()),
  applicationId: z.nullable(z.string()),
  expiresAt: z.nullable(z.number()),
  gitProviderId: z.string(),
  gitlabId: z.string(),
  gitlabUrl: z.string(),
  groupName: z.nullable(z.string()),
  redirectUri: z.nullable(z.string()),
  refreshToken: z.nullable(z.string()),
  secret: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteGitlab$ {
  /** @deprecated use `ApplicationDeleteGitlab$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteGitlab$inboundSchema;
  /** @deprecated use `ApplicationDeleteGitlab$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteGitlab$outboundSchema;
  /** @deprecated use `ApplicationDeleteGitlab$Outbound` instead. */
  export type Outbound = ApplicationDeleteGitlab$Outbound;
}

export function applicationDeleteGitlabToJSON(
  applicationDeleteGitlab: ApplicationDeleteGitlab,
): string {
  return JSON.stringify(
    ApplicationDeleteGitlab$outboundSchema.parse(applicationDeleteGitlab),
  );
}

export function applicationDeleteGitlabFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteGitlab, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeleteGitlab$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteGitlab' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteHealthCheckSwarm$inboundSchema: z.ZodType<
  ApplicationDeleteHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Interval: z.number().optional(),
  Retries: z.number().optional(),
  StartPeriod: z.number().optional(),
  Test: z.array(z.string()).optional(),
  Timeout: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Interval": "interval",
    "Retries": "retries",
    "StartPeriod": "startPeriod",
    "Test": "test",
    "Timeout": "timeout",
  });
});

/** @internal */
export type ApplicationDeleteHealthCheckSwarm$Outbound = {
  Interval?: number | undefined;
  Retries?: number | undefined;
  StartPeriod?: number | undefined;
  Test?: Array<string> | undefined;
  Timeout?: number | undefined;
};

/** @internal */
export const ApplicationDeleteHealthCheckSwarm$outboundSchema: z.ZodType<
  ApplicationDeleteHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteHealthCheckSwarm
> = z.object({
  interval: z.number().optional(),
  retries: z.number().optional(),
  startPeriod: z.number().optional(),
  test: z.array(z.string()).optional(),
  timeout: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    interval: "Interval",
    retries: "Retries",
    startPeriod: "StartPeriod",
    test: "Test",
    timeout: "Timeout",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteHealthCheckSwarm$ {
  /** @deprecated use `ApplicationDeleteHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteHealthCheckSwarm$inboundSchema;
  /** @deprecated use `ApplicationDeleteHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationDeleteHealthCheckSwarm$outboundSchema;
  /** @deprecated use `ApplicationDeleteHealthCheckSwarm$Outbound` instead. */
  export type Outbound = ApplicationDeleteHealthCheckSwarm$Outbound;
}

export function applicationDeleteHealthCheckSwarmToJSON(
  applicationDeleteHealthCheckSwarm: ApplicationDeleteHealthCheckSwarm,
): string {
  return JSON.stringify(
    ApplicationDeleteHealthCheckSwarm$outboundSchema.parse(
      applicationDeleteHealthCheckSwarm,
    ),
  );
}

export function applicationDeleteHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeleteHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteGlobal$inboundSchema: z.ZodType<
  ApplicationDeleteGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ApplicationDeleteGlobal$Outbound = {};

/** @internal */
export const ApplicationDeleteGlobal$outboundSchema: z.ZodType<
  ApplicationDeleteGlobal$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteGlobal$ {
  /** @deprecated use `ApplicationDeleteGlobal$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteGlobal$inboundSchema;
  /** @deprecated use `ApplicationDeleteGlobal$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteGlobal$outboundSchema;
  /** @deprecated use `ApplicationDeleteGlobal$Outbound` instead. */
  export type Outbound = ApplicationDeleteGlobal$Outbound;
}

export function applicationDeleteGlobalToJSON(
  applicationDeleteGlobal: ApplicationDeleteGlobal,
): string {
  return JSON.stringify(
    ApplicationDeleteGlobal$outboundSchema.parse(applicationDeleteGlobal),
  );
}

export function applicationDeleteGlobalFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeleteGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteGlobal' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteGlobalJob$inboundSchema: z.ZodType<
  ApplicationDeleteGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ApplicationDeleteGlobalJob$Outbound = {};

/** @internal */
export const ApplicationDeleteGlobalJob$outboundSchema: z.ZodType<
  ApplicationDeleteGlobalJob$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteGlobalJob$ {
  /** @deprecated use `ApplicationDeleteGlobalJob$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteGlobalJob$inboundSchema;
  /** @deprecated use `ApplicationDeleteGlobalJob$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteGlobalJob$outboundSchema;
  /** @deprecated use `ApplicationDeleteGlobalJob$Outbound` instead. */
  export type Outbound = ApplicationDeleteGlobalJob$Outbound;
}

export function applicationDeleteGlobalJobToJSON(
  applicationDeleteGlobalJob: ApplicationDeleteGlobalJob,
): string {
  return JSON.stringify(
    ApplicationDeleteGlobalJob$outboundSchema.parse(applicationDeleteGlobalJob),
  );
}

export function applicationDeleteGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeleteGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteGlobalJob' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteReplicated$inboundSchema: z.ZodType<
  ApplicationDeleteReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type ApplicationDeleteReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const ApplicationDeleteReplicated$outboundSchema: z.ZodType<
  ApplicationDeleteReplicated$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteReplicated$ {
  /** @deprecated use `ApplicationDeleteReplicated$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteReplicated$inboundSchema;
  /** @deprecated use `ApplicationDeleteReplicated$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteReplicated$outboundSchema;
  /** @deprecated use `ApplicationDeleteReplicated$Outbound` instead. */
  export type Outbound = ApplicationDeleteReplicated$Outbound;
}

export function applicationDeleteReplicatedToJSON(
  applicationDeleteReplicated: ApplicationDeleteReplicated,
): string {
  return JSON.stringify(
    ApplicationDeleteReplicated$outboundSchema.parse(
      applicationDeleteReplicated,
    ),
  );
}

export function applicationDeleteReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeleteReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteReplicated' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteReplicatedJob$inboundSchema: z.ZodType<
  ApplicationDeleteReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type ApplicationDeleteReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const ApplicationDeleteReplicatedJob$outboundSchema: z.ZodType<
  ApplicationDeleteReplicatedJob$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteReplicatedJob$ {
  /** @deprecated use `ApplicationDeleteReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteReplicatedJob$inboundSchema;
  /** @deprecated use `ApplicationDeleteReplicatedJob$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteReplicatedJob$outboundSchema;
  /** @deprecated use `ApplicationDeleteReplicatedJob$Outbound` instead. */
  export type Outbound = ApplicationDeleteReplicatedJob$Outbound;
}

export function applicationDeleteReplicatedJobToJSON(
  applicationDeleteReplicatedJob: ApplicationDeleteReplicatedJob,
): string {
  return JSON.stringify(
    ApplicationDeleteReplicatedJob$outboundSchema.parse(
      applicationDeleteReplicatedJob,
    ),
  );
}

export function applicationDeleteReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeleteReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteReplicatedJob' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteModeSwarm$inboundSchema: z.ZodType<
  ApplicationDeleteModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Global: z.lazy(() => ApplicationDeleteGlobal$inboundSchema).optional(),
  GlobalJob: z.lazy(() => ApplicationDeleteGlobalJob$inboundSchema).optional(),
  Replicated: z.lazy(() => ApplicationDeleteReplicated$inboundSchema)
    .optional(),
  ReplicatedJob: z.lazy(() => ApplicationDeleteReplicatedJob$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Global": "global",
    "GlobalJob": "globalJob",
    "Replicated": "replicated",
    "ReplicatedJob": "replicatedJob",
  });
});

/** @internal */
export type ApplicationDeleteModeSwarm$Outbound = {
  Global?: ApplicationDeleteGlobal$Outbound | undefined;
  GlobalJob?: ApplicationDeleteGlobalJob$Outbound | undefined;
  Replicated?: ApplicationDeleteReplicated$Outbound | undefined;
  ReplicatedJob?: ApplicationDeleteReplicatedJob$Outbound | undefined;
};

/** @internal */
export const ApplicationDeleteModeSwarm$outboundSchema: z.ZodType<
  ApplicationDeleteModeSwarm$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteModeSwarm
> = z.object({
  global: z.lazy(() => ApplicationDeleteGlobal$outboundSchema).optional(),
  globalJob: z.lazy(() => ApplicationDeleteGlobalJob$outboundSchema).optional(),
  replicated: z.lazy(() => ApplicationDeleteReplicated$outboundSchema)
    .optional(),
  replicatedJob: z.lazy(() => ApplicationDeleteReplicatedJob$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    global: "Global",
    globalJob: "GlobalJob",
    replicated: "Replicated",
    replicatedJob: "ReplicatedJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteModeSwarm$ {
  /** @deprecated use `ApplicationDeleteModeSwarm$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteModeSwarm$inboundSchema;
  /** @deprecated use `ApplicationDeleteModeSwarm$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteModeSwarm$outboundSchema;
  /** @deprecated use `ApplicationDeleteModeSwarm$Outbound` instead. */
  export type Outbound = ApplicationDeleteModeSwarm$Outbound;
}

export function applicationDeleteModeSwarmToJSON(
  applicationDeleteModeSwarm: ApplicationDeleteModeSwarm,
): string {
  return JSON.stringify(
    ApplicationDeleteModeSwarm$outboundSchema.parse(applicationDeleteModeSwarm),
  );
}

export function applicationDeleteModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeleteModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteModeSwarm' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteServiceType$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeleteServiceType
> = z.nativeEnum(ApplicationDeleteServiceType);

/** @internal */
export const ApplicationDeleteServiceType$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeleteServiceType
> = ApplicationDeleteServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteServiceType$ {
  /** @deprecated use `ApplicationDeleteServiceType$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteServiceType$inboundSchema;
  /** @deprecated use `ApplicationDeleteServiceType$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteServiceType$outboundSchema;
}

/** @internal */
export const ApplicationDeleteType$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeleteType
> = z.nativeEnum(ApplicationDeleteType);

/** @internal */
export const ApplicationDeleteType$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeleteType
> = ApplicationDeleteType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteType$ {
  /** @deprecated use `ApplicationDeleteType$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteType$inboundSchema;
  /** @deprecated use `ApplicationDeleteType$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteType$outboundSchema;
}

/** @internal */
export const ApplicationDeleteMount$inboundSchema: z.ZodType<
  ApplicationDeleteMount,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  content: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  hostPath: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mountId: z.string(),
  mountPath: z.string(),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  serviceType: ApplicationDeleteServiceType$inboundSchema,
  type: ApplicationDeleteType$inboundSchema,
  volumeName: z.nullable(z.string()),
});

/** @internal */
export type ApplicationDeleteMount$Outbound = {
  applicationId: string | null;
  composeId: string | null;
  content: string | null;
  filePath: string | null;
  hostPath: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mountId: string;
  mountPath: string;
  mysqlId: string | null;
  postgresId: string | null;
  redisId: string | null;
  serviceType: string;
  type: string;
  volumeName: string | null;
};

/** @internal */
export const ApplicationDeleteMount$outboundSchema: z.ZodType<
  ApplicationDeleteMount$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteMount
> = z.object({
  applicationId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  content: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  hostPath: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mountId: z.string(),
  mountPath: z.string(),
  mysqlId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  serviceType: ApplicationDeleteServiceType$outboundSchema,
  type: ApplicationDeleteType$outboundSchema,
  volumeName: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteMount$ {
  /** @deprecated use `ApplicationDeleteMount$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteMount$inboundSchema;
  /** @deprecated use `ApplicationDeleteMount$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteMount$outboundSchema;
  /** @deprecated use `ApplicationDeleteMount$Outbound` instead. */
  export type Outbound = ApplicationDeleteMount$Outbound;
}

export function applicationDeleteMountToJSON(
  applicationDeleteMount: ApplicationDeleteMount,
): string {
  return JSON.stringify(
    ApplicationDeleteMount$outboundSchema.parse(applicationDeleteMount),
  );
}

export function applicationDeleteMountFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteMount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeleteMount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteMount' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteDriverOpts$inboundSchema: z.ZodType<
  ApplicationDeleteDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ApplicationDeleteDriverOpts$Outbound = {};

/** @internal */
export const ApplicationDeleteDriverOpts$outboundSchema: z.ZodType<
  ApplicationDeleteDriverOpts$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteDriverOpts$ {
  /** @deprecated use `ApplicationDeleteDriverOpts$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteDriverOpts$inboundSchema;
  /** @deprecated use `ApplicationDeleteDriverOpts$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteDriverOpts$outboundSchema;
  /** @deprecated use `ApplicationDeleteDriverOpts$Outbound` instead. */
  export type Outbound = ApplicationDeleteDriverOpts$Outbound;
}

export function applicationDeleteDriverOptsToJSON(
  applicationDeleteDriverOpts: ApplicationDeleteDriverOpts,
): string {
  return JSON.stringify(
    ApplicationDeleteDriverOpts$outboundSchema.parse(
      applicationDeleteDriverOpts,
    ),
  );
}

export function applicationDeleteDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeleteDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteDriverOpts' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteNetworkSwarm$inboundSchema: z.ZodType<
  ApplicationDeleteNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => ApplicationDeleteDriverOpts$inboundSchema)
    .optional(),
  Target: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
    "Target": "target",
  });
});

/** @internal */
export type ApplicationDeleteNetworkSwarm$Outbound = {
  Aliases?: Array<string> | undefined;
  DriverOpts?: ApplicationDeleteDriverOpts$Outbound | undefined;
  Target?: string | undefined;
};

/** @internal */
export const ApplicationDeleteNetworkSwarm$outboundSchema: z.ZodType<
  ApplicationDeleteNetworkSwarm$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteNetworkSwarm
> = z.object({
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => ApplicationDeleteDriverOpts$outboundSchema)
    .optional(),
  target: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    aliases: "Aliases",
    driverOpts: "DriverOpts",
    target: "Target",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteNetworkSwarm$ {
  /** @deprecated use `ApplicationDeleteNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteNetworkSwarm$inboundSchema;
  /** @deprecated use `ApplicationDeleteNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteNetworkSwarm$outboundSchema;
  /** @deprecated use `ApplicationDeleteNetworkSwarm$Outbound` instead. */
  export type Outbound = ApplicationDeleteNetworkSwarm$Outbound;
}

export function applicationDeleteNetworkSwarmToJSON(
  applicationDeleteNetworkSwarm: ApplicationDeleteNetworkSwarm,
): string {
  return JSON.stringify(
    ApplicationDeleteNetworkSwarm$outboundSchema.parse(
      applicationDeleteNetworkSwarm,
    ),
  );
}

export function applicationDeleteNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeleteNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const ApplicationDeletePlatform$inboundSchema: z.ZodType<
  ApplicationDeletePlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type ApplicationDeletePlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const ApplicationDeletePlatform$outboundSchema: z.ZodType<
  ApplicationDeletePlatform$Outbound,
  z.ZodTypeDef,
  ApplicationDeletePlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeletePlatform$ {
  /** @deprecated use `ApplicationDeletePlatform$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeletePlatform$inboundSchema;
  /** @deprecated use `ApplicationDeletePlatform$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeletePlatform$outboundSchema;
  /** @deprecated use `ApplicationDeletePlatform$Outbound` instead. */
  export type Outbound = ApplicationDeletePlatform$Outbound;
}

export function applicationDeletePlatformToJSON(
  applicationDeletePlatform: ApplicationDeletePlatform,
): string {
  return JSON.stringify(
    ApplicationDeletePlatform$outboundSchema.parse(applicationDeletePlatform),
  );
}

export function applicationDeletePlatformFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeletePlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeletePlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeletePlatform' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteSpread$inboundSchema: z.ZodType<
  ApplicationDeleteSpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type ApplicationDeleteSpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const ApplicationDeleteSpread$outboundSchema: z.ZodType<
  ApplicationDeleteSpread$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteSpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteSpread$ {
  /** @deprecated use `ApplicationDeleteSpread$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteSpread$inboundSchema;
  /** @deprecated use `ApplicationDeleteSpread$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteSpread$outboundSchema;
  /** @deprecated use `ApplicationDeleteSpread$Outbound` instead. */
  export type Outbound = ApplicationDeleteSpread$Outbound;
}

export function applicationDeleteSpreadToJSON(
  applicationDeleteSpread: ApplicationDeleteSpread,
): string {
  return JSON.stringify(
    ApplicationDeleteSpread$outboundSchema.parse(applicationDeleteSpread),
  );
}

export function applicationDeleteSpreadFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteSpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeleteSpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteSpread' from JSON`,
  );
}

/** @internal */
export const ApplicationDeletePreference$inboundSchema: z.ZodType<
  ApplicationDeletePreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => ApplicationDeleteSpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type ApplicationDeletePreference$Outbound = {
  Spread: ApplicationDeleteSpread$Outbound;
};

/** @internal */
export const ApplicationDeletePreference$outboundSchema: z.ZodType<
  ApplicationDeletePreference$Outbound,
  z.ZodTypeDef,
  ApplicationDeletePreference
> = z.object({
  spread: z.lazy(() => ApplicationDeleteSpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeletePreference$ {
  /** @deprecated use `ApplicationDeletePreference$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeletePreference$inboundSchema;
  /** @deprecated use `ApplicationDeletePreference$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeletePreference$outboundSchema;
  /** @deprecated use `ApplicationDeletePreference$Outbound` instead. */
  export type Outbound = ApplicationDeletePreference$Outbound;
}

export function applicationDeletePreferenceToJSON(
  applicationDeletePreference: ApplicationDeletePreference,
): string {
  return JSON.stringify(
    ApplicationDeletePreference$outboundSchema.parse(
      applicationDeletePreference,
    ),
  );
}

export function applicationDeletePreferenceFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeletePreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeletePreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeletePreference' from JSON`,
  );
}

/** @internal */
export const ApplicationDeletePlacementSwarm$inboundSchema: z.ZodType<
  ApplicationDeletePlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => ApplicationDeletePlatform$inboundSchema))
    .optional(),
  Preferences: z.array(z.lazy(() => ApplicationDeletePreference$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
    "Preferences": "preferences",
  });
});

/** @internal */
export type ApplicationDeletePlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<ApplicationDeletePlatform$Outbound> | undefined;
  Preferences?: Array<ApplicationDeletePreference$Outbound> | undefined;
};

/** @internal */
export const ApplicationDeletePlacementSwarm$outboundSchema: z.ZodType<
  ApplicationDeletePlacementSwarm$Outbound,
  z.ZodTypeDef,
  ApplicationDeletePlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => ApplicationDeletePlatform$outboundSchema))
    .optional(),
  preferences: z.array(z.lazy(() => ApplicationDeletePreference$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
    preferences: "Preferences",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeletePlacementSwarm$ {
  /** @deprecated use `ApplicationDeletePlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeletePlacementSwarm$inboundSchema;
  /** @deprecated use `ApplicationDeletePlacementSwarm$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeletePlacementSwarm$outboundSchema;
  /** @deprecated use `ApplicationDeletePlacementSwarm$Outbound` instead. */
  export type Outbound = ApplicationDeletePlacementSwarm$Outbound;
}

export function applicationDeletePlacementSwarmToJSON(
  applicationDeletePlacementSwarm: ApplicationDeletePlacementSwarm,
): string {
  return JSON.stringify(
    ApplicationDeletePlacementSwarm$outboundSchema.parse(
      applicationDeletePlacementSwarm,
    ),
  );
}

export function applicationDeletePlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeletePlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeletePlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeletePlacementSwarm' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteProtocol$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeleteProtocol
> = z.nativeEnum(ApplicationDeleteProtocol);

/** @internal */
export const ApplicationDeleteProtocol$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeleteProtocol
> = ApplicationDeleteProtocol$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteProtocol$ {
  /** @deprecated use `ApplicationDeleteProtocol$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteProtocol$inboundSchema;
  /** @deprecated use `ApplicationDeleteProtocol$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteProtocol$outboundSchema;
}

/** @internal */
export const ApplicationDeletePublishMode$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeletePublishMode
> = z.nativeEnum(ApplicationDeletePublishMode);

/** @internal */
export const ApplicationDeletePublishMode$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeletePublishMode
> = ApplicationDeletePublishMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeletePublishMode$ {
  /** @deprecated use `ApplicationDeletePublishMode$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeletePublishMode$inboundSchema;
  /** @deprecated use `ApplicationDeletePublishMode$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeletePublishMode$outboundSchema;
}

/** @internal */
export const ApplicationDeletePort$inboundSchema: z.ZodType<
  ApplicationDeletePort,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string(),
  portId: z.string(),
  protocol: ApplicationDeleteProtocol$inboundSchema,
  publishMode: ApplicationDeletePublishMode$inboundSchema,
  publishedPort: z.number(),
  targetPort: z.number(),
});

/** @internal */
export type ApplicationDeletePort$Outbound = {
  applicationId: string;
  portId: string;
  protocol: string;
  publishMode: string;
  publishedPort: number;
  targetPort: number;
};

/** @internal */
export const ApplicationDeletePort$outboundSchema: z.ZodType<
  ApplicationDeletePort$Outbound,
  z.ZodTypeDef,
  ApplicationDeletePort
> = z.object({
  applicationId: z.string(),
  portId: z.string(),
  protocol: ApplicationDeleteProtocol$outboundSchema,
  publishMode: ApplicationDeletePublishMode$outboundSchema,
  publishedPort: z.number(),
  targetPort: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeletePort$ {
  /** @deprecated use `ApplicationDeletePort$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeletePort$inboundSchema;
  /** @deprecated use `ApplicationDeletePort$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeletePort$outboundSchema;
  /** @deprecated use `ApplicationDeletePort$Outbound` instead. */
  export type Outbound = ApplicationDeletePort$Outbound;
}

export function applicationDeletePortToJSON(
  applicationDeletePort: ApplicationDeletePort,
): string {
  return JSON.stringify(
    ApplicationDeletePort$outboundSchema.parse(applicationDeletePort),
  );
}

export function applicationDeletePortFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeletePort, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeletePort$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeletePort' from JSON`,
  );
}

/** @internal */
export const ApplicationDeletePreviewCertificateType$inboundSchema:
  z.ZodNativeEnum<typeof ApplicationDeletePreviewCertificateType> = z
    .nativeEnum(ApplicationDeletePreviewCertificateType);

/** @internal */
export const ApplicationDeletePreviewCertificateType$outboundSchema:
  z.ZodNativeEnum<typeof ApplicationDeletePreviewCertificateType> =
    ApplicationDeletePreviewCertificateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeletePreviewCertificateType$ {
  /** @deprecated use `ApplicationDeletePreviewCertificateType$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationDeletePreviewCertificateType$inboundSchema;
  /** @deprecated use `ApplicationDeletePreviewCertificateType$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationDeletePreviewCertificateType$outboundSchema;
}

/** @internal */
export const ApplicationDeletePreviewStatus$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeletePreviewStatus
> = z.nativeEnum(ApplicationDeletePreviewStatus);

/** @internal */
export const ApplicationDeletePreviewStatus$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeletePreviewStatus
> = ApplicationDeletePreviewStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeletePreviewStatus$ {
  /** @deprecated use `ApplicationDeletePreviewStatus$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeletePreviewStatus$inboundSchema;
  /** @deprecated use `ApplicationDeletePreviewStatus$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeletePreviewStatus$outboundSchema;
}

/** @internal */
export const ApplicationDeletePreviewDeployment$inboundSchema: z.ZodType<
  ApplicationDeletePreviewDeployment,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  applicationId: z.string(),
  branch: z.string(),
  createdAt: z.string(),
  domainId: z.nullable(z.string()),
  expiresAt: z.nullable(z.string()),
  previewDeploymentId: z.string(),
  previewStatus: ApplicationDeletePreviewStatus$inboundSchema,
  pullRequestCommentId: z.string(),
  pullRequestId: z.string(),
  pullRequestNumber: z.string(),
  pullRequestTitle: z.string(),
  pullRequestURL: z.string(),
});

/** @internal */
export type ApplicationDeletePreviewDeployment$Outbound = {
  appName: string;
  applicationId: string;
  branch: string;
  createdAt: string;
  domainId: string | null;
  expiresAt: string | null;
  previewDeploymentId: string;
  previewStatus: string;
  pullRequestCommentId: string;
  pullRequestId: string;
  pullRequestNumber: string;
  pullRequestTitle: string;
  pullRequestURL: string;
};

/** @internal */
export const ApplicationDeletePreviewDeployment$outboundSchema: z.ZodType<
  ApplicationDeletePreviewDeployment$Outbound,
  z.ZodTypeDef,
  ApplicationDeletePreviewDeployment
> = z.object({
  appName: z.string(),
  applicationId: z.string(),
  branch: z.string(),
  createdAt: z.string(),
  domainId: z.nullable(z.string()),
  expiresAt: z.nullable(z.string()),
  previewDeploymentId: z.string(),
  previewStatus: ApplicationDeletePreviewStatus$outboundSchema,
  pullRequestCommentId: z.string(),
  pullRequestId: z.string(),
  pullRequestNumber: z.string(),
  pullRequestTitle: z.string(),
  pullRequestURL: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeletePreviewDeployment$ {
  /** @deprecated use `ApplicationDeletePreviewDeployment$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeletePreviewDeployment$inboundSchema;
  /** @deprecated use `ApplicationDeletePreviewDeployment$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationDeletePreviewDeployment$outboundSchema;
  /** @deprecated use `ApplicationDeletePreviewDeployment$Outbound` instead. */
  export type Outbound = ApplicationDeletePreviewDeployment$Outbound;
}

export function applicationDeletePreviewDeploymentToJSON(
  applicationDeletePreviewDeployment: ApplicationDeletePreviewDeployment,
): string {
  return JSON.stringify(
    ApplicationDeletePreviewDeployment$outboundSchema.parse(
      applicationDeletePreviewDeployment,
    ),
  );
}

export function applicationDeletePreviewDeploymentFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeletePreviewDeployment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationDeletePreviewDeployment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeletePreviewDeployment' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteRedirect$inboundSchema: z.ZodType<
  ApplicationDeleteRedirect,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string(),
  createdAt: z.string(),
  permanent: z.boolean(),
  redirectId: z.string(),
  regex: z.string(),
  replacement: z.string(),
  uniqueConfigKey: z.number(),
});

/** @internal */
export type ApplicationDeleteRedirect$Outbound = {
  applicationId: string;
  createdAt: string;
  permanent: boolean;
  redirectId: string;
  regex: string;
  replacement: string;
  uniqueConfigKey: number;
};

/** @internal */
export const ApplicationDeleteRedirect$outboundSchema: z.ZodType<
  ApplicationDeleteRedirect$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteRedirect
> = z.object({
  applicationId: z.string(),
  createdAt: z.string(),
  permanent: z.boolean(),
  redirectId: z.string(),
  regex: z.string(),
  replacement: z.string(),
  uniqueConfigKey: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteRedirect$ {
  /** @deprecated use `ApplicationDeleteRedirect$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteRedirect$inboundSchema;
  /** @deprecated use `ApplicationDeleteRedirect$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteRedirect$outboundSchema;
  /** @deprecated use `ApplicationDeleteRedirect$Outbound` instead. */
  export type Outbound = ApplicationDeleteRedirect$Outbound;
}

export function applicationDeleteRedirectToJSON(
  applicationDeleteRedirect: ApplicationDeleteRedirect,
): string {
  return JSON.stringify(
    ApplicationDeleteRedirect$outboundSchema.parse(applicationDeleteRedirect),
  );
}

export function applicationDeleteRedirectFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteRedirect, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeleteRedirect$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteRedirect' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteRegistryType$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeleteRegistryType
> = z.nativeEnum(ApplicationDeleteRegistryType);

/** @internal */
export const ApplicationDeleteRegistryType$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeleteRegistryType
> = ApplicationDeleteRegistryType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteRegistryType$ {
  /** @deprecated use `ApplicationDeleteRegistryType$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteRegistryType$inboundSchema;
  /** @deprecated use `ApplicationDeleteRegistryType$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteRegistryType$outboundSchema;
}

/** @internal */
export const ApplicationDeleteRegistry$inboundSchema: z.ZodType<
  ApplicationDeleteRegistry,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  imagePrefix: z.nullable(z.string()),
  organizationId: z.string(),
  password: z.string(),
  registryId: z.string(),
  registryName: z.string(),
  registryType: ApplicationDeleteRegistryType$inboundSchema,
  registryUrl: z.string(),
  username: z.string(),
});

/** @internal */
export type ApplicationDeleteRegistry$Outbound = {
  createdAt: string;
  imagePrefix: string | null;
  organizationId: string;
  password: string;
  registryId: string;
  registryName: string;
  registryType: string;
  registryUrl: string;
  username: string;
};

/** @internal */
export const ApplicationDeleteRegistry$outboundSchema: z.ZodType<
  ApplicationDeleteRegistry$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteRegistry
> = z.object({
  createdAt: z.string(),
  imagePrefix: z.nullable(z.string()),
  organizationId: z.string(),
  password: z.string(),
  registryId: z.string(),
  registryName: z.string(),
  registryType: ApplicationDeleteRegistryType$outboundSchema,
  registryUrl: z.string(),
  username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteRegistry$ {
  /** @deprecated use `ApplicationDeleteRegistry$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteRegistry$inboundSchema;
  /** @deprecated use `ApplicationDeleteRegistry$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteRegistry$outboundSchema;
  /** @deprecated use `ApplicationDeleteRegistry$Outbound` instead. */
  export type Outbound = ApplicationDeleteRegistry$Outbound;
}

export function applicationDeleteRegistryToJSON(
  applicationDeleteRegistry: ApplicationDeleteRegistry,
): string {
  return JSON.stringify(
    ApplicationDeleteRegistry$outboundSchema.parse(applicationDeleteRegistry),
  );
}

export function applicationDeleteRegistryFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteRegistry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeleteRegistry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteRegistry' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteRestartPolicySwarm$inboundSchema: z.ZodType<
  ApplicationDeleteRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type ApplicationDeleteRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const ApplicationDeleteRestartPolicySwarm$outboundSchema: z.ZodType<
  ApplicationDeleteRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteRestartPolicySwarm$ {
  /** @deprecated use `ApplicationDeleteRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationDeleteRestartPolicySwarm$inboundSchema;
  /** @deprecated use `ApplicationDeleteRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationDeleteRestartPolicySwarm$outboundSchema;
  /** @deprecated use `ApplicationDeleteRestartPolicySwarm$Outbound` instead. */
  export type Outbound = ApplicationDeleteRestartPolicySwarm$Outbound;
}

export function applicationDeleteRestartPolicySwarmToJSON(
  applicationDeleteRestartPolicySwarm: ApplicationDeleteRestartPolicySwarm,
): string {
  return JSON.stringify(
    ApplicationDeleteRestartPolicySwarm$outboundSchema.parse(
      applicationDeleteRestartPolicySwarm,
    ),
  );
}

export function applicationDeleteRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationDeleteRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteRollbackConfigSwarm$inboundSchema: z.ZodType<
  ApplicationDeleteRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  MaxFailureRatio: z.number().optional(),
  Monitor: z.number().optional(),
  Order: z.string(),
  Parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    "Delay": "delay",
    "FailureAction": "failureAction",
    "MaxFailureRatio": "maxFailureRatio",
    "Monitor": "monitor",
    "Order": "order",
    "Parallelism": "parallelism",
  });
});

/** @internal */
export type ApplicationDeleteRollbackConfigSwarm$Outbound = {
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  MaxFailureRatio?: number | undefined;
  Monitor?: number | undefined;
  Order: string;
  Parallelism: number;
};

/** @internal */
export const ApplicationDeleteRollbackConfigSwarm$outboundSchema: z.ZodType<
  ApplicationDeleteRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteRollbackConfigSwarm
> = z.object({
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  maxFailureRatio: z.number().optional(),
  monitor: z.number().optional(),
  order: z.string(),
  parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    delay: "Delay",
    failureAction: "FailureAction",
    maxFailureRatio: "MaxFailureRatio",
    monitor: "Monitor",
    order: "Order",
    parallelism: "Parallelism",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteRollbackConfigSwarm$ {
  /** @deprecated use `ApplicationDeleteRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationDeleteRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `ApplicationDeleteRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationDeleteRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `ApplicationDeleteRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = ApplicationDeleteRollbackConfigSwarm$Outbound;
}

export function applicationDeleteRollbackConfigSwarmToJSON(
  applicationDeleteRollbackConfigSwarm: ApplicationDeleteRollbackConfigSwarm,
): string {
  return JSON.stringify(
    ApplicationDeleteRollbackConfigSwarm$outboundSchema.parse(
      applicationDeleteRollbackConfigSwarm,
    ),
  );
}

export function applicationDeleteRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteRollbackConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationDeleteRollbackConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteSecurityResponse$inboundSchema: z.ZodType<
  ApplicationDeleteSecurityResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string(),
  createdAt: z.string(),
  password: z.string(),
  securityId: z.string(),
  username: z.string(),
});

/** @internal */
export type ApplicationDeleteSecurityResponse$Outbound = {
  applicationId: string;
  createdAt: string;
  password: string;
  securityId: string;
  username: string;
};

/** @internal */
export const ApplicationDeleteSecurityResponse$outboundSchema: z.ZodType<
  ApplicationDeleteSecurityResponse$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteSecurityResponse
> = z.object({
  applicationId: z.string(),
  createdAt: z.string(),
  password: z.string(),
  securityId: z.string(),
  username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteSecurityResponse$ {
  /** @deprecated use `ApplicationDeleteSecurityResponse$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteSecurityResponse$inboundSchema;
  /** @deprecated use `ApplicationDeleteSecurityResponse$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationDeleteSecurityResponse$outboundSchema;
  /** @deprecated use `ApplicationDeleteSecurityResponse$Outbound` instead. */
  export type Outbound = ApplicationDeleteSecurityResponse$Outbound;
}

export function applicationDeleteSecurityResponseToJSON(
  applicationDeleteSecurityResponse: ApplicationDeleteSecurityResponse,
): string {
  return JSON.stringify(
    ApplicationDeleteSecurityResponse$outboundSchema.parse(
      applicationDeleteSecurityResponse,
    ),
  );
}

export function applicationDeleteSecurityResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteSecurityResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeleteSecurityResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteSecurityResponse' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteMetricsConfigEnum$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeleteMetricsConfigEnum
> = z.nativeEnum(ApplicationDeleteMetricsConfigEnum);

/** @internal */
export const ApplicationDeleteMetricsConfigEnum$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeleteMetricsConfigEnum
> = ApplicationDeleteMetricsConfigEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteMetricsConfigEnum$ {
  /** @deprecated use `ApplicationDeleteMetricsConfigEnum$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteMetricsConfigEnum$inboundSchema;
  /** @deprecated use `ApplicationDeleteMetricsConfigEnum$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationDeleteMetricsConfigEnum$outboundSchema;
}

/** @internal */
export const ApplicationDeleteMetricsConfigUnion1$inboundSchema: z.ZodType<
  ApplicationDeleteMetricsConfigUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  ApplicationDeleteMetricsConfigEnum$inboundSchema,
]);

/** @internal */
export type ApplicationDeleteMetricsConfigUnion1$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const ApplicationDeleteMetricsConfigUnion1$outboundSchema: z.ZodType<
  ApplicationDeleteMetricsConfigUnion1$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteMetricsConfigUnion1
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  ApplicationDeleteMetricsConfigEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteMetricsConfigUnion1$ {
  /** @deprecated use `ApplicationDeleteMetricsConfigUnion1$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationDeleteMetricsConfigUnion1$inboundSchema;
  /** @deprecated use `ApplicationDeleteMetricsConfigUnion1$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationDeleteMetricsConfigUnion1$outboundSchema;
  /** @deprecated use `ApplicationDeleteMetricsConfigUnion1$Outbound` instead. */
  export type Outbound = ApplicationDeleteMetricsConfigUnion1$Outbound;
}

export function applicationDeleteMetricsConfigUnion1ToJSON(
  applicationDeleteMetricsConfigUnion1: ApplicationDeleteMetricsConfigUnion1,
): string {
  return JSON.stringify(
    ApplicationDeleteMetricsConfigUnion1$outboundSchema.parse(
      applicationDeleteMetricsConfigUnion1,
    ),
  );
}

export function applicationDeleteMetricsConfigUnion1FromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteMetricsConfigUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationDeleteMetricsConfigUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteMetricsConfigUnion1' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteMetricsConfigUnion2$inboundSchema: z.ZodType<
  ApplicationDeleteMetricsConfigUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    ApplicationDeleteMetricsConfigEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type ApplicationDeleteMetricsConfigUnion2$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const ApplicationDeleteMetricsConfigUnion2$outboundSchema: z.ZodType<
  ApplicationDeleteMetricsConfigUnion2$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteMetricsConfigUnion2
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    ApplicationDeleteMetricsConfigEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteMetricsConfigUnion2$ {
  /** @deprecated use `ApplicationDeleteMetricsConfigUnion2$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationDeleteMetricsConfigUnion2$inboundSchema;
  /** @deprecated use `ApplicationDeleteMetricsConfigUnion2$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationDeleteMetricsConfigUnion2$outboundSchema;
  /** @deprecated use `ApplicationDeleteMetricsConfigUnion2$Outbound` instead. */
  export type Outbound = ApplicationDeleteMetricsConfigUnion2$Outbound;
}

export function applicationDeleteMetricsConfigUnion2ToJSON(
  applicationDeleteMetricsConfigUnion2: ApplicationDeleteMetricsConfigUnion2,
): string {
  return JSON.stringify(
    ApplicationDeleteMetricsConfigUnion2$outboundSchema.parse(
      applicationDeleteMetricsConfigUnion2,
    ),
  );
}

export function applicationDeleteMetricsConfigUnion2FromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteMetricsConfigUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationDeleteMetricsConfigUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteMetricsConfigUnion2' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteServerStatus$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeleteServerStatus
> = z.nativeEnum(ApplicationDeleteServerStatus);

/** @internal */
export const ApplicationDeleteServerStatus$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeleteServerStatus
> = ApplicationDeleteServerStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteServerStatus$ {
  /** @deprecated use `ApplicationDeleteServerStatus$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteServerStatus$inboundSchema;
  /** @deprecated use `ApplicationDeleteServerStatus$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteServerStatus$outboundSchema;
}

/** @internal */
export const ApplicationDeleteServer$inboundSchema: z.ZodType<
  ApplicationDeleteServer,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  command: z.string(),
  createdAt: z.string(),
  description: z.nullable(z.string()),
  enableDockerCleanup: z.boolean(),
  ipAddress: z.string(),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      ApplicationDeleteMetricsConfigEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
  name: z.string(),
  organizationId: z.string(),
  port: z.number(),
  serverId: z.string(),
  serverStatus: ApplicationDeleteServerStatus$inboundSchema,
  sshKeyId: z.nullable(z.string()),
  username: z.string(),
});

/** @internal */
export type ApplicationDeleteServer$Outbound = {
  appName: string;
  command: string;
  createdAt: string;
  description: string | null;
  enableDockerCleanup: boolean;
  ipAddress: string;
  metricsConfig: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  };
  name: string;
  organizationId: string;
  port: number;
  serverId: string;
  serverStatus: string;
  sshKeyId: string | null;
  username: string;
};

/** @internal */
export const ApplicationDeleteServer$outboundSchema: z.ZodType<
  ApplicationDeleteServer$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteServer
> = z.object({
  appName: z.string(),
  command: z.string(),
  createdAt: z.string(),
  description: z.nullable(z.string()),
  enableDockerCleanup: z.boolean(),
  ipAddress: z.string(),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      ApplicationDeleteMetricsConfigEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
  name: z.string(),
  organizationId: z.string(),
  port: z.number(),
  serverId: z.string(),
  serverStatus: ApplicationDeleteServerStatus$outboundSchema,
  sshKeyId: z.nullable(z.string()),
  username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteServer$ {
  /** @deprecated use `ApplicationDeleteServer$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteServer$inboundSchema;
  /** @deprecated use `ApplicationDeleteServer$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteServer$outboundSchema;
  /** @deprecated use `ApplicationDeleteServer$Outbound` instead. */
  export type Outbound = ApplicationDeleteServer$Outbound;
}

export function applicationDeleteServerToJSON(
  applicationDeleteServer: ApplicationDeleteServer,
): string {
  return JSON.stringify(
    ApplicationDeleteServer$outboundSchema.parse(applicationDeleteServer),
  );
}

export function applicationDeleteServerFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteServer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeleteServer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteServer' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteSourceType$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeleteSourceType
> = z.nativeEnum(ApplicationDeleteSourceType);

/** @internal */
export const ApplicationDeleteSourceType$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeleteSourceType
> = ApplicationDeleteSourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteSourceType$ {
  /** @deprecated use `ApplicationDeleteSourceType$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteSourceType$inboundSchema;
  /** @deprecated use `ApplicationDeleteSourceType$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteSourceType$outboundSchema;
}

/** @internal */
export const ApplicationDeleteTriggerType$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeleteTriggerType
> = z.nativeEnum(ApplicationDeleteTriggerType);

/** @internal */
export const ApplicationDeleteTriggerType$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationDeleteTriggerType
> = ApplicationDeleteTriggerType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteTriggerType$ {
  /** @deprecated use `ApplicationDeleteTriggerType$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteTriggerType$inboundSchema;
  /** @deprecated use `ApplicationDeleteTriggerType$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteTriggerType$outboundSchema;
}

/** @internal */
export const ApplicationDeleteUpdateConfigSwarm$inboundSchema: z.ZodType<
  ApplicationDeleteUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  MaxFailureRatio: z.number().optional(),
  Monitor: z.number().optional(),
  Order: z.string(),
  Parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    "Delay": "delay",
    "FailureAction": "failureAction",
    "MaxFailureRatio": "maxFailureRatio",
    "Monitor": "monitor",
    "Order": "order",
    "Parallelism": "parallelism",
  });
});

/** @internal */
export type ApplicationDeleteUpdateConfigSwarm$Outbound = {
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  MaxFailureRatio?: number | undefined;
  Monitor?: number | undefined;
  Order: string;
  Parallelism: number;
};

/** @internal */
export const ApplicationDeleteUpdateConfigSwarm$outboundSchema: z.ZodType<
  ApplicationDeleteUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteUpdateConfigSwarm
> = z.object({
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  maxFailureRatio: z.number().optional(),
  monitor: z.number().optional(),
  order: z.string(),
  parallelism: z.number(),
}).transform((v) => {
  return remap$(v, {
    delay: "Delay",
    failureAction: "FailureAction",
    maxFailureRatio: "MaxFailureRatio",
    monitor: "Monitor",
    order: "Order",
    parallelism: "Parallelism",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteUpdateConfigSwarm$ {
  /** @deprecated use `ApplicationDeleteUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `ApplicationDeleteUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationDeleteUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `ApplicationDeleteUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = ApplicationDeleteUpdateConfigSwarm$Outbound;
}

export function applicationDeleteUpdateConfigSwarmToJSON(
  applicationDeleteUpdateConfigSwarm: ApplicationDeleteUpdateConfigSwarm,
): string {
  return JSON.stringify(
    ApplicationDeleteUpdateConfigSwarm$outboundSchema.parse(
      applicationDeleteUpdateConfigSwarm,
    ),
  );
}

export function applicationDeleteUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApplicationDeleteUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteResponseBody$inboundSchema: z.ZodType<
  ApplicationDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string().optional(),
  applicationId: z.string().optional(),
  applicationStatus: ApplicationDeleteApplicationStatus$inboundSchema
    .optional(),
  autoDeploy: z.nullable(z.boolean()).optional(),
  bitbucket: z.nullable(z.lazy(() => ApplicationDeleteBitbucket$inboundSchema)),
  bitbucketBranch: z.nullable(z.string()).optional(),
  bitbucketBuildPath: z.nullable(z.string()).optional(),
  bitbucketId: z.nullable(z.string()).optional(),
  bitbucketOwner: z.nullable(z.string()).optional(),
  bitbucketRepository: z.nullable(z.string()).optional(),
  branch: z.nullable(z.string()).optional(),
  buildArgs: z.nullable(z.string()).optional(),
  buildPath: z.nullable(z.string()).optional(),
  buildType: ApplicationDeleteBuildType$inboundSchema.optional(),
  cleanCache: z.nullable(z.boolean()).optional(),
  command: z.nullable(z.string()).optional(),
  cpuLimit: z.nullable(z.string()).optional(),
  cpuReservation: z.nullable(z.string()).optional(),
  createdAt: z.string().optional(),
  customGitBranch: z.nullable(z.string()).optional(),
  customGitBuildPath: z.nullable(z.string()).optional(),
  customGitSSHKeyId: z.nullable(z.string()).optional(),
  customGitUrl: z.nullable(z.string()).optional(),
  deployments: z.array(z.lazy(() => ApplicationDeleteDeployment$inboundSchema)),
  description: z.nullable(z.string()).optional(),
  dockerBuildStage: z.nullable(z.string()).optional(),
  dockerContextPath: z.nullable(z.string()).optional(),
  dockerImage: z.nullable(z.string()).optional(),
  dockerfile: z.nullable(z.string()).optional(),
  domains: z.array(z.lazy(() => ApplicationDeleteDomain$inboundSchema)),
  dropBuildPath: z.nullable(z.string()).optional(),
  enableSubmodules: z.boolean().optional(),
  enabled: z.nullable(z.boolean()).optional(),
  env: z.nullable(z.string()).optional(),
  environment: z.lazy(() => ApplicationDeleteEnvironment$inboundSchema),
  environmentId: z.string(),
  gitea: z.nullable(z.lazy(() => ApplicationDeleteGitea$inboundSchema)),
  giteaBranch: z.nullable(z.string()).optional(),
  giteaBuildPath: z.nullable(z.string()).optional(),
  giteaId: z.nullable(z.string()).optional(),
  giteaOwner: z.nullable(z.string()).optional(),
  giteaRepository: z.nullable(z.string()).optional(),
  github: z.nullable(z.lazy(() => ApplicationDeleteGithub$inboundSchema)),
  githubId: z.nullable(z.string()).optional(),
  gitlab: z.nullable(z.lazy(() => ApplicationDeleteGitlab$inboundSchema)),
  gitlabBranch: z.nullable(z.string()).optional(),
  gitlabBuildPath: z.nullable(z.string()).optional(),
  gitlabId: z.nullable(z.string()).optional(),
  gitlabOwner: z.nullable(z.string()).optional(),
  gitlabPathNamespace: z.nullable(z.string()).optional(),
  gitlabProjectId: z.nullable(z.number()).optional(),
  gitlabRepository: z.nullable(z.string()).optional(),
  healthCheckSwarm: z.nullable(
    z.lazy(() => ApplicationDeleteHealthCheckSwarm$inboundSchema),
  ).optional(),
  herokuVersion: z.nullable(z.string()).optional(),
  isPreviewDeploymentsActive: z.nullable(z.boolean()).optional(),
  isStaticSpa: z.nullable(z.boolean()).optional(),
  labelsSwarm: z.nullable(z.record(z.string())).optional(),
  memoryLimit: z.nullable(z.string()).optional(),
  memoryReservation: z.nullable(z.string()).optional(),
  modeSwarm: z.nullable(z.lazy(() => ApplicationDeleteModeSwarm$inboundSchema))
    .optional(),
  mounts: z.array(z.lazy(() => ApplicationDeleteMount$inboundSchema)),
  name: z.string(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => ApplicationDeleteNetworkSwarm$inboundSchema)),
  ).optional(),
  owner: z.nullable(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  placementSwarm: z.nullable(
    z.lazy(() => ApplicationDeletePlacementSwarm$inboundSchema),
  ).optional(),
  ports: z.array(z.lazy(() => ApplicationDeletePort$inboundSchema)),
  previewBuildArgs: z.nullable(z.string()).optional(),
  previewCertificateType: ApplicationDeletePreviewCertificateType$inboundSchema
    .optional(),
  previewCustomCertResolver: z.nullable(z.string()).optional(),
  previewDeployments: z.array(
    z.lazy(() => ApplicationDeletePreviewDeployment$inboundSchema),
  ),
  previewEnv: z.nullable(z.string()).optional(),
  previewHttps: z.boolean().optional(),
  previewLabels: z.nullable(z.array(z.string())).optional(),
  previewLimit: z.nullable(z.number()).optional(),
  previewPath: z.nullable(z.string()).optional(),
  previewPort: z.nullable(z.number()).optional(),
  previewRequireCollaboratorPermissions: z.nullable(z.boolean()).optional(),
  previewWildcard: z.nullable(z.string()).optional(),
  publishDirectory: z.nullable(z.string()).optional(),
  railpackVersion: z.nullable(z.string()).optional(),
  redirects: z.array(z.lazy(() => ApplicationDeleteRedirect$inboundSchema)),
  refreshToken: z.nullable(z.string()).optional(),
  registry: z.nullable(z.lazy(() => ApplicationDeleteRegistry$inboundSchema)),
  registryId: z.nullable(z.string()).optional(),
  registryUrl: z.nullable(z.string()).optional(),
  replicas: z.number().optional(),
  repository: z.nullable(z.string()).optional(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => ApplicationDeleteRestartPolicySwarm$inboundSchema),
  ).optional(),
  rollbackActive: z.nullable(z.boolean()).optional(),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => ApplicationDeleteRollbackConfigSwarm$inboundSchema),
  ).optional(),
  security: z.array(
    z.lazy(() => ApplicationDeleteSecurityResponse$inboundSchema),
  ),
  server: z.nullable(z.lazy(() => ApplicationDeleteServer$inboundSchema)),
  serverId: z.nullable(z.string()).optional(),
  sourceType: ApplicationDeleteSourceType$inboundSchema.optional(),
  subtitle: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  triggerType: z.nullable(ApplicationDeleteTriggerType$inboundSchema)
    .optional(),
  updateConfigSwarm: z.nullable(
    z.lazy(() => ApplicationDeleteUpdateConfigSwarm$inboundSchema),
  ).optional(),
  username: z.nullable(z.string()).optional(),
  watchPaths: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type ApplicationDeleteResponseBody$Outbound = {
  appName?: string | undefined;
  applicationId?: string | undefined;
  applicationStatus?: string | undefined;
  autoDeploy?: boolean | null | undefined;
  bitbucket: ApplicationDeleteBitbucket$Outbound | null;
  bitbucketBranch?: string | null | undefined;
  bitbucketBuildPath?: string | null | undefined;
  bitbucketId?: string | null | undefined;
  bitbucketOwner?: string | null | undefined;
  bitbucketRepository?: string | null | undefined;
  branch?: string | null | undefined;
  buildArgs?: string | null | undefined;
  buildPath?: string | null | undefined;
  buildType?: string | undefined;
  cleanCache?: boolean | null | undefined;
  command?: string | null | undefined;
  cpuLimit?: string | null | undefined;
  cpuReservation?: string | null | undefined;
  createdAt?: string | undefined;
  customGitBranch?: string | null | undefined;
  customGitBuildPath?: string | null | undefined;
  customGitSSHKeyId?: string | null | undefined;
  customGitUrl?: string | null | undefined;
  deployments: Array<ApplicationDeleteDeployment$Outbound>;
  description?: string | null | undefined;
  dockerBuildStage?: string | null | undefined;
  dockerContextPath?: string | null | undefined;
  dockerImage?: string | null | undefined;
  dockerfile?: string | null | undefined;
  domains: Array<ApplicationDeleteDomain$Outbound>;
  dropBuildPath?: string | null | undefined;
  enableSubmodules?: boolean | undefined;
  enabled?: boolean | null | undefined;
  env?: string | null | undefined;
  environment: ApplicationDeleteEnvironment$Outbound;
  environmentId: string;
  gitea: ApplicationDeleteGitea$Outbound | null;
  giteaBranch?: string | null | undefined;
  giteaBuildPath?: string | null | undefined;
  giteaId?: string | null | undefined;
  giteaOwner?: string | null | undefined;
  giteaRepository?: string | null | undefined;
  github: ApplicationDeleteGithub$Outbound | null;
  githubId?: string | null | undefined;
  gitlab: ApplicationDeleteGitlab$Outbound | null;
  gitlabBranch?: string | null | undefined;
  gitlabBuildPath?: string | null | undefined;
  gitlabId?: string | null | undefined;
  gitlabOwner?: string | null | undefined;
  gitlabPathNamespace?: string | null | undefined;
  gitlabProjectId?: number | null | undefined;
  gitlabRepository?: string | null | undefined;
  healthCheckSwarm?:
    | ApplicationDeleteHealthCheckSwarm$Outbound
    | null
    | undefined;
  herokuVersion?: string | null | undefined;
  isPreviewDeploymentsActive?: boolean | null | undefined;
  isStaticSpa?: boolean | null | undefined;
  labelsSwarm?: { [k: string]: string } | null | undefined;
  memoryLimit?: string | null | undefined;
  memoryReservation?: string | null | undefined;
  modeSwarm?: ApplicationDeleteModeSwarm$Outbound | null | undefined;
  mounts: Array<ApplicationDeleteMount$Outbound>;
  name: string;
  networkSwarm?:
    | Array<ApplicationDeleteNetworkSwarm$Outbound>
    | null
    | undefined;
  owner?: string | null | undefined;
  password?: string | null | undefined;
  placementSwarm?: ApplicationDeletePlacementSwarm$Outbound | null | undefined;
  ports: Array<ApplicationDeletePort$Outbound>;
  previewBuildArgs?: string | null | undefined;
  previewCertificateType?: string | undefined;
  previewCustomCertResolver?: string | null | undefined;
  previewDeployments: Array<ApplicationDeletePreviewDeployment$Outbound>;
  previewEnv?: string | null | undefined;
  previewHttps?: boolean | undefined;
  previewLabels?: Array<string> | null | undefined;
  previewLimit?: number | null | undefined;
  previewPath?: string | null | undefined;
  previewPort?: number | null | undefined;
  previewRequireCollaboratorPermissions?: boolean | null | undefined;
  previewWildcard?: string | null | undefined;
  publishDirectory?: string | null | undefined;
  railpackVersion?: string | null | undefined;
  redirects: Array<ApplicationDeleteRedirect$Outbound>;
  refreshToken?: string | null | undefined;
  registry: ApplicationDeleteRegistry$Outbound | null;
  registryId?: string | null | undefined;
  registryUrl?: string | null | undefined;
  replicas?: number | undefined;
  repository?: string | null | undefined;
  restartPolicySwarm?:
    | ApplicationDeleteRestartPolicySwarm$Outbound
    | null
    | undefined;
  rollbackActive?: boolean | null | undefined;
  rollbackConfigSwarm?:
    | ApplicationDeleteRollbackConfigSwarm$Outbound
    | null
    | undefined;
  security: Array<ApplicationDeleteSecurityResponse$Outbound>;
  server: ApplicationDeleteServer$Outbound | null;
  serverId?: string | null | undefined;
  sourceType?: string | undefined;
  subtitle?: string | null | undefined;
  title?: string | null | undefined;
  triggerType?: string | null | undefined;
  updateConfigSwarm?:
    | ApplicationDeleteUpdateConfigSwarm$Outbound
    | null
    | undefined;
  username?: string | null | undefined;
  watchPaths?: Array<string> | null | undefined;
};

/** @internal */
export const ApplicationDeleteResponseBody$outboundSchema: z.ZodType<
  ApplicationDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteResponseBody
> = z.object({
  appName: z.string().optional(),
  applicationId: z.string().optional(),
  applicationStatus: ApplicationDeleteApplicationStatus$outboundSchema
    .optional(),
  autoDeploy: z.nullable(z.boolean()).optional(),
  bitbucket: z.nullable(
    z.lazy(() => ApplicationDeleteBitbucket$outboundSchema),
  ),
  bitbucketBranch: z.nullable(z.string()).optional(),
  bitbucketBuildPath: z.nullable(z.string()).optional(),
  bitbucketId: z.nullable(z.string()).optional(),
  bitbucketOwner: z.nullable(z.string()).optional(),
  bitbucketRepository: z.nullable(z.string()).optional(),
  branch: z.nullable(z.string()).optional(),
  buildArgs: z.nullable(z.string()).optional(),
  buildPath: z.nullable(z.string()).optional(),
  buildType: ApplicationDeleteBuildType$outboundSchema.optional(),
  cleanCache: z.nullable(z.boolean()).optional(),
  command: z.nullable(z.string()).optional(),
  cpuLimit: z.nullable(z.string()).optional(),
  cpuReservation: z.nullable(z.string()).optional(),
  createdAt: z.string().optional(),
  customGitBranch: z.nullable(z.string()).optional(),
  customGitBuildPath: z.nullable(z.string()).optional(),
  customGitSSHKeyId: z.nullable(z.string()).optional(),
  customGitUrl: z.nullable(z.string()).optional(),
  deployments: z.array(
    z.lazy(() => ApplicationDeleteDeployment$outboundSchema),
  ),
  description: z.nullable(z.string()).optional(),
  dockerBuildStage: z.nullable(z.string()).optional(),
  dockerContextPath: z.nullable(z.string()).optional(),
  dockerImage: z.nullable(z.string()).optional(),
  dockerfile: z.nullable(z.string()).optional(),
  domains: z.array(z.lazy(() => ApplicationDeleteDomain$outboundSchema)),
  dropBuildPath: z.nullable(z.string()).optional(),
  enableSubmodules: z.boolean().optional(),
  enabled: z.nullable(z.boolean()).optional(),
  env: z.nullable(z.string()).optional(),
  environment: z.lazy(() => ApplicationDeleteEnvironment$outboundSchema),
  environmentId: z.string(),
  gitea: z.nullable(z.lazy(() => ApplicationDeleteGitea$outboundSchema)),
  giteaBranch: z.nullable(z.string()).optional(),
  giteaBuildPath: z.nullable(z.string()).optional(),
  giteaId: z.nullable(z.string()).optional(),
  giteaOwner: z.nullable(z.string()).optional(),
  giteaRepository: z.nullable(z.string()).optional(),
  github: z.nullable(z.lazy(() => ApplicationDeleteGithub$outboundSchema)),
  githubId: z.nullable(z.string()).optional(),
  gitlab: z.nullable(z.lazy(() => ApplicationDeleteGitlab$outboundSchema)),
  gitlabBranch: z.nullable(z.string()).optional(),
  gitlabBuildPath: z.nullable(z.string()).optional(),
  gitlabId: z.nullable(z.string()).optional(),
  gitlabOwner: z.nullable(z.string()).optional(),
  gitlabPathNamespace: z.nullable(z.string()).optional(),
  gitlabProjectId: z.nullable(z.number()).optional(),
  gitlabRepository: z.nullable(z.string()).optional(),
  healthCheckSwarm: z.nullable(
    z.lazy(() => ApplicationDeleteHealthCheckSwarm$outboundSchema),
  ).optional(),
  herokuVersion: z.nullable(z.string()).optional(),
  isPreviewDeploymentsActive: z.nullable(z.boolean()).optional(),
  isStaticSpa: z.nullable(z.boolean()).optional(),
  labelsSwarm: z.nullable(z.record(z.string())).optional(),
  memoryLimit: z.nullable(z.string()).optional(),
  memoryReservation: z.nullable(z.string()).optional(),
  modeSwarm: z.nullable(z.lazy(() => ApplicationDeleteModeSwarm$outboundSchema))
    .optional(),
  mounts: z.array(z.lazy(() => ApplicationDeleteMount$outboundSchema)),
  name: z.string(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => ApplicationDeleteNetworkSwarm$outboundSchema)),
  ).optional(),
  owner: z.nullable(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  placementSwarm: z.nullable(
    z.lazy(() => ApplicationDeletePlacementSwarm$outboundSchema),
  ).optional(),
  ports: z.array(z.lazy(() => ApplicationDeletePort$outboundSchema)),
  previewBuildArgs: z.nullable(z.string()).optional(),
  previewCertificateType: ApplicationDeletePreviewCertificateType$outboundSchema
    .optional(),
  previewCustomCertResolver: z.nullable(z.string()).optional(),
  previewDeployments: z.array(
    z.lazy(() => ApplicationDeletePreviewDeployment$outboundSchema),
  ),
  previewEnv: z.nullable(z.string()).optional(),
  previewHttps: z.boolean().optional(),
  previewLabels: z.nullable(z.array(z.string())).optional(),
  previewLimit: z.nullable(z.number()).optional(),
  previewPath: z.nullable(z.string()).optional(),
  previewPort: z.nullable(z.number()).optional(),
  previewRequireCollaboratorPermissions: z.nullable(z.boolean()).optional(),
  previewWildcard: z.nullable(z.string()).optional(),
  publishDirectory: z.nullable(z.string()).optional(),
  railpackVersion: z.nullable(z.string()).optional(),
  redirects: z.array(z.lazy(() => ApplicationDeleteRedirect$outboundSchema)),
  refreshToken: z.nullable(z.string()).optional(),
  registry: z.nullable(z.lazy(() => ApplicationDeleteRegistry$outboundSchema)),
  registryId: z.nullable(z.string()).optional(),
  registryUrl: z.nullable(z.string()).optional(),
  replicas: z.number().optional(),
  repository: z.nullable(z.string()).optional(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => ApplicationDeleteRestartPolicySwarm$outboundSchema),
  ).optional(),
  rollbackActive: z.nullable(z.boolean()).optional(),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => ApplicationDeleteRollbackConfigSwarm$outboundSchema),
  ).optional(),
  security: z.array(
    z.lazy(() => ApplicationDeleteSecurityResponse$outboundSchema),
  ),
  server: z.nullable(z.lazy(() => ApplicationDeleteServer$outboundSchema)),
  serverId: z.nullable(z.string()).optional(),
  sourceType: ApplicationDeleteSourceType$outboundSchema.optional(),
  subtitle: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  triggerType: z.nullable(ApplicationDeleteTriggerType$outboundSchema)
    .optional(),
  updateConfigSwarm: z.nullable(
    z.lazy(() => ApplicationDeleteUpdateConfigSwarm$outboundSchema),
  ).optional(),
  username: z.nullable(z.string()).optional(),
  watchPaths: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteResponseBody$ {
  /** @deprecated use `ApplicationDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteResponseBody$inboundSchema;
  /** @deprecated use `ApplicationDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteResponseBody$outboundSchema;
  /** @deprecated use `ApplicationDeleteResponseBody$Outbound` instead. */
  export type Outbound = ApplicationDeleteResponseBody$Outbound;
}

export function applicationDeleteResponseBodyToJSON(
  applicationDeleteResponseBody: ApplicationDeleteResponseBody,
): string {
  return JSON.stringify(
    ApplicationDeleteResponseBody$outboundSchema.parse(
      applicationDeleteResponseBody,
    ),
  );
}

export function applicationDeleteResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeleteResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteResponseBody' from JSON`,
  );
}

/** @internal */
export const ApplicationDeleteResponse$inboundSchema: z.ZodType<
  ApplicationDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ApplicationDeleteResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type ApplicationDeleteResponse$Outbound =
  | ApplicationDeleteResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const ApplicationDeleteResponse$outboundSchema: z.ZodType<
  ApplicationDeleteResponse$Outbound,
  z.ZodTypeDef,
  ApplicationDeleteResponse
> = z.union([
  z.lazy(() => ApplicationDeleteResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationDeleteResponse$ {
  /** @deprecated use `ApplicationDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = ApplicationDeleteResponse$inboundSchema;
  /** @deprecated use `ApplicationDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = ApplicationDeleteResponse$outboundSchema;
  /** @deprecated use `ApplicationDeleteResponse$Outbound` instead. */
  export type Outbound = ApplicationDeleteResponse$Outbound;
}

export function applicationDeleteResponseToJSON(
  applicationDeleteResponse: ApplicationDeleteResponse,
): string {
  return JSON.stringify(
    ApplicationDeleteResponse$outboundSchema.parse(applicationDeleteResponse),
  );
}

export function applicationDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationDeleteResponse' from JSON`,
  );
}
