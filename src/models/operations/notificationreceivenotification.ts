/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NotificationReceiveNotificationSecurity = {
  authorization: string;
};

export const ServerType = {
  Dokploy: "Dokploy",
  Remote: "Remote",
} as const;
export type ServerType = ClosedEnum<typeof ServerType>;

export const NotificationReceiveNotificationType = {
  Memory: "Memory",
  Cpu: "CPU",
} as const;
export type NotificationReceiveNotificationType = ClosedEnum<
  typeof NotificationReceiveNotificationType
>;

export type NotificationReceiveNotificationRequest = {
  serverType?: ServerType | undefined;
  type: NotificationReceiveNotificationType;
  value: number;
  threshold: number;
  message: string;
  timestamp: string;
  token: string;
};

/** @internal */
export const NotificationReceiveNotificationSecurity$inboundSchema: z.ZodType<
  NotificationReceiveNotificationSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type NotificationReceiveNotificationSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const NotificationReceiveNotificationSecurity$outboundSchema: z.ZodType<
  NotificationReceiveNotificationSecurity$Outbound,
  z.ZodTypeDef,
  NotificationReceiveNotificationSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationReceiveNotificationSecurity$ {
  /** @deprecated use `NotificationReceiveNotificationSecurity$inboundSchema` instead. */
  export const inboundSchema =
    NotificationReceiveNotificationSecurity$inboundSchema;
  /** @deprecated use `NotificationReceiveNotificationSecurity$outboundSchema` instead. */
  export const outboundSchema =
    NotificationReceiveNotificationSecurity$outboundSchema;
  /** @deprecated use `NotificationReceiveNotificationSecurity$Outbound` instead. */
  export type Outbound = NotificationReceiveNotificationSecurity$Outbound;
}

export function notificationReceiveNotificationSecurityToJSON(
  notificationReceiveNotificationSecurity:
    NotificationReceiveNotificationSecurity,
): string {
  return JSON.stringify(
    NotificationReceiveNotificationSecurity$outboundSchema.parse(
      notificationReceiveNotificationSecurity,
    ),
  );
}

export function notificationReceiveNotificationSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  NotificationReceiveNotificationSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NotificationReceiveNotificationSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'NotificationReceiveNotificationSecurity' from JSON`,
  );
}

/** @internal */
export const ServerType$inboundSchema: z.ZodNativeEnum<typeof ServerType> = z
  .nativeEnum(ServerType);

/** @internal */
export const ServerType$outboundSchema: z.ZodNativeEnum<typeof ServerType> =
  ServerType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServerType$ {
  /** @deprecated use `ServerType$inboundSchema` instead. */
  export const inboundSchema = ServerType$inboundSchema;
  /** @deprecated use `ServerType$outboundSchema` instead. */
  export const outboundSchema = ServerType$outboundSchema;
}

/** @internal */
export const NotificationReceiveNotificationType$inboundSchema: z.ZodNativeEnum<
  typeof NotificationReceiveNotificationType
> = z.nativeEnum(NotificationReceiveNotificationType);

/** @internal */
export const NotificationReceiveNotificationType$outboundSchema:
  z.ZodNativeEnum<typeof NotificationReceiveNotificationType> =
    NotificationReceiveNotificationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationReceiveNotificationType$ {
  /** @deprecated use `NotificationReceiveNotificationType$inboundSchema` instead. */
  export const inboundSchema =
    NotificationReceiveNotificationType$inboundSchema;
  /** @deprecated use `NotificationReceiveNotificationType$outboundSchema` instead. */
  export const outboundSchema =
    NotificationReceiveNotificationType$outboundSchema;
}

/** @internal */
export const NotificationReceiveNotificationRequest$inboundSchema: z.ZodType<
  NotificationReceiveNotificationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ServerType: ServerType$inboundSchema.default("Dokploy"),
  Type: NotificationReceiveNotificationType$inboundSchema,
  Value: z.number(),
  Threshold: z.number(),
  Message: z.string(),
  Timestamp: z.string(),
  Token: z.string(),
}).transform((v) => {
  return remap$(v, {
    "ServerType": "serverType",
    "Type": "type",
    "Value": "value",
    "Threshold": "threshold",
    "Message": "message",
    "Timestamp": "timestamp",
    "Token": "token",
  });
});

/** @internal */
export type NotificationReceiveNotificationRequest$Outbound = {
  ServerType: string;
  Type: string;
  Value: number;
  Threshold: number;
  Message: string;
  Timestamp: string;
  Token: string;
};

/** @internal */
export const NotificationReceiveNotificationRequest$outboundSchema: z.ZodType<
  NotificationReceiveNotificationRequest$Outbound,
  z.ZodTypeDef,
  NotificationReceiveNotificationRequest
> = z.object({
  serverType: ServerType$outboundSchema.default("Dokploy"),
  type: NotificationReceiveNotificationType$outboundSchema,
  value: z.number(),
  threshold: z.number(),
  message: z.string(),
  timestamp: z.string(),
  token: z.string(),
}).transform((v) => {
  return remap$(v, {
    serverType: "ServerType",
    type: "Type",
    value: "Value",
    threshold: "Threshold",
    message: "Message",
    timestamp: "Timestamp",
    token: "Token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationReceiveNotificationRequest$ {
  /** @deprecated use `NotificationReceiveNotificationRequest$inboundSchema` instead. */
  export const inboundSchema =
    NotificationReceiveNotificationRequest$inboundSchema;
  /** @deprecated use `NotificationReceiveNotificationRequest$outboundSchema` instead. */
  export const outboundSchema =
    NotificationReceiveNotificationRequest$outboundSchema;
  /** @deprecated use `NotificationReceiveNotificationRequest$Outbound` instead. */
  export type Outbound = NotificationReceiveNotificationRequest$Outbound;
}

export function notificationReceiveNotificationRequestToJSON(
  notificationReceiveNotificationRequest:
    NotificationReceiveNotificationRequest,
): string {
  return JSON.stringify(
    NotificationReceiveNotificationRequest$outboundSchema.parse(
      notificationReceiveNotificationRequest,
    ),
  );
}

export function notificationReceiveNotificationRequestFromJSON(
  jsonString: string,
): SafeParseResult<NotificationReceiveNotificationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      NotificationReceiveNotificationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationReceiveNotificationRequest' from JSON`,
  );
}
