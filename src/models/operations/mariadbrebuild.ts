/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type MariadbRebuildSecurity = {
  authorization: string;
};

export type MariadbRebuildRequest = {
  mariadbId: string;
};

export type MariadbRebuildResponse = models.ErrorT | boolean;

/** @internal */
export const MariadbRebuildSecurity$inboundSchema: z.ZodType<
  MariadbRebuildSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type MariadbRebuildSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const MariadbRebuildSecurity$outboundSchema: z.ZodType<
  MariadbRebuildSecurity$Outbound,
  z.ZodTypeDef,
  MariadbRebuildSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbRebuildSecurity$ {
  /** @deprecated use `MariadbRebuildSecurity$inboundSchema` instead. */
  export const inboundSchema = MariadbRebuildSecurity$inboundSchema;
  /** @deprecated use `MariadbRebuildSecurity$outboundSchema` instead. */
  export const outboundSchema = MariadbRebuildSecurity$outboundSchema;
  /** @deprecated use `MariadbRebuildSecurity$Outbound` instead. */
  export type Outbound = MariadbRebuildSecurity$Outbound;
}

export function mariadbRebuildSecurityToJSON(
  mariadbRebuildSecurity: MariadbRebuildSecurity,
): string {
  return JSON.stringify(
    MariadbRebuildSecurity$outboundSchema.parse(mariadbRebuildSecurity),
  );
}

export function mariadbRebuildSecurityFromJSON(
  jsonString: string,
): SafeParseResult<MariadbRebuildSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbRebuildSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbRebuildSecurity' from JSON`,
  );
}

/** @internal */
export const MariadbRebuildRequest$inboundSchema: z.ZodType<
  MariadbRebuildRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mariadbId: z.string(),
});

/** @internal */
export type MariadbRebuildRequest$Outbound = {
  mariadbId: string;
};

/** @internal */
export const MariadbRebuildRequest$outboundSchema: z.ZodType<
  MariadbRebuildRequest$Outbound,
  z.ZodTypeDef,
  MariadbRebuildRequest
> = z.object({
  mariadbId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbRebuildRequest$ {
  /** @deprecated use `MariadbRebuildRequest$inboundSchema` instead. */
  export const inboundSchema = MariadbRebuildRequest$inboundSchema;
  /** @deprecated use `MariadbRebuildRequest$outboundSchema` instead. */
  export const outboundSchema = MariadbRebuildRequest$outboundSchema;
  /** @deprecated use `MariadbRebuildRequest$Outbound` instead. */
  export type Outbound = MariadbRebuildRequest$Outbound;
}

export function mariadbRebuildRequestToJSON(
  mariadbRebuildRequest: MariadbRebuildRequest,
): string {
  return JSON.stringify(
    MariadbRebuildRequest$outboundSchema.parse(mariadbRebuildRequest),
  );
}

export function mariadbRebuildRequestFromJSON(
  jsonString: string,
): SafeParseResult<MariadbRebuildRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbRebuildRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbRebuildRequest' from JSON`,
  );
}

/** @internal */
export const MariadbRebuildResponse$inboundSchema: z.ZodType<
  MariadbRebuildResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.boolean()]);

/** @internal */
export type MariadbRebuildResponse$Outbound = models.ErrorT$Outbound | boolean;

/** @internal */
export const MariadbRebuildResponse$outboundSchema: z.ZodType<
  MariadbRebuildResponse$Outbound,
  z.ZodTypeDef,
  MariadbRebuildResponse
> = z.union([models.ErrorT$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MariadbRebuildResponse$ {
  /** @deprecated use `MariadbRebuildResponse$inboundSchema` instead. */
  export const inboundSchema = MariadbRebuildResponse$inboundSchema;
  /** @deprecated use `MariadbRebuildResponse$outboundSchema` instead. */
  export const outboundSchema = MariadbRebuildResponse$outboundSchema;
  /** @deprecated use `MariadbRebuildResponse$Outbound` instead. */
  export type Outbound = MariadbRebuildResponse$Outbound;
}

export function mariadbRebuildResponseToJSON(
  mariadbRebuildResponse: MariadbRebuildResponse,
): string {
  return JSON.stringify(
    MariadbRebuildResponse$outboundSchema.parse(mariadbRebuildResponse),
  );
}

export function mariadbRebuildResponseFromJSON(
  jsonString: string,
): SafeParseResult<MariadbRebuildResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MariadbRebuildResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MariadbRebuildResponse' from JSON`,
  );
}
