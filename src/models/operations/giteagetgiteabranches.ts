/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GiteaGetGiteaBranchesSecurity = {
  authorization: string;
};

export type GiteaGetGiteaBranchesRequest = {
  owner: string;
  repositoryName: string;
  giteaId?: string | undefined;
};

/** @internal */
export const GiteaGetGiteaBranchesSecurity$inboundSchema: z.ZodType<
  GiteaGetGiteaBranchesSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type GiteaGetGiteaBranchesSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const GiteaGetGiteaBranchesSecurity$outboundSchema: z.ZodType<
  GiteaGetGiteaBranchesSecurity$Outbound,
  z.ZodTypeDef,
  GiteaGetGiteaBranchesSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiteaGetGiteaBranchesSecurity$ {
  /** @deprecated use `GiteaGetGiteaBranchesSecurity$inboundSchema` instead. */
  export const inboundSchema = GiteaGetGiteaBranchesSecurity$inboundSchema;
  /** @deprecated use `GiteaGetGiteaBranchesSecurity$outboundSchema` instead. */
  export const outboundSchema = GiteaGetGiteaBranchesSecurity$outboundSchema;
  /** @deprecated use `GiteaGetGiteaBranchesSecurity$Outbound` instead. */
  export type Outbound = GiteaGetGiteaBranchesSecurity$Outbound;
}

export function giteaGetGiteaBranchesSecurityToJSON(
  giteaGetGiteaBranchesSecurity: GiteaGetGiteaBranchesSecurity,
): string {
  return JSON.stringify(
    GiteaGetGiteaBranchesSecurity$outboundSchema.parse(
      giteaGetGiteaBranchesSecurity,
    ),
  );
}

export function giteaGetGiteaBranchesSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GiteaGetGiteaBranchesSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiteaGetGiteaBranchesSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiteaGetGiteaBranchesSecurity' from JSON`,
  );
}

/** @internal */
export const GiteaGetGiteaBranchesRequest$inboundSchema: z.ZodType<
  GiteaGetGiteaBranchesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  owner: z.string(),
  repositoryName: z.string(),
  giteaId: z.string().optional(),
});

/** @internal */
export type GiteaGetGiteaBranchesRequest$Outbound = {
  owner: string;
  repositoryName: string;
  giteaId?: string | undefined;
};

/** @internal */
export const GiteaGetGiteaBranchesRequest$outboundSchema: z.ZodType<
  GiteaGetGiteaBranchesRequest$Outbound,
  z.ZodTypeDef,
  GiteaGetGiteaBranchesRequest
> = z.object({
  owner: z.string(),
  repositoryName: z.string(),
  giteaId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiteaGetGiteaBranchesRequest$ {
  /** @deprecated use `GiteaGetGiteaBranchesRequest$inboundSchema` instead. */
  export const inboundSchema = GiteaGetGiteaBranchesRequest$inboundSchema;
  /** @deprecated use `GiteaGetGiteaBranchesRequest$outboundSchema` instead. */
  export const outboundSchema = GiteaGetGiteaBranchesRequest$outboundSchema;
  /** @deprecated use `GiteaGetGiteaBranchesRequest$Outbound` instead. */
  export type Outbound = GiteaGetGiteaBranchesRequest$Outbound;
}

export function giteaGetGiteaBranchesRequestToJSON(
  giteaGetGiteaBranchesRequest: GiteaGetGiteaBranchesRequest,
): string {
  return JSON.stringify(
    GiteaGetGiteaBranchesRequest$outboundSchema.parse(
      giteaGetGiteaBranchesRequest,
    ),
  );
}

export function giteaGetGiteaBranchesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GiteaGetGiteaBranchesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiteaGetGiteaBranchesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiteaGetGiteaBranchesRequest' from JSON`,
  );
}
