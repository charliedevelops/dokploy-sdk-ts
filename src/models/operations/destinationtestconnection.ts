/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DestinationTestConnectionRequest = {
  accessKey: string;
  bucket: string;
  endpoint: string;
  name: string;
  provider: string | null;
  region: string;
  secretAccessKey: string;
  serverId?: string | undefined;
};

/** @internal */
export const DestinationTestConnectionRequest$inboundSchema: z.ZodType<
  DestinationTestConnectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessKey: z.string(),
  bucket: z.string(),
  endpoint: z.string(),
  name: z.string(),
  provider: z.nullable(z.string()),
  region: z.string(),
  secretAccessKey: z.string(),
  serverId: z.string().optional(),
});

/** @internal */
export type DestinationTestConnectionRequest$Outbound = {
  accessKey: string;
  bucket: string;
  endpoint: string;
  name: string;
  provider: string | null;
  region: string;
  secretAccessKey: string;
  serverId?: string | undefined;
};

/** @internal */
export const DestinationTestConnectionRequest$outboundSchema: z.ZodType<
  DestinationTestConnectionRequest$Outbound,
  z.ZodTypeDef,
  DestinationTestConnectionRequest
> = z.object({
  accessKey: z.string(),
  bucket: z.string(),
  endpoint: z.string(),
  name: z.string(),
  provider: z.nullable(z.string()),
  region: z.string(),
  secretAccessKey: z.string(),
  serverId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationTestConnectionRequest$ {
  /** @deprecated use `DestinationTestConnectionRequest$inboundSchema` instead. */
  export const inboundSchema = DestinationTestConnectionRequest$inboundSchema;
  /** @deprecated use `DestinationTestConnectionRequest$outboundSchema` instead. */
  export const outboundSchema = DestinationTestConnectionRequest$outboundSchema;
  /** @deprecated use `DestinationTestConnectionRequest$Outbound` instead. */
  export type Outbound = DestinationTestConnectionRequest$Outbound;
}

export function destinationTestConnectionRequestToJSON(
  destinationTestConnectionRequest: DestinationTestConnectionRequest,
): string {
  return JSON.stringify(
    DestinationTestConnectionRequest$outboundSchema.parse(
      destinationTestConnectionRequest,
    ),
  );
}

export function destinationTestConnectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<DestinationTestConnectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DestinationTestConnectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DestinationTestConnectionRequest' from JSON`,
  );
}
