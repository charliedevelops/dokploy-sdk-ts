/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NotificationUpdateSlackSecurity = {
  authorization: string;
};

export type NotificationUpdateSlackRequest = {
  appBuildError?: boolean | undefined;
  appDeploy?: boolean | undefined;
  channel?: string | undefined;
  databaseBackup?: boolean | undefined;
  dockerCleanup?: boolean | undefined;
  dokployRestart?: boolean | undefined;
  name?: string | undefined;
  notificationId: string;
  organizationId?: string | undefined;
  serverThreshold?: boolean | undefined;
  slackId: string;
  webhookUrl?: string | undefined;
};

/** @internal */
export const NotificationUpdateSlackSecurity$inboundSchema: z.ZodType<
  NotificationUpdateSlackSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type NotificationUpdateSlackSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const NotificationUpdateSlackSecurity$outboundSchema: z.ZodType<
  NotificationUpdateSlackSecurity$Outbound,
  z.ZodTypeDef,
  NotificationUpdateSlackSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationUpdateSlackSecurity$ {
  /** @deprecated use `NotificationUpdateSlackSecurity$inboundSchema` instead. */
  export const inboundSchema = NotificationUpdateSlackSecurity$inboundSchema;
  /** @deprecated use `NotificationUpdateSlackSecurity$outboundSchema` instead. */
  export const outboundSchema = NotificationUpdateSlackSecurity$outboundSchema;
  /** @deprecated use `NotificationUpdateSlackSecurity$Outbound` instead. */
  export type Outbound = NotificationUpdateSlackSecurity$Outbound;
}

export function notificationUpdateSlackSecurityToJSON(
  notificationUpdateSlackSecurity: NotificationUpdateSlackSecurity,
): string {
  return JSON.stringify(
    NotificationUpdateSlackSecurity$outboundSchema.parse(
      notificationUpdateSlackSecurity,
    ),
  );
}

export function notificationUpdateSlackSecurityFromJSON(
  jsonString: string,
): SafeParseResult<NotificationUpdateSlackSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationUpdateSlackSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationUpdateSlackSecurity' from JSON`,
  );
}

/** @internal */
export const NotificationUpdateSlackRequest$inboundSchema: z.ZodType<
  NotificationUpdateSlackRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appBuildError: z.boolean().optional(),
  appDeploy: z.boolean().optional(),
  channel: z.string().optional(),
  databaseBackup: z.boolean().optional(),
  dockerCleanup: z.boolean().optional(),
  dokployRestart: z.boolean().optional(),
  name: z.string().optional(),
  notificationId: z.string(),
  organizationId: z.string().optional(),
  serverThreshold: z.boolean().optional(),
  slackId: z.string(),
  webhookUrl: z.string().optional(),
});

/** @internal */
export type NotificationUpdateSlackRequest$Outbound = {
  appBuildError?: boolean | undefined;
  appDeploy?: boolean | undefined;
  channel?: string | undefined;
  databaseBackup?: boolean | undefined;
  dockerCleanup?: boolean | undefined;
  dokployRestart?: boolean | undefined;
  name?: string | undefined;
  notificationId: string;
  organizationId?: string | undefined;
  serverThreshold?: boolean | undefined;
  slackId: string;
  webhookUrl?: string | undefined;
};

/** @internal */
export const NotificationUpdateSlackRequest$outboundSchema: z.ZodType<
  NotificationUpdateSlackRequest$Outbound,
  z.ZodTypeDef,
  NotificationUpdateSlackRequest
> = z.object({
  appBuildError: z.boolean().optional(),
  appDeploy: z.boolean().optional(),
  channel: z.string().optional(),
  databaseBackup: z.boolean().optional(),
  dockerCleanup: z.boolean().optional(),
  dokployRestart: z.boolean().optional(),
  name: z.string().optional(),
  notificationId: z.string(),
  organizationId: z.string().optional(),
  serverThreshold: z.boolean().optional(),
  slackId: z.string(),
  webhookUrl: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationUpdateSlackRequest$ {
  /** @deprecated use `NotificationUpdateSlackRequest$inboundSchema` instead. */
  export const inboundSchema = NotificationUpdateSlackRequest$inboundSchema;
  /** @deprecated use `NotificationUpdateSlackRequest$outboundSchema` instead. */
  export const outboundSchema = NotificationUpdateSlackRequest$outboundSchema;
  /** @deprecated use `NotificationUpdateSlackRequest$Outbound` instead. */
  export type Outbound = NotificationUpdateSlackRequest$Outbound;
}

export function notificationUpdateSlackRequestToJSON(
  notificationUpdateSlackRequest: NotificationUpdateSlackRequest,
): string {
  return JSON.stringify(
    NotificationUpdateSlackRequest$outboundSchema.parse(
      notificationUpdateSlackRequest,
    ),
  );
}

export function notificationUpdateSlackRequestFromJSON(
  jsonString: string,
): SafeParseResult<NotificationUpdateSlackRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationUpdateSlackRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationUpdateSlackRequest' from JSON`,
  );
}
