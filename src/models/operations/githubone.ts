/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GithubOneRequest = {
  githubId: string;
};

export const GithubOneProviderType = {
  Github: "github",
  Gitlab: "gitlab",
  Bitbucket: "bitbucket",
  Gitea: "gitea",
} as const;
export type GithubOneProviderType = ClosedEnum<typeof GithubOneProviderType>;

export type GithubOneGitProvider = {
  createdAt: string;
  gitProviderId: string;
  name: string;
  organizationId: string;
  providerType: GithubOneProviderType;
  userId: string;
};

/**
 * Successful response
 */
export type GithubOneResponseBody = {
  gitProvider: GithubOneGitProvider;
  gitProviderId: string;
  githubAppId: number | null;
  githubAppName: string | null;
  githubClientId: string | null;
  githubClientSecret: string | null;
  githubId: string;
  githubInstallationId: string | null;
  githubPrivateKey: string | null;
  githubWebhookSecret: string | null;
};

export type GithubOneResponse = GithubOneResponseBody | models.ErrorT;

/** @internal */
export const GithubOneRequest$inboundSchema: z.ZodType<
  GithubOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  githubId: z.string(),
});

/** @internal */
export type GithubOneRequest$Outbound = {
  githubId: string;
};

/** @internal */
export const GithubOneRequest$outboundSchema: z.ZodType<
  GithubOneRequest$Outbound,
  z.ZodTypeDef,
  GithubOneRequest
> = z.object({
  githubId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GithubOneRequest$ {
  /** @deprecated use `GithubOneRequest$inboundSchema` instead. */
  export const inboundSchema = GithubOneRequest$inboundSchema;
  /** @deprecated use `GithubOneRequest$outboundSchema` instead. */
  export const outboundSchema = GithubOneRequest$outboundSchema;
  /** @deprecated use `GithubOneRequest$Outbound` instead. */
  export type Outbound = GithubOneRequest$Outbound;
}

export function githubOneRequestToJSON(
  githubOneRequest: GithubOneRequest,
): string {
  return JSON.stringify(
    GithubOneRequest$outboundSchema.parse(githubOneRequest),
  );
}

export function githubOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<GithubOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GithubOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GithubOneRequest' from JSON`,
  );
}

/** @internal */
export const GithubOneProviderType$inboundSchema: z.ZodNativeEnum<
  typeof GithubOneProviderType
> = z.nativeEnum(GithubOneProviderType);

/** @internal */
export const GithubOneProviderType$outboundSchema: z.ZodNativeEnum<
  typeof GithubOneProviderType
> = GithubOneProviderType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GithubOneProviderType$ {
  /** @deprecated use `GithubOneProviderType$inboundSchema` instead. */
  export const inboundSchema = GithubOneProviderType$inboundSchema;
  /** @deprecated use `GithubOneProviderType$outboundSchema` instead. */
  export const outboundSchema = GithubOneProviderType$outboundSchema;
}

/** @internal */
export const GithubOneGitProvider$inboundSchema: z.ZodType<
  GithubOneGitProvider,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  gitProviderId: z.string(),
  name: z.string(),
  organizationId: z.string(),
  providerType: GithubOneProviderType$inboundSchema,
  userId: z.string(),
});

/** @internal */
export type GithubOneGitProvider$Outbound = {
  createdAt: string;
  gitProviderId: string;
  name: string;
  organizationId: string;
  providerType: string;
  userId: string;
};

/** @internal */
export const GithubOneGitProvider$outboundSchema: z.ZodType<
  GithubOneGitProvider$Outbound,
  z.ZodTypeDef,
  GithubOneGitProvider
> = z.object({
  createdAt: z.string(),
  gitProviderId: z.string(),
  name: z.string(),
  organizationId: z.string(),
  providerType: GithubOneProviderType$outboundSchema,
  userId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GithubOneGitProvider$ {
  /** @deprecated use `GithubOneGitProvider$inboundSchema` instead. */
  export const inboundSchema = GithubOneGitProvider$inboundSchema;
  /** @deprecated use `GithubOneGitProvider$outboundSchema` instead. */
  export const outboundSchema = GithubOneGitProvider$outboundSchema;
  /** @deprecated use `GithubOneGitProvider$Outbound` instead. */
  export type Outbound = GithubOneGitProvider$Outbound;
}

export function githubOneGitProviderToJSON(
  githubOneGitProvider: GithubOneGitProvider,
): string {
  return JSON.stringify(
    GithubOneGitProvider$outboundSchema.parse(githubOneGitProvider),
  );
}

export function githubOneGitProviderFromJSON(
  jsonString: string,
): SafeParseResult<GithubOneGitProvider, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GithubOneGitProvider$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GithubOneGitProvider' from JSON`,
  );
}

/** @internal */
export const GithubOneResponseBody$inboundSchema: z.ZodType<
  GithubOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  gitProvider: z.lazy(() => GithubOneGitProvider$inboundSchema),
  gitProviderId: z.string(),
  githubAppId: z.nullable(z.number()),
  githubAppName: z.nullable(z.string()),
  githubClientId: z.nullable(z.string()),
  githubClientSecret: z.nullable(z.string()),
  githubId: z.string(),
  githubInstallationId: z.nullable(z.string()),
  githubPrivateKey: z.nullable(z.string()),
  githubWebhookSecret: z.nullable(z.string()),
});

/** @internal */
export type GithubOneResponseBody$Outbound = {
  gitProvider: GithubOneGitProvider$Outbound;
  gitProviderId: string;
  githubAppId: number | null;
  githubAppName: string | null;
  githubClientId: string | null;
  githubClientSecret: string | null;
  githubId: string;
  githubInstallationId: string | null;
  githubPrivateKey: string | null;
  githubWebhookSecret: string | null;
};

/** @internal */
export const GithubOneResponseBody$outboundSchema: z.ZodType<
  GithubOneResponseBody$Outbound,
  z.ZodTypeDef,
  GithubOneResponseBody
> = z.object({
  gitProvider: z.lazy(() => GithubOneGitProvider$outboundSchema),
  gitProviderId: z.string(),
  githubAppId: z.nullable(z.number()),
  githubAppName: z.nullable(z.string()),
  githubClientId: z.nullable(z.string()),
  githubClientSecret: z.nullable(z.string()),
  githubId: z.string(),
  githubInstallationId: z.nullable(z.string()),
  githubPrivateKey: z.nullable(z.string()),
  githubWebhookSecret: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GithubOneResponseBody$ {
  /** @deprecated use `GithubOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = GithubOneResponseBody$inboundSchema;
  /** @deprecated use `GithubOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = GithubOneResponseBody$outboundSchema;
  /** @deprecated use `GithubOneResponseBody$Outbound` instead. */
  export type Outbound = GithubOneResponseBody$Outbound;
}

export function githubOneResponseBodyToJSON(
  githubOneResponseBody: GithubOneResponseBody,
): string {
  return JSON.stringify(
    GithubOneResponseBody$outboundSchema.parse(githubOneResponseBody),
  );
}

export function githubOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GithubOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GithubOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GithubOneResponseBody' from JSON`,
  );
}

/** @internal */
export const GithubOneResponse$inboundSchema: z.ZodType<
  GithubOneResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GithubOneResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type GithubOneResponse$Outbound =
  | GithubOneResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const GithubOneResponse$outboundSchema: z.ZodType<
  GithubOneResponse$Outbound,
  z.ZodTypeDef,
  GithubOneResponse
> = z.union([
  z.lazy(() => GithubOneResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GithubOneResponse$ {
  /** @deprecated use `GithubOneResponse$inboundSchema` instead. */
  export const inboundSchema = GithubOneResponse$inboundSchema;
  /** @deprecated use `GithubOneResponse$outboundSchema` instead. */
  export const outboundSchema = GithubOneResponse$outboundSchema;
  /** @deprecated use `GithubOneResponse$Outbound` instead. */
  export type Outbound = GithubOneResponse$Outbound;
}

export function githubOneResponseToJSON(
  githubOneResponse: GithubOneResponse,
): string {
  return JSON.stringify(
    GithubOneResponse$outboundSchema.parse(githubOneResponse),
  );
}

export function githubOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<GithubOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GithubOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GithubOneResponse' from JSON`,
  );
}
