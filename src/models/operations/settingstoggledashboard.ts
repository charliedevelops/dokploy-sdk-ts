/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SettingsToggleDashboardSecurity = {
  authorization: string;
};

export type SettingsToggleDashboardRequest = {
  enableDashboard?: boolean | undefined;
  serverId?: string | undefined;
};

/** @internal */
export const SettingsToggleDashboardSecurity$inboundSchema: z.ZodType<
  SettingsToggleDashboardSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type SettingsToggleDashboardSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const SettingsToggleDashboardSecurity$outboundSchema: z.ZodType<
  SettingsToggleDashboardSecurity$Outbound,
  z.ZodTypeDef,
  SettingsToggleDashboardSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SettingsToggleDashboardSecurity$ {
  /** @deprecated use `SettingsToggleDashboardSecurity$inboundSchema` instead. */
  export const inboundSchema = SettingsToggleDashboardSecurity$inboundSchema;
  /** @deprecated use `SettingsToggleDashboardSecurity$outboundSchema` instead. */
  export const outboundSchema = SettingsToggleDashboardSecurity$outboundSchema;
  /** @deprecated use `SettingsToggleDashboardSecurity$Outbound` instead. */
  export type Outbound = SettingsToggleDashboardSecurity$Outbound;
}

export function settingsToggleDashboardSecurityToJSON(
  settingsToggleDashboardSecurity: SettingsToggleDashboardSecurity,
): string {
  return JSON.stringify(
    SettingsToggleDashboardSecurity$outboundSchema.parse(
      settingsToggleDashboardSecurity,
    ),
  );
}

export function settingsToggleDashboardSecurityFromJSON(
  jsonString: string,
): SafeParseResult<SettingsToggleDashboardSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SettingsToggleDashboardSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SettingsToggleDashboardSecurity' from JSON`,
  );
}

/** @internal */
export const SettingsToggleDashboardRequest$inboundSchema: z.ZodType<
  SettingsToggleDashboardRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  enableDashboard: z.boolean().optional(),
  serverId: z.string().optional(),
});

/** @internal */
export type SettingsToggleDashboardRequest$Outbound = {
  enableDashboard?: boolean | undefined;
  serverId?: string | undefined;
};

/** @internal */
export const SettingsToggleDashboardRequest$outboundSchema: z.ZodType<
  SettingsToggleDashboardRequest$Outbound,
  z.ZodTypeDef,
  SettingsToggleDashboardRequest
> = z.object({
  enableDashboard: z.boolean().optional(),
  serverId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SettingsToggleDashboardRequest$ {
  /** @deprecated use `SettingsToggleDashboardRequest$inboundSchema` instead. */
  export const inboundSchema = SettingsToggleDashboardRequest$inboundSchema;
  /** @deprecated use `SettingsToggleDashboardRequest$outboundSchema` instead. */
  export const outboundSchema = SettingsToggleDashboardRequest$outboundSchema;
  /** @deprecated use `SettingsToggleDashboardRequest$Outbound` instead. */
  export type Outbound = SettingsToggleDashboardRequest$Outbound;
}

export function settingsToggleDashboardRequestToJSON(
  settingsToggleDashboardRequest: SettingsToggleDashboardRequest,
): string {
  return JSON.stringify(
    SettingsToggleDashboardRequest$outboundSchema.parse(
      settingsToggleDashboardRequest,
    ),
  );
}

export function settingsToggleDashboardRequestFromJSON(
  jsonString: string,
): SafeParseResult<SettingsToggleDashboardRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SettingsToggleDashboardRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SettingsToggleDashboardRequest' from JSON`,
  );
}
