/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GithubUpdateRequest = {
  gitProviderId: string;
  githubAppId?: number | null | undefined;
  githubAppName?: string | null | undefined;
  githubClientId?: string | null | undefined;
  githubClientSecret?: string | null | undefined;
  githubId: string;
  githubInstallationId?: string | null | undefined;
  githubPrivateKey?: string | null | undefined;
  githubWebhookSecret?: string | null | undefined;
  name: string;
};

export type GithubUpdateResponse = models.ErrorT | any;

/** @internal */
export const GithubUpdateRequest$inboundSchema: z.ZodType<
  GithubUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  gitProviderId: z.string(),
  githubAppId: z.nullable(z.number()).optional(),
  githubAppName: z.nullable(z.string()).optional(),
  githubClientId: z.nullable(z.string()).optional(),
  githubClientSecret: z.nullable(z.string()).optional(),
  githubId: z.string(),
  githubInstallationId: z.nullable(z.string()).optional(),
  githubPrivateKey: z.nullable(z.string()).optional(),
  githubWebhookSecret: z.nullable(z.string()).optional(),
  name: z.string(),
});

/** @internal */
export type GithubUpdateRequest$Outbound = {
  gitProviderId: string;
  githubAppId?: number | null | undefined;
  githubAppName?: string | null | undefined;
  githubClientId?: string | null | undefined;
  githubClientSecret?: string | null | undefined;
  githubId: string;
  githubInstallationId?: string | null | undefined;
  githubPrivateKey?: string | null | undefined;
  githubWebhookSecret?: string | null | undefined;
  name: string;
};

/** @internal */
export const GithubUpdateRequest$outboundSchema: z.ZodType<
  GithubUpdateRequest$Outbound,
  z.ZodTypeDef,
  GithubUpdateRequest
> = z.object({
  gitProviderId: z.string(),
  githubAppId: z.nullable(z.number()).optional(),
  githubAppName: z.nullable(z.string()).optional(),
  githubClientId: z.nullable(z.string()).optional(),
  githubClientSecret: z.nullable(z.string()).optional(),
  githubId: z.string(),
  githubInstallationId: z.nullable(z.string()).optional(),
  githubPrivateKey: z.nullable(z.string()).optional(),
  githubWebhookSecret: z.nullable(z.string()).optional(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GithubUpdateRequest$ {
  /** @deprecated use `GithubUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = GithubUpdateRequest$inboundSchema;
  /** @deprecated use `GithubUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = GithubUpdateRequest$outboundSchema;
  /** @deprecated use `GithubUpdateRequest$Outbound` instead. */
  export type Outbound = GithubUpdateRequest$Outbound;
}

export function githubUpdateRequestToJSON(
  githubUpdateRequest: GithubUpdateRequest,
): string {
  return JSON.stringify(
    GithubUpdateRequest$outboundSchema.parse(githubUpdateRequest),
  );
}

export function githubUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<GithubUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GithubUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GithubUpdateRequest' from JSON`,
  );
}

/** @internal */
export const GithubUpdateResponse$inboundSchema: z.ZodType<
  GithubUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.any()]);

/** @internal */
export type GithubUpdateResponse$Outbound = models.ErrorT$Outbound | any;

/** @internal */
export const GithubUpdateResponse$outboundSchema: z.ZodType<
  GithubUpdateResponse$Outbound,
  z.ZodTypeDef,
  GithubUpdateResponse
> = z.union([models.ErrorT$outboundSchema, z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GithubUpdateResponse$ {
  /** @deprecated use `GithubUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = GithubUpdateResponse$inboundSchema;
  /** @deprecated use `GithubUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = GithubUpdateResponse$outboundSchema;
  /** @deprecated use `GithubUpdateResponse$Outbound` instead. */
  export type Outbound = GithubUpdateResponse$Outbound;
}

export function githubUpdateResponseToJSON(
  githubUpdateResponse: GithubUpdateResponse,
): string {
  return JSON.stringify(
    GithubUpdateResponse$outboundSchema.parse(githubUpdateResponse),
  );
}

export function githubUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<GithubUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GithubUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GithubUpdateResponse' from JSON`,
  );
}
