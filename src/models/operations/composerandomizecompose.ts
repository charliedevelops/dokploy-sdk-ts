/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComposeRandomizeComposeRequest = {
  composeId: string;
  suffix?: string | undefined;
};

/** @internal */
export const ComposeRandomizeComposeRequest$inboundSchema: z.ZodType<
  ComposeRandomizeComposeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  composeId: z.string(),
  suffix: z.string().optional(),
});

/** @internal */
export type ComposeRandomizeComposeRequest$Outbound = {
  composeId: string;
  suffix?: string | undefined;
};

/** @internal */
export const ComposeRandomizeComposeRequest$outboundSchema: z.ZodType<
  ComposeRandomizeComposeRequest$Outbound,
  z.ZodTypeDef,
  ComposeRandomizeComposeRequest
> = z.object({
  composeId: z.string(),
  suffix: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComposeRandomizeComposeRequest$ {
  /** @deprecated use `ComposeRandomizeComposeRequest$inboundSchema` instead. */
  export const inboundSchema = ComposeRandomizeComposeRequest$inboundSchema;
  /** @deprecated use `ComposeRandomizeComposeRequest$outboundSchema` instead. */
  export const outboundSchema = ComposeRandomizeComposeRequest$outboundSchema;
  /** @deprecated use `ComposeRandomizeComposeRequest$Outbound` instead. */
  export type Outbound = ComposeRandomizeComposeRequest$Outbound;
}

export function composeRandomizeComposeRequestToJSON(
  composeRandomizeComposeRequest: ComposeRandomizeComposeRequest,
): string {
  return JSON.stringify(
    ComposeRandomizeComposeRequest$outboundSchema.parse(
      composeRandomizeComposeRequest,
    ),
  );
}

export function composeRandomizeComposeRequestFromJSON(
  jsonString: string,
): SafeParseResult<ComposeRandomizeComposeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComposeRandomizeComposeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComposeRandomizeComposeRequest' from JSON`,
  );
}
