/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PostgresSaveEnvironmentSecurity = {
  authorization: string;
};

export type PostgresSaveEnvironmentRequest = {
  postgresId: string;
  env?: string | null | undefined;
};

export type PostgresSaveEnvironmentResponse = models.ErrorT | boolean;

/** @internal */
export const PostgresSaveEnvironmentSecurity$inboundSchema: z.ZodType<
  PostgresSaveEnvironmentSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type PostgresSaveEnvironmentSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const PostgresSaveEnvironmentSecurity$outboundSchema: z.ZodType<
  PostgresSaveEnvironmentSecurity$Outbound,
  z.ZodTypeDef,
  PostgresSaveEnvironmentSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresSaveEnvironmentSecurity$ {
  /** @deprecated use `PostgresSaveEnvironmentSecurity$inboundSchema` instead. */
  export const inboundSchema = PostgresSaveEnvironmentSecurity$inboundSchema;
  /** @deprecated use `PostgresSaveEnvironmentSecurity$outboundSchema` instead. */
  export const outboundSchema = PostgresSaveEnvironmentSecurity$outboundSchema;
  /** @deprecated use `PostgresSaveEnvironmentSecurity$Outbound` instead. */
  export type Outbound = PostgresSaveEnvironmentSecurity$Outbound;
}

export function postgresSaveEnvironmentSecurityToJSON(
  postgresSaveEnvironmentSecurity: PostgresSaveEnvironmentSecurity,
): string {
  return JSON.stringify(
    PostgresSaveEnvironmentSecurity$outboundSchema.parse(
      postgresSaveEnvironmentSecurity,
    ),
  );
}

export function postgresSaveEnvironmentSecurityFromJSON(
  jsonString: string,
): SafeParseResult<PostgresSaveEnvironmentSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresSaveEnvironmentSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresSaveEnvironmentSecurity' from JSON`,
  );
}

/** @internal */
export const PostgresSaveEnvironmentRequest$inboundSchema: z.ZodType<
  PostgresSaveEnvironmentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  postgresId: z.string(),
  env: z.nullable(z.string()).optional(),
});

/** @internal */
export type PostgresSaveEnvironmentRequest$Outbound = {
  postgresId: string;
  env?: string | null | undefined;
};

/** @internal */
export const PostgresSaveEnvironmentRequest$outboundSchema: z.ZodType<
  PostgresSaveEnvironmentRequest$Outbound,
  z.ZodTypeDef,
  PostgresSaveEnvironmentRequest
> = z.object({
  postgresId: z.string(),
  env: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresSaveEnvironmentRequest$ {
  /** @deprecated use `PostgresSaveEnvironmentRequest$inboundSchema` instead. */
  export const inboundSchema = PostgresSaveEnvironmentRequest$inboundSchema;
  /** @deprecated use `PostgresSaveEnvironmentRequest$outboundSchema` instead. */
  export const outboundSchema = PostgresSaveEnvironmentRequest$outboundSchema;
  /** @deprecated use `PostgresSaveEnvironmentRequest$Outbound` instead. */
  export type Outbound = PostgresSaveEnvironmentRequest$Outbound;
}

export function postgresSaveEnvironmentRequestToJSON(
  postgresSaveEnvironmentRequest: PostgresSaveEnvironmentRequest,
): string {
  return JSON.stringify(
    PostgresSaveEnvironmentRequest$outboundSchema.parse(
      postgresSaveEnvironmentRequest,
    ),
  );
}

export function postgresSaveEnvironmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostgresSaveEnvironmentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresSaveEnvironmentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresSaveEnvironmentRequest' from JSON`,
  );
}

/** @internal */
export const PostgresSaveEnvironmentResponse$inboundSchema: z.ZodType<
  PostgresSaveEnvironmentResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.boolean()]);

/** @internal */
export type PostgresSaveEnvironmentResponse$Outbound =
  | models.ErrorT$Outbound
  | boolean;

/** @internal */
export const PostgresSaveEnvironmentResponse$outboundSchema: z.ZodType<
  PostgresSaveEnvironmentResponse$Outbound,
  z.ZodTypeDef,
  PostgresSaveEnvironmentResponse
> = z.union([models.ErrorT$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresSaveEnvironmentResponse$ {
  /** @deprecated use `PostgresSaveEnvironmentResponse$inboundSchema` instead. */
  export const inboundSchema = PostgresSaveEnvironmentResponse$inboundSchema;
  /** @deprecated use `PostgresSaveEnvironmentResponse$outboundSchema` instead. */
  export const outboundSchema = PostgresSaveEnvironmentResponse$outboundSchema;
  /** @deprecated use `PostgresSaveEnvironmentResponse$Outbound` instead. */
  export type Outbound = PostgresSaveEnvironmentResponse$Outbound;
}

export function postgresSaveEnvironmentResponseToJSON(
  postgresSaveEnvironmentResponse: PostgresSaveEnvironmentResponse,
): string {
  return JSON.stringify(
    PostgresSaveEnvironmentResponse$outboundSchema.parse(
      postgresSaveEnvironmentResponse,
    ),
  );
}

export function postgresSaveEnvironmentResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostgresSaveEnvironmentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresSaveEnvironmentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresSaveEnvironmentResponse' from JSON`,
  );
}
