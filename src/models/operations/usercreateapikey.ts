/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UserCreateApiKeySecurity = {
  authorization: string;
};

export type UserCreateApiKeyMetadata = {
  organizationId: string;
};

export type UserCreateApiKeyRequest = {
  expiresIn?: number | undefined;
  metadata: UserCreateApiKeyMetadata;
  name: string;
  prefix?: string | undefined;
  rateLimitEnabled?: boolean | undefined;
  rateLimitMax?: number | undefined;
  rateLimitTimeWindow?: number | undefined;
  refillAmount?: number | undefined;
  refillInterval?: number | undefined;
  remaining?: number | undefined;
};

/** @internal */
export const UserCreateApiKeySecurity$inboundSchema: z.ZodType<
  UserCreateApiKeySecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type UserCreateApiKeySecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const UserCreateApiKeySecurity$outboundSchema: z.ZodType<
  UserCreateApiKeySecurity$Outbound,
  z.ZodTypeDef,
  UserCreateApiKeySecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserCreateApiKeySecurity$ {
  /** @deprecated use `UserCreateApiKeySecurity$inboundSchema` instead. */
  export const inboundSchema = UserCreateApiKeySecurity$inboundSchema;
  /** @deprecated use `UserCreateApiKeySecurity$outboundSchema` instead. */
  export const outboundSchema = UserCreateApiKeySecurity$outboundSchema;
  /** @deprecated use `UserCreateApiKeySecurity$Outbound` instead. */
  export type Outbound = UserCreateApiKeySecurity$Outbound;
}

export function userCreateApiKeySecurityToJSON(
  userCreateApiKeySecurity: UserCreateApiKeySecurity,
): string {
  return JSON.stringify(
    UserCreateApiKeySecurity$outboundSchema.parse(userCreateApiKeySecurity),
  );
}

export function userCreateApiKeySecurityFromJSON(
  jsonString: string,
): SafeParseResult<UserCreateApiKeySecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserCreateApiKeySecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserCreateApiKeySecurity' from JSON`,
  );
}

/** @internal */
export const UserCreateApiKeyMetadata$inboundSchema: z.ZodType<
  UserCreateApiKeyMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  organizationId: z.string(),
});

/** @internal */
export type UserCreateApiKeyMetadata$Outbound = {
  organizationId: string;
};

/** @internal */
export const UserCreateApiKeyMetadata$outboundSchema: z.ZodType<
  UserCreateApiKeyMetadata$Outbound,
  z.ZodTypeDef,
  UserCreateApiKeyMetadata
> = z.object({
  organizationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserCreateApiKeyMetadata$ {
  /** @deprecated use `UserCreateApiKeyMetadata$inboundSchema` instead. */
  export const inboundSchema = UserCreateApiKeyMetadata$inboundSchema;
  /** @deprecated use `UserCreateApiKeyMetadata$outboundSchema` instead. */
  export const outboundSchema = UserCreateApiKeyMetadata$outboundSchema;
  /** @deprecated use `UserCreateApiKeyMetadata$Outbound` instead. */
  export type Outbound = UserCreateApiKeyMetadata$Outbound;
}

export function userCreateApiKeyMetadataToJSON(
  userCreateApiKeyMetadata: UserCreateApiKeyMetadata,
): string {
  return JSON.stringify(
    UserCreateApiKeyMetadata$outboundSchema.parse(userCreateApiKeyMetadata),
  );
}

export function userCreateApiKeyMetadataFromJSON(
  jsonString: string,
): SafeParseResult<UserCreateApiKeyMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserCreateApiKeyMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserCreateApiKeyMetadata' from JSON`,
  );
}

/** @internal */
export const UserCreateApiKeyRequest$inboundSchema: z.ZodType<
  UserCreateApiKeyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  expiresIn: z.number().optional(),
  metadata: z.lazy(() => UserCreateApiKeyMetadata$inboundSchema),
  name: z.string(),
  prefix: z.string().optional(),
  rateLimitEnabled: z.boolean().optional(),
  rateLimitMax: z.number().optional(),
  rateLimitTimeWindow: z.number().optional(),
  refillAmount: z.number().optional(),
  refillInterval: z.number().optional(),
  remaining: z.number().optional(),
});

/** @internal */
export type UserCreateApiKeyRequest$Outbound = {
  expiresIn?: number | undefined;
  metadata: UserCreateApiKeyMetadata$Outbound;
  name: string;
  prefix?: string | undefined;
  rateLimitEnabled?: boolean | undefined;
  rateLimitMax?: number | undefined;
  rateLimitTimeWindow?: number | undefined;
  refillAmount?: number | undefined;
  refillInterval?: number | undefined;
  remaining?: number | undefined;
};

/** @internal */
export const UserCreateApiKeyRequest$outboundSchema: z.ZodType<
  UserCreateApiKeyRequest$Outbound,
  z.ZodTypeDef,
  UserCreateApiKeyRequest
> = z.object({
  expiresIn: z.number().optional(),
  metadata: z.lazy(() => UserCreateApiKeyMetadata$outboundSchema),
  name: z.string(),
  prefix: z.string().optional(),
  rateLimitEnabled: z.boolean().optional(),
  rateLimitMax: z.number().optional(),
  rateLimitTimeWindow: z.number().optional(),
  refillAmount: z.number().optional(),
  refillInterval: z.number().optional(),
  remaining: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserCreateApiKeyRequest$ {
  /** @deprecated use `UserCreateApiKeyRequest$inboundSchema` instead. */
  export const inboundSchema = UserCreateApiKeyRequest$inboundSchema;
  /** @deprecated use `UserCreateApiKeyRequest$outboundSchema` instead. */
  export const outboundSchema = UserCreateApiKeyRequest$outboundSchema;
  /** @deprecated use `UserCreateApiKeyRequest$Outbound` instead. */
  export type Outbound = UserCreateApiKeyRequest$Outbound;
}

export function userCreateApiKeyRequestToJSON(
  userCreateApiKeyRequest: UserCreateApiKeyRequest,
): string {
  return JSON.stringify(
    UserCreateApiKeyRequest$outboundSchema.parse(userCreateApiKeyRequest),
  );
}

export function userCreateApiKeyRequestFromJSON(
  jsonString: string,
): SafeParseResult<UserCreateApiKeyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserCreateApiKeyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserCreateApiKeyRequest' from JSON`,
  );
}
