/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DomainGenerateDomainRequest = {
  appName: string;
  serverId?: string | undefined;
};

/** @internal */
export const DomainGenerateDomainRequest$inboundSchema: z.ZodType<
  DomainGenerateDomainRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string(),
  serverId: z.string().optional(),
});

/** @internal */
export type DomainGenerateDomainRequest$Outbound = {
  appName: string;
  serverId?: string | undefined;
};

/** @internal */
export const DomainGenerateDomainRequest$outboundSchema: z.ZodType<
  DomainGenerateDomainRequest$Outbound,
  z.ZodTypeDef,
  DomainGenerateDomainRequest
> = z.object({
  appName: z.string(),
  serverId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainGenerateDomainRequest$ {
  /** @deprecated use `DomainGenerateDomainRequest$inboundSchema` instead. */
  export const inboundSchema = DomainGenerateDomainRequest$inboundSchema;
  /** @deprecated use `DomainGenerateDomainRequest$outboundSchema` instead. */
  export const outboundSchema = DomainGenerateDomainRequest$outboundSchema;
  /** @deprecated use `DomainGenerateDomainRequest$Outbound` instead. */
  export type Outbound = DomainGenerateDomainRequest$Outbound;
}

export function domainGenerateDomainRequestToJSON(
  domainGenerateDomainRequest: DomainGenerateDomainRequest,
): string {
  return JSON.stringify(
    DomainGenerateDomainRequest$outboundSchema.parse(
      domainGenerateDomainRequest,
    ),
  );
}

export function domainGenerateDomainRequestFromJSON(
  jsonString: string,
): SafeParseResult<DomainGenerateDomainRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DomainGenerateDomainRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DomainGenerateDomainRequest' from JSON`,
  );
}
