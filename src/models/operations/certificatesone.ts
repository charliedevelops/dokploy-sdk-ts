/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CertificatesOneSecurity = {
  authorization: string;
};

export type CertificatesOneRequest = {
  certificateId: string;
};

/**
 * Successful response
 */
export type CertificatesOneResponseBody = {
  certificateId: string;
  name: string;
  certificateData: string;
  privateKey: string;
  certificatePath: string;
  autoRenew: boolean | null;
  organizationId: string;
  serverId: string | null;
};

export type CertificatesOneResponse =
  | CertificatesOneResponseBody
  | models.ErrorT;

/** @internal */
export const CertificatesOneSecurity$inboundSchema: z.ZodType<
  CertificatesOneSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type CertificatesOneSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const CertificatesOneSecurity$outboundSchema: z.ZodType<
  CertificatesOneSecurity$Outbound,
  z.ZodTypeDef,
  CertificatesOneSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CertificatesOneSecurity$ {
  /** @deprecated use `CertificatesOneSecurity$inboundSchema` instead. */
  export const inboundSchema = CertificatesOneSecurity$inboundSchema;
  /** @deprecated use `CertificatesOneSecurity$outboundSchema` instead. */
  export const outboundSchema = CertificatesOneSecurity$outboundSchema;
  /** @deprecated use `CertificatesOneSecurity$Outbound` instead. */
  export type Outbound = CertificatesOneSecurity$Outbound;
}

export function certificatesOneSecurityToJSON(
  certificatesOneSecurity: CertificatesOneSecurity,
): string {
  return JSON.stringify(
    CertificatesOneSecurity$outboundSchema.parse(certificatesOneSecurity),
  );
}

export function certificatesOneSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CertificatesOneSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CertificatesOneSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CertificatesOneSecurity' from JSON`,
  );
}

/** @internal */
export const CertificatesOneRequest$inboundSchema: z.ZodType<
  CertificatesOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  certificateId: z.string(),
});

/** @internal */
export type CertificatesOneRequest$Outbound = {
  certificateId: string;
};

/** @internal */
export const CertificatesOneRequest$outboundSchema: z.ZodType<
  CertificatesOneRequest$Outbound,
  z.ZodTypeDef,
  CertificatesOneRequest
> = z.object({
  certificateId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CertificatesOneRequest$ {
  /** @deprecated use `CertificatesOneRequest$inboundSchema` instead. */
  export const inboundSchema = CertificatesOneRequest$inboundSchema;
  /** @deprecated use `CertificatesOneRequest$outboundSchema` instead. */
  export const outboundSchema = CertificatesOneRequest$outboundSchema;
  /** @deprecated use `CertificatesOneRequest$Outbound` instead. */
  export type Outbound = CertificatesOneRequest$Outbound;
}

export function certificatesOneRequestToJSON(
  certificatesOneRequest: CertificatesOneRequest,
): string {
  return JSON.stringify(
    CertificatesOneRequest$outboundSchema.parse(certificatesOneRequest),
  );
}

export function certificatesOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<CertificatesOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CertificatesOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CertificatesOneRequest' from JSON`,
  );
}

/** @internal */
export const CertificatesOneResponseBody$inboundSchema: z.ZodType<
  CertificatesOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  certificateId: z.string(),
  name: z.string(),
  certificateData: z.string(),
  privateKey: z.string(),
  certificatePath: z.string(),
  autoRenew: z.nullable(z.boolean()),
  organizationId: z.string(),
  serverId: z.nullable(z.string()),
});

/** @internal */
export type CertificatesOneResponseBody$Outbound = {
  certificateId: string;
  name: string;
  certificateData: string;
  privateKey: string;
  certificatePath: string;
  autoRenew: boolean | null;
  organizationId: string;
  serverId: string | null;
};

/** @internal */
export const CertificatesOneResponseBody$outboundSchema: z.ZodType<
  CertificatesOneResponseBody$Outbound,
  z.ZodTypeDef,
  CertificatesOneResponseBody
> = z.object({
  certificateId: z.string(),
  name: z.string(),
  certificateData: z.string(),
  privateKey: z.string(),
  certificatePath: z.string(),
  autoRenew: z.nullable(z.boolean()),
  organizationId: z.string(),
  serverId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CertificatesOneResponseBody$ {
  /** @deprecated use `CertificatesOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = CertificatesOneResponseBody$inboundSchema;
  /** @deprecated use `CertificatesOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = CertificatesOneResponseBody$outboundSchema;
  /** @deprecated use `CertificatesOneResponseBody$Outbound` instead. */
  export type Outbound = CertificatesOneResponseBody$Outbound;
}

export function certificatesOneResponseBodyToJSON(
  certificatesOneResponseBody: CertificatesOneResponseBody,
): string {
  return JSON.stringify(
    CertificatesOneResponseBody$outboundSchema.parse(
      certificatesOneResponseBody,
    ),
  );
}

export function certificatesOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CertificatesOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CertificatesOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CertificatesOneResponseBody' from JSON`,
  );
}

/** @internal */
export const CertificatesOneResponse$inboundSchema: z.ZodType<
  CertificatesOneResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CertificatesOneResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type CertificatesOneResponse$Outbound =
  | CertificatesOneResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const CertificatesOneResponse$outboundSchema: z.ZodType<
  CertificatesOneResponse$Outbound,
  z.ZodTypeDef,
  CertificatesOneResponse
> = z.union([
  z.lazy(() => CertificatesOneResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CertificatesOneResponse$ {
  /** @deprecated use `CertificatesOneResponse$inboundSchema` instead. */
  export const inboundSchema = CertificatesOneResponse$inboundSchema;
  /** @deprecated use `CertificatesOneResponse$outboundSchema` instead. */
  export const outboundSchema = CertificatesOneResponse$outboundSchema;
  /** @deprecated use `CertificatesOneResponse$Outbound` instead. */
  export type Outbound = CertificatesOneResponse$Outbound;
}

export function certificatesOneResponseToJSON(
  certificatesOneResponse: CertificatesOneResponse,
): string {
  return JSON.stringify(
    CertificatesOneResponse$outboundSchema.parse(certificatesOneResponse),
  );
}

export function certificatesOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<CertificatesOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CertificatesOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CertificatesOneResponse' from JSON`,
  );
}
