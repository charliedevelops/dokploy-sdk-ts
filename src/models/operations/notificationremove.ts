/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NotificationRemoveSecurity = {
  authorization: string;
};

export type NotificationRemoveRequest = {
  notificationId: string;
};

/** @internal */
export const NotificationRemoveSecurity$inboundSchema: z.ZodType<
  NotificationRemoveSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type NotificationRemoveSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const NotificationRemoveSecurity$outboundSchema: z.ZodType<
  NotificationRemoveSecurity$Outbound,
  z.ZodTypeDef,
  NotificationRemoveSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationRemoveSecurity$ {
  /** @deprecated use `NotificationRemoveSecurity$inboundSchema` instead. */
  export const inboundSchema = NotificationRemoveSecurity$inboundSchema;
  /** @deprecated use `NotificationRemoveSecurity$outboundSchema` instead. */
  export const outboundSchema = NotificationRemoveSecurity$outboundSchema;
  /** @deprecated use `NotificationRemoveSecurity$Outbound` instead. */
  export type Outbound = NotificationRemoveSecurity$Outbound;
}

export function notificationRemoveSecurityToJSON(
  notificationRemoveSecurity: NotificationRemoveSecurity,
): string {
  return JSON.stringify(
    NotificationRemoveSecurity$outboundSchema.parse(notificationRemoveSecurity),
  );
}

export function notificationRemoveSecurityFromJSON(
  jsonString: string,
): SafeParseResult<NotificationRemoveSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationRemoveSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationRemoveSecurity' from JSON`,
  );
}

/** @internal */
export const NotificationRemoveRequest$inboundSchema: z.ZodType<
  NotificationRemoveRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  notificationId: z.string(),
});

/** @internal */
export type NotificationRemoveRequest$Outbound = {
  notificationId: string;
};

/** @internal */
export const NotificationRemoveRequest$outboundSchema: z.ZodType<
  NotificationRemoveRequest$Outbound,
  z.ZodTypeDef,
  NotificationRemoveRequest
> = z.object({
  notificationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationRemoveRequest$ {
  /** @deprecated use `NotificationRemoveRequest$inboundSchema` instead. */
  export const inboundSchema = NotificationRemoveRequest$inboundSchema;
  /** @deprecated use `NotificationRemoveRequest$outboundSchema` instead. */
  export const outboundSchema = NotificationRemoveRequest$outboundSchema;
  /** @deprecated use `NotificationRemoveRequest$Outbound` instead. */
  export type Outbound = NotificationRemoveRequest$Outbound;
}

export function notificationRemoveRequestToJSON(
  notificationRemoveRequest: NotificationRemoveRequest,
): string {
  return JSON.stringify(
    NotificationRemoveRequest$outboundSchema.parse(notificationRemoveRequest),
  );
}

export function notificationRemoveRequestFromJSON(
  jsonString: string,
): SafeParseResult<NotificationRemoveRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationRemoveRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationRemoveRequest' from JSON`,
  );
}
