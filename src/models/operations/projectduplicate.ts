/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ProjectDuplicateType = {
  Application: "application",
  Postgres: "postgres",
  Mariadb: "mariadb",
  Mongo: "mongo",
  Mysql: "mysql",
  Redis: "redis",
  Compose: "compose",
} as const;
export type ProjectDuplicateType = ClosedEnum<typeof ProjectDuplicateType>;

export type SelectedService = {
  id: string;
  type: ProjectDuplicateType;
};

export type ProjectDuplicateRequest = {
  description?: string | undefined;
  duplicateInSameProject?: boolean | undefined;
  includeServices?: boolean | undefined;
  name: string;
  selectedServices?: Array<SelectedService> | undefined;
  sourceEnvironmentId: string;
};

/** @internal */
export const ProjectDuplicateType$inboundSchema: z.ZodNativeEnum<
  typeof ProjectDuplicateType
> = z.nativeEnum(ProjectDuplicateType);

/** @internal */
export const ProjectDuplicateType$outboundSchema: z.ZodNativeEnum<
  typeof ProjectDuplicateType
> = ProjectDuplicateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectDuplicateType$ {
  /** @deprecated use `ProjectDuplicateType$inboundSchema` instead. */
  export const inboundSchema = ProjectDuplicateType$inboundSchema;
  /** @deprecated use `ProjectDuplicateType$outboundSchema` instead. */
  export const outboundSchema = ProjectDuplicateType$outboundSchema;
}

/** @internal */
export const SelectedService$inboundSchema: z.ZodType<
  SelectedService,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: ProjectDuplicateType$inboundSchema,
});

/** @internal */
export type SelectedService$Outbound = {
  id: string;
  type: string;
};

/** @internal */
export const SelectedService$outboundSchema: z.ZodType<
  SelectedService$Outbound,
  z.ZodTypeDef,
  SelectedService
> = z.object({
  id: z.string(),
  type: ProjectDuplicateType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectedService$ {
  /** @deprecated use `SelectedService$inboundSchema` instead. */
  export const inboundSchema = SelectedService$inboundSchema;
  /** @deprecated use `SelectedService$outboundSchema` instead. */
  export const outboundSchema = SelectedService$outboundSchema;
  /** @deprecated use `SelectedService$Outbound` instead. */
  export type Outbound = SelectedService$Outbound;
}

export function selectedServiceToJSON(
  selectedService: SelectedService,
): string {
  return JSON.stringify(SelectedService$outboundSchema.parse(selectedService));
}

export function selectedServiceFromJSON(
  jsonString: string,
): SafeParseResult<SelectedService, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SelectedService$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SelectedService' from JSON`,
  );
}

/** @internal */
export const ProjectDuplicateRequest$inboundSchema: z.ZodType<
  ProjectDuplicateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  duplicateInSameProject: z.boolean().default(false),
  includeServices: z.boolean().default(true),
  name: z.string(),
  selectedServices: z.array(z.lazy(() => SelectedService$inboundSchema))
    .optional(),
  sourceEnvironmentId: z.string(),
});

/** @internal */
export type ProjectDuplicateRequest$Outbound = {
  description?: string | undefined;
  duplicateInSameProject: boolean;
  includeServices: boolean;
  name: string;
  selectedServices?: Array<SelectedService$Outbound> | undefined;
  sourceEnvironmentId: string;
};

/** @internal */
export const ProjectDuplicateRequest$outboundSchema: z.ZodType<
  ProjectDuplicateRequest$Outbound,
  z.ZodTypeDef,
  ProjectDuplicateRequest
> = z.object({
  description: z.string().optional(),
  duplicateInSameProject: z.boolean().default(false),
  includeServices: z.boolean().default(true),
  name: z.string(),
  selectedServices: z.array(z.lazy(() => SelectedService$outboundSchema))
    .optional(),
  sourceEnvironmentId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectDuplicateRequest$ {
  /** @deprecated use `ProjectDuplicateRequest$inboundSchema` instead. */
  export const inboundSchema = ProjectDuplicateRequest$inboundSchema;
  /** @deprecated use `ProjectDuplicateRequest$outboundSchema` instead. */
  export const outboundSchema = ProjectDuplicateRequest$outboundSchema;
  /** @deprecated use `ProjectDuplicateRequest$Outbound` instead. */
  export type Outbound = ProjectDuplicateRequest$Outbound;
}

export function projectDuplicateRequestToJSON(
  projectDuplicateRequest: ProjectDuplicateRequest,
): string {
  return JSON.stringify(
    ProjectDuplicateRequest$outboundSchema.parse(projectDuplicateRequest),
  );
}

export function projectDuplicateRequestFromJSON(
  jsonString: string,
): SafeParseResult<ProjectDuplicateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectDuplicateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectDuplicateRequest' from JSON`,
  );
}
