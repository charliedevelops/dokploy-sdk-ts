/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GiteaGetGiteaRepositoriesRequest = {
  giteaId: string;
};

/** @internal */
export const GiteaGetGiteaRepositoriesRequest$inboundSchema: z.ZodType<
  GiteaGetGiteaRepositoriesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  giteaId: z.string(),
});

/** @internal */
export type GiteaGetGiteaRepositoriesRequest$Outbound = {
  giteaId: string;
};

/** @internal */
export const GiteaGetGiteaRepositoriesRequest$outboundSchema: z.ZodType<
  GiteaGetGiteaRepositoriesRequest$Outbound,
  z.ZodTypeDef,
  GiteaGetGiteaRepositoriesRequest
> = z.object({
  giteaId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiteaGetGiteaRepositoriesRequest$ {
  /** @deprecated use `GiteaGetGiteaRepositoriesRequest$inboundSchema` instead. */
  export const inboundSchema = GiteaGetGiteaRepositoriesRequest$inboundSchema;
  /** @deprecated use `GiteaGetGiteaRepositoriesRequest$outboundSchema` instead. */
  export const outboundSchema = GiteaGetGiteaRepositoriesRequest$outboundSchema;
  /** @deprecated use `GiteaGetGiteaRepositoriesRequest$Outbound` instead. */
  export type Outbound = GiteaGetGiteaRepositoriesRequest$Outbound;
}

export function giteaGetGiteaRepositoriesRequestToJSON(
  giteaGetGiteaRepositoriesRequest: GiteaGetGiteaRepositoriesRequest,
): string {
  return JSON.stringify(
    GiteaGetGiteaRepositoriesRequest$outboundSchema.parse(
      giteaGetGiteaRepositoriesRequest,
    ),
  );
}

export function giteaGetGiteaRepositoriesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GiteaGetGiteaRepositoriesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiteaGetGiteaRepositoriesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiteaGetGiteaRepositoriesRequest' from JSON`,
  );
}
