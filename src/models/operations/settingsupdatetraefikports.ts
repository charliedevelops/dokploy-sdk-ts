/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const SettingsUpdateTraefikPortsProtocol = {
  Tcp: "tcp",
  Udp: "udp",
  Sctp: "sctp",
} as const;
export type SettingsUpdateTraefikPortsProtocol = ClosedEnum<
  typeof SettingsUpdateTraefikPortsProtocol
>;

export type AdditionalPort = {
  protocol: SettingsUpdateTraefikPortsProtocol;
  publishedPort: number;
  targetPort: number;
};

export type SettingsUpdateTraefikPortsRequest = {
  additionalPorts: Array<AdditionalPort>;
  serverId?: string | undefined;
};

/** @internal */
export const SettingsUpdateTraefikPortsProtocol$inboundSchema: z.ZodNativeEnum<
  typeof SettingsUpdateTraefikPortsProtocol
> = z.nativeEnum(SettingsUpdateTraefikPortsProtocol);

/** @internal */
export const SettingsUpdateTraefikPortsProtocol$outboundSchema: z.ZodNativeEnum<
  typeof SettingsUpdateTraefikPortsProtocol
> = SettingsUpdateTraefikPortsProtocol$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SettingsUpdateTraefikPortsProtocol$ {
  /** @deprecated use `SettingsUpdateTraefikPortsProtocol$inboundSchema` instead. */
  export const inboundSchema = SettingsUpdateTraefikPortsProtocol$inboundSchema;
  /** @deprecated use `SettingsUpdateTraefikPortsProtocol$outboundSchema` instead. */
  export const outboundSchema =
    SettingsUpdateTraefikPortsProtocol$outboundSchema;
}

/** @internal */
export const AdditionalPort$inboundSchema: z.ZodType<
  AdditionalPort,
  z.ZodTypeDef,
  unknown
> = z.object({
  protocol: SettingsUpdateTraefikPortsProtocol$inboundSchema,
  publishedPort: z.number(),
  targetPort: z.number(),
});

/** @internal */
export type AdditionalPort$Outbound = {
  protocol: string;
  publishedPort: number;
  targetPort: number;
};

/** @internal */
export const AdditionalPort$outboundSchema: z.ZodType<
  AdditionalPort$Outbound,
  z.ZodTypeDef,
  AdditionalPort
> = z.object({
  protocol: SettingsUpdateTraefikPortsProtocol$outboundSchema,
  publishedPort: z.number(),
  targetPort: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AdditionalPort$ {
  /** @deprecated use `AdditionalPort$inboundSchema` instead. */
  export const inboundSchema = AdditionalPort$inboundSchema;
  /** @deprecated use `AdditionalPort$outboundSchema` instead. */
  export const outboundSchema = AdditionalPort$outboundSchema;
  /** @deprecated use `AdditionalPort$Outbound` instead. */
  export type Outbound = AdditionalPort$Outbound;
}

export function additionalPortToJSON(additionalPort: AdditionalPort): string {
  return JSON.stringify(AdditionalPort$outboundSchema.parse(additionalPort));
}

export function additionalPortFromJSON(
  jsonString: string,
): SafeParseResult<AdditionalPort, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AdditionalPort$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AdditionalPort' from JSON`,
  );
}

/** @internal */
export const SettingsUpdateTraefikPortsRequest$inboundSchema: z.ZodType<
  SettingsUpdateTraefikPortsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  additionalPorts: z.array(z.lazy(() => AdditionalPort$inboundSchema)),
  serverId: z.string().optional(),
});

/** @internal */
export type SettingsUpdateTraefikPortsRequest$Outbound = {
  additionalPorts: Array<AdditionalPort$Outbound>;
  serverId?: string | undefined;
};

/** @internal */
export const SettingsUpdateTraefikPortsRequest$outboundSchema: z.ZodType<
  SettingsUpdateTraefikPortsRequest$Outbound,
  z.ZodTypeDef,
  SettingsUpdateTraefikPortsRequest
> = z.object({
  additionalPorts: z.array(z.lazy(() => AdditionalPort$outboundSchema)),
  serverId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SettingsUpdateTraefikPortsRequest$ {
  /** @deprecated use `SettingsUpdateTraefikPortsRequest$inboundSchema` instead. */
  export const inboundSchema = SettingsUpdateTraefikPortsRequest$inboundSchema;
  /** @deprecated use `SettingsUpdateTraefikPortsRequest$outboundSchema` instead. */
  export const outboundSchema =
    SettingsUpdateTraefikPortsRequest$outboundSchema;
  /** @deprecated use `SettingsUpdateTraefikPortsRequest$Outbound` instead. */
  export type Outbound = SettingsUpdateTraefikPortsRequest$Outbound;
}

export function settingsUpdateTraefikPortsRequestToJSON(
  settingsUpdateTraefikPortsRequest: SettingsUpdateTraefikPortsRequest,
): string {
  return JSON.stringify(
    SettingsUpdateTraefikPortsRequest$outboundSchema.parse(
      settingsUpdateTraefikPortsRequest,
    ),
  );
}

export function settingsUpdateTraefikPortsRequestFromJSON(
  jsonString: string,
): SafeParseResult<SettingsUpdateTraefikPortsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SettingsUpdateTraefikPortsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SettingsUpdateTraefikPortsRequest' from JSON`,
  );
}
