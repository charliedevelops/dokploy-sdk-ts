/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type MysqlRemoveSecurity = {
  authorization: string;
};

export type MysqlRemoveRequest = {
  mysqlId: string;
};

export const MysqlRemoveApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type MysqlRemoveApplicationStatus = ClosedEnum<
  typeof MysqlRemoveApplicationStatus
>;

export type MysqlRemoveHealthCheckSwarm = {
  test?: Array<string> | undefined;
  interval?: number | undefined;
  timeout?: number | undefined;
  startPeriod?: number | undefined;
  retries?: number | undefined;
};

export type MysqlRemoveRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type MysqlRemoveSpread = {
  spreadDescriptor: string;
};

export type MysqlRemovePreference = {
  spread: MysqlRemoveSpread;
};

export type MysqlRemovePlatform = {
  architecture: string;
  os: string;
};

export type MysqlRemovePlacementSwarm = {
  constraints?: Array<string> | undefined;
  preferences?: Array<MysqlRemovePreference> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<MysqlRemovePlatform> | undefined;
};

export type MysqlRemoveUpdateConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type MysqlRemoveRollbackConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type MysqlRemoveReplicated = {
  replicas?: number | undefined;
};

export type MysqlRemoveGlobal = {};

export type MysqlRemoveReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type MysqlRemoveGlobalJob = {};

export type MysqlRemoveModeSwarm = {
  replicated?: MysqlRemoveReplicated | undefined;
  global?: MysqlRemoveGlobal | undefined;
  replicatedJob?: MysqlRemoveReplicatedJob | undefined;
  globalJob?: MysqlRemoveGlobalJob | undefined;
};

export type MysqlRemoveDriverOpts = {};

export type MysqlRemoveNetworkSwarm = {
  target?: string | undefined;
  aliases?: Array<string> | undefined;
  driverOpts?: MysqlRemoveDriverOpts | undefined;
};

export type MysqlRemoveProject = {
  projectId: string;
  name: string;
  description: string | null;
  createdAt: string;
  organizationId: string;
  env: string;
};

export type MysqlRemoveEnvironment = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
  project: MysqlRemoveProject;
};

export const MysqlRemoveType = {
  Bind: "bind",
  Volume: "volume",
  File: "file",
} as const;
export type MysqlRemoveType = ClosedEnum<typeof MysqlRemoveType>;

export const MysqlRemoveServiceType = {
  Application: "application",
  Postgres: "postgres",
  Mysql: "mysql",
  Mariadb: "mariadb",
  Mongo: "mongo",
  Redis: "redis",
  Compose: "compose",
} as const;
export type MysqlRemoveServiceType = ClosedEnum<typeof MysqlRemoveServiceType>;

export type MysqlRemoveMount = {
  mountId: string;
  type: MysqlRemoveType;
  hostPath: string | null;
  volumeName: string | null;
  filePath: string | null;
  content: string | null;
  serviceType: MysqlRemoveServiceType;
  mountPath: string;
  applicationId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mysqlId: string | null;
  redisId: string | null;
  composeId: string | null;
};

export const MysqlRemoveServerStatus = {
  Active: "active",
  Inactive: "inactive",
} as const;
export type MysqlRemoveServerStatus = ClosedEnum<
  typeof MysqlRemoveServerStatus
>;

export const MysqlRemoveMetricsConfigEnum = {
  Null: "null",
} as const;
export type MysqlRemoveMetricsConfigEnum = ClosedEnum<
  typeof MysqlRemoveMetricsConfigEnum
>;

export type MysqlRemoveMetricsConfigUnion1 =
  | string
  | number
  | boolean
  | MysqlRemoveMetricsConfigEnum;

export type MysqlRemoveMetricsConfigUnion2 =
  | string
  | number
  | boolean
  | MysqlRemoveMetricsConfigEnum
  | Array<any>
  | { [k: string]: any };

export type MysqlRemoveServer = {
  serverId: string;
  name: string;
  description: string | null;
  ipAddress: string;
  port: number;
  username: string;
  appName: string;
  enableDockerCleanup: boolean;
  createdAt: string;
  organizationId: string;
  serverStatus: MysqlRemoveServerStatus;
  command: string;
  sshKeyId: string | null;
  metricsConfig:
    | string
    | number
    | boolean
    | MysqlRemoveMetricsConfigEnum
    | Array<any>
    | { [k: string]: any };
};

export const MysqlRemoveBackupType = {
  Database: "database",
  Compose: "compose",
} as const;
export type MysqlRemoveBackupType = ClosedEnum<typeof MysqlRemoveBackupType>;

export const MysqlRemoveDatabaseType = {
  Postgres: "postgres",
  Mariadb: "mariadb",
  Mysql: "mysql",
  Mongo: "mongo",
  WebServer: "web-server",
} as const;
export type MysqlRemoveDatabaseType = ClosedEnum<
  typeof MysqlRemoveDatabaseType
>;

export const MysqlRemoveMetadataEnum = {
  Null: "null",
} as const;
export type MysqlRemoveMetadataEnum = ClosedEnum<
  typeof MysqlRemoveMetadataEnum
>;

export type MysqlRemovePostgres = {
  databaseUser: string;
};

export type MysqlRemoveMariadb = {
  databaseUser: string;
  databasePassword: string;
};

export type MysqlRemoveMongo = {
  databaseUser: string;
  databasePassword: string;
};

export type MysqlRemoveMysql = {
  databaseRootPassword: string;
};

export type MysqlRemoveMetadata = {
  postgres?: MysqlRemovePostgres | undefined;
  mariadb?: MysqlRemoveMariadb | undefined;
  mongo?: MysqlRemoveMongo | undefined;
  mysql?: MysqlRemoveMysql | undefined;
};

export type MysqlRemoveMetadataUnion =
  | MysqlRemoveMetadata
  | MysqlRemoveMetadataEnum;

export type MysqlRemoveBackup = {
  backupId: string;
  appName: string;
  schedule: string;
  enabled: boolean | null;
  database: string;
  prefix: string;
  serviceName: string | null;
  destinationId: string;
  keepLatestCount: number | null;
  backupType: MysqlRemoveBackupType;
  databaseType: MysqlRemoveDatabaseType;
  composeId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mysqlId: string | null;
  mongoId: string | null;
  userId: string | null;
  metadata?: MysqlRemoveMetadata | MysqlRemoveMetadataEnum | null | undefined;
};

/**
 * Successful response
 */
export type MysqlRemoveResponseBody = {
  mysqlId: string;
  name: string;
  appName: string;
  description: string | null;
  databaseName: string;
  databaseUser: string;
  databasePassword: string;
  databaseRootPassword: string;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  externalPort: number | null;
  applicationStatus: MysqlRemoveApplicationStatus;
  healthCheckSwarm: MysqlRemoveHealthCheckSwarm | null;
  restartPolicySwarm: MysqlRemoveRestartPolicySwarm | null;
  placementSwarm: MysqlRemovePlacementSwarm | null;
  updateConfigSwarm: MysqlRemoveUpdateConfigSwarm | null;
  rollbackConfigSwarm: MysqlRemoveRollbackConfigSwarm | null;
  modeSwarm: MysqlRemoveModeSwarm | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<MysqlRemoveNetworkSwarm> | null;
  replicas: number;
  createdAt: string;
  environmentId: string;
  serverId: string | null;
  environment: MysqlRemoveEnvironment;
  mounts: Array<MysqlRemoveMount>;
  server: MysqlRemoveServer | null;
  backups: Array<MysqlRemoveBackup>;
};

export type MysqlRemoveResponse = MysqlRemoveResponseBody | models.ErrorT;

/** @internal */
export const MysqlRemoveSecurity$inboundSchema: z.ZodType<
  MysqlRemoveSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type MysqlRemoveSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const MysqlRemoveSecurity$outboundSchema: z.ZodType<
  MysqlRemoveSecurity$Outbound,
  z.ZodTypeDef,
  MysqlRemoveSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveSecurity$ {
  /** @deprecated use `MysqlRemoveSecurity$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveSecurity$inboundSchema;
  /** @deprecated use `MysqlRemoveSecurity$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveSecurity$outboundSchema;
  /** @deprecated use `MysqlRemoveSecurity$Outbound` instead. */
  export type Outbound = MysqlRemoveSecurity$Outbound;
}

export function mysqlRemoveSecurityToJSON(
  mysqlRemoveSecurity: MysqlRemoveSecurity,
): string {
  return JSON.stringify(
    MysqlRemoveSecurity$outboundSchema.parse(mysqlRemoveSecurity),
  );
}

export function mysqlRemoveSecurityFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemoveSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemoveSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemoveSecurity' from JSON`,
  );
}

/** @internal */
export const MysqlRemoveRequest$inboundSchema: z.ZodType<
  MysqlRemoveRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mysqlId: z.string(),
});

/** @internal */
export type MysqlRemoveRequest$Outbound = {
  mysqlId: string;
};

/** @internal */
export const MysqlRemoveRequest$outboundSchema: z.ZodType<
  MysqlRemoveRequest$Outbound,
  z.ZodTypeDef,
  MysqlRemoveRequest
> = z.object({
  mysqlId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveRequest$ {
  /** @deprecated use `MysqlRemoveRequest$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveRequest$inboundSchema;
  /** @deprecated use `MysqlRemoveRequest$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveRequest$outboundSchema;
  /** @deprecated use `MysqlRemoveRequest$Outbound` instead. */
  export type Outbound = MysqlRemoveRequest$Outbound;
}

export function mysqlRemoveRequestToJSON(
  mysqlRemoveRequest: MysqlRemoveRequest,
): string {
  return JSON.stringify(
    MysqlRemoveRequest$outboundSchema.parse(mysqlRemoveRequest),
  );
}

export function mysqlRemoveRequestFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemoveRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemoveRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemoveRequest' from JSON`,
  );
}

/** @internal */
export const MysqlRemoveApplicationStatus$inboundSchema: z.ZodNativeEnum<
  typeof MysqlRemoveApplicationStatus
> = z.nativeEnum(MysqlRemoveApplicationStatus);

/** @internal */
export const MysqlRemoveApplicationStatus$outboundSchema: z.ZodNativeEnum<
  typeof MysqlRemoveApplicationStatus
> = MysqlRemoveApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveApplicationStatus$ {
  /** @deprecated use `MysqlRemoveApplicationStatus$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveApplicationStatus$inboundSchema;
  /** @deprecated use `MysqlRemoveApplicationStatus$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveApplicationStatus$outboundSchema;
}

/** @internal */
export const MysqlRemoveHealthCheckSwarm$inboundSchema: z.ZodType<
  MysqlRemoveHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Test: z.array(z.string()).optional(),
  Interval: z.number().optional(),
  Timeout: z.number().optional(),
  StartPeriod: z.number().optional(),
  Retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Test": "test",
    "Interval": "interval",
    "Timeout": "timeout",
    "StartPeriod": "startPeriod",
    "Retries": "retries",
  });
});

/** @internal */
export type MysqlRemoveHealthCheckSwarm$Outbound = {
  Test?: Array<string> | undefined;
  Interval?: number | undefined;
  Timeout?: number | undefined;
  StartPeriod?: number | undefined;
  Retries?: number | undefined;
};

/** @internal */
export const MysqlRemoveHealthCheckSwarm$outboundSchema: z.ZodType<
  MysqlRemoveHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  MysqlRemoveHealthCheckSwarm
> = z.object({
  test: z.array(z.string()).optional(),
  interval: z.number().optional(),
  timeout: z.number().optional(),
  startPeriod: z.number().optional(),
  retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    test: "Test",
    interval: "Interval",
    timeout: "Timeout",
    startPeriod: "StartPeriod",
    retries: "Retries",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveHealthCheckSwarm$ {
  /** @deprecated use `MysqlRemoveHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveHealthCheckSwarm$inboundSchema;
  /** @deprecated use `MysqlRemoveHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveHealthCheckSwarm$outboundSchema;
  /** @deprecated use `MysqlRemoveHealthCheckSwarm$Outbound` instead. */
  export type Outbound = MysqlRemoveHealthCheckSwarm$Outbound;
}

export function mysqlRemoveHealthCheckSwarmToJSON(
  mysqlRemoveHealthCheckSwarm: MysqlRemoveHealthCheckSwarm,
): string {
  return JSON.stringify(
    MysqlRemoveHealthCheckSwarm$outboundSchema.parse(
      mysqlRemoveHealthCheckSwarm,
    ),
  );
}

export function mysqlRemoveHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemoveHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemoveHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemoveHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlRemoveRestartPolicySwarm$inboundSchema: z.ZodType<
  MysqlRemoveRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type MysqlRemoveRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const MysqlRemoveRestartPolicySwarm$outboundSchema: z.ZodType<
  MysqlRemoveRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  MysqlRemoveRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveRestartPolicySwarm$ {
  /** @deprecated use `MysqlRemoveRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveRestartPolicySwarm$inboundSchema;
  /** @deprecated use `MysqlRemoveRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveRestartPolicySwarm$outboundSchema;
  /** @deprecated use `MysqlRemoveRestartPolicySwarm$Outbound` instead. */
  export type Outbound = MysqlRemoveRestartPolicySwarm$Outbound;
}

export function mysqlRemoveRestartPolicySwarmToJSON(
  mysqlRemoveRestartPolicySwarm: MysqlRemoveRestartPolicySwarm,
): string {
  return JSON.stringify(
    MysqlRemoveRestartPolicySwarm$outboundSchema.parse(
      mysqlRemoveRestartPolicySwarm,
    ),
  );
}

export function mysqlRemoveRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemoveRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemoveRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemoveRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const MysqlRemoveSpread$inboundSchema: z.ZodType<
  MysqlRemoveSpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type MysqlRemoveSpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const MysqlRemoveSpread$outboundSchema: z.ZodType<
  MysqlRemoveSpread$Outbound,
  z.ZodTypeDef,
  MysqlRemoveSpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveSpread$ {
  /** @deprecated use `MysqlRemoveSpread$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveSpread$inboundSchema;
  /** @deprecated use `MysqlRemoveSpread$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveSpread$outboundSchema;
  /** @deprecated use `MysqlRemoveSpread$Outbound` instead. */
  export type Outbound = MysqlRemoveSpread$Outbound;
}

export function mysqlRemoveSpreadToJSON(
  mysqlRemoveSpread: MysqlRemoveSpread,
): string {
  return JSON.stringify(
    MysqlRemoveSpread$outboundSchema.parse(mysqlRemoveSpread),
  );
}

export function mysqlRemoveSpreadFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemoveSpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemoveSpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemoveSpread' from JSON`,
  );
}

/** @internal */
export const MysqlRemovePreference$inboundSchema: z.ZodType<
  MysqlRemovePreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => MysqlRemoveSpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type MysqlRemovePreference$Outbound = {
  Spread: MysqlRemoveSpread$Outbound;
};

/** @internal */
export const MysqlRemovePreference$outboundSchema: z.ZodType<
  MysqlRemovePreference$Outbound,
  z.ZodTypeDef,
  MysqlRemovePreference
> = z.object({
  spread: z.lazy(() => MysqlRemoveSpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemovePreference$ {
  /** @deprecated use `MysqlRemovePreference$inboundSchema` instead. */
  export const inboundSchema = MysqlRemovePreference$inboundSchema;
  /** @deprecated use `MysqlRemovePreference$outboundSchema` instead. */
  export const outboundSchema = MysqlRemovePreference$outboundSchema;
  /** @deprecated use `MysqlRemovePreference$Outbound` instead. */
  export type Outbound = MysqlRemovePreference$Outbound;
}

export function mysqlRemovePreferenceToJSON(
  mysqlRemovePreference: MysqlRemovePreference,
): string {
  return JSON.stringify(
    MysqlRemovePreference$outboundSchema.parse(mysqlRemovePreference),
  );
}

export function mysqlRemovePreferenceFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemovePreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemovePreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemovePreference' from JSON`,
  );
}

/** @internal */
export const MysqlRemovePlatform$inboundSchema: z.ZodType<
  MysqlRemovePlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type MysqlRemovePlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const MysqlRemovePlatform$outboundSchema: z.ZodType<
  MysqlRemovePlatform$Outbound,
  z.ZodTypeDef,
  MysqlRemovePlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemovePlatform$ {
  /** @deprecated use `MysqlRemovePlatform$inboundSchema` instead. */
  export const inboundSchema = MysqlRemovePlatform$inboundSchema;
  /** @deprecated use `MysqlRemovePlatform$outboundSchema` instead. */
  export const outboundSchema = MysqlRemovePlatform$outboundSchema;
  /** @deprecated use `MysqlRemovePlatform$Outbound` instead. */
  export type Outbound = MysqlRemovePlatform$Outbound;
}

export function mysqlRemovePlatformToJSON(
  mysqlRemovePlatform: MysqlRemovePlatform,
): string {
  return JSON.stringify(
    MysqlRemovePlatform$outboundSchema.parse(mysqlRemovePlatform),
  );
}

export function mysqlRemovePlatformFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemovePlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemovePlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemovePlatform' from JSON`,
  );
}

/** @internal */
export const MysqlRemovePlacementSwarm$inboundSchema: z.ZodType<
  MysqlRemovePlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  Preferences: z.array(z.lazy(() => MysqlRemovePreference$inboundSchema))
    .optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => MysqlRemovePlatform$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "Preferences": "preferences",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
  });
});

/** @internal */
export type MysqlRemovePlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  Preferences?: Array<MysqlRemovePreference$Outbound> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<MysqlRemovePlatform$Outbound> | undefined;
};

/** @internal */
export const MysqlRemovePlacementSwarm$outboundSchema: z.ZodType<
  MysqlRemovePlacementSwarm$Outbound,
  z.ZodTypeDef,
  MysqlRemovePlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  preferences: z.array(z.lazy(() => MysqlRemovePreference$outboundSchema))
    .optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => MysqlRemovePlatform$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    preferences: "Preferences",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemovePlacementSwarm$ {
  /** @deprecated use `MysqlRemovePlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlRemovePlacementSwarm$inboundSchema;
  /** @deprecated use `MysqlRemovePlacementSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlRemovePlacementSwarm$outboundSchema;
  /** @deprecated use `MysqlRemovePlacementSwarm$Outbound` instead. */
  export type Outbound = MysqlRemovePlacementSwarm$Outbound;
}

export function mysqlRemovePlacementSwarmToJSON(
  mysqlRemovePlacementSwarm: MysqlRemovePlacementSwarm,
): string {
  return JSON.stringify(
    MysqlRemovePlacementSwarm$outboundSchema.parse(mysqlRemovePlacementSwarm),
  );
}

export function mysqlRemovePlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemovePlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemovePlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemovePlacementSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlRemoveUpdateConfigSwarm$inboundSchema: z.ZodType<
  MysqlRemoveUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type MysqlRemoveUpdateConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const MysqlRemoveUpdateConfigSwarm$outboundSchema: z.ZodType<
  MysqlRemoveUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  MysqlRemoveUpdateConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveUpdateConfigSwarm$ {
  /** @deprecated use `MysqlRemoveUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `MysqlRemoveUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `MysqlRemoveUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = MysqlRemoveUpdateConfigSwarm$Outbound;
}

export function mysqlRemoveUpdateConfigSwarmToJSON(
  mysqlRemoveUpdateConfigSwarm: MysqlRemoveUpdateConfigSwarm,
): string {
  return JSON.stringify(
    MysqlRemoveUpdateConfigSwarm$outboundSchema.parse(
      mysqlRemoveUpdateConfigSwarm,
    ),
  );
}

export function mysqlRemoveUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemoveUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemoveUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemoveUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlRemoveRollbackConfigSwarm$inboundSchema: z.ZodType<
  MysqlRemoveRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type MysqlRemoveRollbackConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const MysqlRemoveRollbackConfigSwarm$outboundSchema: z.ZodType<
  MysqlRemoveRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  MysqlRemoveRollbackConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveRollbackConfigSwarm$ {
  /** @deprecated use `MysqlRemoveRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `MysqlRemoveRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `MysqlRemoveRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = MysqlRemoveRollbackConfigSwarm$Outbound;
}

export function mysqlRemoveRollbackConfigSwarmToJSON(
  mysqlRemoveRollbackConfigSwarm: MysqlRemoveRollbackConfigSwarm,
): string {
  return JSON.stringify(
    MysqlRemoveRollbackConfigSwarm$outboundSchema.parse(
      mysqlRemoveRollbackConfigSwarm,
    ),
  );
}

export function mysqlRemoveRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemoveRollbackConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemoveRollbackConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemoveRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlRemoveReplicated$inboundSchema: z.ZodType<
  MysqlRemoveReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type MysqlRemoveReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const MysqlRemoveReplicated$outboundSchema: z.ZodType<
  MysqlRemoveReplicated$Outbound,
  z.ZodTypeDef,
  MysqlRemoveReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveReplicated$ {
  /** @deprecated use `MysqlRemoveReplicated$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveReplicated$inboundSchema;
  /** @deprecated use `MysqlRemoveReplicated$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveReplicated$outboundSchema;
  /** @deprecated use `MysqlRemoveReplicated$Outbound` instead. */
  export type Outbound = MysqlRemoveReplicated$Outbound;
}

export function mysqlRemoveReplicatedToJSON(
  mysqlRemoveReplicated: MysqlRemoveReplicated,
): string {
  return JSON.stringify(
    MysqlRemoveReplicated$outboundSchema.parse(mysqlRemoveReplicated),
  );
}

export function mysqlRemoveReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemoveReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemoveReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemoveReplicated' from JSON`,
  );
}

/** @internal */
export const MysqlRemoveGlobal$inboundSchema: z.ZodType<
  MysqlRemoveGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MysqlRemoveGlobal$Outbound = {};

/** @internal */
export const MysqlRemoveGlobal$outboundSchema: z.ZodType<
  MysqlRemoveGlobal$Outbound,
  z.ZodTypeDef,
  MysqlRemoveGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveGlobal$ {
  /** @deprecated use `MysqlRemoveGlobal$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveGlobal$inboundSchema;
  /** @deprecated use `MysqlRemoveGlobal$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveGlobal$outboundSchema;
  /** @deprecated use `MysqlRemoveGlobal$Outbound` instead. */
  export type Outbound = MysqlRemoveGlobal$Outbound;
}

export function mysqlRemoveGlobalToJSON(
  mysqlRemoveGlobal: MysqlRemoveGlobal,
): string {
  return JSON.stringify(
    MysqlRemoveGlobal$outboundSchema.parse(mysqlRemoveGlobal),
  );
}

export function mysqlRemoveGlobalFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemoveGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemoveGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemoveGlobal' from JSON`,
  );
}

/** @internal */
export const MysqlRemoveReplicatedJob$inboundSchema: z.ZodType<
  MysqlRemoveReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type MysqlRemoveReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const MysqlRemoveReplicatedJob$outboundSchema: z.ZodType<
  MysqlRemoveReplicatedJob$Outbound,
  z.ZodTypeDef,
  MysqlRemoveReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveReplicatedJob$ {
  /** @deprecated use `MysqlRemoveReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveReplicatedJob$inboundSchema;
  /** @deprecated use `MysqlRemoveReplicatedJob$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveReplicatedJob$outboundSchema;
  /** @deprecated use `MysqlRemoveReplicatedJob$Outbound` instead. */
  export type Outbound = MysqlRemoveReplicatedJob$Outbound;
}

export function mysqlRemoveReplicatedJobToJSON(
  mysqlRemoveReplicatedJob: MysqlRemoveReplicatedJob,
): string {
  return JSON.stringify(
    MysqlRemoveReplicatedJob$outboundSchema.parse(mysqlRemoveReplicatedJob),
  );
}

export function mysqlRemoveReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemoveReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemoveReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemoveReplicatedJob' from JSON`,
  );
}

/** @internal */
export const MysqlRemoveGlobalJob$inboundSchema: z.ZodType<
  MysqlRemoveGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MysqlRemoveGlobalJob$Outbound = {};

/** @internal */
export const MysqlRemoveGlobalJob$outboundSchema: z.ZodType<
  MysqlRemoveGlobalJob$Outbound,
  z.ZodTypeDef,
  MysqlRemoveGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveGlobalJob$ {
  /** @deprecated use `MysqlRemoveGlobalJob$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveGlobalJob$inboundSchema;
  /** @deprecated use `MysqlRemoveGlobalJob$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveGlobalJob$outboundSchema;
  /** @deprecated use `MysqlRemoveGlobalJob$Outbound` instead. */
  export type Outbound = MysqlRemoveGlobalJob$Outbound;
}

export function mysqlRemoveGlobalJobToJSON(
  mysqlRemoveGlobalJob: MysqlRemoveGlobalJob,
): string {
  return JSON.stringify(
    MysqlRemoveGlobalJob$outboundSchema.parse(mysqlRemoveGlobalJob),
  );
}

export function mysqlRemoveGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemoveGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemoveGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemoveGlobalJob' from JSON`,
  );
}

/** @internal */
export const MysqlRemoveModeSwarm$inboundSchema: z.ZodType<
  MysqlRemoveModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicated: z.lazy(() => MysqlRemoveReplicated$inboundSchema).optional(),
  Global: z.lazy(() => MysqlRemoveGlobal$inboundSchema).optional(),
  ReplicatedJob: z.lazy(() => MysqlRemoveReplicatedJob$inboundSchema)
    .optional(),
  GlobalJob: z.lazy(() => MysqlRemoveGlobalJob$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicated": "replicated",
    "Global": "global",
    "ReplicatedJob": "replicatedJob",
    "GlobalJob": "globalJob",
  });
});

/** @internal */
export type MysqlRemoveModeSwarm$Outbound = {
  Replicated?: MysqlRemoveReplicated$Outbound | undefined;
  Global?: MysqlRemoveGlobal$Outbound | undefined;
  ReplicatedJob?: MysqlRemoveReplicatedJob$Outbound | undefined;
  GlobalJob?: MysqlRemoveGlobalJob$Outbound | undefined;
};

/** @internal */
export const MysqlRemoveModeSwarm$outboundSchema: z.ZodType<
  MysqlRemoveModeSwarm$Outbound,
  z.ZodTypeDef,
  MysqlRemoveModeSwarm
> = z.object({
  replicated: z.lazy(() => MysqlRemoveReplicated$outboundSchema).optional(),
  global: z.lazy(() => MysqlRemoveGlobal$outboundSchema).optional(),
  replicatedJob: z.lazy(() => MysqlRemoveReplicatedJob$outboundSchema)
    .optional(),
  globalJob: z.lazy(() => MysqlRemoveGlobalJob$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    replicated: "Replicated",
    global: "Global",
    replicatedJob: "ReplicatedJob",
    globalJob: "GlobalJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveModeSwarm$ {
  /** @deprecated use `MysqlRemoveModeSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveModeSwarm$inboundSchema;
  /** @deprecated use `MysqlRemoveModeSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveModeSwarm$outboundSchema;
  /** @deprecated use `MysqlRemoveModeSwarm$Outbound` instead. */
  export type Outbound = MysqlRemoveModeSwarm$Outbound;
}

export function mysqlRemoveModeSwarmToJSON(
  mysqlRemoveModeSwarm: MysqlRemoveModeSwarm,
): string {
  return JSON.stringify(
    MysqlRemoveModeSwarm$outboundSchema.parse(mysqlRemoveModeSwarm),
  );
}

export function mysqlRemoveModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemoveModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemoveModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemoveModeSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlRemoveDriverOpts$inboundSchema: z.ZodType<
  MysqlRemoveDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MysqlRemoveDriverOpts$Outbound = {};

/** @internal */
export const MysqlRemoveDriverOpts$outboundSchema: z.ZodType<
  MysqlRemoveDriverOpts$Outbound,
  z.ZodTypeDef,
  MysqlRemoveDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveDriverOpts$ {
  /** @deprecated use `MysqlRemoveDriverOpts$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveDriverOpts$inboundSchema;
  /** @deprecated use `MysqlRemoveDriverOpts$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveDriverOpts$outboundSchema;
  /** @deprecated use `MysqlRemoveDriverOpts$Outbound` instead. */
  export type Outbound = MysqlRemoveDriverOpts$Outbound;
}

export function mysqlRemoveDriverOptsToJSON(
  mysqlRemoveDriverOpts: MysqlRemoveDriverOpts,
): string {
  return JSON.stringify(
    MysqlRemoveDriverOpts$outboundSchema.parse(mysqlRemoveDriverOpts),
  );
}

export function mysqlRemoveDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemoveDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemoveDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemoveDriverOpts' from JSON`,
  );
}

/** @internal */
export const MysqlRemoveNetworkSwarm$inboundSchema: z.ZodType<
  MysqlRemoveNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Target: z.string().optional(),
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => MysqlRemoveDriverOpts$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Target": "target",
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
  });
});

/** @internal */
export type MysqlRemoveNetworkSwarm$Outbound = {
  Target?: string | undefined;
  Aliases?: Array<string> | undefined;
  DriverOpts?: MysqlRemoveDriverOpts$Outbound | undefined;
};

/** @internal */
export const MysqlRemoveNetworkSwarm$outboundSchema: z.ZodType<
  MysqlRemoveNetworkSwarm$Outbound,
  z.ZodTypeDef,
  MysqlRemoveNetworkSwarm
> = z.object({
  target: z.string().optional(),
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => MysqlRemoveDriverOpts$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    target: "Target",
    aliases: "Aliases",
    driverOpts: "DriverOpts",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveNetworkSwarm$ {
  /** @deprecated use `MysqlRemoveNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveNetworkSwarm$inboundSchema;
  /** @deprecated use `MysqlRemoveNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveNetworkSwarm$outboundSchema;
  /** @deprecated use `MysqlRemoveNetworkSwarm$Outbound` instead. */
  export type Outbound = MysqlRemoveNetworkSwarm$Outbound;
}

export function mysqlRemoveNetworkSwarmToJSON(
  mysqlRemoveNetworkSwarm: MysqlRemoveNetworkSwarm,
): string {
  return JSON.stringify(
    MysqlRemoveNetworkSwarm$outboundSchema.parse(mysqlRemoveNetworkSwarm),
  );
}

export function mysqlRemoveNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemoveNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemoveNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemoveNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const MysqlRemoveProject$inboundSchema: z.ZodType<
  MysqlRemoveProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  organizationId: z.string(),
  env: z.string(),
});

/** @internal */
export type MysqlRemoveProject$Outbound = {
  projectId: string;
  name: string;
  description: string | null;
  createdAt: string;
  organizationId: string;
  env: string;
};

/** @internal */
export const MysqlRemoveProject$outboundSchema: z.ZodType<
  MysqlRemoveProject$Outbound,
  z.ZodTypeDef,
  MysqlRemoveProject
> = z.object({
  projectId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  organizationId: z.string(),
  env: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveProject$ {
  /** @deprecated use `MysqlRemoveProject$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveProject$inboundSchema;
  /** @deprecated use `MysqlRemoveProject$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveProject$outboundSchema;
  /** @deprecated use `MysqlRemoveProject$Outbound` instead. */
  export type Outbound = MysqlRemoveProject$Outbound;
}

export function mysqlRemoveProjectToJSON(
  mysqlRemoveProject: MysqlRemoveProject,
): string {
  return JSON.stringify(
    MysqlRemoveProject$outboundSchema.parse(mysqlRemoveProject),
  );
}

export function mysqlRemoveProjectFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemoveProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemoveProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemoveProject' from JSON`,
  );
}

/** @internal */
export const MysqlRemoveEnvironment$inboundSchema: z.ZodType<
  MysqlRemoveEnvironment,
  z.ZodTypeDef,
  unknown
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
  project: z.lazy(() => MysqlRemoveProject$inboundSchema),
});

/** @internal */
export type MysqlRemoveEnvironment$Outbound = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
  project: MysqlRemoveProject$Outbound;
};

/** @internal */
export const MysqlRemoveEnvironment$outboundSchema: z.ZodType<
  MysqlRemoveEnvironment$Outbound,
  z.ZodTypeDef,
  MysqlRemoveEnvironment
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
  project: z.lazy(() => MysqlRemoveProject$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveEnvironment$ {
  /** @deprecated use `MysqlRemoveEnvironment$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveEnvironment$inboundSchema;
  /** @deprecated use `MysqlRemoveEnvironment$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveEnvironment$outboundSchema;
  /** @deprecated use `MysqlRemoveEnvironment$Outbound` instead. */
  export type Outbound = MysqlRemoveEnvironment$Outbound;
}

export function mysqlRemoveEnvironmentToJSON(
  mysqlRemoveEnvironment: MysqlRemoveEnvironment,
): string {
  return JSON.stringify(
    MysqlRemoveEnvironment$outboundSchema.parse(mysqlRemoveEnvironment),
  );
}

export function mysqlRemoveEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemoveEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemoveEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemoveEnvironment' from JSON`,
  );
}

/** @internal */
export const MysqlRemoveType$inboundSchema: z.ZodNativeEnum<
  typeof MysqlRemoveType
> = z.nativeEnum(MysqlRemoveType);

/** @internal */
export const MysqlRemoveType$outboundSchema: z.ZodNativeEnum<
  typeof MysqlRemoveType
> = MysqlRemoveType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveType$ {
  /** @deprecated use `MysqlRemoveType$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveType$inboundSchema;
  /** @deprecated use `MysqlRemoveType$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveType$outboundSchema;
}

/** @internal */
export const MysqlRemoveServiceType$inboundSchema: z.ZodNativeEnum<
  typeof MysqlRemoveServiceType
> = z.nativeEnum(MysqlRemoveServiceType);

/** @internal */
export const MysqlRemoveServiceType$outboundSchema: z.ZodNativeEnum<
  typeof MysqlRemoveServiceType
> = MysqlRemoveServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveServiceType$ {
  /** @deprecated use `MysqlRemoveServiceType$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveServiceType$inboundSchema;
  /** @deprecated use `MysqlRemoveServiceType$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveServiceType$outboundSchema;
}

/** @internal */
export const MysqlRemoveMount$inboundSchema: z.ZodType<
  MysqlRemoveMount,
  z.ZodTypeDef,
  unknown
> = z.object({
  mountId: z.string(),
  type: MysqlRemoveType$inboundSchema,
  hostPath: z.nullable(z.string()),
  volumeName: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  content: z.nullable(z.string()),
  serviceType: MysqlRemoveServiceType$inboundSchema,
  mountPath: z.string(),
  applicationId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
});

/** @internal */
export type MysqlRemoveMount$Outbound = {
  mountId: string;
  type: string;
  hostPath: string | null;
  volumeName: string | null;
  filePath: string | null;
  content: string | null;
  serviceType: string;
  mountPath: string;
  applicationId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mysqlId: string | null;
  redisId: string | null;
  composeId: string | null;
};

/** @internal */
export const MysqlRemoveMount$outboundSchema: z.ZodType<
  MysqlRemoveMount$Outbound,
  z.ZodTypeDef,
  MysqlRemoveMount
> = z.object({
  mountId: z.string(),
  type: MysqlRemoveType$outboundSchema,
  hostPath: z.nullable(z.string()),
  volumeName: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  content: z.nullable(z.string()),
  serviceType: MysqlRemoveServiceType$outboundSchema,
  mountPath: z.string(),
  applicationId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveMount$ {
  /** @deprecated use `MysqlRemoveMount$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveMount$inboundSchema;
  /** @deprecated use `MysqlRemoveMount$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveMount$outboundSchema;
  /** @deprecated use `MysqlRemoveMount$Outbound` instead. */
  export type Outbound = MysqlRemoveMount$Outbound;
}

export function mysqlRemoveMountToJSON(
  mysqlRemoveMount: MysqlRemoveMount,
): string {
  return JSON.stringify(
    MysqlRemoveMount$outboundSchema.parse(mysqlRemoveMount),
  );
}

export function mysqlRemoveMountFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemoveMount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemoveMount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemoveMount' from JSON`,
  );
}

/** @internal */
export const MysqlRemoveServerStatus$inboundSchema: z.ZodNativeEnum<
  typeof MysqlRemoveServerStatus
> = z.nativeEnum(MysqlRemoveServerStatus);

/** @internal */
export const MysqlRemoveServerStatus$outboundSchema: z.ZodNativeEnum<
  typeof MysqlRemoveServerStatus
> = MysqlRemoveServerStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveServerStatus$ {
  /** @deprecated use `MysqlRemoveServerStatus$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveServerStatus$inboundSchema;
  /** @deprecated use `MysqlRemoveServerStatus$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveServerStatus$outboundSchema;
}

/** @internal */
export const MysqlRemoveMetricsConfigEnum$inboundSchema: z.ZodNativeEnum<
  typeof MysqlRemoveMetricsConfigEnum
> = z.nativeEnum(MysqlRemoveMetricsConfigEnum);

/** @internal */
export const MysqlRemoveMetricsConfigEnum$outboundSchema: z.ZodNativeEnum<
  typeof MysqlRemoveMetricsConfigEnum
> = MysqlRemoveMetricsConfigEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveMetricsConfigEnum$ {
  /** @deprecated use `MysqlRemoveMetricsConfigEnum$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveMetricsConfigEnum$inboundSchema;
  /** @deprecated use `MysqlRemoveMetricsConfigEnum$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveMetricsConfigEnum$outboundSchema;
}

/** @internal */
export const MysqlRemoveMetricsConfigUnion1$inboundSchema: z.ZodType<
  MysqlRemoveMetricsConfigUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  MysqlRemoveMetricsConfigEnum$inboundSchema,
]);

/** @internal */
export type MysqlRemoveMetricsConfigUnion1$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const MysqlRemoveMetricsConfigUnion1$outboundSchema: z.ZodType<
  MysqlRemoveMetricsConfigUnion1$Outbound,
  z.ZodTypeDef,
  MysqlRemoveMetricsConfigUnion1
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  MysqlRemoveMetricsConfigEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveMetricsConfigUnion1$ {
  /** @deprecated use `MysqlRemoveMetricsConfigUnion1$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveMetricsConfigUnion1$inboundSchema;
  /** @deprecated use `MysqlRemoveMetricsConfigUnion1$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveMetricsConfigUnion1$outboundSchema;
  /** @deprecated use `MysqlRemoveMetricsConfigUnion1$Outbound` instead. */
  export type Outbound = MysqlRemoveMetricsConfigUnion1$Outbound;
}

export function mysqlRemoveMetricsConfigUnion1ToJSON(
  mysqlRemoveMetricsConfigUnion1: MysqlRemoveMetricsConfigUnion1,
): string {
  return JSON.stringify(
    MysqlRemoveMetricsConfigUnion1$outboundSchema.parse(
      mysqlRemoveMetricsConfigUnion1,
    ),
  );
}

export function mysqlRemoveMetricsConfigUnion1FromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemoveMetricsConfigUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemoveMetricsConfigUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemoveMetricsConfigUnion1' from JSON`,
  );
}

/** @internal */
export const MysqlRemoveMetricsConfigUnion2$inboundSchema: z.ZodType<
  MysqlRemoveMetricsConfigUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    MysqlRemoveMetricsConfigEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type MysqlRemoveMetricsConfigUnion2$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const MysqlRemoveMetricsConfigUnion2$outboundSchema: z.ZodType<
  MysqlRemoveMetricsConfigUnion2$Outbound,
  z.ZodTypeDef,
  MysqlRemoveMetricsConfigUnion2
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    MysqlRemoveMetricsConfigEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveMetricsConfigUnion2$ {
  /** @deprecated use `MysqlRemoveMetricsConfigUnion2$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveMetricsConfigUnion2$inboundSchema;
  /** @deprecated use `MysqlRemoveMetricsConfigUnion2$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveMetricsConfigUnion2$outboundSchema;
  /** @deprecated use `MysqlRemoveMetricsConfigUnion2$Outbound` instead. */
  export type Outbound = MysqlRemoveMetricsConfigUnion2$Outbound;
}

export function mysqlRemoveMetricsConfigUnion2ToJSON(
  mysqlRemoveMetricsConfigUnion2: MysqlRemoveMetricsConfigUnion2,
): string {
  return JSON.stringify(
    MysqlRemoveMetricsConfigUnion2$outboundSchema.parse(
      mysqlRemoveMetricsConfigUnion2,
    ),
  );
}

export function mysqlRemoveMetricsConfigUnion2FromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemoveMetricsConfigUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemoveMetricsConfigUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemoveMetricsConfigUnion2' from JSON`,
  );
}

/** @internal */
export const MysqlRemoveServer$inboundSchema: z.ZodType<
  MysqlRemoveServer,
  z.ZodTypeDef,
  unknown
> = z.object({
  serverId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  ipAddress: z.string(),
  port: z.number(),
  username: z.string(),
  appName: z.string(),
  enableDockerCleanup: z.boolean(),
  createdAt: z.string(),
  organizationId: z.string(),
  serverStatus: MysqlRemoveServerStatus$inboundSchema,
  command: z.string(),
  sshKeyId: z.nullable(z.string()),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      MysqlRemoveMetricsConfigEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
});

/** @internal */
export type MysqlRemoveServer$Outbound = {
  serverId: string;
  name: string;
  description: string | null;
  ipAddress: string;
  port: number;
  username: string;
  appName: string;
  enableDockerCleanup: boolean;
  createdAt: string;
  organizationId: string;
  serverStatus: string;
  command: string;
  sshKeyId: string | null;
  metricsConfig: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  };
};

/** @internal */
export const MysqlRemoveServer$outboundSchema: z.ZodType<
  MysqlRemoveServer$Outbound,
  z.ZodTypeDef,
  MysqlRemoveServer
> = z.object({
  serverId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  ipAddress: z.string(),
  port: z.number(),
  username: z.string(),
  appName: z.string(),
  enableDockerCleanup: z.boolean(),
  createdAt: z.string(),
  organizationId: z.string(),
  serverStatus: MysqlRemoveServerStatus$outboundSchema,
  command: z.string(),
  sshKeyId: z.nullable(z.string()),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      MysqlRemoveMetricsConfigEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveServer$ {
  /** @deprecated use `MysqlRemoveServer$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveServer$inboundSchema;
  /** @deprecated use `MysqlRemoveServer$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveServer$outboundSchema;
  /** @deprecated use `MysqlRemoveServer$Outbound` instead. */
  export type Outbound = MysqlRemoveServer$Outbound;
}

export function mysqlRemoveServerToJSON(
  mysqlRemoveServer: MysqlRemoveServer,
): string {
  return JSON.stringify(
    MysqlRemoveServer$outboundSchema.parse(mysqlRemoveServer),
  );
}

export function mysqlRemoveServerFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemoveServer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemoveServer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemoveServer' from JSON`,
  );
}

/** @internal */
export const MysqlRemoveBackupType$inboundSchema: z.ZodNativeEnum<
  typeof MysqlRemoveBackupType
> = z.nativeEnum(MysqlRemoveBackupType);

/** @internal */
export const MysqlRemoveBackupType$outboundSchema: z.ZodNativeEnum<
  typeof MysqlRemoveBackupType
> = MysqlRemoveBackupType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveBackupType$ {
  /** @deprecated use `MysqlRemoveBackupType$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveBackupType$inboundSchema;
  /** @deprecated use `MysqlRemoveBackupType$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveBackupType$outboundSchema;
}

/** @internal */
export const MysqlRemoveDatabaseType$inboundSchema: z.ZodNativeEnum<
  typeof MysqlRemoveDatabaseType
> = z.nativeEnum(MysqlRemoveDatabaseType);

/** @internal */
export const MysqlRemoveDatabaseType$outboundSchema: z.ZodNativeEnum<
  typeof MysqlRemoveDatabaseType
> = MysqlRemoveDatabaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveDatabaseType$ {
  /** @deprecated use `MysqlRemoveDatabaseType$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveDatabaseType$inboundSchema;
  /** @deprecated use `MysqlRemoveDatabaseType$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveDatabaseType$outboundSchema;
}

/** @internal */
export const MysqlRemoveMetadataEnum$inboundSchema: z.ZodNativeEnum<
  typeof MysqlRemoveMetadataEnum
> = z.nativeEnum(MysqlRemoveMetadataEnum);

/** @internal */
export const MysqlRemoveMetadataEnum$outboundSchema: z.ZodNativeEnum<
  typeof MysqlRemoveMetadataEnum
> = MysqlRemoveMetadataEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveMetadataEnum$ {
  /** @deprecated use `MysqlRemoveMetadataEnum$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveMetadataEnum$inboundSchema;
  /** @deprecated use `MysqlRemoveMetadataEnum$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveMetadataEnum$outboundSchema;
}

/** @internal */
export const MysqlRemovePostgres$inboundSchema: z.ZodType<
  MysqlRemovePostgres,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseUser: z.string(),
});

/** @internal */
export type MysqlRemovePostgres$Outbound = {
  databaseUser: string;
};

/** @internal */
export const MysqlRemovePostgres$outboundSchema: z.ZodType<
  MysqlRemovePostgres$Outbound,
  z.ZodTypeDef,
  MysqlRemovePostgres
> = z.object({
  databaseUser: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemovePostgres$ {
  /** @deprecated use `MysqlRemovePostgres$inboundSchema` instead. */
  export const inboundSchema = MysqlRemovePostgres$inboundSchema;
  /** @deprecated use `MysqlRemovePostgres$outboundSchema` instead. */
  export const outboundSchema = MysqlRemovePostgres$outboundSchema;
  /** @deprecated use `MysqlRemovePostgres$Outbound` instead. */
  export type Outbound = MysqlRemovePostgres$Outbound;
}

export function mysqlRemovePostgresToJSON(
  mysqlRemovePostgres: MysqlRemovePostgres,
): string {
  return JSON.stringify(
    MysqlRemovePostgres$outboundSchema.parse(mysqlRemovePostgres),
  );
}

export function mysqlRemovePostgresFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemovePostgres, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemovePostgres$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemovePostgres' from JSON`,
  );
}

/** @internal */
export const MysqlRemoveMariadb$inboundSchema: z.ZodType<
  MysqlRemoveMariadb,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseUser: z.string(),
  databasePassword: z.string(),
});

/** @internal */
export type MysqlRemoveMariadb$Outbound = {
  databaseUser: string;
  databasePassword: string;
};

/** @internal */
export const MysqlRemoveMariadb$outboundSchema: z.ZodType<
  MysqlRemoveMariadb$Outbound,
  z.ZodTypeDef,
  MysqlRemoveMariadb
> = z.object({
  databaseUser: z.string(),
  databasePassword: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveMariadb$ {
  /** @deprecated use `MysqlRemoveMariadb$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveMariadb$inboundSchema;
  /** @deprecated use `MysqlRemoveMariadb$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveMariadb$outboundSchema;
  /** @deprecated use `MysqlRemoveMariadb$Outbound` instead. */
  export type Outbound = MysqlRemoveMariadb$Outbound;
}

export function mysqlRemoveMariadbToJSON(
  mysqlRemoveMariadb: MysqlRemoveMariadb,
): string {
  return JSON.stringify(
    MysqlRemoveMariadb$outboundSchema.parse(mysqlRemoveMariadb),
  );
}

export function mysqlRemoveMariadbFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemoveMariadb, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemoveMariadb$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemoveMariadb' from JSON`,
  );
}

/** @internal */
export const MysqlRemoveMongo$inboundSchema: z.ZodType<
  MysqlRemoveMongo,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseUser: z.string(),
  databasePassword: z.string(),
});

/** @internal */
export type MysqlRemoveMongo$Outbound = {
  databaseUser: string;
  databasePassword: string;
};

/** @internal */
export const MysqlRemoveMongo$outboundSchema: z.ZodType<
  MysqlRemoveMongo$Outbound,
  z.ZodTypeDef,
  MysqlRemoveMongo
> = z.object({
  databaseUser: z.string(),
  databasePassword: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveMongo$ {
  /** @deprecated use `MysqlRemoveMongo$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveMongo$inboundSchema;
  /** @deprecated use `MysqlRemoveMongo$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveMongo$outboundSchema;
  /** @deprecated use `MysqlRemoveMongo$Outbound` instead. */
  export type Outbound = MysqlRemoveMongo$Outbound;
}

export function mysqlRemoveMongoToJSON(
  mysqlRemoveMongo: MysqlRemoveMongo,
): string {
  return JSON.stringify(
    MysqlRemoveMongo$outboundSchema.parse(mysqlRemoveMongo),
  );
}

export function mysqlRemoveMongoFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemoveMongo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemoveMongo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemoveMongo' from JSON`,
  );
}

/** @internal */
export const MysqlRemoveMysql$inboundSchema: z.ZodType<
  MysqlRemoveMysql,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseRootPassword: z.string(),
});

/** @internal */
export type MysqlRemoveMysql$Outbound = {
  databaseRootPassword: string;
};

/** @internal */
export const MysqlRemoveMysql$outboundSchema: z.ZodType<
  MysqlRemoveMysql$Outbound,
  z.ZodTypeDef,
  MysqlRemoveMysql
> = z.object({
  databaseRootPassword: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveMysql$ {
  /** @deprecated use `MysqlRemoveMysql$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveMysql$inboundSchema;
  /** @deprecated use `MysqlRemoveMysql$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveMysql$outboundSchema;
  /** @deprecated use `MysqlRemoveMysql$Outbound` instead. */
  export type Outbound = MysqlRemoveMysql$Outbound;
}

export function mysqlRemoveMysqlToJSON(
  mysqlRemoveMysql: MysqlRemoveMysql,
): string {
  return JSON.stringify(
    MysqlRemoveMysql$outboundSchema.parse(mysqlRemoveMysql),
  );
}

export function mysqlRemoveMysqlFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemoveMysql, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemoveMysql$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemoveMysql' from JSON`,
  );
}

/** @internal */
export const MysqlRemoveMetadata$inboundSchema: z.ZodType<
  MysqlRemoveMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  postgres: z.lazy(() => MysqlRemovePostgres$inboundSchema).optional(),
  mariadb: z.lazy(() => MysqlRemoveMariadb$inboundSchema).optional(),
  mongo: z.lazy(() => MysqlRemoveMongo$inboundSchema).optional(),
  mysql: z.lazy(() => MysqlRemoveMysql$inboundSchema).optional(),
});

/** @internal */
export type MysqlRemoveMetadata$Outbound = {
  postgres?: MysqlRemovePostgres$Outbound | undefined;
  mariadb?: MysqlRemoveMariadb$Outbound | undefined;
  mongo?: MysqlRemoveMongo$Outbound | undefined;
  mysql?: MysqlRemoveMysql$Outbound | undefined;
};

/** @internal */
export const MysqlRemoveMetadata$outboundSchema: z.ZodType<
  MysqlRemoveMetadata$Outbound,
  z.ZodTypeDef,
  MysqlRemoveMetadata
> = z.object({
  postgres: z.lazy(() => MysqlRemovePostgres$outboundSchema).optional(),
  mariadb: z.lazy(() => MysqlRemoveMariadb$outboundSchema).optional(),
  mongo: z.lazy(() => MysqlRemoveMongo$outboundSchema).optional(),
  mysql: z.lazy(() => MysqlRemoveMysql$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveMetadata$ {
  /** @deprecated use `MysqlRemoveMetadata$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveMetadata$inboundSchema;
  /** @deprecated use `MysqlRemoveMetadata$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveMetadata$outboundSchema;
  /** @deprecated use `MysqlRemoveMetadata$Outbound` instead. */
  export type Outbound = MysqlRemoveMetadata$Outbound;
}

export function mysqlRemoveMetadataToJSON(
  mysqlRemoveMetadata: MysqlRemoveMetadata,
): string {
  return JSON.stringify(
    MysqlRemoveMetadata$outboundSchema.parse(mysqlRemoveMetadata),
  );
}

export function mysqlRemoveMetadataFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemoveMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemoveMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemoveMetadata' from JSON`,
  );
}

/** @internal */
export const MysqlRemoveMetadataUnion$inboundSchema: z.ZodType<
  MysqlRemoveMetadataUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => MysqlRemoveMetadata$inboundSchema),
  MysqlRemoveMetadataEnum$inboundSchema,
]);

/** @internal */
export type MysqlRemoveMetadataUnion$Outbound =
  | MysqlRemoveMetadata$Outbound
  | string;

/** @internal */
export const MysqlRemoveMetadataUnion$outboundSchema: z.ZodType<
  MysqlRemoveMetadataUnion$Outbound,
  z.ZodTypeDef,
  MysqlRemoveMetadataUnion
> = z.union([
  z.lazy(() => MysqlRemoveMetadata$outboundSchema),
  MysqlRemoveMetadataEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveMetadataUnion$ {
  /** @deprecated use `MysqlRemoveMetadataUnion$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveMetadataUnion$inboundSchema;
  /** @deprecated use `MysqlRemoveMetadataUnion$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveMetadataUnion$outboundSchema;
  /** @deprecated use `MysqlRemoveMetadataUnion$Outbound` instead. */
  export type Outbound = MysqlRemoveMetadataUnion$Outbound;
}

export function mysqlRemoveMetadataUnionToJSON(
  mysqlRemoveMetadataUnion: MysqlRemoveMetadataUnion,
): string {
  return JSON.stringify(
    MysqlRemoveMetadataUnion$outboundSchema.parse(mysqlRemoveMetadataUnion),
  );
}

export function mysqlRemoveMetadataUnionFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemoveMetadataUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemoveMetadataUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemoveMetadataUnion' from JSON`,
  );
}

/** @internal */
export const MysqlRemoveBackup$inboundSchema: z.ZodType<
  MysqlRemoveBackup,
  z.ZodTypeDef,
  unknown
> = z.object({
  backupId: z.string(),
  appName: z.string(),
  schedule: z.string(),
  enabled: z.nullable(z.boolean()),
  database: z.string(),
  prefix: z.string(),
  serviceName: z.nullable(z.string()),
  destinationId: z.string(),
  keepLatestCount: z.nullable(z.number()),
  backupType: MysqlRemoveBackupType$inboundSchema,
  databaseType: MysqlRemoveDatabaseType$inboundSchema,
  composeId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  userId: z.nullable(z.string()),
  metadata: z.nullable(
    z.union([
      z.lazy(() => MysqlRemoveMetadata$inboundSchema),
      MysqlRemoveMetadataEnum$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type MysqlRemoveBackup$Outbound = {
  backupId: string;
  appName: string;
  schedule: string;
  enabled: boolean | null;
  database: string;
  prefix: string;
  serviceName: string | null;
  destinationId: string;
  keepLatestCount: number | null;
  backupType: string;
  databaseType: string;
  composeId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mysqlId: string | null;
  mongoId: string | null;
  userId: string | null;
  metadata?: MysqlRemoveMetadata$Outbound | string | null | undefined;
};

/** @internal */
export const MysqlRemoveBackup$outboundSchema: z.ZodType<
  MysqlRemoveBackup$Outbound,
  z.ZodTypeDef,
  MysqlRemoveBackup
> = z.object({
  backupId: z.string(),
  appName: z.string(),
  schedule: z.string(),
  enabled: z.nullable(z.boolean()),
  database: z.string(),
  prefix: z.string(),
  serviceName: z.nullable(z.string()),
  destinationId: z.string(),
  keepLatestCount: z.nullable(z.number()),
  backupType: MysqlRemoveBackupType$outboundSchema,
  databaseType: MysqlRemoveDatabaseType$outboundSchema,
  composeId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  userId: z.nullable(z.string()),
  metadata: z.nullable(
    z.union([
      z.lazy(() => MysqlRemoveMetadata$outboundSchema),
      MysqlRemoveMetadataEnum$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveBackup$ {
  /** @deprecated use `MysqlRemoveBackup$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveBackup$inboundSchema;
  /** @deprecated use `MysqlRemoveBackup$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveBackup$outboundSchema;
  /** @deprecated use `MysqlRemoveBackup$Outbound` instead. */
  export type Outbound = MysqlRemoveBackup$Outbound;
}

export function mysqlRemoveBackupToJSON(
  mysqlRemoveBackup: MysqlRemoveBackup,
): string {
  return JSON.stringify(
    MysqlRemoveBackup$outboundSchema.parse(mysqlRemoveBackup),
  );
}

export function mysqlRemoveBackupFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemoveBackup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemoveBackup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemoveBackup' from JSON`,
  );
}

/** @internal */
export const MysqlRemoveResponseBody$inboundSchema: z.ZodType<
  MysqlRemoveResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  mysqlId: z.string(),
  name: z.string(),
  appName: z.string(),
  description: z.nullable(z.string()),
  databaseName: z.string(),
  databaseUser: z.string(),
  databasePassword: z.string(),
  databaseRootPassword: z.string(),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  applicationStatus: MysqlRemoveApplicationStatus$inboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => MysqlRemoveHealthCheckSwarm$inboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MysqlRemoveRestartPolicySwarm$inboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => MysqlRemovePlacementSwarm$inboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MysqlRemoveUpdateConfigSwarm$inboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MysqlRemoveRollbackConfigSwarm$inboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => MysqlRemoveModeSwarm$inboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MysqlRemoveNetworkSwarm$inboundSchema)),
  ),
  replicas: z.number(),
  createdAt: z.string(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
  environment: z.lazy(() => MysqlRemoveEnvironment$inboundSchema),
  mounts: z.array(z.lazy(() => MysqlRemoveMount$inboundSchema)),
  server: z.nullable(z.lazy(() => MysqlRemoveServer$inboundSchema)),
  backups: z.array(z.lazy(() => MysqlRemoveBackup$inboundSchema)),
});

/** @internal */
export type MysqlRemoveResponseBody$Outbound = {
  mysqlId: string;
  name: string;
  appName: string;
  description: string | null;
  databaseName: string;
  databaseUser: string;
  databasePassword: string;
  databaseRootPassword: string;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  externalPort: number | null;
  applicationStatus: string;
  healthCheckSwarm: MysqlRemoveHealthCheckSwarm$Outbound | null;
  restartPolicySwarm: MysqlRemoveRestartPolicySwarm$Outbound | null;
  placementSwarm: MysqlRemovePlacementSwarm$Outbound | null;
  updateConfigSwarm: MysqlRemoveUpdateConfigSwarm$Outbound | null;
  rollbackConfigSwarm: MysqlRemoveRollbackConfigSwarm$Outbound | null;
  modeSwarm: MysqlRemoveModeSwarm$Outbound | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<MysqlRemoveNetworkSwarm$Outbound> | null;
  replicas: number;
  createdAt: string;
  environmentId: string;
  serverId: string | null;
  environment: MysqlRemoveEnvironment$Outbound;
  mounts: Array<MysqlRemoveMount$Outbound>;
  server: MysqlRemoveServer$Outbound | null;
  backups: Array<MysqlRemoveBackup$Outbound>;
};

/** @internal */
export const MysqlRemoveResponseBody$outboundSchema: z.ZodType<
  MysqlRemoveResponseBody$Outbound,
  z.ZodTypeDef,
  MysqlRemoveResponseBody
> = z.object({
  mysqlId: z.string(),
  name: z.string(),
  appName: z.string(),
  description: z.nullable(z.string()),
  databaseName: z.string(),
  databaseUser: z.string(),
  databasePassword: z.string(),
  databaseRootPassword: z.string(),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  applicationStatus: MysqlRemoveApplicationStatus$outboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => MysqlRemoveHealthCheckSwarm$outboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MysqlRemoveRestartPolicySwarm$outboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => MysqlRemovePlacementSwarm$outboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MysqlRemoveUpdateConfigSwarm$outboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MysqlRemoveRollbackConfigSwarm$outboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => MysqlRemoveModeSwarm$outboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MysqlRemoveNetworkSwarm$outboundSchema)),
  ),
  replicas: z.number(),
  createdAt: z.string(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
  environment: z.lazy(() => MysqlRemoveEnvironment$outboundSchema),
  mounts: z.array(z.lazy(() => MysqlRemoveMount$outboundSchema)),
  server: z.nullable(z.lazy(() => MysqlRemoveServer$outboundSchema)),
  backups: z.array(z.lazy(() => MysqlRemoveBackup$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveResponseBody$ {
  /** @deprecated use `MysqlRemoveResponseBody$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveResponseBody$inboundSchema;
  /** @deprecated use `MysqlRemoveResponseBody$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveResponseBody$outboundSchema;
  /** @deprecated use `MysqlRemoveResponseBody$Outbound` instead. */
  export type Outbound = MysqlRemoveResponseBody$Outbound;
}

export function mysqlRemoveResponseBodyToJSON(
  mysqlRemoveResponseBody: MysqlRemoveResponseBody,
): string {
  return JSON.stringify(
    MysqlRemoveResponseBody$outboundSchema.parse(mysqlRemoveResponseBody),
  );
}

export function mysqlRemoveResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemoveResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemoveResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemoveResponseBody' from JSON`,
  );
}

/** @internal */
export const MysqlRemoveResponse$inboundSchema: z.ZodType<
  MysqlRemoveResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => MysqlRemoveResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type MysqlRemoveResponse$Outbound =
  | MysqlRemoveResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const MysqlRemoveResponse$outboundSchema: z.ZodType<
  MysqlRemoveResponse$Outbound,
  z.ZodTypeDef,
  MysqlRemoveResponse
> = z.union([
  z.lazy(() => MysqlRemoveResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MysqlRemoveResponse$ {
  /** @deprecated use `MysqlRemoveResponse$inboundSchema` instead. */
  export const inboundSchema = MysqlRemoveResponse$inboundSchema;
  /** @deprecated use `MysqlRemoveResponse$outboundSchema` instead. */
  export const outboundSchema = MysqlRemoveResponse$outboundSchema;
  /** @deprecated use `MysqlRemoveResponse$Outbound` instead. */
  export type Outbound = MysqlRemoveResponse$Outbound;
}

export function mysqlRemoveResponseToJSON(
  mysqlRemoveResponse: MysqlRemoveResponse,
): string {
  return JSON.stringify(
    MysqlRemoveResponse$outboundSchema.parse(mysqlRemoveResponse),
  );
}

export function mysqlRemoveResponseFromJSON(
  jsonString: string,
): SafeParseResult<MysqlRemoveResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MysqlRemoveResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MysqlRemoveResponse' from JSON`,
  );
}
