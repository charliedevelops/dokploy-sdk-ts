/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GitlabOneSecurity = {
  authorization: string;
};

export type GitlabOneRequest = {
  gitlabId: string;
};

export const GitlabOneProviderType = {
  Github: "github",
  Gitlab: "gitlab",
  Bitbucket: "bitbucket",
  Gitea: "gitea",
} as const;
export type GitlabOneProviderType = ClosedEnum<typeof GitlabOneProviderType>;

export type GitlabOneGitProvider = {
  gitProviderId: string;
  name: string;
  providerType: GitlabOneProviderType;
  createdAt: string;
  organizationId: string;
  userId: string;
};

/**
 * Successful response
 */
export type GitlabOneResponseBody = {
  gitlabId: string;
  gitlabUrl: string;
  applicationId: string | null;
  redirectUri: string | null;
  secret: string | null;
  accessToken: string | null;
  refreshToken: string | null;
  groupName: string | null;
  expiresAt: number | null;
  gitProviderId: string;
  gitProvider: GitlabOneGitProvider;
};

export type GitlabOneResponse = GitlabOneResponseBody | models.ErrorT;

/** @internal */
export const GitlabOneSecurity$inboundSchema: z.ZodType<
  GitlabOneSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type GitlabOneSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const GitlabOneSecurity$outboundSchema: z.ZodType<
  GitlabOneSecurity$Outbound,
  z.ZodTypeDef,
  GitlabOneSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitlabOneSecurity$ {
  /** @deprecated use `GitlabOneSecurity$inboundSchema` instead. */
  export const inboundSchema = GitlabOneSecurity$inboundSchema;
  /** @deprecated use `GitlabOneSecurity$outboundSchema` instead. */
  export const outboundSchema = GitlabOneSecurity$outboundSchema;
  /** @deprecated use `GitlabOneSecurity$Outbound` instead. */
  export type Outbound = GitlabOneSecurity$Outbound;
}

export function gitlabOneSecurityToJSON(
  gitlabOneSecurity: GitlabOneSecurity,
): string {
  return JSON.stringify(
    GitlabOneSecurity$outboundSchema.parse(gitlabOneSecurity),
  );
}

export function gitlabOneSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GitlabOneSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitlabOneSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitlabOneSecurity' from JSON`,
  );
}

/** @internal */
export const GitlabOneRequest$inboundSchema: z.ZodType<
  GitlabOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  gitlabId: z.string(),
});

/** @internal */
export type GitlabOneRequest$Outbound = {
  gitlabId: string;
};

/** @internal */
export const GitlabOneRequest$outboundSchema: z.ZodType<
  GitlabOneRequest$Outbound,
  z.ZodTypeDef,
  GitlabOneRequest
> = z.object({
  gitlabId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitlabOneRequest$ {
  /** @deprecated use `GitlabOneRequest$inboundSchema` instead. */
  export const inboundSchema = GitlabOneRequest$inboundSchema;
  /** @deprecated use `GitlabOneRequest$outboundSchema` instead. */
  export const outboundSchema = GitlabOneRequest$outboundSchema;
  /** @deprecated use `GitlabOneRequest$Outbound` instead. */
  export type Outbound = GitlabOneRequest$Outbound;
}

export function gitlabOneRequestToJSON(
  gitlabOneRequest: GitlabOneRequest,
): string {
  return JSON.stringify(
    GitlabOneRequest$outboundSchema.parse(gitlabOneRequest),
  );
}

export function gitlabOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<GitlabOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitlabOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitlabOneRequest' from JSON`,
  );
}

/** @internal */
export const GitlabOneProviderType$inboundSchema: z.ZodNativeEnum<
  typeof GitlabOneProviderType
> = z.nativeEnum(GitlabOneProviderType);

/** @internal */
export const GitlabOneProviderType$outboundSchema: z.ZodNativeEnum<
  typeof GitlabOneProviderType
> = GitlabOneProviderType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitlabOneProviderType$ {
  /** @deprecated use `GitlabOneProviderType$inboundSchema` instead. */
  export const inboundSchema = GitlabOneProviderType$inboundSchema;
  /** @deprecated use `GitlabOneProviderType$outboundSchema` instead. */
  export const outboundSchema = GitlabOneProviderType$outboundSchema;
}

/** @internal */
export const GitlabOneGitProvider$inboundSchema: z.ZodType<
  GitlabOneGitProvider,
  z.ZodTypeDef,
  unknown
> = z.object({
  gitProviderId: z.string(),
  name: z.string(),
  providerType: GitlabOneProviderType$inboundSchema,
  createdAt: z.string(),
  organizationId: z.string(),
  userId: z.string(),
});

/** @internal */
export type GitlabOneGitProvider$Outbound = {
  gitProviderId: string;
  name: string;
  providerType: string;
  createdAt: string;
  organizationId: string;
  userId: string;
};

/** @internal */
export const GitlabOneGitProvider$outboundSchema: z.ZodType<
  GitlabOneGitProvider$Outbound,
  z.ZodTypeDef,
  GitlabOneGitProvider
> = z.object({
  gitProviderId: z.string(),
  name: z.string(),
  providerType: GitlabOneProviderType$outboundSchema,
  createdAt: z.string(),
  organizationId: z.string(),
  userId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitlabOneGitProvider$ {
  /** @deprecated use `GitlabOneGitProvider$inboundSchema` instead. */
  export const inboundSchema = GitlabOneGitProvider$inboundSchema;
  /** @deprecated use `GitlabOneGitProvider$outboundSchema` instead. */
  export const outboundSchema = GitlabOneGitProvider$outboundSchema;
  /** @deprecated use `GitlabOneGitProvider$Outbound` instead. */
  export type Outbound = GitlabOneGitProvider$Outbound;
}

export function gitlabOneGitProviderToJSON(
  gitlabOneGitProvider: GitlabOneGitProvider,
): string {
  return JSON.stringify(
    GitlabOneGitProvider$outboundSchema.parse(gitlabOneGitProvider),
  );
}

export function gitlabOneGitProviderFromJSON(
  jsonString: string,
): SafeParseResult<GitlabOneGitProvider, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitlabOneGitProvider$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitlabOneGitProvider' from JSON`,
  );
}

/** @internal */
export const GitlabOneResponseBody$inboundSchema: z.ZodType<
  GitlabOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  gitlabId: z.string(),
  gitlabUrl: z.string(),
  applicationId: z.nullable(z.string()),
  redirectUri: z.nullable(z.string()),
  secret: z.nullable(z.string()),
  accessToken: z.nullable(z.string()),
  refreshToken: z.nullable(z.string()),
  groupName: z.nullable(z.string()),
  expiresAt: z.nullable(z.number()),
  gitProviderId: z.string(),
  gitProvider: z.lazy(() => GitlabOneGitProvider$inboundSchema),
});

/** @internal */
export type GitlabOneResponseBody$Outbound = {
  gitlabId: string;
  gitlabUrl: string;
  applicationId: string | null;
  redirectUri: string | null;
  secret: string | null;
  accessToken: string | null;
  refreshToken: string | null;
  groupName: string | null;
  expiresAt: number | null;
  gitProviderId: string;
  gitProvider: GitlabOneGitProvider$Outbound;
};

/** @internal */
export const GitlabOneResponseBody$outboundSchema: z.ZodType<
  GitlabOneResponseBody$Outbound,
  z.ZodTypeDef,
  GitlabOneResponseBody
> = z.object({
  gitlabId: z.string(),
  gitlabUrl: z.string(),
  applicationId: z.nullable(z.string()),
  redirectUri: z.nullable(z.string()),
  secret: z.nullable(z.string()),
  accessToken: z.nullable(z.string()),
  refreshToken: z.nullable(z.string()),
  groupName: z.nullable(z.string()),
  expiresAt: z.nullable(z.number()),
  gitProviderId: z.string(),
  gitProvider: z.lazy(() => GitlabOneGitProvider$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitlabOneResponseBody$ {
  /** @deprecated use `GitlabOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = GitlabOneResponseBody$inboundSchema;
  /** @deprecated use `GitlabOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = GitlabOneResponseBody$outboundSchema;
  /** @deprecated use `GitlabOneResponseBody$Outbound` instead. */
  export type Outbound = GitlabOneResponseBody$Outbound;
}

export function gitlabOneResponseBodyToJSON(
  gitlabOneResponseBody: GitlabOneResponseBody,
): string {
  return JSON.stringify(
    GitlabOneResponseBody$outboundSchema.parse(gitlabOneResponseBody),
  );
}

export function gitlabOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GitlabOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitlabOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitlabOneResponseBody' from JSON`,
  );
}

/** @internal */
export const GitlabOneResponse$inboundSchema: z.ZodType<
  GitlabOneResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GitlabOneResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type GitlabOneResponse$Outbound =
  | GitlabOneResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const GitlabOneResponse$outboundSchema: z.ZodType<
  GitlabOneResponse$Outbound,
  z.ZodTypeDef,
  GitlabOneResponse
> = z.union([
  z.lazy(() => GitlabOneResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitlabOneResponse$ {
  /** @deprecated use `GitlabOneResponse$inboundSchema` instead. */
  export const inboundSchema = GitlabOneResponse$inboundSchema;
  /** @deprecated use `GitlabOneResponse$outboundSchema` instead. */
  export const outboundSchema = GitlabOneResponse$outboundSchema;
  /** @deprecated use `GitlabOneResponse$Outbound` instead. */
  export type Outbound = GitlabOneResponse$Outbound;
}

export function gitlabOneResponseToJSON(
  gitlabOneResponse: GitlabOneResponse,
): string {
  return JSON.stringify(
    GitlabOneResponse$outboundSchema.parse(gitlabOneResponse),
  );
}

export function gitlabOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<GitlabOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitlabOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitlabOneResponse' from JSON`,
  );
}
