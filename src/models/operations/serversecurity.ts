/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ServerSecurityRequest = {
  serverId: string;
};

/** @internal */
export const ServerSecurityRequest$inboundSchema: z.ZodType<
  ServerSecurityRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serverId: z.string(),
});

/** @internal */
export type ServerSecurityRequest$Outbound = {
  serverId: string;
};

/** @internal */
export const ServerSecurityRequest$outboundSchema: z.ZodType<
  ServerSecurityRequest$Outbound,
  z.ZodTypeDef,
  ServerSecurityRequest
> = z.object({
  serverId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServerSecurityRequest$ {
  /** @deprecated use `ServerSecurityRequest$inboundSchema` instead. */
  export const inboundSchema = ServerSecurityRequest$inboundSchema;
  /** @deprecated use `ServerSecurityRequest$outboundSchema` instead. */
  export const outboundSchema = ServerSecurityRequest$outboundSchema;
  /** @deprecated use `ServerSecurityRequest$Outbound` instead. */
  export type Outbound = ServerSecurityRequest$Outbound;
}

export function serverSecurityRequestToJSON(
  serverSecurityRequest: ServerSecurityRequest,
): string {
  return JSON.stringify(
    ServerSecurityRequest$outboundSchema.parse(serverSecurityRequest),
  );
}

export function serverSecurityRequestFromJSON(
  jsonString: string,
): SafeParseResult<ServerSecurityRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServerSecurityRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServerSecurityRequest' from JSON`,
  );
}
