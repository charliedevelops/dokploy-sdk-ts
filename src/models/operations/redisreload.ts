/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type RedisReloadSecurity = {
  authorization: string;
};

export type RedisReloadRequest = {
  redisId: string;
  appName: string;
};

export type RedisReloadResponse = models.ErrorT | boolean;

/** @internal */
export const RedisReloadSecurity$inboundSchema: z.ZodType<
  RedisReloadSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type RedisReloadSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const RedisReloadSecurity$outboundSchema: z.ZodType<
  RedisReloadSecurity$Outbound,
  z.ZodTypeDef,
  RedisReloadSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisReloadSecurity$ {
  /** @deprecated use `RedisReloadSecurity$inboundSchema` instead. */
  export const inboundSchema = RedisReloadSecurity$inboundSchema;
  /** @deprecated use `RedisReloadSecurity$outboundSchema` instead. */
  export const outboundSchema = RedisReloadSecurity$outboundSchema;
  /** @deprecated use `RedisReloadSecurity$Outbound` instead. */
  export type Outbound = RedisReloadSecurity$Outbound;
}

export function redisReloadSecurityToJSON(
  redisReloadSecurity: RedisReloadSecurity,
): string {
  return JSON.stringify(
    RedisReloadSecurity$outboundSchema.parse(redisReloadSecurity),
  );
}

export function redisReloadSecurityFromJSON(
  jsonString: string,
): SafeParseResult<RedisReloadSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisReloadSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisReloadSecurity' from JSON`,
  );
}

/** @internal */
export const RedisReloadRequest$inboundSchema: z.ZodType<
  RedisReloadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  redisId: z.string(),
  appName: z.string(),
});

/** @internal */
export type RedisReloadRequest$Outbound = {
  redisId: string;
  appName: string;
};

/** @internal */
export const RedisReloadRequest$outboundSchema: z.ZodType<
  RedisReloadRequest$Outbound,
  z.ZodTypeDef,
  RedisReloadRequest
> = z.object({
  redisId: z.string(),
  appName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisReloadRequest$ {
  /** @deprecated use `RedisReloadRequest$inboundSchema` instead. */
  export const inboundSchema = RedisReloadRequest$inboundSchema;
  /** @deprecated use `RedisReloadRequest$outboundSchema` instead. */
  export const outboundSchema = RedisReloadRequest$outboundSchema;
  /** @deprecated use `RedisReloadRequest$Outbound` instead. */
  export type Outbound = RedisReloadRequest$Outbound;
}

export function redisReloadRequestToJSON(
  redisReloadRequest: RedisReloadRequest,
): string {
  return JSON.stringify(
    RedisReloadRequest$outboundSchema.parse(redisReloadRequest),
  );
}

export function redisReloadRequestFromJSON(
  jsonString: string,
): SafeParseResult<RedisReloadRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisReloadRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisReloadRequest' from JSON`,
  );
}

/** @internal */
export const RedisReloadResponse$inboundSchema: z.ZodType<
  RedisReloadResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.ErrorT$inboundSchema, z.boolean()]);

/** @internal */
export type RedisReloadResponse$Outbound = models.ErrorT$Outbound | boolean;

/** @internal */
export const RedisReloadResponse$outboundSchema: z.ZodType<
  RedisReloadResponse$Outbound,
  z.ZodTypeDef,
  RedisReloadResponse
> = z.union([models.ErrorT$outboundSchema, z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisReloadResponse$ {
  /** @deprecated use `RedisReloadResponse$inboundSchema` instead. */
  export const inboundSchema = RedisReloadResponse$inboundSchema;
  /** @deprecated use `RedisReloadResponse$outboundSchema` instead. */
  export const outboundSchema = RedisReloadResponse$outboundSchema;
  /** @deprecated use `RedisReloadResponse$Outbound` instead. */
  export type Outbound = RedisReloadResponse$Outbound;
}

export function redisReloadResponseToJSON(
  redisReloadResponse: RedisReloadResponse,
): string {
  return JSON.stringify(
    RedisReloadResponse$outboundSchema.parse(redisReloadResponse),
  );
}

export function redisReloadResponseFromJSON(
  jsonString: string,
): SafeParseResult<RedisReloadResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisReloadResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisReloadResponse' from JSON`,
  );
}
