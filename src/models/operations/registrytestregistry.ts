/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RegistryTestRegistrySecurity = {
  authorization: string;
};

export const RegistryTestRegistryRegistryType = {
  Cloud: "cloud",
} as const;
export type RegistryTestRegistryRegistryType = ClosedEnum<
  typeof RegistryTestRegistryRegistryType
>;

export type RegistryTestRegistryRequest = {
  registryName?: string | undefined;
  username: string;
  password: string;
  registryUrl: string;
  registryType: RegistryTestRegistryRegistryType;
  imagePrefix?: string | null | undefined;
  serverId?: string | undefined;
};

/** @internal */
export const RegistryTestRegistrySecurity$inboundSchema: z.ZodType<
  RegistryTestRegistrySecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type RegistryTestRegistrySecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const RegistryTestRegistrySecurity$outboundSchema: z.ZodType<
  RegistryTestRegistrySecurity$Outbound,
  z.ZodTypeDef,
  RegistryTestRegistrySecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegistryTestRegistrySecurity$ {
  /** @deprecated use `RegistryTestRegistrySecurity$inboundSchema` instead. */
  export const inboundSchema = RegistryTestRegistrySecurity$inboundSchema;
  /** @deprecated use `RegistryTestRegistrySecurity$outboundSchema` instead. */
  export const outboundSchema = RegistryTestRegistrySecurity$outboundSchema;
  /** @deprecated use `RegistryTestRegistrySecurity$Outbound` instead. */
  export type Outbound = RegistryTestRegistrySecurity$Outbound;
}

export function registryTestRegistrySecurityToJSON(
  registryTestRegistrySecurity: RegistryTestRegistrySecurity,
): string {
  return JSON.stringify(
    RegistryTestRegistrySecurity$outboundSchema.parse(
      registryTestRegistrySecurity,
    ),
  );
}

export function registryTestRegistrySecurityFromJSON(
  jsonString: string,
): SafeParseResult<RegistryTestRegistrySecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RegistryTestRegistrySecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RegistryTestRegistrySecurity' from JSON`,
  );
}

/** @internal */
export const RegistryTestRegistryRegistryType$inboundSchema: z.ZodNativeEnum<
  typeof RegistryTestRegistryRegistryType
> = z.nativeEnum(RegistryTestRegistryRegistryType);

/** @internal */
export const RegistryTestRegistryRegistryType$outboundSchema: z.ZodNativeEnum<
  typeof RegistryTestRegistryRegistryType
> = RegistryTestRegistryRegistryType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegistryTestRegistryRegistryType$ {
  /** @deprecated use `RegistryTestRegistryRegistryType$inboundSchema` instead. */
  export const inboundSchema = RegistryTestRegistryRegistryType$inboundSchema;
  /** @deprecated use `RegistryTestRegistryRegistryType$outboundSchema` instead. */
  export const outboundSchema = RegistryTestRegistryRegistryType$outboundSchema;
}

/** @internal */
export const RegistryTestRegistryRequest$inboundSchema: z.ZodType<
  RegistryTestRegistryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  registryName: z.string().optional(),
  username: z.string(),
  password: z.string(),
  registryUrl: z.string(),
  registryType: RegistryTestRegistryRegistryType$inboundSchema,
  imagePrefix: z.nullable(z.string()).optional(),
  serverId: z.string().optional(),
});

/** @internal */
export type RegistryTestRegistryRequest$Outbound = {
  registryName?: string | undefined;
  username: string;
  password: string;
  registryUrl: string;
  registryType: string;
  imagePrefix?: string | null | undefined;
  serverId?: string | undefined;
};

/** @internal */
export const RegistryTestRegistryRequest$outboundSchema: z.ZodType<
  RegistryTestRegistryRequest$Outbound,
  z.ZodTypeDef,
  RegistryTestRegistryRequest
> = z.object({
  registryName: z.string().optional(),
  username: z.string(),
  password: z.string(),
  registryUrl: z.string(),
  registryType: RegistryTestRegistryRegistryType$outboundSchema,
  imagePrefix: z.nullable(z.string()).optional(),
  serverId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegistryTestRegistryRequest$ {
  /** @deprecated use `RegistryTestRegistryRequest$inboundSchema` instead. */
  export const inboundSchema = RegistryTestRegistryRequest$inboundSchema;
  /** @deprecated use `RegistryTestRegistryRequest$outboundSchema` instead. */
  export const outboundSchema = RegistryTestRegistryRequest$outboundSchema;
  /** @deprecated use `RegistryTestRegistryRequest$Outbound` instead. */
  export type Outbound = RegistryTestRegistryRequest$Outbound;
}

export function registryTestRegistryRequestToJSON(
  registryTestRegistryRequest: RegistryTestRegistryRequest,
): string {
  return JSON.stringify(
    RegistryTestRegistryRequest$outboundSchema.parse(
      registryTestRegistryRequest,
    ),
  );
}

export function registryTestRegistryRequestFromJSON(
  jsonString: string,
): SafeParseResult<RegistryTestRegistryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RegistryTestRegistryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RegistryTestRegistryRequest' from JSON`,
  );
}
