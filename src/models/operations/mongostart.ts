/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type MongoStartSecurity = {
  authorization: string;
};

export type MongoStartRequest = {
  mongoId: string;
};

export const MongoStartApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type MongoStartApplicationStatus = ClosedEnum<
  typeof MongoStartApplicationStatus
>;

export type MongoStartHealthCheckSwarm = {
  test?: Array<string> | undefined;
  interval?: number | undefined;
  timeout?: number | undefined;
  startPeriod?: number | undefined;
  retries?: number | undefined;
};

export type MongoStartRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type MongoStartSpread = {
  spreadDescriptor: string;
};

export type MongoStartPreference = {
  spread: MongoStartSpread;
};

export type MongoStartPlatform = {
  architecture: string;
  os: string;
};

export type MongoStartPlacementSwarm = {
  constraints?: Array<string> | undefined;
  preferences?: Array<MongoStartPreference> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<MongoStartPlatform> | undefined;
};

export type MongoStartUpdateConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type MongoStartRollbackConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type MongoStartReplicated = {
  replicas?: number | undefined;
};

export type MongoStartGlobal = {};

export type MongoStartReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type MongoStartGlobalJob = {};

export type MongoStartModeSwarm = {
  replicated?: MongoStartReplicated | undefined;
  global?: MongoStartGlobal | undefined;
  replicatedJob?: MongoStartReplicatedJob | undefined;
  globalJob?: MongoStartGlobalJob | undefined;
};

export type MongoStartDriverOpts = {};

export type MongoStartNetworkSwarm = {
  target?: string | undefined;
  aliases?: Array<string> | undefined;
  driverOpts?: MongoStartDriverOpts | undefined;
};

export type MongoStartProject = {
  projectId: string;
  name: string;
  description: string | null;
  createdAt: string;
  organizationId: string;
  env: string;
};

export type MongoStartEnvironment = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
  project: MongoStartProject;
};

export const MongoStartType = {
  Bind: "bind",
  Volume: "volume",
  File: "file",
} as const;
export type MongoStartType = ClosedEnum<typeof MongoStartType>;

export const MongoStartServiceType = {
  Application: "application",
  Postgres: "postgres",
  Mysql: "mysql",
  Mariadb: "mariadb",
  Mongo: "mongo",
  Redis: "redis",
  Compose: "compose",
} as const;
export type MongoStartServiceType = ClosedEnum<typeof MongoStartServiceType>;

export type MongoStartMount = {
  mountId: string;
  type: MongoStartType;
  hostPath: string | null;
  volumeName: string | null;
  filePath: string | null;
  content: string | null;
  serviceType: MongoStartServiceType;
  mountPath: string;
  applicationId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mysqlId: string | null;
  redisId: string | null;
  composeId: string | null;
};

export const MongoStartServerStatus = {
  Active: "active",
  Inactive: "inactive",
} as const;
export type MongoStartServerStatus = ClosedEnum<typeof MongoStartServerStatus>;

export const MongoStartMetricsConfigEnum = {
  Null: "null",
} as const;
export type MongoStartMetricsConfigEnum = ClosedEnum<
  typeof MongoStartMetricsConfigEnum
>;

export type MongoStartMetricsConfigUnion1 =
  | string
  | number
  | boolean
  | MongoStartMetricsConfigEnum;

export type MongoStartMetricsConfigUnion2 =
  | string
  | number
  | boolean
  | MongoStartMetricsConfigEnum
  | Array<any>
  | { [k: string]: any };

export type MongoStartServer = {
  serverId: string;
  name: string;
  description: string | null;
  ipAddress: string;
  port: number;
  username: string;
  appName: string;
  enableDockerCleanup: boolean;
  createdAt: string;
  organizationId: string;
  serverStatus: MongoStartServerStatus;
  command: string;
  sshKeyId: string | null;
  metricsConfig:
    | string
    | number
    | boolean
    | MongoStartMetricsConfigEnum
    | Array<any>
    | { [k: string]: any };
};

export const MongoStartBackupType = {
  Database: "database",
  Compose: "compose",
} as const;
export type MongoStartBackupType = ClosedEnum<typeof MongoStartBackupType>;

export const MongoStartDatabaseType = {
  Postgres: "postgres",
  Mariadb: "mariadb",
  Mysql: "mysql",
  Mongo: "mongo",
  WebServer: "web-server",
} as const;
export type MongoStartDatabaseType = ClosedEnum<typeof MongoStartDatabaseType>;

export const MongoStartMetadataEnum = {
  Null: "null",
} as const;
export type MongoStartMetadataEnum = ClosedEnum<typeof MongoStartMetadataEnum>;

export type MongoStartPostgres = {
  databaseUser: string;
};

export type MongoStartMariadb = {
  databaseUser: string;
  databasePassword: string;
};

export type MongoStartMongo = {
  databaseUser: string;
  databasePassword: string;
};

export type MongoStartMysql = {
  databaseRootPassword: string;
};

export type MongoStartMetadata = {
  postgres?: MongoStartPostgres | undefined;
  mariadb?: MongoStartMariadb | undefined;
  mongo?: MongoStartMongo | undefined;
  mysql?: MongoStartMysql | undefined;
};

export type MongoStartMetadataUnion =
  | MongoStartMetadata
  | MongoStartMetadataEnum;

export type MongoStartBackup = {
  backupId: string;
  appName: string;
  schedule: string;
  enabled: boolean | null;
  database: string;
  prefix: string;
  serviceName: string | null;
  destinationId: string;
  keepLatestCount: number | null;
  backupType: MongoStartBackupType;
  databaseType: MongoStartDatabaseType;
  composeId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mysqlId: string | null;
  mongoId: string | null;
  userId: string | null;
  metadata?: MongoStartMetadata | MongoStartMetadataEnum | null | undefined;
};

/**
 * Successful response
 */
export type MongoStartResponseBody = {
  mongoId: string;
  name: string;
  appName: string;
  description: string | null;
  databaseUser: string;
  databasePassword: string;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  externalPort: number | null;
  applicationStatus: MongoStartApplicationStatus;
  healthCheckSwarm: MongoStartHealthCheckSwarm | null;
  restartPolicySwarm: MongoStartRestartPolicySwarm | null;
  placementSwarm: MongoStartPlacementSwarm | null;
  updateConfigSwarm: MongoStartUpdateConfigSwarm | null;
  rollbackConfigSwarm: MongoStartRollbackConfigSwarm | null;
  modeSwarm: MongoStartModeSwarm | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<MongoStartNetworkSwarm> | null;
  replicas: number;
  createdAt: string;
  environmentId: string;
  serverId: string | null;
  replicaSets: boolean | null;
  environment: MongoStartEnvironment;
  mounts: Array<MongoStartMount>;
  server: MongoStartServer | null;
  backups: Array<MongoStartBackup>;
};

export type MongoStartResponse = MongoStartResponseBody | models.ErrorT;

/** @internal */
export const MongoStartSecurity$inboundSchema: z.ZodType<
  MongoStartSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type MongoStartSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const MongoStartSecurity$outboundSchema: z.ZodType<
  MongoStartSecurity$Outbound,
  z.ZodTypeDef,
  MongoStartSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartSecurity$ {
  /** @deprecated use `MongoStartSecurity$inboundSchema` instead. */
  export const inboundSchema = MongoStartSecurity$inboundSchema;
  /** @deprecated use `MongoStartSecurity$outboundSchema` instead. */
  export const outboundSchema = MongoStartSecurity$outboundSchema;
  /** @deprecated use `MongoStartSecurity$Outbound` instead. */
  export type Outbound = MongoStartSecurity$Outbound;
}

export function mongoStartSecurityToJSON(
  mongoStartSecurity: MongoStartSecurity,
): string {
  return JSON.stringify(
    MongoStartSecurity$outboundSchema.parse(mongoStartSecurity),
  );
}

export function mongoStartSecurityFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartSecurity' from JSON`,
  );
}

/** @internal */
export const MongoStartRequest$inboundSchema: z.ZodType<
  MongoStartRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mongoId: z.string(),
});

/** @internal */
export type MongoStartRequest$Outbound = {
  mongoId: string;
};

/** @internal */
export const MongoStartRequest$outboundSchema: z.ZodType<
  MongoStartRequest$Outbound,
  z.ZodTypeDef,
  MongoStartRequest
> = z.object({
  mongoId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartRequest$ {
  /** @deprecated use `MongoStartRequest$inboundSchema` instead. */
  export const inboundSchema = MongoStartRequest$inboundSchema;
  /** @deprecated use `MongoStartRequest$outboundSchema` instead. */
  export const outboundSchema = MongoStartRequest$outboundSchema;
  /** @deprecated use `MongoStartRequest$Outbound` instead. */
  export type Outbound = MongoStartRequest$Outbound;
}

export function mongoStartRequestToJSON(
  mongoStartRequest: MongoStartRequest,
): string {
  return JSON.stringify(
    MongoStartRequest$outboundSchema.parse(mongoStartRequest),
  );
}

export function mongoStartRequestFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartRequest' from JSON`,
  );
}

/** @internal */
export const MongoStartApplicationStatus$inboundSchema: z.ZodNativeEnum<
  typeof MongoStartApplicationStatus
> = z.nativeEnum(MongoStartApplicationStatus);

/** @internal */
export const MongoStartApplicationStatus$outboundSchema: z.ZodNativeEnum<
  typeof MongoStartApplicationStatus
> = MongoStartApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartApplicationStatus$ {
  /** @deprecated use `MongoStartApplicationStatus$inboundSchema` instead. */
  export const inboundSchema = MongoStartApplicationStatus$inboundSchema;
  /** @deprecated use `MongoStartApplicationStatus$outboundSchema` instead. */
  export const outboundSchema = MongoStartApplicationStatus$outboundSchema;
}

/** @internal */
export const MongoStartHealthCheckSwarm$inboundSchema: z.ZodType<
  MongoStartHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Test: z.array(z.string()).optional(),
  Interval: z.number().optional(),
  Timeout: z.number().optional(),
  StartPeriod: z.number().optional(),
  Retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Test": "test",
    "Interval": "interval",
    "Timeout": "timeout",
    "StartPeriod": "startPeriod",
    "Retries": "retries",
  });
});

/** @internal */
export type MongoStartHealthCheckSwarm$Outbound = {
  Test?: Array<string> | undefined;
  Interval?: number | undefined;
  Timeout?: number | undefined;
  StartPeriod?: number | undefined;
  Retries?: number | undefined;
};

/** @internal */
export const MongoStartHealthCheckSwarm$outboundSchema: z.ZodType<
  MongoStartHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  MongoStartHealthCheckSwarm
> = z.object({
  test: z.array(z.string()).optional(),
  interval: z.number().optional(),
  timeout: z.number().optional(),
  startPeriod: z.number().optional(),
  retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    test: "Test",
    interval: "Interval",
    timeout: "Timeout",
    startPeriod: "StartPeriod",
    retries: "Retries",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartHealthCheckSwarm$ {
  /** @deprecated use `MongoStartHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoStartHealthCheckSwarm$inboundSchema;
  /** @deprecated use `MongoStartHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoStartHealthCheckSwarm$outboundSchema;
  /** @deprecated use `MongoStartHealthCheckSwarm$Outbound` instead. */
  export type Outbound = MongoStartHealthCheckSwarm$Outbound;
}

export function mongoStartHealthCheckSwarmToJSON(
  mongoStartHealthCheckSwarm: MongoStartHealthCheckSwarm,
): string {
  return JSON.stringify(
    MongoStartHealthCheckSwarm$outboundSchema.parse(mongoStartHealthCheckSwarm),
  );
}

export function mongoStartHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const MongoStartRestartPolicySwarm$inboundSchema: z.ZodType<
  MongoStartRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type MongoStartRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const MongoStartRestartPolicySwarm$outboundSchema: z.ZodType<
  MongoStartRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  MongoStartRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartRestartPolicySwarm$ {
  /** @deprecated use `MongoStartRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema = MongoStartRestartPolicySwarm$inboundSchema;
  /** @deprecated use `MongoStartRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema = MongoStartRestartPolicySwarm$outboundSchema;
  /** @deprecated use `MongoStartRestartPolicySwarm$Outbound` instead. */
  export type Outbound = MongoStartRestartPolicySwarm$Outbound;
}

export function mongoStartRestartPolicySwarmToJSON(
  mongoStartRestartPolicySwarm: MongoStartRestartPolicySwarm,
): string {
  return JSON.stringify(
    MongoStartRestartPolicySwarm$outboundSchema.parse(
      mongoStartRestartPolicySwarm,
    ),
  );
}

export function mongoStartRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const MongoStartSpread$inboundSchema: z.ZodType<
  MongoStartSpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type MongoStartSpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const MongoStartSpread$outboundSchema: z.ZodType<
  MongoStartSpread$Outbound,
  z.ZodTypeDef,
  MongoStartSpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartSpread$ {
  /** @deprecated use `MongoStartSpread$inboundSchema` instead. */
  export const inboundSchema = MongoStartSpread$inboundSchema;
  /** @deprecated use `MongoStartSpread$outboundSchema` instead. */
  export const outboundSchema = MongoStartSpread$outboundSchema;
  /** @deprecated use `MongoStartSpread$Outbound` instead. */
  export type Outbound = MongoStartSpread$Outbound;
}

export function mongoStartSpreadToJSON(
  mongoStartSpread: MongoStartSpread,
): string {
  return JSON.stringify(
    MongoStartSpread$outboundSchema.parse(mongoStartSpread),
  );
}

export function mongoStartSpreadFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartSpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartSpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartSpread' from JSON`,
  );
}

/** @internal */
export const MongoStartPreference$inboundSchema: z.ZodType<
  MongoStartPreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => MongoStartSpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type MongoStartPreference$Outbound = {
  Spread: MongoStartSpread$Outbound;
};

/** @internal */
export const MongoStartPreference$outboundSchema: z.ZodType<
  MongoStartPreference$Outbound,
  z.ZodTypeDef,
  MongoStartPreference
> = z.object({
  spread: z.lazy(() => MongoStartSpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartPreference$ {
  /** @deprecated use `MongoStartPreference$inboundSchema` instead. */
  export const inboundSchema = MongoStartPreference$inboundSchema;
  /** @deprecated use `MongoStartPreference$outboundSchema` instead. */
  export const outboundSchema = MongoStartPreference$outboundSchema;
  /** @deprecated use `MongoStartPreference$Outbound` instead. */
  export type Outbound = MongoStartPreference$Outbound;
}

export function mongoStartPreferenceToJSON(
  mongoStartPreference: MongoStartPreference,
): string {
  return JSON.stringify(
    MongoStartPreference$outboundSchema.parse(mongoStartPreference),
  );
}

export function mongoStartPreferenceFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartPreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartPreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartPreference' from JSON`,
  );
}

/** @internal */
export const MongoStartPlatform$inboundSchema: z.ZodType<
  MongoStartPlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type MongoStartPlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const MongoStartPlatform$outboundSchema: z.ZodType<
  MongoStartPlatform$Outbound,
  z.ZodTypeDef,
  MongoStartPlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartPlatform$ {
  /** @deprecated use `MongoStartPlatform$inboundSchema` instead. */
  export const inboundSchema = MongoStartPlatform$inboundSchema;
  /** @deprecated use `MongoStartPlatform$outboundSchema` instead. */
  export const outboundSchema = MongoStartPlatform$outboundSchema;
  /** @deprecated use `MongoStartPlatform$Outbound` instead. */
  export type Outbound = MongoStartPlatform$Outbound;
}

export function mongoStartPlatformToJSON(
  mongoStartPlatform: MongoStartPlatform,
): string {
  return JSON.stringify(
    MongoStartPlatform$outboundSchema.parse(mongoStartPlatform),
  );
}

export function mongoStartPlatformFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartPlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartPlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartPlatform' from JSON`,
  );
}

/** @internal */
export const MongoStartPlacementSwarm$inboundSchema: z.ZodType<
  MongoStartPlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  Preferences: z.array(z.lazy(() => MongoStartPreference$inboundSchema))
    .optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => MongoStartPlatform$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "Preferences": "preferences",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
  });
});

/** @internal */
export type MongoStartPlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  Preferences?: Array<MongoStartPreference$Outbound> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<MongoStartPlatform$Outbound> | undefined;
};

/** @internal */
export const MongoStartPlacementSwarm$outboundSchema: z.ZodType<
  MongoStartPlacementSwarm$Outbound,
  z.ZodTypeDef,
  MongoStartPlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  preferences: z.array(z.lazy(() => MongoStartPreference$outboundSchema))
    .optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => MongoStartPlatform$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    preferences: "Preferences",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartPlacementSwarm$ {
  /** @deprecated use `MongoStartPlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoStartPlacementSwarm$inboundSchema;
  /** @deprecated use `MongoStartPlacementSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoStartPlacementSwarm$outboundSchema;
  /** @deprecated use `MongoStartPlacementSwarm$Outbound` instead. */
  export type Outbound = MongoStartPlacementSwarm$Outbound;
}

export function mongoStartPlacementSwarmToJSON(
  mongoStartPlacementSwarm: MongoStartPlacementSwarm,
): string {
  return JSON.stringify(
    MongoStartPlacementSwarm$outboundSchema.parse(mongoStartPlacementSwarm),
  );
}

export function mongoStartPlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartPlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartPlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartPlacementSwarm' from JSON`,
  );
}

/** @internal */
export const MongoStartUpdateConfigSwarm$inboundSchema: z.ZodType<
  MongoStartUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type MongoStartUpdateConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const MongoStartUpdateConfigSwarm$outboundSchema: z.ZodType<
  MongoStartUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  MongoStartUpdateConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartUpdateConfigSwarm$ {
  /** @deprecated use `MongoStartUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoStartUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `MongoStartUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoStartUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `MongoStartUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = MongoStartUpdateConfigSwarm$Outbound;
}

export function mongoStartUpdateConfigSwarmToJSON(
  mongoStartUpdateConfigSwarm: MongoStartUpdateConfigSwarm,
): string {
  return JSON.stringify(
    MongoStartUpdateConfigSwarm$outboundSchema.parse(
      mongoStartUpdateConfigSwarm,
    ),
  );
}

export function mongoStartUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MongoStartRollbackConfigSwarm$inboundSchema: z.ZodType<
  MongoStartRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type MongoStartRollbackConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const MongoStartRollbackConfigSwarm$outboundSchema: z.ZodType<
  MongoStartRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  MongoStartRollbackConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartRollbackConfigSwarm$ {
  /** @deprecated use `MongoStartRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoStartRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `MongoStartRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoStartRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `MongoStartRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = MongoStartRollbackConfigSwarm$Outbound;
}

export function mongoStartRollbackConfigSwarmToJSON(
  mongoStartRollbackConfigSwarm: MongoStartRollbackConfigSwarm,
): string {
  return JSON.stringify(
    MongoStartRollbackConfigSwarm$outboundSchema.parse(
      mongoStartRollbackConfigSwarm,
    ),
  );
}

export function mongoStartRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartRollbackConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartRollbackConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const MongoStartReplicated$inboundSchema: z.ZodType<
  MongoStartReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type MongoStartReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const MongoStartReplicated$outboundSchema: z.ZodType<
  MongoStartReplicated$Outbound,
  z.ZodTypeDef,
  MongoStartReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartReplicated$ {
  /** @deprecated use `MongoStartReplicated$inboundSchema` instead. */
  export const inboundSchema = MongoStartReplicated$inboundSchema;
  /** @deprecated use `MongoStartReplicated$outboundSchema` instead. */
  export const outboundSchema = MongoStartReplicated$outboundSchema;
  /** @deprecated use `MongoStartReplicated$Outbound` instead. */
  export type Outbound = MongoStartReplicated$Outbound;
}

export function mongoStartReplicatedToJSON(
  mongoStartReplicated: MongoStartReplicated,
): string {
  return JSON.stringify(
    MongoStartReplicated$outboundSchema.parse(mongoStartReplicated),
  );
}

export function mongoStartReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartReplicated' from JSON`,
  );
}

/** @internal */
export const MongoStartGlobal$inboundSchema: z.ZodType<
  MongoStartGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MongoStartGlobal$Outbound = {};

/** @internal */
export const MongoStartGlobal$outboundSchema: z.ZodType<
  MongoStartGlobal$Outbound,
  z.ZodTypeDef,
  MongoStartGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartGlobal$ {
  /** @deprecated use `MongoStartGlobal$inboundSchema` instead. */
  export const inboundSchema = MongoStartGlobal$inboundSchema;
  /** @deprecated use `MongoStartGlobal$outboundSchema` instead. */
  export const outboundSchema = MongoStartGlobal$outboundSchema;
  /** @deprecated use `MongoStartGlobal$Outbound` instead. */
  export type Outbound = MongoStartGlobal$Outbound;
}

export function mongoStartGlobalToJSON(
  mongoStartGlobal: MongoStartGlobal,
): string {
  return JSON.stringify(
    MongoStartGlobal$outboundSchema.parse(mongoStartGlobal),
  );
}

export function mongoStartGlobalFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartGlobal' from JSON`,
  );
}

/** @internal */
export const MongoStartReplicatedJob$inboundSchema: z.ZodType<
  MongoStartReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type MongoStartReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const MongoStartReplicatedJob$outboundSchema: z.ZodType<
  MongoStartReplicatedJob$Outbound,
  z.ZodTypeDef,
  MongoStartReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartReplicatedJob$ {
  /** @deprecated use `MongoStartReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = MongoStartReplicatedJob$inboundSchema;
  /** @deprecated use `MongoStartReplicatedJob$outboundSchema` instead. */
  export const outboundSchema = MongoStartReplicatedJob$outboundSchema;
  /** @deprecated use `MongoStartReplicatedJob$Outbound` instead. */
  export type Outbound = MongoStartReplicatedJob$Outbound;
}

export function mongoStartReplicatedJobToJSON(
  mongoStartReplicatedJob: MongoStartReplicatedJob,
): string {
  return JSON.stringify(
    MongoStartReplicatedJob$outboundSchema.parse(mongoStartReplicatedJob),
  );
}

export function mongoStartReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartReplicatedJob' from JSON`,
  );
}

/** @internal */
export const MongoStartGlobalJob$inboundSchema: z.ZodType<
  MongoStartGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MongoStartGlobalJob$Outbound = {};

/** @internal */
export const MongoStartGlobalJob$outboundSchema: z.ZodType<
  MongoStartGlobalJob$Outbound,
  z.ZodTypeDef,
  MongoStartGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartGlobalJob$ {
  /** @deprecated use `MongoStartGlobalJob$inboundSchema` instead. */
  export const inboundSchema = MongoStartGlobalJob$inboundSchema;
  /** @deprecated use `MongoStartGlobalJob$outboundSchema` instead. */
  export const outboundSchema = MongoStartGlobalJob$outboundSchema;
  /** @deprecated use `MongoStartGlobalJob$Outbound` instead. */
  export type Outbound = MongoStartGlobalJob$Outbound;
}

export function mongoStartGlobalJobToJSON(
  mongoStartGlobalJob: MongoStartGlobalJob,
): string {
  return JSON.stringify(
    MongoStartGlobalJob$outboundSchema.parse(mongoStartGlobalJob),
  );
}

export function mongoStartGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartGlobalJob' from JSON`,
  );
}

/** @internal */
export const MongoStartModeSwarm$inboundSchema: z.ZodType<
  MongoStartModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicated: z.lazy(() => MongoStartReplicated$inboundSchema).optional(),
  Global: z.lazy(() => MongoStartGlobal$inboundSchema).optional(),
  ReplicatedJob: z.lazy(() => MongoStartReplicatedJob$inboundSchema).optional(),
  GlobalJob: z.lazy(() => MongoStartGlobalJob$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicated": "replicated",
    "Global": "global",
    "ReplicatedJob": "replicatedJob",
    "GlobalJob": "globalJob",
  });
});

/** @internal */
export type MongoStartModeSwarm$Outbound = {
  Replicated?: MongoStartReplicated$Outbound | undefined;
  Global?: MongoStartGlobal$Outbound | undefined;
  ReplicatedJob?: MongoStartReplicatedJob$Outbound | undefined;
  GlobalJob?: MongoStartGlobalJob$Outbound | undefined;
};

/** @internal */
export const MongoStartModeSwarm$outboundSchema: z.ZodType<
  MongoStartModeSwarm$Outbound,
  z.ZodTypeDef,
  MongoStartModeSwarm
> = z.object({
  replicated: z.lazy(() => MongoStartReplicated$outboundSchema).optional(),
  global: z.lazy(() => MongoStartGlobal$outboundSchema).optional(),
  replicatedJob: z.lazy(() => MongoStartReplicatedJob$outboundSchema)
    .optional(),
  globalJob: z.lazy(() => MongoStartGlobalJob$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    replicated: "Replicated",
    global: "Global",
    replicatedJob: "ReplicatedJob",
    globalJob: "GlobalJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartModeSwarm$ {
  /** @deprecated use `MongoStartModeSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoStartModeSwarm$inboundSchema;
  /** @deprecated use `MongoStartModeSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoStartModeSwarm$outboundSchema;
  /** @deprecated use `MongoStartModeSwarm$Outbound` instead. */
  export type Outbound = MongoStartModeSwarm$Outbound;
}

export function mongoStartModeSwarmToJSON(
  mongoStartModeSwarm: MongoStartModeSwarm,
): string {
  return JSON.stringify(
    MongoStartModeSwarm$outboundSchema.parse(mongoStartModeSwarm),
  );
}

export function mongoStartModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartModeSwarm' from JSON`,
  );
}

/** @internal */
export const MongoStartDriverOpts$inboundSchema: z.ZodType<
  MongoStartDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MongoStartDriverOpts$Outbound = {};

/** @internal */
export const MongoStartDriverOpts$outboundSchema: z.ZodType<
  MongoStartDriverOpts$Outbound,
  z.ZodTypeDef,
  MongoStartDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartDriverOpts$ {
  /** @deprecated use `MongoStartDriverOpts$inboundSchema` instead. */
  export const inboundSchema = MongoStartDriverOpts$inboundSchema;
  /** @deprecated use `MongoStartDriverOpts$outboundSchema` instead. */
  export const outboundSchema = MongoStartDriverOpts$outboundSchema;
  /** @deprecated use `MongoStartDriverOpts$Outbound` instead. */
  export type Outbound = MongoStartDriverOpts$Outbound;
}

export function mongoStartDriverOptsToJSON(
  mongoStartDriverOpts: MongoStartDriverOpts,
): string {
  return JSON.stringify(
    MongoStartDriverOpts$outboundSchema.parse(mongoStartDriverOpts),
  );
}

export function mongoStartDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartDriverOpts' from JSON`,
  );
}

/** @internal */
export const MongoStartNetworkSwarm$inboundSchema: z.ZodType<
  MongoStartNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Target: z.string().optional(),
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => MongoStartDriverOpts$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Target": "target",
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
  });
});

/** @internal */
export type MongoStartNetworkSwarm$Outbound = {
  Target?: string | undefined;
  Aliases?: Array<string> | undefined;
  DriverOpts?: MongoStartDriverOpts$Outbound | undefined;
};

/** @internal */
export const MongoStartNetworkSwarm$outboundSchema: z.ZodType<
  MongoStartNetworkSwarm$Outbound,
  z.ZodTypeDef,
  MongoStartNetworkSwarm
> = z.object({
  target: z.string().optional(),
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => MongoStartDriverOpts$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    target: "Target",
    aliases: "Aliases",
    driverOpts: "DriverOpts",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartNetworkSwarm$ {
  /** @deprecated use `MongoStartNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = MongoStartNetworkSwarm$inboundSchema;
  /** @deprecated use `MongoStartNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = MongoStartNetworkSwarm$outboundSchema;
  /** @deprecated use `MongoStartNetworkSwarm$Outbound` instead. */
  export type Outbound = MongoStartNetworkSwarm$Outbound;
}

export function mongoStartNetworkSwarmToJSON(
  mongoStartNetworkSwarm: MongoStartNetworkSwarm,
): string {
  return JSON.stringify(
    MongoStartNetworkSwarm$outboundSchema.parse(mongoStartNetworkSwarm),
  );
}

export function mongoStartNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const MongoStartProject$inboundSchema: z.ZodType<
  MongoStartProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  organizationId: z.string(),
  env: z.string(),
});

/** @internal */
export type MongoStartProject$Outbound = {
  projectId: string;
  name: string;
  description: string | null;
  createdAt: string;
  organizationId: string;
  env: string;
};

/** @internal */
export const MongoStartProject$outboundSchema: z.ZodType<
  MongoStartProject$Outbound,
  z.ZodTypeDef,
  MongoStartProject
> = z.object({
  projectId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  organizationId: z.string(),
  env: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartProject$ {
  /** @deprecated use `MongoStartProject$inboundSchema` instead. */
  export const inboundSchema = MongoStartProject$inboundSchema;
  /** @deprecated use `MongoStartProject$outboundSchema` instead. */
  export const outboundSchema = MongoStartProject$outboundSchema;
  /** @deprecated use `MongoStartProject$Outbound` instead. */
  export type Outbound = MongoStartProject$Outbound;
}

export function mongoStartProjectToJSON(
  mongoStartProject: MongoStartProject,
): string {
  return JSON.stringify(
    MongoStartProject$outboundSchema.parse(mongoStartProject),
  );
}

export function mongoStartProjectFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartProject' from JSON`,
  );
}

/** @internal */
export const MongoStartEnvironment$inboundSchema: z.ZodType<
  MongoStartEnvironment,
  z.ZodTypeDef,
  unknown
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
  project: z.lazy(() => MongoStartProject$inboundSchema),
});

/** @internal */
export type MongoStartEnvironment$Outbound = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
  project: MongoStartProject$Outbound;
};

/** @internal */
export const MongoStartEnvironment$outboundSchema: z.ZodType<
  MongoStartEnvironment$Outbound,
  z.ZodTypeDef,
  MongoStartEnvironment
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
  project: z.lazy(() => MongoStartProject$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartEnvironment$ {
  /** @deprecated use `MongoStartEnvironment$inboundSchema` instead. */
  export const inboundSchema = MongoStartEnvironment$inboundSchema;
  /** @deprecated use `MongoStartEnvironment$outboundSchema` instead. */
  export const outboundSchema = MongoStartEnvironment$outboundSchema;
  /** @deprecated use `MongoStartEnvironment$Outbound` instead. */
  export type Outbound = MongoStartEnvironment$Outbound;
}

export function mongoStartEnvironmentToJSON(
  mongoStartEnvironment: MongoStartEnvironment,
): string {
  return JSON.stringify(
    MongoStartEnvironment$outboundSchema.parse(mongoStartEnvironment),
  );
}

export function mongoStartEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartEnvironment' from JSON`,
  );
}

/** @internal */
export const MongoStartType$inboundSchema: z.ZodNativeEnum<
  typeof MongoStartType
> = z.nativeEnum(MongoStartType);

/** @internal */
export const MongoStartType$outboundSchema: z.ZodNativeEnum<
  typeof MongoStartType
> = MongoStartType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartType$ {
  /** @deprecated use `MongoStartType$inboundSchema` instead. */
  export const inboundSchema = MongoStartType$inboundSchema;
  /** @deprecated use `MongoStartType$outboundSchema` instead. */
  export const outboundSchema = MongoStartType$outboundSchema;
}

/** @internal */
export const MongoStartServiceType$inboundSchema: z.ZodNativeEnum<
  typeof MongoStartServiceType
> = z.nativeEnum(MongoStartServiceType);

/** @internal */
export const MongoStartServiceType$outboundSchema: z.ZodNativeEnum<
  typeof MongoStartServiceType
> = MongoStartServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartServiceType$ {
  /** @deprecated use `MongoStartServiceType$inboundSchema` instead. */
  export const inboundSchema = MongoStartServiceType$inboundSchema;
  /** @deprecated use `MongoStartServiceType$outboundSchema` instead. */
  export const outboundSchema = MongoStartServiceType$outboundSchema;
}

/** @internal */
export const MongoStartMount$inboundSchema: z.ZodType<
  MongoStartMount,
  z.ZodTypeDef,
  unknown
> = z.object({
  mountId: z.string(),
  type: MongoStartType$inboundSchema,
  hostPath: z.nullable(z.string()),
  volumeName: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  content: z.nullable(z.string()),
  serviceType: MongoStartServiceType$inboundSchema,
  mountPath: z.string(),
  applicationId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
});

/** @internal */
export type MongoStartMount$Outbound = {
  mountId: string;
  type: string;
  hostPath: string | null;
  volumeName: string | null;
  filePath: string | null;
  content: string | null;
  serviceType: string;
  mountPath: string;
  applicationId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mysqlId: string | null;
  redisId: string | null;
  composeId: string | null;
};

/** @internal */
export const MongoStartMount$outboundSchema: z.ZodType<
  MongoStartMount$Outbound,
  z.ZodTypeDef,
  MongoStartMount
> = z.object({
  mountId: z.string(),
  type: MongoStartType$outboundSchema,
  hostPath: z.nullable(z.string()),
  volumeName: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  content: z.nullable(z.string()),
  serviceType: MongoStartServiceType$outboundSchema,
  mountPath: z.string(),
  applicationId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartMount$ {
  /** @deprecated use `MongoStartMount$inboundSchema` instead. */
  export const inboundSchema = MongoStartMount$inboundSchema;
  /** @deprecated use `MongoStartMount$outboundSchema` instead. */
  export const outboundSchema = MongoStartMount$outboundSchema;
  /** @deprecated use `MongoStartMount$Outbound` instead. */
  export type Outbound = MongoStartMount$Outbound;
}

export function mongoStartMountToJSON(
  mongoStartMount: MongoStartMount,
): string {
  return JSON.stringify(MongoStartMount$outboundSchema.parse(mongoStartMount));
}

export function mongoStartMountFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartMount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartMount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartMount' from JSON`,
  );
}

/** @internal */
export const MongoStartServerStatus$inboundSchema: z.ZodNativeEnum<
  typeof MongoStartServerStatus
> = z.nativeEnum(MongoStartServerStatus);

/** @internal */
export const MongoStartServerStatus$outboundSchema: z.ZodNativeEnum<
  typeof MongoStartServerStatus
> = MongoStartServerStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartServerStatus$ {
  /** @deprecated use `MongoStartServerStatus$inboundSchema` instead. */
  export const inboundSchema = MongoStartServerStatus$inboundSchema;
  /** @deprecated use `MongoStartServerStatus$outboundSchema` instead. */
  export const outboundSchema = MongoStartServerStatus$outboundSchema;
}

/** @internal */
export const MongoStartMetricsConfigEnum$inboundSchema: z.ZodNativeEnum<
  typeof MongoStartMetricsConfigEnum
> = z.nativeEnum(MongoStartMetricsConfigEnum);

/** @internal */
export const MongoStartMetricsConfigEnum$outboundSchema: z.ZodNativeEnum<
  typeof MongoStartMetricsConfigEnum
> = MongoStartMetricsConfigEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartMetricsConfigEnum$ {
  /** @deprecated use `MongoStartMetricsConfigEnum$inboundSchema` instead. */
  export const inboundSchema = MongoStartMetricsConfigEnum$inboundSchema;
  /** @deprecated use `MongoStartMetricsConfigEnum$outboundSchema` instead. */
  export const outboundSchema = MongoStartMetricsConfigEnum$outboundSchema;
}

/** @internal */
export const MongoStartMetricsConfigUnion1$inboundSchema: z.ZodType<
  MongoStartMetricsConfigUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  MongoStartMetricsConfigEnum$inboundSchema,
]);

/** @internal */
export type MongoStartMetricsConfigUnion1$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const MongoStartMetricsConfigUnion1$outboundSchema: z.ZodType<
  MongoStartMetricsConfigUnion1$Outbound,
  z.ZodTypeDef,
  MongoStartMetricsConfigUnion1
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  MongoStartMetricsConfigEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartMetricsConfigUnion1$ {
  /** @deprecated use `MongoStartMetricsConfigUnion1$inboundSchema` instead. */
  export const inboundSchema = MongoStartMetricsConfigUnion1$inboundSchema;
  /** @deprecated use `MongoStartMetricsConfigUnion1$outboundSchema` instead. */
  export const outboundSchema = MongoStartMetricsConfigUnion1$outboundSchema;
  /** @deprecated use `MongoStartMetricsConfigUnion1$Outbound` instead. */
  export type Outbound = MongoStartMetricsConfigUnion1$Outbound;
}

export function mongoStartMetricsConfigUnion1ToJSON(
  mongoStartMetricsConfigUnion1: MongoStartMetricsConfigUnion1,
): string {
  return JSON.stringify(
    MongoStartMetricsConfigUnion1$outboundSchema.parse(
      mongoStartMetricsConfigUnion1,
    ),
  );
}

export function mongoStartMetricsConfigUnion1FromJSON(
  jsonString: string,
): SafeParseResult<MongoStartMetricsConfigUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartMetricsConfigUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartMetricsConfigUnion1' from JSON`,
  );
}

/** @internal */
export const MongoStartMetricsConfigUnion2$inboundSchema: z.ZodType<
  MongoStartMetricsConfigUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    MongoStartMetricsConfigEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type MongoStartMetricsConfigUnion2$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const MongoStartMetricsConfigUnion2$outboundSchema: z.ZodType<
  MongoStartMetricsConfigUnion2$Outbound,
  z.ZodTypeDef,
  MongoStartMetricsConfigUnion2
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    MongoStartMetricsConfigEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartMetricsConfigUnion2$ {
  /** @deprecated use `MongoStartMetricsConfigUnion2$inboundSchema` instead. */
  export const inboundSchema = MongoStartMetricsConfigUnion2$inboundSchema;
  /** @deprecated use `MongoStartMetricsConfigUnion2$outboundSchema` instead. */
  export const outboundSchema = MongoStartMetricsConfigUnion2$outboundSchema;
  /** @deprecated use `MongoStartMetricsConfigUnion2$Outbound` instead. */
  export type Outbound = MongoStartMetricsConfigUnion2$Outbound;
}

export function mongoStartMetricsConfigUnion2ToJSON(
  mongoStartMetricsConfigUnion2: MongoStartMetricsConfigUnion2,
): string {
  return JSON.stringify(
    MongoStartMetricsConfigUnion2$outboundSchema.parse(
      mongoStartMetricsConfigUnion2,
    ),
  );
}

export function mongoStartMetricsConfigUnion2FromJSON(
  jsonString: string,
): SafeParseResult<MongoStartMetricsConfigUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartMetricsConfigUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartMetricsConfigUnion2' from JSON`,
  );
}

/** @internal */
export const MongoStartServer$inboundSchema: z.ZodType<
  MongoStartServer,
  z.ZodTypeDef,
  unknown
> = z.object({
  serverId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  ipAddress: z.string(),
  port: z.number(),
  username: z.string(),
  appName: z.string(),
  enableDockerCleanup: z.boolean(),
  createdAt: z.string(),
  organizationId: z.string(),
  serverStatus: MongoStartServerStatus$inboundSchema,
  command: z.string(),
  sshKeyId: z.nullable(z.string()),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      MongoStartMetricsConfigEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
});

/** @internal */
export type MongoStartServer$Outbound = {
  serverId: string;
  name: string;
  description: string | null;
  ipAddress: string;
  port: number;
  username: string;
  appName: string;
  enableDockerCleanup: boolean;
  createdAt: string;
  organizationId: string;
  serverStatus: string;
  command: string;
  sshKeyId: string | null;
  metricsConfig: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  };
};

/** @internal */
export const MongoStartServer$outboundSchema: z.ZodType<
  MongoStartServer$Outbound,
  z.ZodTypeDef,
  MongoStartServer
> = z.object({
  serverId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  ipAddress: z.string(),
  port: z.number(),
  username: z.string(),
  appName: z.string(),
  enableDockerCleanup: z.boolean(),
  createdAt: z.string(),
  organizationId: z.string(),
  serverStatus: MongoStartServerStatus$outboundSchema,
  command: z.string(),
  sshKeyId: z.nullable(z.string()),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      MongoStartMetricsConfigEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartServer$ {
  /** @deprecated use `MongoStartServer$inboundSchema` instead. */
  export const inboundSchema = MongoStartServer$inboundSchema;
  /** @deprecated use `MongoStartServer$outboundSchema` instead. */
  export const outboundSchema = MongoStartServer$outboundSchema;
  /** @deprecated use `MongoStartServer$Outbound` instead. */
  export type Outbound = MongoStartServer$Outbound;
}

export function mongoStartServerToJSON(
  mongoStartServer: MongoStartServer,
): string {
  return JSON.stringify(
    MongoStartServer$outboundSchema.parse(mongoStartServer),
  );
}

export function mongoStartServerFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartServer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartServer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartServer' from JSON`,
  );
}

/** @internal */
export const MongoStartBackupType$inboundSchema: z.ZodNativeEnum<
  typeof MongoStartBackupType
> = z.nativeEnum(MongoStartBackupType);

/** @internal */
export const MongoStartBackupType$outboundSchema: z.ZodNativeEnum<
  typeof MongoStartBackupType
> = MongoStartBackupType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartBackupType$ {
  /** @deprecated use `MongoStartBackupType$inboundSchema` instead. */
  export const inboundSchema = MongoStartBackupType$inboundSchema;
  /** @deprecated use `MongoStartBackupType$outboundSchema` instead. */
  export const outboundSchema = MongoStartBackupType$outboundSchema;
}

/** @internal */
export const MongoStartDatabaseType$inboundSchema: z.ZodNativeEnum<
  typeof MongoStartDatabaseType
> = z.nativeEnum(MongoStartDatabaseType);

/** @internal */
export const MongoStartDatabaseType$outboundSchema: z.ZodNativeEnum<
  typeof MongoStartDatabaseType
> = MongoStartDatabaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartDatabaseType$ {
  /** @deprecated use `MongoStartDatabaseType$inboundSchema` instead. */
  export const inboundSchema = MongoStartDatabaseType$inboundSchema;
  /** @deprecated use `MongoStartDatabaseType$outboundSchema` instead. */
  export const outboundSchema = MongoStartDatabaseType$outboundSchema;
}

/** @internal */
export const MongoStartMetadataEnum$inboundSchema: z.ZodNativeEnum<
  typeof MongoStartMetadataEnum
> = z.nativeEnum(MongoStartMetadataEnum);

/** @internal */
export const MongoStartMetadataEnum$outboundSchema: z.ZodNativeEnum<
  typeof MongoStartMetadataEnum
> = MongoStartMetadataEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartMetadataEnum$ {
  /** @deprecated use `MongoStartMetadataEnum$inboundSchema` instead. */
  export const inboundSchema = MongoStartMetadataEnum$inboundSchema;
  /** @deprecated use `MongoStartMetadataEnum$outboundSchema` instead. */
  export const outboundSchema = MongoStartMetadataEnum$outboundSchema;
}

/** @internal */
export const MongoStartPostgres$inboundSchema: z.ZodType<
  MongoStartPostgres,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseUser: z.string(),
});

/** @internal */
export type MongoStartPostgres$Outbound = {
  databaseUser: string;
};

/** @internal */
export const MongoStartPostgres$outboundSchema: z.ZodType<
  MongoStartPostgres$Outbound,
  z.ZodTypeDef,
  MongoStartPostgres
> = z.object({
  databaseUser: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartPostgres$ {
  /** @deprecated use `MongoStartPostgres$inboundSchema` instead. */
  export const inboundSchema = MongoStartPostgres$inboundSchema;
  /** @deprecated use `MongoStartPostgres$outboundSchema` instead. */
  export const outboundSchema = MongoStartPostgres$outboundSchema;
  /** @deprecated use `MongoStartPostgres$Outbound` instead. */
  export type Outbound = MongoStartPostgres$Outbound;
}

export function mongoStartPostgresToJSON(
  mongoStartPostgres: MongoStartPostgres,
): string {
  return JSON.stringify(
    MongoStartPostgres$outboundSchema.parse(mongoStartPostgres),
  );
}

export function mongoStartPostgresFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartPostgres, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartPostgres$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartPostgres' from JSON`,
  );
}

/** @internal */
export const MongoStartMariadb$inboundSchema: z.ZodType<
  MongoStartMariadb,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseUser: z.string(),
  databasePassword: z.string(),
});

/** @internal */
export type MongoStartMariadb$Outbound = {
  databaseUser: string;
  databasePassword: string;
};

/** @internal */
export const MongoStartMariadb$outboundSchema: z.ZodType<
  MongoStartMariadb$Outbound,
  z.ZodTypeDef,
  MongoStartMariadb
> = z.object({
  databaseUser: z.string(),
  databasePassword: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartMariadb$ {
  /** @deprecated use `MongoStartMariadb$inboundSchema` instead. */
  export const inboundSchema = MongoStartMariadb$inboundSchema;
  /** @deprecated use `MongoStartMariadb$outboundSchema` instead. */
  export const outboundSchema = MongoStartMariadb$outboundSchema;
  /** @deprecated use `MongoStartMariadb$Outbound` instead. */
  export type Outbound = MongoStartMariadb$Outbound;
}

export function mongoStartMariadbToJSON(
  mongoStartMariadb: MongoStartMariadb,
): string {
  return JSON.stringify(
    MongoStartMariadb$outboundSchema.parse(mongoStartMariadb),
  );
}

export function mongoStartMariadbFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartMariadb, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartMariadb$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartMariadb' from JSON`,
  );
}

/** @internal */
export const MongoStartMongo$inboundSchema: z.ZodType<
  MongoStartMongo,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseUser: z.string(),
  databasePassword: z.string(),
});

/** @internal */
export type MongoStartMongo$Outbound = {
  databaseUser: string;
  databasePassword: string;
};

/** @internal */
export const MongoStartMongo$outboundSchema: z.ZodType<
  MongoStartMongo$Outbound,
  z.ZodTypeDef,
  MongoStartMongo
> = z.object({
  databaseUser: z.string(),
  databasePassword: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartMongo$ {
  /** @deprecated use `MongoStartMongo$inboundSchema` instead. */
  export const inboundSchema = MongoStartMongo$inboundSchema;
  /** @deprecated use `MongoStartMongo$outboundSchema` instead. */
  export const outboundSchema = MongoStartMongo$outboundSchema;
  /** @deprecated use `MongoStartMongo$Outbound` instead. */
  export type Outbound = MongoStartMongo$Outbound;
}

export function mongoStartMongoToJSON(
  mongoStartMongo: MongoStartMongo,
): string {
  return JSON.stringify(MongoStartMongo$outboundSchema.parse(mongoStartMongo));
}

export function mongoStartMongoFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartMongo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartMongo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartMongo' from JSON`,
  );
}

/** @internal */
export const MongoStartMysql$inboundSchema: z.ZodType<
  MongoStartMysql,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseRootPassword: z.string(),
});

/** @internal */
export type MongoStartMysql$Outbound = {
  databaseRootPassword: string;
};

/** @internal */
export const MongoStartMysql$outboundSchema: z.ZodType<
  MongoStartMysql$Outbound,
  z.ZodTypeDef,
  MongoStartMysql
> = z.object({
  databaseRootPassword: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartMysql$ {
  /** @deprecated use `MongoStartMysql$inboundSchema` instead. */
  export const inboundSchema = MongoStartMysql$inboundSchema;
  /** @deprecated use `MongoStartMysql$outboundSchema` instead. */
  export const outboundSchema = MongoStartMysql$outboundSchema;
  /** @deprecated use `MongoStartMysql$Outbound` instead. */
  export type Outbound = MongoStartMysql$Outbound;
}

export function mongoStartMysqlToJSON(
  mongoStartMysql: MongoStartMysql,
): string {
  return JSON.stringify(MongoStartMysql$outboundSchema.parse(mongoStartMysql));
}

export function mongoStartMysqlFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartMysql, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartMysql$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartMysql' from JSON`,
  );
}

/** @internal */
export const MongoStartMetadata$inboundSchema: z.ZodType<
  MongoStartMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  postgres: z.lazy(() => MongoStartPostgres$inboundSchema).optional(),
  mariadb: z.lazy(() => MongoStartMariadb$inboundSchema).optional(),
  mongo: z.lazy(() => MongoStartMongo$inboundSchema).optional(),
  mysql: z.lazy(() => MongoStartMysql$inboundSchema).optional(),
});

/** @internal */
export type MongoStartMetadata$Outbound = {
  postgres?: MongoStartPostgres$Outbound | undefined;
  mariadb?: MongoStartMariadb$Outbound | undefined;
  mongo?: MongoStartMongo$Outbound | undefined;
  mysql?: MongoStartMysql$Outbound | undefined;
};

/** @internal */
export const MongoStartMetadata$outboundSchema: z.ZodType<
  MongoStartMetadata$Outbound,
  z.ZodTypeDef,
  MongoStartMetadata
> = z.object({
  postgres: z.lazy(() => MongoStartPostgres$outboundSchema).optional(),
  mariadb: z.lazy(() => MongoStartMariadb$outboundSchema).optional(),
  mongo: z.lazy(() => MongoStartMongo$outboundSchema).optional(),
  mysql: z.lazy(() => MongoStartMysql$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartMetadata$ {
  /** @deprecated use `MongoStartMetadata$inboundSchema` instead. */
  export const inboundSchema = MongoStartMetadata$inboundSchema;
  /** @deprecated use `MongoStartMetadata$outboundSchema` instead. */
  export const outboundSchema = MongoStartMetadata$outboundSchema;
  /** @deprecated use `MongoStartMetadata$Outbound` instead. */
  export type Outbound = MongoStartMetadata$Outbound;
}

export function mongoStartMetadataToJSON(
  mongoStartMetadata: MongoStartMetadata,
): string {
  return JSON.stringify(
    MongoStartMetadata$outboundSchema.parse(mongoStartMetadata),
  );
}

export function mongoStartMetadataFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartMetadata' from JSON`,
  );
}

/** @internal */
export const MongoStartMetadataUnion$inboundSchema: z.ZodType<
  MongoStartMetadataUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => MongoStartMetadata$inboundSchema),
  MongoStartMetadataEnum$inboundSchema,
]);

/** @internal */
export type MongoStartMetadataUnion$Outbound =
  | MongoStartMetadata$Outbound
  | string;

/** @internal */
export const MongoStartMetadataUnion$outboundSchema: z.ZodType<
  MongoStartMetadataUnion$Outbound,
  z.ZodTypeDef,
  MongoStartMetadataUnion
> = z.union([
  z.lazy(() => MongoStartMetadata$outboundSchema),
  MongoStartMetadataEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartMetadataUnion$ {
  /** @deprecated use `MongoStartMetadataUnion$inboundSchema` instead. */
  export const inboundSchema = MongoStartMetadataUnion$inboundSchema;
  /** @deprecated use `MongoStartMetadataUnion$outboundSchema` instead. */
  export const outboundSchema = MongoStartMetadataUnion$outboundSchema;
  /** @deprecated use `MongoStartMetadataUnion$Outbound` instead. */
  export type Outbound = MongoStartMetadataUnion$Outbound;
}

export function mongoStartMetadataUnionToJSON(
  mongoStartMetadataUnion: MongoStartMetadataUnion,
): string {
  return JSON.stringify(
    MongoStartMetadataUnion$outboundSchema.parse(mongoStartMetadataUnion),
  );
}

export function mongoStartMetadataUnionFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartMetadataUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartMetadataUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartMetadataUnion' from JSON`,
  );
}

/** @internal */
export const MongoStartBackup$inboundSchema: z.ZodType<
  MongoStartBackup,
  z.ZodTypeDef,
  unknown
> = z.object({
  backupId: z.string(),
  appName: z.string(),
  schedule: z.string(),
  enabled: z.nullable(z.boolean()),
  database: z.string(),
  prefix: z.string(),
  serviceName: z.nullable(z.string()),
  destinationId: z.string(),
  keepLatestCount: z.nullable(z.number()),
  backupType: MongoStartBackupType$inboundSchema,
  databaseType: MongoStartDatabaseType$inboundSchema,
  composeId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  userId: z.nullable(z.string()),
  metadata: z.nullable(
    z.union([
      z.lazy(() => MongoStartMetadata$inboundSchema),
      MongoStartMetadataEnum$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type MongoStartBackup$Outbound = {
  backupId: string;
  appName: string;
  schedule: string;
  enabled: boolean | null;
  database: string;
  prefix: string;
  serviceName: string | null;
  destinationId: string;
  keepLatestCount: number | null;
  backupType: string;
  databaseType: string;
  composeId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mysqlId: string | null;
  mongoId: string | null;
  userId: string | null;
  metadata?: MongoStartMetadata$Outbound | string | null | undefined;
};

/** @internal */
export const MongoStartBackup$outboundSchema: z.ZodType<
  MongoStartBackup$Outbound,
  z.ZodTypeDef,
  MongoStartBackup
> = z.object({
  backupId: z.string(),
  appName: z.string(),
  schedule: z.string(),
  enabled: z.nullable(z.boolean()),
  database: z.string(),
  prefix: z.string(),
  serviceName: z.nullable(z.string()),
  destinationId: z.string(),
  keepLatestCount: z.nullable(z.number()),
  backupType: MongoStartBackupType$outboundSchema,
  databaseType: MongoStartDatabaseType$outboundSchema,
  composeId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  userId: z.nullable(z.string()),
  metadata: z.nullable(
    z.union([
      z.lazy(() => MongoStartMetadata$outboundSchema),
      MongoStartMetadataEnum$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartBackup$ {
  /** @deprecated use `MongoStartBackup$inboundSchema` instead. */
  export const inboundSchema = MongoStartBackup$inboundSchema;
  /** @deprecated use `MongoStartBackup$outboundSchema` instead. */
  export const outboundSchema = MongoStartBackup$outboundSchema;
  /** @deprecated use `MongoStartBackup$Outbound` instead. */
  export type Outbound = MongoStartBackup$Outbound;
}

export function mongoStartBackupToJSON(
  mongoStartBackup: MongoStartBackup,
): string {
  return JSON.stringify(
    MongoStartBackup$outboundSchema.parse(mongoStartBackup),
  );
}

export function mongoStartBackupFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartBackup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartBackup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartBackup' from JSON`,
  );
}

/** @internal */
export const MongoStartResponseBody$inboundSchema: z.ZodType<
  MongoStartResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  mongoId: z.string(),
  name: z.string(),
  appName: z.string(),
  description: z.nullable(z.string()),
  databaseUser: z.string(),
  databasePassword: z.string(),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  applicationStatus: MongoStartApplicationStatus$inboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => MongoStartHealthCheckSwarm$inboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MongoStartRestartPolicySwarm$inboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => MongoStartPlacementSwarm$inboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MongoStartUpdateConfigSwarm$inboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MongoStartRollbackConfigSwarm$inboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => MongoStartModeSwarm$inboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MongoStartNetworkSwarm$inboundSchema)),
  ),
  replicas: z.number(),
  createdAt: z.string(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
  replicaSets: z.nullable(z.boolean()),
  environment: z.lazy(() => MongoStartEnvironment$inboundSchema),
  mounts: z.array(z.lazy(() => MongoStartMount$inboundSchema)),
  server: z.nullable(z.lazy(() => MongoStartServer$inboundSchema)),
  backups: z.array(z.lazy(() => MongoStartBackup$inboundSchema)),
});

/** @internal */
export type MongoStartResponseBody$Outbound = {
  mongoId: string;
  name: string;
  appName: string;
  description: string | null;
  databaseUser: string;
  databasePassword: string;
  dockerImage: string;
  command: string | null;
  env: string | null;
  memoryReservation: string | null;
  memoryLimit: string | null;
  cpuReservation: string | null;
  cpuLimit: string | null;
  externalPort: number | null;
  applicationStatus: string;
  healthCheckSwarm: MongoStartHealthCheckSwarm$Outbound | null;
  restartPolicySwarm: MongoStartRestartPolicySwarm$Outbound | null;
  placementSwarm: MongoStartPlacementSwarm$Outbound | null;
  updateConfigSwarm: MongoStartUpdateConfigSwarm$Outbound | null;
  rollbackConfigSwarm: MongoStartRollbackConfigSwarm$Outbound | null;
  modeSwarm: MongoStartModeSwarm$Outbound | null;
  labelsSwarm: { [k: string]: string } | null;
  networkSwarm: Array<MongoStartNetworkSwarm$Outbound> | null;
  replicas: number;
  createdAt: string;
  environmentId: string;
  serverId: string | null;
  replicaSets: boolean | null;
  environment: MongoStartEnvironment$Outbound;
  mounts: Array<MongoStartMount$Outbound>;
  server: MongoStartServer$Outbound | null;
  backups: Array<MongoStartBackup$Outbound>;
};

/** @internal */
export const MongoStartResponseBody$outboundSchema: z.ZodType<
  MongoStartResponseBody$Outbound,
  z.ZodTypeDef,
  MongoStartResponseBody
> = z.object({
  mongoId: z.string(),
  name: z.string(),
  appName: z.string(),
  description: z.nullable(z.string()),
  databaseUser: z.string(),
  databasePassword: z.string(),
  dockerImage: z.string(),
  command: z.nullable(z.string()),
  env: z.nullable(z.string()),
  memoryReservation: z.nullable(z.string()),
  memoryLimit: z.nullable(z.string()),
  cpuReservation: z.nullable(z.string()),
  cpuLimit: z.nullable(z.string()),
  externalPort: z.nullable(z.number()),
  applicationStatus: MongoStartApplicationStatus$outboundSchema,
  healthCheckSwarm: z.nullable(
    z.lazy(() => MongoStartHealthCheckSwarm$outboundSchema),
  ),
  restartPolicySwarm: z.nullable(
    z.lazy(() => MongoStartRestartPolicySwarm$outboundSchema),
  ),
  placementSwarm: z.nullable(
    z.lazy(() => MongoStartPlacementSwarm$outboundSchema),
  ),
  updateConfigSwarm: z.nullable(
    z.lazy(() => MongoStartUpdateConfigSwarm$outboundSchema),
  ),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => MongoStartRollbackConfigSwarm$outboundSchema),
  ),
  modeSwarm: z.nullable(z.lazy(() => MongoStartModeSwarm$outboundSchema)),
  labelsSwarm: z.nullable(z.record(z.string())),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => MongoStartNetworkSwarm$outboundSchema)),
  ),
  replicas: z.number(),
  createdAt: z.string(),
  environmentId: z.string(),
  serverId: z.nullable(z.string()),
  replicaSets: z.nullable(z.boolean()),
  environment: z.lazy(() => MongoStartEnvironment$outboundSchema),
  mounts: z.array(z.lazy(() => MongoStartMount$outboundSchema)),
  server: z.nullable(z.lazy(() => MongoStartServer$outboundSchema)),
  backups: z.array(z.lazy(() => MongoStartBackup$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartResponseBody$ {
  /** @deprecated use `MongoStartResponseBody$inboundSchema` instead. */
  export const inboundSchema = MongoStartResponseBody$inboundSchema;
  /** @deprecated use `MongoStartResponseBody$outboundSchema` instead. */
  export const outboundSchema = MongoStartResponseBody$outboundSchema;
  /** @deprecated use `MongoStartResponseBody$Outbound` instead. */
  export type Outbound = MongoStartResponseBody$Outbound;
}

export function mongoStartResponseBodyToJSON(
  mongoStartResponseBody: MongoStartResponseBody,
): string {
  return JSON.stringify(
    MongoStartResponseBody$outboundSchema.parse(mongoStartResponseBody),
  );
}

export function mongoStartResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartResponseBody' from JSON`,
  );
}

/** @internal */
export const MongoStartResponse$inboundSchema: z.ZodType<
  MongoStartResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => MongoStartResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type MongoStartResponse$Outbound =
  | MongoStartResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const MongoStartResponse$outboundSchema: z.ZodType<
  MongoStartResponse$Outbound,
  z.ZodTypeDef,
  MongoStartResponse
> = z.union([
  z.lazy(() => MongoStartResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongoStartResponse$ {
  /** @deprecated use `MongoStartResponse$inboundSchema` instead. */
  export const inboundSchema = MongoStartResponse$inboundSchema;
  /** @deprecated use `MongoStartResponse$outboundSchema` instead. */
  export const outboundSchema = MongoStartResponse$outboundSchema;
  /** @deprecated use `MongoStartResponse$Outbound` instead. */
  export type Outbound = MongoStartResponse$Outbound;
}

export function mongoStartResponseToJSON(
  mongoStartResponse: MongoStartResponse,
): string {
  return JSON.stringify(
    MongoStartResponse$outboundSchema.parse(mongoStartResponse),
  );
}

export function mongoStartResponseFromJSON(
  jsonString: string,
): SafeParseResult<MongoStartResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongoStartResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongoStartResponse' from JSON`,
  );
}
