/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComposeStartRequest = {
  composeId: string;
};

/** @internal */
export const ComposeStartRequest$inboundSchema: z.ZodType<
  ComposeStartRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  composeId: z.string(),
});

/** @internal */
export type ComposeStartRequest$Outbound = {
  composeId: string;
};

/** @internal */
export const ComposeStartRequest$outboundSchema: z.ZodType<
  ComposeStartRequest$Outbound,
  z.ZodTypeDef,
  ComposeStartRequest
> = z.object({
  composeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComposeStartRequest$ {
  /** @deprecated use `ComposeStartRequest$inboundSchema` instead. */
  export const inboundSchema = ComposeStartRequest$inboundSchema;
  /** @deprecated use `ComposeStartRequest$outboundSchema` instead. */
  export const outboundSchema = ComposeStartRequest$outboundSchema;
  /** @deprecated use `ComposeStartRequest$Outbound` instead. */
  export type Outbound = ComposeStartRequest$Outbound;
}

export function composeStartRequestToJSON(
  composeStartRequest: ComposeStartRequest,
): string {
  return JSON.stringify(
    ComposeStartRequest$outboundSchema.parse(composeStartRequest),
  );
}

export function composeStartRequestFromJSON(
  jsonString: string,
): SafeParseResult<ComposeStartRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComposeStartRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComposeStartRequest' from JSON`,
  );
}
