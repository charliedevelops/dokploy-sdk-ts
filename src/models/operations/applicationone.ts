/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ApplicationOneSecurity = {
  authorization: string;
};

export type ApplicationOneRequest = {
  applicationId: string;
};

export const ApplicationOnePreviewCertificateType = {
  Letsencrypt: "letsencrypt",
  None: "none",
  Custom: "custom",
} as const;
export type ApplicationOnePreviewCertificateType = ClosedEnum<
  typeof ApplicationOnePreviewCertificateType
>;

export const ApplicationOneSourceType = {
  Github: "github",
  Docker: "docker",
  Git: "git",
  Gitlab: "gitlab",
  Bitbucket: "bitbucket",
  Gitea: "gitea",
  Drop: "drop",
} as const;
export type ApplicationOneSourceType = ClosedEnum<
  typeof ApplicationOneSourceType
>;

export const ApplicationOneTriggerType = {
  Push: "push",
  Tag: "tag",
} as const;
export type ApplicationOneTriggerType = ClosedEnum<
  typeof ApplicationOneTriggerType
>;

export type ApplicationOneHealthCheckSwarm = {
  test?: Array<string> | undefined;
  interval?: number | undefined;
  timeout?: number | undefined;
  startPeriod?: number | undefined;
  retries?: number | undefined;
};

export type ApplicationOneRestartPolicySwarm = {
  condition?: string | undefined;
  delay?: number | undefined;
  maxAttempts?: number | undefined;
  window?: number | undefined;
};

export type ApplicationOneSpread = {
  spreadDescriptor: string;
};

export type ApplicationOnePreference = {
  spread: ApplicationOneSpread;
};

export type ApplicationOnePlatform = {
  architecture: string;
  os: string;
};

export type ApplicationOnePlacementSwarm = {
  constraints?: Array<string> | undefined;
  preferences?: Array<ApplicationOnePreference> | undefined;
  maxReplicas?: number | undefined;
  platforms?: Array<ApplicationOnePlatform> | undefined;
};

export type ApplicationOneUpdateConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type ApplicationOneRollbackConfigSwarm = {
  parallelism: number;
  delay?: number | undefined;
  failureAction?: string | undefined;
  monitor?: number | undefined;
  maxFailureRatio?: number | undefined;
  order: string;
};

export type ApplicationOneReplicated = {
  replicas?: number | undefined;
};

export type ApplicationOneGlobal = {};

export type ApplicationOneReplicatedJob = {
  maxConcurrent?: number | undefined;
  totalCompletions?: number | undefined;
};

export type ApplicationOneGlobalJob = {};

export type ApplicationOneModeSwarm = {
  replicated?: ApplicationOneReplicated | undefined;
  global?: ApplicationOneGlobal | undefined;
  replicatedJob?: ApplicationOneReplicatedJob | undefined;
  globalJob?: ApplicationOneGlobalJob | undefined;
};

export type ApplicationOneDriverOpts = {};

export type ApplicationOneNetworkSwarm = {
  target?: string | undefined;
  aliases?: Array<string> | undefined;
  driverOpts?: ApplicationOneDriverOpts | undefined;
};

export const ApplicationOneApplicationStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type ApplicationOneApplicationStatus = ClosedEnum<
  typeof ApplicationOneApplicationStatus
>;

export const ApplicationOneBuildType = {
  Dockerfile: "dockerfile",
  HerokuBuildpacks: "heroku_buildpacks",
  PaketoBuildpacks: "paketo_buildpacks",
  Nixpacks: "nixpacks",
  Static: "static",
  Railpack: "railpack",
} as const;
export type ApplicationOneBuildType = ClosedEnum<
  typeof ApplicationOneBuildType
>;

export type ApplicationOneProject = {
  projectId: string;
  name: string;
  description: string | null;
  createdAt: string;
  organizationId: string;
  env: string;
};

export type ApplicationOneEnvironment = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
  project: ApplicationOneProject;
};

export const ApplicationOneDomainType = {
  Compose: "compose",
  Application: "application",
  Preview: "preview",
} as const;
export type ApplicationOneDomainType = ClosedEnum<
  typeof ApplicationOneDomainType
>;

export const ApplicationOneCertificateType = {
  Letsencrypt: "letsencrypt",
  None: "none",
  Custom: "custom",
} as const;
export type ApplicationOneCertificateType = ClosedEnum<
  typeof ApplicationOneCertificateType
>;

export type ApplicationOneDomain = {
  domainId: string;
  host: string;
  https: boolean;
  port: number | null;
  path: string | null;
  serviceName: string | null;
  domainType: ApplicationOneDomainType | null;
  uniqueConfigKey: number;
  createdAt: string;
  composeId: string | null;
  customCertResolver: string | null;
  applicationId: string | null;
  previewDeploymentId: string | null;
  certificateType: ApplicationOneCertificateType;
  internalPath: string | null;
  stripPath: boolean;
};

export const ApplicationOneStatus = {
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type ApplicationOneStatus = ClosedEnum<typeof ApplicationOneStatus>;

export type ApplicationOneDeployment = {
  deploymentId: string;
  title: string;
  description: string | null;
  status: ApplicationOneStatus | null;
  logPath: string;
  pid: string | null;
  applicationId: string | null;
  composeId: string | null;
  serverId: string | null;
  isPreviewDeployment: boolean | null;
  previewDeploymentId: string | null;
  createdAt: string;
  startedAt: string | null;
  finishedAt: string | null;
  errorMessage: string | null;
  scheduleId: string | null;
  backupId: string | null;
  rollbackId: string | null;
  volumeBackupId: string | null;
};

export const ApplicationOneType = {
  Bind: "bind",
  Volume: "volume",
  File: "file",
} as const;
export type ApplicationOneType = ClosedEnum<typeof ApplicationOneType>;

export const ApplicationOneServiceType = {
  Application: "application",
  Postgres: "postgres",
  Mysql: "mysql",
  Mariadb: "mariadb",
  Mongo: "mongo",
  Redis: "redis",
  Compose: "compose",
} as const;
export type ApplicationOneServiceType = ClosedEnum<
  typeof ApplicationOneServiceType
>;

export type ApplicationOneMount = {
  mountId: string;
  type: ApplicationOneType;
  hostPath: string | null;
  volumeName: string | null;
  filePath: string | null;
  content: string | null;
  serviceType: ApplicationOneServiceType;
  mountPath: string;
  applicationId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mysqlId: string | null;
  redisId: string | null;
  composeId: string | null;
};

export type ApplicationOneRedirect = {
  redirectId: string;
  regex: string;
  replacement: string;
  permanent: boolean;
  uniqueConfigKey: number;
  createdAt: string;
  applicationId: string;
};

export type ApplicationOneSecurityResponse = {
  securityId: string;
  username: string;
  password: string;
  createdAt: string;
  applicationId: string;
};

export const ApplicationOnePublishMode = {
  Ingress: "ingress",
  Host: "host",
} as const;
export type ApplicationOnePublishMode = ClosedEnum<
  typeof ApplicationOnePublishMode
>;

export const ApplicationOneProtocol = {
  Tcp: "tcp",
  Udp: "udp",
} as const;
export type ApplicationOneProtocol = ClosedEnum<typeof ApplicationOneProtocol>;

export type ApplicationOnePort = {
  portId: string;
  publishedPort: number;
  publishMode: ApplicationOnePublishMode;
  targetPort: number;
  protocol: ApplicationOneProtocol;
  applicationId: string;
};

export const ApplicationOneRegistryType = {
  SelfHosted: "selfHosted",
  Cloud: "cloud",
} as const;
export type ApplicationOneRegistryType = ClosedEnum<
  typeof ApplicationOneRegistryType
>;

export type ApplicationOneRegistry = {
  registryId: string;
  registryName: string;
  imagePrefix: string | null;
  username: string;
  password: string;
  registryUrl: string;
  createdAt: string;
  registryType: ApplicationOneRegistryType;
  organizationId: string;
};

export type ApplicationOneGithub = {
  githubId: string;
  githubAppName: string | null;
  githubAppId: number | null;
  githubClientId: string | null;
  githubClientSecret: string | null;
  githubInstallationId: string | null;
  githubPrivateKey: string | null;
  githubWebhookSecret: string | null;
  gitProviderId: string;
};

export type ApplicationOneGitlab = {
  gitlabId: string;
  gitlabUrl: string;
  applicationId: string | null;
  redirectUri: string | null;
  secret: string | null;
  accessToken: string | null;
  refreshToken: string | null;
  groupName: string | null;
  expiresAt: number | null;
  gitProviderId: string;
};

export type ApplicationOneBitbucket = {
  bitbucketId: string;
  bitbucketUsername: string | null;
  appPassword: string | null;
  bitbucketWorkspaceName: string | null;
  gitProviderId: string;
};

export type ApplicationOneGitea = {
  giteaId: string;
  giteaUrl: string;
  redirectUri: string | null;
  clientId: string | null;
  clientSecret: string | null;
  gitProviderId: string;
  accessToken: string | null;
  refreshToken: string | null;
  expiresAt: number | null;
  scopes: string | null;
  lastAuthenticatedAt: number | null;
};

export const ApplicationOneServerStatus = {
  Active: "active",
  Inactive: "inactive",
} as const;
export type ApplicationOneServerStatus = ClosedEnum<
  typeof ApplicationOneServerStatus
>;

export const ApplicationOneMetricsConfigEnum = {
  Null: "null",
} as const;
export type ApplicationOneMetricsConfigEnum = ClosedEnum<
  typeof ApplicationOneMetricsConfigEnum
>;

export type ApplicationOneMetricsConfigUnion1 =
  | string
  | number
  | boolean
  | ApplicationOneMetricsConfigEnum;

export type ApplicationOneMetricsConfigUnion2 =
  | string
  | number
  | boolean
  | ApplicationOneMetricsConfigEnum
  | Array<any>
  | { [k: string]: any };

export type ApplicationOneServer = {
  serverId: string;
  name: string;
  description: string | null;
  ipAddress: string;
  port: number;
  username: string;
  appName: string;
  enableDockerCleanup: boolean;
  createdAt: string;
  organizationId: string;
  serverStatus: ApplicationOneServerStatus;
  command: string;
  sshKeyId: string | null;
  metricsConfig:
    | string
    | number
    | boolean
    | ApplicationOneMetricsConfigEnum
    | Array<any>
    | { [k: string]: any };
};

export const ApplicationOnePreviewStatus = {
  Idle: "idle",
  Running: "running",
  Done: "done",
  Error: "error",
} as const;
export type ApplicationOnePreviewStatus = ClosedEnum<
  typeof ApplicationOnePreviewStatus
>;

export type ApplicationOnePreviewDeployment = {
  previewDeploymentId: string;
  branch: string;
  pullRequestId: string;
  pullRequestNumber: string;
  pullRequestURL: string;
  pullRequestTitle: string;
  pullRequestCommentId: string;
  previewStatus: ApplicationOnePreviewStatus;
  appName: string;
  applicationId: string;
  domainId: string | null;
  createdAt: string;
  expiresAt: string | null;
};

export const UnauthorizedProvider = {
  Github: "github",
  Gitlab: "gitlab",
  Bitbucket: "bitbucket",
  Gitea: "gitea",
} as const;
export type UnauthorizedProvider = ClosedEnum<typeof UnauthorizedProvider>;

/**
 * Successful response
 */
export type ApplicationOneResponseBody = {
  applicationId?: string | undefined;
  name: string;
  appName?: string | undefined;
  description?: string | null | undefined;
  env?: string | null | undefined;
  previewEnv?: string | null | undefined;
  watchPaths?: Array<string> | null | undefined;
  previewBuildArgs?: string | null | undefined;
  previewLabels?: Array<string> | null | undefined;
  previewWildcard?: string | null | undefined;
  previewPort?: number | null | undefined;
  previewHttps?: boolean | undefined;
  previewPath?: string | null | undefined;
  previewCertificateType?: ApplicationOnePreviewCertificateType | undefined;
  previewCustomCertResolver?: string | null | undefined;
  previewLimit?: number | null | undefined;
  isPreviewDeploymentsActive?: boolean | null | undefined;
  previewRequireCollaboratorPermissions?: boolean | null | undefined;
  rollbackActive?: boolean | null | undefined;
  buildArgs?: string | null | undefined;
  memoryReservation?: string | null | undefined;
  memoryLimit?: string | null | undefined;
  cpuReservation?: string | null | undefined;
  cpuLimit?: string | null | undefined;
  title?: string | null | undefined;
  enabled?: boolean | null | undefined;
  subtitle?: string | null | undefined;
  command?: string | null | undefined;
  refreshToken?: string | null | undefined;
  sourceType?: ApplicationOneSourceType | undefined;
  cleanCache?: boolean | null | undefined;
  repository?: string | null | undefined;
  owner?: string | null | undefined;
  branch?: string | null | undefined;
  buildPath?: string | null | undefined;
  triggerType?: ApplicationOneTriggerType | null | undefined;
  autoDeploy?: boolean | null | undefined;
  gitlabProjectId?: number | null | undefined;
  gitlabRepository?: string | null | undefined;
  gitlabOwner?: string | null | undefined;
  gitlabBranch?: string | null | undefined;
  gitlabBuildPath?: string | null | undefined;
  gitlabPathNamespace?: string | null | undefined;
  giteaRepository?: string | null | undefined;
  giteaOwner?: string | null | undefined;
  giteaBranch?: string | null | undefined;
  giteaBuildPath?: string | null | undefined;
  bitbucketRepository?: string | null | undefined;
  bitbucketOwner?: string | null | undefined;
  bitbucketBranch?: string | null | undefined;
  bitbucketBuildPath?: string | null | undefined;
  username?: string | null | undefined;
  password?: string | null | undefined;
  dockerImage?: string | null | undefined;
  registryUrl?: string | null | undefined;
  customGitUrl?: string | null | undefined;
  customGitBranch?: string | null | undefined;
  customGitBuildPath?: string | null | undefined;
  customGitSSHKeyId?: string | null | undefined;
  enableSubmodules?: boolean | undefined;
  dockerfile?: string | null | undefined;
  dockerContextPath?: string | null | undefined;
  dockerBuildStage?: string | null | undefined;
  dropBuildPath?: string | null | undefined;
  healthCheckSwarm?: ApplicationOneHealthCheckSwarm | null | undefined;
  restartPolicySwarm?: ApplicationOneRestartPolicySwarm | null | undefined;
  placementSwarm?: ApplicationOnePlacementSwarm | null | undefined;
  updateConfigSwarm?: ApplicationOneUpdateConfigSwarm | null | undefined;
  rollbackConfigSwarm?: ApplicationOneRollbackConfigSwarm | null | undefined;
  modeSwarm?: ApplicationOneModeSwarm | null | undefined;
  labelsSwarm?: { [k: string]: string } | null | undefined;
  networkSwarm?: Array<ApplicationOneNetworkSwarm> | null | undefined;
  replicas?: number | undefined;
  applicationStatus?: ApplicationOneApplicationStatus | undefined;
  buildType?: ApplicationOneBuildType | undefined;
  railpackVersion?: string | null | undefined;
  herokuVersion?: string | null | undefined;
  publishDirectory?: string | null | undefined;
  isStaticSpa?: boolean | null | undefined;
  createdAt?: string | undefined;
  registryId?: string | null | undefined;
  environmentId: string;
  githubId?: string | null | undefined;
  gitlabId?: string | null | undefined;
  giteaId?: string | null | undefined;
  bitbucketId?: string | null | undefined;
  serverId?: string | null | undefined;
  environment: ApplicationOneEnvironment;
  domains: Array<ApplicationOneDomain>;
  deployments: Array<ApplicationOneDeployment>;
  mounts: Array<ApplicationOneMount>;
  redirects: Array<ApplicationOneRedirect>;
  security: Array<ApplicationOneSecurityResponse>;
  ports: Array<ApplicationOnePort>;
  registry: ApplicationOneRegistry | null;
  github: ApplicationOneGithub | null;
  gitlab: ApplicationOneGitlab | null;
  bitbucket: ApplicationOneBitbucket | null;
  gitea: ApplicationOneGitea | null;
  server: ApplicationOneServer | null;
  previewDeployments: Array<ApplicationOnePreviewDeployment>;
  hasGitProviderAccess: boolean;
  unauthorizedProvider: UnauthorizedProvider | null;
};

export type ApplicationOneResponse = ApplicationOneResponseBody | models.ErrorT;

/** @internal */
export const ApplicationOneSecurity$inboundSchema: z.ZodType<
  ApplicationOneSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  Authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Authorization": "authorization",
  });
});

/** @internal */
export type ApplicationOneSecurity$Outbound = {
  Authorization: string;
};

/** @internal */
export const ApplicationOneSecurity$outboundSchema: z.ZodType<
  ApplicationOneSecurity$Outbound,
  z.ZodTypeDef,
  ApplicationOneSecurity
> = z.object({
  authorization: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorization: "Authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneSecurity$ {
  /** @deprecated use `ApplicationOneSecurity$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneSecurity$inboundSchema;
  /** @deprecated use `ApplicationOneSecurity$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneSecurity$outboundSchema;
  /** @deprecated use `ApplicationOneSecurity$Outbound` instead. */
  export type Outbound = ApplicationOneSecurity$Outbound;
}

export function applicationOneSecurityToJSON(
  applicationOneSecurity: ApplicationOneSecurity,
): string {
  return JSON.stringify(
    ApplicationOneSecurity$outboundSchema.parse(applicationOneSecurity),
  );
}

export function applicationOneSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneSecurity' from JSON`,
  );
}

/** @internal */
export const ApplicationOneRequest$inboundSchema: z.ZodType<
  ApplicationOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string(),
});

/** @internal */
export type ApplicationOneRequest$Outbound = {
  applicationId: string;
};

/** @internal */
export const ApplicationOneRequest$outboundSchema: z.ZodType<
  ApplicationOneRequest$Outbound,
  z.ZodTypeDef,
  ApplicationOneRequest
> = z.object({
  applicationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneRequest$ {
  /** @deprecated use `ApplicationOneRequest$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneRequest$inboundSchema;
  /** @deprecated use `ApplicationOneRequest$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneRequest$outboundSchema;
  /** @deprecated use `ApplicationOneRequest$Outbound` instead. */
  export type Outbound = ApplicationOneRequest$Outbound;
}

export function applicationOneRequestToJSON(
  applicationOneRequest: ApplicationOneRequest,
): string {
  return JSON.stringify(
    ApplicationOneRequest$outboundSchema.parse(applicationOneRequest),
  );
}

export function applicationOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneRequest' from JSON`,
  );
}

/** @internal */
export const ApplicationOnePreviewCertificateType$inboundSchema:
  z.ZodNativeEnum<typeof ApplicationOnePreviewCertificateType> = z.nativeEnum(
    ApplicationOnePreviewCertificateType,
  );

/** @internal */
export const ApplicationOnePreviewCertificateType$outboundSchema:
  z.ZodNativeEnum<typeof ApplicationOnePreviewCertificateType> =
    ApplicationOnePreviewCertificateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOnePreviewCertificateType$ {
  /** @deprecated use `ApplicationOnePreviewCertificateType$inboundSchema` instead. */
  export const inboundSchema =
    ApplicationOnePreviewCertificateType$inboundSchema;
  /** @deprecated use `ApplicationOnePreviewCertificateType$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationOnePreviewCertificateType$outboundSchema;
}

/** @internal */
export const ApplicationOneSourceType$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationOneSourceType
> = z.nativeEnum(ApplicationOneSourceType);

/** @internal */
export const ApplicationOneSourceType$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationOneSourceType
> = ApplicationOneSourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneSourceType$ {
  /** @deprecated use `ApplicationOneSourceType$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneSourceType$inboundSchema;
  /** @deprecated use `ApplicationOneSourceType$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneSourceType$outboundSchema;
}

/** @internal */
export const ApplicationOneTriggerType$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationOneTriggerType
> = z.nativeEnum(ApplicationOneTriggerType);

/** @internal */
export const ApplicationOneTriggerType$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationOneTriggerType
> = ApplicationOneTriggerType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneTriggerType$ {
  /** @deprecated use `ApplicationOneTriggerType$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneTriggerType$inboundSchema;
  /** @deprecated use `ApplicationOneTriggerType$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneTriggerType$outboundSchema;
}

/** @internal */
export const ApplicationOneHealthCheckSwarm$inboundSchema: z.ZodType<
  ApplicationOneHealthCheckSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Test: z.array(z.string()).optional(),
  Interval: z.number().optional(),
  Timeout: z.number().optional(),
  StartPeriod: z.number().optional(),
  Retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Test": "test",
    "Interval": "interval",
    "Timeout": "timeout",
    "StartPeriod": "startPeriod",
    "Retries": "retries",
  });
});

/** @internal */
export type ApplicationOneHealthCheckSwarm$Outbound = {
  Test?: Array<string> | undefined;
  Interval?: number | undefined;
  Timeout?: number | undefined;
  StartPeriod?: number | undefined;
  Retries?: number | undefined;
};

/** @internal */
export const ApplicationOneHealthCheckSwarm$outboundSchema: z.ZodType<
  ApplicationOneHealthCheckSwarm$Outbound,
  z.ZodTypeDef,
  ApplicationOneHealthCheckSwarm
> = z.object({
  test: z.array(z.string()).optional(),
  interval: z.number().optional(),
  timeout: z.number().optional(),
  startPeriod: z.number().optional(),
  retries: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    test: "Test",
    interval: "Interval",
    timeout: "Timeout",
    startPeriod: "StartPeriod",
    retries: "Retries",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneHealthCheckSwarm$ {
  /** @deprecated use `ApplicationOneHealthCheckSwarm$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneHealthCheckSwarm$inboundSchema;
  /** @deprecated use `ApplicationOneHealthCheckSwarm$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneHealthCheckSwarm$outboundSchema;
  /** @deprecated use `ApplicationOneHealthCheckSwarm$Outbound` instead. */
  export type Outbound = ApplicationOneHealthCheckSwarm$Outbound;
}

export function applicationOneHealthCheckSwarmToJSON(
  applicationOneHealthCheckSwarm: ApplicationOneHealthCheckSwarm,
): string {
  return JSON.stringify(
    ApplicationOneHealthCheckSwarm$outboundSchema.parse(
      applicationOneHealthCheckSwarm,
    ),
  );
}

export function applicationOneHealthCheckSwarmFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneHealthCheckSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneHealthCheckSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneHealthCheckSwarm' from JSON`,
  );
}

/** @internal */
export const ApplicationOneRestartPolicySwarm$inboundSchema: z.ZodType<
  ApplicationOneRestartPolicySwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Condition: z.string().optional(),
  Delay: z.number().optional(),
  MaxAttempts: z.number().optional(),
  Window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Condition": "condition",
    "Delay": "delay",
    "MaxAttempts": "maxAttempts",
    "Window": "window",
  });
});

/** @internal */
export type ApplicationOneRestartPolicySwarm$Outbound = {
  Condition?: string | undefined;
  Delay?: number | undefined;
  MaxAttempts?: number | undefined;
  Window?: number | undefined;
};

/** @internal */
export const ApplicationOneRestartPolicySwarm$outboundSchema: z.ZodType<
  ApplicationOneRestartPolicySwarm$Outbound,
  z.ZodTypeDef,
  ApplicationOneRestartPolicySwarm
> = z.object({
  condition: z.string().optional(),
  delay: z.number().optional(),
  maxAttempts: z.number().optional(),
  window: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    condition: "Condition",
    delay: "Delay",
    maxAttempts: "MaxAttempts",
    window: "Window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneRestartPolicySwarm$ {
  /** @deprecated use `ApplicationOneRestartPolicySwarm$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneRestartPolicySwarm$inboundSchema;
  /** @deprecated use `ApplicationOneRestartPolicySwarm$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneRestartPolicySwarm$outboundSchema;
  /** @deprecated use `ApplicationOneRestartPolicySwarm$Outbound` instead. */
  export type Outbound = ApplicationOneRestartPolicySwarm$Outbound;
}

export function applicationOneRestartPolicySwarmToJSON(
  applicationOneRestartPolicySwarm: ApplicationOneRestartPolicySwarm,
): string {
  return JSON.stringify(
    ApplicationOneRestartPolicySwarm$outboundSchema.parse(
      applicationOneRestartPolicySwarm,
    ),
  );
}

export function applicationOneRestartPolicySwarmFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneRestartPolicySwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneRestartPolicySwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneRestartPolicySwarm' from JSON`,
  );
}

/** @internal */
export const ApplicationOneSpread$inboundSchema: z.ZodType<
  ApplicationOneSpread,
  z.ZodTypeDef,
  unknown
> = z.object({
  SpreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SpreadDescriptor": "spreadDescriptor",
  });
});

/** @internal */
export type ApplicationOneSpread$Outbound = {
  SpreadDescriptor: string;
};

/** @internal */
export const ApplicationOneSpread$outboundSchema: z.ZodType<
  ApplicationOneSpread$Outbound,
  z.ZodTypeDef,
  ApplicationOneSpread
> = z.object({
  spreadDescriptor: z.string(),
}).transform((v) => {
  return remap$(v, {
    spreadDescriptor: "SpreadDescriptor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneSpread$ {
  /** @deprecated use `ApplicationOneSpread$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneSpread$inboundSchema;
  /** @deprecated use `ApplicationOneSpread$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneSpread$outboundSchema;
  /** @deprecated use `ApplicationOneSpread$Outbound` instead. */
  export type Outbound = ApplicationOneSpread$Outbound;
}

export function applicationOneSpreadToJSON(
  applicationOneSpread: ApplicationOneSpread,
): string {
  return JSON.stringify(
    ApplicationOneSpread$outboundSchema.parse(applicationOneSpread),
  );
}

export function applicationOneSpreadFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneSpread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneSpread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneSpread' from JSON`,
  );
}

/** @internal */
export const ApplicationOnePreference$inboundSchema: z.ZodType<
  ApplicationOnePreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  Spread: z.lazy(() => ApplicationOneSpread$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Spread": "spread",
  });
});

/** @internal */
export type ApplicationOnePreference$Outbound = {
  Spread: ApplicationOneSpread$Outbound;
};

/** @internal */
export const ApplicationOnePreference$outboundSchema: z.ZodType<
  ApplicationOnePreference$Outbound,
  z.ZodTypeDef,
  ApplicationOnePreference
> = z.object({
  spread: z.lazy(() => ApplicationOneSpread$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    spread: "Spread",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOnePreference$ {
  /** @deprecated use `ApplicationOnePreference$inboundSchema` instead. */
  export const inboundSchema = ApplicationOnePreference$inboundSchema;
  /** @deprecated use `ApplicationOnePreference$outboundSchema` instead. */
  export const outboundSchema = ApplicationOnePreference$outboundSchema;
  /** @deprecated use `ApplicationOnePreference$Outbound` instead. */
  export type Outbound = ApplicationOnePreference$Outbound;
}

export function applicationOnePreferenceToJSON(
  applicationOnePreference: ApplicationOnePreference,
): string {
  return JSON.stringify(
    ApplicationOnePreference$outboundSchema.parse(applicationOnePreference),
  );
}

export function applicationOnePreferenceFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOnePreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOnePreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOnePreference' from JSON`,
  );
}

/** @internal */
export const ApplicationOnePlatform$inboundSchema: z.ZodType<
  ApplicationOnePlatform,
  z.ZodTypeDef,
  unknown
> = z.object({
  Architecture: z.string(),
  OS: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Architecture": "architecture",
    "OS": "os",
  });
});

/** @internal */
export type ApplicationOnePlatform$Outbound = {
  Architecture: string;
  OS: string;
};

/** @internal */
export const ApplicationOnePlatform$outboundSchema: z.ZodType<
  ApplicationOnePlatform$Outbound,
  z.ZodTypeDef,
  ApplicationOnePlatform
> = z.object({
  architecture: z.string(),
  os: z.string(),
}).transform((v) => {
  return remap$(v, {
    architecture: "Architecture",
    os: "OS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOnePlatform$ {
  /** @deprecated use `ApplicationOnePlatform$inboundSchema` instead. */
  export const inboundSchema = ApplicationOnePlatform$inboundSchema;
  /** @deprecated use `ApplicationOnePlatform$outboundSchema` instead. */
  export const outboundSchema = ApplicationOnePlatform$outboundSchema;
  /** @deprecated use `ApplicationOnePlatform$Outbound` instead. */
  export type Outbound = ApplicationOnePlatform$Outbound;
}

export function applicationOnePlatformToJSON(
  applicationOnePlatform: ApplicationOnePlatform,
): string {
  return JSON.stringify(
    ApplicationOnePlatform$outboundSchema.parse(applicationOnePlatform),
  );
}

export function applicationOnePlatformFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOnePlatform, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOnePlatform$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOnePlatform' from JSON`,
  );
}

/** @internal */
export const ApplicationOnePlacementSwarm$inboundSchema: z.ZodType<
  ApplicationOnePlacementSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Constraints: z.array(z.string()).optional(),
  Preferences: z.array(z.lazy(() => ApplicationOnePreference$inboundSchema))
    .optional(),
  MaxReplicas: z.number().optional(),
  Platforms: z.array(z.lazy(() => ApplicationOnePlatform$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Constraints": "constraints",
    "Preferences": "preferences",
    "MaxReplicas": "maxReplicas",
    "Platforms": "platforms",
  });
});

/** @internal */
export type ApplicationOnePlacementSwarm$Outbound = {
  Constraints?: Array<string> | undefined;
  Preferences?: Array<ApplicationOnePreference$Outbound> | undefined;
  MaxReplicas?: number | undefined;
  Platforms?: Array<ApplicationOnePlatform$Outbound> | undefined;
};

/** @internal */
export const ApplicationOnePlacementSwarm$outboundSchema: z.ZodType<
  ApplicationOnePlacementSwarm$Outbound,
  z.ZodTypeDef,
  ApplicationOnePlacementSwarm
> = z.object({
  constraints: z.array(z.string()).optional(),
  preferences: z.array(z.lazy(() => ApplicationOnePreference$outboundSchema))
    .optional(),
  maxReplicas: z.number().optional(),
  platforms: z.array(z.lazy(() => ApplicationOnePlatform$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    constraints: "Constraints",
    preferences: "Preferences",
    maxReplicas: "MaxReplicas",
    platforms: "Platforms",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOnePlacementSwarm$ {
  /** @deprecated use `ApplicationOnePlacementSwarm$inboundSchema` instead. */
  export const inboundSchema = ApplicationOnePlacementSwarm$inboundSchema;
  /** @deprecated use `ApplicationOnePlacementSwarm$outboundSchema` instead. */
  export const outboundSchema = ApplicationOnePlacementSwarm$outboundSchema;
  /** @deprecated use `ApplicationOnePlacementSwarm$Outbound` instead. */
  export type Outbound = ApplicationOnePlacementSwarm$Outbound;
}

export function applicationOnePlacementSwarmToJSON(
  applicationOnePlacementSwarm: ApplicationOnePlacementSwarm,
): string {
  return JSON.stringify(
    ApplicationOnePlacementSwarm$outboundSchema.parse(
      applicationOnePlacementSwarm,
    ),
  );
}

export function applicationOnePlacementSwarmFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOnePlacementSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOnePlacementSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOnePlacementSwarm' from JSON`,
  );
}

/** @internal */
export const ApplicationOneUpdateConfigSwarm$inboundSchema: z.ZodType<
  ApplicationOneUpdateConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type ApplicationOneUpdateConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const ApplicationOneUpdateConfigSwarm$outboundSchema: z.ZodType<
  ApplicationOneUpdateConfigSwarm$Outbound,
  z.ZodTypeDef,
  ApplicationOneUpdateConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneUpdateConfigSwarm$ {
  /** @deprecated use `ApplicationOneUpdateConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneUpdateConfigSwarm$inboundSchema;
  /** @deprecated use `ApplicationOneUpdateConfigSwarm$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneUpdateConfigSwarm$outboundSchema;
  /** @deprecated use `ApplicationOneUpdateConfigSwarm$Outbound` instead. */
  export type Outbound = ApplicationOneUpdateConfigSwarm$Outbound;
}

export function applicationOneUpdateConfigSwarmToJSON(
  applicationOneUpdateConfigSwarm: ApplicationOneUpdateConfigSwarm,
): string {
  return JSON.stringify(
    ApplicationOneUpdateConfigSwarm$outboundSchema.parse(
      applicationOneUpdateConfigSwarm,
    ),
  );
}

export function applicationOneUpdateConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneUpdateConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneUpdateConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneUpdateConfigSwarm' from JSON`,
  );
}

/** @internal */
export const ApplicationOneRollbackConfigSwarm$inboundSchema: z.ZodType<
  ApplicationOneRollbackConfigSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Parallelism: z.number(),
  Delay: z.number().optional(),
  FailureAction: z.string().optional(),
  Monitor: z.number().optional(),
  MaxFailureRatio: z.number().optional(),
  Order: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Parallelism": "parallelism",
    "Delay": "delay",
    "FailureAction": "failureAction",
    "Monitor": "monitor",
    "MaxFailureRatio": "maxFailureRatio",
    "Order": "order",
  });
});

/** @internal */
export type ApplicationOneRollbackConfigSwarm$Outbound = {
  Parallelism: number;
  Delay?: number | undefined;
  FailureAction?: string | undefined;
  Monitor?: number | undefined;
  MaxFailureRatio?: number | undefined;
  Order: string;
};

/** @internal */
export const ApplicationOneRollbackConfigSwarm$outboundSchema: z.ZodType<
  ApplicationOneRollbackConfigSwarm$Outbound,
  z.ZodTypeDef,
  ApplicationOneRollbackConfigSwarm
> = z.object({
  parallelism: z.number(),
  delay: z.number().optional(),
  failureAction: z.string().optional(),
  monitor: z.number().optional(),
  maxFailureRatio: z.number().optional(),
  order: z.string(),
}).transform((v) => {
  return remap$(v, {
    parallelism: "Parallelism",
    delay: "Delay",
    failureAction: "FailureAction",
    monitor: "Monitor",
    maxFailureRatio: "MaxFailureRatio",
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneRollbackConfigSwarm$ {
  /** @deprecated use `ApplicationOneRollbackConfigSwarm$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneRollbackConfigSwarm$inboundSchema;
  /** @deprecated use `ApplicationOneRollbackConfigSwarm$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationOneRollbackConfigSwarm$outboundSchema;
  /** @deprecated use `ApplicationOneRollbackConfigSwarm$Outbound` instead. */
  export type Outbound = ApplicationOneRollbackConfigSwarm$Outbound;
}

export function applicationOneRollbackConfigSwarmToJSON(
  applicationOneRollbackConfigSwarm: ApplicationOneRollbackConfigSwarm,
): string {
  return JSON.stringify(
    ApplicationOneRollbackConfigSwarm$outboundSchema.parse(
      applicationOneRollbackConfigSwarm,
    ),
  );
}

export function applicationOneRollbackConfigSwarmFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneRollbackConfigSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneRollbackConfigSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneRollbackConfigSwarm' from JSON`,
  );
}

/** @internal */
export const ApplicationOneReplicated$inboundSchema: z.ZodType<
  ApplicationOneReplicated,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicas": "replicas",
  });
});

/** @internal */
export type ApplicationOneReplicated$Outbound = {
  Replicas?: number | undefined;
};

/** @internal */
export const ApplicationOneReplicated$outboundSchema: z.ZodType<
  ApplicationOneReplicated$Outbound,
  z.ZodTypeDef,
  ApplicationOneReplicated
> = z.object({
  replicas: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    replicas: "Replicas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneReplicated$ {
  /** @deprecated use `ApplicationOneReplicated$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneReplicated$inboundSchema;
  /** @deprecated use `ApplicationOneReplicated$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneReplicated$outboundSchema;
  /** @deprecated use `ApplicationOneReplicated$Outbound` instead. */
  export type Outbound = ApplicationOneReplicated$Outbound;
}

export function applicationOneReplicatedToJSON(
  applicationOneReplicated: ApplicationOneReplicated,
): string {
  return JSON.stringify(
    ApplicationOneReplicated$outboundSchema.parse(applicationOneReplicated),
  );
}

export function applicationOneReplicatedFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneReplicated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneReplicated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneReplicated' from JSON`,
  );
}

/** @internal */
export const ApplicationOneGlobal$inboundSchema: z.ZodType<
  ApplicationOneGlobal,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ApplicationOneGlobal$Outbound = {};

/** @internal */
export const ApplicationOneGlobal$outboundSchema: z.ZodType<
  ApplicationOneGlobal$Outbound,
  z.ZodTypeDef,
  ApplicationOneGlobal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneGlobal$ {
  /** @deprecated use `ApplicationOneGlobal$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneGlobal$inboundSchema;
  /** @deprecated use `ApplicationOneGlobal$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneGlobal$outboundSchema;
  /** @deprecated use `ApplicationOneGlobal$Outbound` instead. */
  export type Outbound = ApplicationOneGlobal$Outbound;
}

export function applicationOneGlobalToJSON(
  applicationOneGlobal: ApplicationOneGlobal,
): string {
  return JSON.stringify(
    ApplicationOneGlobal$outboundSchema.parse(applicationOneGlobal),
  );
}

export function applicationOneGlobalFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneGlobal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneGlobal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneGlobal' from JSON`,
  );
}

/** @internal */
export const ApplicationOneReplicatedJob$inboundSchema: z.ZodType<
  ApplicationOneReplicatedJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  MaxConcurrent: z.number().optional(),
  TotalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "MaxConcurrent": "maxConcurrent",
    "TotalCompletions": "totalCompletions",
  });
});

/** @internal */
export type ApplicationOneReplicatedJob$Outbound = {
  MaxConcurrent?: number | undefined;
  TotalCompletions?: number | undefined;
};

/** @internal */
export const ApplicationOneReplicatedJob$outboundSchema: z.ZodType<
  ApplicationOneReplicatedJob$Outbound,
  z.ZodTypeDef,
  ApplicationOneReplicatedJob
> = z.object({
  maxConcurrent: z.number().optional(),
  totalCompletions: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    maxConcurrent: "MaxConcurrent",
    totalCompletions: "TotalCompletions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneReplicatedJob$ {
  /** @deprecated use `ApplicationOneReplicatedJob$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneReplicatedJob$inboundSchema;
  /** @deprecated use `ApplicationOneReplicatedJob$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneReplicatedJob$outboundSchema;
  /** @deprecated use `ApplicationOneReplicatedJob$Outbound` instead. */
  export type Outbound = ApplicationOneReplicatedJob$Outbound;
}

export function applicationOneReplicatedJobToJSON(
  applicationOneReplicatedJob: ApplicationOneReplicatedJob,
): string {
  return JSON.stringify(
    ApplicationOneReplicatedJob$outboundSchema.parse(
      applicationOneReplicatedJob,
    ),
  );
}

export function applicationOneReplicatedJobFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneReplicatedJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneReplicatedJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneReplicatedJob' from JSON`,
  );
}

/** @internal */
export const ApplicationOneGlobalJob$inboundSchema: z.ZodType<
  ApplicationOneGlobalJob,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ApplicationOneGlobalJob$Outbound = {};

/** @internal */
export const ApplicationOneGlobalJob$outboundSchema: z.ZodType<
  ApplicationOneGlobalJob$Outbound,
  z.ZodTypeDef,
  ApplicationOneGlobalJob
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneGlobalJob$ {
  /** @deprecated use `ApplicationOneGlobalJob$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneGlobalJob$inboundSchema;
  /** @deprecated use `ApplicationOneGlobalJob$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneGlobalJob$outboundSchema;
  /** @deprecated use `ApplicationOneGlobalJob$Outbound` instead. */
  export type Outbound = ApplicationOneGlobalJob$Outbound;
}

export function applicationOneGlobalJobToJSON(
  applicationOneGlobalJob: ApplicationOneGlobalJob,
): string {
  return JSON.stringify(
    ApplicationOneGlobalJob$outboundSchema.parse(applicationOneGlobalJob),
  );
}

export function applicationOneGlobalJobFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneGlobalJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneGlobalJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneGlobalJob' from JSON`,
  );
}

/** @internal */
export const ApplicationOneModeSwarm$inboundSchema: z.ZodType<
  ApplicationOneModeSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Replicated: z.lazy(() => ApplicationOneReplicated$inboundSchema).optional(),
  Global: z.lazy(() => ApplicationOneGlobal$inboundSchema).optional(),
  ReplicatedJob: z.lazy(() => ApplicationOneReplicatedJob$inboundSchema)
    .optional(),
  GlobalJob: z.lazy(() => ApplicationOneGlobalJob$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Replicated": "replicated",
    "Global": "global",
    "ReplicatedJob": "replicatedJob",
    "GlobalJob": "globalJob",
  });
});

/** @internal */
export type ApplicationOneModeSwarm$Outbound = {
  Replicated?: ApplicationOneReplicated$Outbound | undefined;
  Global?: ApplicationOneGlobal$Outbound | undefined;
  ReplicatedJob?: ApplicationOneReplicatedJob$Outbound | undefined;
  GlobalJob?: ApplicationOneGlobalJob$Outbound | undefined;
};

/** @internal */
export const ApplicationOneModeSwarm$outboundSchema: z.ZodType<
  ApplicationOneModeSwarm$Outbound,
  z.ZodTypeDef,
  ApplicationOneModeSwarm
> = z.object({
  replicated: z.lazy(() => ApplicationOneReplicated$outboundSchema).optional(),
  global: z.lazy(() => ApplicationOneGlobal$outboundSchema).optional(),
  replicatedJob: z.lazy(() => ApplicationOneReplicatedJob$outboundSchema)
    .optional(),
  globalJob: z.lazy(() => ApplicationOneGlobalJob$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    replicated: "Replicated",
    global: "Global",
    replicatedJob: "ReplicatedJob",
    globalJob: "GlobalJob",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneModeSwarm$ {
  /** @deprecated use `ApplicationOneModeSwarm$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneModeSwarm$inboundSchema;
  /** @deprecated use `ApplicationOneModeSwarm$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneModeSwarm$outboundSchema;
  /** @deprecated use `ApplicationOneModeSwarm$Outbound` instead. */
  export type Outbound = ApplicationOneModeSwarm$Outbound;
}

export function applicationOneModeSwarmToJSON(
  applicationOneModeSwarm: ApplicationOneModeSwarm,
): string {
  return JSON.stringify(
    ApplicationOneModeSwarm$outboundSchema.parse(applicationOneModeSwarm),
  );
}

export function applicationOneModeSwarmFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneModeSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneModeSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneModeSwarm' from JSON`,
  );
}

/** @internal */
export const ApplicationOneDriverOpts$inboundSchema: z.ZodType<
  ApplicationOneDriverOpts,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ApplicationOneDriverOpts$Outbound = {};

/** @internal */
export const ApplicationOneDriverOpts$outboundSchema: z.ZodType<
  ApplicationOneDriverOpts$Outbound,
  z.ZodTypeDef,
  ApplicationOneDriverOpts
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneDriverOpts$ {
  /** @deprecated use `ApplicationOneDriverOpts$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneDriverOpts$inboundSchema;
  /** @deprecated use `ApplicationOneDriverOpts$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneDriverOpts$outboundSchema;
  /** @deprecated use `ApplicationOneDriverOpts$Outbound` instead. */
  export type Outbound = ApplicationOneDriverOpts$Outbound;
}

export function applicationOneDriverOptsToJSON(
  applicationOneDriverOpts: ApplicationOneDriverOpts,
): string {
  return JSON.stringify(
    ApplicationOneDriverOpts$outboundSchema.parse(applicationOneDriverOpts),
  );
}

export function applicationOneDriverOptsFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneDriverOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneDriverOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneDriverOpts' from JSON`,
  );
}

/** @internal */
export const ApplicationOneNetworkSwarm$inboundSchema: z.ZodType<
  ApplicationOneNetworkSwarm,
  z.ZodTypeDef,
  unknown
> = z.object({
  Target: z.string().optional(),
  Aliases: z.array(z.string()).optional(),
  DriverOpts: z.lazy(() => ApplicationOneDriverOpts$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Target": "target",
    "Aliases": "aliases",
    "DriverOpts": "driverOpts",
  });
});

/** @internal */
export type ApplicationOneNetworkSwarm$Outbound = {
  Target?: string | undefined;
  Aliases?: Array<string> | undefined;
  DriverOpts?: ApplicationOneDriverOpts$Outbound | undefined;
};

/** @internal */
export const ApplicationOneNetworkSwarm$outboundSchema: z.ZodType<
  ApplicationOneNetworkSwarm$Outbound,
  z.ZodTypeDef,
  ApplicationOneNetworkSwarm
> = z.object({
  target: z.string().optional(),
  aliases: z.array(z.string()).optional(),
  driverOpts: z.lazy(() => ApplicationOneDriverOpts$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    target: "Target",
    aliases: "Aliases",
    driverOpts: "DriverOpts",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneNetworkSwarm$ {
  /** @deprecated use `ApplicationOneNetworkSwarm$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneNetworkSwarm$inboundSchema;
  /** @deprecated use `ApplicationOneNetworkSwarm$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneNetworkSwarm$outboundSchema;
  /** @deprecated use `ApplicationOneNetworkSwarm$Outbound` instead. */
  export type Outbound = ApplicationOneNetworkSwarm$Outbound;
}

export function applicationOneNetworkSwarmToJSON(
  applicationOneNetworkSwarm: ApplicationOneNetworkSwarm,
): string {
  return JSON.stringify(
    ApplicationOneNetworkSwarm$outboundSchema.parse(applicationOneNetworkSwarm),
  );
}

export function applicationOneNetworkSwarmFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneNetworkSwarm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneNetworkSwarm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneNetworkSwarm' from JSON`,
  );
}

/** @internal */
export const ApplicationOneApplicationStatus$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationOneApplicationStatus
> = z.nativeEnum(ApplicationOneApplicationStatus);

/** @internal */
export const ApplicationOneApplicationStatus$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationOneApplicationStatus
> = ApplicationOneApplicationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneApplicationStatus$ {
  /** @deprecated use `ApplicationOneApplicationStatus$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneApplicationStatus$inboundSchema;
  /** @deprecated use `ApplicationOneApplicationStatus$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneApplicationStatus$outboundSchema;
}

/** @internal */
export const ApplicationOneBuildType$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationOneBuildType
> = z.nativeEnum(ApplicationOneBuildType);

/** @internal */
export const ApplicationOneBuildType$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationOneBuildType
> = ApplicationOneBuildType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneBuildType$ {
  /** @deprecated use `ApplicationOneBuildType$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneBuildType$inboundSchema;
  /** @deprecated use `ApplicationOneBuildType$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneBuildType$outboundSchema;
}

/** @internal */
export const ApplicationOneProject$inboundSchema: z.ZodType<
  ApplicationOneProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  organizationId: z.string(),
  env: z.string(),
});

/** @internal */
export type ApplicationOneProject$Outbound = {
  projectId: string;
  name: string;
  description: string | null;
  createdAt: string;
  organizationId: string;
  env: string;
};

/** @internal */
export const ApplicationOneProject$outboundSchema: z.ZodType<
  ApplicationOneProject$Outbound,
  z.ZodTypeDef,
  ApplicationOneProject
> = z.object({
  projectId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  organizationId: z.string(),
  env: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneProject$ {
  /** @deprecated use `ApplicationOneProject$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneProject$inboundSchema;
  /** @deprecated use `ApplicationOneProject$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneProject$outboundSchema;
  /** @deprecated use `ApplicationOneProject$Outbound` instead. */
  export type Outbound = ApplicationOneProject$Outbound;
}

export function applicationOneProjectToJSON(
  applicationOneProject: ApplicationOneProject,
): string {
  return JSON.stringify(
    ApplicationOneProject$outboundSchema.parse(applicationOneProject),
  );
}

export function applicationOneProjectFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneProject' from JSON`,
  );
}

/** @internal */
export const ApplicationOneEnvironment$inboundSchema: z.ZodType<
  ApplicationOneEnvironment,
  z.ZodTypeDef,
  unknown
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
  project: z.lazy(() => ApplicationOneProject$inboundSchema),
});

/** @internal */
export type ApplicationOneEnvironment$Outbound = {
  environmentId: string;
  name: string;
  description: string | null;
  createdAt: string;
  env: string;
  projectId: string;
  project: ApplicationOneProject$Outbound;
};

/** @internal */
export const ApplicationOneEnvironment$outboundSchema: z.ZodType<
  ApplicationOneEnvironment$Outbound,
  z.ZodTypeDef,
  ApplicationOneEnvironment
> = z.object({
  environmentId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  createdAt: z.string(),
  env: z.string(),
  projectId: z.string(),
  project: z.lazy(() => ApplicationOneProject$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneEnvironment$ {
  /** @deprecated use `ApplicationOneEnvironment$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneEnvironment$inboundSchema;
  /** @deprecated use `ApplicationOneEnvironment$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneEnvironment$outboundSchema;
  /** @deprecated use `ApplicationOneEnvironment$Outbound` instead. */
  export type Outbound = ApplicationOneEnvironment$Outbound;
}

export function applicationOneEnvironmentToJSON(
  applicationOneEnvironment: ApplicationOneEnvironment,
): string {
  return JSON.stringify(
    ApplicationOneEnvironment$outboundSchema.parse(applicationOneEnvironment),
  );
}

export function applicationOneEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneEnvironment' from JSON`,
  );
}

/** @internal */
export const ApplicationOneDomainType$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationOneDomainType
> = z.nativeEnum(ApplicationOneDomainType);

/** @internal */
export const ApplicationOneDomainType$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationOneDomainType
> = ApplicationOneDomainType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneDomainType$ {
  /** @deprecated use `ApplicationOneDomainType$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneDomainType$inboundSchema;
  /** @deprecated use `ApplicationOneDomainType$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneDomainType$outboundSchema;
}

/** @internal */
export const ApplicationOneCertificateType$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationOneCertificateType
> = z.nativeEnum(ApplicationOneCertificateType);

/** @internal */
export const ApplicationOneCertificateType$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationOneCertificateType
> = ApplicationOneCertificateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneCertificateType$ {
  /** @deprecated use `ApplicationOneCertificateType$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneCertificateType$inboundSchema;
  /** @deprecated use `ApplicationOneCertificateType$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneCertificateType$outboundSchema;
}

/** @internal */
export const ApplicationOneDomain$inboundSchema: z.ZodType<
  ApplicationOneDomain,
  z.ZodTypeDef,
  unknown
> = z.object({
  domainId: z.string(),
  host: z.string(),
  https: z.boolean(),
  port: z.nullable(z.number()),
  path: z.nullable(z.string()),
  serviceName: z.nullable(z.string()),
  domainType: z.nullable(ApplicationOneDomainType$inboundSchema),
  uniqueConfigKey: z.number(),
  createdAt: z.string(),
  composeId: z.nullable(z.string()),
  customCertResolver: z.nullable(z.string()),
  applicationId: z.nullable(z.string()),
  previewDeploymentId: z.nullable(z.string()),
  certificateType: ApplicationOneCertificateType$inboundSchema,
  internalPath: z.nullable(z.string()),
  stripPath: z.boolean(),
});

/** @internal */
export type ApplicationOneDomain$Outbound = {
  domainId: string;
  host: string;
  https: boolean;
  port: number | null;
  path: string | null;
  serviceName: string | null;
  domainType: string | null;
  uniqueConfigKey: number;
  createdAt: string;
  composeId: string | null;
  customCertResolver: string | null;
  applicationId: string | null;
  previewDeploymentId: string | null;
  certificateType: string;
  internalPath: string | null;
  stripPath: boolean;
};

/** @internal */
export const ApplicationOneDomain$outboundSchema: z.ZodType<
  ApplicationOneDomain$Outbound,
  z.ZodTypeDef,
  ApplicationOneDomain
> = z.object({
  domainId: z.string(),
  host: z.string(),
  https: z.boolean(),
  port: z.nullable(z.number()),
  path: z.nullable(z.string()),
  serviceName: z.nullable(z.string()),
  domainType: z.nullable(ApplicationOneDomainType$outboundSchema),
  uniqueConfigKey: z.number(),
  createdAt: z.string(),
  composeId: z.nullable(z.string()),
  customCertResolver: z.nullable(z.string()),
  applicationId: z.nullable(z.string()),
  previewDeploymentId: z.nullable(z.string()),
  certificateType: ApplicationOneCertificateType$outboundSchema,
  internalPath: z.nullable(z.string()),
  stripPath: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneDomain$ {
  /** @deprecated use `ApplicationOneDomain$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneDomain$inboundSchema;
  /** @deprecated use `ApplicationOneDomain$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneDomain$outboundSchema;
  /** @deprecated use `ApplicationOneDomain$Outbound` instead. */
  export type Outbound = ApplicationOneDomain$Outbound;
}

export function applicationOneDomainToJSON(
  applicationOneDomain: ApplicationOneDomain,
): string {
  return JSON.stringify(
    ApplicationOneDomain$outboundSchema.parse(applicationOneDomain),
  );
}

export function applicationOneDomainFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneDomain, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneDomain$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneDomain' from JSON`,
  );
}

/** @internal */
export const ApplicationOneStatus$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationOneStatus
> = z.nativeEnum(ApplicationOneStatus);

/** @internal */
export const ApplicationOneStatus$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationOneStatus
> = ApplicationOneStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneStatus$ {
  /** @deprecated use `ApplicationOneStatus$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneStatus$inboundSchema;
  /** @deprecated use `ApplicationOneStatus$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneStatus$outboundSchema;
}

/** @internal */
export const ApplicationOneDeployment$inboundSchema: z.ZodType<
  ApplicationOneDeployment,
  z.ZodTypeDef,
  unknown
> = z.object({
  deploymentId: z.string(),
  title: z.string(),
  description: z.nullable(z.string()),
  status: z.nullable(ApplicationOneStatus$inboundSchema),
  logPath: z.string(),
  pid: z.nullable(z.string()),
  applicationId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  serverId: z.nullable(z.string()),
  isPreviewDeployment: z.nullable(z.boolean()),
  previewDeploymentId: z.nullable(z.string()),
  createdAt: z.string(),
  startedAt: z.nullable(z.string()),
  finishedAt: z.nullable(z.string()),
  errorMessage: z.nullable(z.string()),
  scheduleId: z.nullable(z.string()),
  backupId: z.nullable(z.string()),
  rollbackId: z.nullable(z.string()),
  volumeBackupId: z.nullable(z.string()),
});

/** @internal */
export type ApplicationOneDeployment$Outbound = {
  deploymentId: string;
  title: string;
  description: string | null;
  status: string | null;
  logPath: string;
  pid: string | null;
  applicationId: string | null;
  composeId: string | null;
  serverId: string | null;
  isPreviewDeployment: boolean | null;
  previewDeploymentId: string | null;
  createdAt: string;
  startedAt: string | null;
  finishedAt: string | null;
  errorMessage: string | null;
  scheduleId: string | null;
  backupId: string | null;
  rollbackId: string | null;
  volumeBackupId: string | null;
};

/** @internal */
export const ApplicationOneDeployment$outboundSchema: z.ZodType<
  ApplicationOneDeployment$Outbound,
  z.ZodTypeDef,
  ApplicationOneDeployment
> = z.object({
  deploymentId: z.string(),
  title: z.string(),
  description: z.nullable(z.string()),
  status: z.nullable(ApplicationOneStatus$outboundSchema),
  logPath: z.string(),
  pid: z.nullable(z.string()),
  applicationId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
  serverId: z.nullable(z.string()),
  isPreviewDeployment: z.nullable(z.boolean()),
  previewDeploymentId: z.nullable(z.string()),
  createdAt: z.string(),
  startedAt: z.nullable(z.string()),
  finishedAt: z.nullable(z.string()),
  errorMessage: z.nullable(z.string()),
  scheduleId: z.nullable(z.string()),
  backupId: z.nullable(z.string()),
  rollbackId: z.nullable(z.string()),
  volumeBackupId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneDeployment$ {
  /** @deprecated use `ApplicationOneDeployment$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneDeployment$inboundSchema;
  /** @deprecated use `ApplicationOneDeployment$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneDeployment$outboundSchema;
  /** @deprecated use `ApplicationOneDeployment$Outbound` instead. */
  export type Outbound = ApplicationOneDeployment$Outbound;
}

export function applicationOneDeploymentToJSON(
  applicationOneDeployment: ApplicationOneDeployment,
): string {
  return JSON.stringify(
    ApplicationOneDeployment$outboundSchema.parse(applicationOneDeployment),
  );
}

export function applicationOneDeploymentFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneDeployment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneDeployment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneDeployment' from JSON`,
  );
}

/** @internal */
export const ApplicationOneType$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationOneType
> = z.nativeEnum(ApplicationOneType);

/** @internal */
export const ApplicationOneType$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationOneType
> = ApplicationOneType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneType$ {
  /** @deprecated use `ApplicationOneType$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneType$inboundSchema;
  /** @deprecated use `ApplicationOneType$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneType$outboundSchema;
}

/** @internal */
export const ApplicationOneServiceType$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationOneServiceType
> = z.nativeEnum(ApplicationOneServiceType);

/** @internal */
export const ApplicationOneServiceType$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationOneServiceType
> = ApplicationOneServiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneServiceType$ {
  /** @deprecated use `ApplicationOneServiceType$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneServiceType$inboundSchema;
  /** @deprecated use `ApplicationOneServiceType$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneServiceType$outboundSchema;
}

/** @internal */
export const ApplicationOneMount$inboundSchema: z.ZodType<
  ApplicationOneMount,
  z.ZodTypeDef,
  unknown
> = z.object({
  mountId: z.string(),
  type: ApplicationOneType$inboundSchema,
  hostPath: z.nullable(z.string()),
  volumeName: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  content: z.nullable(z.string()),
  serviceType: ApplicationOneServiceType$inboundSchema,
  mountPath: z.string(),
  applicationId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
});

/** @internal */
export type ApplicationOneMount$Outbound = {
  mountId: string;
  type: string;
  hostPath: string | null;
  volumeName: string | null;
  filePath: string | null;
  content: string | null;
  serviceType: string;
  mountPath: string;
  applicationId: string | null;
  postgresId: string | null;
  mariadbId: string | null;
  mongoId: string | null;
  mysqlId: string | null;
  redisId: string | null;
  composeId: string | null;
};

/** @internal */
export const ApplicationOneMount$outboundSchema: z.ZodType<
  ApplicationOneMount$Outbound,
  z.ZodTypeDef,
  ApplicationOneMount
> = z.object({
  mountId: z.string(),
  type: ApplicationOneType$outboundSchema,
  hostPath: z.nullable(z.string()),
  volumeName: z.nullable(z.string()),
  filePath: z.nullable(z.string()),
  content: z.nullable(z.string()),
  serviceType: ApplicationOneServiceType$outboundSchema,
  mountPath: z.string(),
  applicationId: z.nullable(z.string()),
  postgresId: z.nullable(z.string()),
  mariadbId: z.nullable(z.string()),
  mongoId: z.nullable(z.string()),
  mysqlId: z.nullable(z.string()),
  redisId: z.nullable(z.string()),
  composeId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneMount$ {
  /** @deprecated use `ApplicationOneMount$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneMount$inboundSchema;
  /** @deprecated use `ApplicationOneMount$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneMount$outboundSchema;
  /** @deprecated use `ApplicationOneMount$Outbound` instead. */
  export type Outbound = ApplicationOneMount$Outbound;
}

export function applicationOneMountToJSON(
  applicationOneMount: ApplicationOneMount,
): string {
  return JSON.stringify(
    ApplicationOneMount$outboundSchema.parse(applicationOneMount),
  );
}

export function applicationOneMountFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneMount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneMount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneMount' from JSON`,
  );
}

/** @internal */
export const ApplicationOneRedirect$inboundSchema: z.ZodType<
  ApplicationOneRedirect,
  z.ZodTypeDef,
  unknown
> = z.object({
  redirectId: z.string(),
  regex: z.string(),
  replacement: z.string(),
  permanent: z.boolean(),
  uniqueConfigKey: z.number(),
  createdAt: z.string(),
  applicationId: z.string(),
});

/** @internal */
export type ApplicationOneRedirect$Outbound = {
  redirectId: string;
  regex: string;
  replacement: string;
  permanent: boolean;
  uniqueConfigKey: number;
  createdAt: string;
  applicationId: string;
};

/** @internal */
export const ApplicationOneRedirect$outboundSchema: z.ZodType<
  ApplicationOneRedirect$Outbound,
  z.ZodTypeDef,
  ApplicationOneRedirect
> = z.object({
  redirectId: z.string(),
  regex: z.string(),
  replacement: z.string(),
  permanent: z.boolean(),
  uniqueConfigKey: z.number(),
  createdAt: z.string(),
  applicationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneRedirect$ {
  /** @deprecated use `ApplicationOneRedirect$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneRedirect$inboundSchema;
  /** @deprecated use `ApplicationOneRedirect$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneRedirect$outboundSchema;
  /** @deprecated use `ApplicationOneRedirect$Outbound` instead. */
  export type Outbound = ApplicationOneRedirect$Outbound;
}

export function applicationOneRedirectToJSON(
  applicationOneRedirect: ApplicationOneRedirect,
): string {
  return JSON.stringify(
    ApplicationOneRedirect$outboundSchema.parse(applicationOneRedirect),
  );
}

export function applicationOneRedirectFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneRedirect, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneRedirect$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneRedirect' from JSON`,
  );
}

/** @internal */
export const ApplicationOneSecurityResponse$inboundSchema: z.ZodType<
  ApplicationOneSecurityResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  securityId: z.string(),
  username: z.string(),
  password: z.string(),
  createdAt: z.string(),
  applicationId: z.string(),
});

/** @internal */
export type ApplicationOneSecurityResponse$Outbound = {
  securityId: string;
  username: string;
  password: string;
  createdAt: string;
  applicationId: string;
};

/** @internal */
export const ApplicationOneSecurityResponse$outboundSchema: z.ZodType<
  ApplicationOneSecurityResponse$Outbound,
  z.ZodTypeDef,
  ApplicationOneSecurityResponse
> = z.object({
  securityId: z.string(),
  username: z.string(),
  password: z.string(),
  createdAt: z.string(),
  applicationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneSecurityResponse$ {
  /** @deprecated use `ApplicationOneSecurityResponse$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneSecurityResponse$inboundSchema;
  /** @deprecated use `ApplicationOneSecurityResponse$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneSecurityResponse$outboundSchema;
  /** @deprecated use `ApplicationOneSecurityResponse$Outbound` instead. */
  export type Outbound = ApplicationOneSecurityResponse$Outbound;
}

export function applicationOneSecurityResponseToJSON(
  applicationOneSecurityResponse: ApplicationOneSecurityResponse,
): string {
  return JSON.stringify(
    ApplicationOneSecurityResponse$outboundSchema.parse(
      applicationOneSecurityResponse,
    ),
  );
}

export function applicationOneSecurityResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneSecurityResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneSecurityResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneSecurityResponse' from JSON`,
  );
}

/** @internal */
export const ApplicationOnePublishMode$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationOnePublishMode
> = z.nativeEnum(ApplicationOnePublishMode);

/** @internal */
export const ApplicationOnePublishMode$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationOnePublishMode
> = ApplicationOnePublishMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOnePublishMode$ {
  /** @deprecated use `ApplicationOnePublishMode$inboundSchema` instead. */
  export const inboundSchema = ApplicationOnePublishMode$inboundSchema;
  /** @deprecated use `ApplicationOnePublishMode$outboundSchema` instead. */
  export const outboundSchema = ApplicationOnePublishMode$outboundSchema;
}

/** @internal */
export const ApplicationOneProtocol$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationOneProtocol
> = z.nativeEnum(ApplicationOneProtocol);

/** @internal */
export const ApplicationOneProtocol$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationOneProtocol
> = ApplicationOneProtocol$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneProtocol$ {
  /** @deprecated use `ApplicationOneProtocol$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneProtocol$inboundSchema;
  /** @deprecated use `ApplicationOneProtocol$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneProtocol$outboundSchema;
}

/** @internal */
export const ApplicationOnePort$inboundSchema: z.ZodType<
  ApplicationOnePort,
  z.ZodTypeDef,
  unknown
> = z.object({
  portId: z.string(),
  publishedPort: z.number(),
  publishMode: ApplicationOnePublishMode$inboundSchema,
  targetPort: z.number(),
  protocol: ApplicationOneProtocol$inboundSchema,
  applicationId: z.string(),
});

/** @internal */
export type ApplicationOnePort$Outbound = {
  portId: string;
  publishedPort: number;
  publishMode: string;
  targetPort: number;
  protocol: string;
  applicationId: string;
};

/** @internal */
export const ApplicationOnePort$outboundSchema: z.ZodType<
  ApplicationOnePort$Outbound,
  z.ZodTypeDef,
  ApplicationOnePort
> = z.object({
  portId: z.string(),
  publishedPort: z.number(),
  publishMode: ApplicationOnePublishMode$outboundSchema,
  targetPort: z.number(),
  protocol: ApplicationOneProtocol$outboundSchema,
  applicationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOnePort$ {
  /** @deprecated use `ApplicationOnePort$inboundSchema` instead. */
  export const inboundSchema = ApplicationOnePort$inboundSchema;
  /** @deprecated use `ApplicationOnePort$outboundSchema` instead. */
  export const outboundSchema = ApplicationOnePort$outboundSchema;
  /** @deprecated use `ApplicationOnePort$Outbound` instead. */
  export type Outbound = ApplicationOnePort$Outbound;
}

export function applicationOnePortToJSON(
  applicationOnePort: ApplicationOnePort,
): string {
  return JSON.stringify(
    ApplicationOnePort$outboundSchema.parse(applicationOnePort),
  );
}

export function applicationOnePortFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOnePort, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOnePort$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOnePort' from JSON`,
  );
}

/** @internal */
export const ApplicationOneRegistryType$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationOneRegistryType
> = z.nativeEnum(ApplicationOneRegistryType);

/** @internal */
export const ApplicationOneRegistryType$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationOneRegistryType
> = ApplicationOneRegistryType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneRegistryType$ {
  /** @deprecated use `ApplicationOneRegistryType$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneRegistryType$inboundSchema;
  /** @deprecated use `ApplicationOneRegistryType$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneRegistryType$outboundSchema;
}

/** @internal */
export const ApplicationOneRegistry$inboundSchema: z.ZodType<
  ApplicationOneRegistry,
  z.ZodTypeDef,
  unknown
> = z.object({
  registryId: z.string(),
  registryName: z.string(),
  imagePrefix: z.nullable(z.string()),
  username: z.string(),
  password: z.string(),
  registryUrl: z.string(),
  createdAt: z.string(),
  registryType: ApplicationOneRegistryType$inboundSchema,
  organizationId: z.string(),
});

/** @internal */
export type ApplicationOneRegistry$Outbound = {
  registryId: string;
  registryName: string;
  imagePrefix: string | null;
  username: string;
  password: string;
  registryUrl: string;
  createdAt: string;
  registryType: string;
  organizationId: string;
};

/** @internal */
export const ApplicationOneRegistry$outboundSchema: z.ZodType<
  ApplicationOneRegistry$Outbound,
  z.ZodTypeDef,
  ApplicationOneRegistry
> = z.object({
  registryId: z.string(),
  registryName: z.string(),
  imagePrefix: z.nullable(z.string()),
  username: z.string(),
  password: z.string(),
  registryUrl: z.string(),
  createdAt: z.string(),
  registryType: ApplicationOneRegistryType$outboundSchema,
  organizationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneRegistry$ {
  /** @deprecated use `ApplicationOneRegistry$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneRegistry$inboundSchema;
  /** @deprecated use `ApplicationOneRegistry$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneRegistry$outboundSchema;
  /** @deprecated use `ApplicationOneRegistry$Outbound` instead. */
  export type Outbound = ApplicationOneRegistry$Outbound;
}

export function applicationOneRegistryToJSON(
  applicationOneRegistry: ApplicationOneRegistry,
): string {
  return JSON.stringify(
    ApplicationOneRegistry$outboundSchema.parse(applicationOneRegistry),
  );
}

export function applicationOneRegistryFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneRegistry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneRegistry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneRegistry' from JSON`,
  );
}

/** @internal */
export const ApplicationOneGithub$inboundSchema: z.ZodType<
  ApplicationOneGithub,
  z.ZodTypeDef,
  unknown
> = z.object({
  githubId: z.string(),
  githubAppName: z.nullable(z.string()),
  githubAppId: z.nullable(z.number()),
  githubClientId: z.nullable(z.string()),
  githubClientSecret: z.nullable(z.string()),
  githubInstallationId: z.nullable(z.string()),
  githubPrivateKey: z.nullable(z.string()),
  githubWebhookSecret: z.nullable(z.string()),
  gitProviderId: z.string(),
});

/** @internal */
export type ApplicationOneGithub$Outbound = {
  githubId: string;
  githubAppName: string | null;
  githubAppId: number | null;
  githubClientId: string | null;
  githubClientSecret: string | null;
  githubInstallationId: string | null;
  githubPrivateKey: string | null;
  githubWebhookSecret: string | null;
  gitProviderId: string;
};

/** @internal */
export const ApplicationOneGithub$outboundSchema: z.ZodType<
  ApplicationOneGithub$Outbound,
  z.ZodTypeDef,
  ApplicationOneGithub
> = z.object({
  githubId: z.string(),
  githubAppName: z.nullable(z.string()),
  githubAppId: z.nullable(z.number()),
  githubClientId: z.nullable(z.string()),
  githubClientSecret: z.nullable(z.string()),
  githubInstallationId: z.nullable(z.string()),
  githubPrivateKey: z.nullable(z.string()),
  githubWebhookSecret: z.nullable(z.string()),
  gitProviderId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneGithub$ {
  /** @deprecated use `ApplicationOneGithub$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneGithub$inboundSchema;
  /** @deprecated use `ApplicationOneGithub$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneGithub$outboundSchema;
  /** @deprecated use `ApplicationOneGithub$Outbound` instead. */
  export type Outbound = ApplicationOneGithub$Outbound;
}

export function applicationOneGithubToJSON(
  applicationOneGithub: ApplicationOneGithub,
): string {
  return JSON.stringify(
    ApplicationOneGithub$outboundSchema.parse(applicationOneGithub),
  );
}

export function applicationOneGithubFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneGithub, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneGithub$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneGithub' from JSON`,
  );
}

/** @internal */
export const ApplicationOneGitlab$inboundSchema: z.ZodType<
  ApplicationOneGitlab,
  z.ZodTypeDef,
  unknown
> = z.object({
  gitlabId: z.string(),
  gitlabUrl: z.string(),
  applicationId: z.nullable(z.string()),
  redirectUri: z.nullable(z.string()),
  secret: z.nullable(z.string()),
  accessToken: z.nullable(z.string()),
  refreshToken: z.nullable(z.string()),
  groupName: z.nullable(z.string()),
  expiresAt: z.nullable(z.number()),
  gitProviderId: z.string(),
});

/** @internal */
export type ApplicationOneGitlab$Outbound = {
  gitlabId: string;
  gitlabUrl: string;
  applicationId: string | null;
  redirectUri: string | null;
  secret: string | null;
  accessToken: string | null;
  refreshToken: string | null;
  groupName: string | null;
  expiresAt: number | null;
  gitProviderId: string;
};

/** @internal */
export const ApplicationOneGitlab$outboundSchema: z.ZodType<
  ApplicationOneGitlab$Outbound,
  z.ZodTypeDef,
  ApplicationOneGitlab
> = z.object({
  gitlabId: z.string(),
  gitlabUrl: z.string(),
  applicationId: z.nullable(z.string()),
  redirectUri: z.nullable(z.string()),
  secret: z.nullable(z.string()),
  accessToken: z.nullable(z.string()),
  refreshToken: z.nullable(z.string()),
  groupName: z.nullable(z.string()),
  expiresAt: z.nullable(z.number()),
  gitProviderId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneGitlab$ {
  /** @deprecated use `ApplicationOneGitlab$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneGitlab$inboundSchema;
  /** @deprecated use `ApplicationOneGitlab$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneGitlab$outboundSchema;
  /** @deprecated use `ApplicationOneGitlab$Outbound` instead. */
  export type Outbound = ApplicationOneGitlab$Outbound;
}

export function applicationOneGitlabToJSON(
  applicationOneGitlab: ApplicationOneGitlab,
): string {
  return JSON.stringify(
    ApplicationOneGitlab$outboundSchema.parse(applicationOneGitlab),
  );
}

export function applicationOneGitlabFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneGitlab, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneGitlab$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneGitlab' from JSON`,
  );
}

/** @internal */
export const ApplicationOneBitbucket$inboundSchema: z.ZodType<
  ApplicationOneBitbucket,
  z.ZodTypeDef,
  unknown
> = z.object({
  bitbucketId: z.string(),
  bitbucketUsername: z.nullable(z.string()),
  appPassword: z.nullable(z.string()),
  bitbucketWorkspaceName: z.nullable(z.string()),
  gitProviderId: z.string(),
});

/** @internal */
export type ApplicationOneBitbucket$Outbound = {
  bitbucketId: string;
  bitbucketUsername: string | null;
  appPassword: string | null;
  bitbucketWorkspaceName: string | null;
  gitProviderId: string;
};

/** @internal */
export const ApplicationOneBitbucket$outboundSchema: z.ZodType<
  ApplicationOneBitbucket$Outbound,
  z.ZodTypeDef,
  ApplicationOneBitbucket
> = z.object({
  bitbucketId: z.string(),
  bitbucketUsername: z.nullable(z.string()),
  appPassword: z.nullable(z.string()),
  bitbucketWorkspaceName: z.nullable(z.string()),
  gitProviderId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneBitbucket$ {
  /** @deprecated use `ApplicationOneBitbucket$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneBitbucket$inboundSchema;
  /** @deprecated use `ApplicationOneBitbucket$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneBitbucket$outboundSchema;
  /** @deprecated use `ApplicationOneBitbucket$Outbound` instead. */
  export type Outbound = ApplicationOneBitbucket$Outbound;
}

export function applicationOneBitbucketToJSON(
  applicationOneBitbucket: ApplicationOneBitbucket,
): string {
  return JSON.stringify(
    ApplicationOneBitbucket$outboundSchema.parse(applicationOneBitbucket),
  );
}

export function applicationOneBitbucketFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneBitbucket, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneBitbucket$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneBitbucket' from JSON`,
  );
}

/** @internal */
export const ApplicationOneGitea$inboundSchema: z.ZodType<
  ApplicationOneGitea,
  z.ZodTypeDef,
  unknown
> = z.object({
  giteaId: z.string(),
  giteaUrl: z.string(),
  redirectUri: z.nullable(z.string()),
  clientId: z.nullable(z.string()),
  clientSecret: z.nullable(z.string()),
  gitProviderId: z.string(),
  accessToken: z.nullable(z.string()),
  refreshToken: z.nullable(z.string()),
  expiresAt: z.nullable(z.number()),
  scopes: z.nullable(z.string()),
  lastAuthenticatedAt: z.nullable(z.number()),
});

/** @internal */
export type ApplicationOneGitea$Outbound = {
  giteaId: string;
  giteaUrl: string;
  redirectUri: string | null;
  clientId: string | null;
  clientSecret: string | null;
  gitProviderId: string;
  accessToken: string | null;
  refreshToken: string | null;
  expiresAt: number | null;
  scopes: string | null;
  lastAuthenticatedAt: number | null;
};

/** @internal */
export const ApplicationOneGitea$outboundSchema: z.ZodType<
  ApplicationOneGitea$Outbound,
  z.ZodTypeDef,
  ApplicationOneGitea
> = z.object({
  giteaId: z.string(),
  giteaUrl: z.string(),
  redirectUri: z.nullable(z.string()),
  clientId: z.nullable(z.string()),
  clientSecret: z.nullable(z.string()),
  gitProviderId: z.string(),
  accessToken: z.nullable(z.string()),
  refreshToken: z.nullable(z.string()),
  expiresAt: z.nullable(z.number()),
  scopes: z.nullable(z.string()),
  lastAuthenticatedAt: z.nullable(z.number()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneGitea$ {
  /** @deprecated use `ApplicationOneGitea$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneGitea$inboundSchema;
  /** @deprecated use `ApplicationOneGitea$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneGitea$outboundSchema;
  /** @deprecated use `ApplicationOneGitea$Outbound` instead. */
  export type Outbound = ApplicationOneGitea$Outbound;
}

export function applicationOneGiteaToJSON(
  applicationOneGitea: ApplicationOneGitea,
): string {
  return JSON.stringify(
    ApplicationOneGitea$outboundSchema.parse(applicationOneGitea),
  );
}

export function applicationOneGiteaFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneGitea, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneGitea$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneGitea' from JSON`,
  );
}

/** @internal */
export const ApplicationOneServerStatus$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationOneServerStatus
> = z.nativeEnum(ApplicationOneServerStatus);

/** @internal */
export const ApplicationOneServerStatus$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationOneServerStatus
> = ApplicationOneServerStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneServerStatus$ {
  /** @deprecated use `ApplicationOneServerStatus$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneServerStatus$inboundSchema;
  /** @deprecated use `ApplicationOneServerStatus$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneServerStatus$outboundSchema;
}

/** @internal */
export const ApplicationOneMetricsConfigEnum$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationOneMetricsConfigEnum
> = z.nativeEnum(ApplicationOneMetricsConfigEnum);

/** @internal */
export const ApplicationOneMetricsConfigEnum$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationOneMetricsConfigEnum
> = ApplicationOneMetricsConfigEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneMetricsConfigEnum$ {
  /** @deprecated use `ApplicationOneMetricsConfigEnum$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneMetricsConfigEnum$inboundSchema;
  /** @deprecated use `ApplicationOneMetricsConfigEnum$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneMetricsConfigEnum$outboundSchema;
}

/** @internal */
export const ApplicationOneMetricsConfigUnion1$inboundSchema: z.ZodType<
  ApplicationOneMetricsConfigUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  ApplicationOneMetricsConfigEnum$inboundSchema,
]);

/** @internal */
export type ApplicationOneMetricsConfigUnion1$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const ApplicationOneMetricsConfigUnion1$outboundSchema: z.ZodType<
  ApplicationOneMetricsConfigUnion1$Outbound,
  z.ZodTypeDef,
  ApplicationOneMetricsConfigUnion1
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  ApplicationOneMetricsConfigEnum$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneMetricsConfigUnion1$ {
  /** @deprecated use `ApplicationOneMetricsConfigUnion1$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneMetricsConfigUnion1$inboundSchema;
  /** @deprecated use `ApplicationOneMetricsConfigUnion1$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationOneMetricsConfigUnion1$outboundSchema;
  /** @deprecated use `ApplicationOneMetricsConfigUnion1$Outbound` instead. */
  export type Outbound = ApplicationOneMetricsConfigUnion1$Outbound;
}

export function applicationOneMetricsConfigUnion1ToJSON(
  applicationOneMetricsConfigUnion1: ApplicationOneMetricsConfigUnion1,
): string {
  return JSON.stringify(
    ApplicationOneMetricsConfigUnion1$outboundSchema.parse(
      applicationOneMetricsConfigUnion1,
    ),
  );
}

export function applicationOneMetricsConfigUnion1FromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneMetricsConfigUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneMetricsConfigUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneMetricsConfigUnion1' from JSON`,
  );
}

/** @internal */
export const ApplicationOneMetricsConfigUnion2$inboundSchema: z.ZodType<
  ApplicationOneMetricsConfigUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    ApplicationOneMetricsConfigEnum$inboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/** @internal */
export type ApplicationOneMetricsConfigUnion2$Outbound =
  | string
  | number
  | boolean
  | string
  | Array<any>
  | { [k: string]: any };

/** @internal */
export const ApplicationOneMetricsConfigUnion2$outboundSchema: z.ZodType<
  ApplicationOneMetricsConfigUnion2$Outbound,
  z.ZodTypeDef,
  ApplicationOneMetricsConfigUnion2
> = z.union([
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    ApplicationOneMetricsConfigEnum$outboundSchema,
  ]),
  z.array(z.any()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneMetricsConfigUnion2$ {
  /** @deprecated use `ApplicationOneMetricsConfigUnion2$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneMetricsConfigUnion2$inboundSchema;
  /** @deprecated use `ApplicationOneMetricsConfigUnion2$outboundSchema` instead. */
  export const outboundSchema =
    ApplicationOneMetricsConfigUnion2$outboundSchema;
  /** @deprecated use `ApplicationOneMetricsConfigUnion2$Outbound` instead. */
  export type Outbound = ApplicationOneMetricsConfigUnion2$Outbound;
}

export function applicationOneMetricsConfigUnion2ToJSON(
  applicationOneMetricsConfigUnion2: ApplicationOneMetricsConfigUnion2,
): string {
  return JSON.stringify(
    ApplicationOneMetricsConfigUnion2$outboundSchema.parse(
      applicationOneMetricsConfigUnion2,
    ),
  );
}

export function applicationOneMetricsConfigUnion2FromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneMetricsConfigUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneMetricsConfigUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneMetricsConfigUnion2' from JSON`,
  );
}

/** @internal */
export const ApplicationOneServer$inboundSchema: z.ZodType<
  ApplicationOneServer,
  z.ZodTypeDef,
  unknown
> = z.object({
  serverId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  ipAddress: z.string(),
  port: z.number(),
  username: z.string(),
  appName: z.string(),
  enableDockerCleanup: z.boolean(),
  createdAt: z.string(),
  organizationId: z.string(),
  serverStatus: ApplicationOneServerStatus$inboundSchema,
  command: z.string(),
  sshKeyId: z.nullable(z.string()),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      ApplicationOneMetricsConfigEnum$inboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
});

/** @internal */
export type ApplicationOneServer$Outbound = {
  serverId: string;
  name: string;
  description: string | null;
  ipAddress: string;
  port: number;
  username: string;
  appName: string;
  enableDockerCleanup: boolean;
  createdAt: string;
  organizationId: string;
  serverStatus: string;
  command: string;
  sshKeyId: string | null;
  metricsConfig: string | number | boolean | string | Array<any> | {
    [k: string]: any;
  };
};

/** @internal */
export const ApplicationOneServer$outboundSchema: z.ZodType<
  ApplicationOneServer$Outbound,
  z.ZodTypeDef,
  ApplicationOneServer
> = z.object({
  serverId: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  ipAddress: z.string(),
  port: z.number(),
  username: z.string(),
  appName: z.string(),
  enableDockerCleanup: z.boolean(),
  createdAt: z.string(),
  organizationId: z.string(),
  serverStatus: ApplicationOneServerStatus$outboundSchema,
  command: z.string(),
  sshKeyId: z.nullable(z.string()),
  metricsConfig: z.union([
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      ApplicationOneMetricsConfigEnum$outboundSchema,
    ]),
    z.array(z.any()),
    z.record(z.any()),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneServer$ {
  /** @deprecated use `ApplicationOneServer$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneServer$inboundSchema;
  /** @deprecated use `ApplicationOneServer$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneServer$outboundSchema;
  /** @deprecated use `ApplicationOneServer$Outbound` instead. */
  export type Outbound = ApplicationOneServer$Outbound;
}

export function applicationOneServerToJSON(
  applicationOneServer: ApplicationOneServer,
): string {
  return JSON.stringify(
    ApplicationOneServer$outboundSchema.parse(applicationOneServer),
  );
}

export function applicationOneServerFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneServer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneServer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneServer' from JSON`,
  );
}

/** @internal */
export const ApplicationOnePreviewStatus$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationOnePreviewStatus
> = z.nativeEnum(ApplicationOnePreviewStatus);

/** @internal */
export const ApplicationOnePreviewStatus$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationOnePreviewStatus
> = ApplicationOnePreviewStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOnePreviewStatus$ {
  /** @deprecated use `ApplicationOnePreviewStatus$inboundSchema` instead. */
  export const inboundSchema = ApplicationOnePreviewStatus$inboundSchema;
  /** @deprecated use `ApplicationOnePreviewStatus$outboundSchema` instead. */
  export const outboundSchema = ApplicationOnePreviewStatus$outboundSchema;
}

/** @internal */
export const ApplicationOnePreviewDeployment$inboundSchema: z.ZodType<
  ApplicationOnePreviewDeployment,
  z.ZodTypeDef,
  unknown
> = z.object({
  previewDeploymentId: z.string(),
  branch: z.string(),
  pullRequestId: z.string(),
  pullRequestNumber: z.string(),
  pullRequestURL: z.string(),
  pullRequestTitle: z.string(),
  pullRequestCommentId: z.string(),
  previewStatus: ApplicationOnePreviewStatus$inboundSchema,
  appName: z.string(),
  applicationId: z.string(),
  domainId: z.nullable(z.string()),
  createdAt: z.string(),
  expiresAt: z.nullable(z.string()),
});

/** @internal */
export type ApplicationOnePreviewDeployment$Outbound = {
  previewDeploymentId: string;
  branch: string;
  pullRequestId: string;
  pullRequestNumber: string;
  pullRequestURL: string;
  pullRequestTitle: string;
  pullRequestCommentId: string;
  previewStatus: string;
  appName: string;
  applicationId: string;
  domainId: string | null;
  createdAt: string;
  expiresAt: string | null;
};

/** @internal */
export const ApplicationOnePreviewDeployment$outboundSchema: z.ZodType<
  ApplicationOnePreviewDeployment$Outbound,
  z.ZodTypeDef,
  ApplicationOnePreviewDeployment
> = z.object({
  previewDeploymentId: z.string(),
  branch: z.string(),
  pullRequestId: z.string(),
  pullRequestNumber: z.string(),
  pullRequestURL: z.string(),
  pullRequestTitle: z.string(),
  pullRequestCommentId: z.string(),
  previewStatus: ApplicationOnePreviewStatus$outboundSchema,
  appName: z.string(),
  applicationId: z.string(),
  domainId: z.nullable(z.string()),
  createdAt: z.string(),
  expiresAt: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOnePreviewDeployment$ {
  /** @deprecated use `ApplicationOnePreviewDeployment$inboundSchema` instead. */
  export const inboundSchema = ApplicationOnePreviewDeployment$inboundSchema;
  /** @deprecated use `ApplicationOnePreviewDeployment$outboundSchema` instead. */
  export const outboundSchema = ApplicationOnePreviewDeployment$outboundSchema;
  /** @deprecated use `ApplicationOnePreviewDeployment$Outbound` instead. */
  export type Outbound = ApplicationOnePreviewDeployment$Outbound;
}

export function applicationOnePreviewDeploymentToJSON(
  applicationOnePreviewDeployment: ApplicationOnePreviewDeployment,
): string {
  return JSON.stringify(
    ApplicationOnePreviewDeployment$outboundSchema.parse(
      applicationOnePreviewDeployment,
    ),
  );
}

export function applicationOnePreviewDeploymentFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOnePreviewDeployment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOnePreviewDeployment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOnePreviewDeployment' from JSON`,
  );
}

/** @internal */
export const UnauthorizedProvider$inboundSchema: z.ZodNativeEnum<
  typeof UnauthorizedProvider
> = z.nativeEnum(UnauthorizedProvider);

/** @internal */
export const UnauthorizedProvider$outboundSchema: z.ZodNativeEnum<
  typeof UnauthorizedProvider
> = UnauthorizedProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnauthorizedProvider$ {
  /** @deprecated use `UnauthorizedProvider$inboundSchema` instead. */
  export const inboundSchema = UnauthorizedProvider$inboundSchema;
  /** @deprecated use `UnauthorizedProvider$outboundSchema` instead. */
  export const outboundSchema = UnauthorizedProvider$outboundSchema;
}

/** @internal */
export const ApplicationOneResponseBody$inboundSchema: z.ZodType<
  ApplicationOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string().optional(),
  name: z.string(),
  appName: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  env: z.nullable(z.string()).optional(),
  previewEnv: z.nullable(z.string()).optional(),
  watchPaths: z.nullable(z.array(z.string())).optional(),
  previewBuildArgs: z.nullable(z.string()).optional(),
  previewLabels: z.nullable(z.array(z.string())).optional(),
  previewWildcard: z.nullable(z.string()).optional(),
  previewPort: z.nullable(z.number()).optional(),
  previewHttps: z.boolean().optional(),
  previewPath: z.nullable(z.string()).optional(),
  previewCertificateType: ApplicationOnePreviewCertificateType$inboundSchema
    .optional(),
  previewCustomCertResolver: z.nullable(z.string()).optional(),
  previewLimit: z.nullable(z.number()).optional(),
  isPreviewDeploymentsActive: z.nullable(z.boolean()).optional(),
  previewRequireCollaboratorPermissions: z.nullable(z.boolean()).optional(),
  rollbackActive: z.nullable(z.boolean()).optional(),
  buildArgs: z.nullable(z.string()).optional(),
  memoryReservation: z.nullable(z.string()).optional(),
  memoryLimit: z.nullable(z.string()).optional(),
  cpuReservation: z.nullable(z.string()).optional(),
  cpuLimit: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  enabled: z.nullable(z.boolean()).optional(),
  subtitle: z.nullable(z.string()).optional(),
  command: z.nullable(z.string()).optional(),
  refreshToken: z.nullable(z.string()).optional(),
  sourceType: ApplicationOneSourceType$inboundSchema.optional(),
  cleanCache: z.nullable(z.boolean()).optional(),
  repository: z.nullable(z.string()).optional(),
  owner: z.nullable(z.string()).optional(),
  branch: z.nullable(z.string()).optional(),
  buildPath: z.nullable(z.string()).optional(),
  triggerType: z.nullable(ApplicationOneTriggerType$inboundSchema).optional(),
  autoDeploy: z.nullable(z.boolean()).optional(),
  gitlabProjectId: z.nullable(z.number()).optional(),
  gitlabRepository: z.nullable(z.string()).optional(),
  gitlabOwner: z.nullable(z.string()).optional(),
  gitlabBranch: z.nullable(z.string()).optional(),
  gitlabBuildPath: z.nullable(z.string()).optional(),
  gitlabPathNamespace: z.nullable(z.string()).optional(),
  giteaRepository: z.nullable(z.string()).optional(),
  giteaOwner: z.nullable(z.string()).optional(),
  giteaBranch: z.nullable(z.string()).optional(),
  giteaBuildPath: z.nullable(z.string()).optional(),
  bitbucketRepository: z.nullable(z.string()).optional(),
  bitbucketOwner: z.nullable(z.string()).optional(),
  bitbucketBranch: z.nullable(z.string()).optional(),
  bitbucketBuildPath: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  dockerImage: z.nullable(z.string()).optional(),
  registryUrl: z.nullable(z.string()).optional(),
  customGitUrl: z.nullable(z.string()).optional(),
  customGitBranch: z.nullable(z.string()).optional(),
  customGitBuildPath: z.nullable(z.string()).optional(),
  customGitSSHKeyId: z.nullable(z.string()).optional(),
  enableSubmodules: z.boolean().optional(),
  dockerfile: z.nullable(z.string()).optional(),
  dockerContextPath: z.nullable(z.string()).optional(),
  dockerBuildStage: z.nullable(z.string()).optional(),
  dropBuildPath: z.nullable(z.string()).optional(),
  healthCheckSwarm: z.nullable(
    z.lazy(() => ApplicationOneHealthCheckSwarm$inboundSchema),
  ).optional(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => ApplicationOneRestartPolicySwarm$inboundSchema),
  ).optional(),
  placementSwarm: z.nullable(
    z.lazy(() => ApplicationOnePlacementSwarm$inboundSchema),
  ).optional(),
  updateConfigSwarm: z.nullable(
    z.lazy(() => ApplicationOneUpdateConfigSwarm$inboundSchema),
  ).optional(),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => ApplicationOneRollbackConfigSwarm$inboundSchema),
  ).optional(),
  modeSwarm: z.nullable(z.lazy(() => ApplicationOneModeSwarm$inboundSchema))
    .optional(),
  labelsSwarm: z.nullable(z.record(z.string())).optional(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => ApplicationOneNetworkSwarm$inboundSchema)),
  ).optional(),
  replicas: z.number().optional(),
  applicationStatus: ApplicationOneApplicationStatus$inboundSchema.optional(),
  buildType: ApplicationOneBuildType$inboundSchema.optional(),
  railpackVersion: z.nullable(z.string()).optional(),
  herokuVersion: z.nullable(z.string()).optional(),
  publishDirectory: z.nullable(z.string()).optional(),
  isStaticSpa: z.nullable(z.boolean()).optional(),
  createdAt: z.string().optional(),
  registryId: z.nullable(z.string()).optional(),
  environmentId: z.string(),
  githubId: z.nullable(z.string()).optional(),
  gitlabId: z.nullable(z.string()).optional(),
  giteaId: z.nullable(z.string()).optional(),
  bitbucketId: z.nullable(z.string()).optional(),
  serverId: z.nullable(z.string()).optional(),
  environment: z.lazy(() => ApplicationOneEnvironment$inboundSchema),
  domains: z.array(z.lazy(() => ApplicationOneDomain$inboundSchema)),
  deployments: z.array(z.lazy(() => ApplicationOneDeployment$inboundSchema)),
  mounts: z.array(z.lazy(() => ApplicationOneMount$inboundSchema)),
  redirects: z.array(z.lazy(() => ApplicationOneRedirect$inboundSchema)),
  security: z.array(z.lazy(() => ApplicationOneSecurityResponse$inboundSchema)),
  ports: z.array(z.lazy(() => ApplicationOnePort$inboundSchema)),
  registry: z.nullable(z.lazy(() => ApplicationOneRegistry$inboundSchema)),
  github: z.nullable(z.lazy(() => ApplicationOneGithub$inboundSchema)),
  gitlab: z.nullable(z.lazy(() => ApplicationOneGitlab$inboundSchema)),
  bitbucket: z.nullable(z.lazy(() => ApplicationOneBitbucket$inboundSchema)),
  gitea: z.nullable(z.lazy(() => ApplicationOneGitea$inboundSchema)),
  server: z.nullable(z.lazy(() => ApplicationOneServer$inboundSchema)),
  previewDeployments: z.array(
    z.lazy(() => ApplicationOnePreviewDeployment$inboundSchema),
  ),
  hasGitProviderAccess: z.boolean(),
  unauthorizedProvider: z.nullable(UnauthorizedProvider$inboundSchema),
});

/** @internal */
export type ApplicationOneResponseBody$Outbound = {
  applicationId?: string | undefined;
  name: string;
  appName?: string | undefined;
  description?: string | null | undefined;
  env?: string | null | undefined;
  previewEnv?: string | null | undefined;
  watchPaths?: Array<string> | null | undefined;
  previewBuildArgs?: string | null | undefined;
  previewLabels?: Array<string> | null | undefined;
  previewWildcard?: string | null | undefined;
  previewPort?: number | null | undefined;
  previewHttps?: boolean | undefined;
  previewPath?: string | null | undefined;
  previewCertificateType?: string | undefined;
  previewCustomCertResolver?: string | null | undefined;
  previewLimit?: number | null | undefined;
  isPreviewDeploymentsActive?: boolean | null | undefined;
  previewRequireCollaboratorPermissions?: boolean | null | undefined;
  rollbackActive?: boolean | null | undefined;
  buildArgs?: string | null | undefined;
  memoryReservation?: string | null | undefined;
  memoryLimit?: string | null | undefined;
  cpuReservation?: string | null | undefined;
  cpuLimit?: string | null | undefined;
  title?: string | null | undefined;
  enabled?: boolean | null | undefined;
  subtitle?: string | null | undefined;
  command?: string | null | undefined;
  refreshToken?: string | null | undefined;
  sourceType?: string | undefined;
  cleanCache?: boolean | null | undefined;
  repository?: string | null | undefined;
  owner?: string | null | undefined;
  branch?: string | null | undefined;
  buildPath?: string | null | undefined;
  triggerType?: string | null | undefined;
  autoDeploy?: boolean | null | undefined;
  gitlabProjectId?: number | null | undefined;
  gitlabRepository?: string | null | undefined;
  gitlabOwner?: string | null | undefined;
  gitlabBranch?: string | null | undefined;
  gitlabBuildPath?: string | null | undefined;
  gitlabPathNamespace?: string | null | undefined;
  giteaRepository?: string | null | undefined;
  giteaOwner?: string | null | undefined;
  giteaBranch?: string | null | undefined;
  giteaBuildPath?: string | null | undefined;
  bitbucketRepository?: string | null | undefined;
  bitbucketOwner?: string | null | undefined;
  bitbucketBranch?: string | null | undefined;
  bitbucketBuildPath?: string | null | undefined;
  username?: string | null | undefined;
  password?: string | null | undefined;
  dockerImage?: string | null | undefined;
  registryUrl?: string | null | undefined;
  customGitUrl?: string | null | undefined;
  customGitBranch?: string | null | undefined;
  customGitBuildPath?: string | null | undefined;
  customGitSSHKeyId?: string | null | undefined;
  enableSubmodules?: boolean | undefined;
  dockerfile?: string | null | undefined;
  dockerContextPath?: string | null | undefined;
  dockerBuildStage?: string | null | undefined;
  dropBuildPath?: string | null | undefined;
  healthCheckSwarm?: ApplicationOneHealthCheckSwarm$Outbound | null | undefined;
  restartPolicySwarm?:
    | ApplicationOneRestartPolicySwarm$Outbound
    | null
    | undefined;
  placementSwarm?: ApplicationOnePlacementSwarm$Outbound | null | undefined;
  updateConfigSwarm?:
    | ApplicationOneUpdateConfigSwarm$Outbound
    | null
    | undefined;
  rollbackConfigSwarm?:
    | ApplicationOneRollbackConfigSwarm$Outbound
    | null
    | undefined;
  modeSwarm?: ApplicationOneModeSwarm$Outbound | null | undefined;
  labelsSwarm?: { [k: string]: string } | null | undefined;
  networkSwarm?: Array<ApplicationOneNetworkSwarm$Outbound> | null | undefined;
  replicas?: number | undefined;
  applicationStatus?: string | undefined;
  buildType?: string | undefined;
  railpackVersion?: string | null | undefined;
  herokuVersion?: string | null | undefined;
  publishDirectory?: string | null | undefined;
  isStaticSpa?: boolean | null | undefined;
  createdAt?: string | undefined;
  registryId?: string | null | undefined;
  environmentId: string;
  githubId?: string | null | undefined;
  gitlabId?: string | null | undefined;
  giteaId?: string | null | undefined;
  bitbucketId?: string | null | undefined;
  serverId?: string | null | undefined;
  environment: ApplicationOneEnvironment$Outbound;
  domains: Array<ApplicationOneDomain$Outbound>;
  deployments: Array<ApplicationOneDeployment$Outbound>;
  mounts: Array<ApplicationOneMount$Outbound>;
  redirects: Array<ApplicationOneRedirect$Outbound>;
  security: Array<ApplicationOneSecurityResponse$Outbound>;
  ports: Array<ApplicationOnePort$Outbound>;
  registry: ApplicationOneRegistry$Outbound | null;
  github: ApplicationOneGithub$Outbound | null;
  gitlab: ApplicationOneGitlab$Outbound | null;
  bitbucket: ApplicationOneBitbucket$Outbound | null;
  gitea: ApplicationOneGitea$Outbound | null;
  server: ApplicationOneServer$Outbound | null;
  previewDeployments: Array<ApplicationOnePreviewDeployment$Outbound>;
  hasGitProviderAccess: boolean;
  unauthorizedProvider: string | null;
};

/** @internal */
export const ApplicationOneResponseBody$outboundSchema: z.ZodType<
  ApplicationOneResponseBody$Outbound,
  z.ZodTypeDef,
  ApplicationOneResponseBody
> = z.object({
  applicationId: z.string().optional(),
  name: z.string(),
  appName: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  env: z.nullable(z.string()).optional(),
  previewEnv: z.nullable(z.string()).optional(),
  watchPaths: z.nullable(z.array(z.string())).optional(),
  previewBuildArgs: z.nullable(z.string()).optional(),
  previewLabels: z.nullable(z.array(z.string())).optional(),
  previewWildcard: z.nullable(z.string()).optional(),
  previewPort: z.nullable(z.number()).optional(),
  previewHttps: z.boolean().optional(),
  previewPath: z.nullable(z.string()).optional(),
  previewCertificateType: ApplicationOnePreviewCertificateType$outboundSchema
    .optional(),
  previewCustomCertResolver: z.nullable(z.string()).optional(),
  previewLimit: z.nullable(z.number()).optional(),
  isPreviewDeploymentsActive: z.nullable(z.boolean()).optional(),
  previewRequireCollaboratorPermissions: z.nullable(z.boolean()).optional(),
  rollbackActive: z.nullable(z.boolean()).optional(),
  buildArgs: z.nullable(z.string()).optional(),
  memoryReservation: z.nullable(z.string()).optional(),
  memoryLimit: z.nullable(z.string()).optional(),
  cpuReservation: z.nullable(z.string()).optional(),
  cpuLimit: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  enabled: z.nullable(z.boolean()).optional(),
  subtitle: z.nullable(z.string()).optional(),
  command: z.nullable(z.string()).optional(),
  refreshToken: z.nullable(z.string()).optional(),
  sourceType: ApplicationOneSourceType$outboundSchema.optional(),
  cleanCache: z.nullable(z.boolean()).optional(),
  repository: z.nullable(z.string()).optional(),
  owner: z.nullable(z.string()).optional(),
  branch: z.nullable(z.string()).optional(),
  buildPath: z.nullable(z.string()).optional(),
  triggerType: z.nullable(ApplicationOneTriggerType$outboundSchema).optional(),
  autoDeploy: z.nullable(z.boolean()).optional(),
  gitlabProjectId: z.nullable(z.number()).optional(),
  gitlabRepository: z.nullable(z.string()).optional(),
  gitlabOwner: z.nullable(z.string()).optional(),
  gitlabBranch: z.nullable(z.string()).optional(),
  gitlabBuildPath: z.nullable(z.string()).optional(),
  gitlabPathNamespace: z.nullable(z.string()).optional(),
  giteaRepository: z.nullable(z.string()).optional(),
  giteaOwner: z.nullable(z.string()).optional(),
  giteaBranch: z.nullable(z.string()).optional(),
  giteaBuildPath: z.nullable(z.string()).optional(),
  bitbucketRepository: z.nullable(z.string()).optional(),
  bitbucketOwner: z.nullable(z.string()).optional(),
  bitbucketBranch: z.nullable(z.string()).optional(),
  bitbucketBuildPath: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  dockerImage: z.nullable(z.string()).optional(),
  registryUrl: z.nullable(z.string()).optional(),
  customGitUrl: z.nullable(z.string()).optional(),
  customGitBranch: z.nullable(z.string()).optional(),
  customGitBuildPath: z.nullable(z.string()).optional(),
  customGitSSHKeyId: z.nullable(z.string()).optional(),
  enableSubmodules: z.boolean().optional(),
  dockerfile: z.nullable(z.string()).optional(),
  dockerContextPath: z.nullable(z.string()).optional(),
  dockerBuildStage: z.nullable(z.string()).optional(),
  dropBuildPath: z.nullable(z.string()).optional(),
  healthCheckSwarm: z.nullable(
    z.lazy(() => ApplicationOneHealthCheckSwarm$outboundSchema),
  ).optional(),
  restartPolicySwarm: z.nullable(
    z.lazy(() => ApplicationOneRestartPolicySwarm$outboundSchema),
  ).optional(),
  placementSwarm: z.nullable(
    z.lazy(() => ApplicationOnePlacementSwarm$outboundSchema),
  ).optional(),
  updateConfigSwarm: z.nullable(
    z.lazy(() => ApplicationOneUpdateConfigSwarm$outboundSchema),
  ).optional(),
  rollbackConfigSwarm: z.nullable(
    z.lazy(() => ApplicationOneRollbackConfigSwarm$outboundSchema),
  ).optional(),
  modeSwarm: z.nullable(z.lazy(() => ApplicationOneModeSwarm$outboundSchema))
    .optional(),
  labelsSwarm: z.nullable(z.record(z.string())).optional(),
  networkSwarm: z.nullable(
    z.array(z.lazy(() => ApplicationOneNetworkSwarm$outboundSchema)),
  ).optional(),
  replicas: z.number().optional(),
  applicationStatus: ApplicationOneApplicationStatus$outboundSchema.optional(),
  buildType: ApplicationOneBuildType$outboundSchema.optional(),
  railpackVersion: z.nullable(z.string()).optional(),
  herokuVersion: z.nullable(z.string()).optional(),
  publishDirectory: z.nullable(z.string()).optional(),
  isStaticSpa: z.nullable(z.boolean()).optional(),
  createdAt: z.string().optional(),
  registryId: z.nullable(z.string()).optional(),
  environmentId: z.string(),
  githubId: z.nullable(z.string()).optional(),
  gitlabId: z.nullable(z.string()).optional(),
  giteaId: z.nullable(z.string()).optional(),
  bitbucketId: z.nullable(z.string()).optional(),
  serverId: z.nullable(z.string()).optional(),
  environment: z.lazy(() => ApplicationOneEnvironment$outboundSchema),
  domains: z.array(z.lazy(() => ApplicationOneDomain$outboundSchema)),
  deployments: z.array(z.lazy(() => ApplicationOneDeployment$outboundSchema)),
  mounts: z.array(z.lazy(() => ApplicationOneMount$outboundSchema)),
  redirects: z.array(z.lazy(() => ApplicationOneRedirect$outboundSchema)),
  security: z.array(
    z.lazy(() => ApplicationOneSecurityResponse$outboundSchema),
  ),
  ports: z.array(z.lazy(() => ApplicationOnePort$outboundSchema)),
  registry: z.nullable(z.lazy(() => ApplicationOneRegistry$outboundSchema)),
  github: z.nullable(z.lazy(() => ApplicationOneGithub$outboundSchema)),
  gitlab: z.nullable(z.lazy(() => ApplicationOneGitlab$outboundSchema)),
  bitbucket: z.nullable(z.lazy(() => ApplicationOneBitbucket$outboundSchema)),
  gitea: z.nullable(z.lazy(() => ApplicationOneGitea$outboundSchema)),
  server: z.nullable(z.lazy(() => ApplicationOneServer$outboundSchema)),
  previewDeployments: z.array(
    z.lazy(() => ApplicationOnePreviewDeployment$outboundSchema),
  ),
  hasGitProviderAccess: z.boolean(),
  unauthorizedProvider: z.nullable(UnauthorizedProvider$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneResponseBody$ {
  /** @deprecated use `ApplicationOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneResponseBody$inboundSchema;
  /** @deprecated use `ApplicationOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneResponseBody$outboundSchema;
  /** @deprecated use `ApplicationOneResponseBody$Outbound` instead. */
  export type Outbound = ApplicationOneResponseBody$Outbound;
}

export function applicationOneResponseBodyToJSON(
  applicationOneResponseBody: ApplicationOneResponseBody,
): string {
  return JSON.stringify(
    ApplicationOneResponseBody$outboundSchema.parse(applicationOneResponseBody),
  );
}

export function applicationOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneResponseBody' from JSON`,
  );
}

/** @internal */
export const ApplicationOneResponse$inboundSchema: z.ZodType<
  ApplicationOneResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ApplicationOneResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type ApplicationOneResponse$Outbound =
  | ApplicationOneResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const ApplicationOneResponse$outboundSchema: z.ZodType<
  ApplicationOneResponse$Outbound,
  z.ZodTypeDef,
  ApplicationOneResponse
> = z.union([
  z.lazy(() => ApplicationOneResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationOneResponse$ {
  /** @deprecated use `ApplicationOneResponse$inboundSchema` instead. */
  export const inboundSchema = ApplicationOneResponse$inboundSchema;
  /** @deprecated use `ApplicationOneResponse$outboundSchema` instead. */
  export const outboundSchema = ApplicationOneResponse$outboundSchema;
  /** @deprecated use `ApplicationOneResponse$Outbound` instead. */
  export type Outbound = ApplicationOneResponse$Outbound;
}

export function applicationOneResponseToJSON(
  applicationOneResponse: ApplicationOneResponse,
): string {
  return JSON.stringify(
    ApplicationOneResponse$outboundSchema.parse(applicationOneResponse),
  );
}

export function applicationOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationOneResponse' from JSON`,
  );
}
