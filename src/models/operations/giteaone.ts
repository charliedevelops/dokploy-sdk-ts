/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GiteaOneRequest = {
  giteaId: string;
};

export const GiteaOneProviderType = {
  Github: "github",
  Gitlab: "gitlab",
  Bitbucket: "bitbucket",
  Gitea: "gitea",
} as const;
export type GiteaOneProviderType = ClosedEnum<typeof GiteaOneProviderType>;

export type GiteaOneGitProvider = {
  createdAt: string;
  gitProviderId: string;
  name: string;
  organizationId: string;
  providerType: GiteaOneProviderType;
  userId: string;
};

/**
 * Successful response
 */
export type GiteaOneResponseBody = {
  accessToken: string | null;
  clientId: string | null;
  clientSecret: string | null;
  expiresAt: number | null;
  gitProvider: GiteaOneGitProvider;
  gitProviderId: string;
  giteaId: string;
  giteaUrl: string;
  lastAuthenticatedAt: number | null;
  redirectUri: string | null;
  refreshToken: string | null;
  scopes: string | null;
};

export type GiteaOneResponse = GiteaOneResponseBody | models.ErrorT;

/** @internal */
export const GiteaOneRequest$inboundSchema: z.ZodType<
  GiteaOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  giteaId: z.string(),
});

/** @internal */
export type GiteaOneRequest$Outbound = {
  giteaId: string;
};

/** @internal */
export const GiteaOneRequest$outboundSchema: z.ZodType<
  GiteaOneRequest$Outbound,
  z.ZodTypeDef,
  GiteaOneRequest
> = z.object({
  giteaId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiteaOneRequest$ {
  /** @deprecated use `GiteaOneRequest$inboundSchema` instead. */
  export const inboundSchema = GiteaOneRequest$inboundSchema;
  /** @deprecated use `GiteaOneRequest$outboundSchema` instead. */
  export const outboundSchema = GiteaOneRequest$outboundSchema;
  /** @deprecated use `GiteaOneRequest$Outbound` instead. */
  export type Outbound = GiteaOneRequest$Outbound;
}

export function giteaOneRequestToJSON(
  giteaOneRequest: GiteaOneRequest,
): string {
  return JSON.stringify(GiteaOneRequest$outboundSchema.parse(giteaOneRequest));
}

export function giteaOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<GiteaOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiteaOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiteaOneRequest' from JSON`,
  );
}

/** @internal */
export const GiteaOneProviderType$inboundSchema: z.ZodNativeEnum<
  typeof GiteaOneProviderType
> = z.nativeEnum(GiteaOneProviderType);

/** @internal */
export const GiteaOneProviderType$outboundSchema: z.ZodNativeEnum<
  typeof GiteaOneProviderType
> = GiteaOneProviderType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiteaOneProviderType$ {
  /** @deprecated use `GiteaOneProviderType$inboundSchema` instead. */
  export const inboundSchema = GiteaOneProviderType$inboundSchema;
  /** @deprecated use `GiteaOneProviderType$outboundSchema` instead. */
  export const outboundSchema = GiteaOneProviderType$outboundSchema;
}

/** @internal */
export const GiteaOneGitProvider$inboundSchema: z.ZodType<
  GiteaOneGitProvider,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  gitProviderId: z.string(),
  name: z.string(),
  organizationId: z.string(),
  providerType: GiteaOneProviderType$inboundSchema,
  userId: z.string(),
});

/** @internal */
export type GiteaOneGitProvider$Outbound = {
  createdAt: string;
  gitProviderId: string;
  name: string;
  organizationId: string;
  providerType: string;
  userId: string;
};

/** @internal */
export const GiteaOneGitProvider$outboundSchema: z.ZodType<
  GiteaOneGitProvider$Outbound,
  z.ZodTypeDef,
  GiteaOneGitProvider
> = z.object({
  createdAt: z.string(),
  gitProviderId: z.string(),
  name: z.string(),
  organizationId: z.string(),
  providerType: GiteaOneProviderType$outboundSchema,
  userId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiteaOneGitProvider$ {
  /** @deprecated use `GiteaOneGitProvider$inboundSchema` instead. */
  export const inboundSchema = GiteaOneGitProvider$inboundSchema;
  /** @deprecated use `GiteaOneGitProvider$outboundSchema` instead. */
  export const outboundSchema = GiteaOneGitProvider$outboundSchema;
  /** @deprecated use `GiteaOneGitProvider$Outbound` instead. */
  export type Outbound = GiteaOneGitProvider$Outbound;
}

export function giteaOneGitProviderToJSON(
  giteaOneGitProvider: GiteaOneGitProvider,
): string {
  return JSON.stringify(
    GiteaOneGitProvider$outboundSchema.parse(giteaOneGitProvider),
  );
}

export function giteaOneGitProviderFromJSON(
  jsonString: string,
): SafeParseResult<GiteaOneGitProvider, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiteaOneGitProvider$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiteaOneGitProvider' from JSON`,
  );
}

/** @internal */
export const GiteaOneResponseBody$inboundSchema: z.ZodType<
  GiteaOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.nullable(z.string()),
  clientId: z.nullable(z.string()),
  clientSecret: z.nullable(z.string()),
  expiresAt: z.nullable(z.number()),
  gitProvider: z.lazy(() => GiteaOneGitProvider$inboundSchema),
  gitProviderId: z.string(),
  giteaId: z.string(),
  giteaUrl: z.string(),
  lastAuthenticatedAt: z.nullable(z.number()),
  redirectUri: z.nullable(z.string()),
  refreshToken: z.nullable(z.string()),
  scopes: z.nullable(z.string()),
});

/** @internal */
export type GiteaOneResponseBody$Outbound = {
  accessToken: string | null;
  clientId: string | null;
  clientSecret: string | null;
  expiresAt: number | null;
  gitProvider: GiteaOneGitProvider$Outbound;
  gitProviderId: string;
  giteaId: string;
  giteaUrl: string;
  lastAuthenticatedAt: number | null;
  redirectUri: string | null;
  refreshToken: string | null;
  scopes: string | null;
};

/** @internal */
export const GiteaOneResponseBody$outboundSchema: z.ZodType<
  GiteaOneResponseBody$Outbound,
  z.ZodTypeDef,
  GiteaOneResponseBody
> = z.object({
  accessToken: z.nullable(z.string()),
  clientId: z.nullable(z.string()),
  clientSecret: z.nullable(z.string()),
  expiresAt: z.nullable(z.number()),
  gitProvider: z.lazy(() => GiteaOneGitProvider$outboundSchema),
  gitProviderId: z.string(),
  giteaId: z.string(),
  giteaUrl: z.string(),
  lastAuthenticatedAt: z.nullable(z.number()),
  redirectUri: z.nullable(z.string()),
  refreshToken: z.nullable(z.string()),
  scopes: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiteaOneResponseBody$ {
  /** @deprecated use `GiteaOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = GiteaOneResponseBody$inboundSchema;
  /** @deprecated use `GiteaOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = GiteaOneResponseBody$outboundSchema;
  /** @deprecated use `GiteaOneResponseBody$Outbound` instead. */
  export type Outbound = GiteaOneResponseBody$Outbound;
}

export function giteaOneResponseBodyToJSON(
  giteaOneResponseBody: GiteaOneResponseBody,
): string {
  return JSON.stringify(
    GiteaOneResponseBody$outboundSchema.parse(giteaOneResponseBody),
  );
}

export function giteaOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GiteaOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiteaOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiteaOneResponseBody' from JSON`,
  );
}

/** @internal */
export const GiteaOneResponse$inboundSchema: z.ZodType<
  GiteaOneResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GiteaOneResponseBody$inboundSchema),
  models.ErrorT$inboundSchema,
]);

/** @internal */
export type GiteaOneResponse$Outbound =
  | GiteaOneResponseBody$Outbound
  | models.ErrorT$Outbound;

/** @internal */
export const GiteaOneResponse$outboundSchema: z.ZodType<
  GiteaOneResponse$Outbound,
  z.ZodTypeDef,
  GiteaOneResponse
> = z.union([
  z.lazy(() => GiteaOneResponseBody$outboundSchema),
  models.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GiteaOneResponse$ {
  /** @deprecated use `GiteaOneResponse$inboundSchema` instead. */
  export const inboundSchema = GiteaOneResponse$inboundSchema;
  /** @deprecated use `GiteaOneResponse$outboundSchema` instead. */
  export const outboundSchema = GiteaOneResponse$outboundSchema;
  /** @deprecated use `GiteaOneResponse$Outbound` instead. */
  export type Outbound = GiteaOneResponse$Outbound;
}

export function giteaOneResponseToJSON(
  giteaOneResponse: GiteaOneResponse,
): string {
  return JSON.stringify(
    GiteaOneResponse$outboundSchema.parse(giteaOneResponse),
  );
}

export function giteaOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<GiteaOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GiteaOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GiteaOneResponse' from JSON`,
  );
}
