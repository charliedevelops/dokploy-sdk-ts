/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { applicationsMove } from "../funcs/applicationsMove.js";
import { applicationsReadTraefikConfig } from "../funcs/applicationsReadTraefikConfig.js";
import { applicationsRefreshToken } from "../funcs/applicationsRefreshToken.js";
import { applicationsSaveGithubProvider } from "../funcs/applicationsSaveGithubProvider.js";
import { applicationsStart } from "../funcs/applicationsStart.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Applications extends ClientSDK {
  async move(
    request: operations.ApplicationMoveRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationMoveResponse> {
    return unwrapAsync(applicationsMove(
      this,
      request,
      options,
    ));
  }

  async readTraefikConfig(
    request: operations.ApplicationReadTraefikConfigRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(applicationsReadTraefikConfig(
      this,
      request,
      options,
    ));
  }

  async refreshToken(
    request: operations.ApplicationRefreshTokenRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(applicationsRefreshToken(
      this,
      request,
      options,
    ));
  }

  async saveGithubProvider(
    request: operations.ApplicationSaveGithubProviderRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationSaveGithubProviderResponse> {
    return unwrapAsync(applicationsSaveGithubProvider(
      this,
      request,
      options,
    ));
  }

  async start(
    request: operations.ApplicationStartRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationStartResponse> {
    return unwrapAsync(applicationsStart(
      this,
      request,
      options,
    ));
  }
}
