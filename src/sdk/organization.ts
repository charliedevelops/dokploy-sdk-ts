/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { organizationAllInvitations } from "../funcs/organizationAllInvitations.js";
import { organizationCreate } from "../funcs/organizationCreate.js";
import { organizationDelete } from "../funcs/organizationDelete.js";
import { organizationGet } from "../funcs/organizationGet.js";
import { organizationGetAll } from "../funcs/organizationGetAll.js";
import { organizationRemoveInvitation } from "../funcs/organizationRemoveInvitation.js";
import { organizationUpdate } from "../funcs/organizationUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Organization extends ClientSDK {
  async getAll(
    options?: RequestOptions,
  ): Promise<operations.OrganizationAllResponse> {
    return unwrapAsync(organizationGetAll(
      this,
      options,
    ));
  }

  async allInvitations(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(organizationAllInvitations(
      this,
      options,
    ));
  }

  async create(
    request: operations.OrganizationCreateRequest,
    options?: RequestOptions,
  ): Promise<operations.OrganizationCreateResponse> {
    return unwrapAsync(organizationCreate(
      this,
      request,
      options,
    ));
  }

  async delete(
    request: operations.OrganizationDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.OrganizationDeleteResponse> {
    return unwrapAsync(organizationDelete(
      this,
      request,
      options,
    ));
  }

  async get(
    request: operations.OrganizationOneRequest,
    options?: RequestOptions,
  ): Promise<operations.OrganizationOneResponse> {
    return unwrapAsync(organizationGet(
      this,
      request,
      options,
    ));
  }

  async removeInvitation(
    request: operations.OrganizationRemoveInvitationRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(organizationRemoveInvitation(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.OrganizationUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.OrganizationUpdateResponse> {
    return unwrapAsync(organizationUpdate(
      this,
      request,
      options,
    ));
  }
}
