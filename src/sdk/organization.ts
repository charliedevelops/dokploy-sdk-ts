/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { organizationOrganizationAll } from "../funcs/organizationOrganizationAll.js";
import { organizationOrganizationAllInvitations } from "../funcs/organizationOrganizationAllInvitations.js";
import { organizationOrganizationCreate } from "../funcs/organizationOrganizationCreate.js";
import { organizationOrganizationDelete } from "../funcs/organizationOrganizationDelete.js";
import { organizationOrganizationOne } from "../funcs/organizationOrganizationOne.js";
import { organizationOrganizationRemoveInvitation } from "../funcs/organizationOrganizationRemoveInvitation.js";
import { organizationOrganizationUpdate } from "../funcs/organizationOrganizationUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Organization extends ClientSDK {
  async organizationAll(
    security: operations.OrganizationAllSecurity,
    options?: RequestOptions,
  ): Promise<operations.OrganizationAllResponse> {
    return unwrapAsync(organizationOrganizationAll(
      this,
      security,
      options,
    ));
  }

  async organizationAllInvitations(
    security: operations.OrganizationAllInvitationsSecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(organizationOrganizationAllInvitations(
      this,
      security,
      options,
    ));
  }

  async organizationCreate(
    security: operations.OrganizationCreateSecurity,
    request: operations.OrganizationCreateRequest,
    options?: RequestOptions,
  ): Promise<operations.OrganizationCreateResponse> {
    return unwrapAsync(organizationOrganizationCreate(
      this,
      security,
      request,
      options,
    ));
  }

  async organizationDelete(
    security: operations.OrganizationDeleteSecurity,
    request: operations.OrganizationDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.OrganizationDeleteResponse> {
    return unwrapAsync(organizationOrganizationDelete(
      this,
      security,
      request,
      options,
    ));
  }

  async organizationOne(
    security: operations.OrganizationOneSecurity,
    request: operations.OrganizationOneRequest,
    options?: RequestOptions,
  ): Promise<operations.OrganizationOneResponse> {
    return unwrapAsync(organizationOrganizationOne(
      this,
      security,
      request,
      options,
    ));
  }

  async organizationRemoveInvitation(
    security: operations.OrganizationRemoveInvitationSecurity,
    request: operations.OrganizationRemoveInvitationRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(organizationOrganizationRemoveInvitation(
      this,
      security,
      request,
      options,
    ));
  }

  async organizationUpdate(
    security: operations.OrganizationUpdateSecurity,
    request: operations.OrganizationUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.OrganizationUpdateResponse> {
    return unwrapAsync(organizationOrganizationUpdate(
      this,
      security,
      request,
      options,
    ));
  }
}
