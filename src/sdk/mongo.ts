/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { mongoChangeStatus } from "../funcs/mongoChangeStatus.js";
import { mongoCreate } from "../funcs/mongoCreate.js";
import { mongoDeploy } from "../funcs/mongoDeploy.js";
import { mongoGetOne } from "../funcs/mongoGetOne.js";
import { mongoMove } from "../funcs/mongoMove.js";
import { mongoRebuild } from "../funcs/mongoRebuild.js";
import { mongoReload } from "../funcs/mongoReload.js";
import { mongoRemove } from "../funcs/mongoRemove.js";
import { mongoSaveEnvironment } from "../funcs/mongoSaveEnvironment.js";
import { mongoSaveExternalPort } from "../funcs/mongoSaveExternalPort.js";
import { mongoStart } from "../funcs/mongoStart.js";
import { mongoStop } from "../funcs/mongoStop.js";
import { mongoUpdate } from "../funcs/mongoUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Mongo extends ClientSDK {
  async changeStatus(
    request: operations.MongoChangeStatusRequest,
    options?: RequestOptions,
  ): Promise<operations.MongoChangeStatusResponse> {
    return unwrapAsync(mongoChangeStatus(
      this,
      request,
      options,
    ));
  }

  async create(
    request: operations.MongoCreateRequest,
    options?: RequestOptions,
  ): Promise<operations.MongoCreateResponse> {
    return unwrapAsync(mongoCreate(
      this,
      request,
      options,
    ));
  }

  async deploy(
    request: operations.MongoDeployRequest,
    options?: RequestOptions,
  ): Promise<operations.MongoDeployResponse> {
    return unwrapAsync(mongoDeploy(
      this,
      request,
      options,
    ));
  }

  async move(
    request: operations.MongoMoveRequest,
    options?: RequestOptions,
  ): Promise<operations.MongoMoveResponse> {
    return unwrapAsync(mongoMove(
      this,
      request,
      options,
    ));
  }

  async getOne(
    request: operations.MongoOneRequest,
    options?: RequestOptions,
  ): Promise<operations.MongoOneResponse> {
    return unwrapAsync(mongoGetOne(
      this,
      request,
      options,
    ));
  }

  async rebuild(
    request: operations.MongoRebuildRequest,
    options?: RequestOptions,
  ): Promise<operations.MongoRebuildResponse> {
    return unwrapAsync(mongoRebuild(
      this,
      request,
      options,
    ));
  }

  async reload(
    request: operations.MongoReloadRequest,
    options?: RequestOptions,
  ): Promise<operations.MongoReloadResponse> {
    return unwrapAsync(mongoReload(
      this,
      request,
      options,
    ));
  }

  async remove(
    request: operations.MongoRemoveRequest,
    options?: RequestOptions,
  ): Promise<operations.MongoRemoveResponse> {
    return unwrapAsync(mongoRemove(
      this,
      request,
      options,
    ));
  }

  async saveEnvironment(
    request: operations.MongoSaveEnvironmentRequest,
    options?: RequestOptions,
  ): Promise<operations.MongoSaveEnvironmentResponse> {
    return unwrapAsync(mongoSaveEnvironment(
      this,
      request,
      options,
    ));
  }

  async saveExternalPort(
    request: operations.MongoSaveExternalPortRequest,
    options?: RequestOptions,
  ): Promise<operations.MongoSaveExternalPortResponse> {
    return unwrapAsync(mongoSaveExternalPort(
      this,
      request,
      options,
    ));
  }

  async start(
    request: operations.MongoStartRequest,
    options?: RequestOptions,
  ): Promise<operations.MongoStartResponse> {
    return unwrapAsync(mongoStart(
      this,
      request,
      options,
    ));
  }

  async stop(
    request: operations.MongoStopRequest,
    options?: RequestOptions,
  ): Promise<operations.MongoStopResponse> {
    return unwrapAsync(mongoStop(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.MongoUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.MongoUpdateResponse> {
    return unwrapAsync(mongoUpdate(
      this,
      request,
      options,
    ));
  }
}
