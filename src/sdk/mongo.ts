/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { mongoMongoChangeStatus } from "../funcs/mongoMongoChangeStatus.js";
import { mongoMongoCreate } from "../funcs/mongoMongoCreate.js";
import { mongoMongoDeploy } from "../funcs/mongoMongoDeploy.js";
import { mongoMongoMove } from "../funcs/mongoMongoMove.js";
import { mongoMongoOne } from "../funcs/mongoMongoOne.js";
import { mongoMongoRebuild } from "../funcs/mongoMongoRebuild.js";
import { mongoMongoReload } from "../funcs/mongoMongoReload.js";
import { mongoMongoRemove } from "../funcs/mongoMongoRemove.js";
import { mongoMongoSaveEnvironment } from "../funcs/mongoMongoSaveEnvironment.js";
import { mongoMongoSaveExternalPort } from "../funcs/mongoMongoSaveExternalPort.js";
import { mongoMongoStart } from "../funcs/mongoMongoStart.js";
import { mongoMongoStop } from "../funcs/mongoMongoStop.js";
import { mongoMongoUpdate } from "../funcs/mongoMongoUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Mongo extends ClientSDK {
  async mongoCreate(
    security: operations.MongoCreateSecurity,
    request: operations.MongoCreateRequest,
    options?: RequestOptions,
  ): Promise<operations.MongoCreateResponse> {
    return unwrapAsync(mongoMongoCreate(
      this,
      security,
      request,
      options,
    ));
  }

  async mongoOne(
    security: operations.MongoOneSecurity,
    request: operations.MongoOneRequest,
    options?: RequestOptions,
  ): Promise<operations.MongoOneResponse> {
    return unwrapAsync(mongoMongoOne(
      this,
      security,
      request,
      options,
    ));
  }

  async mongoStart(
    security: operations.MongoStartSecurity,
    request: operations.MongoStartRequest,
    options?: RequestOptions,
  ): Promise<operations.MongoStartResponse> {
    return unwrapAsync(mongoMongoStart(
      this,
      security,
      request,
      options,
    ));
  }

  async mongoStop(
    security: operations.MongoStopSecurity,
    request: operations.MongoStopRequest,
    options?: RequestOptions,
  ): Promise<operations.MongoStopResponse> {
    return unwrapAsync(mongoMongoStop(
      this,
      security,
      request,
      options,
    ));
  }

  async mongoSaveExternalPort(
    security: operations.MongoSaveExternalPortSecurity,
    request: operations.MongoSaveExternalPortRequest,
    options?: RequestOptions,
  ): Promise<operations.MongoSaveExternalPortResponse> {
    return unwrapAsync(mongoMongoSaveExternalPort(
      this,
      security,
      request,
      options,
    ));
  }

  async mongoDeploy(
    security: operations.MongoDeploySecurity,
    request: operations.MongoDeployRequest,
    options?: RequestOptions,
  ): Promise<operations.MongoDeployResponse> {
    return unwrapAsync(mongoMongoDeploy(
      this,
      security,
      request,
      options,
    ));
  }

  async mongoChangeStatus(
    security: operations.MongoChangeStatusSecurity,
    request: operations.MongoChangeStatusRequest,
    options?: RequestOptions,
  ): Promise<operations.MongoChangeStatusResponse> {
    return unwrapAsync(mongoMongoChangeStatus(
      this,
      security,
      request,
      options,
    ));
  }

  async mongoReload(
    security: operations.MongoReloadSecurity,
    request: operations.MongoReloadRequest,
    options?: RequestOptions,
  ): Promise<operations.MongoReloadResponse> {
    return unwrapAsync(mongoMongoReload(
      this,
      security,
      request,
      options,
    ));
  }

  async mongoRemove(
    security: operations.MongoRemoveSecurity,
    request: operations.MongoRemoveRequest,
    options?: RequestOptions,
  ): Promise<operations.MongoRemoveResponse> {
    return unwrapAsync(mongoMongoRemove(
      this,
      security,
      request,
      options,
    ));
  }

  async mongoSaveEnvironment(
    security: operations.MongoSaveEnvironmentSecurity,
    request: operations.MongoSaveEnvironmentRequest,
    options?: RequestOptions,
  ): Promise<operations.MongoSaveEnvironmentResponse> {
    return unwrapAsync(mongoMongoSaveEnvironment(
      this,
      security,
      request,
      options,
    ));
  }

  async mongoUpdate(
    security: operations.MongoUpdateSecurity,
    request: operations.MongoUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.MongoUpdateResponse> {
    return unwrapAsync(mongoMongoUpdate(
      this,
      security,
      request,
      options,
    ));
  }

  async mongoMove(
    security: operations.MongoMoveSecurity,
    request: operations.MongoMoveRequest,
    options?: RequestOptions,
  ): Promise<operations.MongoMoveResponse> {
    return unwrapAsync(mongoMongoMove(
      this,
      security,
      request,
      options,
    ));
  }

  async mongoRebuild(
    security: operations.MongoRebuildSecurity,
    request: operations.MongoRebuildRequest,
    options?: RequestOptions,
  ): Promise<operations.MongoRebuildResponse> {
    return unwrapAsync(mongoMongoRebuild(
      this,
      security,
      request,
      options,
    ));
  }
}
