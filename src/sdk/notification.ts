/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { notificationNotificationAll } from "../funcs/notificationNotificationAll.js";
import { notificationNotificationCreateDiscord } from "../funcs/notificationNotificationCreateDiscord.js";
import { notificationNotificationCreateEmail } from "../funcs/notificationNotificationCreateEmail.js";
import { notificationNotificationCreateGotify } from "../funcs/notificationNotificationCreateGotify.js";
import { notificationNotificationCreateNtfy } from "../funcs/notificationNotificationCreateNtfy.js";
import { notificationNotificationCreateSlack } from "../funcs/notificationNotificationCreateSlack.js";
import { notificationNotificationCreateTelegram } from "../funcs/notificationNotificationCreateTelegram.js";
import { notificationNotificationGetEmailProviders } from "../funcs/notificationNotificationGetEmailProviders.js";
import { notificationNotificationOne } from "../funcs/notificationNotificationOne.js";
import { notificationNotificationReceiveNotification } from "../funcs/notificationNotificationReceiveNotification.js";
import { notificationNotificationRemove } from "../funcs/notificationNotificationRemove.js";
import { notificationNotificationTestDiscordConnection } from "../funcs/notificationNotificationTestDiscordConnection.js";
import { notificationNotificationTestEmailConnection } from "../funcs/notificationNotificationTestEmailConnection.js";
import { notificationNotificationTestGotifyConnection } from "../funcs/notificationNotificationTestGotifyConnection.js";
import { notificationNotificationTestNtfyConnection } from "../funcs/notificationNotificationTestNtfyConnection.js";
import { notificationNotificationTestSlackConnection } from "../funcs/notificationNotificationTestSlackConnection.js";
import { notificationNotificationTestTelegramConnection } from "../funcs/notificationNotificationTestTelegramConnection.js";
import { notificationNotificationUpdateDiscord } from "../funcs/notificationNotificationUpdateDiscord.js";
import { notificationNotificationUpdateEmail } from "../funcs/notificationNotificationUpdateEmail.js";
import { notificationNotificationUpdateGotify } from "../funcs/notificationNotificationUpdateGotify.js";
import { notificationNotificationUpdateNtfy } from "../funcs/notificationNotificationUpdateNtfy.js";
import { notificationNotificationUpdateSlack } from "../funcs/notificationNotificationUpdateSlack.js";
import { notificationNotificationUpdateTelegram } from "../funcs/notificationNotificationUpdateTelegram.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Notification extends ClientSDK {
  async notificationCreateSlack(
    security: operations.NotificationCreateSlackSecurity,
    request: operations.NotificationCreateSlackRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationNotificationCreateSlack(
      this,
      security,
      request,
      options,
    ));
  }

  async notificationUpdateSlack(
    security: operations.NotificationUpdateSlackSecurity,
    request: operations.NotificationUpdateSlackRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationNotificationUpdateSlack(
      this,
      security,
      request,
      options,
    ));
  }

  async notificationTestSlackConnection(
    security: operations.NotificationTestSlackConnectionSecurity,
    request: operations.NotificationTestSlackConnectionRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationNotificationTestSlackConnection(
      this,
      security,
      request,
      options,
    ));
  }

  async notificationCreateTelegram(
    security: operations.NotificationCreateTelegramSecurity,
    request: operations.NotificationCreateTelegramRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationNotificationCreateTelegram(
      this,
      security,
      request,
      options,
    ));
  }

  async notificationUpdateTelegram(
    security: operations.NotificationUpdateTelegramSecurity,
    request: operations.NotificationUpdateTelegramRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationNotificationUpdateTelegram(
      this,
      security,
      request,
      options,
    ));
  }

  async notificationTestTelegramConnection(
    security: operations.NotificationTestTelegramConnectionSecurity,
    request: operations.NotificationTestTelegramConnectionRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationNotificationTestTelegramConnection(
      this,
      security,
      request,
      options,
    ));
  }

  async notificationCreateDiscord(
    security: operations.NotificationCreateDiscordSecurity,
    request: operations.NotificationCreateDiscordRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationNotificationCreateDiscord(
      this,
      security,
      request,
      options,
    ));
  }

  async notificationUpdateDiscord(
    security: operations.NotificationUpdateDiscordSecurity,
    request: operations.NotificationUpdateDiscordRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationNotificationUpdateDiscord(
      this,
      security,
      request,
      options,
    ));
  }

  async notificationTestDiscordConnection(
    security: operations.NotificationTestDiscordConnectionSecurity,
    request: operations.NotificationTestDiscordConnectionRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationNotificationTestDiscordConnection(
      this,
      security,
      request,
      options,
    ));
  }

  async notificationCreateEmail(
    security: operations.NotificationCreateEmailSecurity,
    request: operations.NotificationCreateEmailRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationNotificationCreateEmail(
      this,
      security,
      request,
      options,
    ));
  }

  async notificationUpdateEmail(
    security: operations.NotificationUpdateEmailSecurity,
    request: operations.NotificationUpdateEmailRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationNotificationUpdateEmail(
      this,
      security,
      request,
      options,
    ));
  }

  async notificationTestEmailConnection(
    security: operations.NotificationTestEmailConnectionSecurity,
    request: operations.NotificationTestEmailConnectionRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationNotificationTestEmailConnection(
      this,
      security,
      request,
      options,
    ));
  }

  async notificationRemove(
    security: operations.NotificationRemoveSecurity,
    request: operations.NotificationRemoveRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationNotificationRemove(
      this,
      security,
      request,
      options,
    ));
  }

  async notificationOne(
    security: operations.NotificationOneSecurity,
    request: operations.NotificationOneRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationNotificationOne(
      this,
      security,
      request,
      options,
    ));
  }

  async notificationAll(
    security: operations.NotificationAllSecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationNotificationAll(
      this,
      security,
      options,
    ));
  }

  async notificationReceiveNotification(
    security: operations.NotificationReceiveNotificationSecurity,
    request: operations.NotificationReceiveNotificationRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationNotificationReceiveNotification(
      this,
      security,
      request,
      options,
    ));
  }

  async notificationCreateGotify(
    security: operations.NotificationCreateGotifySecurity,
    request: operations.NotificationCreateGotifyRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationNotificationCreateGotify(
      this,
      security,
      request,
      options,
    ));
  }

  async notificationUpdateGotify(
    security: operations.NotificationUpdateGotifySecurity,
    request: operations.NotificationUpdateGotifyRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationNotificationUpdateGotify(
      this,
      security,
      request,
      options,
    ));
  }

  async notificationTestGotifyConnection(
    security: operations.NotificationTestGotifyConnectionSecurity,
    request: operations.NotificationTestGotifyConnectionRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationNotificationTestGotifyConnection(
      this,
      security,
      request,
      options,
    ));
  }

  async notificationCreateNtfy(
    security: operations.NotificationCreateNtfySecurity,
    request: operations.NotificationCreateNtfyRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationNotificationCreateNtfy(
      this,
      security,
      request,
      options,
    ));
  }

  async notificationUpdateNtfy(
    security: operations.NotificationUpdateNtfySecurity,
    request: operations.NotificationUpdateNtfyRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationNotificationUpdateNtfy(
      this,
      security,
      request,
      options,
    ));
  }

  async notificationTestNtfyConnection(
    security: operations.NotificationTestNtfyConnectionSecurity,
    request: operations.NotificationTestNtfyConnectionRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationNotificationTestNtfyConnection(
      this,
      security,
      request,
      options,
    ));
  }

  async notificationGetEmailProviders(
    security: operations.NotificationGetEmailProvidersSecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationNotificationGetEmailProviders(
      this,
      security,
      options,
    ));
  }
}
