/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { notificationCreateDiscord } from "../funcs/notificationCreateDiscord.js";
import { notificationCreateEmail } from "../funcs/notificationCreateEmail.js";
import { notificationCreateGotify } from "../funcs/notificationCreateGotify.js";
import { notificationCreateNtfy } from "../funcs/notificationCreateNtfy.js";
import { notificationCreateSlack } from "../funcs/notificationCreateSlack.js";
import { notificationCreateTelegram } from "../funcs/notificationCreateTelegram.js";
import { notificationGet } from "../funcs/notificationGet.js";
import { notificationGetEmailProviders } from "../funcs/notificationGetEmailProviders.js";
import { notificationReceiveNotification } from "../funcs/notificationReceiveNotification.js";
import { notificationRemove } from "../funcs/notificationRemove.js";
import { notificationTestDiscordConnection } from "../funcs/notificationTestDiscordConnection.js";
import { notificationTestEmailConnection } from "../funcs/notificationTestEmailConnection.js";
import { notificationTestGotifyConnection } from "../funcs/notificationTestGotifyConnection.js";
import { notificationTestNtfyConnection } from "../funcs/notificationTestNtfyConnection.js";
import { notificationTestSlackConnection } from "../funcs/notificationTestSlackConnection.js";
import { notificationTestTelegramConnection } from "../funcs/notificationTestTelegramConnection.js";
import { notificationUpdateDiscord } from "../funcs/notificationUpdateDiscord.js";
import { notificationUpdateEmail } from "../funcs/notificationUpdateEmail.js";
import { notificationUpdateGotify } from "../funcs/notificationUpdateGotify.js";
import { notificationUpdateNtfy } from "../funcs/notificationUpdateNtfy.js";
import { notificationUpdateSlack } from "../funcs/notificationUpdateSlack.js";
import { notificationUpdateTelegram } from "../funcs/notificationUpdateTelegram.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Notification extends ClientSDK {
  async createDiscord(
    request: operations.NotificationCreateDiscordRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationCreateDiscord(
      this,
      request,
      options,
    ));
  }

  async createEmail(
    request: operations.NotificationCreateEmailRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationCreateEmail(
      this,
      request,
      options,
    ));
  }

  async createGotify(
    request: operations.NotificationCreateGotifyRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationCreateGotify(
      this,
      request,
      options,
    ));
  }

  async createNtfy(
    request: operations.NotificationCreateNtfyRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationCreateNtfy(
      this,
      request,
      options,
    ));
  }

  async createSlack(
    request: operations.NotificationCreateSlackRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationCreateSlack(
      this,
      request,
      options,
    ));
  }

  async createTelegram(
    request: operations.NotificationCreateTelegramRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationCreateTelegram(
      this,
      request,
      options,
    ));
  }

  async getEmailProviders(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationGetEmailProviders(
      this,
      options,
    ));
  }

  async get(
    request: operations.NotificationOneRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationGet(
      this,
      request,
      options,
    ));
  }

  async receiveNotification(
    request: operations.NotificationReceiveNotificationRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationReceiveNotification(
      this,
      request,
      options,
    ));
  }

  async remove(
    request: operations.NotificationRemoveRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationRemove(
      this,
      request,
      options,
    ));
  }

  async testDiscordConnection(
    request: operations.NotificationTestDiscordConnectionRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationTestDiscordConnection(
      this,
      request,
      options,
    ));
  }

  async testEmailConnection(
    request: operations.NotificationTestEmailConnectionRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationTestEmailConnection(
      this,
      request,
      options,
    ));
  }

  async testGotifyConnection(
    request: operations.NotificationTestGotifyConnectionRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationTestGotifyConnection(
      this,
      request,
      options,
    ));
  }

  async testNtfyConnection(
    request: operations.NotificationTestNtfyConnectionRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationTestNtfyConnection(
      this,
      request,
      options,
    ));
  }

  async testSlackConnection(
    request: operations.NotificationTestSlackConnectionRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationTestSlackConnection(
      this,
      request,
      options,
    ));
  }

  async testTelegramConnection(
    request: operations.NotificationTestTelegramConnectionRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationTestTelegramConnection(
      this,
      request,
      options,
    ));
  }

  async updateDiscord(
    request: operations.NotificationUpdateDiscordRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationUpdateDiscord(
      this,
      request,
      options,
    ));
  }

  async updateEmail(
    request: operations.NotificationUpdateEmailRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationUpdateEmail(
      this,
      request,
      options,
    ));
  }

  async updateGotify(
    request: operations.NotificationUpdateGotifyRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationUpdateGotify(
      this,
      request,
      options,
    ));
  }

  async updateNtfy(
    request: operations.NotificationUpdateNtfyRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationUpdateNtfy(
      this,
      request,
      options,
    ));
  }

  async updateSlack(
    request: operations.NotificationUpdateSlackRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationUpdateSlack(
      this,
      request,
      options,
    ));
  }

  async updateTelegram(
    request: operations.NotificationUpdateTelegramRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(notificationUpdateTelegram(
      this,
      request,
      options,
    ));
  }
}
