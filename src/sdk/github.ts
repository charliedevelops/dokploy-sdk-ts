/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { githubGetGithubRepositories } from "../funcs/githubGetGithubRepositories.js";
import { githubGetProviders } from "../funcs/githubGetProviders.js";
import { githubOne } from "../funcs/githubOne.js";
import { githubTestConnection } from "../funcs/githubTestConnection.js";
import { githubUpdate } from "../funcs/githubUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { GithubGet } from "./githubget.js";

export class Github extends ClientSDK {
  private _get?: GithubGet;
  get get(): GithubGet {
    return (this._get ??= new GithubGet(this._options));
  }

  async getGithubRepositories(
    request: operations.GithubGetGithubRepositoriesRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(githubGetGithubRepositories(
      this,
      request,
      options,
    ));
  }

  async getProviders(
    options?: RequestOptions,
  ): Promise<operations.GithubGithubProvidersResponse> {
    return unwrapAsync(githubGetProviders(
      this,
      options,
    ));
  }

  async one(
    request: operations.GithubOneRequest,
    options?: RequestOptions,
  ): Promise<operations.GithubOneResponse> {
    return unwrapAsync(githubOne(
      this,
      request,
      options,
    ));
  }

  async testConnection(
    request: operations.GithubTestConnectionRequest,
    options?: RequestOptions,
  ): Promise<operations.GithubTestConnectionResponse> {
    return unwrapAsync(githubTestConnection(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.GithubUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.GithubUpdateResponse> {
    return unwrapAsync(githubUpdate(
      this,
      request,
      options,
    ));
  }
}
