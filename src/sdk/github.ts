/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { githubGithubGetGithubBranches } from "../funcs/githubGithubGetGithubBranches.js";
import { githubGithubGetGithubRepositories } from "../funcs/githubGithubGetGithubRepositories.js";
import { githubGithubGithubProviders } from "../funcs/githubGithubGithubProviders.js";
import { githubGithubOne } from "../funcs/githubGithubOne.js";
import { githubGithubTestConnection } from "../funcs/githubGithubTestConnection.js";
import { githubGithubUpdate } from "../funcs/githubGithubUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Github extends ClientSDK {
  async githubOne(
    security: operations.GithubOneSecurity,
    request: operations.GithubOneRequest,
    options?: RequestOptions,
  ): Promise<operations.GithubOneResponse> {
    return unwrapAsync(githubGithubOne(
      this,
      security,
      request,
      options,
    ));
  }

  async githubGetGithubRepositories(
    security: operations.GithubGetGithubRepositoriesSecurity,
    request: operations.GithubGetGithubRepositoriesRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(githubGithubGetGithubRepositories(
      this,
      security,
      request,
      options,
    ));
  }

  async githubGetGithubBranches(
    security: operations.GithubGetGithubBranchesSecurity,
    request: operations.GithubGetGithubBranchesRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(githubGithubGetGithubBranches(
      this,
      security,
      request,
      options,
    ));
  }

  async githubGithubProviders(
    security: operations.GithubGithubProvidersSecurity,
    options?: RequestOptions,
  ): Promise<operations.GithubGithubProvidersResponse> {
    return unwrapAsync(githubGithubGithubProviders(
      this,
      security,
      options,
    ));
  }

  async githubTestConnection(
    security: operations.GithubTestConnectionSecurity,
    request: operations.GithubTestConnectionRequest,
    options?: RequestOptions,
  ): Promise<operations.GithubTestConnectionResponse> {
    return unwrapAsync(githubGithubTestConnection(
      this,
      security,
      request,
      options,
    ));
  }

  async githubUpdate(
    security: operations.GithubUpdateSecurity,
    request: operations.GithubUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.GithubUpdateResponse> {
    return unwrapAsync(githubGithubUpdate(
      this,
      security,
      request,
      options,
    ));
  }
}
