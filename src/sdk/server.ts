/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { serverServerAll } from "../funcs/serverServerAll.js";
import { serverServerCount } from "../funcs/serverServerCount.js";
import { serverServerCreate } from "../funcs/serverServerCreate.js";
import { serverServerGetDefaultCommand } from "../funcs/serverServerGetDefaultCommand.js";
import { serverServerGetServerMetrics } from "../funcs/serverServerGetServerMetrics.js";
import { serverServerOne } from "../funcs/serverServerOne.js";
import { serverServerPublicIp } from "../funcs/serverServerPublicIp.js";
import { serverServerRemove } from "../funcs/serverServerRemove.js";
import { serverServerSecurity } from "../funcs/serverServerSecurity.js";
import { serverServerSetup } from "../funcs/serverServerSetup.js";
import { serverServerSetupMonitoring } from "../funcs/serverServerSetupMonitoring.js";
import { serverServerUpdate } from "../funcs/serverServerUpdate.js";
import { serverServerValidate } from "../funcs/serverServerValidate.js";
import { serverServerWithSSHKey } from "../funcs/serverServerWithSSHKey.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Server extends ClientSDK {
  async serverAll(
    security: operations.ServerAllSecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(serverServerAll(
      this,
      security,
      options,
    ));
  }

  async serverCount(
    security: operations.ServerCountSecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(serverServerCount(
      this,
      security,
      options,
    ));
  }

  async serverCreate(
    security: operations.ServerCreateSecurity,
    request: operations.ServerCreateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(serverServerCreate(
      this,
      security,
      request,
      options,
    ));
  }

  async serverGetDefaultCommand(
    security: operations.ServerGetDefaultCommandSecurity,
    request: operations.ServerGetDefaultCommandRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(serverServerGetDefaultCommand(
      this,
      security,
      request,
      options,
    ));
  }

  async serverGetServerMetrics(
    security: operations.ServerGetServerMetricsSecurity,
    request: operations.ServerGetServerMetricsRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(serverServerGetServerMetrics(
      this,
      security,
      request,
      options,
    ));
  }

  async serverOne(
    security: operations.ServerOneSecurity,
    request: operations.ServerOneRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(serverServerOne(
      this,
      security,
      request,
      options,
    ));
  }

  async serverPublicIp(
    security: operations.ServerPublicIpSecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(serverServerPublicIp(
      this,
      security,
      options,
    ));
  }

  async serverRemove(
    security: operations.ServerRemoveSecurity,
    request: operations.ServerRemoveRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(serverServerRemove(
      this,
      security,
      request,
      options,
    ));
  }

  async serverSecurity(
    security: operations.ServerSecuritySecurity,
    request: operations.ServerSecurityRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(serverServerSecurity(
      this,
      security,
      request,
      options,
    ));
  }

  async serverSetup(
    security: operations.ServerSetupSecurity,
    request: operations.ServerSetupRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(serverServerSetup(
      this,
      security,
      request,
      options,
    ));
  }

  async serverSetupMonitoring(
    security: operations.ServerSetupMonitoringSecurity,
    request: operations.ServerSetupMonitoringRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(serverServerSetupMonitoring(
      this,
      security,
      request,
      options,
    ));
  }

  async serverUpdate(
    security: operations.ServerUpdateSecurity,
    request: operations.ServerUpdateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(serverServerUpdate(
      this,
      security,
      request,
      options,
    ));
  }

  async serverValidate(
    security: operations.ServerValidateSecurity,
    request: operations.ServerValidateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(serverServerValidate(
      this,
      security,
      request,
      options,
    ));
  }

  async serverWithSSHKey(
    security: operations.ServerWithSSHKeySecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(serverServerWithSSHKey(
      this,
      security,
      options,
    ));
  }
}
