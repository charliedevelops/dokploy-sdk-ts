/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { serverCount } from "../funcs/serverCount.js";
import { serverCreate } from "../funcs/serverCreate.js";
import { serverGet } from "../funcs/serverGet.js";
import { serverGetAll } from "../funcs/serverGetAll.js";
import { serverGetDefaultCommand } from "../funcs/serverGetDefaultCommand.js";
import { serverGetSecurity } from "../funcs/serverGetSecurity.js";
import { serverGetServerMetrics } from "../funcs/serverGetServerMetrics.js";
import { serverPublicIp } from "../funcs/serverPublicIp.js";
import { serverRemove } from "../funcs/serverRemove.js";
import { serverSetup } from "../funcs/serverSetup.js";
import { serverSetupMonitoring } from "../funcs/serverSetupMonitoring.js";
import { serverUpdate } from "../funcs/serverUpdate.js";
import { serverValidate } from "../funcs/serverValidate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Server extends ClientSDK {
  async getAll(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(serverGetAll(
      this,
      options,
    ));
  }

  async count(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(serverCount(
      this,
      options,
    ));
  }

  async create(
    request: operations.ServerCreateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(serverCreate(
      this,
      request,
      options,
    ));
  }

  async getDefaultCommand(
    request: operations.ServerGetDefaultCommandRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(serverGetDefaultCommand(
      this,
      request,
      options,
    ));
  }

  async getServerMetrics(
    request: operations.ServerGetServerMetricsRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(serverGetServerMetrics(
      this,
      request,
      options,
    ));
  }

  async get(
    request: operations.ServerOneRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(serverGet(
      this,
      request,
      options,
    ));
  }

  async publicIp(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(serverPublicIp(
      this,
      options,
    ));
  }

  async remove(
    request: operations.ServerRemoveRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(serverRemove(
      this,
      request,
      options,
    ));
  }

  async getSecurity(
    request: operations.ServerSecurityRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(serverGetSecurity(
      this,
      request,
      options,
    ));
  }

  async setup(
    request: operations.ServerSetupRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(serverSetup(
      this,
      request,
      options,
    ));
  }

  async setupMonitoring(
    request: operations.ServerSetupMonitoringRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(serverSetupMonitoring(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.ServerUpdateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(serverUpdate(
      this,
      request,
      options,
    ));
  }

  async validate(
    request: operations.ServerValidateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(serverValidate(
      this,
      request,
      options,
    ));
  }
}
