/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { domainDomainByApplicationId } from "../funcs/domainDomainByApplicationId.js";
import { domainDomainByComposeId } from "../funcs/domainDomainByComposeId.js";
import { domainDomainCanGenerateTraefikMeDomains } from "../funcs/domainDomainCanGenerateTraefikMeDomains.js";
import { domainDomainCreate } from "../funcs/domainDomainCreate.js";
import { domainDomainDelete } from "../funcs/domainDomainDelete.js";
import { domainDomainGenerateDomain } from "../funcs/domainDomainGenerateDomain.js";
import { domainDomainOne } from "../funcs/domainDomainOne.js";
import { domainDomainUpdate } from "../funcs/domainDomainUpdate.js";
import { domainDomainValidateDomain } from "../funcs/domainDomainValidateDomain.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Domain extends ClientSDK {
  async domainCreate(
    security: operations.DomainCreateSecurity,
    request: operations.DomainCreateRequest,
    options?: RequestOptions,
  ): Promise<operations.DomainCreateResponse> {
    return unwrapAsync(domainDomainCreate(
      this,
      security,
      request,
      options,
    ));
  }

  async domainByApplicationId(
    security: operations.DomainByApplicationIdSecurity,
    request: operations.DomainByApplicationIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DomainByApplicationIdResponse> {
    return unwrapAsync(domainDomainByApplicationId(
      this,
      security,
      request,
      options,
    ));
  }

  async domainByComposeId(
    security: operations.DomainByComposeIdSecurity,
    request: operations.DomainByComposeIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DomainByComposeIdResponse> {
    return unwrapAsync(domainDomainByComposeId(
      this,
      security,
      request,
      options,
    ));
  }

  async domainGenerateDomain(
    security: operations.DomainGenerateDomainSecurity,
    request: operations.DomainGenerateDomainRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(domainDomainGenerateDomain(
      this,
      security,
      request,
      options,
    ));
  }

  async domainCanGenerateTraefikMeDomains(
    security: operations.DomainCanGenerateTraefikMeDomainsSecurity,
    request: operations.DomainCanGenerateTraefikMeDomainsRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(domainDomainCanGenerateTraefikMeDomains(
      this,
      security,
      request,
      options,
    ));
  }

  async domainUpdate(
    security: operations.DomainUpdateSecurity,
    request: operations.DomainUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.DomainUpdateResponse> {
    return unwrapAsync(domainDomainUpdate(
      this,
      security,
      request,
      options,
    ));
  }

  async domainOne(
    security: operations.DomainOneSecurity,
    request: operations.DomainOneRequest,
    options?: RequestOptions,
  ): Promise<operations.DomainOneResponse> {
    return unwrapAsync(domainDomainOne(
      this,
      security,
      request,
      options,
    ));
  }

  async domainDelete(
    security: operations.DomainDeleteSecurity,
    request: operations.DomainDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.DomainDeleteResponse> {
    return unwrapAsync(domainDomainDelete(
      this,
      security,
      request,
      options,
    ));
  }

  async domainValidateDomain(
    security: operations.DomainValidateDomainSecurity,
    request: operations.DomainValidateDomainRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(domainDomainValidateDomain(
      this,
      security,
      request,
      options,
    ));
  }
}
