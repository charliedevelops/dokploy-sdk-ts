/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { domainByApplicationId } from "../funcs/domainByApplicationId.js";
import { domainCanGenerateTraefikDomains } from "../funcs/domainCanGenerateTraefikDomains.js";
import { domainCreate } from "../funcs/domainCreate.js";
import { domainDelete } from "../funcs/domainDelete.js";
import { domainGenerateDomain } from "../funcs/domainGenerateDomain.js";
import { domainGetByComposeId } from "../funcs/domainGetByComposeId.js";
import { domainUpdate } from "../funcs/domainUpdate.js";
import { domainValidateDomain } from "../funcs/domainValidateDomain.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Domain extends ClientSDK {
  async byApplicationId(
    request: operations.DomainByApplicationIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DomainByApplicationIdResponse> {
    return unwrapAsync(domainByApplicationId(
      this,
      request,
      options,
    ));
  }

  async getByComposeId(
    request: operations.DomainByComposeIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DomainByComposeIdResponse> {
    return unwrapAsync(domainGetByComposeId(
      this,
      request,
      options,
    ));
  }

  async canGenerateTraefikDomains(
    request: operations.DomainCanGenerateTraefikMeDomainsRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(domainCanGenerateTraefikDomains(
      this,
      request,
      options,
    ));
  }

  async create(
    request: operations.DomainCreateRequest,
    options?: RequestOptions,
  ): Promise<operations.DomainCreateResponse> {
    return unwrapAsync(domainCreate(
      this,
      request,
      options,
    ));
  }

  async delete(
    request: operations.DomainDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.DomainDeleteResponse> {
    return unwrapAsync(domainDelete(
      this,
      request,
      options,
    ));
  }

  async generateDomain(
    request: operations.DomainGenerateDomainRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(domainGenerateDomain(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.DomainUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.DomainUpdateResponse> {
    return unwrapAsync(domainUpdate(
      this,
      request,
      options,
    ));
  }

  async validateDomain(
    request: operations.DomainValidateDomainRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(domainValidateDomain(
      this,
      request,
      options,
    ));
  }
}
