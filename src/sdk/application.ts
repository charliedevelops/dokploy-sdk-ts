/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { applicationCancelDeployment } from "../funcs/applicationCancelDeployment.js";
import { applicationCleanQueues } from "../funcs/applicationCleanQueues.js";
import { applicationCreate } from "../funcs/applicationCreate.js";
import { applicationDelete } from "../funcs/applicationDelete.js";
import { applicationDeploy } from "../funcs/applicationDeploy.js";
import { applicationDisconnectGitProvider } from "../funcs/applicationDisconnectGitProvider.js";
import { applicationGet } from "../funcs/applicationGet.js";
import { applicationMarkRunning } from "../funcs/applicationMarkRunning.js";
import { applicationReadAppMonitoring } from "../funcs/applicationReadAppMonitoring.js";
import { applicationRedeploy } from "../funcs/applicationRedeploy.js";
import { applicationReload } from "../funcs/applicationReload.js";
import { applicationSaveBitbucketProvider } from "../funcs/applicationSaveBitbucketProvider.js";
import { applicationSaveBuildType } from "../funcs/applicationSaveBuildType.js";
import { applicationSaveDockerProvider } from "../funcs/applicationSaveDockerProvider.js";
import { applicationSaveEnvironment } from "../funcs/applicationSaveEnvironment.js";
import { applicationSaveGiteaProvider } from "../funcs/applicationSaveGiteaProvider.js";
import { applicationSaveGitlabProvider } from "../funcs/applicationSaveGitlabProvider.js";
import { applicationSaveGitProdiver } from "../funcs/applicationSaveGitProdiver.js";
import { applicationStop } from "../funcs/applicationStop.js";
import { applicationUpdate } from "../funcs/applicationUpdate.js";
import { applicationUpdateTraefikConfig } from "../funcs/applicationUpdateTraefikConfig.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Application extends ClientSDK {
  async cancelDeployment(
    request: operations.ApplicationCancelDeploymentRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(applicationCancelDeployment(
      this,
      request,
      options,
    ));
  }

  async cleanQueues(
    request: operations.ApplicationCleanQueuesRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(applicationCleanQueues(
      this,
      request,
      options,
    ));
  }

  async create(
    request: operations.ApplicationCreateRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationCreateResponse> {
    return unwrapAsync(applicationCreate(
      this,
      request,
      options,
    ));
  }

  async delete(
    request: operations.ApplicationDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationDeleteResponse> {
    return unwrapAsync(applicationDelete(
      this,
      request,
      options,
    ));
  }

  async deploy(
    request: operations.ApplicationDeployRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(applicationDeploy(
      this,
      request,
      options,
    ));
  }

  async disconnectGitProvider(
    request: operations.ApplicationDisconnectGitProviderRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationDisconnectGitProviderResponse> {
    return unwrapAsync(applicationDisconnectGitProvider(
      this,
      request,
      options,
    ));
  }

  async markRunning(
    request: operations.ApplicationMarkRunningRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(applicationMarkRunning(
      this,
      request,
      options,
    ));
  }

  async get(
    request: operations.ApplicationOneRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationOneResponse> {
    return unwrapAsync(applicationGet(
      this,
      request,
      options,
    ));
  }

  async readAppMonitoring(
    request: operations.ApplicationReadAppMonitoringRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationReadAppMonitoringResponse> {
    return unwrapAsync(applicationReadAppMonitoring(
      this,
      request,
      options,
    ));
  }

  async redeploy(
    request: operations.ApplicationRedeployRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(applicationRedeploy(
      this,
      request,
      options,
    ));
  }

  async reload(
    request: operations.ApplicationReloadRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationReloadResponse> {
    return unwrapAsync(applicationReload(
      this,
      request,
      options,
    ));
  }

  async saveBitbucketProvider(
    request: operations.ApplicationSaveBitbucketProviderRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationSaveBitbucketProviderResponse> {
    return unwrapAsync(applicationSaveBitbucketProvider(
      this,
      request,
      options,
    ));
  }

  async saveBuildType(
    request: operations.ApplicationSaveBuildTypeRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationSaveBuildTypeResponse> {
    return unwrapAsync(applicationSaveBuildType(
      this,
      request,
      options,
    ));
  }

  async saveDockerProvider(
    request: operations.ApplicationSaveDockerProviderRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationSaveDockerProviderResponse> {
    return unwrapAsync(applicationSaveDockerProvider(
      this,
      request,
      options,
    ));
  }

  async saveEnvironment(
    request: operations.ApplicationSaveEnvironmentRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationSaveEnvironmentResponse> {
    return unwrapAsync(applicationSaveEnvironment(
      this,
      request,
      options,
    ));
  }

  async saveGitProdiver(
    request: operations.ApplicationSaveGitProdiverRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationSaveGitProdiverResponse> {
    return unwrapAsync(applicationSaveGitProdiver(
      this,
      request,
      options,
    ));
  }

  async saveGiteaProvider(
    request: operations.ApplicationSaveGiteaProviderRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationSaveGiteaProviderResponse> {
    return unwrapAsync(applicationSaveGiteaProvider(
      this,
      request,
      options,
    ));
  }

  async saveGitlabProvider(
    request: operations.ApplicationSaveGitlabProviderRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationSaveGitlabProviderResponse> {
    return unwrapAsync(applicationSaveGitlabProvider(
      this,
      request,
      options,
    ));
  }

  async stop(
    request: operations.ApplicationStopRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationStopResponse> {
    return unwrapAsync(applicationStop(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.ApplicationUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationUpdateResponse> {
    return unwrapAsync(applicationUpdate(
      this,
      request,
      options,
    ));
  }

  async updateTraefikConfig(
    request: operations.ApplicationUpdateTraefikConfigRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(applicationUpdateTraefikConfig(
      this,
      request,
      options,
    ));
  }
}
