/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { applicationApplicationCancelDeployment } from "../funcs/applicationApplicationCancelDeployment.js";
import { applicationApplicationCleanQueues } from "../funcs/applicationApplicationCleanQueues.js";
import { applicationApplicationCreate } from "../funcs/applicationApplicationCreate.js";
import { applicationApplicationDelete } from "../funcs/applicationApplicationDelete.js";
import { applicationApplicationDeploy } from "../funcs/applicationApplicationDeploy.js";
import { applicationApplicationDisconnectGitProvider } from "../funcs/applicationApplicationDisconnectGitProvider.js";
import { applicationApplicationMarkRunning } from "../funcs/applicationApplicationMarkRunning.js";
import { applicationApplicationMove } from "../funcs/applicationApplicationMove.js";
import { applicationApplicationOne } from "../funcs/applicationApplicationOne.js";
import { applicationApplicationReadAppMonitoring } from "../funcs/applicationApplicationReadAppMonitoring.js";
import { applicationApplicationReadTraefikConfig } from "../funcs/applicationApplicationReadTraefikConfig.js";
import { applicationApplicationRedeploy } from "../funcs/applicationApplicationRedeploy.js";
import { applicationApplicationRefreshToken } from "../funcs/applicationApplicationRefreshToken.js";
import { applicationApplicationReload } from "../funcs/applicationApplicationReload.js";
import { applicationApplicationSaveBitbucketProvider } from "../funcs/applicationApplicationSaveBitbucketProvider.js";
import { applicationApplicationSaveBuildType } from "../funcs/applicationApplicationSaveBuildType.js";
import { applicationApplicationSaveDockerProvider } from "../funcs/applicationApplicationSaveDockerProvider.js";
import { applicationApplicationSaveEnvironment } from "../funcs/applicationApplicationSaveEnvironment.js";
import { applicationApplicationSaveGiteaProvider } from "../funcs/applicationApplicationSaveGiteaProvider.js";
import { applicationApplicationSaveGithubProvider } from "../funcs/applicationApplicationSaveGithubProvider.js";
import { applicationApplicationSaveGitlabProvider } from "../funcs/applicationApplicationSaveGitlabProvider.js";
import { applicationApplicationSaveGitProdiver } from "../funcs/applicationApplicationSaveGitProdiver.js";
import { applicationApplicationStart } from "../funcs/applicationApplicationStart.js";
import { applicationApplicationStop } from "../funcs/applicationApplicationStop.js";
import { applicationApplicationUpdate } from "../funcs/applicationApplicationUpdate.js";
import { applicationApplicationUpdateTraefikConfig } from "../funcs/applicationApplicationUpdateTraefikConfig.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Application extends ClientSDK {
  async applicationCreate(
    security: operations.ApplicationCreateSecurity,
    request: operations.ApplicationCreateRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationCreateResponse> {
    return unwrapAsync(applicationApplicationCreate(
      this,
      security,
      request,
      options,
    ));
  }

  async applicationOne(
    security: operations.ApplicationOneSecurity,
    request: operations.ApplicationOneRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationOneResponse> {
    return unwrapAsync(applicationApplicationOne(
      this,
      security,
      request,
      options,
    ));
  }

  async applicationReload(
    security: operations.ApplicationReloadSecurity,
    request: operations.ApplicationReloadRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationReloadResponse> {
    return unwrapAsync(applicationApplicationReload(
      this,
      security,
      request,
      options,
    ));
  }

  async applicationDelete(
    security: operations.ApplicationDeleteSecurity,
    request: operations.ApplicationDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationDeleteResponse> {
    return unwrapAsync(applicationApplicationDelete(
      this,
      security,
      request,
      options,
    ));
  }

  async applicationStop(
    security: operations.ApplicationStopSecurity,
    request: operations.ApplicationStopRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationStopResponse> {
    return unwrapAsync(applicationApplicationStop(
      this,
      security,
      request,
      options,
    ));
  }

  async applicationStart(
    security: operations.ApplicationStartSecurity,
    request: operations.ApplicationStartRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationStartResponse> {
    return unwrapAsync(applicationApplicationStart(
      this,
      security,
      request,
      options,
    ));
  }

  async applicationRedeploy(
    security: operations.ApplicationRedeploySecurity,
    request: operations.ApplicationRedeployRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(applicationApplicationRedeploy(
      this,
      security,
      request,
      options,
    ));
  }

  async applicationSaveEnvironment(
    security: operations.ApplicationSaveEnvironmentSecurity,
    request: operations.ApplicationSaveEnvironmentRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationSaveEnvironmentResponse> {
    return unwrapAsync(applicationApplicationSaveEnvironment(
      this,
      security,
      request,
      options,
    ));
  }

  async applicationSaveBuildType(
    security: operations.ApplicationSaveBuildTypeSecurity,
    request: operations.ApplicationSaveBuildTypeRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationSaveBuildTypeResponse> {
    return unwrapAsync(applicationApplicationSaveBuildType(
      this,
      security,
      request,
      options,
    ));
  }

  async applicationSaveGithubProvider(
    security: operations.ApplicationSaveGithubProviderSecurity,
    request: operations.ApplicationSaveGithubProviderRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationSaveGithubProviderResponse> {
    return unwrapAsync(applicationApplicationSaveGithubProvider(
      this,
      security,
      request,
      options,
    ));
  }

  async applicationSaveGitlabProvider(
    security: operations.ApplicationSaveGitlabProviderSecurity,
    request: operations.ApplicationSaveGitlabProviderRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationSaveGitlabProviderResponse> {
    return unwrapAsync(applicationApplicationSaveGitlabProvider(
      this,
      security,
      request,
      options,
    ));
  }

  async applicationSaveBitbucketProvider(
    security: operations.ApplicationSaveBitbucketProviderSecurity,
    request: operations.ApplicationSaveBitbucketProviderRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationSaveBitbucketProviderResponse> {
    return unwrapAsync(applicationApplicationSaveBitbucketProvider(
      this,
      security,
      request,
      options,
    ));
  }

  async applicationSaveGiteaProvider(
    security: operations.ApplicationSaveGiteaProviderSecurity,
    request: operations.ApplicationSaveGiteaProviderRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationSaveGiteaProviderResponse> {
    return unwrapAsync(applicationApplicationSaveGiteaProvider(
      this,
      security,
      request,
      options,
    ));
  }

  async applicationSaveDockerProvider(
    security: operations.ApplicationSaveDockerProviderSecurity,
    request: operations.ApplicationSaveDockerProviderRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationSaveDockerProviderResponse> {
    return unwrapAsync(applicationApplicationSaveDockerProvider(
      this,
      security,
      request,
      options,
    ));
  }

  async applicationSaveGitProdiver(
    security: operations.ApplicationSaveGitProdiverSecurity,
    request: operations.ApplicationSaveGitProdiverRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationSaveGitProdiverResponse> {
    return unwrapAsync(applicationApplicationSaveGitProdiver(
      this,
      security,
      request,
      options,
    ));
  }

  async applicationDisconnectGitProvider(
    security: operations.ApplicationDisconnectGitProviderSecurity,
    request: operations.ApplicationDisconnectGitProviderRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationDisconnectGitProviderResponse> {
    return unwrapAsync(applicationApplicationDisconnectGitProvider(
      this,
      security,
      request,
      options,
    ));
  }

  async applicationMarkRunning(
    security: operations.ApplicationMarkRunningSecurity,
    request: operations.ApplicationMarkRunningRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(applicationApplicationMarkRunning(
      this,
      security,
      request,
      options,
    ));
  }

  async applicationUpdate(
    security: operations.ApplicationUpdateSecurity,
    request: operations.ApplicationUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationUpdateResponse> {
    return unwrapAsync(applicationApplicationUpdate(
      this,
      security,
      request,
      options,
    ));
  }

  async applicationRefreshToken(
    security: operations.ApplicationRefreshTokenSecurity,
    request: operations.ApplicationRefreshTokenRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(applicationApplicationRefreshToken(
      this,
      security,
      request,
      options,
    ));
  }

  async applicationDeploy(
    security: operations.ApplicationDeploySecurity,
    request: operations.ApplicationDeployRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(applicationApplicationDeploy(
      this,
      security,
      request,
      options,
    ));
  }

  async applicationCleanQueues(
    security: operations.ApplicationCleanQueuesSecurity,
    request: operations.ApplicationCleanQueuesRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(applicationApplicationCleanQueues(
      this,
      security,
      request,
      options,
    ));
  }

  async applicationReadTraefikConfig(
    security: operations.ApplicationReadTraefikConfigSecurity,
    request: operations.ApplicationReadTraefikConfigRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(applicationApplicationReadTraefikConfig(
      this,
      security,
      request,
      options,
    ));
  }

  async applicationUpdateTraefikConfig(
    security: operations.ApplicationUpdateTraefikConfigSecurity,
    request: operations.ApplicationUpdateTraefikConfigRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(applicationApplicationUpdateTraefikConfig(
      this,
      security,
      request,
      options,
    ));
  }

  async applicationReadAppMonitoring(
    security: operations.ApplicationReadAppMonitoringSecurity,
    request: operations.ApplicationReadAppMonitoringRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationReadAppMonitoringResponse> {
    return unwrapAsync(applicationApplicationReadAppMonitoring(
      this,
      security,
      request,
      options,
    ));
  }

  async applicationMove(
    security: operations.ApplicationMoveSecurity,
    request: operations.ApplicationMoveRequest,
    options?: RequestOptions,
  ): Promise<operations.ApplicationMoveResponse> {
    return unwrapAsync(applicationApplicationMove(
      this,
      security,
      request,
      options,
    ));
  }

  async applicationCancelDeployment(
    security: operations.ApplicationCancelDeploymentSecurity,
    request: operations.ApplicationCancelDeploymentRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(applicationApplicationCancelDeployment(
      this,
      security,
      request,
      options,
    ));
  }
}
