/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { projectProjectAll } from "../funcs/projectProjectAll.js";
import { projectProjectCreate } from "../funcs/projectProjectCreate.js";
import { projectProjectDuplicate } from "../funcs/projectProjectDuplicate.js";
import { projectProjectOne } from "../funcs/projectProjectOne.js";
import { projectProjectRemove } from "../funcs/projectProjectRemove.js";
import { projectProjectUpdate } from "../funcs/projectProjectUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Project extends ClientSDK {
  async projectAll(
    security: operations.ProjectAllSecurity,
    options?: RequestOptions,
  ): Promise<operations.ProjectAllResponse> {
    return unwrapAsync(projectProjectAll(
      this,
      security,
      options,
    ));
  }

  async projectCreate(
    security: operations.ProjectCreateSecurity,
    request: operations.ProjectCreateRequest,
    options?: RequestOptions,
  ): Promise<operations.ProjectCreateResponse> {
    return unwrapAsync(projectProjectCreate(
      this,
      security,
      request,
      options,
    ));
  }

  async projectDuplicate(
    security: operations.ProjectDuplicateSecurity,
    request: operations.ProjectDuplicateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(projectProjectDuplicate(
      this,
      security,
      request,
      options,
    ));
  }

  async projectOne(
    security: operations.ProjectOneSecurity,
    request: operations.ProjectOneRequest,
    options?: RequestOptions,
  ): Promise<operations.ProjectOneResponse> {
    return unwrapAsync(projectProjectOne(
      this,
      security,
      request,
      options,
    ));
  }

  async projectRemove(
    security: operations.ProjectRemoveSecurity,
    request: operations.ProjectRemoveRequest,
    options?: RequestOptions,
  ): Promise<operations.ProjectRemoveResponse> {
    return unwrapAsync(projectProjectRemove(
      this,
      security,
      request,
      options,
    ));
  }

  async projectUpdate(
    security: operations.ProjectUpdateSecurity,
    request: operations.ProjectUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.ProjectUpdateResponse> {
    return unwrapAsync(projectProjectUpdate(
      this,
      security,
      request,
      options,
    ));
  }
}
