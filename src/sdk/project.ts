/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { projectCreate } from "../funcs/projectCreate.js";
import { projectDuplicate } from "../funcs/projectDuplicate.js";
import { projectGet } from "../funcs/projectGet.js";
import { projectGetAll } from "../funcs/projectGetAll.js";
import { projectUpdate } from "../funcs/projectUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Project extends ClientSDK {
  async getAll(
    options?: RequestOptions,
  ): Promise<operations.ProjectAllResponse> {
    return unwrapAsync(projectGetAll(
      this,
      options,
    ));
  }

  async create(
    request: operations.ProjectCreateRequest,
    options?: RequestOptions,
  ): Promise<operations.ProjectCreateResponse> {
    return unwrapAsync(projectCreate(
      this,
      request,
      options,
    ));
  }

  async duplicate(
    request: operations.ProjectDuplicateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(projectDuplicate(
      this,
      request,
      options,
    ));
  }

  async get(
    request: operations.ProjectOneRequest,
    options?: RequestOptions,
  ): Promise<operations.ProjectOneResponse> {
    return unwrapAsync(projectGet(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.ProjectUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.ProjectUpdateResponse> {
    return unwrapAsync(projectUpdate(
      this,
      request,
      options,
    ));
  }
}
