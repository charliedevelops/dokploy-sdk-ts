/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { environmentByProjectId } from "../funcs/environmentByProjectId.js";
import { environmentCreate } from "../funcs/environmentCreate.js";
import { environmentDuplicate } from "../funcs/environmentDuplicate.js";
import { environmentGet } from "../funcs/environmentGet.js";
import { environmentRemove } from "../funcs/environmentRemove.js";
import { environmentUpdate } from "../funcs/environmentUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Environment extends ClientSDK {
  async byProjectId(
    request: operations.EnvironmentByProjectIdRequest,
    options?: RequestOptions,
  ): Promise<operations.EnvironmentByProjectIdResponse> {
    return unwrapAsync(environmentByProjectId(
      this,
      request,
      options,
    ));
  }

  async create(
    request: operations.EnvironmentCreateRequest,
    options?: RequestOptions,
  ): Promise<operations.EnvironmentCreateResponse> {
    return unwrapAsync(environmentCreate(
      this,
      request,
      options,
    ));
  }

  async duplicate(
    request: operations.EnvironmentDuplicateRequest,
    options?: RequestOptions,
  ): Promise<operations.EnvironmentDuplicateResponse> {
    return unwrapAsync(environmentDuplicate(
      this,
      request,
      options,
    ));
  }

  async get(
    request: operations.EnvironmentOneRequest,
    options?: RequestOptions,
  ): Promise<operations.EnvironmentOneResponse> {
    return unwrapAsync(environmentGet(
      this,
      request,
      options,
    ));
  }

  async remove(
    request: operations.EnvironmentRemoveRequest,
    options?: RequestOptions,
  ): Promise<operations.EnvironmentRemoveResponse> {
    return unwrapAsync(environmentRemove(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.EnvironmentUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.EnvironmentUpdateResponse> {
    return unwrapAsync(environmentUpdate(
      this,
      request,
      options,
    ));
  }
}
