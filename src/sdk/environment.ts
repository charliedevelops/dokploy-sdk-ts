/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { environmentEnvironmentByProjectId } from "../funcs/environmentEnvironmentByProjectId.js";
import { environmentEnvironmentCreate } from "../funcs/environmentEnvironmentCreate.js";
import { environmentEnvironmentDuplicate } from "../funcs/environmentEnvironmentDuplicate.js";
import { environmentEnvironmentOne } from "../funcs/environmentEnvironmentOne.js";
import { environmentEnvironmentRemove } from "../funcs/environmentEnvironmentRemove.js";
import { environmentEnvironmentUpdate } from "../funcs/environmentEnvironmentUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Environment extends ClientSDK {
  async environmentByProjectId(
    security: operations.EnvironmentByProjectIdSecurity,
    request: operations.EnvironmentByProjectIdRequest,
    options?: RequestOptions,
  ): Promise<operations.EnvironmentByProjectIdResponse> {
    return unwrapAsync(environmentEnvironmentByProjectId(
      this,
      security,
      request,
      options,
    ));
  }

  async environmentCreate(
    security: operations.EnvironmentCreateSecurity,
    request: operations.EnvironmentCreateRequest,
    options?: RequestOptions,
  ): Promise<operations.EnvironmentCreateResponse> {
    return unwrapAsync(environmentEnvironmentCreate(
      this,
      security,
      request,
      options,
    ));
  }

  async environmentDuplicate(
    security: operations.EnvironmentDuplicateSecurity,
    request: operations.EnvironmentDuplicateRequest,
    options?: RequestOptions,
  ): Promise<operations.EnvironmentDuplicateResponse> {
    return unwrapAsync(environmentEnvironmentDuplicate(
      this,
      security,
      request,
      options,
    ));
  }

  async environmentOne(
    security: operations.EnvironmentOneSecurity,
    request: operations.EnvironmentOneRequest,
    options?: RequestOptions,
  ): Promise<operations.EnvironmentOneResponse> {
    return unwrapAsync(environmentEnvironmentOne(
      this,
      security,
      request,
      options,
    ));
  }

  async environmentRemove(
    security: operations.EnvironmentRemoveSecurity,
    request: operations.EnvironmentRemoveRequest,
    options?: RequestOptions,
  ): Promise<operations.EnvironmentRemoveResponse> {
    return unwrapAsync(environmentEnvironmentRemove(
      this,
      security,
      request,
      options,
    ));
  }

  async environmentUpdate(
    security: operations.EnvironmentUpdateSecurity,
    request: operations.EnvironmentUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.EnvironmentUpdateResponse> {
    return unwrapAsync(environmentEnvironmentUpdate(
      this,
      security,
      request,
      options,
    ));
  }
}
