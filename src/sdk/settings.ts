/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { settingsAssignDomainServer } from "../funcs/settingsAssignDomainServer.js";
import { settingsCheckGpuStatus } from "../funcs/settingsCheckGpuStatus.js";
import { settingsCleanAll } from "../funcs/settingsCleanAll.js";
import { settingsCleanDockerBuilder } from "../funcs/settingsCleanDockerBuilder.js";
import { settingsCleanDockerPrune } from "../funcs/settingsCleanDockerPrune.js";
import { settingsCleanMonitoring } from "../funcs/settingsCleanMonitoring.js";
import { settingsCleanRedis } from "../funcs/settingsCleanRedis.js";
import { settingsCleanSshPrivateKey } from "../funcs/settingsCleanSshPrivateKey.js";
import { settingsCleanStoppedContainers } from "../funcs/settingsCleanStoppedContainers.js";
import { settingsCleanUnusedImages } from "../funcs/settingsCleanUnusedImages.js";
import { settingsCleanUnusedVolumes } from "../funcs/settingsCleanUnusedVolumes.js";
import { settingsGet } from "../funcs/settingsGet.js";
import { settingsGetDokployCloudIps } from "../funcs/settingsGetDokployCloudIps.js";
import { settingsGetDokployVersion } from "../funcs/settingsGetDokployVersion.js";
import { settingsGetIp } from "../funcs/settingsGetIp.js";
import { settingsGetLogCleanupStatus } from "../funcs/settingsGetLogCleanupStatus.js";
import { settingsGetOpenApiDocument } from "../funcs/settingsGetOpenApiDocument.js";
import { settingsGetReleaseTag } from "../funcs/settingsGetReleaseTag.js";
import { settingsGetTraefikPorts } from "../funcs/settingsGetTraefikPorts.js";
import { settingsGetUpdateData } from "../funcs/settingsGetUpdateData.js";
import { settingsHaveActivateRequests } from "../funcs/settingsHaveActivateRequests.js";
import { settingsHaveTraefikDashboardPortEnabled } from "../funcs/settingsHaveTraefikDashboardPortEnabled.js";
import { settingsIsCloud } from "../funcs/settingsIsCloud.js";
import { settingsIsUserSubscribed } from "../funcs/settingsIsUserSubscribed.js";
import { settingsReadDirectories } from "../funcs/settingsReadDirectories.js";
import { settingsReadMiddlewareTraefikConfig } from "../funcs/settingsReadMiddlewareTraefikConfig.js";
import { settingsReadTraefikConfig } from "../funcs/settingsReadTraefikConfig.js";
import { settingsReadTraefikEnv } from "../funcs/settingsReadTraefikEnv.js";
import { settingsReadTraefikFile } from "../funcs/settingsReadTraefikFile.js";
import { settingsReadWebserverTraefikConfig } from "../funcs/settingsReadWebserverTraefikConfig.js";
import { settingsReloadRedis } from "../funcs/settingsReloadRedis.js";
import { settingsReloadServer } from "../funcs/settingsReloadServer.js";
import { settingsReloadTraefik } from "../funcs/settingsReloadTraefik.js";
import { settingsSaveSshPrivateKey } from "../funcs/settingsSaveSshPrivateKey.js";
import { settingsSetupGpu } from "../funcs/settingsSetupGpu.js";
import { settingsToggleDashboard } from "../funcs/settingsToggleDashboard.js";
import { settingsToggleRequests } from "../funcs/settingsToggleRequests.js";
import { settingsUpdateDockerCleanup } from "../funcs/settingsUpdateDockerCleanup.js";
import { settingsUpdateLogCleanup } from "../funcs/settingsUpdateLogCleanup.js";
import { settingsUpdateMiddlewareTraefikConfig } from "../funcs/settingsUpdateMiddlewareTraefikConfig.js";
import { settingsUpdateServer } from "../funcs/settingsUpdateServer.js";
import { settingsUpdateTraefikConfig } from "../funcs/settingsUpdateTraefikConfig.js";
import { settingsUpdateTraefikFile } from "../funcs/settingsUpdateTraefikFile.js";
import { settingsUpdateTraefikPorts } from "../funcs/settingsUpdateTraefikPorts.js";
import { settingsUpdateWebServerTraefikConfig } from "../funcs/settingsUpdateWebServerTraefikConfig.js";
import { settingsWriteTraefikEnv } from "../funcs/settingsWriteTraefikEnv.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Settings extends ClientSDK {
  async assignDomainServer(
    request: operations.SettingsAssignDomainServerRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsAssignDomainServer(
      this,
      request,
      options,
    ));
  }

  async checkGpuStatus(
    request?: operations.SettingsCheckGPUStatusRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsCheckGpuStatus(
      this,
      request,
      options,
    ));
  }

  async cleanAll(
    request?: operations.SettingsCleanAllRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsCleanAll(
      this,
      request,
      options,
    ));
  }

  async cleanDockerBuilder(
    request?: operations.SettingsCleanDockerBuilderRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsCleanDockerBuilder(
      this,
      request,
      options,
    ));
  }

  async cleanDockerPrune(
    request?: operations.SettingsCleanDockerPruneRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsCleanDockerPrune(
      this,
      request,
      options,
    ));
  }

  async cleanMonitoring(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsCleanMonitoring(
      this,
      options,
    ));
  }

  async cleanRedis(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsCleanRedis(
      this,
      options,
    ));
  }

  async cleanSshPrivateKey(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsCleanSshPrivateKey(
      this,
      options,
    ));
  }

  async cleanStoppedContainers(
    request?: operations.SettingsCleanStoppedContainersRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsCleanStoppedContainers(
      this,
      request,
      options,
    ));
  }

  async cleanUnusedImages(
    request?: operations.SettingsCleanUnusedImagesRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsCleanUnusedImages(
      this,
      request,
      options,
    ));
  }

  async cleanUnusedVolumes(
    request?: operations.SettingsCleanUnusedVolumesRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsCleanUnusedVolumes(
      this,
      request,
      options,
    ));
  }

  async getDokployCloudIps(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsGetDokployCloudIps(
      this,
      options,
    ));
  }

  async getDokployVersion(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsGetDokployVersion(
      this,
      options,
    ));
  }

  async getIp(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsGetIp(
      this,
      options,
    ));
  }

  async getLogCleanupStatus(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsGetLogCleanupStatus(
      this,
      options,
    ));
  }

  async getOpenApiDocument(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsGetOpenApiDocument(
      this,
      options,
    ));
  }

  async getReleaseTag(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsGetReleaseTag(
      this,
      options,
    ));
  }

  async getTraefikPorts(
    request?: operations.SettingsGetTraefikPortsRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsGetTraefikPorts(
      this,
      request,
      options,
    ));
  }

  async getUpdateData(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsGetUpdateData(
      this,
      options,
    ));
  }

  async haveActivateRequests(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsHaveActivateRequests(
      this,
      options,
    ));
  }

  async haveTraefikDashboardPortEnabled(
    request?:
      | operations.SettingsHaveTraefikDashboardPortEnabledRequest
      | undefined,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsHaveTraefikDashboardPortEnabled(
      this,
      request,
      options,
    ));
  }

  async get(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsGet(
      this,
      options,
    ));
  }

  async isCloud(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsIsCloud(
      this,
      options,
    ));
  }

  async isUserSubscribed(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsIsUserSubscribed(
      this,
      options,
    ));
  }

  async readDirectories(
    request?: operations.SettingsReadDirectoriesRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsReadDirectories(
      this,
      request,
      options,
    ));
  }

  async readMiddlewareTraefikConfig(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsReadMiddlewareTraefikConfig(
      this,
      options,
    ));
  }

  async readTraefikConfig(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsReadTraefikConfig(
      this,
      options,
    ));
  }

  async readTraefikEnv(
    request?: operations.SettingsReadTraefikEnvRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsReadTraefikEnv(
      this,
      request,
      options,
    ));
  }

  async readTraefikFile(
    request: operations.SettingsReadTraefikFileRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsReadTraefikFile(
      this,
      request,
      options,
    ));
  }

  async readWebserverTraefikConfig(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsReadWebserverTraefikConfig(
      this,
      options,
    ));
  }

  async reloadRedis(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsReloadRedis(
      this,
      options,
    ));
  }

  async reloadServer(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsReloadServer(
      this,
      options,
    ));
  }

  async reloadTraefik(
    request?: operations.SettingsReloadTraefikRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsReloadTraefik(
      this,
      request,
      options,
    ));
  }

  async saveSshPrivateKey(
    request: operations.SettingsSaveSSHPrivateKeyRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSaveSshPrivateKey(
      this,
      request,
      options,
    ));
  }

  async setupGpu(
    request: operations.SettingsSetupGPURequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSetupGpu(
      this,
      request,
      options,
    ));
  }

  async toggleDashboard(
    request: operations.SettingsToggleDashboardRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsToggleDashboard(
      this,
      request,
      options,
    ));
  }

  async toggleRequests(
    request: operations.SettingsToggleRequestsRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsToggleRequests(
      this,
      request,
      options,
    ));
  }

  async updateDockerCleanup(
    request: operations.SettingsUpdateDockerCleanupRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsUpdateDockerCleanup(
      this,
      request,
      options,
    ));
  }

  async updateLogCleanup(
    request: operations.SettingsUpdateLogCleanupRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsUpdateLogCleanup(
      this,
      request,
      options,
    ));
  }

  async updateMiddlewareTraefikConfig(
    request: operations.SettingsUpdateMiddlewareTraefikConfigRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsUpdateMiddlewareTraefikConfig(
      this,
      request,
      options,
    ));
  }

  async updateServer(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsUpdateServer(
      this,
      options,
    ));
  }

  async updateTraefikConfig(
    request: operations.SettingsUpdateTraefikConfigRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsUpdateTraefikConfig(
      this,
      request,
      options,
    ));
  }

  async updateTraefikFile(
    request: operations.SettingsUpdateTraefikFileRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsUpdateTraefikFile(
      this,
      request,
      options,
    ));
  }

  async updateTraefikPorts(
    request: operations.SettingsUpdateTraefikPortsRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsUpdateTraefikPorts(
      this,
      request,
      options,
    ));
  }

  async updateWebServerTraefikConfig(
    request: operations.SettingsUpdateWebServerTraefikConfigRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsUpdateWebServerTraefikConfig(
      this,
      request,
      options,
    ));
  }

  async writeTraefikEnv(
    request: operations.SettingsWriteTraefikEnvRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsWriteTraefikEnv(
      this,
      request,
      options,
    ));
  }
}
