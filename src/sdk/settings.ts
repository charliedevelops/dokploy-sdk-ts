/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { settingsSettingsAssignDomainServer } from "../funcs/settingsSettingsAssignDomainServer.js";
import { settingsSettingsCheckGPUStatus } from "../funcs/settingsSettingsCheckGPUStatus.js";
import { settingsSettingsCleanAll } from "../funcs/settingsSettingsCleanAll.js";
import { settingsSettingsCleanDockerBuilder } from "../funcs/settingsSettingsCleanDockerBuilder.js";
import { settingsSettingsCleanDockerPrune } from "../funcs/settingsSettingsCleanDockerPrune.js";
import { settingsSettingsCleanMonitoring } from "../funcs/settingsSettingsCleanMonitoring.js";
import { settingsSettingsCleanRedis } from "../funcs/settingsSettingsCleanRedis.js";
import { settingsSettingsCleanSSHPrivateKey } from "../funcs/settingsSettingsCleanSSHPrivateKey.js";
import { settingsSettingsCleanStoppedContainers } from "../funcs/settingsSettingsCleanStoppedContainers.js";
import { settingsSettingsCleanUnusedImages } from "../funcs/settingsSettingsCleanUnusedImages.js";
import { settingsSettingsCleanUnusedVolumes } from "../funcs/settingsSettingsCleanUnusedVolumes.js";
import { settingsSettingsGetDokployCloudIps } from "../funcs/settingsSettingsGetDokployCloudIps.js";
import { settingsSettingsGetDokployVersion } from "../funcs/settingsSettingsGetDokployVersion.js";
import { settingsSettingsGetIp } from "../funcs/settingsSettingsGetIp.js";
import { settingsSettingsGetLogCleanupStatus } from "../funcs/settingsSettingsGetLogCleanupStatus.js";
import { settingsSettingsGetOpenApiDocument } from "../funcs/settingsSettingsGetOpenApiDocument.js";
import { settingsSettingsGetReleaseTag } from "../funcs/settingsSettingsGetReleaseTag.js";
import { settingsSettingsGetTraefikPorts } from "../funcs/settingsSettingsGetTraefikPorts.js";
import { settingsSettingsGetUpdateData } from "../funcs/settingsSettingsGetUpdateData.js";
import { settingsSettingsHaveActivateRequests } from "../funcs/settingsSettingsHaveActivateRequests.js";
import { settingsSettingsHaveTraefikDashboardPortEnabled } from "../funcs/settingsSettingsHaveTraefikDashboardPortEnabled.js";
import { settingsSettingsHealth } from "../funcs/settingsSettingsHealth.js";
import { settingsSettingsIsCloud } from "../funcs/settingsSettingsIsCloud.js";
import { settingsSettingsIsUserSubscribed } from "../funcs/settingsSettingsIsUserSubscribed.js";
import { settingsSettingsReadDirectories } from "../funcs/settingsSettingsReadDirectories.js";
import { settingsSettingsReadMiddlewareTraefikConfig } from "../funcs/settingsSettingsReadMiddlewareTraefikConfig.js";
import { settingsSettingsReadTraefikConfig } from "../funcs/settingsSettingsReadTraefikConfig.js";
import { settingsSettingsReadTraefikEnv } from "../funcs/settingsSettingsReadTraefikEnv.js";
import { settingsSettingsReadTraefikFile } from "../funcs/settingsSettingsReadTraefikFile.js";
import { settingsSettingsReadWebServerTraefikConfig } from "../funcs/settingsSettingsReadWebServerTraefikConfig.js";
import { settingsSettingsReloadRedis } from "../funcs/settingsSettingsReloadRedis.js";
import { settingsSettingsReloadServer } from "../funcs/settingsSettingsReloadServer.js";
import { settingsSettingsReloadTraefik } from "../funcs/settingsSettingsReloadTraefik.js";
import { settingsSettingsSaveSSHPrivateKey } from "../funcs/settingsSettingsSaveSSHPrivateKey.js";
import { settingsSettingsSetupGPU } from "../funcs/settingsSettingsSetupGPU.js";
import { settingsSettingsToggleDashboard } from "../funcs/settingsSettingsToggleDashboard.js";
import { settingsSettingsToggleRequests } from "../funcs/settingsSettingsToggleRequests.js";
import { settingsSettingsUpdateDockerCleanup } from "../funcs/settingsSettingsUpdateDockerCleanup.js";
import { settingsSettingsUpdateLogCleanup } from "../funcs/settingsSettingsUpdateLogCleanup.js";
import { settingsSettingsUpdateMiddlewareTraefikConfig } from "../funcs/settingsSettingsUpdateMiddlewareTraefikConfig.js";
import { settingsSettingsUpdateServer } from "../funcs/settingsSettingsUpdateServer.js";
import { settingsSettingsUpdateTraefikConfig } from "../funcs/settingsSettingsUpdateTraefikConfig.js";
import { settingsSettingsUpdateTraefikFile } from "../funcs/settingsSettingsUpdateTraefikFile.js";
import { settingsSettingsUpdateTraefikPorts } from "../funcs/settingsSettingsUpdateTraefikPorts.js";
import { settingsSettingsUpdateWebServerTraefikConfig } from "../funcs/settingsSettingsUpdateWebServerTraefikConfig.js";
import { settingsSettingsWriteTraefikEnv } from "../funcs/settingsSettingsWriteTraefikEnv.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Settings extends ClientSDK {
  async settingsReloadServer(
    security: operations.SettingsReloadServerSecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsReloadServer(
      this,
      security,
      options,
    ));
  }

  async settingsCleanRedis(
    security: operations.SettingsCleanRedisSecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsCleanRedis(
      this,
      security,
      options,
    ));
  }

  async settingsReloadRedis(
    security: operations.SettingsReloadRedisSecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsReloadRedis(
      this,
      security,
      options,
    ));
  }

  async settingsReloadTraefik(
    security: operations.SettingsReloadTraefikSecurity,
    request?: operations.SettingsReloadTraefikRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsReloadTraefik(
      this,
      security,
      request,
      options,
    ));
  }

  async settingsToggleDashboard(
    security: operations.SettingsToggleDashboardSecurity,
    request: operations.SettingsToggleDashboardRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsToggleDashboard(
      this,
      security,
      request,
      options,
    ));
  }

  async settingsCleanUnusedImages(
    security: operations.SettingsCleanUnusedImagesSecurity,
    request?: operations.SettingsCleanUnusedImagesRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsCleanUnusedImages(
      this,
      security,
      request,
      options,
    ));
  }

  async settingsCleanUnusedVolumes(
    security: operations.SettingsCleanUnusedVolumesSecurity,
    request?: operations.SettingsCleanUnusedVolumesRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsCleanUnusedVolumes(
      this,
      security,
      request,
      options,
    ));
  }

  async settingsCleanStoppedContainers(
    security: operations.SettingsCleanStoppedContainersSecurity,
    request?: operations.SettingsCleanStoppedContainersRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsCleanStoppedContainers(
      this,
      security,
      request,
      options,
    ));
  }

  async settingsCleanDockerBuilder(
    security: operations.SettingsCleanDockerBuilderSecurity,
    request?: operations.SettingsCleanDockerBuilderRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsCleanDockerBuilder(
      this,
      security,
      request,
      options,
    ));
  }

  async settingsCleanDockerPrune(
    security: operations.SettingsCleanDockerPruneSecurity,
    request?: operations.SettingsCleanDockerPruneRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsCleanDockerPrune(
      this,
      security,
      request,
      options,
    ));
  }

  async settingsCleanAll(
    security: operations.SettingsCleanAllSecurity,
    request?: operations.SettingsCleanAllRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsCleanAll(
      this,
      security,
      request,
      options,
    ));
  }

  async settingsCleanMonitoring(
    security: operations.SettingsCleanMonitoringSecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsCleanMonitoring(
      this,
      security,
      options,
    ));
  }

  async settingsSaveSSHPrivateKey(
    security: operations.SettingsSaveSSHPrivateKeySecurity,
    request: operations.SettingsSaveSSHPrivateKeyRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsSaveSSHPrivateKey(
      this,
      security,
      request,
      options,
    ));
  }

  async settingsAssignDomainServer(
    security: operations.SettingsAssignDomainServerSecurity,
    request: operations.SettingsAssignDomainServerRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsAssignDomainServer(
      this,
      security,
      request,
      options,
    ));
  }

  async settingsCleanSSHPrivateKey(
    security: operations.SettingsCleanSSHPrivateKeySecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsCleanSSHPrivateKey(
      this,
      security,
      options,
    ));
  }

  async settingsUpdateDockerCleanup(
    security: operations.SettingsUpdateDockerCleanupSecurity,
    request: operations.SettingsUpdateDockerCleanupRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsUpdateDockerCleanup(
      this,
      security,
      request,
      options,
    ));
  }

  async settingsReadTraefikConfig(
    security: operations.SettingsReadTraefikConfigSecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsReadTraefikConfig(
      this,
      security,
      options,
    ));
  }

  async settingsUpdateTraefikConfig(
    security: operations.SettingsUpdateTraefikConfigSecurity,
    request: operations.SettingsUpdateTraefikConfigRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsUpdateTraefikConfig(
      this,
      security,
      request,
      options,
    ));
  }

  async settingsReadWebServerTraefikConfig(
    security: operations.SettingsReadWebServerTraefikConfigSecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsReadWebServerTraefikConfig(
      this,
      security,
      options,
    ));
  }

  async settingsUpdateWebServerTraefikConfig(
    security: operations.SettingsUpdateWebServerTraefikConfigSecurity,
    request: operations.SettingsUpdateWebServerTraefikConfigRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsUpdateWebServerTraefikConfig(
      this,
      security,
      request,
      options,
    ));
  }

  async settingsReadMiddlewareTraefikConfig(
    security: operations.SettingsReadMiddlewareTraefikConfigSecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsReadMiddlewareTraefikConfig(
      this,
      security,
      options,
    ));
  }

  async settingsUpdateMiddlewareTraefikConfig(
    security: operations.SettingsUpdateMiddlewareTraefikConfigSecurity,
    request: operations.SettingsUpdateMiddlewareTraefikConfigRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsUpdateMiddlewareTraefikConfig(
      this,
      security,
      request,
      options,
    ));
  }

  async settingsGetUpdateData(
    security: operations.SettingsGetUpdateDataSecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsGetUpdateData(
      this,
      security,
      options,
    ));
  }

  async settingsUpdateServer(
    security: operations.SettingsUpdateServerSecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsUpdateServer(
      this,
      security,
      options,
    ));
  }

  async settingsGetDokployVersion(
    security: operations.SettingsGetDokployVersionSecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsGetDokployVersion(
      this,
      security,
      options,
    ));
  }

  async settingsGetReleaseTag(
    security: operations.SettingsGetReleaseTagSecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsGetReleaseTag(
      this,
      security,
      options,
    ));
  }

  async settingsReadDirectories(
    security: operations.SettingsReadDirectoriesSecurity,
    request?: operations.SettingsReadDirectoriesRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsReadDirectories(
      this,
      security,
      request,
      options,
    ));
  }

  async settingsUpdateTraefikFile(
    security: operations.SettingsUpdateTraefikFileSecurity,
    request: operations.SettingsUpdateTraefikFileRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsUpdateTraefikFile(
      this,
      security,
      request,
      options,
    ));
  }

  async settingsReadTraefikFile(
    security: operations.SettingsReadTraefikFileSecurity,
    request: operations.SettingsReadTraefikFileRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsReadTraefikFile(
      this,
      security,
      request,
      options,
    ));
  }

  async settingsGetIp(
    security: operations.SettingsGetIpSecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsGetIp(
      this,
      security,
      options,
    ));
  }

  async settingsGetOpenApiDocument(
    security: operations.SettingsGetOpenApiDocumentSecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsGetOpenApiDocument(
      this,
      security,
      options,
    ));
  }

  async settingsReadTraefikEnv(
    security: operations.SettingsReadTraefikEnvSecurity,
    request?: operations.SettingsReadTraefikEnvRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsReadTraefikEnv(
      this,
      security,
      request,
      options,
    ));
  }

  async settingsWriteTraefikEnv(
    security: operations.SettingsWriteTraefikEnvSecurity,
    request: operations.SettingsWriteTraefikEnvRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsWriteTraefikEnv(
      this,
      security,
      request,
      options,
    ));
  }

  async settingsHaveTraefikDashboardPortEnabled(
    security: operations.SettingsHaveTraefikDashboardPortEnabledSecurity,
    request?:
      | operations.SettingsHaveTraefikDashboardPortEnabledRequest
      | undefined,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsHaveTraefikDashboardPortEnabled(
      this,
      security,
      request,
      options,
    ));
  }

  async settingsHaveActivateRequests(
    security: operations.SettingsHaveActivateRequestsSecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsHaveActivateRequests(
      this,
      security,
      options,
    ));
  }

  async settingsToggleRequests(
    security: operations.SettingsToggleRequestsSecurity,
    request: operations.SettingsToggleRequestsRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsToggleRequests(
      this,
      security,
      request,
      options,
    ));
  }

  async settingsIsCloud(
    security: operations.SettingsIsCloudSecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsIsCloud(
      this,
      security,
      options,
    ));
  }

  async settingsIsUserSubscribed(
    security: operations.SettingsIsUserSubscribedSecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsIsUserSubscribed(
      this,
      security,
      options,
    ));
  }

  async settingsHealth(
    security: operations.SettingsHealthSecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsHealth(
      this,
      security,
      options,
    ));
  }

  async settingsSetupGPU(
    security: operations.SettingsSetupGPUSecurity,
    request: operations.SettingsSetupGPURequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsSetupGPU(
      this,
      security,
      request,
      options,
    ));
  }

  async settingsCheckGPUStatus(
    security: operations.SettingsCheckGPUStatusSecurity,
    request?: operations.SettingsCheckGPUStatusRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsCheckGPUStatus(
      this,
      security,
      request,
      options,
    ));
  }

  async settingsUpdateTraefikPorts(
    security: operations.SettingsUpdateTraefikPortsSecurity,
    request: operations.SettingsUpdateTraefikPortsRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsUpdateTraefikPorts(
      this,
      security,
      request,
      options,
    ));
  }

  async settingsGetTraefikPorts(
    security: operations.SettingsGetTraefikPortsSecurity,
    request?: operations.SettingsGetTraefikPortsRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsGetTraefikPorts(
      this,
      security,
      request,
      options,
    ));
  }

  async settingsUpdateLogCleanup(
    security: operations.SettingsUpdateLogCleanupSecurity,
    request: operations.SettingsUpdateLogCleanupRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsUpdateLogCleanup(
      this,
      security,
      request,
      options,
    ));
  }

  async settingsGetLogCleanupStatus(
    security: operations.SettingsGetLogCleanupStatusSecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsGetLogCleanupStatus(
      this,
      security,
      options,
    ));
  }

  async settingsGetDokployCloudIps(
    security: operations.SettingsGetDokployCloudIpsSecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(settingsSettingsGetDokployCloudIps(
      this,
      security,
      options,
    ));
  }
}
