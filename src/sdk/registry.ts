/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { registryRegistryAll } from "../funcs/registryRegistryAll.js";
import { registryRegistryCreate } from "../funcs/registryRegistryCreate.js";
import { registryRegistryOne } from "../funcs/registryRegistryOne.js";
import { registryRegistryRemove } from "../funcs/registryRegistryRemove.js";
import { registryRegistryTestRegistry } from "../funcs/registryRegistryTestRegistry.js";
import { registryRegistryUpdate } from "../funcs/registryRegistryUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Registry extends ClientSDK {
  async registryCreate(
    security: operations.RegistryCreateSecurity,
    request: operations.RegistryCreateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(registryRegistryCreate(
      this,
      security,
      request,
      options,
    ));
  }

  async registryRemove(
    security: operations.RegistryRemoveSecurity,
    request: operations.RegistryRemoveRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(registryRegistryRemove(
      this,
      security,
      request,
      options,
    ));
  }

  async registryUpdate(
    security: operations.RegistryUpdateSecurity,
    request: operations.RegistryUpdateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(registryRegistryUpdate(
      this,
      security,
      request,
      options,
    ));
  }

  async registryAll(
    security: operations.RegistryAllSecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(registryRegistryAll(
      this,
      security,
      options,
    ));
  }

  async registryOne(
    security: operations.RegistryOneSecurity,
    request: operations.RegistryOneRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(registryRegistryOne(
      this,
      security,
      request,
      options,
    ));
  }

  async registryTestRegistry(
    security: operations.RegistryTestRegistrySecurity,
    request: operations.RegistryTestRegistryRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(registryRegistryTestRegistry(
      this,
      security,
      request,
      options,
    ));
  }
}
