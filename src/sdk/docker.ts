/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { dockerGetConfig } from "../funcs/dockerGetConfig.js";
import { dockerGetContainers } from "../funcs/dockerGetContainers.js";
import { dockerGetContainersByAppLabel } from "../funcs/dockerGetContainersByAppLabel.js";
import { dockerGetContainersByAppNameMatch } from "../funcs/dockerGetContainersByAppNameMatch.js";
import { dockerRestartContainer } from "../funcs/dockerRestartContainer.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { DockerGet } from "./dockerget.js";

export class Docker extends ClientSDK {
  private _get?: DockerGet;
  get get(): DockerGet {
    return (this._get ??= new DockerGet(this._options));
  }

  async getConfig(
    request: operations.DockerGetConfigRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(dockerGetConfig(
      this,
      request,
      options,
    ));
  }

  async getContainers(
    request?: operations.DockerGetContainersRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(dockerGetContainers(
      this,
      request,
      options,
    ));
  }

  async getContainersByAppLabel(
    request: operations.DockerGetContainersByAppLabelRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(dockerGetContainersByAppLabel(
      this,
      request,
      options,
    ));
  }

  async getContainersByAppNameMatch(
    request: operations.DockerGetContainersByAppNameMatchRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(dockerGetContainersByAppNameMatch(
      this,
      request,
      options,
    ));
  }

  async restartContainer(
    request: operations.DockerRestartContainerRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(dockerRestartContainer(
      this,
      request,
      options,
    ));
  }
}
