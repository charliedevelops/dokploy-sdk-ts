/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { userAssignPermissions } from "../funcs/userAssignPermissions.js";
import { userCheckUserOrganizations } from "../funcs/userCheckUserOrganizations.js";
import { userCreateApiKey } from "../funcs/userCreateApiKey.js";
import { userDeleteApiKey } from "../funcs/userDeleteApiKey.js";
import { userGenerateToken } from "../funcs/userGenerateToken.js";
import { userGet } from "../funcs/userGet.js";
import { userGetAll } from "../funcs/userGetAll.js";
import { userGetBackups } from "../funcs/userGetBackups.js";
import { userGetContainerMetrics } from "../funcs/userGetContainerMetrics.js";
import { userGetInvitations } from "../funcs/userGetInvitations.js";
import { userGetMetricsToken } from "../funcs/userGetMetricsToken.js";
import { userGetOne } from "../funcs/userGetOne.js";
import { userGetServerMetrics } from "../funcs/userGetServerMetrics.js";
import { userGetUserByToken } from "../funcs/userGetUserByToken.js";
import { userHaveRootAccess } from "../funcs/userHaveRootAccess.js";
import { userSendInvitation } from "../funcs/userSendInvitation.js";
import { userUpdate } from "../funcs/userUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class User extends ClientSDK {
  async getAll(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(userGetAll(
      this,
      options,
    ));
  }

  async assignPermissions(
    request: operations.UserAssignPermissionsRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(userAssignPermissions(
      this,
      request,
      options,
    ));
  }

  async checkUserOrganizations(
    request: operations.UserCheckUserOrganizationsRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(userCheckUserOrganizations(
      this,
      request,
      options,
    ));
  }

  async createApiKey(
    request: operations.UserCreateApiKeyRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(userCreateApiKey(
      this,
      request,
      options,
    ));
  }

  async deleteApiKey(
    request: operations.UserDeleteApiKeyRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(userDeleteApiKey(
      this,
      request,
      options,
    ));
  }

  async generateToken(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(userGenerateToken(
      this,
      options,
    ));
  }

  async get(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(userGet(
      this,
      options,
    ));
  }

  async getBackups(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(userGetBackups(
      this,
      options,
    ));
  }

  async getContainerMetrics(
    request: operations.UserGetContainerMetricsRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(userGetContainerMetrics(
      this,
      request,
      options,
    ));
  }

  async getInvitations(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(userGetInvitations(
      this,
      options,
    ));
  }

  async getMetricsToken(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(userGetMetricsToken(
      this,
      options,
    ));
  }

  async getServerMetrics(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(userGetServerMetrics(
      this,
      options,
    ));
  }

  async getUserByToken(
    request: operations.UserGetUserByTokenRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(userGetUserByToken(
      this,
      request,
      options,
    ));
  }

  async haveRootAccess(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(userHaveRootAccess(
      this,
      options,
    ));
  }

  async getOne(
    request: operations.UserOneRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(userGetOne(
      this,
      request,
      options,
    ));
  }

  async sendInvitation(
    request: operations.UserSendInvitationRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(userSendInvitation(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.UserUpdateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(userUpdate(
      this,
      request,
      options,
    ));
  }
}
