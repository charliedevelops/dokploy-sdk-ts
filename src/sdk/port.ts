/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { portCreate } from "../funcs/portCreate.js";
import { portDelete } from "../funcs/portDelete.js";
import { portGet } from "../funcs/portGet.js";
import { portUpdate } from "../funcs/portUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Port extends ClientSDK {
  async create(
    request: operations.PortCreateRequest,
    options?: RequestOptions,
  ): Promise<operations.PortCreateResponse> {
    return unwrapAsync(portCreate(
      this,
      request,
      options,
    ));
  }

  async delete(
    request: operations.PortDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.PortDeleteResponse> {
    return unwrapAsync(portDelete(
      this,
      request,
      options,
    ));
  }

  async get(
    request: operations.PortOneRequest,
    options?: RequestOptions,
  ): Promise<operations.PortOneResponse> {
    return unwrapAsync(portGet(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.PortUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.PortUpdateResponse> {
    return unwrapAsync(portUpdate(
      this,
      request,
      options,
    ));
  }
}
