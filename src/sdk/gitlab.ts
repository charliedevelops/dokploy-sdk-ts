/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { gitlabCreate } from "../funcs/gitlabCreate.js";
import { gitlabGetBranches } from "../funcs/gitlabGetBranches.js";
import { gitlabGetGitlabRepositories } from "../funcs/gitlabGetGitlabRepositories.js";
import { gitlabGetProviders } from "../funcs/gitlabGetProviders.js";
import { gitlabOne } from "../funcs/gitlabOne.js";
import { gitlabTestConnection } from "../funcs/gitlabTestConnection.js";
import { gitlabUpdate } from "../funcs/gitlabUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Gitlab extends ClientSDK {
  async create(
    request: operations.GitlabCreateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(gitlabCreate(
      this,
      request,
      options,
    ));
  }

  async getBranches(
    request: operations.GitlabGetGitlabBranchesRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(gitlabGetBranches(
      this,
      request,
      options,
    ));
  }

  async getGitlabRepositories(
    request: operations.GitlabGetGitlabRepositoriesRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(gitlabGetGitlabRepositories(
      this,
      request,
      options,
    ));
  }

  async getProviders(
    options?: RequestOptions,
  ): Promise<operations.GitlabGitlabProvidersResponse> {
    return unwrapAsync(gitlabGetProviders(
      this,
      options,
    ));
  }

  async one(
    request: operations.GitlabOneRequest,
    options?: RequestOptions,
  ): Promise<operations.GitlabOneResponse> {
    return unwrapAsync(gitlabOne(
      this,
      request,
      options,
    ));
  }

  async testConnection(
    request: operations.GitlabTestConnectionRequest,
    options?: RequestOptions,
  ): Promise<operations.GitlabTestConnectionResponse> {
    return unwrapAsync(gitlabTestConnection(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.GitlabUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.GitlabUpdateResponse> {
    return unwrapAsync(gitlabUpdate(
      this,
      request,
      options,
    ));
  }
}
