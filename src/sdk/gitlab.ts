/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { gitlabGitlabCreate } from "../funcs/gitlabGitlabCreate.js";
import { gitlabGitlabGetGitlabBranches } from "../funcs/gitlabGitlabGetGitlabBranches.js";
import { gitlabGitlabGetGitlabRepositories } from "../funcs/gitlabGitlabGetGitlabRepositories.js";
import { gitlabGitlabGitlabProviders } from "../funcs/gitlabGitlabGitlabProviders.js";
import { gitlabGitlabOne } from "../funcs/gitlabGitlabOne.js";
import { gitlabGitlabTestConnection } from "../funcs/gitlabGitlabTestConnection.js";
import { gitlabGitlabUpdate } from "../funcs/gitlabGitlabUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Gitlab extends ClientSDK {
  async gitlabCreate(
    security: operations.GitlabCreateSecurity,
    request: operations.GitlabCreateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(gitlabGitlabCreate(
      this,
      security,
      request,
      options,
    ));
  }

  async gitlabOne(
    security: operations.GitlabOneSecurity,
    request: operations.GitlabOneRequest,
    options?: RequestOptions,
  ): Promise<operations.GitlabOneResponse> {
    return unwrapAsync(gitlabGitlabOne(
      this,
      security,
      request,
      options,
    ));
  }

  async gitlabGitlabProviders(
    security: operations.GitlabGitlabProvidersSecurity,
    options?: RequestOptions,
  ): Promise<operations.GitlabGitlabProvidersResponse> {
    return unwrapAsync(gitlabGitlabGitlabProviders(
      this,
      security,
      options,
    ));
  }

  async gitlabGetGitlabRepositories(
    security: operations.GitlabGetGitlabRepositoriesSecurity,
    request: operations.GitlabGetGitlabRepositoriesRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(gitlabGitlabGetGitlabRepositories(
      this,
      security,
      request,
      options,
    ));
  }

  async gitlabGetGitlabBranches(
    security: operations.GitlabGetGitlabBranchesSecurity,
    request: operations.GitlabGetGitlabBranchesRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(gitlabGitlabGetGitlabBranches(
      this,
      security,
      request,
      options,
    ));
  }

  async gitlabTestConnection(
    security: operations.GitlabTestConnectionSecurity,
    request: operations.GitlabTestConnectionRequest,
    options?: RequestOptions,
  ): Promise<operations.GitlabTestConnectionResponse> {
    return unwrapAsync(gitlabGitlabTestConnection(
      this,
      security,
      request,
      options,
    ));
  }

  async gitlabUpdate(
    security: operations.GitlabUpdateSecurity,
    request: operations.GitlabUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.GitlabUpdateResponse> {
    return unwrapAsync(gitlabGitlabUpdate(
      this,
      security,
      request,
      options,
    ));
  }
}
