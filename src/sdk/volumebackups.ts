/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { volumeBackupsCreate } from "../funcs/volumeBackupsCreate.js";
import { volumeBackupsDelete } from "../funcs/volumeBackupsDelete.js";
import { volumeBackupsGet } from "../funcs/volumeBackupsGet.js";
import { volumeBackupsList } from "../funcs/volumeBackupsList.js";
import { volumeBackupsRunManually } from "../funcs/volumeBackupsRunManually.js";
import { volumeBackupsUpdate } from "../funcs/volumeBackupsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class VolumeBackups extends ClientSDK {
  async create(
    request: operations.VolumeBackupsCreateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(volumeBackupsCreate(
      this,
      request,
      options,
    ));
  }

  async delete(
    request: operations.VolumeBackupsDeleteRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(volumeBackupsDelete(
      this,
      request,
      options,
    ));
  }

  async list(
    request: operations.VolumeBackupsListRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(volumeBackupsList(
      this,
      request,
      options,
    ));
  }

  async runManually(
    request: operations.VolumeBackupsRunManuallyRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(volumeBackupsRunManually(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.VolumeBackupsUpdateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(volumeBackupsUpdate(
      this,
      request,
      options,
    ));
  }

  async get(
    request: operations.VolumeBackupsOneRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(volumeBackupsGet(
      this,
      request,
      options,
    ));
  }
}
