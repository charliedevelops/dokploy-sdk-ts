/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { volumeBackupsVolumeBackupsCreate } from "../funcs/volumeBackupsVolumeBackupsCreate.js";
import { volumeBackupsVolumeBackupsDelete } from "../funcs/volumeBackupsVolumeBackupsDelete.js";
import { volumeBackupsVolumeBackupsList } from "../funcs/volumeBackupsVolumeBackupsList.js";
import { volumeBackupsVolumeBackupsOne } from "../funcs/volumeBackupsVolumeBackupsOne.js";
import { volumeBackupsVolumeBackupsRunManually } from "../funcs/volumeBackupsVolumeBackupsRunManually.js";
import { volumeBackupsVolumeBackupsUpdate } from "../funcs/volumeBackupsVolumeBackupsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class VolumeBackups extends ClientSDK {
  async volumeBackupsCreate(
    security: operations.VolumeBackupsCreateSecurity,
    request: operations.VolumeBackupsCreateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(volumeBackupsVolumeBackupsCreate(
      this,
      security,
      request,
      options,
    ));
  }

  async volumeBackupsDelete(
    security: operations.VolumeBackupsDeleteSecurity,
    request: operations.VolumeBackupsDeleteRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(volumeBackupsVolumeBackupsDelete(
      this,
      security,
      request,
      options,
    ));
  }

  async volumeBackupsList(
    security: operations.VolumeBackupsListSecurity,
    request: operations.VolumeBackupsListRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(volumeBackupsVolumeBackupsList(
      this,
      security,
      request,
      options,
    ));
  }

  async volumeBackupsOne(
    security: operations.VolumeBackupsOneSecurity,
    request: operations.VolumeBackupsOneRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(volumeBackupsVolumeBackupsOne(
      this,
      security,
      request,
      options,
    ));
  }

  async volumeBackupsRunManually(
    security: operations.VolumeBackupsRunManuallySecurity,
    request: operations.VolumeBackupsRunManuallyRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(volumeBackupsVolumeBackupsRunManually(
      this,
      security,
      request,
      options,
    ));
  }

  async volumeBackupsUpdate(
    security: operations.VolumeBackupsUpdateSecurity,
    request: operations.VolumeBackupsUpdateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(volumeBackupsVolumeBackupsUpdate(
      this,
      security,
      request,
      options,
    ));
  }
}
