/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { destinationDestinationAll } from "../funcs/destinationDestinationAll.js";
import { destinationDestinationCreate } from "../funcs/destinationDestinationCreate.js";
import { destinationDestinationOne } from "../funcs/destinationDestinationOne.js";
import { destinationDestinationRemove } from "../funcs/destinationDestinationRemove.js";
import { destinationDestinationTestConnection } from "../funcs/destinationDestinationTestConnection.js";
import { destinationDestinationUpdate } from "../funcs/destinationDestinationUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Destination extends ClientSDK {
  async destinationCreate(
    security: operations.DestinationCreateSecurity,
    request: operations.DestinationCreateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(destinationDestinationCreate(
      this,
      security,
      request,
      options,
    ));
  }

  async destinationTestConnection(
    security: operations.DestinationTestConnectionSecurity,
    request: operations.DestinationTestConnectionRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(destinationDestinationTestConnection(
      this,
      security,
      request,
      options,
    ));
  }

  async destinationOne(
    security: operations.DestinationOneSecurity,
    request: operations.DestinationOneRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(destinationDestinationOne(
      this,
      security,
      request,
      options,
    ));
  }

  async destinationAll(
    security: operations.DestinationAllSecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(destinationDestinationAll(
      this,
      security,
      options,
    ));
  }

  async destinationRemove(
    security: operations.DestinationRemoveSecurity,
    request: operations.DestinationRemoveRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(destinationDestinationRemove(
      this,
      security,
      request,
      options,
    ));
  }

  async destinationUpdate(
    security: operations.DestinationUpdateSecurity,
    request: operations.DestinationUpdateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(destinationDestinationUpdate(
      this,
      security,
      request,
      options,
    ));
  }
}
