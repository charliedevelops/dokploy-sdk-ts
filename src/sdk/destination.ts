/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { destinationCreate } from "../funcs/destinationCreate.js";
import { destinationGet } from "../funcs/destinationGet.js";
import { destinationGetAll } from "../funcs/destinationGetAll.js";
import { destinationRemove } from "../funcs/destinationRemove.js";
import { destinationTestConnection } from "../funcs/destinationTestConnection.js";
import { destinationUpdate } from "../funcs/destinationUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Destination extends ClientSDK {
  async getAll(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(destinationGetAll(
      this,
      options,
    ));
  }

  async create(
    request: operations.DestinationCreateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(destinationCreate(
      this,
      request,
      options,
    ));
  }

  async get(
    request: operations.DestinationOneRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(destinationGet(
      this,
      request,
      options,
    ));
  }

  async remove(
    request: operations.DestinationRemoveRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(destinationRemove(
      this,
      request,
      options,
    ));
  }

  async testConnection(
    request: operations.DestinationTestConnectionRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(destinationTestConnection(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.DestinationUpdateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(destinationUpdate(
      this,
      request,
      options,
    ));
  }
}
