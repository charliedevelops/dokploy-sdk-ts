/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { postgresPostgresChangeStatus } from "../funcs/postgresPostgresChangeStatus.js";
import { postgresPostgresCreate } from "../funcs/postgresPostgresCreate.js";
import { postgresPostgresDeploy } from "../funcs/postgresPostgresDeploy.js";
import { postgresPostgresMove } from "../funcs/postgresPostgresMove.js";
import { postgresPostgresOne } from "../funcs/postgresPostgresOne.js";
import { postgresPostgresRebuild } from "../funcs/postgresPostgresRebuild.js";
import { postgresPostgresReload } from "../funcs/postgresPostgresReload.js";
import { postgresPostgresRemove } from "../funcs/postgresPostgresRemove.js";
import { postgresPostgresSaveEnvironment } from "../funcs/postgresPostgresSaveEnvironment.js";
import { postgresPostgresSaveExternalPort } from "../funcs/postgresPostgresSaveExternalPort.js";
import { postgresPostgresStart } from "../funcs/postgresPostgresStart.js";
import { postgresPostgresStop } from "../funcs/postgresPostgresStop.js";
import { postgresPostgresUpdate } from "../funcs/postgresPostgresUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Postgres extends ClientSDK {
  async postgresCreate(
    security: operations.PostgresCreateSecurity,
    request: operations.PostgresCreateRequest,
    options?: RequestOptions,
  ): Promise<operations.PostgresCreateResponse> {
    return unwrapAsync(postgresPostgresCreate(
      this,
      security,
      request,
      options,
    ));
  }

  async postgresOne(
    security: operations.PostgresOneSecurity,
    request: operations.PostgresOneRequest,
    options?: RequestOptions,
  ): Promise<operations.PostgresOneResponse> {
    return unwrapAsync(postgresPostgresOne(
      this,
      security,
      request,
      options,
    ));
  }

  async postgresStart(
    security: operations.PostgresStartSecurity,
    request: operations.PostgresStartRequest,
    options?: RequestOptions,
  ): Promise<operations.PostgresStartResponse> {
    return unwrapAsync(postgresPostgresStart(
      this,
      security,
      request,
      options,
    ));
  }

  async postgresStop(
    security: operations.PostgresStopSecurity,
    request: operations.PostgresStopRequest,
    options?: RequestOptions,
  ): Promise<operations.PostgresStopResponse> {
    return unwrapAsync(postgresPostgresStop(
      this,
      security,
      request,
      options,
    ));
  }

  async postgresSaveExternalPort(
    security: operations.PostgresSaveExternalPortSecurity,
    request: operations.PostgresSaveExternalPortRequest,
    options?: RequestOptions,
  ): Promise<operations.PostgresSaveExternalPortResponse> {
    return unwrapAsync(postgresPostgresSaveExternalPort(
      this,
      security,
      request,
      options,
    ));
  }

  async postgresDeploy(
    security: operations.PostgresDeploySecurity,
    request: operations.PostgresDeployRequest,
    options?: RequestOptions,
  ): Promise<operations.PostgresDeployResponse> {
    return unwrapAsync(postgresPostgresDeploy(
      this,
      security,
      request,
      options,
    ));
  }

  async postgresChangeStatus(
    security: operations.PostgresChangeStatusSecurity,
    request: operations.PostgresChangeStatusRequest,
    options?: RequestOptions,
  ): Promise<operations.PostgresChangeStatusResponse> {
    return unwrapAsync(postgresPostgresChangeStatus(
      this,
      security,
      request,
      options,
    ));
  }

  async postgresRemove(
    security: operations.PostgresRemoveSecurity,
    request: operations.PostgresRemoveRequest,
    options?: RequestOptions,
  ): Promise<operations.PostgresRemoveResponse> {
    return unwrapAsync(postgresPostgresRemove(
      this,
      security,
      request,
      options,
    ));
  }

  async postgresSaveEnvironment(
    security: operations.PostgresSaveEnvironmentSecurity,
    request: operations.PostgresSaveEnvironmentRequest,
    options?: RequestOptions,
  ): Promise<operations.PostgresSaveEnvironmentResponse> {
    return unwrapAsync(postgresPostgresSaveEnvironment(
      this,
      security,
      request,
      options,
    ));
  }

  async postgresReload(
    security: operations.PostgresReloadSecurity,
    request: operations.PostgresReloadRequest,
    options?: RequestOptions,
  ): Promise<operations.PostgresReloadResponse> {
    return unwrapAsync(postgresPostgresReload(
      this,
      security,
      request,
      options,
    ));
  }

  async postgresUpdate(
    security: operations.PostgresUpdateSecurity,
    request: operations.PostgresUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.PostgresUpdateResponse> {
    return unwrapAsync(postgresPostgresUpdate(
      this,
      security,
      request,
      options,
    ));
  }

  async postgresMove(
    security: operations.PostgresMoveSecurity,
    request: operations.PostgresMoveRequest,
    options?: RequestOptions,
  ): Promise<operations.PostgresMoveResponse> {
    return unwrapAsync(postgresPostgresMove(
      this,
      security,
      request,
      options,
    ));
  }

  async postgresRebuild(
    security: operations.PostgresRebuildSecurity,
    request: operations.PostgresRebuildRequest,
    options?: RequestOptions,
  ): Promise<operations.PostgresRebuildResponse> {
    return unwrapAsync(postgresPostgresRebuild(
      this,
      security,
      request,
      options,
    ));
  }
}
