/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { postgresChangeStatus } from "../funcs/postgresChangeStatus.js";
import { postgresCreate } from "../funcs/postgresCreate.js";
import { postgresDeploy } from "../funcs/postgresDeploy.js";
import { postgresGet } from "../funcs/postgresGet.js";
import { postgresMove } from "../funcs/postgresMove.js";
import { postgresRebuild } from "../funcs/postgresRebuild.js";
import { postgresReload } from "../funcs/postgresReload.js";
import { postgresRemove } from "../funcs/postgresRemove.js";
import { postgresSaveEnvironment } from "../funcs/postgresSaveEnvironment.js";
import { postgresSaveExternalPort } from "../funcs/postgresSaveExternalPort.js";
import { postgresStart } from "../funcs/postgresStart.js";
import { postgresStop } from "../funcs/postgresStop.js";
import { postgresUpdate } from "../funcs/postgresUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Postgres extends ClientSDK {
  async changeStatus(
    request: operations.PostgresChangeStatusRequest,
    options?: RequestOptions,
  ): Promise<operations.PostgresChangeStatusResponse> {
    return unwrapAsync(postgresChangeStatus(
      this,
      request,
      options,
    ));
  }

  async create(
    request: operations.PostgresCreateRequest,
    options?: RequestOptions,
  ): Promise<operations.PostgresCreateResponse> {
    return unwrapAsync(postgresCreate(
      this,
      request,
      options,
    ));
  }

  async deploy(
    request: operations.PostgresDeployRequest,
    options?: RequestOptions,
  ): Promise<operations.PostgresDeployResponse> {
    return unwrapAsync(postgresDeploy(
      this,
      request,
      options,
    ));
  }

  async move(
    request: operations.PostgresMoveRequest,
    options?: RequestOptions,
  ): Promise<operations.PostgresMoveResponse> {
    return unwrapAsync(postgresMove(
      this,
      request,
      options,
    ));
  }

  async get(
    request: operations.PostgresOneRequest,
    options?: RequestOptions,
  ): Promise<operations.PostgresOneResponse> {
    return unwrapAsync(postgresGet(
      this,
      request,
      options,
    ));
  }

  async rebuild(
    request: operations.PostgresRebuildRequest,
    options?: RequestOptions,
  ): Promise<operations.PostgresRebuildResponse> {
    return unwrapAsync(postgresRebuild(
      this,
      request,
      options,
    ));
  }

  async reload(
    request: operations.PostgresReloadRequest,
    options?: RequestOptions,
  ): Promise<operations.PostgresReloadResponse> {
    return unwrapAsync(postgresReload(
      this,
      request,
      options,
    ));
  }

  async remove(
    request: operations.PostgresRemoveRequest,
    options?: RequestOptions,
  ): Promise<operations.PostgresRemoveResponse> {
    return unwrapAsync(postgresRemove(
      this,
      request,
      options,
    ));
  }

  async saveEnvironment(
    request: operations.PostgresSaveEnvironmentRequest,
    options?: RequestOptions,
  ): Promise<operations.PostgresSaveEnvironmentResponse> {
    return unwrapAsync(postgresSaveEnvironment(
      this,
      request,
      options,
    ));
  }

  async saveExternalPort(
    request: operations.PostgresSaveExternalPortRequest,
    options?: RequestOptions,
  ): Promise<operations.PostgresSaveExternalPortResponse> {
    return unwrapAsync(postgresSaveExternalPort(
      this,
      request,
      options,
    ));
  }

  async start(
    request: operations.PostgresStartRequest,
    options?: RequestOptions,
  ): Promise<operations.PostgresStartResponse> {
    return unwrapAsync(postgresStart(
      this,
      request,
      options,
    ));
  }

  async stop(
    request: operations.PostgresStopRequest,
    options?: RequestOptions,
  ): Promise<operations.PostgresStopResponse> {
    return unwrapAsync(postgresStop(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.PostgresUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.PostgresUpdateResponse> {
    return unwrapAsync(postgresUpdate(
      this,
      request,
      options,
    ));
  }
}
