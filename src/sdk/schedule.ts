/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { scheduleScheduleCreate } from "../funcs/scheduleScheduleCreate.js";
import { scheduleScheduleDelete } from "../funcs/scheduleScheduleDelete.js";
import { scheduleScheduleList } from "../funcs/scheduleScheduleList.js";
import { scheduleScheduleOne } from "../funcs/scheduleScheduleOne.js";
import { scheduleScheduleRunManually } from "../funcs/scheduleScheduleRunManually.js";
import { scheduleScheduleUpdate } from "../funcs/scheduleScheduleUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Schedule extends ClientSDK {
  async scheduleCreate(
    security: operations.ScheduleCreateSecurity,
    request: operations.ScheduleCreateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(scheduleScheduleCreate(
      this,
      security,
      request,
      options,
    ));
  }

  async scheduleUpdate(
    security: operations.ScheduleUpdateSecurity,
    request: operations.ScheduleUpdateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(scheduleScheduleUpdate(
      this,
      security,
      request,
      options,
    ));
  }

  async scheduleDelete(
    security: operations.ScheduleDeleteSecurity,
    request: operations.ScheduleDeleteRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(scheduleScheduleDelete(
      this,
      security,
      request,
      options,
    ));
  }

  async scheduleList(
    security: operations.ScheduleListSecurity,
    request: operations.ScheduleListRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(scheduleScheduleList(
      this,
      security,
      request,
      options,
    ));
  }

  async scheduleOne(
    security: operations.ScheduleOneSecurity,
    request: operations.ScheduleOneRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(scheduleScheduleOne(
      this,
      security,
      request,
      options,
    ));
  }

  async scheduleRunManually(
    security: operations.ScheduleRunManuallySecurity,
    request: operations.ScheduleRunManuallyRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(scheduleScheduleRunManually(
      this,
      security,
      request,
      options,
    ));
  }
}
