/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { backupCreate } from "../funcs/backupCreate.js";
import { backupListFiles } from "../funcs/backupListFiles.js";
import { backupManualBackupCompose } from "../funcs/backupManualBackupCompose.js";
import { backupManualBackupMariadb } from "../funcs/backupManualBackupMariadb.js";
import { backupManualBackupMongo } from "../funcs/backupManualBackupMongo.js";
import { backupManualBackupMySql } from "../funcs/backupManualBackupMySql.js";
import { backupManualBackupPostgres } from "../funcs/backupManualBackupPostgres.js";
import { backupManualBackupWebServer } from "../funcs/backupManualBackupWebServer.js";
import { backupOne } from "../funcs/backupOne.js";
import { backupRemove } from "../funcs/backupRemove.js";
import { backupUpdate } from "../funcs/backupUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Backup extends ClientSDK {
  async create(
    request: operations.BackupCreateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(backupCreate(
      this,
      request,
      options,
    ));
  }

  async listFiles(
    request: operations.BackupListBackupFilesRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(backupListFiles(
      this,
      request,
      options,
    ));
  }

  async manualBackupCompose(
    request: operations.BackupManualBackupComposeRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(backupManualBackupCompose(
      this,
      request,
      options,
    ));
  }

  async manualBackupMariadb(
    request: operations.BackupManualBackupMariadbRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(backupManualBackupMariadb(
      this,
      request,
      options,
    ));
  }

  async manualBackupMongo(
    request: operations.BackupManualBackupMongoRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(backupManualBackupMongo(
      this,
      request,
      options,
    ));
  }

  async manualBackupMySql(
    request: operations.BackupManualBackupMySqlRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(backupManualBackupMySql(
      this,
      request,
      options,
    ));
  }

  async manualBackupPostgres(
    request: operations.BackupManualBackupPostgresRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(backupManualBackupPostgres(
      this,
      request,
      options,
    ));
  }

  async manualBackupWebServer(
    request: operations.BackupManualBackupWebServerRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(backupManualBackupWebServer(
      this,
      request,
      options,
    ));
  }

  async one(
    request: operations.BackupOneRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(backupOne(
      this,
      request,
      options,
    ));
  }

  async remove(
    request: operations.BackupRemoveRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(backupRemove(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.BackupUpdateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(backupUpdate(
      this,
      request,
      options,
    ));
  }
}
