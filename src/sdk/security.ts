/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { securityCreate } from "../funcs/securityCreate.js";
import { securityDelete } from "../funcs/securityDelete.js";
import { securityGet } from "../funcs/securityGet.js";
import { securityUpdate } from "../funcs/securityUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Security extends ClientSDK {
  async create(
    request: operations.SecurityCreateRequest,
    options?: RequestOptions,
  ): Promise<operations.SecurityCreateResponse> {
    return unwrapAsync(securityCreate(
      this,
      request,
      options,
    ));
  }

  async delete(
    request: operations.SecurityDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.SecurityDeleteResponse> {
    return unwrapAsync(securityDelete(
      this,
      request,
      options,
    ));
  }

  async get(
    request: operations.SecurityOneRequest,
    options?: RequestOptions,
  ): Promise<operations.SecurityOneResponse> {
    return unwrapAsync(securityGet(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.SecurityUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.SecurityUpdateResponse> {
    return unwrapAsync(securityUpdate(
      this,
      request,
      options,
    ));
  }
}
