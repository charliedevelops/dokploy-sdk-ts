/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { deploymentDeploymentAll } from "../funcs/deploymentDeploymentAll.js";
import { deploymentDeploymentAllByCompose } from "../funcs/deploymentDeploymentAllByCompose.js";
import { deploymentDeploymentAllByServer } from "../funcs/deploymentDeploymentAllByServer.js";
import { deploymentDeploymentAllByType } from "../funcs/deploymentDeploymentAllByType.js";
import { deploymentDeploymentKillProcess } from "../funcs/deploymentDeploymentKillProcess.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Deployment extends ClientSDK {
  async deploymentAll(
    security: operations.DeploymentAllSecurity,
    request: operations.DeploymentAllRequest,
    options?: RequestOptions,
  ): Promise<operations.DeploymentAllResponse> {
    return unwrapAsync(deploymentDeploymentAll(
      this,
      security,
      request,
      options,
    ));
  }

  async deploymentAllByCompose(
    security: operations.DeploymentAllByComposeSecurity,
    request: operations.DeploymentAllByComposeRequest,
    options?: RequestOptions,
  ): Promise<operations.DeploymentAllByComposeResponse> {
    return unwrapAsync(deploymentDeploymentAllByCompose(
      this,
      security,
      request,
      options,
    ));
  }

  async deploymentAllByServer(
    security: operations.DeploymentAllByServerSecurity,
    request: operations.DeploymentAllByServerRequest,
    options?: RequestOptions,
  ): Promise<operations.DeploymentAllByServerResponse> {
    return unwrapAsync(deploymentDeploymentAllByServer(
      this,
      security,
      request,
      options,
    ));
  }

  async deploymentAllByType(
    security: operations.DeploymentAllByTypeSecurity,
    request: operations.DeploymentAllByTypeRequest,
    options?: RequestOptions,
  ): Promise<operations.DeploymentAllByTypeResponse> {
    return unwrapAsync(deploymentDeploymentAllByType(
      this,
      security,
      request,
      options,
    ));
  }

  async deploymentKillProcess(
    security: operations.DeploymentKillProcessSecurity,
    request: operations.DeploymentKillProcessRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(deploymentDeploymentKillProcess(
      this,
      security,
      request,
      options,
    ));
  }
}
