/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { redirectsCreate } from "../funcs/redirectsCreate.js";
import { redirectsDelete } from "../funcs/redirectsDelete.js";
import { redirectsGet } from "../funcs/redirectsGet.js";
import { redirectsUpdate } from "../funcs/redirectsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Redirects extends ClientSDK {
  async create(
    request: operations.RedirectsCreateRequest,
    options?: RequestOptions,
  ): Promise<operations.RedirectsCreateResponse> {
    return unwrapAsync(redirectsCreate(
      this,
      request,
      options,
    ));
  }

  async delete(
    request: operations.RedirectsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.RedirectsDeleteResponse> {
    return unwrapAsync(redirectsDelete(
      this,
      request,
      options,
    ));
  }

  async get(
    request: operations.RedirectsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.RedirectsOneResponse> {
    return unwrapAsync(redirectsGet(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.RedirectsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.RedirectsUpdateResponse> {
    return unwrapAsync(redirectsUpdate(
      this,
      request,
      options,
    ));
  }
}
