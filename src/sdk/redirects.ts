/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { redirectsRedirectsCreate } from "../funcs/redirectsRedirectsCreate.js";
import { redirectsRedirectsDelete } from "../funcs/redirectsRedirectsDelete.js";
import { redirectsRedirectsOne } from "../funcs/redirectsRedirectsOne.js";
import { redirectsRedirectsUpdate } from "../funcs/redirectsRedirectsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Redirects extends ClientSDK {
  async redirectsCreate(
    security: operations.RedirectsCreateSecurity,
    request: operations.RedirectsCreateRequest,
    options?: RequestOptions,
  ): Promise<operations.RedirectsCreateResponse> {
    return unwrapAsync(redirectsRedirectsCreate(
      this,
      security,
      request,
      options,
    ));
  }

  async redirectsOne(
    security: operations.RedirectsOneSecurity,
    request: operations.RedirectsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.RedirectsOneResponse> {
    return unwrapAsync(redirectsRedirectsOne(
      this,
      security,
      request,
      options,
    ));
  }

  async redirectsDelete(
    security: operations.RedirectsDeleteSecurity,
    request: operations.RedirectsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.RedirectsDeleteResponse> {
    return unwrapAsync(redirectsRedirectsDelete(
      this,
      security,
      request,
      options,
    ));
  }

  async redirectsUpdate(
    security: operations.RedirectsUpdateSecurity,
    request: operations.RedirectsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.RedirectsUpdateResponse> {
    return unwrapAsync(redirectsRedirectsUpdate(
      this,
      security,
      request,
      options,
    ));
  }
}
