/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { certificatesCreate } from "../funcs/certificatesCreate.js";
import { certificatesGet } from "../funcs/certificatesGet.js";
import { certificatesGetAll } from "../funcs/certificatesGetAll.js";
import { certificatesRemove } from "../funcs/certificatesRemove.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Certificates extends ClientSDK {
  async getAll(
    options?: RequestOptions,
  ): Promise<operations.CertificatesAllResponse> {
    return unwrapAsync(certificatesGetAll(
      this,
      options,
    ));
  }

  async create(
    request: operations.CertificatesCreateRequest,
    options?: RequestOptions,
  ): Promise<operations.CertificatesCreateResponse> {
    return unwrapAsync(certificatesCreate(
      this,
      request,
      options,
    ));
  }

  async get(
    request: operations.CertificatesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.CertificatesOneResponse> {
    return unwrapAsync(certificatesGet(
      this,
      request,
      options,
    ));
  }

  async remove(
    request: operations.CertificatesRemoveRequest,
    options?: RequestOptions,
  ): Promise<operations.CertificatesRemoveResponse> {
    return unwrapAsync(certificatesRemove(
      this,
      request,
      options,
    ));
  }
}
