/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { mountsMountsAllNamedByApplicationId } from "../funcs/mountsMountsAllNamedByApplicationId.js";
import { mountsMountsCreate } from "../funcs/mountsMountsCreate.js";
import { mountsMountsOne } from "../funcs/mountsMountsOne.js";
import { mountsMountsRemove } from "../funcs/mountsMountsRemove.js";
import { mountsMountsUpdate } from "../funcs/mountsMountsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Mounts extends ClientSDK {
  async mountsAllNamedByApplicationId(
    security: operations.MountsAllNamedByApplicationIdSecurity,
    request: operations.MountsAllNamedByApplicationIdRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(mountsMountsAllNamedByApplicationId(
      this,
      security,
      request,
      options,
    ));
  }

  async mountsCreate(
    security: operations.MountsCreateSecurity,
    request: operations.MountsCreateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(mountsMountsCreate(
      this,
      security,
      request,
      options,
    ));
  }

  async mountsOne(
    security: operations.MountsOneSecurity,
    request: operations.MountsOneRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(mountsMountsOne(
      this,
      security,
      request,
      options,
    ));
  }

  async mountsRemove(
    security: operations.MountsRemoveSecurity,
    request: operations.MountsRemoveRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(mountsMountsRemove(
      this,
      security,
      request,
      options,
    ));
  }

  async mountsUpdate(
    security: operations.MountsUpdateSecurity,
    request: operations.MountsUpdateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(mountsMountsUpdate(
      this,
      security,
      request,
      options,
    ));
  }
}
