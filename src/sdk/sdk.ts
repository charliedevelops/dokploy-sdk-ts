/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClientSDK } from "../lib/sdks.js";
import { Admin } from "./admin.js";
import { Ai } from "./ai.js";
import { Application } from "./application.js";
import { Backup } from "./backup.js";
import { Bitbucket } from "./bitbucket.js";
import { Certificates } from "./certificates.js";
import { Cluster } from "./cluster.js";
import { Compose } from "./compose.js";
import { Deployment } from "./deployment.js";
import { Destination } from "./destination.js";
import { Docker } from "./docker.js";
import { Domain } from "./domain.js";
import { Environment } from "./environment.js";
import { Gitea } from "./gitea.js";
import { Github } from "./github.js";
import { Gitlab } from "./gitlab.js";
import { GitProvider } from "./gitprovider.js";
import { Mariadb } from "./mariadb.js";
import { Mongo } from "./mongo.js";
import { Mounts } from "./mounts.js";
import { Mysql } from "./mysql.js";
import { Notification } from "./notification.js";
import { Organization } from "./organization.js";
import { Port } from "./port.js";
import { Postgres } from "./postgres.js";
import { PreviewDeployment } from "./previewdeployment.js";
import { Project } from "./project.js";
import { Redirects } from "./redirects.js";
import { Redis } from "./redis.js";
import { Registry } from "./registry.js";
import { Rollback } from "./rollback.js";
import { Schedule } from "./schedule.js";
import { Security } from "./security.js";
import { Server } from "./server.js";
import { Settings } from "./settings.js";
import { SshKey } from "./sshkey.js";
import { Stripe } from "./stripe.js";
import { Swarm } from "./swarm.js";
import { User } from "./user.js";
import { VolumeBackups } from "./volumebackups.js";

export class Dokploy extends ClientSDK {
  private _admin?: Admin;
  get admin(): Admin {
    return (this._admin ??= new Admin(this._options));
  }

  private _docker?: Docker;
  get docker(): Docker {
    return (this._docker ??= new Docker(this._options));
  }

  private _project?: Project;
  get project(): Project {
    return (this._project ??= new Project(this._options));
  }

  private _application?: Application;
  get application(): Application {
    return (this._application ??= new Application(this._options));
  }

  private _mysql?: Mysql;
  get mysql(): Mysql {
    return (this._mysql ??= new Mysql(this._options));
  }

  private _postgres?: Postgres;
  get postgres(): Postgres {
    return (this._postgres ??= new Postgres(this._options));
  }

  private _redis?: Redis;
  get redis(): Redis {
    return (this._redis ??= new Redis(this._options));
  }

  private _mongo?: Mongo;
  get mongo(): Mongo {
    return (this._mongo ??= new Mongo(this._options));
  }

  private _mariadb?: Mariadb;
  get mariadb(): Mariadb {
    return (this._mariadb ??= new Mariadb(this._options));
  }

  private _compose?: Compose;
  get compose(): Compose {
    return (this._compose ??= new Compose(this._options));
  }

  private _user?: User;
  get user(): User {
    return (this._user ??= new User(this._options));
  }

  private _domain?: Domain;
  get domain(): Domain {
    return (this._domain ??= new Domain(this._options));
  }

  private _destination?: Destination;
  get destination(): Destination {
    return (this._destination ??= new Destination(this._options));
  }

  private _backup?: Backup;
  get backup(): Backup {
    return (this._backup ??= new Backup(this._options));
  }

  private _deployment?: Deployment;
  get deployment(): Deployment {
    return (this._deployment ??= new Deployment(this._options));
  }

  private _previewDeployment?: PreviewDeployment;
  get previewDeployment(): PreviewDeployment {
    return (this._previewDeployment ??= new PreviewDeployment(this._options));
  }

  private _mounts?: Mounts;
  get mounts(): Mounts {
    return (this._mounts ??= new Mounts(this._options));
  }

  private _certificates?: Certificates;
  get certificates(): Certificates {
    return (this._certificates ??= new Certificates(this._options));
  }

  private _settings?: Settings;
  get settings(): Settings {
    return (this._settings ??= new Settings(this._options));
  }

  private _security?: Security;
  get security(): Security {
    return (this._security ??= new Security(this._options));
  }

  private _redirects?: Redirects;
  get redirects(): Redirects {
    return (this._redirects ??= new Redirects(this._options));
  }

  private _port?: Port;
  get port(): Port {
    return (this._port ??= new Port(this._options));
  }

  private _registry?: Registry;
  get registry(): Registry {
    return (this._registry ??= new Registry(this._options));
  }

  private _cluster?: Cluster;
  get cluster(): Cluster {
    return (this._cluster ??= new Cluster(this._options));
  }

  private _notification?: Notification;
  get notification(): Notification {
    return (this._notification ??= new Notification(this._options));
  }

  private _sshKey?: SshKey;
  get sshKey(): SshKey {
    return (this._sshKey ??= new SshKey(this._options));
  }

  private _gitProvider?: GitProvider;
  get gitProvider(): GitProvider {
    return (this._gitProvider ??= new GitProvider(this._options));
  }

  private _gitea?: Gitea;
  get gitea(): Gitea {
    return (this._gitea ??= new Gitea(this._options));
  }

  private _bitbucket?: Bitbucket;
  get bitbucket(): Bitbucket {
    return (this._bitbucket ??= new Bitbucket(this._options));
  }

  private _gitlab?: Gitlab;
  get gitlab(): Gitlab {
    return (this._gitlab ??= new Gitlab(this._options));
  }

  private _github?: Github;
  get github(): Github {
    return (this._github ??= new Github(this._options));
  }

  private _server?: Server;
  get server(): Server {
    return (this._server ??= new Server(this._options));
  }

  private _stripe?: Stripe;
  get stripe(): Stripe {
    return (this._stripe ??= new Stripe(this._options));
  }

  private _swarm?: Swarm;
  get swarm(): Swarm {
    return (this._swarm ??= new Swarm(this._options));
  }

  private _ai?: Ai;
  get ai(): Ai {
    return (this._ai ??= new Ai(this._options));
  }

  private _organization?: Organization;
  get organization(): Organization {
    return (this._organization ??= new Organization(this._options));
  }

  private _schedule?: Schedule;
  get schedule(): Schedule {
    return (this._schedule ??= new Schedule(this._options));
  }

  private _rollback?: Rollback;
  get rollback(): Rollback {
    return (this._rollback ??= new Rollback(this._options));
  }

  private _volumeBackups?: VolumeBackups;
  get volumeBackups(): VolumeBackups {
    return (this._volumeBackups ??= new VolumeBackups(this._options));
  }

  private _environment?: Environment;
  get environment(): Environment {
    return (this._environment ??= new Environment(this._options));
  }
}
