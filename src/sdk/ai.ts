/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { aiAiCreate } from "../funcs/aiAiCreate.js";
import { aiAiDelete } from "../funcs/aiAiDelete.js";
import { aiAiDeploy } from "../funcs/aiAiDeploy.js";
import { aiAiGet } from "../funcs/aiAiGet.js";
import { aiAiGetAll } from "../funcs/aiAiGetAll.js";
import { aiAiGetModels } from "../funcs/aiAiGetModels.js";
import { aiAiOne } from "../funcs/aiAiOne.js";
import { aiAiSuggest } from "../funcs/aiAiSuggest.js";
import { aiAiUpdate } from "../funcs/aiAiUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Ai extends ClientSDK {
  async aiOne(
    security: operations.AiOneSecurity,
    request: operations.AiOneRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(aiAiOne(
      this,
      security,
      request,
      options,
    ));
  }

  async aiGetModels(
    security: operations.AiGetModelsSecurity,
    request: operations.AiGetModelsRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(aiAiGetModels(
      this,
      security,
      request,
      options,
    ));
  }

  async aiCreate(
    security: operations.AiCreateSecurity,
    request: operations.AiCreateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(aiAiCreate(
      this,
      security,
      request,
      options,
    ));
  }

  async aiUpdate(
    security: operations.AiUpdateSecurity,
    request: operations.AiUpdateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(aiAiUpdate(
      this,
      security,
      request,
      options,
    ));
  }

  async aiGetAll(
    security: operations.AiGetAllSecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(aiAiGetAll(
      this,
      security,
      options,
    ));
  }

  async aiGet(
    security: operations.AiGetSecurity,
    request: operations.AiGetRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(aiAiGet(
      this,
      security,
      request,
      options,
    ));
  }

  async aiDelete(
    security: operations.AiDeleteSecurity,
    request: operations.AiDeleteRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(aiAiDelete(
      this,
      security,
      request,
      options,
    ));
  }

  async aiSuggest(
    security: operations.AiSuggestSecurity,
    request: operations.AiSuggestRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(aiAiSuggest(
      this,
      security,
      request,
      options,
    ));
  }

  async aiDeploy(
    security: operations.AiDeploySecurity,
    request: operations.AiDeployRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(aiAiDeploy(
      this,
      security,
      request,
      options,
    ));
  }
}
