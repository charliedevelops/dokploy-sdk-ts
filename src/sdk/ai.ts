/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { aiCreate } from "../funcs/aiCreate.js";
import { aiDelete } from "../funcs/aiDelete.js";
import { aiDeploy } from "../funcs/aiDeploy.js";
import { aiGet } from "../funcs/aiGet.js";
import { aiGetAll } from "../funcs/aiGetAll.js";
import { aiGetModels } from "../funcs/aiGetModels.js";
import { aiGetOne } from "../funcs/aiGetOne.js";
import { aiSuggest } from "../funcs/aiSuggest.js";
import { aiUpdate } from "../funcs/aiUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Ai extends ClientSDK {
  async create(
    request: operations.AiCreateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(aiCreate(
      this,
      request,
      options,
    ));
  }

  async delete(
    request: operations.AiDeleteRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(aiDelete(
      this,
      request,
      options,
    ));
  }

  async deploy(
    request: operations.AiDeployRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(aiDeploy(
      this,
      request,
      options,
    ));
  }

  async get(
    request: operations.AiGetRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(aiGet(
      this,
      request,
      options,
    ));
  }

  async getAll(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(aiGetAll(
      this,
      options,
    ));
  }

  async getModels(
    request: operations.AiGetModelsRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(aiGetModels(
      this,
      request,
      options,
    ));
  }

  async getOne(
    request: operations.AiOneRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(aiGetOne(
      this,
      request,
      options,
    ));
  }

  async suggest(
    request: operations.AiSuggestRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(aiSuggest(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.AiUpdateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(aiUpdate(
      this,
      request,
      options,
    ));
  }
}
