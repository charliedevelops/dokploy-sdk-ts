/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { redisRedisChangeStatus } from "../funcs/redisRedisChangeStatus.js";
import { redisRedisCreate } from "../funcs/redisRedisCreate.js";
import { redisRedisDeploy } from "../funcs/redisRedisDeploy.js";
import { redisRedisMove } from "../funcs/redisRedisMove.js";
import { redisRedisOne } from "../funcs/redisRedisOne.js";
import { redisRedisRebuild } from "../funcs/redisRedisRebuild.js";
import { redisRedisReload } from "../funcs/redisRedisReload.js";
import { redisRedisRemove } from "../funcs/redisRedisRemove.js";
import { redisRedisSaveEnvironment } from "../funcs/redisRedisSaveEnvironment.js";
import { redisRedisSaveExternalPort } from "../funcs/redisRedisSaveExternalPort.js";
import { redisRedisStart } from "../funcs/redisRedisStart.js";
import { redisRedisStop } from "../funcs/redisRedisStop.js";
import { redisRedisUpdate } from "../funcs/redisRedisUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Redis extends ClientSDK {
  async redisCreate(
    security: operations.RedisCreateSecurity,
    request: operations.RedisCreateRequest,
    options?: RequestOptions,
  ): Promise<operations.RedisCreateResponse> {
    return unwrapAsync(redisRedisCreate(
      this,
      security,
      request,
      options,
    ));
  }

  async redisOne(
    security: operations.RedisOneSecurity,
    request: operations.RedisOneRequest,
    options?: RequestOptions,
  ): Promise<operations.RedisOneResponse> {
    return unwrapAsync(redisRedisOne(
      this,
      security,
      request,
      options,
    ));
  }

  async redisStart(
    security: operations.RedisStartSecurity,
    request: operations.RedisStartRequest,
    options?: RequestOptions,
  ): Promise<operations.RedisStartResponse> {
    return unwrapAsync(redisRedisStart(
      this,
      security,
      request,
      options,
    ));
  }

  async redisReload(
    security: operations.RedisReloadSecurity,
    request: operations.RedisReloadRequest,
    options?: RequestOptions,
  ): Promise<operations.RedisReloadResponse> {
    return unwrapAsync(redisRedisReload(
      this,
      security,
      request,
      options,
    ));
  }

  async redisStop(
    security: operations.RedisStopSecurity,
    request: operations.RedisStopRequest,
    options?: RequestOptions,
  ): Promise<operations.RedisStopResponse> {
    return unwrapAsync(redisRedisStop(
      this,
      security,
      request,
      options,
    ));
  }

  async redisSaveExternalPort(
    security: operations.RedisSaveExternalPortSecurity,
    request: operations.RedisSaveExternalPortRequest,
    options?: RequestOptions,
  ): Promise<operations.RedisSaveExternalPortResponse> {
    return unwrapAsync(redisRedisSaveExternalPort(
      this,
      security,
      request,
      options,
    ));
  }

  async redisDeploy(
    security: operations.RedisDeploySecurity,
    request: operations.RedisDeployRequest,
    options?: RequestOptions,
  ): Promise<operations.RedisDeployResponse> {
    return unwrapAsync(redisRedisDeploy(
      this,
      security,
      request,
      options,
    ));
  }

  async redisChangeStatus(
    security: operations.RedisChangeStatusSecurity,
    request: operations.RedisChangeStatusRequest,
    options?: RequestOptions,
  ): Promise<operations.RedisChangeStatusResponse> {
    return unwrapAsync(redisRedisChangeStatus(
      this,
      security,
      request,
      options,
    ));
  }

  async redisRemove(
    security: operations.RedisRemoveSecurity,
    request: operations.RedisRemoveRequest,
    options?: RequestOptions,
  ): Promise<operations.RedisRemoveResponse> {
    return unwrapAsync(redisRedisRemove(
      this,
      security,
      request,
      options,
    ));
  }

  async redisSaveEnvironment(
    security: operations.RedisSaveEnvironmentSecurity,
    request: operations.RedisSaveEnvironmentRequest,
    options?: RequestOptions,
  ): Promise<operations.RedisSaveEnvironmentResponse> {
    return unwrapAsync(redisRedisSaveEnvironment(
      this,
      security,
      request,
      options,
    ));
  }

  async redisUpdate(
    security: operations.RedisUpdateSecurity,
    request: operations.RedisUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.RedisUpdateResponse> {
    return unwrapAsync(redisRedisUpdate(
      this,
      security,
      request,
      options,
    ));
  }

  async redisMove(
    security: operations.RedisMoveSecurity,
    request: operations.RedisMoveRequest,
    options?: RequestOptions,
  ): Promise<operations.RedisMoveResponse> {
    return unwrapAsync(redisRedisMove(
      this,
      security,
      request,
      options,
    ));
  }

  async redisRebuild(
    security: operations.RedisRebuildSecurity,
    request: operations.RedisRebuildRequest,
    options?: RequestOptions,
  ): Promise<operations.RedisRebuildResponse> {
    return unwrapAsync(redisRedisRebuild(
      this,
      security,
      request,
      options,
    ));
  }
}
