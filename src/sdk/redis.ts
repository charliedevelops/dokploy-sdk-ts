/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { redisChangeStatus } from "../funcs/redisChangeStatus.js";
import { redisCreate } from "../funcs/redisCreate.js";
import { redisDeploy } from "../funcs/redisDeploy.js";
import { redisGetOne } from "../funcs/redisGetOne.js";
import { redisMove } from "../funcs/redisMove.js";
import { redisRebuild } from "../funcs/redisRebuild.js";
import { redisReload } from "../funcs/redisReload.js";
import { redisRemove } from "../funcs/redisRemove.js";
import { redisSaveEnvironment } from "../funcs/redisSaveEnvironment.js";
import { redisSaveExternalPort } from "../funcs/redisSaveExternalPort.js";
import { redisStart } from "../funcs/redisStart.js";
import { redisStop } from "../funcs/redisStop.js";
import { redisUpdate } from "../funcs/redisUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Redis extends ClientSDK {
  async changeStatus(
    request: operations.RedisChangeStatusRequest,
    options?: RequestOptions,
  ): Promise<operations.RedisChangeStatusResponse> {
    return unwrapAsync(redisChangeStatus(
      this,
      request,
      options,
    ));
  }

  async create(
    request: operations.RedisCreateRequest,
    options?: RequestOptions,
  ): Promise<operations.RedisCreateResponse> {
    return unwrapAsync(redisCreate(
      this,
      request,
      options,
    ));
  }

  async deploy(
    request: operations.RedisDeployRequest,
    options?: RequestOptions,
  ): Promise<operations.RedisDeployResponse> {
    return unwrapAsync(redisDeploy(
      this,
      request,
      options,
    ));
  }

  async move(
    request: operations.RedisMoveRequest,
    options?: RequestOptions,
  ): Promise<operations.RedisMoveResponse> {
    return unwrapAsync(redisMove(
      this,
      request,
      options,
    ));
  }

  async getOne(
    request: operations.RedisOneRequest,
    options?: RequestOptions,
  ): Promise<operations.RedisOneResponse> {
    return unwrapAsync(redisGetOne(
      this,
      request,
      options,
    ));
  }

  async rebuild(
    request: operations.RedisRebuildRequest,
    options?: RequestOptions,
  ): Promise<operations.RedisRebuildResponse> {
    return unwrapAsync(redisRebuild(
      this,
      request,
      options,
    ));
  }

  async reload(
    request: operations.RedisReloadRequest,
    options?: RequestOptions,
  ): Promise<operations.RedisReloadResponse> {
    return unwrapAsync(redisReload(
      this,
      request,
      options,
    ));
  }

  async remove(
    request: operations.RedisRemoveRequest,
    options?: RequestOptions,
  ): Promise<operations.RedisRemoveResponse> {
    return unwrapAsync(redisRemove(
      this,
      request,
      options,
    ));
  }

  async saveEnvironment(
    request: operations.RedisSaveEnvironmentRequest,
    options?: RequestOptions,
  ): Promise<operations.RedisSaveEnvironmentResponse> {
    return unwrapAsync(redisSaveEnvironment(
      this,
      request,
      options,
    ));
  }

  async saveExternalPort(
    request: operations.RedisSaveExternalPortRequest,
    options?: RequestOptions,
  ): Promise<operations.RedisSaveExternalPortResponse> {
    return unwrapAsync(redisSaveExternalPort(
      this,
      request,
      options,
    ));
  }

  async start(
    request: operations.RedisStartRequest,
    options?: RequestOptions,
  ): Promise<operations.RedisStartResponse> {
    return unwrapAsync(redisStart(
      this,
      request,
      options,
    ));
  }

  async stop(
    request: operations.RedisStopRequest,
    options?: RequestOptions,
  ): Promise<operations.RedisStopResponse> {
    return unwrapAsync(redisStop(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.RedisUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.RedisUpdateResponse> {
    return unwrapAsync(redisUpdate(
      this,
      request,
      options,
    ));
  }
}
