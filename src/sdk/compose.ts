/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { composeCancelDeployment } from "../funcs/composeCancelDeployment.js";
import { composeCleanQueues } from "../funcs/composeCleanQueues.js";
import { composeCreate } from "../funcs/composeCreate.js";
import { composeDelete } from "../funcs/composeDelete.js";
import { composeDeploy } from "../funcs/composeDeploy.js";
import { composeDeployTemplate } from "../funcs/composeDeployTemplate.js";
import { composeDisconnectGitprovider } from "../funcs/composeDisconnectGitprovider.js";
import { composeFetchSourceType } from "../funcs/composeFetchSourceType.js";
import { composeGetConvertedCompose } from "../funcs/composeGetConvertedCompose.js";
import { composeGetDefaultCommand } from "../funcs/composeGetDefaultCommand.js";
import { composeGetTags } from "../funcs/composeGetTags.js";
import { composeGetTemplates } from "../funcs/composeGetTemplates.js";
import { composeImport } from "../funcs/composeImport.js";
import { composeIsolatedDeployment } from "../funcs/composeIsolatedDeployment.js";
import { composeLoadMountsByService } from "../funcs/composeLoadMountsByService.js";
import { composeMove } from "../funcs/composeMove.js";
import { composeOne } from "../funcs/composeOne.js";
import { composeProcessTemplate } from "../funcs/composeProcessTemplate.js";
import { composeRandomizeCompose } from "../funcs/composeRandomizeCompose.js";
import { composeRedeploy } from "../funcs/composeRedeploy.js";
import { composeRefreshToken } from "../funcs/composeRefreshToken.js";
import { composeStart } from "../funcs/composeStart.js";
import { composeStop } from "../funcs/composeStop.js";
import { composeUpdate } from "../funcs/composeUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Compose extends ClientSDK {
  async cancelDeployment(
    request: operations.ComposeCancelDeploymentRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeCancelDeployment(
      this,
      request,
      options,
    ));
  }

  async cleanQueues(
    request: operations.ComposeCleanQueuesRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeCleanQueues(
      this,
      request,
      options,
    ));
  }

  async create(
    request: operations.ComposeCreateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeCreate(
      this,
      request,
      options,
    ));
  }

  async delete(
    request: operations.ComposeDeleteRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeDelete(
      this,
      request,
      options,
    ));
  }

  async deploy(
    request: operations.ComposeDeployRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeDeploy(
      this,
      request,
      options,
    ));
  }

  async deployTemplate(
    request: operations.ComposeDeployTemplateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeDeployTemplate(
      this,
      request,
      options,
    ));
  }

  async disconnectGitprovider(
    request: operations.ComposeDisconnectGitProviderRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeDisconnectGitprovider(
      this,
      request,
      options,
    ));
  }

  async fetchSourceType(
    request: operations.ComposeFetchSourceTypeRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeFetchSourceType(
      this,
      request,
      options,
    ));
  }

  async getConvertedCompose(
    request: operations.ComposeGetConvertedComposeRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeGetConvertedCompose(
      this,
      request,
      options,
    ));
  }

  async getDefaultCommand(
    request: operations.ComposeGetDefaultCommandRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeGetDefaultCommand(
      this,
      request,
      options,
    ));
  }

  async getTags(
    request?: operations.ComposeGetTagsRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeGetTags(
      this,
      request,
      options,
    ));
  }

  async import(
    request: operations.ComposeImportRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeImport(
      this,
      request,
      options,
    ));
  }

  async isolatedDeployment(
    request: operations.ComposeIsolatedDeploymentRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeIsolatedDeployment(
      this,
      request,
      options,
    ));
  }

  async loadMountsByService(
    request: operations.ComposeLoadMountsByServiceRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeLoadMountsByService(
      this,
      request,
      options,
    ));
  }

  async move(
    request: operations.ComposeMoveRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeMove(
      this,
      request,
      options,
    ));
  }

  async one(
    request: operations.ComposeOneRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeOne(
      this,
      request,
      options,
    ));
  }

  async processTemplate(
    request: operations.ComposeProcessTemplateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeProcessTemplate(
      this,
      request,
      options,
    ));
  }

  async randomizeCompose(
    request: operations.ComposeRandomizeComposeRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeRandomizeCompose(
      this,
      request,
      options,
    ));
  }

  async redeploy(
    request: operations.ComposeRedeployRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeRedeploy(
      this,
      request,
      options,
    ));
  }

  async refreshToken(
    request: operations.ComposeRefreshTokenRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeRefreshToken(
      this,
      request,
      options,
    ));
  }

  async start(
    request: operations.ComposeStartRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeStart(
      this,
      request,
      options,
    ));
  }

  async stop(
    request: operations.ComposeStopRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeStop(
      this,
      request,
      options,
    ));
  }

  async getTemplates(
    request?: operations.ComposeTemplatesRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeGetTemplates(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.ComposeUpdateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeUpdate(
      this,
      request,
      options,
    ));
  }
}
