/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { composeComposeCancelDeployment } from "../funcs/composeComposeCancelDeployment.js";
import { composeComposeCleanQueues } from "../funcs/composeComposeCleanQueues.js";
import { composeComposeCreate } from "../funcs/composeComposeCreate.js";
import { composeComposeDelete } from "../funcs/composeComposeDelete.js";
import { composeComposeDeploy } from "../funcs/composeComposeDeploy.js";
import { composeComposeDeployTemplate } from "../funcs/composeComposeDeployTemplate.js";
import { composeComposeDisconnectGitProvider } from "../funcs/composeComposeDisconnectGitProvider.js";
import { composeComposeFetchSourceType } from "../funcs/composeComposeFetchSourceType.js";
import { composeComposeGetConvertedCompose } from "../funcs/composeComposeGetConvertedCompose.js";
import { composeComposeGetDefaultCommand } from "../funcs/composeComposeGetDefaultCommand.js";
import { composeComposeGetTags } from "../funcs/composeComposeGetTags.js";
import { composeComposeImport } from "../funcs/composeComposeImport.js";
import { composeComposeIsolatedDeployment } from "../funcs/composeComposeIsolatedDeployment.js";
import { composeComposeLoadMountsByService } from "../funcs/composeComposeLoadMountsByService.js";
import { composeComposeMove } from "../funcs/composeComposeMove.js";
import { composeComposeOne } from "../funcs/composeComposeOne.js";
import { composeComposeProcessTemplate } from "../funcs/composeComposeProcessTemplate.js";
import { composeComposeRandomizeCompose } from "../funcs/composeComposeRandomizeCompose.js";
import { composeComposeRedeploy } from "../funcs/composeComposeRedeploy.js";
import { composeComposeRefreshToken } from "../funcs/composeComposeRefreshToken.js";
import { composeComposeStart } from "../funcs/composeComposeStart.js";
import { composeComposeStop } from "../funcs/composeComposeStop.js";
import { composeComposeTemplates } from "../funcs/composeComposeTemplates.js";
import { composeComposeUpdate } from "../funcs/composeComposeUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Compose extends ClientSDK {
  async composeCancelDeployment(
    security: operations.ComposeCancelDeploymentSecurity,
    request: operations.ComposeCancelDeploymentRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeComposeCancelDeployment(
      this,
      security,
      request,
      options,
    ));
  }

  async composeCleanQueues(
    security: operations.ComposeCleanQueuesSecurity,
    request: operations.ComposeCleanQueuesRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeComposeCleanQueues(
      this,
      security,
      request,
      options,
    ));
  }

  async composeCreate(
    security: operations.ComposeCreateSecurity,
    request: operations.ComposeCreateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeComposeCreate(
      this,
      security,
      request,
      options,
    ));
  }

  async composeDelete(
    security: operations.ComposeDeleteSecurity,
    request: operations.ComposeDeleteRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeComposeDelete(
      this,
      security,
      request,
      options,
    ));
  }

  async composeDeploy(
    security: operations.ComposeDeploySecurity,
    request: operations.ComposeDeployRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeComposeDeploy(
      this,
      security,
      request,
      options,
    ));
  }

  async composeDeployTemplate(
    security: operations.ComposeDeployTemplateSecurity,
    request: operations.ComposeDeployTemplateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeComposeDeployTemplate(
      this,
      security,
      request,
      options,
    ));
  }

  async composeDisconnectGitProvider(
    security: operations.ComposeDisconnectGitProviderSecurity,
    request: operations.ComposeDisconnectGitProviderRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeComposeDisconnectGitProvider(
      this,
      security,
      request,
      options,
    ));
  }

  async composeFetchSourceType(
    security: operations.ComposeFetchSourceTypeSecurity,
    request: operations.ComposeFetchSourceTypeRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeComposeFetchSourceType(
      this,
      security,
      request,
      options,
    ));
  }

  async composeGetConvertedCompose(
    security: operations.ComposeGetConvertedComposeSecurity,
    request: operations.ComposeGetConvertedComposeRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeComposeGetConvertedCompose(
      this,
      security,
      request,
      options,
    ));
  }

  async composeGetDefaultCommand(
    security: operations.ComposeGetDefaultCommandSecurity,
    request: operations.ComposeGetDefaultCommandRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeComposeGetDefaultCommand(
      this,
      security,
      request,
      options,
    ));
  }

  async composeGetTags(
    security: operations.ComposeGetTagsSecurity,
    request?: operations.ComposeGetTagsRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeComposeGetTags(
      this,
      security,
      request,
      options,
    ));
  }

  async composeImport(
    security: operations.ComposeImportSecurity,
    request: operations.ComposeImportRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeComposeImport(
      this,
      security,
      request,
      options,
    ));
  }

  async composeIsolatedDeployment(
    security: operations.ComposeIsolatedDeploymentSecurity,
    request: operations.ComposeIsolatedDeploymentRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeComposeIsolatedDeployment(
      this,
      security,
      request,
      options,
    ));
  }

  async composeLoadMountsByService(
    security: operations.ComposeLoadMountsByServiceSecurity,
    request: operations.ComposeLoadMountsByServiceRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeComposeLoadMountsByService(
      this,
      security,
      request,
      options,
    ));
  }

  async composeMove(
    security: operations.ComposeMoveSecurity,
    request: operations.ComposeMoveRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeComposeMove(
      this,
      security,
      request,
      options,
    ));
  }

  async composeOne(
    security: operations.ComposeOneSecurity,
    request: operations.ComposeOneRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeComposeOne(
      this,
      security,
      request,
      options,
    ));
  }

  async composeProcessTemplate(
    security: operations.ComposeProcessTemplateSecurity,
    request: operations.ComposeProcessTemplateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeComposeProcessTemplate(
      this,
      security,
      request,
      options,
    ));
  }

  async composeRandomizeCompose(
    security: operations.ComposeRandomizeComposeSecurity,
    request: operations.ComposeRandomizeComposeRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeComposeRandomizeCompose(
      this,
      security,
      request,
      options,
    ));
  }

  async composeRedeploy(
    security: operations.ComposeRedeploySecurity,
    request: operations.ComposeRedeployRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeComposeRedeploy(
      this,
      security,
      request,
      options,
    ));
  }

  async composeRefreshToken(
    security: operations.ComposeRefreshTokenSecurity,
    request: operations.ComposeRefreshTokenRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeComposeRefreshToken(
      this,
      security,
      request,
      options,
    ));
  }

  async composeStart(
    security: operations.ComposeStartSecurity,
    request: operations.ComposeStartRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeComposeStart(
      this,
      security,
      request,
      options,
    ));
  }

  async composeStop(
    security: operations.ComposeStopSecurity,
    request: operations.ComposeStopRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeComposeStop(
      this,
      security,
      request,
      options,
    ));
  }

  async composeTemplates(
    security: operations.ComposeTemplatesSecurity,
    request?: operations.ComposeTemplatesRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeComposeTemplates(
      this,
      security,
      request,
      options,
    ));
  }

  async composeUpdate(
    security: operations.ComposeUpdateSecurity,
    request: operations.ComposeUpdateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(composeComposeUpdate(
      this,
      security,
      request,
      options,
    ));
  }
}
