/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { sshKeySshKeyAll } from "../funcs/sshKeySshKeyAll.js";
import { sshKeySshKeyCreate } from "../funcs/sshKeySshKeyCreate.js";
import { sshKeySshKeyGenerate } from "../funcs/sshKeySshKeyGenerate.js";
import { sshKeySshKeyOne } from "../funcs/sshKeySshKeyOne.js";
import { sshKeySshKeyRemove } from "../funcs/sshKeySshKeyRemove.js";
import { sshKeySshKeyUpdate } from "../funcs/sshKeySshKeyUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class SshKey extends ClientSDK {
  async sshKeyCreate(
    security: operations.SshKeyCreateSecurity,
    request: operations.SshKeyCreateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(sshKeySshKeyCreate(
      this,
      security,
      request,
      options,
    ));
  }

  async sshKeyRemove(
    security: operations.SshKeyRemoveSecurity,
    request: operations.SshKeyRemoveRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(sshKeySshKeyRemove(
      this,
      security,
      request,
      options,
    ));
  }

  async sshKeyOne(
    security: operations.SshKeyOneSecurity,
    request: operations.SshKeyOneRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(sshKeySshKeyOne(
      this,
      security,
      request,
      options,
    ));
  }

  async sshKeyAll(
    security: operations.SshKeyAllSecurity,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(sshKeySshKeyAll(
      this,
      security,
      options,
    ));
  }

  async sshKeyGenerate(
    security: operations.SshKeyGenerateSecurity,
    request: operations.SshKeyGenerateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(sshKeySshKeyGenerate(
      this,
      security,
      request,
      options,
    ));
  }

  async sshKeyUpdate(
    security: operations.SshKeyUpdateSecurity,
    request: operations.SshKeyUpdateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(sshKeySshKeyUpdate(
      this,
      security,
      request,
      options,
    ));
  }
}
