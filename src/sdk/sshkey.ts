/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { sshKeyAll } from "../funcs/sshKeyAll.js";
import { sshKeyCreate } from "../funcs/sshKeyCreate.js";
import { sshKeyGet } from "../funcs/sshKeyGet.js";
import { sshKeyRemove } from "../funcs/sshKeyRemove.js";
import { sshKeyUpdate } from "../funcs/sshKeyUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class SshKey extends ClientSDK {
  async all(
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(sshKeyAll(
      this,
      options,
    ));
  }

  async create(
    request: operations.SshKeyCreateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(sshKeyCreate(
      this,
      request,
      options,
    ));
  }

  async get(
    request: operations.SshKeyOneRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(sshKeyGet(
      this,
      request,
      options,
    ));
  }

  async remove(
    request: operations.SshKeyRemoveRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(sshKeyRemove(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.SshKeyUpdateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(sshKeyUpdate(
      this,
      request,
      options,
    ));
  }
}
