/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { bitbucketCreate } from "../funcs/bitbucketCreate.js";
import { bitbucketGetBranches } from "../funcs/bitbucketGetBranches.js";
import { bitbucketGetOne } from "../funcs/bitbucketGetOne.js";
import { bitbucketGetRepositories } from "../funcs/bitbucketGetRepositories.js";
import { bitbucketTestConnection } from "../funcs/bitbucketTestConnection.js";
import { bitbucketUpdate } from "../funcs/bitbucketUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { BitbucketGet } from "./bitbucketget.js";

export class Bitbucket extends ClientSDK {
  private _get?: BitbucketGet;
  get get(): BitbucketGet {
    return (this._get ??= new BitbucketGet(this._options));
  }

  async create(
    request: operations.BitbucketCreateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(bitbucketCreate(
      this,
      request,
      options,
    ));
  }

  async getBranches(
    request: operations.BitbucketGetBitbucketBranchesRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(bitbucketGetBranches(
      this,
      request,
      options,
    ));
  }

  async getRepositories(
    request: operations.BitbucketGetBitbucketRepositoriesRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(bitbucketGetRepositories(
      this,
      request,
      options,
    ));
  }

  async getOne(
    request: operations.BitbucketOneRequest,
    options?: RequestOptions,
  ): Promise<operations.BitbucketOneResponse> {
    return unwrapAsync(bitbucketGetOne(
      this,
      request,
      options,
    ));
  }

  async testConnection(
    request: operations.BitbucketTestConnectionRequest,
    options?: RequestOptions,
  ): Promise<operations.BitbucketTestConnectionResponse> {
    return unwrapAsync(bitbucketTestConnection(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.BitbucketUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.BitbucketUpdateResponse> {
    return unwrapAsync(bitbucketUpdate(
      this,
      request,
      options,
    ));
  }
}
