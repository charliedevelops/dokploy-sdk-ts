/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { bitbucketBitbucketBitbucketProviders } from "../funcs/bitbucketBitbucketBitbucketProviders.js";
import { bitbucketBitbucketCreate } from "../funcs/bitbucketBitbucketCreate.js";
import { bitbucketBitbucketGetBitbucketBranches } from "../funcs/bitbucketBitbucketGetBitbucketBranches.js";
import { bitbucketBitbucketGetBitbucketRepositories } from "../funcs/bitbucketBitbucketGetBitbucketRepositories.js";
import { bitbucketBitbucketOne } from "../funcs/bitbucketBitbucketOne.js";
import { bitbucketBitbucketTestConnection } from "../funcs/bitbucketBitbucketTestConnection.js";
import { bitbucketBitbucketUpdate } from "../funcs/bitbucketBitbucketUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Bitbucket extends ClientSDK {
  async bitbucketBitbucketProviders(
    security: operations.BitbucketBitbucketProvidersSecurity,
    options?: RequestOptions,
  ): Promise<operations.BitbucketBitbucketProvidersResponse> {
    return unwrapAsync(bitbucketBitbucketBitbucketProviders(
      this,
      security,
      options,
    ));
  }

  async bitbucketCreate(
    security: operations.BitbucketCreateSecurity,
    request: operations.BitbucketCreateRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(bitbucketBitbucketCreate(
      this,
      security,
      request,
      options,
    ));
  }

  async bitbucketGetBitbucketBranches(
    security: operations.BitbucketGetBitbucketBranchesSecurity,
    request: operations.BitbucketGetBitbucketBranchesRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(bitbucketBitbucketGetBitbucketBranches(
      this,
      security,
      request,
      options,
    ));
  }

  async bitbucketGetBitbucketRepositories(
    security: operations.BitbucketGetBitbucketRepositoriesSecurity,
    request: operations.BitbucketGetBitbucketRepositoriesRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(bitbucketBitbucketGetBitbucketRepositories(
      this,
      security,
      request,
      options,
    ));
  }

  async bitbucketOne(
    security: operations.BitbucketOneSecurity,
    request: operations.BitbucketOneRequest,
    options?: RequestOptions,
  ): Promise<operations.BitbucketOneResponse> {
    return unwrapAsync(bitbucketBitbucketOne(
      this,
      security,
      request,
      options,
    ));
  }

  async bitbucketTestConnection(
    security: operations.BitbucketTestConnectionSecurity,
    request: operations.BitbucketTestConnectionRequest,
    options?: RequestOptions,
  ): Promise<operations.BitbucketTestConnectionResponse> {
    return unwrapAsync(bitbucketBitbucketTestConnection(
      this,
      security,
      request,
      options,
    ));
  }

  async bitbucketUpdate(
    security: operations.BitbucketUpdateSecurity,
    request: operations.BitbucketUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.BitbucketUpdateResponse> {
    return unwrapAsync(bitbucketBitbucketUpdate(
      this,
      security,
      request,
      options,
    ));
  }
}
