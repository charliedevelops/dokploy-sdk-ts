/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { giteaCreate } from "../funcs/giteaCreate.js";
import { giteaGet } from "../funcs/giteaGet.js";
import { giteaGetBranches } from "../funcs/giteaGetBranches.js";
import { giteaGetProviders } from "../funcs/giteaGetProviders.js";
import { giteaGetRepositories } from "../funcs/giteaGetRepositories.js";
import { giteaGetUrl } from "../funcs/giteaGetUrl.js";
import { giteaTestConnection } from "../funcs/giteaTestConnection.js";
import { giteaUpdate } from "../funcs/giteaUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Gitea extends ClientSDK {
  async create(
    request: operations.GiteaCreateRequest,
    options?: RequestOptions,
  ): Promise<operations.GiteaCreateResponse> {
    return unwrapAsync(giteaCreate(
      this,
      request,
      options,
    ));
  }

  async getBranches(
    request: operations.GiteaGetGiteaBranchesRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(giteaGetBranches(
      this,
      request,
      options,
    ));
  }

  async getRepositories(
    request: operations.GiteaGetGiteaRepositoriesRequest,
    options?: RequestOptions,
  ): Promise<models.ErrorT | undefined> {
    return unwrapAsync(giteaGetRepositories(
      this,
      request,
      options,
    ));
  }

  async getUrl(
    request: operations.GiteaGetGiteaUrlRequest,
    options?: RequestOptions,
  ): Promise<operations.GiteaGetGiteaUrlResponse> {
    return unwrapAsync(giteaGetUrl(
      this,
      request,
      options,
    ));
  }

  async getProviders(
    options?: RequestOptions,
  ): Promise<operations.GiteaGiteaProvidersResponse> {
    return unwrapAsync(giteaGetProviders(
      this,
      options,
    ));
  }

  async get(
    request: operations.GiteaOneRequest,
    options?: RequestOptions,
  ): Promise<operations.GiteaOneResponse> {
    return unwrapAsync(giteaGet(
      this,
      request,
      options,
    ));
  }

  async testConnection(
    request: operations.GiteaTestConnectionRequest,
    options?: RequestOptions,
  ): Promise<operations.GiteaTestConnectionResponse> {
    return unwrapAsync(giteaTestConnection(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.GiteaUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.GiteaUpdateResponse> {
    return unwrapAsync(giteaUpdate(
      this,
      request,
      options,
    ));
  }
}
